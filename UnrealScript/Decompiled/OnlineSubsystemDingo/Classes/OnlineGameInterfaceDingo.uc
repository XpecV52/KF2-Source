/*******************************************************************************
 * OnlineGameInterfaceDingo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineGameInterfaceDingo extends OnlineGameInterfaceImpl within OnlineSubsystemCommonImpl
    native
    config(Engine);

enum EMatchmakingStatus
{
    MMS_Canceled,
    MMS_Expired,
    MMS_Found,
    MMS_None,
    MMS_Searching,
    MMS_MAX
};

struct native SessionReserveInfo
{
    var const byte LocalUserNum;
    var const UniqueNetId PendingMember;
    var const float ReserveTimeRemaining;
    var const name SessionName;
    var const float ReserveTimeElapsed;

    structdefaultproperties
    {
        LocalUserNum=0
        PendingMember=(Uid=none)
        ReserveTimeRemaining=0
        SessionName=None
        ReserveTimeElapsed=0
    }
};

var array< delegate<OnQueryMatchmakingForSessionComplete> > QueryMatchmakingForSessionCompleteDelegates;
var array< delegate<OnDeleteMatchTicketComplete> > DeleteMatchTicketCompleteDelegates;
var array< delegate<OnUpdateSessionPropertiesComplete> > UpdateSessionPropertiesCompleteDelegates;
var array< delegate<OnGamePlayersChanged> > GamePlayersChangedDelegates;
var array< delegate<OnMatchStatusChanged> > MatchStatusChangedDelegates;
var array< delegate<OnQuerySessionsForUserComplete> > QuerySessionsForUserCompleteDelegates;
var array< delegate<OnRegisterPlayerComplete> > RegisterPlayerCompleteDelegates;
var array< delegate<OnUnregisterPlayerComplete> > UnregisterPlayerCompleteDelegates;
var array< delegate<OnMultiplayerSessionChange> > MultiplayerSessionChangeDelegates;
var array< delegate<OnGameInviteAccepted> > GameInviteAcceptedDelegates;
var config bool XboxServicesDebugLogging;
var array<name> PendingSessionLeaveNames;
var const config float SessionMemberReserveTimeout;
var array<SessionReserveInfo> ReservedSessionMembers;
var string SessionEventUniqueId;
var Guid SessionEventGuid;
var string SessionEventMultiplayerCorrelationId;
var float SessionEventStartTime;
var delegate<OnFindOnlineGamesComplete> __OnFindOnlineGamesComplete__Delegate;
var delegate<OnCreateOnlineGameComplete> __OnCreateOnlineGameComplete__Delegate;
var delegate<OnUpdateOnlineGameComplete> __OnUpdateOnlineGameComplete__Delegate;
var delegate<OnDestroyOnlineGameComplete> __OnDestroyOnlineGameComplete__Delegate;
var delegate<OnCancelFindOnlineGamesComplete> __OnCancelFindOnlineGamesComplete__Delegate;
var delegate<OnJoinOnlineGameComplete> __OnJoinOnlineGameComplete__Delegate;
var delegate<OnMultiplayerSessionChange> __OnMultiplayerSessionChange__Delegate;
var delegate<OnQueryMatchmakingForSessionComplete> __OnQueryMatchmakingForSessionComplete__Delegate;
var delegate<OnDeleteMatchTicketComplete> __OnDeleteMatchTicketComplete__Delegate;
var delegate<OnUpdateSessionPropertiesComplete> __OnUpdateSessionPropertiesComplete__Delegate;
var delegate<OnGamePlayersChanged> __OnGamePlayersChanged__Delegate;
var delegate<OnMatchStatusChanged> __OnMatchStatusChanged__Delegate;
var delegate<OnQuerySessionsForUserComplete> __OnQuerySessionsForUserComplete__Delegate;
var delegate<OnRegisterPlayerComplete> __OnRegisterPlayerComplete__Delegate;
var delegate<OnUnregisterPlayerComplete> __OnUnregisterPlayerComplete__Delegate;
var delegate<OnStartOnlineGameComplete> __OnStartOnlineGameComplete__Delegate;
var delegate<OnEndOnlineGameComplete> __OnEndOnlineGameComplete__Delegate;
var delegate<OnArbitrationRegistrationComplete> __OnArbitrationRegistrationComplete__Delegate;
var delegate<OnGameInviteAccepted> __OnGameInviteAccepted__Delegate;
var delegate<OnRecalculateSkillRatingComplete> __OnRecalculateSkillRatingComplete__Delegate;
var delegate<OnMigrateOnlineGameComplete> __OnMigrateOnlineGameComplete__Delegate;
var delegate<OnJoinMigratedOnlineGameComplete> __OnJoinMigratedOnlineGameComplete__Delegate;
var delegate<OnQosStatusChanged> __OnQosStatusChanged__Delegate;
var delegate<OnRetrievedGameSettingsForIP> __OnRetrievedGameSettingsForIP__Delegate;
var delegate<OnGetNumberOfCurrentPlayersComplete> __OnGetNumberOfCurrentPlayersComplete__Delegate;
var delegate<OnGetRoomIdFromTitleService> __OnGetRoomIdFromTitleService__Delegate;

delegate OnFindOnlineGamesComplete(bool bWasSuccessful);

function OnlineGameSettings GetGameSettings(name SessionName)
{
    local int SessionIndex;

    SessionIndex = Outer.Sessions.Find('SessionName', SessionName;
    if(SessionIndex != -1)
    {
        return Outer.Sessions[SessionIndex].GameSettings;
    }
    return none;
}

function OnlineGameSearch GetGameSearch()
{
    return GameSearch;
}

// Export UOnlineGameInterfaceDingo::execCreateOnlineGame(FFrame&, void* const)
native function bool CreateOnlineGame(byte HostingPlayerNum, name SessionName, OnlineGameSettings NewGameSettings);

delegate OnCreateOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddCreateOnlineGameCompleteDelegate(delegate<OnCreateOnlineGameComplete> CreateOnlineGameCompleteDelegate)
{
    if(CreateOnlineGameCompleteDelegates.Find(CreateOnlineGameCompleteDelegate == -1)
    {
        CreateOnlineGameCompleteDelegates[CreateOnlineGameCompleteDelegates.Length] = CreateOnlineGameCompleteDelegate;
    }
}

function ClearCreateOnlineGameCompleteDelegate(delegate<OnCreateOnlineGameComplete> CreateOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = CreateOnlineGameCompleteDelegates.Find(CreateOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        CreateOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execUpdateOnlineGame(FFrame&, void* const)
native function bool UpdateOnlineGame(name SessionName, OnlineGameSettings UpdatedGameSettings, optional bool bShouldRefreshOnlineData)
{
    bShouldRefreshOnlineData = false;                    
}

delegate OnUpdateOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddUpdateOnlineGameCompleteDelegate(delegate<OnUpdateOnlineGameComplete> UpdateOnlineGameCompleteDelegate)
{
    if(UpdateOnlineGameCompleteDelegates.Find(UpdateOnlineGameCompleteDelegate == -1)
    {
        UpdateOnlineGameCompleteDelegates[UpdateOnlineGameCompleteDelegates.Length] = UpdateOnlineGameCompleteDelegate;
    }
}

function ClearUpdateOnlineGameCompleteDelegate(delegate<OnUpdateOnlineGameComplete> UpdateOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = UpdateOnlineGameCompleteDelegates.Find(UpdateOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        UpdateOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execDestroyOnlineGame(FFrame&, void* const)
native function bool DestroyOnlineGame(name SessionName);

delegate OnDestroyOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddDestroyOnlineGameCompleteDelegate(delegate<OnDestroyOnlineGameComplete> DestroyOnlineGameCompleteDelegate)
{
    if(DestroyOnlineGameCompleteDelegates.Find(DestroyOnlineGameCompleteDelegate == -1)
    {
        DestroyOnlineGameCompleteDelegates[DestroyOnlineGameCompleteDelegates.Length] = DestroyOnlineGameCompleteDelegate;
    }
}

function ClearDestroyOnlineGameCompleteDelegate(delegate<OnDestroyOnlineGameComplete> DestroyOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = DestroyOnlineGameCompleteDelegates.Find(DestroyOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        DestroyOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execFindOnlineGames(FFrame&, void* const)
native function bool FindOnlineGames(byte SearchingPlayerNum, OnlineGameSearch SearchSettings);

function AddFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> FindOnlineGamesCompleteDelegate)
{
    if(FindOnlineGamesCompleteDelegates.Find(FindOnlineGamesCompleteDelegate == -1)
    {
        FindOnlineGamesCompleteDelegates[FindOnlineGamesCompleteDelegates.Length] = FindOnlineGamesCompleteDelegate;
    }
}

function ClearFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> FindOnlineGamesCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = FindOnlineGamesCompleteDelegates.Find(FindOnlineGamesCompleteDelegate;
    if(RemoveIndex != -1)
    {
        FindOnlineGamesCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execCancelFindOnlineGames(FFrame&, void* const)
native function bool CancelFindOnlineGames();

delegate OnCancelFindOnlineGamesComplete(bool bWasSuccessful);

function AddCancelFindOnlineGamesCompleteDelegate(delegate<OnCancelFindOnlineGamesComplete> CancelFindOnlineGamesCompleteDelegate)
{
    if(CancelFindOnlineGamesCompleteDelegates.Find(CancelFindOnlineGamesCompleteDelegate == -1)
    {
        CancelFindOnlineGamesCompleteDelegates[CancelFindOnlineGamesCompleteDelegates.Length] = CancelFindOnlineGamesCompleteDelegate;
    }
}

function ClearCancelFindOnlineGamesCompleteDelegate(delegate<OnCancelFindOnlineGamesComplete> CancelFindOnlineGamesCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = CancelFindOnlineGamesCompleteDelegates.Find(CancelFindOnlineGamesCompleteDelegate;
    if(RemoveIndex != -1)
    {
        CancelFindOnlineGamesCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execFreeSearchResults(FFrame&, void* const)
native function bool FreeSearchResults(OnlineGameSearch Search);

// Export UOnlineGameInterfaceDingo::execJoinOnlineGame(FFrame&, void* const)
native function bool JoinOnlineGame(byte PlayerNum, name SessionName, const out OnlineGameSearchResult DesiredGame);

// Export UOnlineGameInterfaceDingo::execJoinOnlineGameBySessionHandle(FFrame&, void* const)
native function bool JoinOnlineGameBySessionHandle(byte PlayerNum, name SessionName, const string InSessionGuid);

delegate OnJoinOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddJoinOnlineGameCompleteDelegate(delegate<OnJoinOnlineGameComplete> JoinOnlineGameCompleteDelegate)
{
    if(JoinOnlineGameCompleteDelegates.Find(JoinOnlineGameCompleteDelegate == -1)
    {
        JoinOnlineGameCompleteDelegates[JoinOnlineGameCompleteDelegates.Length] = JoinOnlineGameCompleteDelegate;
    }
}

function ClearJoinOnlineGameCompleteDelegate(delegate<OnJoinOnlineGameComplete> JoinOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = JoinOnlineGameCompleteDelegates.Find(JoinOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        JoinOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnMultiplayerSessionChange(name SessionName, SessionUpdateInfo SessionChanges);

function AddMultiplayerSessionChangeDelegate(delegate<OnMultiplayerSessionChange> MultiplayerSessionChange)
{
    if(MultiplayerSessionChangeDelegates.Find(MultiplayerSessionChange == -1)
    {
        MultiplayerSessionChangeDelegates.AddItem(MultiplayerSessionChange;
    }
}

function ClearMultiplayerSessionChangeDelegate(delegate<OnMultiplayerSessionChange> MultiplayerSessionChange)
{
    MultiplayerSessionChangeDelegates.RemoveItem(MultiplayerSessionChange;
}

// Export UOnlineGameInterfaceDingo::execQueryMatchmakingForSession(FFrame&, void* const)
native function bool QueryMatchmakingForSession(byte ScoutingPlayerNum, name SessionName, int MatchTimeout, optional Engine.OnlineSubsystem.EOnlineCreateGameSessionFlag CreateGameSessionType)
{
    CreateGameSessionType = 0;                        
}

// Export UOnlineGameInterfaceDingo::execQueryMatchmakingForSessionWithHopper(FFrame&, void* const)
native function bool QueryMatchmakingForSessionWithHopper(byte ScoutingPlayerNum, name SessionName, int MatchTimeout, string HopperName, optional Engine.OnlineSubsystem.EOnlineCreateGameSessionFlag CreateGameSessionType)
{
    CreateGameSessionType = 0;                            
}

delegate OnQueryMatchmakingForSessionComplete(name SessionName, bool bWasSuccessful);

function AddQueryMatchmakingForSessionCompleteDelegate(delegate<OnQueryMatchmakingForSessionComplete> QueryMatchmakingForSessionCompleteDelegate)
{
    if(QueryMatchmakingForSessionCompleteDelegates.Find(QueryMatchmakingForSessionCompleteDelegate == -1)
    {
        QueryMatchmakingForSessionCompleteDelegates[QueryMatchmakingForSessionCompleteDelegates.Length] = QueryMatchmakingForSessionCompleteDelegate;
    }
}

function ClearQueryMatchmakingForSessionCompleteDelegate(delegate<OnQueryMatchmakingForSessionComplete> QueryMatchmakingForSessionCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = QueryMatchmakingForSessionCompleteDelegates.Find(QueryMatchmakingForSessionCompleteDelegate;
    if(RemoveIndex != -1)
    {
        QueryMatchmakingForSessionCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execDeleteMatchTicket(FFrame&, void* const)
native function bool DeleteMatchTicket(byte ScoutingPlayerNum, name SessionName);

// Export UOnlineGameInterfaceDingo::execDeleteMatchTicketWithHopper(FFrame&, void* const)
native function bool DeleteMatchTicketWithHopper(byte ScoutingPlayerNum, name SessionName, string HopperName);

delegate OnDeleteMatchTicketComplete(name SessionName, bool bWasSuccessful);

function AddDeleteMatchTicketCompleteDelegate(delegate<OnDeleteMatchTicketComplete> DeleteMatchTicketCompleteDelegate)
{
    if(DeleteMatchTicketCompleteDelegates.Find(DeleteMatchTicketCompleteDelegate == -1)
    {
        DeleteMatchTicketCompleteDelegates.AddItem(DeleteMatchTicketCompleteDelegate;
    }
}

function ClearDeleteMatchTicketCompleteDelegate(delegate<OnDeleteMatchTicketComplete> DeleteMatchTicketCompleteDelegate)
{
    DeleteMatchTicketCompleteDelegates.RemoveItem(DeleteMatchTicketCompleteDelegate;
}

// Export UOnlineGameInterfaceDingo::execSetCustomSessionProperty(FFrame&, void* const)
native function bool SetCustomSessionProperty(name SessionName, string PropertyName, string PropertyValue);

// Export UOnlineGameInterfaceDingo::execDeleteCustomSessionProperty(FFrame&, void* const)
native function bool DeleteCustomSessionProperty(name SessionName, string PropertyName);

// Export UOnlineGameInterfaceDingo::execSetCustomMemberProperty(FFrame&, void* const)
native function bool SetCustomMemberProperty(name SessionName, string PropertyName, string PropertyValue);

// Export UOnlineGameInterfaceDingo::execDeleteCustomMemberProperty(FFrame&, void* const)
native function bool DeleteCustomMemberProperty(name SessionName, string PropertyName);

// Export UOnlineGameInterfaceDingo::execUpdateSessionProperties(FFrame&, void* const)
native function bool UpdateSessionProperties(byte ScoutingUserNum, name SessionName);

delegate OnUpdateSessionPropertiesComplete(name SessionName, bool bWasSuccessful);

function AddUpdateSessionPropertiesCompleteDelegate(delegate<OnUpdateSessionPropertiesComplete> UpdateSessionPropertiesCompleteDelegate)
{
    if(UpdateSessionPropertiesCompleteDelegates.Find(UpdateSessionPropertiesCompleteDelegate == -1)
    {
        UpdateSessionPropertiesCompleteDelegates[UpdateSessionPropertiesCompleteDelegates.Length] = UpdateSessionPropertiesCompleteDelegate;
    }
}

function ClearUpdateSessionPropertiesCompleteDelegate(delegate<OnUpdateSessionPropertiesComplete> UpdateSessionPropertiesCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = UpdateSessionPropertiesCompleteDelegates.Find(UpdateSessionPropertiesCompleteDelegate;
    if(RemoveIndex != -1)
    {
        UpdateSessionPropertiesCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnGamePlayersChanged(name SessionName, array<UniqueNetId> Players);

function AddGamePlayersChangedDelegate(delegate<OnGamePlayersChanged> GamePlayersChangedDelegate)
{
    if(GamePlayersChangedDelegates.Find(GamePlayersChangedDelegate == -1)
    {
        GamePlayersChangedDelegates.AddItem(GamePlayersChangedDelegate;
    }
}

function ClearGamePlayersChangedDelegate(delegate<OnGamePlayersChanged> GamePlayersChangedDelegate)
{
    GamePlayersChangedDelegates.RemoveItem(GamePlayersChangedDelegate;
}

delegate OnMatchStatusChanged(name SessionName, byte Status);

function AddMatchStatusChangedDelegate(delegate<OnMatchStatusChanged> MatchStatusChangedDelegate)
{
    if(MatchStatusChangedDelegates.Find(MatchStatusChangedDelegate == -1)
    {
        MatchStatusChangedDelegates[MatchStatusChangedDelegates.Length] = MatchStatusChangedDelegate;
    }
}

function ClearMatchStatusChangedDelegate(delegate<OnMatchStatusChanged> MatchStatusChangedDelegate)
{
    local int RemoveIndex;

    RemoveIndex = MatchStatusChangedDelegates.Find(MatchStatusChangedDelegate;
    if(RemoveIndex != -1)
    {
        MatchStatusChangedDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execLeaveOnlineSession(FFrame&, void* const)
native function bool LeaveOnlineSession(byte LocalPlayerNum, name SessionName, optional bool bClearSessionIfHost)
{
    bClearSessionIfHost = false;                    
}

// Export UOnlineGameInterfaceDingo::execLeaveAllOnlineSessions(FFrame&, void* const)
native function LeaveAllOnlineSessions(optional bool bClearSessionIfHost)
{
    bClearSessionIfHost = false;            
}

// Export UOnlineGameInterfaceDingo::execQuerySessionsForUser(FFrame&, void* const)
native function bool QuerySessionsForUser(byte LocalPlayerNum);

// Export UOnlineGameInterfaceDingo::execQuerySessionsByKeyword(FFrame&, void* const)
native function bool QuerySessionsByKeyword(byte LocalPlayerNum, string Keyword, OnlineGameSearch SearchSettings);

delegate OnQuerySessionsForUserComplete(byte LocalPlayerNum, bool bWasSuccessful);

function AddQuerySessionsForUserCompleteDelegate(delegate<OnQuerySessionsForUserComplete> QuerySessionsForUserCompleteDelegate)
{
    if(QuerySessionsForUserCompleteDelegates.Find(QuerySessionsForUserCompleteDelegate == -1)
    {
        QuerySessionsForUserCompleteDelegates.AddItem(QuerySessionsForUserCompleteDelegate;
    }
}

function ClearQuerySessionsForUserCompleteDelegate(delegate<OnQuerySessionsForUserComplete> QuerySessionsForUserCompleteDelegate)
{
    QuerySessionsForUserCompleteDelegates.RemoveItem(QuerySessionsForUserCompleteDelegate;
}

// Export UOnlineGameInterfaceDingo::execGetResolvedConnectString(FFrame&, void* const)
native function bool GetResolvedConnectString(name SessionName, out string ConnectInfo);

// Export UOnlineGameInterfaceDingo::execRegisterPlayer(FFrame&, void* const)
native function bool RegisterPlayer(name SessionName, UniqueNetId PlayerID, bool bWasInvited);

function bool RegisterPlayers(name SessionName, const out array<UniqueNetId> Players);

delegate OnRegisterPlayerComplete(name SessionName, UniqueNetId PlayerID, bool bWasSuccessful);

function AddRegisterPlayerCompleteDelegate(delegate<OnRegisterPlayerComplete> RegisterPlayerCompleteDelegate)
{
    if(RegisterPlayerCompleteDelegates.Find(RegisterPlayerCompleteDelegate == -1)
    {
        RegisterPlayerCompleteDelegates.AddItem(RegisterPlayerCompleteDelegate;
    }
}

function ClearRegisterPlayerCompleteDelegate(delegate<OnRegisterPlayerComplete> RegisterPlayerCompleteDelegate)
{
    RegisterPlayerCompleteDelegates.RemoveItem(RegisterPlayerCompleteDelegate;
}

// Export UOnlineGameInterfaceDingo::execUnregisterPlayer(FFrame&, void* const)
native function bool UnregisterPlayer(name SessionName, UniqueNetId PlayerID);

function bool UnregisterPlayers(name SessionName, const out array<UniqueNetId> Players);

delegate OnUnregisterPlayerComplete(name SessionName, UniqueNetId PlayerID, bool bWasSuccessful);

function AddUnregisterPlayerCompleteDelegate(delegate<OnUnregisterPlayerComplete> UnregisterPlayerCompleteDelegate)
{
    if(UnregisterPlayerCompleteDelegates.Find(UnregisterPlayerCompleteDelegate == -1)
    {
        UnregisterPlayerCompleteDelegates.AddItem(UnregisterPlayerCompleteDelegate;
    }
}

function ClearUnregisterPlayerCompleteDelegate(delegate<OnUnregisterPlayerComplete> UnregisterPlayerCompleteDelegate)
{
    UnregisterPlayerCompleteDelegates.RemoveItem(UnregisterPlayerCompleteDelegate;
}

// Export UOnlineGameInterfaceDingo::execStartOnlineGame(FFrame&, void* const)
native function bool StartOnlineGame(name SessionName);

delegate OnStartOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddStartOnlineGameCompleteDelegate(delegate<OnStartOnlineGameComplete> StartOnlineGameCompleteDelegate)
{
    if(StartOnlineGameCompleteDelegates.Find(StartOnlineGameCompleteDelegate == -1)
    {
        StartOnlineGameCompleteDelegates[StartOnlineGameCompleteDelegates.Length] = StartOnlineGameCompleteDelegate;
    }
}

function ClearStartOnlineGameCompleteDelegate(delegate<OnStartOnlineGameComplete> StartOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = StartOnlineGameCompleteDelegates.Find(StartOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        StartOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceDingo::execEndOnlineGame(FFrame&, void* const)
native function bool EndOnlineGame(name SessionName);

delegate OnEndOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddEndOnlineGameCompleteDelegate(delegate<OnEndOnlineGameComplete> EndOnlineGameCompleteDelegate)
{
    if(EndOnlineGameCompleteDelegates.Find(EndOnlineGameCompleteDelegate == -1)
    {
        EndOnlineGameCompleteDelegates[EndOnlineGameCompleteDelegates.Length] = EndOnlineGameCompleteDelegate;
    }
}

function ClearEndOnlineGameCompleteDelegate(delegate<OnEndOnlineGameComplete> EndOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = EndOnlineGameCompleteDelegates.Find(EndOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        EndOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool RegisterForArbitration(name SessionName);

delegate OnArbitrationRegistrationComplete(name SessionName, bool bWasSuccessful);

function AddArbitrationRegistrationCompleteDelegate(delegate<OnArbitrationRegistrationComplete> ArbitrationRegistrationCompleteDelegate);

function ClearArbitrationRegistrationCompleteDelegate(delegate<OnArbitrationRegistrationComplete> ArbitrationRegistrationCompleteDelegate);

function array<OnlineArbitrationRegistrant> GetArbitratedPlayers(name SessionName);

delegate OnGameInviteAccepted(const out OnlineGameSearchResult InviteResult, Engine.OnlineSubsystem.OnGameInviteAcceptedResult ResultReason);

function AddGameInviteAcceptedDelegate(byte LocalUserNum, delegate<OnGameInviteAccepted> GameInviteAcceptedDelegate)
{
    if(GameInviteAcceptedDelegates.Find(GameInviteAcceptedDelegate == -1)
    {
        GameInviteAcceptedDelegates.AddItem(GameInviteAcceptedDelegate;
    }
}

function ClearGameInviteAcceptedDelegate(byte LocalUserNum, delegate<OnGameInviteAccepted> GameInviteAcceptedDelegate)
{
    GameInviteAcceptedDelegates.RemoveItem(GameInviteAcceptedDelegate;
}

function bool AcceptGameInvite(byte LocalUserNum, name SessionName, const out OnlineGameSearchResult DesiredGame);

function bool RecalculateSkillRating(name SessionName, const out array<UniqueNetId> Players);

delegate OnRecalculateSkillRatingComplete(name SessionName, bool bWasSuccessful);

function AddRecalculateSkillRatingCompleteDelegate(delegate<OnRecalculateSkillRatingComplete> RecalculateSkillRatingCompleteDelegate);

function ClearRecalculateSkillRatingCompleteDelegate(delegate<OnRecalculateSkillRatingComplete> RecalculateSkillRatingGameCompleteDelegate);

function bool MigrateOnlineGame(byte HostingPlayerNum, name SessionName);

delegate OnMigrateOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddMigrateOnlineGameCompleteDelegate(delegate<OnMigrateOnlineGameComplete> MigrateOnlineGameCompleteDelegate);

function ClearMigrateOnlineGameCompleteDelegate(delegate<OnMigrateOnlineGameComplete> MigrateOnlineGameCompleteDelegate);

function bool JoinMigratedOnlineGame(byte PlayerNum, name SessionName, const out OnlineGameSearchResult DesiredGame);

delegate OnJoinMigratedOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddJoinMigratedOnlineGameCompleteDelegate(delegate<OnJoinMigratedOnlineGameComplete> JoinMigratedOnlineGameCompleteDelegate)
{
    if(JoinMigratedOnlineGameCompleteDelegates.Find(JoinMigratedOnlineGameCompleteDelegate == -1)
    {
        JoinMigratedOnlineGameCompleteDelegates.AddItem(JoinMigratedOnlineGameCompleteDelegate;
    }
}

function ClearJoinMigratedOnlineGameCompleteDelegate(delegate<OnJoinMigratedOnlineGameComplete> JoinMigratedOnlineGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = JoinMigratedOnlineGameCompleteDelegates.Find(JoinMigratedOnlineGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        JoinMigratedOnlineGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool QueryNonAdvertisedData(int StartAt, int NumberToQuery);

// Export UOnlineGameInterfaceDingo::execReadPlatformSpecificSessionInfo(FFrame&, void* const)
native function bool ReadPlatformSpecificSessionInfo(const out OnlineGameSearchResult DesiredGame, out byte PlatformSpecificInfo[80]);

// Export UOnlineGameInterfaceDingo::execReadPlatformSpecificSessionInfoBySessionName(FFrame&, void* const)
native function bool ReadPlatformSpecificSessionInfoBySessionName(name SessionName, out byte PlatformSpecificInfo[80]);

// Export UOnlineGameInterfaceDingo::execReadSessionGuidBySessionName(FFrame&, void* const)
native function bool ReadSessionGuidBySessionName(name SessionName, out string SessionGuid);

// Export UOnlineGameInterfaceDingo::execBindPlatformSpecificSessionToSearch(FFrame&, void* const)
native function bool BindPlatformSpecificSessionToSearch(byte SearchingPlayerNum, OnlineGameSearch SearchSettings, byte PlatformSpecificInfo[80]);

// Export UOnlineGameInterfaceDingo::execBindSessionGuidToSearch(FFrame&, void* const)
native function bool BindSessionGuidToSearch(byte SearchingPlayerNum, OnlineGameSearch SearchSettings, string SessionGuid);

delegate OnQosStatusChanged(int NumComplete, int NumTotal);

function AddQosStatusChangedDelegate(delegate<OnQosStatusChanged> QosStatusChangedDelegate);

function ClearQosStatusChangedDelegate(delegate<OnQosStatusChanged> QosStatusChangedDelegate);

function bool GetNumberOfCurrentPlayers();

delegate OnRetrievedGameSettingsForIP(bool bSuccessful, const out OnlineGameSearchResult ConnectResult);

function AddOnRetrieveGameSettingsForIPDelegate(delegate<OnRetrievedGameSettingsForIP> NewRetrieveIPDelegate);

function ClearOnRetrieveGameSettingsForIPDelegate(delegate<OnRetrievedGameSettingsForIP> RetrieveIPDelegate);

function RetrieveGameSettingsForIP(string IPAddress);

function bool SendPlayerList(const array<PlayerReplicationInfo> Players);

function int GetNumberOfCurrentPlayersCached();

delegate OnGetNumberOfCurrentPlayersComplete(int TotalPlayers);

function AddGetNumberOfCurrentPlayersCompleteDelegate(delegate<OnGetNumberOfCurrentPlayersComplete> GetNumberOfCurrentPlayersCompleteDelegate);

function ClearGetNumberOfCurrentPlayersCompleteDelegate(delegate<OnGetNumberOfCurrentPlayersComplete> GetNumberOfCurrentPlayersCompleteDelegate);

function string GetRoomId();

delegate OnGetRoomIdFromTitleService(QWord RoomId);

function GetRoomIdFromTitleService(QWord DataId);

function GetRoomIdFromSessionId(string SessionId);

function AddGetRoomIdFromTitleServiceDelegate(delegate<OnGetRoomIdFromTitleService> InDelegate);

function ClearGetRoomIdFromTitleServiceDelegate(delegate<OnGetRoomIdFromTitleService> InDelegate);

function bool IsAllowedToNetworkHost();

function RunBandwidthTest();

function bool JoinOnlineGameByMatchingParams(QWord RoomId, out OnlineGameSettings JoinedGameSettings);

function bool IsJoinOperationInProgress();

function bool SetRankedReadyStatus(bool bReady);

function bool IsCurrentRoomOwner();
