/*******************************************************************************
 * OnlineStatsInterfaceDingo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineStatsInterfaceDingo extends Object within onlinesubsystemdingo
    native
    config(Engine)
    implements(OnlineStatsInterface);

enum RealTimeActivityConnectionStatus
{
    RTA_NotConnected,
    RTA_Connecting,
    RTA_Connected,
    RTA_MAX
};

struct native RealTimeActivitySubscriptionData
{
    var UniqueNetId PlayerNetId;
    var name StatName;
    var delegate<OnStatisticChanged> OnStatisticChanged;

    structdefaultproperties
    {
        PlayerNetId=(Uid=none)
        StatName=None
        Statis=None
    }
};

struct native XboxLiveContextPlayerData
{
    var native HatPointer LiveContext;
    var UniqueNetId PlayerNetId;
    var Guid PlayerSessionGuid;
    var OnlineStatsInterfaceDingo.RealTimeActivityConnectionStatus MultiplayerSubscriptionStatus;
    var OnlineStatsInterfaceDingo.RealTimeActivityConnectionStatus RTAConnectionStatus;
    var array<RealTimeActivitySubscriptionData> RTASubscriptions;
    var QWord StatisticChangedTokenKey;
    var QWord WebSocketClosedTokenKey;

    structdefaultproperties
    {
        PlayerNetId=(Uid=none)
        PlayerSessionGuid=(A=0,B=0,C=0,D=0)
        MultiplayerSubscriptionStatus=RealTimeActivityConnectionStatus.RTA_NotConnected
        RTAConnectionStatus=RealTimeActivityConnectionStatus.RTA_NotConnected
        RTASubscriptions=none
        StatisticChangedTokenKey=none
        WebSocketClosedTokenKey=none
    }
};

var onlinesubsystemdingo OwningSubsystem;
var config float ReadProfileAsyncTimeout;
var native Pointer CurrentStatsRead;
var array< delegate<OnReadOnlineStatsComplete> > ReadOnlineStatsCompleteDelegates;
var bool EventsRegistered;
var native map<0, 0> PlayerXboxLiveContextMap;
var delegate<OnReadOnlineStatsComplete> __OnReadOnlineStatsComplete__Delegate;
var delegate<OnFlushOnlineStatsComplete> __OnFlushOnlineStatsComplete__Delegate;
var delegate<OnRegisterHostStatGuidComplete> __OnRegisterHostStatGuidComplete__Delegate;
var delegate<OnStatisticChanged> __OnStatisticChanged__Delegate;

delegate OnReadOnlineStatsComplete(bool bWasSuccessful);

// Export UOnlineStatsInterfaceDingo::execReadOnlineStatsForPlayer(FFrame&, void* const)
native function bool ReadOnlineStatsForPlayer(byte LocalUserNum, OnlineStatsRead StatsRead);

// Export UOnlineStatsInterfaceDingo::execReadOnlineStats(FFrame&, void* const)
native function bool ReadOnlineStats(byte LocalUserNum, const out array<UniqueNetId> Players, OnlineStatsRead StatsRead);

// Export UOnlineStatsInterfaceDingo::execReadOnlineStatsForFriends(FFrame&, void* const)
native function bool ReadOnlineStatsForFriends(byte LocalUserNum, OnlineStatsRead StatsRead, optional bool FavoriteFriendsOnly, optional int NumToRead)
{
    FavoriteFriendsOnly = false;
    NumToRead = 100;                        
}

// Export UOnlineStatsInterfaceDingo::execReadOnlineStatsByRank(FFrame&, void* const)
native function bool ReadOnlineStatsByRank(byte LocalUserNum, OnlineStatsRead StatsRead, optional int StartIndex, optional int NumToRead)
{
    StartIndex = 1;
    NumToRead = 100;                        
}

// Export UOnlineStatsInterfaceDingo::execReadOnlineStatsByRankAroundPlayer(FFrame&, void* const)
native function bool ReadOnlineStatsByRankAroundPlayer(byte LocalUserNum, OnlineStatsRead StatsRead, optional int NumRows)
{
    NumRows = 10;                    
}

function AddReadOnlineStatsCompleteDelegate(delegate<OnReadOnlineStatsComplete> ReadOnlineStatsCompleteDelegate)
{
    if(ReadOnlineStatsCompleteDelegates.Find(ReadOnlineStatsCompleteDelegate == -1)
    {
        ReadOnlineStatsCompleteDelegates.AddItem(ReadOnlineStatsCompleteDelegate;
    }
}

function ClearReadOnlineStatsCompleteDelegate(delegate<OnReadOnlineStatsComplete> ReadOnlineStatsCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ReadOnlineStatsCompleteDelegates.Find(ReadOnlineStatsCompleteDelegate;
    if(RemoveIndex != -1)
    {
        ReadOnlineStatsCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineStatsInterfaceDingo::execFreeStats(FFrame&, void* const)
native function FreeStats(OnlineStatsRead StatsRead);

function bool WriteOnlineStats(name SessionName, UniqueNetId Player, OnlineStatsWrite StatsWrite);

function bool FlushOnlineStats(name SessionName);

delegate OnFlushOnlineStatsComplete(name SessionName, bool bWasSuccessful);

function AddFlushOnlineStatsCompleteDelegate(delegate<OnFlushOnlineStatsComplete> FlushOnlineStatsCompleteDelegate);

function ClearFlushOnlineStatsCompleteDelegate(delegate<OnFlushOnlineStatsComplete> FlushOnlineStatsCompleteDelegate);

function bool WriteOnlinePlayerScores(name SessionName, int LeaderboardId, const out array<OnlinePlayerScore> PlayerScores);

function string GetHostStatGuid();

function bool RegisterHostStatGuid(const out string HostStatGuid);

delegate OnRegisterHostStatGuidComplete(bool bWasSuccessful);

function AddRegisterHostStatGuidCompleteDelegate(delegate<OnRegisterHostStatGuidComplete> RegisterHostStatGuidCompleteDelegate);

function ClearRegisterHostStatGuidCompleteDelegateDelegate(delegate<OnRegisterHostStatGuidComplete> RegisterHostStatGuidCompleteDelegate);

function string GetClientStatGuid();

function bool RegisterStatGuid(UniqueNetId PlayerID, const out string ClientStatGuid);

function CalcAggregateSkill(array<Double> Mus, array<Double> Sigmas, out Double OutAggregateMu, out Double OutAggregateSigma);

delegate OnStatisticChanged(UniqueNetId PlayerNetId, name StatName, string NewStatValue);

// Export UOnlineStatsInterfaceDingo::execSubscribeToStatisticEvent(FFrame&, void* const)
native function SubscribeToStatisticEvent(byte LocalUserNum, UniqueNetId PlayerNetId, name StatName, delegate<OnStatisticChanged> EventDelegate);

// Export UOnlineStatsInterfaceDingo::execUnsubscribeToStatisticEvent(FFrame&, void* const)
native function UnsubscribeToStatisticEvent(byte LocalUserNum, UniqueNetId PlayerNetId, name StatName);

function bool SendPlayerSessionStart(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId);

function bool SendPlayerSessionEnd(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId, int ExitStatusId);

function bool SendPlayerSessionPause(byte LocalUserNum, string MultiplayerCorrelationId);

function bool SendPlayerSessionResume(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId);

function bool SendTestEvent(byte LocalUserNum, string TestStatInstancing, int TestStatParameter);
