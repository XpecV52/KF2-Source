/*******************************************************************************
 * OnlineCommunityContentInterfaceDingo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineCommunityContentInterfaceDingo extends Object within onlinesubsystemdingo
    native
    implements(OnlineCommunityContentInterface);

var onlinesubsystemdingo OwningSubsystem;
var array< delegate<OnReadContentListComplete> > ReadContentListCompleteDelegates;
var array< delegate<OnUploadContentComplete> > UploadContentCompleteDelegates;
var array< delegate<OnDownloadContentComplete> > DownloadContentCompleteDelegates;
var array< delegate<OnDeleteContentComplete> > DeleteContentCompleteDelegates;
var delegate<OnReadContentListComplete> __OnReadContentListComplete__Delegate;
var delegate<OnUploadContentComplete> __OnUploadContentComplete__Delegate;
var delegate<OnDownloadContentComplete> __OnDownloadContentComplete__Delegate;
var delegate<OnDeleteContentComplete> __OnDeleteContentComplete__Delegate;
var delegate<OnReadFriendsContentListComplete> __OnReadFriendsContentListComplete__Delegate;
var delegate<OnGetContentPayloadComplete> __OnGetContentPayloadComplete__Delegate;

// Export UOnlineCommunityContentInterfaceDingo::execInit(FFrame&, void* const)
native event bool Init();

// Export UOnlineCommunityContentInterfaceDingo::execExit(FFrame&, void* const)
native event Exit();

// Export UOnlineCommunityContentInterfaceDingo::execReadContentList(FFrame&, void* const)
native function bool ReadContentList(byte PlayerNum, UniqueNetId NetId, optional string Path, optional int StartAt, optional int NumToRead)
{
    Path = "";
    StartAt = 0;
    NumToRead = 0;                            
}

delegate OnReadContentListComplete(bool bWasSuccessful, array<CommunityContentFile> ContentFiles);

function AddReadContentListCompleteDelegate(delegate<OnReadContentListComplete> ReadContentListCompleteDelegate)
{
    if(ReadContentListCompleteDelegates.Find(ReadContentListCompleteDelegate == -1)
    {
        ReadContentListCompleteDelegates.AddItem(ReadContentListCompleteDelegate;
    }
}

function ClearReadContentListCompleteDelegate(delegate<OnReadContentListComplete> ReadContentListCompleteDelegate)
{
    ReadContentListCompleteDelegates.RemoveItem(ReadContentListCompleteDelegate;
}

// Export UOnlineCommunityContentInterfaceDingo::execUploadContent(FFrame&, void* const)
native function bool UploadContent(byte PlayerNum, const out array<byte> Payload, const out CommunityContentMetadata MetaData);

delegate OnUploadContentComplete(bool bWasSuccessful, CommunityContentFile UploadedFile);

function AddUploadContentCompleteDelegate(delegate<OnUploadContentComplete> UploadContentCompleteDelegate)
{
    if(UploadContentCompleteDelegates.Find(UploadContentCompleteDelegate == -1)
    {
        UploadContentCompleteDelegates.AddItem(UploadContentCompleteDelegate;
    }
}

function ClearUploadContentCompleteDelegate(delegate<OnUploadContentComplete> UploadContentCompleteDelegate)
{
    UploadContentCompleteDelegates.RemoveItem(UploadContentCompleteDelegate;
}

// Export UOnlineCommunityContentInterfaceDingo::execDownloadContent(FFrame&, void* const)
native function bool DownloadContent(byte PlayerNum, const out CommunityContentFile FileToDownload);

delegate OnDownloadContentComplete(bool bWasSuccessful, CommunityContentFile FileDownloaded, array<byte> Payload);

function AddDownloadContentCompleteDelegate(delegate<OnDownloadContentComplete> DownloadContentCompleteDelegate)
{
    if(DownloadContentCompleteDelegates.Find(DownloadContentCompleteDelegate == -1)
    {
        DownloadContentCompleteDelegates.AddItem(DownloadContentCompleteDelegate;
    }
}

function ClearDownloadContentCompleteDelegate(delegate<OnDownloadContentComplete> DownloadContentCompleteDelegate)
{
    DownloadContentCompleteDelegates.RemoveItem(DownloadContentCompleteDelegate;
}

// Export UOnlineCommunityContentInterfaceDingo::execDeleteContent(FFrame&, void* const)
native function bool DeleteContent(byte PlayerNum, const out CommunityContentMetadata MetaData);

delegate OnDeleteContentComplete(bool bWasSuccessful);

function AddDeleteContentCompleteDelegate(delegate<OnDeleteContentComplete> DeleteContentCompleteDelegate)
{
    if(DeleteContentCompleteDelegates.Find(DeleteContentCompleteDelegate == -1)
    {
        DeleteContentCompleteDelegates.AddItem(DeleteContentCompleteDelegate;
    }
}

function ClearDeleteContentCompleteDelegate(delegate<OnDeleteContentComplete> DeleteContentCompleteDelegate)
{
    DeleteContentCompleteDelegates.RemoveItem(DeleteContentCompleteDelegate;
}

function RateContent(byte PlayerNum, const out CommunityContentFile FileToRate, int NewRating);

function bool GetContentList(byte PlayerNum, out array<CommunityContentFile> ContentFiles);

function bool ReadFriendsContentList(byte PlayerNum, const out array<OnlineFriend> Friends, optional int StartAt, optional int NumToRead)
{
    StartAt = 0;
    NumToRead = -1;
}

delegate OnReadFriendsContentListComplete(bool bWasSuccessful);

function AddReadFriendsContentListCompleteDelegate(delegate<OnReadFriendsContentListComplete> ReadFriendsContentListCompleteDelegate);

function ClearReadFriendsContentListCompleteDelegate(delegate<OnReadFriendsContentListComplete> ReadFriendsContentListCompleteDelegate);

function bool GetFriendsContentList(byte PlayerNum, const out OnlineFriend Friend, out array<CommunityContentFile> ContentFiles);

function bool GetContentPayload(byte PlayerNum, const out CommunityContentFile FileDownloaded);

delegate OnGetContentPayloadComplete(bool bWasSuccessful, CommunityContentFile FileDownloaded, const out array<byte> Payload);

function AddGetContentPayloadCompleteDelegate(delegate<OnGetContentPayloadComplete> GetContentPayloadCompleteDelegate);

function ClearGetContentPayloadCompleteDelegate(delegate<OnGetContentPayloadComplete> GetContentPayloadCompleteDelegate);
