/*******************************************************************************
 * OnlineGameDVRInterfaceDingo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineGameDVRInterfaceDingo extends Object within onlinesubsystemdingo
    native
    implements(OnlineGameDVRInterface);

struct native DVRClip
{
    var init string ClipName;
    var bool bDidEndCapture;
    var native HatPointer ClipCapture;
    var native HatPointer CachedClip;

    structdefaultproperties
    {
        ClipName=""
        bDidEndCapture=false
    }
};

struct native DVRClipCache
{
    var Engine.OnlineSubsystem.EOnlineEnumerationReadState ReadState;
    var init array<init DVRClip> DVRClips;

    structdefaultproperties
    {
        ReadState=EOnlineEnumerationReadState.OERS_NotStarted
        DVRClips=none
    }
};

struct native PerUserGameDVRDelegates
{
    var array< delegate<OnReadRecordedClipsComplete> > ReadRecordedClipsDelegates;
    var array< delegate<OnRecordEventComplete> > RecordEventCompleteDelegates;

    structdefaultproperties
    {
        ReadRecordedClipsDelegates=none
        RecordEventCompleteDelegates=none
    }
};

var onlinesubsystemdingo OwningSubsystem;
var transient bool bIsRenderingKinectRGB;
var transient bool bIsEventRecordingEnabled;
var native map<0, 0> UserDVRClipCache;
var PerUserGameDVRDelegates PerUserDelegates[24];
var delegate<OnReadRecordedClipsComplete> __OnReadRecordedClipsComplete__Delegate;
var delegate<OnRecordEventComplete> __OnRecordEventComplete__Delegate;

// Export UOnlineGameDVRInterfaceDingo::execEnableRecording(FFrame&, void* const)
native function EnableRecording();

// Export UOnlineGameDVRInterfaceDingo::execDisableRecording(FFrame&, void* const)
native function DisableRecording();

// Export UOnlineGameDVRInterfaceDingo::execReadRecordedClips(FFrame&, void* const)
native function bool ReadRecordedClips(byte LocalUserNum);

delegate OnReadRecordedClipsComplete(bool bWasSuccessful, byte LocalUserNum);

// Export UOnlineGameDVRInterfaceDingo::execClearCachedRecordedClips(FFrame&, void* const)
native function ClearCachedRecordedClips(byte LocalUserNum);

function AddReadRecordedClipsCompleteDelegate(byte LocalUserNum, delegate<OnReadRecordedClipsComplete> ReadRecordedClipsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        if(PerUserDelegates[LocalUserNum].ReadRecordedClipsDelegates.Find(ReadRecordedClipsCompleteDelegate == -1)
        {
            PerUserDelegates[LocalUserNum].ReadRecordedClipsDelegates.AddItem(ReadRecordedClipsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to AddReadRecordedClipsCompleteDelegate()");
    }
}

function ClearReadRecordedClipsCompleteDelegate(byte LocalUserNum, delegate<OnReadRecordedClipsComplete> ReadRecordedClipsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        PerUserDelegates[LocalUserNum].ReadRecordedClipsDelegates.RemoveItem(ReadRecordedClipsCompleteDelegate;        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearReadRecordedClipsCompleteDelegate()");
    }
}

// Export UOnlineGameDVRInterfaceDingo::execBeginRecordingEvent(FFrame&, void* const)
native function bool BeginRecordingEvent(byte LocalUserNum, string EventName);

delegate OnRecordEventComplete(bool bWasSuccessful, byte LocalUserNum, string EventName);

function AddRecordEventCompleteDelegate(byte LocalUserNum, delegate<OnRecordEventComplete> RecordEventCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        if(PerUserDelegates[LocalUserNum].RecordEventCompleteDelegates.Find(RecordEventCompleteDelegate == -1)
        {
            PerUserDelegates[LocalUserNum].RecordEventCompleteDelegates.AddItem(RecordEventCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to AddRecordEventCompleteDelegate()");
    }
}

function ClearRecordEventCompleteDelegate(byte LocalUserNum, delegate<OnRecordEventComplete> RecordEventCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        PerUserDelegates[LocalUserNum].RecordEventCompleteDelegates.RemoveItem(RecordEventCompleteDelegate;        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearRecordEventCompleteDelegate()");
    }
}

// Export UOnlineGameDVRInterfaceDingo::execEndRecordingEvent(FFrame&, void* const)
native function bool EndRecordingEvent(byte LocalUserNum, string EventName);

// Export UOnlineGameDVRInterfaceDingo::execRecordPreviousTimespan(FFrame&, void* const)
native function bool RecordPreviousTimespan(byte LocalUserNum, string EventName, float Duration);

// Export UOnlineGameDVRInterfaceDingo::execCancelRecordingEvent(FFrame&, void* const)
native function bool CancelRecordingEvent(byte LocalUserNum, string EventName);

event SetIsRenderingKinectRGB(bool bInIsRenderingKinectRGB)
{
    bIsRenderingKinectRGB = bInIsRenderingKinectRGB;
}

defaultproperties
{
    bIsEventRecordingEnabled=true
}