/*******************************************************************************
 * onlinesubsystemdingo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class onlinesubsystemdingo extends OnlineSubsystemCommonImpl
    native
    config(Engine)
    implements(OnlinePlayerInterface,OnlinePlayerInterfaceEx,OnlineVoiceInterface,OnlineSystemInterface);

struct native CachedLoginState
{
    var const Engine.OnlineSubsystem.ELoginStatus LoginStatus;
    var const UniqueNetId PlayerXuid;

    structdefaultproperties
    {
        LoginStatus=ELoginStatus.LS_NotLoggedIn
        PlayerXuid=(Uid=none)
    }
};

struct native TalkerPriority
{
    var int CurrentPriority;
    var int LastPriority;

    structdefaultproperties
    {
        CurrentPriority=0
        LastPriority=0
    }
};

struct native DingoRemoteTalker extends RemoteTalker
{
    var TalkerPriority LocalPriorities[24];
    var byte bReceivedAddMessage;
    var bool bMuted;
};

struct native PerUserDelegateLists
{
    var array< delegate<OnLoginStatusChange> > LoginStatusChangeDelegates;
    var array< delegate<OnRecognitionComplete> > SpeechRecognitionDelegates;
    var array< delegate<OnUnlockAchievementComplete> > AchievementDelegates;
    var array< delegate<OnReadAchievementsComplete> > AchievementReadDelegates;
    var array< delegate<OnReadProfileSettingsComplete> > ReadProfileSettingsDelegates;
    var array< delegate<OnWriteProfileSettingsComplete> > WriteProfileSettingsDelegates;

    structdefaultproperties
    {
        LoginStatusChangeDelegates=none
        SpeechRecognitionDelegates=none
        AchievementDelegates=none
        AchievementReadDelegates=none
        ReadProfileSettingsDelegates=none
        WriteProfileSettingsDelegates=none
    }
};

struct native FriendsListCache
{
    var init array<init OnlineFriend> Friends;
    var Engine.OnlineSubsystem.EOnlineEnumerationReadState ReadState;
    var init array< init delegate<OnReadFriendsComplete> > ReadFriendsDelegates;
    var init array< init delegate<OnFriendsChange> > FriendsChangeDelegates;

    structdefaultproperties
    {
        Friends=none
        ReadState=EOnlineEnumerationReadState.OERS_NotStarted
        ReadFriendsDelegates=none
        FriendsChangeDelegates=none
    }
};

struct native CachedAchievements
{
    var native QWord PlayerXuid;
    var int TitleId;
    var init array<init AchievementDetails> Achievements;
    var Engine.OnlineSubsystem.EOnlineEnumerationReadState ReadState;

    structdefaultproperties
    {
        TitleId=0
        Achievements=none
        ReadState=EOnlineEnumerationReadState.OERS_NotStarted
    }
};

struct native CountryRegionMapping
{
    var const int CountryCode;
    var const int MatchingRegion;

    structdefaultproperties
    {
        CountryCode=0
        MatchingRegion=0
    }
};

var private native const noexport Pointer VfTable_FCallbackEventDevice;
var OnlineGameDVRInterfaceDingo GameDVRInterfaceImpl;
var OnlineStatsInterfaceDingo StatsInterfaceImpl;
var OnlineTitleFileInterfaceDingo TitleFileInterfaceImpl;
var OnlineCommunityContentInterfaceDingo CommunityContentInterfaceImpl;
var OnlineMarketplaceInterfaceDingo MarketplaceInterfaceImpl;
var OnlineContentInterfaceDingo ContentInterfaceImpl;
var KFOnlineLobbyDingo LobbyInterface;
var native const array<Pointer> QueuedActivationAsyncTasks;
var native const array<Pointer> AsyncTasks;
var config string ProfileDataDirectory;
var config string ProfileDataExtension;
var array< delegate<OnReadOnlineProfilesComplete> > ReadOnlineProfileDelegates;
var OnlineProfileSettings CachedProfile;
var array< delegate<OnKeyboardInputComplete> > KeyboardInputDelegates;
var byte KeyboardInputWasCanceled;
var string KeyboardInputResults;
var array< delegate<OnRecognitionComplete> > SpeechRecognitionCompleteDelegates;
var array< delegate<OnReadFriendsComplete> > ReadFriendsDelegates;
var array< delegate<OnFriendsChange> > FriendsChangeDelegates;
var array< delegate<OnMutingChange> > MutingChangeDelegates;
var array< delegate<OnShowHelpComplete> > ShowHelpDelegates;
var array< delegate<OnTokenAndSignatureRetrieved> > TokenAndSignatureDelegates;
var array< delegate<OnShowGamerCardComplete> > ShowGamerCardCompleteDelegates;
var array< delegate<OnLoginChange> > LoginChangeDelegates;
var array< delegate<OnLoginCancelled> > LoginCancelledDelegates;
var array< delegate<OnCurrentUserChanged> > CurrentUserChangedDelegates;
var array< delegate<OnLoginFailed> > LoginFailedDelegates;
var array< delegate<OnLoginComplete> > OnLoginCompleteDelegates;
var array< delegate<OnControllerChange> > ControllerChangeDelegates;
var array< delegate<OnSystemUserControllerPairingChanged> > UserControllerPairingChangeDelegates;
var array< delegate<OnConnectionStatusChange> > ConnectionStatusChangeDelegates;
var array< delegate<OnFocusChange> > FocusChangeDelegates;
var array< delegate<OnPrivilegeLevelChecked> > PrivilegeCheckedDelegates;
var array< delegate<OnPrivilegeCheckedForUsers> > PrivilegeCheckedForUsersDelegates;
var array< delegate<OnRegisterLocalTalkerComplete> > RegisterLocalTalkerCompleteDelegates;
var array< delegate<OnUnregisterLocalTalkerComplete> > UnregisterLocalTalkerCompleteDelegates;
var array< delegate<OnUnregisterRemoteTalkerComplete> > UnregisterRemoteTalkerCompleteDelegates;
var array< delegate<OnUserAccountInfoRetrieved> > UserAccountInfoRetrievedDelegates;
var array< delegate<OnRemoteTalkerStatusChange> > RemoteTalkerStatusChangeDelegates;
var array< delegate<OnReadOnlineAvatarComplete> > ReadOnlineAvatarCompleteDelegates;
var native map<0, 0> UsersConnectedToRTA;
var array< delegate<OnPeoplePickerComplete> > PeoplePickerCompleteDelegates;
var array< delegate<OnAccountPickerComplete> > AccountPickerCompleteDelegates;
var array< delegate<OnTrialModeUpdate> > TrialModeUpdateDelegates;
var native const CachedLoginState LastLoginState[24];
var native array<HatPointer> QueuedControllerPairingChangeEvents;
var native const bool bAllowUserStateProcessing;
var native const bool bIsAppInFocus;
var native const bool bIsAppConstrained;
var native const bool bIsAppSuspended;
var native const bool bLoginStatusUpdated;
var const bool bLoginStatusUpdatedWhileSuspended;
var const bool bPeoplePickerActive;
var native const bool bCurrentUserChanged;
var native const bool bConnectionStatusUpdated;
var native const bool bRefreshMarketplaceInventory;
var native const bool bConnectedToLIVENetwork;
var native const bool bControllerPairingChanged;
var native const bool bLisenceInfoUpdated;
var const bool bProductPurchased;
var native const bool bWasActivated;
var const bool bAudioDeviceAdded;
var const bool bLocalUserRegisteringForVoice;
var const bool PlayerMuteSetting;
var const bool bProcessedLaunchGameInvite;
var const string PendingGameInviteCmd;
var LocalTalker LocalTalkers[24];
var array<DingoRemoteTalker> RemoteTalkers;
var native array<UniqueNetId> PendingRemoteTalkerRegisters;
var array<UniqueNetId> VoiceRegisteredIds;
var array< delegate<OnPlayerTalkingStateChange> > TalkingDelegates;
var PerUserDelegateLists PerUserDelegates[24];
var config float VoiceNotificationDelta;
var native map<0, 0> FriendsCache;
var array<CachedAchievements> AchievementsCache;
var config string ProductID;
var const string ServiceConfigId;
var config string DefaultSessionKeyword;
var config string DefaultHopperName;
var const config array<config CountryRegionMapping> CountryMatchmakingRegionMappings;
var native HatPointer ShowContentAsyncAction;
var native HatPointer ActiveLicenseInfo;
var delegate<OnLoginChange> __OnLoginChange__Delegate;
var delegate<OnLoginCancelled> __OnLoginCancelled__Delegate;
var delegate<OnCurrentUserChanged> __OnCurrentUserChanged__Delegate;
var delegate<OnMutingChange> __OnMutingChange__Delegate;
var delegate<OnPlayerTalkingStateChange> __OnPlayerTalkingStateChange__Delegate;
var delegate<OnFriendsChange> __OnFriendsChange__Delegate;
var delegate<OnAccountPickerComplete> __OnAccountPickerComplete__Delegate;
var delegate<OnLoginComplete> __OnLoginComplete__Delegate;
var delegate<OnLoginFailed> __OnLoginFailed__Delegate;
var delegate<OnLogoutCompleted> __OnLogoutCompleted__Delegate;
var delegate<OnSystemUserControllerPairingChanged> __OnSystemUserControllerPairingChanged__Delegate;
var delegate<OnUserAccountInfoRetrieved> __OnUserAccountInfoRetrieved__Delegate;
var delegate<OnPrivilegeLevelChecked> __OnPrivilegeLevelChecked__Delegate;
var delegate<OnPrivilegeCheckedForUsers> __OnPrivilegeCheckedForUsers__Delegate;
var delegate<OnReadProfileSettingsComplete> __OnReadProfileSettingsComplete__Delegate;
var delegate<OnWriteProfileSettingsComplete> __OnWriteProfileSettingsComplete__Delegate;
var delegate<OnLoginStatusChange> __OnLoginStatusChange__Delegate;
var delegate<OnReadFriendsComplete> __OnReadFriendsComplete__Delegate;
var delegate<OnRecognitionComplete> __OnRecognitionComplete__Delegate;
var delegate<OnLinkStatusChange> __OnLinkStatusChange__Delegate;
var delegate<OnExternalUIChange> __OnExternalUIChange__Delegate;
var delegate<OnControllerChange> __OnControllerChange__Delegate;
var delegate<OnConnectionStatusChange> __OnConnectionStatusChange__Delegate;
var delegate<OnStorageDeviceChange> __OnStorageDeviceChange__Delegate;
var delegate<OnFocusChange> __OnFocusChange__Delegate;
var delegate<OnKeyboardInputComplete> __OnKeyboardInputComplete__Delegate;
var delegate<OnWritePlayerStorageComplete> __OnWritePlayerStorageComplete__Delegate;
var delegate<OnReadPlayerStorageForNetIdComplete> __OnReadPlayerStorageForNetIdComplete__Delegate;
var delegate<OnReadPlayerStorageComplete> __OnReadPlayerStorageComplete__Delegate;
var delegate<OnAddFriendByNameComplete> __OnAddFriendByNameComplete__Delegate;
var delegate<OnFriendInviteReceived> __OnFriendInviteReceived__Delegate;
var delegate<OnReceivedGameInvite> __OnReceivedGameInvite__Delegate;
var delegate<OnReceivedGameInviteById> __OnReceivedGameInviteById__Delegate;
var delegate<OnJoinFriendGameComplete> __OnJoinFriendGameComplete__Delegate;
var delegate<OnFriendMessageReceived> __OnFriendMessageReceived__Delegate;
var delegate<OnUnlockAchievementComplete> __OnUnlockAchievementComplete__Delegate;
var delegate<OnReadAchievementsComplete> __OnReadAchievementsComplete__Delegate;
var delegate<OnShowHelpComplete> __OnShowHelpComplete__Delegate;
var delegate<OnTokenAndSignatureRetrieved> __OnTokenAndSignatureRetrieved__Delegate;
var delegate<OnShowGamerCardComplete> __OnShowGamerCardComplete__Delegate;
var delegate<OnDeviceSelectionComplete> __OnDeviceSelectionComplete__Delegate;
var delegate<OnProfileDataChanged> __OnProfileDataChanged__Delegate;
var delegate<OnPeoplePickerComplete> __OnPeoplePickerComplete__Delegate;
var delegate<OnAcceptReceivedData> __OnAcceptReceivedData__Delegate;
var delegate<OnReadCrossTitleProfileSettingsComplete> __OnReadCrossTitleProfileSettingsComplete__Delegate;
var delegate<OnReadOnlineProfilesComplete> __OnReadOnlineProfilesComplete__Delegate;
var delegate<OnRegisterLocalTalkerComplete> __OnRegisterLocalTalkerComplete__Delegate;
var delegate<OnUnregisterLocalTalkerComplete> __OnUnregisterLocalTalkerComplete__Delegate;
var delegate<OnUnregisterRemoteTalkerComplete> __OnUnregisterRemoteTalkerComplete__Delegate;
var delegate<OnRemoteTalkerStatusChange> __OnRemoteTalkerStatusChange__Delegate;
var delegate<OnTrialModeUpdate> __OnTrialModeUpdate__Delegate;
var delegate<OnReadMicroTransactionStatusComplete> __OnReadMicroTransactionStatusComplete__Delegate;
var delegate<OnIsConnectedToOnlineServiceChecked> __OnIsConnectedToOnlineServiceChecked__Delegate;
var delegate<OnStoreDataRead> __OnStoreDataRead__Delegate;
var delegate<OnEntitlementsRead> __OnEntitlementsRead__Delegate;

// Export Uonlinesubsystemdingo::execInit(FFrame&, void* const)
native event bool Init();

// Export Uonlinesubsystemdingo::execExit(FFrame&, void* const)
native event Exit();

delegate OnLoginChange(byte LocalUserNum);

delegate OnLoginCancelled();

delegate OnCurrentUserChanged(byte LocalUserNum, string CurrentUser, string LoggedInUser);

delegate OnMutingChange();

delegate OnPlayerTalkingStateChange(UniqueNetId Player, bool bIsTalking);

function AddPlayerTalkingDelegate(delegate<OnPlayerTalkingStateChange> TalkerDelegate)
{
    if(RemoteTalkerStatusChangeDelegates.Find(TalkerDelegate == -1)
    {
        RemoteTalkerStatusChangeDelegates.AddItem(TalkerDelegate;
    }
}

function ClearPlayerTalkingDelegate(delegate<OnPlayerTalkingStateChange> TalkerDelegate)
{
    RemoteTalkerStatusChangeDelegates.RemoveItem(TalkerDelegate;
}

delegate OnFriendsChange();

// Export Uonlinesubsystemdingo::execIsPlayerInSession(FFrame&, void* const)
native function bool IsPlayerInSession(name SessionName, UniqueNetId PlayerID);

function GetRegisteredPlayers(name SessionName, out array<UniqueNetId> OutRegisteredPlayers)
{
    local int Idx, PlayerIdx;

    OutRegisteredPlayers.Length = 0;
    Idx = 0;
    J0x17:

    if(Idx < Sessions.Length)
    {
        if(Sessions[Idx].SessionName == SessionName)
        {
            OutRegisteredPlayers.Length = Sessions[Idx].Registrants.Length;
            PlayerIdx = 0;
            J0xA0:

            if(PlayerIdx < Sessions[Idx].Registrants.Length)
            {
                OutRegisteredPlayers[PlayerIdx] = Sessions[Idx].Registrants[PlayerIdx].PlayerNetId;
                ++ PlayerIdx;
                goto J0xA0;
            }
            goto J0x14B;
        }
        ++ Idx;
        goto J0x17;
    }
    J0x14B:

}

// Export Uonlinesubsystemdingo::execShowLoginUI(FFrame&, void* const)
native function bool ShowLoginUI(byte LocalUserNum, optional bool bShowOnlineOnly)
{
    bShowOnlineOnly = false;                
}

delegate OnAccountPickerComplete(bool bForceLogin);

function AddAccountPickerCompleteDelegate(delegate<OnAccountPickerComplete> InDelegate)
{
    if(AccountPickerCompleteDelegates.Find(InDelegate == -1)
    {
        AccountPickerCompleteDelegates.AddItem(InDelegate;
    }
}

function RemoveAccountPickerCompleteDelegate(delegate<OnAccountPickerComplete> InDelegate)
{
    AccountPickerCompleteDelegates.RemoveItem(InDelegate;
}

// Export Uonlinesubsystemdingo::execLogin(FFrame&, void* const)
native function bool Login(byte LocalUserNum, optional string LoginName, optional string Password, optional bool bWantsLocalOnly)
{
    LoginName = "";
    Password = "";                            
}

delegate OnLoginComplete(byte LocalUserNum, bool bWasSuccessful, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode);

function AddLoginCompleteDelegate(byte LocalUserNum, delegate<OnLoginComplete> InDelegate)
{
    if(OnLoginCompleteDelegates.Find(InDelegate == -1)
    {
        OnLoginCompleteDelegates.AddItem(InDelegate;
    }
}

function ClearLoginCompleteDelegate(byte LocalUserNum, delegate<OnLoginComplete> InDelegate)
{
    OnLoginCompleteDelegates.RemoveItem(InDelegate;
}

function bool AutoLogin()
{
    return false;
}

delegate OnLoginFailed(byte LocalUserNum, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode);

function AddLoginFailedDelegate(byte LocalUserNum, delegate<OnLoginFailed> FailedDelegate)
{
    if(LoginFailedDelegates.Find(FailedDelegate == -1)
    {
        LoginFailedDelegates.AddItem(FailedDelegate;
    }
}

function ClearLoginFailedDelegate(byte LocalUserNum, delegate<OnLoginFailed> FailedDelegate)
{
    LoginFailedDelegates.RemoveItem(FailedDelegate;
}

// Export Uonlinesubsystemdingo::execLogout(FFrame&, void* const)
native function bool Logout(byte LocalUserNum);

delegate OnLogoutCompleted(bool bWasSuccessful);

function AddLogoutCompletedDelegate(byte LocalUserNum, delegate<OnLogoutCompleted> LogoutDelegate);

function ClearLogoutCompletedDelegate(byte LocalUserNum, delegate<OnLogoutCompleted> LogoutDelegate);

delegate OnSystemUserControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum);

function AddSystemUserContrllerPairingChangedDelegate(delegate<OnSystemUserControllerPairingChanged> PairingChangeDelegate)
{
    if(UserControllerPairingChangeDelegates.Find(PairingChangeDelegate == -1)
    {
        UserControllerPairingChangeDelegates.AddItem(PairingChangeDelegate;
    }
}

function ClearSystemUserContrllerPairingChangedDelegate(delegate<OnSystemUserControllerPairingChanged> PairingChangeDelegate)
{
    UserControllerPairingChangeDelegates.RemoveItem(PairingChangeDelegate;
}

// Export Uonlinesubsystemdingo::execOnUserControllerPairingChanged(FFrame&, void* const)
native function OnUserControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum);

event AddOnSystemUserControllerPairingChangedDelegate()
{
    AddSystemUserContrllerPairingChangedDelegate(OnUserControllerPairingChanged);
}

event ClearOnSystemUserControllerPairingChangedDelegate()
{
    ClearSystemUserContrllerPairingChangedDelegate(OnUserControllerPairingChanged);
}

event bool SetLobbyInterface(Object NewInterface)
{
    LobbyInterface = KFOnlineLobbyDingo(NewInterface);
    return (LobbyInterface != none) && LobbyInterface.Initialize();
}

function TWOnlineLobby GetLobbyInterface()
{
    return LobbyInterface;
}

// Export Uonlinesubsystemdingo::execPairUserAndControllerAtIndex(FFrame&, void* const)
native function bool PairUserAndControllerAtIndex(byte PlayerIndex, byte ControllerIndex, int PairIndex);

// Export Uonlinesubsystemdingo::execGetLoginStatus(FFrame&, void* const)
native function Engine.OnlineSubsystem.ELoginStatus GetLoginStatus(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execGetUniquePlayerId(FFrame&, void* const)
native function bool GetUniquePlayerId(byte LocalUserNum, out UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execGetControllerIdFromNetId(FFrame&, void* const)
native function bool GetControllerIdFromNetId(UniqueNetId PlayerID, out byte ControllerId);

// Export Uonlinesubsystemdingo::execManuallyActivateUser(FFrame&, void* const)
native function ManuallyActivateUser(const UniqueNetId ForUniqueId);

// Export Uonlinesubsystemdingo::execActivateGamepad(FFrame&, void* const)
native function ActivateGamepad(const int GamepadIndex);

// Export Uonlinesubsystemdingo::execGetPlayerNickname(FFrame&, void* const)
native function string GetPlayerNickname(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execGetUserAccountInfo(FFrame&, void* const)
native function bool GetUserAccountInfo(byte LocalUserNum);

delegate OnUserAccountInfoRetrieved(bool bSuccessful, UserAccountInfo AccountInfo);

function AddGetUserAccountInfoDelegate(delegate<OnUserAccountInfoRetrieved> InDelegate)
{
    if(UserAccountInfoRetrievedDelegates.Find(InDelegate == -1)
    {
        UserAccountInfoRetrievedDelegates.AddItem(InDelegate;
    }
}

function ClearGetUserAccountInfoDelegate(delegate<OnUserAccountInfoRetrieved> InDelegate)
{
    UserAccountInfoRetrievedDelegates.RemoveItem(InDelegate;
}

delegate OnPrivilegeLevelChecked(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevel, bool bDiffersFromHint);

function AddPrivilegeLevelCheckedDelegate(delegate<OnPrivilegeLevelChecked> PrivilegeDelegate)
{
    if(PrivilegeCheckedDelegates.Find(PrivilegeDelegate == -1)
    {
        PrivilegeCheckedDelegates.AddItem(PrivilegeDelegate;
    }
}

function UpsellPremiumOnlineService();

function ClearPrivilegeLevelCheckedDelegate(delegate<OnPrivilegeLevelChecked> PrivilegeDelegate)
{
    PrivilegeCheckedDelegates.RemoveItem(PrivilegeDelegate;
}

delegate OnPrivilegeCheckedForUsers(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, array<PermissionsResult> Results);

function AddPrivilegeCheckedForUsersDelegate(delegate<OnPrivilegeCheckedForUsers> PrivilegeDelegate)
{
    if(PrivilegeCheckedForUsersDelegates.Find(PrivilegeDelegate == -1)
    {
        PrivilegeCheckedForUsersDelegates.AddItem(PrivilegeDelegate;
    }
}

function ClearPrivilegeCheckedForUsersDelegate(delegate<OnPrivilegeCheckedForUsers> PrivilegeDelegate)
{
    PrivilegeCheckedForUsersDelegates.RemoveItem(PrivilegeDelegate;
}

// Export Uonlinesubsystemdingo::execCanPlayOnline(FFrame&, void* const)
native function bool CanPlayOnline(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanCommunicateText(FFrame&, void* const)
native function bool CanCommunicateText(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanCommunicateVideo(FFrame&, void* const)
native function bool CanCommunicateVideo(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanCommunicateVoice(FFrame&, void* const)
native function bool CanCommunicateVoice(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanCommunicateVoiceWithUsers(FFrame&, void* const)
native function bool CanCommunicateVoiceWithUsers(byte LocalUserNum, array<SessionMemberInfo> Users);

// Export Uonlinesubsystemdingo::execCanShareUserCreatedContent(FFrame&, void* const)
native function bool CanShareUserCreatedContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanPurchaseContent(FFrame&, void* const)
native function bool CanPurchaseContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanViewPlayerProfiles(FFrame&, void* const)
native function bool CanViewPlayerProfiles(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanShowPresenceInformation(FFrame&, void* const)
native function bool CanShowPresenceInformation(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanRecordDVRClips(FFrame&, void* const)
native function bool CanRecordDVRClips(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanUseCloudStorage(FFrame&, void* const)
native function bool CanUseCloudStorage(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanAccessPremiumContent(FFrame&, void* const)
native function bool CanAccessPremiumContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanAccessPremiumVideoContent(FFrame&, void* const)
native function bool CanAccessPremiumVideoContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanBrowseInternet(FFrame&, void* const)
native function bool CanBrowseInternet(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanShareWithSocialNetwork(FFrame&, void* const)
native function bool CanShareWithSocialNetwork(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanShareKinectContent(FFrame&, void* const)
native function bool CanShareKinectContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execCanUploadFitnessData(FFrame&, void* const)
native function bool CanUploadFitnessData(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

// Export Uonlinesubsystemdingo::execIsFriend(FFrame&, void* const)
native function bool IsFriend(byte LocalUserNum, UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execAreAnyFriends(FFrame&, void* const)
native function bool AreAnyFriends(byte LocalUserNum, out array<FriendsQuery> Query);

// Export Uonlinesubsystemdingo::execIsMuted(FFrame&, void* const)
native function bool IsMuted(byte LocalUserNum, UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execShowFriendsUI(FFrame&, void* const)
native function bool ShowFriendsUI(byte LocalUserNum);

function AddLoginChangeDelegate(delegate<OnLoginChange> LoginDelegate)
{
    if(LoginChangeDelegates.Find(LoginDelegate == -1)
    {
        LoginChangeDelegates.AddItem(LoginDelegate;
    }
}

function ClearLoginChangeDelegate(delegate<OnLoginChange> LoginDelegate)
{
    LoginChangeDelegates.RemoveItem(LoginDelegate;
}

function AddLoginCancelledDelegate(delegate<OnLoginCancelled> CancelledDelegate)
{
    if(LoginCancelledDelegates.Find(CancelledDelegate == -1)
    {
        LoginCancelledDelegates.AddItem(CancelledDelegate;
    }
}

function ClearLoginCancelledDelegate(delegate<OnLoginCancelled> CancelledDelegate)
{
    LoginCancelledDelegates.RemoveItem(CancelledDelegate;
}

function AddCurrentUserChangedDelegate(delegate<OnCurrentUserChanged> CurrentUserDelegate)
{
    if(CurrentUserChangedDelegates.Find(CurrentUserDelegate == -1)
    {
        CurrentUserChangedDelegates.AddItem(CurrentUserDelegate;
    }
}

function ClearCurrentUserChangedDelegate(delegate<OnCurrentUserChanged> CurrentUserDelegate)
{
    CurrentUserChangedDelegates.RemoveItem(CurrentUserDelegate;
}

// Export Uonlinesubsystemdingo::execIsLocalLogin(FFrame&, void* const)
native function bool IsLocalLogin(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execIsGuestLogin(FFrame&, void* const)
native function bool IsGuestLogin(byte LocalUserNum);

function AddMutingChangeDelegate(delegate<OnMutingChange> MutingDelegate)
{
    if(MutingChangeDelegates.Find(MutingDelegate == -1)
    {
        MutingChangeDelegates[MutingChangeDelegates.Length] = MutingDelegate;
    }
}

function ClearMutingChangeDelegate(delegate<OnFriendsChange> MutingDelegate)
{
    local int RemoveIndex;

    RemoveIndex = MutingChangeDelegates.Find(MutingDelegate;
    if(RemoveIndex != -1)
    {
        MutingChangeDelegates.Remove(RemoveIndex, 1;
    }
}

function AddFriendsChangeDelegate(byte LocalUserNum, delegate<OnFriendsChange> FriendsDelegate)
{
    if(LocalUserNum == 0)
    {
        if(FriendsChangeDelegates.Find(FriendsDelegate == -1)
        {
            FriendsChangeDelegates[FriendsChangeDelegates.Length] = FriendsDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearFriendsChangeDelegate()");
    }
}

function ClearFriendsChangeDelegate(byte LocalUserNum, delegate<OnFriendsChange> FriendsDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = FriendsChangeDelegates.Find(FriendsDelegate;
        if(RemoveIndex != -1)
        {
            FriendsChangeDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearFriendsChangeDelegate()");
    }
}

// Export Uonlinesubsystemdingo::execReadProfileSettings(FFrame&, void* const)
native function bool ReadProfileSettings(byte LocalUserNum, OnlineProfileSettings ProfileSettings);

delegate OnReadProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful);

function AddReadProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadProfileSettingsComplete> ReadProfileSettingsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        if(PerUserDelegates[LocalUserNum].ReadProfileSettingsDelegates.Find(ReadProfileSettingsCompleteDelegate == -1)
        {
            PerUserDelegates[LocalUserNum].ReadProfileSettingsDelegates.AddItem(ReadProfileSettingsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddReadProfileSettingsCompleteDelegate()");
    }
}

function ClearReadProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadProfileSettingsComplete> ReadProfileSettingsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        PerUserDelegates[LocalUserNum].ReadProfileSettingsDelegates.RemoveItem(ReadProfileSettingsCompleteDelegate;        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearReadProfileSettingsCompleteDelegate()");
    }
}

function SetCachedProfile(OnlineProfileSettings InSettings)
{
    CachedProfile = InSettings;
}

function OnlineProfileSettings GetProfileSettings(byte LocalUserNum)
{
    return CachedProfile;
}

// Export Uonlinesubsystemdingo::execWriteProfileSettings(FFrame&, void* const)
native function bool WriteProfileSettings(byte LocalUserNum, OnlineProfileSettings ProfileSettings);

delegate OnWriteProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful);

function AddWriteProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnWriteProfileSettingsComplete> WriteProfileSettingsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        if(PerUserDelegates[LocalUserNum].WriteProfileSettingsDelegates.Find(WriteProfileSettingsCompleteDelegate == -1)
        {
            PerUserDelegates[LocalUserNum].WriteProfileSettingsDelegates.AddItem(WriteProfileSettingsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddWriteProfileSettingsCompleteDelegate()");
    }
}

function ClearWriteProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnWriteProfileSettingsComplete> WriteProfileSettingsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        PerUserDelegates[LocalUserNum].WriteProfileSettingsDelegates.RemoveItem(WriteProfileSettingsCompleteDelegate;        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearWriteProfileSettingsCompleteDelegate()");
    }
}

delegate OnLoginStatusChange(Engine.OnlineSubsystem.ELoginStatus NewStatus, UniqueNetId NewId);

function AddLoginStatusChangeDelegate(delegate<OnLoginStatusChange> LoginStatusDelegate, byte LocalUserNum)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        if(PerUserDelegates[LocalUserNum].LoginStatusChangeDelegates.Find(LoginStatusDelegate == -1)
        {
            PerUserDelegates[LocalUserNum].LoginStatusChangeDelegates.AddItem(LoginStatusDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to AddLoginStatusChangeDelegate()");
    }
}

function ClearLoginStatusChangeDelegate(delegate<OnLoginStatusChange> LoginStatusDelegate, byte LocalUserNum)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        PerUserDelegates[LocalUserNum].LoginStatusChangeDelegates.RemoveItem(LoginStatusDelegate;        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearLoginStatusChangeDelegate()");
    }
}

delegate OnReadFriendsComplete(bool bWasSuccessful);

// Export Uonlinesubsystemdingo::execReadFriendsList(FFrame&, void* const)
native function bool ReadFriendsList(byte LocalUserNum, optional int Count, optional int StartingAt);

// Export Uonlinesubsystemdingo::execAddReadFriendsCompleteDelegate(FFrame&, void* const)
native function AddReadFriendsCompleteDelegate(byte LocalUserNum, delegate<OnReadFriendsComplete> ReadFriendsCompleteDelegate);

// Export Uonlinesubsystemdingo::execClearReadFriendsCompleteDelegate(FFrame&, void* const)
native function ClearReadFriendsCompleteDelegate(byte LocalUserNum, delegate<OnReadFriendsComplete> ReadFriendsCompleteDelegate);

// Export Uonlinesubsystemdingo::execGetFriendsList(FFrame&, void* const)
native function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetFriendsList(byte LocalUserNum, out array<OnlineFriend> Friends, optional int Count, optional int StartingAt);

// Export Uonlinesubsystemdingo::execRegisterLocalTalker(FFrame&, void* const)
native function bool RegisterLocalTalker(byte LocalUserNum, optional byte ChannelIndex);

// Export Uonlinesubsystemdingo::execUnregisterLocalTalker(FFrame&, void* const)
native function bool UnregisterLocalTalker(byte LocalUserNum, optional byte ChannelIndex);

// Export Uonlinesubsystemdingo::execIsLocalTalkerRegistered(FFrame&, void* const)
native function bool IsLocalTalkerRegistered(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execAreAnyLocalTalkersRegistered(FFrame&, void* const)
native function bool AreAnyLocalTalkersRegistered();

// Export Uonlinesubsystemdingo::execReceiveReliableVoicePacket(FFrame&, void* const)
native function ReceiveReliableVoicePacket(byte MessageType, UniqueNetId Sender, int Length, byte InData[60]);

// Export Uonlinesubsystemdingo::execRegisterRemoteTalker(FFrame&, void* const)
native function bool RegisterRemoteTalker(UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execUnregisterRemoteTalker(FFrame&, void* const)
native function bool UnregisterRemoteTalker(UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execUnregisterAllRemoteTalkers(FFrame&, void* const)
native function bool UnregisterAllRemoteTalkers();

// Export Uonlinesubsystemdingo::execIsLocalPlayerTalking(FFrame&, void* const)
native function bool IsLocalPlayerTalking(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execIsRemotePlayerTalking(FFrame&, void* const)
native function bool IsRemotePlayerTalking(UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execIsHeadsetPresent(FFrame&, void* const)
native function bool IsHeadsetPresent(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execSetRemoteTalkerPriority(FFrame&, void* const)
native function bool SetRemoteTalkerPriority(byte LocalUserNum, UniqueNetId PlayerID, int Priority);

// Export Uonlinesubsystemdingo::execUpdatePlayerMuteSetting(FFrame&, void* const)
native function bool UpdatePlayerMuteSetting(bool NewPlayerMuteSetting);

// Export Uonlinesubsystemdingo::execMuteRemoteTalker(FFrame&, void* const)
native function bool MuteRemoteTalker(byte LocalUserNum, UniqueNetId PlayerID, optional bool bIsSystemWide);

// Export Uonlinesubsystemdingo::execUnmuteRemoteTalker(FFrame&, void* const)
native function bool UnmuteRemoteTalker(byte LocalUserNum, UniqueNetId PlayerID, optional bool bIsSystemWide);

// Export Uonlinesubsystemdingo::execIsTalkerMuted(FFrame&, void* const)
native function bool IsTalkerMuted(UniqueNetId ConsoleId);

// Export Uonlinesubsystemdingo::execStartNetworkedVoice(FFrame&, void* const)
native function StartNetworkedVoice(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execStopNetworkedVoice(FFrame&, void* const)
native function StopNetworkedVoice(byte LocalUserNum);

function bool StartSpeechRecognition(byte LocalUserNum);

function bool StopSpeechRecognition(byte LocalUserNum);

function bool GetRecognitionResults(byte LocalUserNum, out array<SpeechRecognizedWord> Words);

delegate OnRecognitionComplete();

function AddRecognitionCompleteDelegate(byte LocalUserNum, delegate<OnRecognitionComplete> RecognitionDelegate)
{
    if(SpeechRecognitionCompleteDelegates.Find(RecognitionDelegate == -1)
    {
        SpeechRecognitionCompleteDelegates[SpeechRecognitionCompleteDelegates.Length] = RecognitionDelegate;
    }
}

function ClearRecognitionCompleteDelegate(byte LocalUserNum, delegate<OnRecognitionComplete> RecognitionDelegate)
{
    local int RemoveIndex;

    RemoveIndex = SpeechRecognitionCompleteDelegates.Find(RecognitionDelegate;
    if(RemoveIndex != -1)
    {
        SpeechRecognitionCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool SelectVocabulary(byte LocalUserNum, int VocabularyId);

function bool SetSpeechRecognitionObject(byte LocalUserNum, SpeechRecognition SpeechRecogObj);

// Export Uonlinesubsystemdingo::execGetPlayerNicknameFromIndex(FFrame&, void* const)
native function string GetPlayerNicknameFromIndex(int UserIndex);

function bool HasLinkConnection()
{
    return true;
}

delegate OnLinkStatusChange(bool bIsConnected);

function AddLinkStatusChangeDelegate(delegate<OnLinkStatusChange> LinkStatusDelegate);

function ClearLinkStatusChangeDelegate(delegate<OnLinkStatusChange> LinkStatusDelegate);

delegate OnExternalUIChange(bool bIsOpening);

function AddExternalUIChangeDelegate(delegate<OnExternalUIChange> ExternalUIDelegate);

function ClearExternalUIChangeDelegate(delegate<OnExternalUIChange> ExternalUIDelegate);

function Engine.OnlineSubsystem.ENetworkNotificationPosition GetNetworkNotificationPosition();

function SetNetworkNotificationPosition(Engine.OnlineSubsystem.ENetworkNotificationPosition NewPos);

delegate OnControllerChange(int ControllerId, bool bIsConnected, bool bPauseGame);

function AddControllerChangeDelegate(delegate<OnControllerChange> ControllerChangeDelegate)
{
    if(ControllerChangeDelegates.Find(ControllerChangeDelegate == -1)
    {
        ControllerChangeDelegates.AddItem(ControllerChangeDelegate;
    }
}

function ClearControllerChangeDelegate(delegate<OnControllerChange> ControllerChangeDelegate)
{
    ControllerChangeDelegates.RemoveItem(ControllerChangeDelegate;
}

// Export Uonlinesubsystemdingo::execIsControllerConnected(FFrame&, void* const)
native function bool IsControllerConnected(int ControllerId);

// Export Uonlinesubsystemdingo::execGetCurrentConnectionStatus(FFrame&, void* const)
native function Engine.OnlineSubsystem.EOnlineServerConnectionStatus GetCurrentConnectionStatus();

delegate OnConnectionStatusChange(Engine.OnlineSubsystem.EOnlineServerConnectionStatus ConnectionStatus);

function AddConnectionStatusChangeDelegate(delegate<OnConnectionStatusChange> ConnectionStatusDelegate)
{
    if(ConnectionStatusChangeDelegates.Find(ConnectionStatusDelegate == -1)
    {
        ConnectionStatusChangeDelegates.AddItem(ConnectionStatusDelegate;
    }
}

function ClearConnectionStatusChangeDelegate(delegate<OnConnectionStatusChange> ConnectionStatusDelegate)
{
    ConnectionStatusChangeDelegates.RemoveItem(ConnectionStatusDelegate;
}

function Engine.OnlineSubsystem.ENATType GetNATType()
{
    return 1;
}

function int GetLocale()
{
    return 0;
}

delegate OnStorageDeviceChange();

function AddStorageDeviceChangeDelegate(delegate<OnStorageDeviceChange> StorageDeviceChangeDelegate);

function ClearStorageDeviceChangeDelegate(delegate<OnStorageDeviceChange> StorageDeviceChangeDelegate);

delegate OnFocusChange(bool bHasFocus);

function AddFocusChangeDelegate(delegate<OnFocusChange> FocusChangeDelegate)
{
    if(FocusChangeDelegates.Find(FocusChangeDelegate == -1)
    {
        FocusChangeDelegates.AddItem(FocusChangeDelegate;
    }
}

function ClearFocusChangeDelegate(delegate<OnFocusChange> FocusChangeDelegate)
{
    FocusChangeDelegates.RemoveItem(FocusChangeDelegate;
}

// Export Uonlinesubsystemdingo::execSetOnlineStatus(FFrame&, void* const)
native function SetOnlineStatus(byte LocalUserNum, string StatusString, optional bool PlayerActive)
{
    PlayerActive = true;                    
}

// Export Uonlinesubsystemdingo::execKeyboardInputFinished(FFrame&, void* const)
native function KeyboardInputFinished(bool bWasCanceled, string InputResults);

// Export Uonlinesubsystemdingo::execShowKeyboardUI(FFrame&, void* const)
native function bool ShowKeyboardUI(byte LocalUserNum, string TitleText, string DescriptionText, optional bool bIsPassword, optional bool bShouldValidate, optional string DefaultText, optional int MaxResultLength)
{
    bIsPassword = false;
    bShouldValidate = true;    
    MaxResultLength = 256;                                    
}

// Export Uonlinesubsystemdingo::execHideKeyboardUI(FFrame&, void* const)
native function bool HideKeyboardUI(byte LocalUserNum);

delegate OnKeyboardInputComplete(bool bWasSuccessful);

function AddKeyboardInputDoneDelegate(delegate<OnKeyboardInputComplete> InputDelegate)
{
    if(KeyboardInputDelegates.Find(InputDelegate == -1)
    {
        KeyboardInputDelegates.AddItem(InputDelegate;
    }
}

function ClearKeyboardInputDoneDelegate(delegate<OnKeyboardInputComplete> InputDelegate)
{
    local int RemoveIndex;

    RemoveIndex = KeyboardInputDelegates.Find(InputDelegate;
    if(RemoveIndex != -1)
    {
        KeyboardInputDelegates.Remove(RemoveIndex, 1;
    }
}

function string GetKeyboardInputResults(out byte bWasCanceled)
{
    bWasCanceled = KeyboardInputWasCanceled;
    return KeyboardInputResults;
}

delegate OnWritePlayerStorageComplete(byte LocalUserNum, bool bWasSuccessful);

function AddWritePlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnWritePlayerStorageComplete> WritePlayerStorageCompleteDelegate);

delegate OnReadPlayerStorageForNetIdComplete(UniqueNetId NetId, bool bWasSuccessful);

function AddReadPlayerStorageForNetIdCompleteDelegate(UniqueNetId NetId, delegate<OnReadPlayerStorageForNetIdComplete> ReadPlayerStorageForNetIdCompleteDelegate);

function bool ReadPlayerStorageForNetId(byte LocalUserNum, UniqueNetId NetId, OnlinePlayerStorage PlayerStorage);

function ClearReadPlayerStorageForNetIdCompleteDelegate(UniqueNetId NetId, delegate<OnReadPlayerStorageForNetIdComplete> ReadPlayerStorageForNetIdCompleteDelegate);

function bool ReadPlayerStorage(byte LocalUserNum, OnlinePlayerStorage PlayerStorage, optional int DeviceID)
{
    DeviceID = -1;
}

delegate OnReadPlayerStorageComplete(byte LocalUserNum, bool bWasSuccessful);

function AddReadPlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnReadPlayerStorageComplete> ReadPlayerStorageCompleteDelegate);

function ClearReadPlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnReadPlayerStorageComplete> ReadPlayerStorageCompleteDelegate);

function OnlinePlayerStorage GetPlayerStorage(byte LocalUserNum)
{
    return none;
}

function bool WritePlayerStorage(byte LocalUserNum, OnlinePlayerStorage PlayerStorage, optional int DeviceID)
{
    DeviceID = -1;
}

function ClearWritePlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnWritePlayerStorageComplete> WritePlayerStorageCompleteDelegate);

function bool AddFriend(byte LocalUserNum, UniqueNetId NewFriend, optional string Message);

function bool AddFriendByName(byte LocalUserNum, string FriendName, optional string Message);

delegate OnAddFriendByNameComplete(bool bWasSuccessful);

function AddAddFriendByNameCompleteDelegate(byte LocalUserNum, delegate<OnAddFriendByNameComplete> FriendDelegate);

function ClearAddFriendByNameCompleteDelegate(byte LocalUserNum, delegate<OnAddFriendByNameComplete> FriendDelegate);

function bool AcceptFriendInvite(byte LocalUserNum, UniqueNetId RequestingPlayer);

function bool DenyFriendInvite(byte LocalUserNum, UniqueNetId RequestingPlayer);

function bool RemoveFriend(byte LocalUserNum, UniqueNetId FormerFriend);

delegate OnFriendInviteReceived(byte LocalUserNum, UniqueNetId RequestingPlayer, string RequestingNick, string Message);

function AddFriendInviteReceivedDelegate(byte LocalUserNum, delegate<OnFriendInviteReceived> InviteDelegate);

function ClearFriendInviteReceivedDelegate(byte LocalUserNum, delegate<OnFriendInviteReceived> InviteDelegate);

function bool SendMessageToFriend(byte LocalUserNum, UniqueNetId Friend, string Message);

// Export Uonlinesubsystemdingo::execSendGameInviteToFriend(FFrame&, void* const)
native function bool SendGameInviteToFriend(byte LocalUserNum, name SessionName, UniqueNetId Friend, optional string Text);

// Export Uonlinesubsystemdingo::execSendGameInviteToFriends(FFrame&, void* const)
native function bool SendGameInviteToFriends(byte LocalUserNum, name SessionName, array<UniqueNetId> Friends, optional string Text);

function bool SendGameInviteToUsers(string SessionId, name SessionName, array<string> MembersToInvite, optional string Text);

delegate OnReceivedGameInvite(byte LocalUserNum, string InviterName);

function AddReceivedGameInviteDelegate(byte LocalUserNum, delegate<OnReceivedGameInvite> ReceivedGameInviteDelegate);

function ClearReceivedGameInviteDelegate(byte LocalUserNum, delegate<OnReceivedGameInvite> ReceivedGameInviteDelegate);

delegate OnReceivedGameInviteById(byte LocalUserNum, UniqueNetId InviterId);

function AddReceivedGameInviteByIdDelegate(byte LocalUserNum, delegate<OnReceivedGameInviteById> ReceivedGameInviteDelegate);

function ClearReceivedGameInviteByIdDelegate(byte LocalUserNum, delegate<OnReceivedGameInviteById> ReceivedGameInviteDelegate);

// Export Uonlinesubsystemdingo::execCheckForGameInviteOnLaunch(FFrame&, void* const)
native function CheckForGameInviteOnLaunch();

function bool JoinFriendGame(byte LocalUserNum, UniqueNetId Friend);

delegate OnJoinFriendGameComplete(bool bWasSuccessful);

function AddJoinFriendGameCompleteDelegate(delegate<OnJoinFriendGameComplete> JoinFriendGameCompleteDelegate);

function ClearJoinFriendGameCompleteDelegate(delegate<OnJoinFriendGameComplete> JoinFriendGameCompleteDelegate);

function GetFriendMessages(byte LocalUserNum, out array<OnlineFriendMessage> FriendMessages);

delegate OnFriendMessageReceived(byte LocalUserNum, UniqueNetId SendingPlayer, string SendingNick, string Message);

function AddFriendMessageReceivedDelegate(byte LocalUserNum, delegate<OnFriendMessageReceived> MessageDelegate);

function ClearFriendMessageReceivedDelegate(byte LocalUserNum, delegate<OnFriendMessageReceived> MessageDelegate);

function bool MuteAll(byte LocalUserNum, bool bAllowFriends);

function bool UnmuteAll(byte LocalUserNum);

function bool DeleteMessage(byte LocalUserNum, int MessageIndex);

function bool UnlockAchievement(byte LocalUserNum, int AchievementId, optional float PercentComplete)
{
    PercentComplete = 100;
}

delegate OnUnlockAchievementComplete(bool bWasSuccessful);

function AddUnlockAchievementCompleteDelegate(byte LocalUserNum, delegate<OnUnlockAchievementComplete> UnlockAchievementCompleteDelegate);

function ClearUnlockAchievementCompleteDelegate(byte LocalUserNum, delegate<OnUnlockAchievementComplete> UnlockAchievementCompleteDelegate);

// Export Uonlinesubsystemdingo::execReadAchievements(FFrame&, void* const)
native function bool ReadAchievements(byte LocalUserNum, optional int TitleId, optional bool bShouldReadText, optional bool bShouldReadImages)
{
    TitleId = 0;
    bShouldReadText = true;
    bShouldReadImages = false;                        
}

delegate OnReadAchievementsComplete(int TitleId);

function AddReadAchievementsCompleteDelegate(byte LocalUserNum, delegate<OnReadAchievementsComplete> ReadAchievementsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        if(PerUserDelegates[LocalUserNum].AchievementReadDelegates.Find(ReadAchievementsCompleteDelegate == -1)
        {
            PerUserDelegates[LocalUserNum].AchievementReadDelegates.AddItem(ReadAchievementsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to AddReadAchievementsComplete()");
    }
}

function ClearReadAchievementsCompleteDelegate(byte LocalUserNum, delegate<OnReadAchievementsComplete> ReadAchievementsCompleteDelegate)
{
    local int RemoveIndex;

    if((LocalUserNum >= 0) && LocalUserNum < 24)
    {
        RemoveIndex = PerUserDelegates[LocalUserNum].AchievementReadDelegates.Find(ReadAchievementsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            PerUserDelegates[LocalUserNum].AchievementReadDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearReadAchievementsCompleteDelegate()");
    }
}

// Export Uonlinesubsystemdingo::execGetAchievements(FFrame&, void* const)
native function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetAchievements(byte LocalUserNum, out array<AchievementDetails> Achievements, optional int TitleId)
{
    TitleId = 0;                    
}

// Export Uonlinesubsystemdingo::execClearAchievements(FFrame&, void* const)
native function ClearAchievements(byte LocalUserNum, optional int TitleId)
{
    TitleId = 0;                
}

// Export Uonlinesubsystemdingo::execShowProductDetailsUI(FFrame&, void* const)
native function bool ShowProductDetailsUI(byte LocalUserNum, optional string ParentProductId)
{
    ParentProductId = ProductID;                
}

// Export Uonlinesubsystemdingo::execShowContentMarketplaceUI(FFrame&, void* const)
native function bool ShowContentMarketplaceUI(byte LocalUserNum, int ParentProductType, int RequestedProductTypes, optional string ParentProductId)
{
    ParentProductId = ProductID;                        
}

// Export Uonlinesubsystemdingo::execShowContentPurchaseUI(FFrame&, void* const)
native function bool ShowContentPurchaseUI(byte LocalUserNum, string Offer);

// Export Uonlinesubsystemdingo::execShowContentRedeemCodeUI(FFrame&, void* const)
native function bool ShowContentRedeemCodeUI(byte LocalUserNum, string Offer);

// Export Uonlinesubsystemdingo::execCloseCurrentContentUI(FFrame&, void* const)
native function CloseCurrentContentUI();

function bool ShowFeedbackUI(byte LocalUserNum, UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execShowHelpUI(FFrame&, void* const)
native function bool ShowHelpUI(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execShowHelpForErrorUI(FFrame&, void* const)
native function bool ShowHelpForErrorUI(string ContextId, string ErrorString);

delegate OnShowHelpComplete(bool bWasSuccessful);

function AddShowHelpCompleteDelegate(delegate<OnShowHelpComplete> HelpDelegate)
{
    if(ShowHelpDelegates.Find(HelpDelegate == -1)
    {
        ShowHelpDelegates.AddItem(HelpDelegate;
    }
}

function ClearShowHelpCompleteDelegate(delegate<OnShowHelpComplete> HelpDelegate)
{
    ShowHelpDelegates.RemoveItem(HelpDelegate;
}

// Export Uonlinesubsystemdingo::execShowVideo(FFrame&, void* const)
native function bool ShowVideo(string URL);

// Export Uonlinesubsystemdingo::execOpenURL(FFrame&, void* const)
native function OpenURL(string WebsiteLink);

delegate OnTokenAndSignatureRetrieved(byte LocalUserNum, string URL, string Token, string Signature);

// Export Uonlinesubsystemdingo::execGetTokenAndSignatureForURL(FFrame&, void* const)
native function GetTokenAndSignatureForURL(byte LocalUserNum, string URL);

function AddURLTokenRetrievedDelegate(byte LocalUserNum, delegate<OnTokenAndSignatureRetrieved> tsrDelegate)
{
    if(TokenAndSignatureDelegates.Find(tsrDelegate == -1)
    {
        TokenAndSignatureDelegates.AddItem(tsrDelegate;
    }
}

function ClearURLTokenRetrievedDelegate(byte LocalUserNum, delegate<OnTokenAndSignatureRetrieved> tsrDelegate)
{
    TokenAndSignatureDelegates.RemoveItem(tsrDelegate;
}

delegate OnShowGamerCardComplete(bool bWasSuccessful);

function AddShowGamerCardCompleteDelegate(delegate<OnShowGamerCardComplete> GamerCardDelegate)
{
    if(ShowGamerCardCompleteDelegates.Find(GamerCardDelegate == -1)
    {
        ShowGamerCardCompleteDelegates.AddItem(GamerCardDelegate;
    }
}

function ClearShowGamerCardCompleteDelegate(delegate<OnShowGamerCardComplete> GamerCardDelegate)
{
    ShowGamerCardCompleteDelegates.RemoveItem(GamerCardDelegate;
}

// Export Uonlinesubsystemdingo::execShowGamerCardUI(FFrame&, void* const)
native function bool ShowGamerCardUI(byte LocalUserNum, UniqueNetId PlayerID);

function bool ShowMessagesUI(byte LocalUserNum);

function bool ShowAchievementsUI(byte LocalUserNum);

// Export Uonlinesubsystemdingo::execShowInviteUI(FFrame&, void* const)
native function bool ShowInviteUI(byte LocalUserNum, optional string InviteText);

function bool ShowMembershipMarketplaceUI(byte LocalUserNum);

function bool ShowDeviceSelectionUI(byte LocalUserNum, int SizeNeeded, optional bool bManageStorage);

delegate OnDeviceSelectionComplete(bool bWasSuccessful);

function AddDeviceSelectionDoneDelegate(byte LocalUserNum, delegate<OnDeviceSelectionComplete> DeviceDelegate);

function ClearDeviceSelectionDoneDelegate(byte LocalUserNum, delegate<OnDeviceSelectionComplete> DeviceDelegate);

function int GetDeviceSelectionResults(byte LocalUserNum, out string DeviceName);

function bool IsDeviceValid(int DeviceID, optional int SizeNeeded);

function bool UnlockGamerPicture(byte LocalUserNum, int PictureId);

delegate OnProfileDataChanged();

function AddProfileDataChangedDelegate(byte LocalUserNum, delegate<OnProfileDataChanged> ProfileDataChangedDelegate);

function ClearProfileDataChangedDelegate(byte LocalUserNum, delegate<OnProfileDataChanged> ProfileDataChangedDelegate);

// Export Uonlinesubsystemdingo::execShowFriendsInviteUI(FFrame&, void* const)
native function bool ShowFriendsInviteUI(byte LocalUserNum, UniqueNetId PlayerID);

// Export Uonlinesubsystemdingo::execShowPeoplePickerUI(FFrame&, void* const)
native function bool ShowPeoplePickerUI(byte LocalUserNum, array<OnlineFriend> People, int MaxSelectable, optional string Text);

delegate OnPeoplePickerComplete(bool bWasSuccessful, array<OnlineFriend> PeoplePicked);

function AddPeoplePickerCompleteDelegate(byte LocalUserNum, delegate<OnPeoplePickerComplete> InDelegate)
{
    if(PeoplePickerCompleteDelegates.Find(InDelegate == -1)
    {
        PeoplePickerCompleteDelegates[PeoplePickerCompleteDelegates.Length] = InDelegate;
    }
}

function ClearPeoplePickerCompleteDelegate(byte LocalUserNum, delegate<OnPeoplePickerComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = PeoplePickerCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        PeoplePickerCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool ShowDataSendingUI(byte LocalUserNum, string Message, string DataName, string DataDescription, array<byte> Data, int MaxSelectableUsers);

delegate OnAcceptReceivedData(string Data);

function AddAcceptReceivedDataDelegate(byte LocalUserNum, delegate<OnAcceptReceivedData> InDelegate);

function ClearAcceptReceivedDataDelegate(byte LocalUserNum, delegate<OnAcceptReceivedData> InDelegate);

function bool ShowPlayersUI(byte LocalUserNum);

function bool ShowCustomPlayersUI(byte LocalUserNum, const out array<UniqueNetId> Players, string Title, string Description);

function bool RecordPlayersRecentlyMet(byte LocalUserNum, out array<PlayerNameIdPair> Players, string GameDescription);

function bool UnlockAvatarAward(byte LocalUserNum, int AvatarItemId);

function bool ReadCrossTitleProfileSettings(byte LocalUserNum, int TitleId, OnlineProfileSettings ProfileSettings);

delegate OnReadCrossTitleProfileSettingsComplete(byte LocalUserNum, int TitleId, bool bWasSuccessful);

function AddReadCrossTitleProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadCrossTitleProfileSettingsComplete> ReadProfileSettingsCompleteDelegate);

function ClearReadCrossTitleProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadCrossTitleProfileSettingsComplete> ReadProfileSettingsCompleteDelegate);

function OnlineProfileSettings GetCrossTitleProfileSettings(byte LocalUserNum, int TitleId);

function ClearCrossTitleProfileSettings(byte LocalUserNum, int TitleId);

function bool ShowCustomMessageUI(byte LocalUserNum, const out array<UniqueNetId> Recipients, string MessageTitle, string NonEditableMessage, optional string EditableMessage);

// Export Uonlinesubsystemdingo::execShowSystemErrorUI(FFrame&, void* const)
native function bool ShowSystemErrorUI(int ErrorCode, string ErrorContext);

// Export Uonlinesubsystemdingo::execShowCustomErrorUI(FFrame&, void* const)
native function bool ShowCustomErrorUI(int ErrorCode, string ErrorContext, string DialogTitle, string DialogContent);

// Export Uonlinesubsystemdingo::execGetPlayerNicknameForPlayerId(FFrame&, void* const)
native function bool GetPlayerNicknameForPlayerId(UniqueNetId InPlayerId, out string OutPlayerNickname);

// Export Uonlinesubsystemdingo::execGetPlayerIDForPlayerNickname(FFrame&, void* const)
native function bool GetPlayerIDForPlayerNickname(string InPlayerNickname, out UniqueNetId OutPlayerId);

// Export Uonlinesubsystemdingo::execCacheLoggedInGamepad(FFrame&, void* const)
native function CacheLoggedInGamepad();

// Export Uonlinesubsystemdingo::execReadOnlineProfilesForPlayers(FFrame&, void* const)
native function bool ReadOnlineProfilesForPlayers(array<string> PlayerIDs);

delegate OnReadOnlineProfilesComplete(bool bWasSuccessful, array<string> PlayerIDs, array<OnlineProfile> OnlineProfiles);

function AddReadOnlineProfilesCompleteDelegate(delegate<OnReadOnlineProfilesComplete> ReadOnlineProfileDelegate)
{
    if(ReadOnlineProfileDelegates.Find(ReadOnlineProfileDelegate == -1)
    {
        ReadOnlineProfileDelegates.AddItem(ReadOnlineProfileDelegate;
    }
}

function ClearReadOnlineProfilesCompleteDelegate(delegate<OnReadOnlineProfilesComplete> ReadOnlineProfileDelegate)
{
    ReadOnlineProfileDelegates.RemoveItem(ReadOnlineProfileDelegate;
}

delegate OnRegisterLocalTalkerComplete(byte LocalUserNum, bool bWasSuccessful);

function AddRegisterLocalTalkerCompleteDelegate(delegate<OnRegisterLocalTalkerComplete> RegisterLocalTalkerCompleteDelegate)
{
    if(RegisterLocalTalkerCompleteDelegates.Find(RegisterLocalTalkerCompleteDelegate == -1)
    {
        RegisterLocalTalkerCompleteDelegates.AddItem(RegisterLocalTalkerCompleteDelegate;
    }
}

function ClearRegisterLocalTalkerCompleteDelegate(delegate<OnRegisterLocalTalkerComplete> RegisterLocalTalkerCompleteDelegate)
{
    RegisterLocalTalkerCompleteDelegates.RemoveItem(RegisterLocalTalkerCompleteDelegate;
}

delegate OnUnregisterLocalTalkerComplete(byte LocalUserNum, bool bWasSuccessful);

function AddUnregisterLocalTalkerCompleteDelegate(delegate<OnUnregisterLocalTalkerComplete> UnregisterLocalTalkerCompleteDelegate)
{
    if(UnregisterLocalTalkerCompleteDelegates.Find(UnregisterLocalTalkerCompleteDelegate == -1)
    {
        UnregisterLocalTalkerCompleteDelegates.AddItem(UnregisterLocalTalkerCompleteDelegate;
    }
}

function ClearUnregisterLocalTalkerCompleteDelegate(delegate<OnUnregisterLocalTalkerComplete> UnregisterLocalTalkerCompleteDelegate)
{
    UnregisterLocalTalkerCompleteDelegates.RemoveItem(UnregisterLocalTalkerCompleteDelegate;
}

delegate OnUnregisterRemoteTalkerComplete(UniqueNetId RemoteNetId, bool bWasSuccessful);

function AddUnregisterRemoteTalkerCompleteDelegate(delegate<OnUnregisterRemoteTalkerComplete> UnregisterRemoteTalkerCompleteDelegate)
{
    if(UnregisterRemoteTalkerCompleteDelegates.Find(UnregisterRemoteTalkerCompleteDelegate == -1)
    {
        UnregisterRemoteTalkerCompleteDelegates.AddItem(UnregisterRemoteTalkerCompleteDelegate;
    }
}

function ClearUnregisterRemoteTalkerCompleteDelegate(delegate<OnUnregisterRemoteTalkerComplete> UnregisterRemoteTalkerCompleteDelegate)
{
    UnregisterRemoteTalkerCompleteDelegates.RemoveItem(UnregisterRemoteTalkerCompleteDelegate;
}

delegate OnRemoteTalkerStatusChange(UniqueNetId RemoteNetId, bool bIsTalking);

function AddRemoteTalkerStatusChangeDelegate(delegate<OnRemoteTalkerStatusChange> RemoteTalkerStatusChange)
{
    if(RemoteTalkerStatusChangeDelegates.Find(RemoteTalkerStatusChange == -1)
    {
        RemoteTalkerStatusChangeDelegates.AddItem(RemoteTalkerStatusChange;
    }
}

function ClearRemoteTalkerStatusChangeDelegate(delegate<OnRemoteTalkerStatusChange> RemoteTalkerStatusChange)
{
    RemoteTalkerStatusChangeDelegates.RemoveItem(RemoteTalkerStatusChange;
}

// Export Uonlinesubsystemdingo::execSendReputationFeedback(FFrame&, void* const)
native function bool SendReputationFeedback(byte SenderLocalUserNum, UniqueNetId ReputeeNetId, Engine.OnlineSubsystem.EReputationFeedbackType FeedbackType, string ReportText);

delegate OnTrialModeUpdate(bool bTrialActive);

function AddOnTrialModeUpdateDelegate(delegate<OnTrialModeUpdate> InDelegate)
{
    if(TrialModeUpdateDelegates.Find(InDelegate == -1)
    {
        TrialModeUpdateDelegates.AddItem(InDelegate;
    }
}

function ClearOnTrialModeUpdatedDelegate(delegate<OnTrialModeUpdate> InDelegate)
{
    TrialModeUpdateDelegates.RemoveItem(InDelegate;
}

function PostActivityFeedSample(int Foo, string Bar);

function bool ShowGamerCardUIByUsername(byte LocalUserNum, string UserName);

function StartRealtimeMultiplay();

function StopRealtimeMultiplay();

delegate OnReadMicroTransactionStatusComplete(bool bAuthorized, int iAppId, QWord qOrderId);

function AddReadMicroTransactionStatusCompleteDelegate(delegate<OnReadMicroTransactionStatusComplete> ReadMicroTransactionStatusCompleteDelegate);

function ClearReadMicroTransactionStatusCompleteDelegate(delegate<OnReadMicroTransactionStatusComplete> ReadMicroTransactionStatusCompleteDelegate);

delegate OnIsConnectedToOnlineServiceChecked(bool bIsConnected);

function AddIsConnectedToOnlineServiceCheckedDelegate(delegate<OnIsConnectedToOnlineServiceChecked> InDelegate);

function ClearIsConnectedToOnlineServiceCheckedDelegate(delegate<OnIsConnectedToOnlineServiceChecked> InDelegate);

function IsConnectedToOnlineService();

function SetSystemSafeFrame(float fSafeFrame);

function float GetSystemSafeFrame();

function AddReadOnlineAvatarCompleteDelegate(delegate<OnReadOnlineAvatarComplete> AvatarDelegate)
{
    if(ReadOnlineAvatarCompleteDelegates.Find(AvatarDelegate == -1)
    {
        ReadOnlineAvatarCompleteDelegates[ReadOnlineAvatarCompleteDelegates.Length] = AvatarDelegate;
    }
}

function ClearReadOnlineAvatarCompleteDelegate(delegate<OnReadOnlineAvatarComplete> AvatarDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ReadOnlineAvatarCompleteDelegates.Find(AvatarDelegate;
    if(RemoveIndex != -1)
    {
        ReadOnlineAvatarCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export Uonlinesubsystemdingo::execReadOnlineAvatar(FFrame&, void* const)
native function ReadOnlineAvatar(const UniqueNetId PlayerNetId, int Size, delegate<OnReadOnlineAvatarComplete> ReadOnlineAvatarCompleteDelegate);

function bool AddInGamePost(int InPostID, optional string InPostParam);

function PostActivityFeedBossKill(string BossName, string MapName);

function PostActivityFeedTeamAward(string AwardName);

function PostActivityFeedPerkLevelUp(string PerkClassName, int Level);

function ReadStoreData();

delegate OnStoreDataRead(bool bSuccessful);

function AddStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate);

function ClearStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate);

function ReadEntitlements();

delegate OnEntitlementsRead(bool bSuccess);

function AddOnEntitlementsReadDelegate(delegate<OnEntitlementsRead> InDelegate);

function ClearOnEntitlementsReadDelegate(delegate<OnEntitlementsRead> InDelegate);

private final event StartSaveDataRead(byte LocalUserNum, string Filename)
{
    ContentInterfaceImpl.AddReadSaveGameDataComplete(LocalUserNum, OnReadProfileSaveData);
    ContentInterfaceImpl.ReadSaveGameData(LocalUserNum, 0, "", "", Filename);
}

private final function OnReadProfileSaveData(bool bWasSuccessful, byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName)
{
    ContentInterfaceImpl.ClearReadSaveGameDataComplete(LocalUserNum, OnReadProfileSaveData);
    HandleReadProfileSaveDataComplete(bWasSuccessful, LocalUserNum, SaveFileName);
}

// Export Uonlinesubsystemdingo::execHandleReadProfileSaveDataComplete(FFrame&, void* const)
private native final function HandleReadProfileSaveDataComplete(bool bWasSuccessful, byte LocalUserNum, string SaveFileName);

private final event WriteProfileData(byte LocalUserNum, string Filename, const out array<byte> ProfileData)
{
    ContentInterfaceImpl.AddWriteSaveGameDataComplete(LocalUserNum, OnWriteProfileSaveData);
    ContentInterfaceImpl.WriteSaveGameData(LocalUserNum, 0, "", "", Filename, ProfileData);
}

private final function OnWriteProfileSaveData(bool bWasSuccessful, byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName)
{
    ContentInterfaceImpl.ClearWriteSaveGameDataComplete(LocalUserNum, OnWriteProfileSaveData);
    HandleWriteProfileSaveDataComplete(bWasSuccessful, LocalUserNum, SaveFileName);
}

// Export Uonlinesubsystemdingo::execHandleWriteProfileSaveDataComplete(FFrame&, void* const)
private native final function HandleWriteProfileSaveDataComplete(bool bWasSuccessful, byte LocalUserNum, string SaveFileName);

// Export Uonlinesubsystemdingo::execStartRegionPingAndSelectDefaultRegion(FFrame&, void* const)
native function StartRegionPingAndSelectDefaultRegion(delegate<OnPingRegionsComplete> Callback);

defaultproperties
{
    VoiceNotificationDelta=0.2
}