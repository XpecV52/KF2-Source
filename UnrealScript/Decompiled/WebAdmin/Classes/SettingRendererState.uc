/*******************************************************************************
 * SettingRendererState generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SettingRendererState extends Object;

struct KeyValue
{
    var string Key;
    var string Value;

    structdefaultproperties
    {
        Key=""
        Value=""
    }
};

var int SettingId;
var name SettingName;
var string settingType;
var Engine.Settings.EPropertyValueMappingType MappingType;
var Engine.Settings.ESettingsDataType DataType;
var string formName;
var string cssClass;
var string Label;
var string ToolTip;
var bool bEnabled;
var bool bVisible;
var array<KeyValue> substitutions;
var string extra;
var WebResponse WebResponse;
var string Path;

function Reset()
{
    SettingId = 0;
    SettingName = 'None';
    settingType = "";
    formName = "";
    cssClass = "";
    Label = "";
    ToolTip = "";
    bEnabled = true;
    bVisible = true;
    substitutions.Length = 0;
    extra = "";
    DataType = 0;
    MappingType = 0;
}

function Subst(string Key, coerce string Value)
{
    local int Idx;

    Idx = substitutions.Find('Key', Key;
    if(Idx == -1)
    {
        Idx = substitutions.Length;
        substitutions.Length = Idx + 1;
        substitutions[Idx].Key = Key;
    }
    substitutions[Idx].Value = Value;
}

function string getSubst(string Key)
{
    local int Idx;

    Idx = substitutions.Find('Key', Key;
    if(Idx == -1)
    {
        return "";
    }
    return substitutions[Idx].Value;
}
