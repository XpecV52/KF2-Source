/*******************************************************************************
 * WebAdminSettings generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WebAdminSettings extends Settings
    abstract;

struct SettingsGroupSpec
{
    var string GroupID;
    var const localized string DisplayName;
    var int pMin;
    var int pMax;
    var int lMin;
    var int lMax;

    structdefaultproperties
    {
        GroupID=""
        DisplayName=""
        pMin=0
        pMax=0
        lMin=0
        lMax=0
    }
};

struct FloatPredefinedValue
{
    var int PropertyId;
    var array<float> Values;

    structdefaultproperties
    {
        PropertyId=0
        Values=none
    }
};

struct StringPredefinedValue
{
    var int PropertyId;
    var array<string> Values;

    structdefaultproperties
    {
        PropertyId=0
        Values=none
    }
};

var protected array<SettingsGroupSpec> SettingsGroups;
var protected array<FloatPredefinedValue> FloatPredefinedValues;
var protected array<StringPredefinedValue> StringPredefinedValues;

function initSettings();

function setCurrentGameInfo(GameInfo Instance);

function saveSettings()
{
    saveInternal();
}

function cleanupSettings();

function array<SettingsGroupSpec> settingGroups()
{
    return SettingsGroups;
}

function float GetFloatPredefinedValues(int PropertyId, int Index, optional float defValue)
{
    local int Idx;

    defValue = 0;
    Idx = FloatPredefinedValues.Find('PropertyId', PropertyId;
    if(Idx == -1)
    {
        WarnInternal(((("GetFloatPredefinedValues(" $ string(PropertyId)) $ ", ") $ string(Index)) $ "): no property");
        return defValue;
    }
    if((FloatPredefinedValues[Idx].Values.Length <= Index) || Index < 0)
    {
        WarnInternal(((("GetFloatPredefinedValues(" $ string(PropertyId)) $ ", ") $ string(Index)) $ "): index out of bounds");
        return defValue;
    }
    return FloatPredefinedValues[Idx].Values[Index];
}

function string GetStringPredefinedValues(int PropertyId, int Index, optional string defValue)
{
    local int Idx;

    defValue = "";
    Idx = StringPredefinedValues.Find('PropertyId', PropertyId;
    if(Idx == -1)
    {
        WarnInternal(((("GetStringPredefinedValues(" $ string(PropertyId)) $ ", ") $ string(Index)) $ "): no property");
        return defValue;
    }
    if((StringPredefinedValues[Idx].Values.Length <= Index) || Index < 0)
    {
        WarnInternal(((("GetStringPredefinedValues(" $ string(PropertyId)) $ ", ") $ string(Index)) $ "): index out of bounds");
        return defValue;
    }
    return StringPredefinedValues[Idx].Values[Index];
}

protected function saveInternal();

protected function bool SetFloatPropertyByName(name prop, float Value)
{
    local int PropertyId;

    if(GetPropertyId(prop, PropertyId))
    {
        SetFloatProperty(PropertyId, Value);
        return true;
    }
    return false;
}

protected function bool SetIntPropertyByName(name prop, int Value)
{
    local int PropertyId;

    if(GetPropertyId(prop, PropertyId))
    {
        SetIntProperty(PropertyId, Value);
        return true;
    }
    return false;
}

protected function bool SetStringPropertyByName(name prop, string Value)
{
    local int PropertyId;

    if(GetPropertyId(prop, PropertyId))
    {
        SetStringProperty(PropertyId, Value);
        return true;
    }
    return false;
}

protected function bool SetStringArrayPropertyByName(name prop, array<string> Value, optional string delim)
{
    local int PropertyId;
    local string realval;
    local int I;

    delim = ";";
    if(GetPropertyId(prop, PropertyId))
    {
        I = 0;
        J0x31:

        if(I < Value.Length)
        {
            if(I > 0)
            {                
                realval $= delim;
            }            
            realval $= Value[I];
            ++ I;
            goto J0x31;
        }
        SetStringProperty(PropertyId, realval);
        return true;
    }
    return false;
}

protected function bool GetFloatPropertyByName(name prop, out float Value)
{
    local int PropertyId;

    if(GetPropertyId(prop, PropertyId))
    {
        return GetFloatProperty(PropertyId, Value);
    }
    return false;
}

protected function bool GetIntPropertyByName(name prop, out int Value)
{
    local int PropertyId;

    if(GetPropertyId(prop, PropertyId))
    {
        return GetIntProperty(PropertyId, Value);
    }
    return false;
}

protected function bool GetStringPropertyByName(name prop, out string Value)
{
    local int PropertyId;

    if(GetPropertyId(prop, PropertyId))
    {
        return GetStringProperty(PropertyId, Value);
    }
    return false;
}

protected function bool GetStringArrayPropertyByName(name prop, out array<string> Value, optional string delim)
{
    local int PropertyId;
    local string realval;
    local int I;

    delim = ";";
    if(GetPropertyId(prop, PropertyId))
    {
        if(GetStringProperty(PropertyId, realval))
        {
            Value.Length = 0;
            ParseStringIntoArray(realval, Value, delim, true);
            I = 0;
            J0x82:

            if(I < Value.Length)
            {                
                Value[I] -= Chr(10);                
                Value[I] -= Chr(13);
                ++ I;
                goto J0x82;
            }
            return true;
        }
    }
    return false;
}
