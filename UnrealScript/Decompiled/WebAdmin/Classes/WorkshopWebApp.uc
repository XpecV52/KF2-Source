/*******************************************************************************
 * WorkshopWebApp generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WorkshopWebApp extends Object
    implements(IQueryHandler);

var KFWorkshopSteamworks workshop;
var WorkshopTool Tool;
var webadmin webadmin;
var string WorkshopURL;
var bool bValidSetup;

function Cleanup()
{
    workshop = none;
    webadmin = none;
    Tool = none;
}

function Init(webadmin webapp)
{
    local int I;

    workshop = Tool.workshop;
    webadmin = webapp;
    I = 0;
    J0x46:

    if(I < Class'TcpNetDriver'.default.DownloadManagers.Length)
    {
        if(Class'TcpNetDriver'.default.DownloadManagers[I] ~= "OnlineSubsystemSteamworks.SteamWorkshopDownload")
        {
            bValidSetup = true;
            goto J0xEE;
        }
        ++ I;
        goto J0x46;
    }
    J0xEE:

}

function registerMenuItems(WebAdminMenu menu)
{
    menu.addMenu(WorkshopURL, "Workshop WebTool", (self), "Modify workshop settings.", -125);
}

function bool handleQuery(WebAdminQuery Q)
{
    switch(Q.Request.URI)
    {
        case WorkshopURL:
            handleWorkshop(Q);
            return true;
        default:
            return false;
            break;
    }
}

final function IncludeFile(WebAdminQuery Q, string File)
{
    local string S;

    if(webadmin.HTMLSubDirectory != "")
    {
        S = (((webadmin.Path $ "/") $ webadmin.HTMLSubDirectory) $ "/") $ File;
        if(Q.Response.FileExists(S))
        {
            Q.Response.IncludeUHTM(S);
            return;
        }
    }
    Q.Response.IncludeUHTM((webadmin.Path $ "/") $ File);
}

final function SendHeader(WebAdminQuery Q, string Title)
{
    local IQueryHandler Handler;

    Q.Response.Subst("page.title", Title);
    Q.Response.Subst("page.description", "");
    foreach webadmin.handlers(Handler,)
    {
        Handler.decoratePage(Q);        
    }    
    Q.Response.Subst("messages", webadmin.renderMessages(Q));
    if(Q.Session.GetString("privilege.log") != "")
    {
        Q.Response.Subst("privilege.log", webadmin.renderPrivilegeLog(Q));
    }
    IncludeFile(Q, "header.inc");
    Q.Response.SendText(("<div id=\"content\"><h2>" $ Title) $ "</h2></div><div class=\"section\">");
}

final function SendFooter(WebAdminQuery Q)
{
    IncludeFile(Q, "navigation.inc");
    IncludeFile(Q, "footer.inc");
    Q.Response.ClearSubst();
}

function handleWorkshop(WebAdminQuery Q)
{
    local int I;

    SendHeader(Q, "Workshop Webtool");
    if(Q.Request.GetVariable("add") == "Add")
    {
        Tool.AddNewWorkshopItem(Q.User.getUsername(), Q.Request.GetVariable("ID"));        
    }
    else
    {
        if(Q.Request.GetVariable("reload") != "")
        {
            workshop.UpdateWorkshopFiles();            
        }
        else
        {
            if(Q.Request.GetVariable("update") != "")
            {
                Q.Response.SendText("<font size=\"3\" color=\"red\">Settings updated, restarting map!</font><br>");
                SendFooter(Q);
                LogInternal("Net Driver settings reconfigured, restarting map...");
                Class'TcpNetDriver'.default.DownloadManagers.Insert(0, 1;
                Class'TcpNetDriver'.default.DownloadManagers[0] = "OnlineSubsystemSteamworks.SteamWorkshopDownload";
                Class'TcpNetDriver'.static.StaticSaveConfig();
                Tool.WorldInfo.Game.bUseSeamlessTravel = false;
                Tool.WorldInfo.ServerTravel("?restart");
                Tool.WorldInfo.NextSwitchCountdown = 0;
                bValidSetup = true;
                return;                
            }
            else
            {
                I = 0;
                J0x3D3:

                if(I < Tool.CurrentItems.Length)
                {
                    if(Q.Request.GetVariable("del" $ string(I)) == "Delete")
                    {
                        Tool.DeleteWorkshopItem(Q.User.getUsername(), I);
                        goto J0x4BE;
                    }
                    ++ I;
                    goto J0x3D3;
                }
            }
        }
    }
    J0x4BE:

    Q.Response.SendText((("<form method=\"post\" action=\"" $ webadmin.Path) $ WorkshopURL) $ "\">");
    if(!bValidSetup)
    {
        Q.Response.SendText("<font size=\"3\" color=\"red\">WARNING! Client workshop item downloading not enabled on this server!</font><br>");
        Q.Response.SendText("To enable, please click here: <input class=\"button\" type=\"submit\" name=\"update\" value=\"Update server settings\"><br>");
        Q.Response.SendText("This will update server settings and restart map.<br>");
        Q.Response.SendText("For more information, please visit this <a href=\"http://wiki.tripwireinteractive.com/index.php?title=Dedicated_Server_%28Killing_Floor_2%29#Setting_Up_Steam_Workshop_For_Servers\" target=\"_blank\">Wiki page</a>!<br><br>");
    }
    if(workshop.CurrentDownloads.Length > 0)
    {
        Tool.CheckDownload();
        Q.Response.SendText("<font size=\"2\" color=\"red\">Server is currently downloading</font><br>");
        Q.Response.SendText(("Items to download: " $ string(workshop.CurrentDownloads.Length)) $ "<br>");
        Q.Response.SendText(((("Current item: " $ Tool.LastDLID) $ " (") $ Tool.LastDLFile) $ ")<br>");
    }
    Q.Response.SendText("<table id=\"settings\" class=\"grid\">");
    Q.Response.SendText("<thead><tr><th>Current items</th><th></th><th></th></tr></thead><tbody>");
    Q.Response.SendText("<tr><th>Item ID</th><th>Item Name</th><th></th></tr>");
    I = 0;
    J0xB19:

    if(I < Tool.CurrentItems.Length)
    {
        Q.Response.SendText(((((("<tr><td>" $ Tool.CurrentItems[I].Id) $ "</td><td>") $ Tool.CurrentItems[I].N) $ "</td><td><input class=\"button\" type=\"submit\" name=\"del") $ string(I)) $ "\" value=\"Delete\"></td></tr>");
        ++ I;
        goto J0xB19;
    }
    Q.Response.SendText("<tr><th>New item (ID or URL):</th><td><input class=\"textbox\" class=\"text\" name=\"ID\" value=\"123456789\"></td><td><input class=\"button\" type=\"submit\" name=\"add\" value=\"Add\"></td></tr>");
    Q.Response.SendText("<tr><td colspan=2><input class=\"button\" type=\"submit\" name=\"reload\" value=\"Download items now!\"></td><td>and possibly restart map</td></tr>");
    Q.Response.SendText("</tbody></table></form>");
    Q.Response.SendText("</div></body></html>");
    SendFooter(Q);
}

function bool producesXhtml()
{
    return true;
}

function bool unhandledQuery(WebAdminQuery Q);

function decoratePage(WebAdminQuery Q);

defaultproperties
{
    WorkshopURL="/settings/WorkshopTool"
}