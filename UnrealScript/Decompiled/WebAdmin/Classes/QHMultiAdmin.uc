/*******************************************************************************
 * QHMultiAdmin generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QHMultiAdmin extends Object
    config(webadmin)
    implements(IQueryHandler);

var MultiWebAdminAuth authModule;
var webadmin webadmin;
var config array<config string> protectedAdmins;
var string fullMenu;
var const localized string menuAdmins;
var const localized string menuAdminsDesc;
var const localized string msgCreatedAdmin;
var const localized string msgDupName;
var const localized string msgCantRemoveLast;
var const localized string msgCantDelete;
var const localized string msgRemovedAdmin;
var const localized string msgUnableToRemove;
var const localized string msgSavedAdmin;
var const localized string msgPassError;
var const localized string msgCannotDisableSelf;
var const localized string msgPrivLogEnabled;
var const localized string msgPrivLogDisabled;

function Init(webadmin webapp)
{
    local int I;
    local string clsName;

    webadmin = webapp;
    clsName = (string(Class.GetPackageName()) $ ".") $ string(Class.Name);
    if(authModule == none)
    {
        LogInternal("Authentication module is not MultiWebAdminAuth, unregistering QHMultiAdmin", 'webadmin');
        I = 0;
        J0xD6:

        if(I < webadmin.QueryHandlers.Length)
        {
            if(webadmin.QueryHandlers[I] ~= clsName)
            {
                webadmin.QueryHandlers.Remove(I, 1;
                webadmin.SaveConfig();
                goto J0x18C;
            }
            ++ I;
            goto J0xD6;
        }
        J0x18C:

        Cleanup();
        return;        
    }
    else
    {
        I = 0;
        J0x1A6:

        if(I < webadmin.handlers.Length)
        {
            if(EqualEqual_InterfaceInterface(webadmin.handlers[I], (self)))
            {
                goto J0x223;
            }
            ++ I;
            goto J0x1A6;
        }
        J0x223:

        if(I == webadmin.handlers.Length)
        {
            webadmin.handlers[I] = (self);
        }
    }
}

function Cleanup()
{
    authModule = none;
    webadmin = none;
}

function bool producesXhtml()
{
    return true;
}

function bool handleQuery(WebAdminQuery Q)
{
    if(authModule == none)
    {
        return false;
    }
    switch(Q.Request.URI)
    {
        case "/multiadmin":
            handleAdmins(Q);
            return true;
        default:
            break;
    }
}

function bool unhandledQuery(WebAdminQuery Q)
{
    return false;
}

function decoratePage(WebAdminQuery Q);

function registerMenuItems(WebAdminMenu menu)
{
    if(authModule == none)
    {
        return;
    }
    menu.addMenu("/multiadmin", menuAdmins, (self), menuAdminsDesc, 1000);
}

function handleAdmins(WebAdminQuery Q)
{
    local string editAdmin, tmp;
    local array<string> tmpa;
    local int I;
    local MultiAdminData adminData;

    editAdmin = Q.Request.GetVariable("adminid");
    if((Q.Request.GetVariable("action") ~= "create") || Q.Request.GetVariable("action") ~= "create administrator")
    {
        if(Len(editAdmin) > 0)
        {
            if(authModule.records.Find('Name', editAdmin == -1)
            {
                adminData = new (none, editAdmin) Class'MultiAdminData';
                editAdmin = string(adminData.Name);
                adminData.SaveConfig();
                I = 0;
                J0x1A2:

                if(I < authModule.records.Length)
                {
                    if(Caps(authModule.records[I].Name) > Caps(editAdmin))
                    {
                        authModule.records.Insert(I, 1;
                        authModule.records[I].Name = editAdmin;
                        authModule.records[I].Data = adminData;
                        goto J0x2E1;
                    }
                    ++ I;
                    goto J0x1A2;
                }
                J0x2E1:

                if(I == authModule.records.Length)
                {
                    authModule.records.Length = I + 1;
                    authModule.records[I].Name = editAdmin;
                    authModule.records[I].Data = adminData;
                }
                webadmin.addMessage(Q, Repl(msgCreatedAdmin, "%s", editAdmin));                
            }
            else
            {
                webadmin.addMessage(Q, Repl(msgDupName, "%s", editAdmin), 2);
                editAdmin = "";
            }            
        }
        else
        {
            webadmin.addMessage(Q, "No name given.", 2);
        }
    }
    if(Q.Request.GetVariable("action") ~= "delete")
    {
        if(authModule.records.Length <= 1)
        {
            webadmin.addMessage(Q, msgCantRemoveLast, 2);            
        }
        else
        {
            if(Len(editAdmin) > 0)
            {
                if(!canDeleteAdmin(editAdmin, Q.User))
                {
                    webadmin.addMessage(Q, Repl(msgCantDelete, "%s", editAdmin), 2);                    
                }
                else
                {
                    if(authModule.removeAdminRecord(editAdmin))
                    {
                        webadmin.addMessage(Q, Repl(msgRemovedAdmin, "%s", editAdmin));                        
                    }
                    else
                    {
                        webadmin.addMessage(Q, Repl(msgUnableToRemove, "%s", editAdmin), 2);
                    }
                }
            }
        }
    }
    tmp = "";
    I = 0;
    J0x68D:

    if(I < authModule.records.Length)
    {
        if(!canEditAdmin(authModule.records[I].Name, Q.User))
        {            
        }
        else
        {
            Q.Response.Subst("multiadmin.name", Class'WebAdminUtils'.static.HTMLEscape(authModule.records[I].Name));
            if(authModule.records[I].Name ~= editAdmin)
            {
                Q.Response.Subst("multiadmin.selected", "selected=\"selected\"");                
            }
            else
            {
                Q.Response.Subst("multiadmin.selected", "");
            }
            authModule.getRecord(authModule.records[I].Name);
            if(authModule.records[I].Data.bEnabled)
            {
                Q.Response.Subst("multiadmin.class", "adminEnabled");                
            }
            else
            {
                Q.Response.Subst("multiadmin.class", "adminDisabled");
            }            
            tmp $= webadmin.Include(Q, "multiadmin_admin_select.inc");
        }
        ++ I;
        goto J0x68D;
    }
    Q.Response.Subst("admins", tmp);
    if(Len(editAdmin) > 0)
    {
        adminData = authModule.getRecord(editAdmin);
    }
    Q.Response.Subst("editor", "");
    if(adminData != none)
    {
        if(Q.Request.GetVariable("privlog") ~= "privlog")
        {
            tmp = Q.Session.GetString("privilege.log");
            if(tmp == "")
            {
                Q.Session.putString("privilege.log", "true");
                webadmin.addMessage(Q, msgPrivLogEnabled);                
            }
            else
            {
                Q.Session.putString("privilege.log", "");
                webadmin.addMessage(Q, msgPrivLogDisabled);
            }
        }
        if((Q.Request.GetVariable("action") ~= "save") && canEditAdmin(editAdmin, Q.User))
        {
            tmp = Q.Request.GetVariable("password1");
            if(tmp == Q.Request.GetVariable("password2"))
            {
                if(Len(tmp) > 0)
                {
                    tmp = authModule.getPasswordHash(adminData, tmp);
                    adminData.setPassword(tmp);
                }
                adminData.DisplayName = Q.Request.GetVariable("displayname");
                tmp = Q.Request.GetVariable("enabled");
                if(tmp ~= "1")
                {
                    adminData.bEnabled = true;                    
                }
                else
                {
                    if(Q.User.getUserid() == editAdmin)
                    {
                        webadmin.addMessage(Q, Repl(msgCannotDisableSelf, "%s", editAdmin), 1);                        
                    }
                    else
                    {
                        adminData.bEnabled = false;
                    }
                }
                ParseStringIntoArray(Q.Request.GetVariable("allow"), tmpa, Chr(10), true);
                adminData.Allow.Length = 0;
                I = 0;
                J0x1063:

                if(I < tmpa.Length)
                {
                    tmp = Class'WebAdminUtils'.static.Trim(tmpa[I]);
                    if(Len(tmp) == 0)
                    {                        
                    }
                    else
                    {
                        adminData.Allow[adminData.Allow.Length] = tmp;
                    }
                    ++ I;
                    goto J0x1063;
                }
                ParseStringIntoArray(Q.Request.GetVariable("deny"), tmpa, Chr(10), true);
                adminData.Deny.Length = 0;
                I = 0;
                J0x119E:

                if(I < tmpa.Length)
                {
                    tmp = Class'WebAdminUtils'.static.Trim(tmpa[I]);
                    if(Len(tmp) == 0)
                    {                        
                    }
                    else
                    {
                        adminData.Deny[adminData.Deny.Length] = tmp;
                    }
                    ++ I;
                    goto J0x119E;
                }
                if(Q.Request.GetVariable("order") ~= "AllowDeny")
                {
                    adminData.Order = 1;                    
                }
                else
                {
                    adminData.Order = 0;
                }
                adminData.SaveConfig();
                adminData.clearAuthCache();
                webadmin.addMessage(Q, msgSavedAdmin);                
            }
            else
            {
                webadmin.addMessage(Q, msgPassError, 2);
            }
        }
        Q.Response.Subst("adminid", Class'WebAdminUtils'.static.HTMLEscape(string(adminData.Name)));
        Q.Response.Subst("displayname", Class'WebAdminUtils'.static.HTMLEscape(adminData.DisplayName));
        if(adminData.bEnabled)
        {
            Q.Response.Subst("enabled.true", "checked=\"checked\"");
            Q.Response.Subst("enabled.false", "");            
        }
        else
        {
            Q.Response.Subst("enabled.true", "");
            Q.Response.Subst("enabled.false", "checked=\"checked\"");
        }
        if(adminData.Order == 0)
        {
            Q.Response.Subst("order.denyallow", "checked=\"checked\"");
            Q.Response.Subst("order.allowdeny", "");            
        }
        else
        {
            if(adminData.Order == 1)
            {
                Q.Response.Subst("order.allowdeny", "checked=\"checked\"");
                Q.Response.Subst("order.denyallow", "");                
            }
            else
            {
                Q.Response.Subst("order.denyallow", "");
                Q.Response.Subst("order.allowdeny", "");
            }
        }
        tmp = "";
        I = 0;
        J0x180C:

        if(I < adminData.Allow.Length)
        {
            if(Len(tmp) > 0)
            {                
                tmp $= Chr(10);
            }            
            tmp $= adminData.Allow[I];
            ++ I;
            goto J0x180C;
        }
        Q.Response.Subst("allow", tmp);
        tmp = "";
        I = 0;
        J0x1908:

        if(I < adminData.Deny.Length)
        {
            if(Len(tmp) > 0)
            {                
                tmp $= Chr(10);
            }            
            tmp $= adminData.Deny[I];
            ++ I;
            goto J0x1908;
        }
        Q.Response.Subst("deny", tmp);
        if(!canDeleteAdmin(string(adminData.Name), Q.User))
        {
            Q.Response.Subst("allowdelete", "disabled=\"disabled\"");            
        }
        else
        {
            Q.Response.Subst("allowdelete", "");
        }
        if(Len(fullMenu) == 0)
        {
            fullMenu = webadmin.menu.Render("/multiadmin_editor_menu.inc", "/multiadmin_editor_menuitem.inc");
        }
        Q.Response.Subst("menueditor", fullMenu);
        Q.Response.Subst("editor", webadmin.Include(Q, "multiadmin_editor.inc"));
    }
    webadmin.sendPage(Q, "multiadmin.html");
}

function bool canDeleteAdmin(string adminName, IWebAdminUser me)
{
    return false;
}

function bool canEditAdmin(string adminName, IWebAdminUser me)
{
    if(protectedAdmins.Find(adminName != -1)
    {
        if(me.getUserid() ~= adminName)
        {
            return true;
        }
        return false;
    }
    return true;
}

defaultproperties
{
    menuAdmins="Administrators"
    menuAdminsDesc="Manage WebAdmin administrators."
    msgCreatedAdmin="Created a new administrator with the name: %s"
    msgDupName="Unable to create a new administrator. There is already a admin with the name: %s"
    msgCantRemoveLast="You can not remove the last administrator."
    msgCantDelete="Administrator %s can not be deleted."
    msgRemovedAdmin="Removed administrator: %s"
    msgUnableToRemove="Unable to remove: %s"
    msgSavedAdmin="Saved administrator information"
    msgPassError="Passwords do not match."
    msgCannotDisableSelf="You cannot disable yourself."
    msgPrivLogEnabled="Privilege log enabled."
    msgPrivLogDisabled="Privilege log disabled."
}