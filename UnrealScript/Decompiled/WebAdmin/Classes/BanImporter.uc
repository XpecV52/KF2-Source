/*******************************************************************************
 * BanImporter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class BanImporter extends Object;

enum ImportStatus
{
    IS_DOWNLOADING,
    IS_PARSING,
    IS_DONE,
    IS_ERROR,
    IS_MAX
};

var BanImporter.ImportStatus Status;
var string importFromUrl;
var string ErrorMessage;
var const localized string msgIOError;
var const localized string msgInvalidResponse;
var const localized string msgInvalidJson;
var const localized string msgJsonNoBans;
var const localized string msgStatusDownloading;
var const localized string msgStatusParsing;
var const localized string msgStatusDone;
var const localized string msgStatusError;
var const localized string msgBadUrl;
var JsonObject jsonBans;

function bool isFinished()
{
    return (Status == 2) || Status == 3;
}

function string getStatusStr()
{
    switch(Status)
    {
        case 0:
            return msgStatusDownloading;
        case 1:
            return msgStatusParsing;
        case 2:
            return msgStatusDone;
        case 3:
            return msgStatusError;
        default:
            break;
    }
}

function importFrom(string URL)
{
    local bool Result;

    jsonBans = none;
    ErrorMessage = "";
    Status = 0;
    importFromUrl = URL;
    if(URL == "")
    {
        Status = 3;
        ErrorMessage = msgBadUrl;
        return;
    }
    LogInternal("Importing bans from: " $ URL, 'webadmin');
    Result = Class'HttpFactory'.static.CreateRequest().SetURL(importFromUrl).SetVerb("GET").SetProcessRequestCompleteDelegate(downloadFinished).SetHeader("X-WebAdmin", "KF2 WebAdmin; BanImporter").SetHeader("If-Modified-Since", "Thu, 1 Jan 1970 00:00:00 GMT").ProcessRequest();
    if(!Result)
    {
        LogInternal("Failed to initiate HTTP request.", 'webadmin');
        Status = 3;
        ErrorMessage = msgIOError;
    }
}

function downloadFinished(HttpRequestInterface Request, HttpResponseInterface Response, bool bDidSucceed)
{
    LogInternal("Webserver responded with code: " $ string(Response.GetResponseCode()), 'webadmin');
    if(!bDidSucceed)
    {
        LogInternal("Ban import failed. IO Error?", 'webadmin');
        Status = 3;
        ErrorMessage = msgIOError;
        return;
    }
    if(Response.GetResponseCode() == 200)
    {
        if(parseBans(Response.GetContentAsString()))
        {
            Status = 2;
            return;
        }
        Status = 3;
        ErrorMessage = Repl(ErrorMessage, "%content-type%", Response.GetContentType());
        ErrorMessage = Repl(ErrorMessage, "%content-length%", string(Response.GetContentLength()));
        return;
    }
    Status = 3;
    ErrorMessage = msgInvalidResponse;
    ErrorMessage = Repl(ErrorMessage, "%content-type%", Response.GetContentType());
    ErrorMessage = Repl(ErrorMessage, "%content-length%", string(Response.GetContentLength()));
    ErrorMessage = Repl(ErrorMessage, "%response-code%", string(Response.GetResponseCode()));
    return;
}

function bool parseBans(string Data)
{
    local JsonObject JSON;

    JSON = Class'JsonObject'.static.DecodeJson(Data);
    if(JSON == none)
    {
        ErrorMessage = msgInvalidJson;
        return false;
    }
    jsonBans = JSON.GetObject("bans");
    if(jsonBans == none)
    {
        ErrorMessage = msgJsonNoBans;
        return false;
    }
    foreach jsonBans.ObjectArray(JSON,)
    {
        if(JSON.HasKey("uniqueNetId") || JSON.HasKey("steamId64"))
        {            
            return true;
        }        
    }    
    ErrorMessage = msgJsonNoBans;
    return false;
}

function int applyBansTo(AccessControl AccessControl, OnlineSubsystem steamWorks)
{
    local JsonObject JSON;
    local string tmp;
    local UniqueNetId NetId;
    local int Cnt, Idx;

    foreach jsonBans.ObjectArray(JSON,)
    {
        tmp = JSON.GetStringValue("uniqueNetId");        
        tmp -= " ";
        if(tmp != "")
        {
            Class'OnlineSubsystem'.static.StringToUniqueNetId(tmp, NetId);            
        }
        else
        {
            if(steamWorks != none)
            {
                tmp = JSON.GetStringValue("steamId64");                
                tmp -= " ";
                steamWorks.Int64ToUniqueNetId(tmp, NetId);
            }
        }
        if(Class'WebAdminUtils'.static.UniqueNetIdToString(NetId) == "")
        {
            continue;            
        }
        else
        {
            Idx = 0;
            J0x188:

            if(Idx < AccessControl.BannedIDs.Length)
            {
                if(AccessControl.BannedIDs[Idx] == NetId)
                {
                    goto J0x203;
                }
                ++ Idx;
                goto J0x188;
            }
            J0x203:

            if(Idx == AccessControl.BannedIDs.Length)
            {
                AccessControl.BannedIDs.AddItem(NetId;
                ++ Cnt;
            }            
        }
    }    
    return Cnt;
}

defaultproperties
{
    msgIOError="File download failed. The URL might be incorrect."
    msgInvalidResponse="Invalid webserver response: %response-code%. URL might be incorrect."
    msgInvalidJson="Downloaded file did not contain valid JSON data."
    msgJsonNoBans="Downloaded file did not contain ban information."
    msgStatusDownloading="Downloading"
    msgStatusParsing="Parsing"
    msgStatusDone="Completed"
    msgStatusError="Error"
    msgBadUrl="Invalid URL"
}