/*******************************************************************************
 * QHCurrent generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QHCurrent extends Object
    config(webadmin)
    implements(IQueryHandler);

var webadmin webadmin;
var config int ChatRefresh;
var config bool bConsoleEnabled;
var config bool bAdminConsoleCommandsHack;
var config bool bEnableTeamChat;
var config bool hideNews;
var bool separateSpectators;
var config array<config string> denyUrlOptions;
var config array<config string> denyConsoleCommands;
var config string AdminCommandHandlerClass;
var AdminCommandHandler adminCmdHandler;
var string cssVisible;
var string cssHidden;
var array<PlayerReplicationInfo> sortedPRI;
var private string newUrl;
var NewsDesk NewsDesk;
var config array<config string> Notes;
var const localized string menuCurrent;
var const localized string menuCurrentDesc;
var const localized string menuPlayers;
var const localized string menuPlayersDesc;
var const localized string menuChat;
var const localized string menuChatDesc;
var const localized string menuChange;
var const localized string menuChangeDesc;
var const localized string menuConsole;
var const localized string menuConsoleDesc;
var const localized string menuBots;
var const localized string menuBotsDesc;
var const localized string NotesSaved;
var const localized string msgPlayerNotFound;
var const localized string msgNoHumanPlayer;
var const localized string msgVoiceMuted;
var const localized string msgVoiceUnmuted;
var const localized string msgTextMuted;
var const localized string msgTextUnmuted;
var const localized string msgCantBanAdmin;
var const localized string msgSessionBanned;
var const localized string msgCantKickAdmin;
var const localized string msgPlayerRemoved;
var const localized string msgTextMute;
var const localized string msgTextUnmute;
var const localized string msgExecDisabled;
var const localized string msgChangingGame;
var const localized string msgAddingBots;
var const localized string msgRemovedBots;
var const localized string msgNoMutators;
var const localized string msgAddingBotsTeam;
var const localized string msgYes;
var const localized string msgNo;
var const localized string msgScreenshot;
var const localized string rmRealistic;
var const localized string rmStandard;
var const localized string rmCustom;
var const localized string msgOff;
var const localized string pbLow;
var const localized string pbMedium;
var const localized string pbHigh;
var const localized string msgUnknown;
var const localized string msgOn;
var const localized string msgSessionBanNoROAC;
var const localized string msgNotAllowed;
var const localized string menuServerInfo;
var const localized string menuServerInfoDesc;
var array<string> playerActions;
var array<string> notAllowedBanConsoleCommands;

function Init(webadmin webapp)
{
    local class<AdminCommandHandler> achc;

    if(Len(AdminCommandHandlerClass) == 0)
    {
        AdminCommandHandlerClass = string(Class.GetPackageName()) $ ".AdminCommandHandler";
        SaveConfig();
    }
    webadmin = webapp;
    if(Len(webapp.startpage) == 0)
    {
        webapp.startpage = "/current";
        webapp.SaveConfig();
    }
    if(ChatRefresh < 500)
    {
        ChatRefresh = 5000;
    }
    if(bAdminConsoleCommandsHack)
    {
        achc = class<AdminCommandHandler>(DynamicLoadObject(AdminCommandHandlerClass, Class'Class'));
        if(achc != none)
        {
            adminCmdHandler = webadmin.WorldInfo.Spawn(achc);
        }
    }
    webadmin.WorldInfo.Game.SetTimer(0.1, false, 'CreateTeamChatProxy', self);
    if(!hideNews)
    {
        NewsDesk = new Class'NewsDesk';
        NewsDesk.GetNews();
    }
}

function CreateTeamChatProxy()
{
    local TeamChatProxy tcp;
    local int I;

    if(bEnableTeamChat)
    {
        if(webadmin.WorldInfo.Game.GameReplicationInfo == none)
        {
            webadmin.WorldInfo.Game.SetTimer(0.1, false, 'CreateTeamChatProxy', self);
            return;
        }
        LogInternal("Creating team chat proxies", 'webadmin');
        I = 0;
        J0xE1:

        if(I < webadmin.WorldInfo.Game.GameReplicationInfo.Teams.Length)
        {
            if(webadmin.WorldInfo.Game.GameReplicationInfo.Teams[I] == none)
            {                
            }
            else
            {
                tcp = webadmin.WorldInfo.Spawn(Class'TeamChatProxy',, name("TeamChatProxy__" $ string(I)));
                if(tcp != none)
                {
                    tcp.PlayerReplicationInfo.Team = webadmin.WorldInfo.Game.GameReplicationInfo.Teams[I];                    
                }
                else
                {
                    LogInternal("Failed to create TeamChatProxy for team " $ string(I), 'webadmin');
                }
            }
            ++ I;
            goto J0xE1;
        }
        if(webadmin.bChatLog)
        {
            webadmin.CreateChatLog();
        }        
    }
    else
    {
        if(webadmin.bChatLog)
        {
            webadmin.CreateChatLog();
        }
    }
}

function Cleanup()
{
    adminCmdHandler = none;
    webadmin = none;
    NewsDesk.Cleanup();
    NewsDesk = none;
    sortedPRI.Remove(0, sortedPRI.Length;
}

function bool producesXhtml()
{
    return true;
}

function registerMenuItems(WebAdminMenu menu)
{
    menu.addMenu("/current", menuCurrent, (self), menuCurrentDesc, -100);
    menu.addMenu("/current/info", menuServerInfo, (self), menuServerInfoDesc, -100);
    menu.addMenu("/current/info+data", "", (self));
    menu.addMenu("/current/change", menuChange, (self), menuChangeDesc, -90);
    menu.addMenu("/current/change+data", "", (self));
    menu.addMenu("/current/change+check", "", (self));
    menu.addMenu("/current/players", menuPlayers, (self), menuPlayersDesc, -80);
    menu.addMenu("/current/players+data", "", (self));
    menu.addMenu("/current/chat", menuChat, (self), menuChatDesc);
    menu.addMenu("/current/chat+data", "", (self),,, "/current+chat");
    if(bConsoleEnabled)
    {
        menu.addMenu("/console", menuConsole, (self), menuConsoleDesc);
    }
}

function bool handleQuery(WebAdminQuery Q)
{
    switch(Q.Request.URI)
    {
        case "/current":
            Q.Response.Redirect(webadmin.Path $ "/current/info");
            return true;
        case "/current/info":
            handleCurrent(Q);
            return true;
        case "/current/info+data":
            handleCurrentData(Q);
            return true;
        case "/current/players":
            handleCurrentPlayers(Q);
            return true;
        case "/current/players+data":
            handleCurrentPlayersData(Q);
            return true;
        case "/current/chat":
            handleCurrentChat(Q);
            return true;
        case "/current/chat+data":
            handleCurrentChatData(Q);
            return true;
        case "/console":
            if(bConsoleEnabled)
            {
                handleConsole(Q);
                return true;
            }
            return false;
        case "/current/change":
            handleCurrentChange(Q);
            return true;
        case "/current/change+data":
            handleCurrentChangeData(Q);
            return true;
        case "/current/change+check":
            if(newUrl == "")
            {
                Q.Response.SendText("ok");                
            }
            else
            {
                Q.Response.HttpResponse("HTTP/1.1 503 Service Unavailable");
            }
            return true;
        default:
            return false;
            break;
    }
}

function bool unhandledQuery(WebAdminQuery Q);

function decoratePage(WebAdminQuery Q);

function handleCurrentData(WebAdminQuery Q)
{
    local string tmp;
    local int Idx;

    if(Q.Request.GetVariable("action") ~= "save")
    {
        Notes.Length = 0;
        tmp = Q.Request.GetVariable("notes");
        Idx = InStr(tmp, Chr(10));
        J0xB2:

        if(Idx != -1)
        {
            Notes[Notes.Length] = Class'WebAdminUtils'.static.Trim(Left(tmp, Idx));
            tmp = Mid(tmp, Idx + 1);
            Idx = InStr(tmp, Chr(10));
            goto J0xB2;
        }
        tmp = Class'WebAdminUtils'.static.Trim(tmp);
        if(Len(tmp) > 0)
        {
            Notes[Notes.Length] = tmp;
        }
        SaveConfig();
        webadmin.addMessage(Q, NotesSaved);
    }
    if(Q.Request.GetVariable("ajax") == "1")
    {
        Q.Response.AddHeader("Content-Type: text/xml");
        Q.Response.SendText("<request>");
        Q.Response.SendText("<messages><![CDATA[");
        Q.Response.SendText(webadmin.renderMessages(Q));
        Q.Response.SendText("]]></messages>");
        Q.Response.SendText("</request>");
    }
}

function handleCurrent(WebAdminQuery Q)
{
    local string Players;
    local PlayerReplicationInfo PRI;
    local int Idx, Cnt;
    local string tmp;
    local OnlineGameSettings GameSettings;

    handleCurrentData(Q);
    if((!hideNews && NewsDesk != none) && NotEqual_InterfaceInterface(NewsDesk.newsIface, (none)))
    {
        Q.Response.Subst("news", NewsDesk.renderNews(webadmin, Q));        
    }
    else
    {
        Q.Response.Subst("news", "");
    }
    tmp = "";
    Idx = 0;
    J0x129:

    if(Idx < Notes.Length)
    {        
        tmp $= (Notes[Idx] $ Chr(10));
        ++ Idx;
        goto J0x129;
    }
    Q.Response.Subst("notes", Class'WebAdminUtils'.static.HTMLEscape(tmp));
    substGameInfo(Q);
    GameSettings = webadmin.WorldInfo.Game.GameInterface.GetGameSettings(webadmin.WorldInfo.Game.PlayerReplicationInfoClass.default.SessionName);
    if(GameSettings != none)
    {
        if(GameSettings.bAntiCheatProtected)
        {
            Q.Response.Subst("server.anticheat", msgOn);            
        }
        else
        {
            Q.Response.Subst("server.anticheat", msgOff);
        }
    }
    Q.Response.Subst("teams", getCurrentTeamInfo(Q));
    Q.Response.Subst("server.name", Class'WebAdminUtils'.static.HTMLEscape(webadmin.WorldInfo.Game.GameReplicationInfo.ServerName));
    buildSortedPRI(Q.Request.GetVariable("sortby", "score"), Q.Request.GetVariable("reverse", "true") ~= "true", false);
    Cnt = 0;
    foreach sortedPRI(PRI, Idx)
    {
        if(separateSpectators && PRI.bOnlySpectator)
        {
            continue;            
        }
        else
        {
            if((Cnt % 2) == 0)
            {
                Q.Response.Subst("evenodd", "even");                
            }
            else
            {
                Q.Response.Subst("evenodd", "odd");
            }
            substPri(Q, PRI);            
            Players $= webadmin.Include(Q, "current_player_row.inc");
            ++ Cnt;            
        }
    }    
    if(sortedPRI.Length == 0)
    {
        Players = webadmin.Include(Q, "current_player_empty.inc");
    }
    Q.Response.Subst("sorted." $ Q.Request.GetVariable("sortby", "score"), "sorted");
    if(!Q.Request.GetVariable("reverse", "true") ~= "true")
    {
        Q.Response.Subst("reverse." $ Q.Request.GetVariable("sortby", "score"), "true");
    }
    Q.Response.Subst("players", Players);
    Q.Response.Subst("rules", webadmin.Include(Q, getGameTypeIncFile(Q, "current_rules")));
    if(separateSpectators)
    {
        Q.Response.Subst("spectators", getCurrentSpectatorsInfo(Q));        
    }
    else
    {
        Q.Response.Subst("spectators", "");
    }
    webadmin.sendPage(Q, "current.html");
}

function string getCurrentSpectatorsInfo(WebAdminQuery Q)
{
    local array<PlayerReplicationInfo> spectators;
    local PlayerReplicationInfo PRI;
    local PlayerController PC;
    local bool inserted, cmp;
    local int Idx;
    local string tmp;

    foreach webadmin.WorldInfo.AllControllers(Class'PlayerController', PC)
    {
        if((PC.PlayerReplicationInfo == none) || !PC.PlayerReplicationInfo.bOnlySpectator)
        {
            continue;            
        }
        if(MessagingSpectator(PC) != none)
        {
            continue;            
        }
        inserted = false;
        foreach spectators(PRI, Idx)
        {
            cmp = comparePRI(PRI, PC.PlayerReplicationInfo, "name");
            if(cmp)
            {
                spectators.Insert(Idx, 1;
                spectators[Idx] = PC.PlayerReplicationInfo;
                inserted = true;                
            }
            else
            {                
            }
        }        
        if(!inserted)
        {
            spectators.AddItem(PC.PlayerReplicationInfo;
        }        
    }    
    tmp = "";
    if(spectators.Length == 0)
    {
        return "";
    }
    foreach spectators(PRI, Idx)
    {
        if(Idx > 0)
        {            
            tmp $= ", ";
        }        
        tmp $= Class'WebAdminUtils'.static.HTMLEscape(PRI.PlayerName);        
    }    
    Q.Response.Subst("spectators.names", tmp);
    Q.Response.Subst("spectators.current", string(spectators.Length));
    Q.Response.Subst("spectators.max", string(webadmin.WorldInfo.Game.MaxSpectators));
    return webadmin.Include(Q, "current_spectators.inc");
}

function substGameInfo(WebAdminQuery Q)
{
    local int Idx, I;
    local Mutator mut;
    local string tmp, tmp2;
    local array<string> activeMuts;

    Q.Response.Subst("game.name", Class'WebAdminUtils'.static.HTMLEscape(webadmin.WorldInfo.Game.GameName));
    Q.Response.Subst("game.type", (string(webadmin.WorldInfo.Game.Class.GetPackageName()) $ ".") $ string(webadmin.WorldInfo.Game.Class));
    Q.Response.Subst("map.title", Class'WebAdminUtils'.static.HTMLEscape(webadmin.WorldInfo.Title));
    Q.Response.Subst("map.author", Class'WebAdminUtils'.static.HTMLEscape(webadmin.WorldInfo.Author));
    Q.Response.Subst("map.name", string(webadmin.WorldInfo.GetPackageName()));
    if(Len(webadmin.WorldInfo.Title) > 0)
    {
        Q.Response.Subst("map.title.safe", Class'WebAdminUtils'.static.HTMLEscape(webadmin.WorldInfo.Title));        
    }
    else
    {
        Q.Response.Subst("map.title.safe", string(webadmin.WorldInfo.GetPackageName()));
    }
    tmp = ("/images/maps/" $ string(webadmin.WorldInfo.GetPackageName())) $ ".jpg";
    tmp2 = ("/images/maps/" $ Locs(string(webadmin.WorldInfo.GetPackageName()))) $ ".jpg";
    if(Q.Response.FileExists(tmp))
    {
        Q.Response.Subst("map.image", tmp);        
    }
    else
    {
        if(Q.Response.FileExists(tmp2))
        {
            Q.Response.Subst("map.image", tmp2);            
        }
        else
        {
            Q.Response.Subst("map.image", "/images/maps/noimage.png");
        }
    }
    webadmin.DataStoreCache.loadMutators();
    ParseStringIntoArray(webadmin.WorldInfo.Game.ParseOption(getServerOptions(), "mutator"), activeMuts, ",", true);
    mut = webadmin.WorldInfo.Game.BaseMutator;
    J0x789:

    if(mut != none)
    {
        tmp2 = (string(mut.Class.GetPackageName()) $ ".") $ string(mut.Class);
        if(activeMuts.Find(tmp2 == -1)
        {
            activeMuts.AddItem(tmp2;
        }
        mut = mut.NextMutator;
        goto J0x789;
    }
    tmp = "";
    I = 0;
    J0x877:

    if(I < activeMuts.Length)
    {
        if(Len(tmp) > 0)
        {            
            tmp $= ", ";
        }
        tmp2 = activeMuts[I];
        Idx = 0;
        J0x8E1:

        if(Idx < webadmin.DataStoreCache.Mutators.Length)
        {
            if(webadmin.DataStoreCache.Mutators[Idx].ClassName ~= tmp2)
            {                
                tmp $= webadmin.DataStoreCache.Mutators[Idx].FriendlyName;
                goto J0x9FB;
            }
            ++ Idx;
            goto J0x8E1;
        }
        J0x9FB:

        if(Idx == webadmin.DataStoreCache.Mutators.Length)
        {            
            tmp $= tmp2;
        }
        ++ I;
        goto J0x877;
    }
    Q.Response.Subst("rules.mutators", tmp);
    Q.Response.Subst("rules.timelimit", string(webadmin.WorldInfo.Game.TimeLimit));
    Q.Response.Subst("rules.goalscore", string(webadmin.WorldInfo.Game.GoalScore));
    Q.Response.Subst("rules.maxlives", string(webadmin.WorldInfo.Game.MaxLives));
    Q.Response.Subst("rules.difficulty", string(webadmin.WorldInfo.Game.GameDifficulty));
    Q.Response.Subst("rules.maxspectators", string(webadmin.WorldInfo.Game.MaxSpectators));
    Q.Response.Subst("rules.numspectators", string(webadmin.WorldInfo.Game.NumSpectators));
    Q.Response.Subst("rules.maxplayers", string(webadmin.WorldInfo.Game.MaxPlayers));
    Q.Response.Subst("rules.numplayers", string(webadmin.WorldInfo.Game.NumPlayers));
    Q.Response.Subst("rules.numbots", string(webadmin.WorldInfo.Game.NumBots));
    Q.Response.Subst("time.timelimit", string(webadmin.WorldInfo.Game.GameReplicationInfo.TimeLimit));
    Q.Response.Subst("time.elapsed", string(webadmin.WorldInfo.Game.GameReplicationInfo.ElapsedTime));
    Q.Response.Subst("time.remaining", string(webadmin.WorldInfo.Game.GameReplicationInfo.RemainingTime));
}

function string getCurrentTeamInfo(WebAdminQuery Q)
{
    local TeamInfo TeamInfo;
    local int I;
    local string tmp;

    if(!webadmin.WorldInfo.Game.bTeamGame && (KFGameInfo(webadmin.WorldInfo.Game) == none) || KFGameInfo(webadmin.WorldInfo.Game).Teams[1] != none)
    {
        return "";
    }
    tmp = "";
    I = 0;
    J0x107:

    if(I < webadmin.WorldInfo.Game.GameReplicationInfo.Teams.Length)
    {
        if((I % 2) == 0)
        {
            Q.Response.Subst("evenodd", "even");            
        }
        else
        {
            Q.Response.Subst("evenodd", "odd");
        }
        TeamInfo = webadmin.WorldInfo.Game.GameReplicationInfo.Teams[I];
        Q.Response.Subst("team.color", Class'WebAdminUtils'.static.ColorToHTMLColor(TeamInfo.TeamColor));
        Q.Response.Subst("team.index", string(TeamInfo.TeamIndex));
        Q.Response.Subst("team.name", Class'WebAdminUtils'.static.HTMLEscape(Class'WebAdminUtils'.static.getTeamNameEx(TeamInfo)));
        Q.Response.Subst("team.size", string(TeamInfo.Size));
        Q.Response.Subst("team.score", string(TeamInfo.Score));
        Q.Response.Subst("team.score.int", string(int(TeamInfo.Score)));        
        tmp $= webadmin.Include(Q, getGameTypeIncFile(Q, "current_team"));
        ++ I;
        goto J0x107;
    }
    Q.Response.Subst("teams", tmp);
    return webadmin.Include(Q, getGameTypeIncFile(Q, "current_teams"));
}

function string getGameTypeIncFile(WebAdminQuery Q, string Base)
{
    local string incFile;

    incFile = ((Base $ "_") $ Locs(string(webadmin.WorldInfo.Game.Class))) $ ".inc";
    if(webadmin.hasIncludeFile(Q, incFile))
    {
        return incFile;
    }
    return Base $ ".inc";
}

function buildSortedPRI(string sortkey, optional bool Reverse, optional bool includeBots)
{
    local Controller P;
    local PlayerReplicationInfo PRI;
    local int Idx;
    local bool cmp, inserted;

    Reverse = false;
    includeBots = true;
    sortedPRI.Remove(0, sortedPRI.Length;
    foreach webadmin.WorldInfo.AllControllers(Class'Controller', P)
    {
        if((!P.bDeleteMe && P.PlayerReplicationInfo != none) && P.bIsPlayer)
        {
            if(!includeBots && P.PlayerReplicationInfo.bBot)
            {
                continue;                
            }
            inserted = false;
            foreach sortedPRI(PRI, Idx)
            {
                cmp = comparePRI(PRI, P.PlayerReplicationInfo, sortkey);
                if(Reverse)
                {
                    cmp = !cmp;
                }
                if(cmp)
                {
                    sortedPRI.Insert(Idx, 1;
                    sortedPRI[Idx] = P.PlayerReplicationInfo;
                    inserted = true;                    
                }
                else
                {                    
                }
            }            
            if(!inserted)
            {
                sortedPRI.AddItem(P.PlayerReplicationInfo;
            }
        }        
    }    
}

function bool comparePRI(PlayerReplicationInfo PRI1, PlayerReplicationInfo PRI2, string Key)
{
    if((Key ~= "playername") || Key ~= "name")
    {
        return Caps(PRI1.PlayerName) > Caps(PRI2.PlayerName);        
    }
    else
    {
        if(Key ~= "score")
        {
            return PRI1.Score > PRI2.Score;            
        }
        else
        {
            if(Key ~= "deaths")
            {
                return PRI1.Deaths > PRI2.Deaths;                
            }
            else
            {
                if(Key ~= "ping")
                {
                    return PRI1.Ping > PRI2.Ping;                    
                }
                else
                {
                    if(Key ~= "lives")
                    {
                        return PRI1.NumLives > PRI2.NumLives;                        
                    }
                    else
                    {
                        if(Key ~= "kills")
                        {
                            return PRI1.Kills > PRI2.Kills;                            
                        }
                        else
                        {
                            if(Key ~= "starttime")
                            {
                                return PRI1.StartTime > PRI2.StartTime;
                            }
                        }
                    }
                }
            }
        }
    }
}

static function string getPlayerKey(PlayerReplicationInfo PRI)
{
    return (((string(PRI.PlayerID) $ "_") $ Class'OnlineSubsystem'.static.UniqueNetIdToString(PRI.UniqueId)) $ "_") $ string(PRI.CreationTime);
}

function substPri(WebAdminQuery Q, PlayerReplicationInfo PRI)
{
    local PlayerController PC;

    Q.Response.Subst("player.playerid", string(PRI.PlayerID));
    Q.Response.Subst("player.playerkey", getPlayerKey(PRI));
    Q.Response.Subst("player.name", Class'WebAdminUtils'.static.HTMLEscape(PRI.PlayerName));
    Q.Response.Subst("player.playername", Class'WebAdminUtils'.static.HTMLEscape(PRI.PlayerName));
    Q.Response.Subst("player.score", string(int(PRI.Score)));
    Q.Response.Subst("player.deaths", string(PRI.Deaths));
    Q.Response.Subst("player.ping", string(PRI.Ping * 4));
    Q.Response.Subst("player.exactping", string(PRI.ExactPing));
    Q.Response.Subst("player.lives", string(PRI.NumLives));
    if((webadmin.WorldInfo.Game.bTeamGame && (KFGameInfo(webadmin.WorldInfo.Game) == none) || KFGameInfo(webadmin.WorldInfo.Game).Teams[1] != none) && PRI.Team != none)
    {
        Q.Response.Subst("player.teamid", string(PRI.Team.TeamIndex));
        Q.Response.Subst("player.teamcolor", Class'WebAdminUtils'.static.ColorToHTMLColor(PRI.Team.TeamColor));
        Q.Response.Subst("player.teamname", Class'WebAdminUtils'.static.HTMLEscape(Class'WebAdminUtils'.static.getTeamNameEx(PRI.Team)));        
    }
    else
    {
        Q.Response.Subst("player.teamid", "");
        Q.Response.Subst("player.teamcolor", "transparent");
        Q.Response.Subst("player.teamname", "");
    }
    Q.Response.Subst("player.admin", Class'WebAdminUtils'.static.HTMLEscape(((PRI.bAdmin) ? default.msgYes : default.msgNo)));
    Q.Response.Subst("player.bot", Class'WebAdminUtils'.static.HTMLEscape(((PRI.bBot) ? default.msgYes : default.msgNo)));
    Q.Response.Subst("player.spectator", Class'WebAdminUtils'.static.HTMLEscape(((PRI.bIsSpectator) ? default.msgYes : default.msgNo)));
    Q.Response.Subst("player.kills", string(PRI.Kills));
    Q.Response.Subst("player.starttime", string(PRI.StartTime));
    PC = PlayerController(PRI.Owner);
    if(PC != none)
    {
        if(PC.Pawn != none)
        {
            Q.Response.Subst("player.pawn.health", string(PC.Pawn.Health));
            Q.Response.Subst("player.pawn.healthmax", string(PC.Pawn.HealthMax));            
        }
        else
        {
            Q.Response.Subst("player.pawn.health", "");
            Q.Response.Subst("player.pawn.healthmax", "");
        }
    }
}

function int handleCurrentPlayersAction(WebAdminQuery Q)
{
    local PlayerReplicationInfo PRI;
    local int Idx;
    local string IP, Action, kickMessage;
    local PlayerController PC, otherPC;

    Action = Q.Request.GetVariable("action");
    if(Action != "")
    {
        IP = Q.Request.GetVariable("playerkey");
        PRI = none;
        Idx = 0;
        J0xB3:

        if(Idx < webadmin.WorldInfo.Game.GameReplicationInfo.PRIArray.Length)
        {
            if((getPlayerKey(webadmin.WorldInfo.Game.GameReplicationInfo.PRIArray[Idx])) == IP)
            {
                PRI = webadmin.WorldInfo.Game.GameReplicationInfo.PRIArray[Idx];
                goto J0x220;
            }
            ++ Idx;
            goto J0xB3;
        }
        J0x220:

        if(PRI == none)
        {
            webadmin.addMessage(Q, msgPlayerNotFound, 1);            
        }
        else
        {
            if(Q.User.canPerform(webadmin.getAuthURL("/current/players#" $ Action)))
            {
                PC = PlayerController(PRI.Owner);
                if(NetConnection(PC.Player) == none)
                {
                    PC = none;
                }
                if(PC == none)
                {
                    webadmin.addMessage(Q, msgNoHumanPlayer, 1);                    
                }
                else
                {
                    kickMessage = "Engine.AccessControl.KickedMsg";
                    if(Action ~= "mutevoice")
                    {
                        foreach webadmin.WorldInfo.AllControllers(Class'PlayerController', otherPC)
                        {
                            otherPC.ServerMutePlayer(PC.PlayerReplicationInfo.UniqueId);                            
                        }                        
                        webadmin.addMessage(Q, Repl(msgVoiceMuted, "%s", PRI.PlayerName));
                        return 0;                        
                    }
                    else
                    {
                        if(Action ~= "unmutevoice")
                        {
                            foreach webadmin.WorldInfo.AllControllers(Class'PlayerController', otherPC)
                            {
                                otherPC.ServerUnmutePlayer(PC.PlayerReplicationInfo.UniqueId);                                
                            }                            
                            webadmin.addMessage(Q, Repl(msgVoiceUnmuted, "%s", PRI.PlayerName));
                            return 0;                            
                        }
                        else
                        {
                            if((((((((Action ~= "banip") || Action ~= "ban ip") || Action ~= "banid") || Action ~= "ban unique id") || Action ~= "banhash") || Action ~= "ban client hash") || Action ~= "sessionban") || Action ~= "session ban")
                            {
                                webadmin.addMessage(Q, msgNotAllowed, 2);
                            }
                        }
                    }
                }                
            }
            else
            {
                webadmin.addMessage(Q, msgNotAllowed, 2);
            }
        }
    }
    return 0;
}

function handleCurrentPlayers(WebAdminQuery Q)
{
    local PlayerReplicationInfo PRI;
    local int Idx;
    local string Players, IP;
    local PlayerController PC;
    local OnlineSubsystem steamWorks;
    local string tmp, playerAct;

    handleCurrentPlayersAction(Q);
    steamWorks = Class'GameEngine'.static.GetOnlineSubsystem();
    playerAct = "";
    Idx = 0;
    J0x53:

    if(Idx < playerActions.Length)
    {
        if(!Q.User.canPerform(webadmin.getAuthURL((Q.Request.URI $ "#") $ playerActions[Idx])))
        {            
        }
        else
        {
            Q.Response.Subst("action.action", Class'WebAdminUtils'.static.HTMLEscape(playerActions[Idx]));
            tmp = Localize("QHCurrent", "PlayerAction_" $ playerActions[Idx], "WebAdmin");
            if(tmp == "")
            {
                tmp = playerActions[Idx];
            }
            Q.Response.Subst("action.text", Class'WebAdminUtils'.static.HTMLEscape(tmp));            
            playerAct $= webadmin.Include(Q, "current_players_row_action.inc");
        }
        ++ Idx;
        goto J0x53;
    }
    Q.Response.Subst("actions", playerAct);
    buildSortedPRI(Q.Request.GetVariable("sortby", "name"), Q.Request.GetVariable("reverse", "") ~= "true", false);
    foreach sortedPRI(PRI, Idx)
    {
        PC = PlayerController(PRI.Owner);
        if(PC == none)
        {
            continue;            
        }
        else
        {
            if((Idx % 2) == 0)
            {
                Q.Response.Subst("evenodd", "even");                
            }
            else
            {
                Q.Response.Subst("evenodd", "odd");
            }
            substPri(Q, PRI);
            IP = Class'WebAdminUtils'.static.extractIp(PC.GetPlayerNetworkAddress());
            Q.Response.Subst("player.ip", IP);
            Q.Response.Subst("player.uniqueid", Class'WebAdminUtils'.static.UniqueNetIdToString(PRI.UniqueId));
            if(steamWorks != none)
            {
                Q.Response.Subst("player.steamid", steamWorks.UniqueNetIdToInt64(PRI.UniqueId));
                IP = steamWorks.UniqueNetIdToPlayerName(PRI.UniqueId);
                Q.Response.Subst("player.steamname", Class'WebAdminUtils'.static.HTMLEscape(IP));                
            }
            else
            {
                Q.Response.Subst("player.steamname", "");
                Q.Response.Subst("player.steamid", "");
            }            
            Players $= webadmin.Include(Q, "current_players_row.inc");            
        }
    }    
    if(sortedPRI.Length == 0)
    {
        Players = webadmin.Include(Q, "current_players_empty.inc");
    }
    Q.Response.Subst("sorted." $ Q.Request.GetVariable("sortby", "name"), "sorted");
    if(!Q.Request.GetVariable("reverse", "") ~= "true")
    {
        Q.Response.Subst("reverse." $ Q.Request.GetVariable("sortby", "name"), "true");
    }
    Q.Response.Subst("players", Players);
    webadmin.sendPage(Q, "current_players.html");
}

function handleCurrentPlayersData(WebAdminQuery Q)
{
    Q.Response.AddHeader("Content-Type: text/xml");
    Q.Response.SendText("<request>");
    switch(handleCurrentPlayersAction(Q))
    {
        case 3:
            Q.Response.SendText(((("<text playerkey=\"" $ Q.Request.GetVariable("playerkey")) $ "\" label=\"") $ msgTextMute) $ "\"/>");
            break;
        case 2:
            Q.Response.SendText(((("<text playerkey=\"" $ Q.Request.GetVariable("playerkey")) $ "\" label=\"") $ msgTextUnmute) $ "\"/>");
            break;
        case 1:
            Q.Response.SendText(("<kicked playerkey=\"" $ Q.Request.GetVariable("playerkey")) $ "\"/>");
            break;
        case 0:
            Q.Response.SendText("<nop/>");
            break;
        default:
            break;
    }
    Q.Response.SendText("<messages><![CDATA[");
    Q.Response.SendText(webadmin.renderMessages(Q));
    Q.Response.SendText("]]></messages>");
    Q.Response.SendText("</request>");
}

protected function banByIP(PlayerController PC)
{
    local string IP;

    IP = Class'WebAdminUtils'.static.extractIp(PC.GetPlayerNetworkAddress());
    webadmin.WorldInfo.Game.AccessControl.IPPolicies[webadmin.WorldInfo.Game.AccessControl.IPPolicies.Length] = "DENY," $ IP;
    webadmin.WorldInfo.Game.AccessControl.SaveConfig();
}

protected function banByID(PlayerController PC)
{
    if(PC.PlayerReplicationInfo.UniqueId != PC.PlayerReplicationInfo.default.UniqueId && !webadmin.WorldInfo.Game.AccessControl.IsIDBanned(PC.PlayerReplicationInfo.UniqueId))
    {
        webadmin.WorldInfo.Game.AccessControl.BannedIDs.AddItem(PC.PlayerReplicationInfo.UniqueId;
        webadmin.WorldInfo.Game.AccessControl.SaveConfig();
    }
}

function handleCurrentChat(WebAdminQuery Q, optional string page)
{
    local string msg;
    local int I;

    page = "current_chat.html";
    msg = Q.Request.GetVariable("message");
    if(Len(msg) > 0)
    {
        I = int(Q.Request.GetVariable("teamsay", "-1"));
        if((I < 0) || I >= webadmin.WorldInfo.Game.GameReplicationInfo.Teams.Length)
        {
            BroadcastMessage(Q.User.GetPC(), -1, msg, 'Say');            
        }
        else
        {
            BroadcastMessage(Q.User.GetPC(), I, msg, 'TeamSay');
        }
    }
    procChatData(Q, 0, "chat.log");
    Q.Response.Subst("chat.refresh", string(ChatRefresh));
    Q.Response.Subst("chat.max", string(Class'BasicWebAdminUser'.default.MaxHistory));
    msg = "";
    if(bEnableTeamChat && webadmin.WorldInfo.Game.bTeamGame && (KFGameInfo(webadmin.WorldInfo.Game) == none) || KFGameInfo(webadmin.WorldInfo.Game).Teams[1] != none)
    {
        Q.Response.Subst("team.teamid", string(-1));
        Q.Response.Subst("team.name", "Everybody");
        Q.Response.Subst("team.checked", "checked=\"checked\"");        
        msg $= webadmin.Include(Q, "current_chat_teamctrl.inc");
        I = 0;
        J0x4F9:

        if(I < webadmin.WorldInfo.Game.GameReplicationInfo.Teams.Length)
        {
            Q.Response.Subst("team.teamid", string(I));
            Q.Response.Subst("team.name", Class'WebAdminUtils'.static.HTMLEscape(Class'WebAdminUtils'.static.getTeamNameEx(webadmin.WorldInfo.Game.GameReplicationInfo.Teams[I])));
            Q.Response.Subst("team.checked", "");            
            msg $= webadmin.Include(Q, "current_chat_teamctrl.inc");
            ++ I;
            goto J0x4F9;
        }
    }
    Q.Response.Subst("teamsaycontrols", msg);
    webadmin.sendPage(Q, page);
}

function BroadcastMessage(Controller Sender, int teamidx, coerce string msg, name Type)
{
    local PlayerController P;
    local TeamInfo OldTeam;

    if(teamidx > -1)
    {
        OldTeam = webadmin.WorldInfo.Game.GameReplicationInfo.Teams[teamidx];
        foreach webadmin.WorldInfo.AllControllers(Class'PlayerController', P)
        {
            if(P.PlayerReplicationInfo.Team == OldTeam)
            {
                webadmin.WorldInfo.Game.BroadcastHandler.BroadcastText(Sender.PlayerReplicationInfo, P, msg, Type);
            }            
        }                
    }
    else
    {
        foreach webadmin.WorldInfo.AllControllers(Class'PlayerController', P)
        {
            webadmin.WorldInfo.Game.BroadcastHandler.BroadcastText(Sender.PlayerReplicationInfo, P, msg, Type);            
        }        
    }
}

function handleCurrentChatData(WebAdminQuery Q)
{
    local string msg;
    local int I;

    msg = Q.Request.GetVariable("message");
    if(Len(msg) > 0)
    {
        I = int(Q.Request.GetVariable("teamsay", "-1"));
        if((I < 0) || I >= webadmin.WorldInfo.Game.GameReplicationInfo.Teams.Length)
        {
            BroadcastMessage(Q.User.GetPC(), -1, msg, 'Say');            
        }
        else
        {
            BroadcastMessage(Q.User.GetPC(), I, msg, 'TeamSay');
        }
    }
    Q.Response.AddHeader("Content-Type: text/html");
    Q.Response.SendStandardHeaders();
    procChatData(Q, int(Q.Session.GetString("chatlog.lastid")));
}

function procChatData(WebAdminQuery Q, optional int startFrom, optional string substvar)
{
    local string Result, tmp;
    local array<MessageEntry> History;
    local MessageEntry Entry;
    local string Template;
    local bool isTeamGame;

    Q.User.messageHistory(History, startFrom);
    isTeamGame = webadmin.WorldInfo.Game.bTeamGame && (KFGameInfo(webadmin.WorldInfo.Game) == none) || KFGameInfo(webadmin.WorldInfo.Game).Teams[1] != none;
    foreach History(Entry,)
    {
        if(Entry.Type == 'Say')
        {
            Template = "current_chat_msg.inc";            
        }
        else
        {
            if(Entry.Type == 'TeamSay')
            {
                Template = "current_chat_teammsg.inc";                
            }
            else
            {
                Template = "current_chat_notice.inc";
            }
        }
        Q.Response.Subst("msg.type", Class'WebAdminUtils'.static.HTMLEscape(string(Entry.Type)));
        Q.Response.Subst("msg.username", Class'WebAdminUtils'.static.HTMLEscape(Entry.senderName));
        Q.Response.Subst("msg.text", Class'WebAdminUtils'.static.HTMLEscape(Entry.Message));
        Q.Response.Subst("msg.teamname", Class'WebAdminUtils'.static.HTMLEscape(Entry.TeamName));
        tmp = "";
        if(Entry.Sender.bAdmin)
        {            
            tmp @= "admin";
        }
        if(Entry.Sender.bOnlySpectator)
        {            
            tmp @= "spectator";
        }
        Q.Response.Subst("msg.user.class", Class'WebAdminUtils'.static.HTMLEscape(tmp));
        if(isTeamGame && Entry.TeamID > -1)
        {
            Q.Response.Subst("msg.teamcolor", Class'WebAdminUtils'.static.ColorToHTMLColor(Entry.TeamColor));            
        }
        else
        {
            Q.Response.Subst("msg.teamcolor", "transparent");
        }
        if(substvar == "")
        {
            Q.Response.SendText(webadmin.Include(Q, Template));            
        }
        else
        {            
            Result $= webadmin.Include(Q, Template);
        }
        startFrom = Entry.Counter;        
    }    
    if(substvar != "")
    {
        Q.Response.Subst(substvar, Result);
    }
    Q.Session.putString("chatlog.lastid", "" $ string(startFrom));
}

function handleConsole(WebAdminQuery Q)
{
    local string Cmd, Result;
    local int I;
    local bool denied;

    Cmd = Q.Request.GetVariable("command");
    if(Len(Cmd) > 0)
    {
        denied = false;
        I = 0;
        J0x6E:

        if(I < denyConsoleCommands.Length)
        {
            if((denyConsoleCommands[I] ~= Cmd) || InStr(Cmd $ " ", denyConsoleCommands[I] $ " ") == 0)
            {
                denied = true;
                goto J0xF7;
            }
            ++ I;
            goto J0x6E;
        }
        J0xF7:

        I = 0;
        J0x102:

        if(I < notAllowedBanConsoleCommands.Length)
        {
            if((notAllowedBanConsoleCommands[I] ~= Locs(Cmd)) || InStr(Locs(Cmd) $ " ", notAllowedBanConsoleCommands[I] $ " ") >= 0)
            {
                denied = true;
                goto J0x18F;
            }
            ++ I;
            goto J0x102;
        }
        J0x18F:

        if(!denied)
        {
            Result = "";
            if(bAdminConsoleCommandsHack && adminCmdHandler != none)
            {
                denied = adminCmdHandler.execute(Cmd, Result, Q.User.GetPC());
            }
            if(!denied)
            {
                Result = webadmin.WorldInfo.Game.ConsoleCommand(Cmd, false);
            }
            Q.Response.Subst("console.command", Class'WebAdminUtils'.static.HTMLEscape(Cmd));
            Q.Response.Subst("console.results", Repl(Class'WebAdminUtils'.static.HTMLEscape(Result), Chr(10), "<br />" $ Chr(10)));
            Q.Response.Subst("console.visible", cssVisible);            
        }
        else
        {
            Q.Response.Subst("console.command", Class'WebAdminUtils'.static.HTMLEscape(Cmd));
            Q.Response.Subst("console.results", Class'WebAdminUtils'.static.HTMLEscape(msgExecDisabled));
            Q.Response.Subst("console.visible", cssVisible);
        }        
    }
    else
    {
        Q.Response.Subst("console.command", "");
        Q.Response.Subst("console.results", "");
        Q.Response.Subst("console.visible", cssHidden);
    }
    webadmin.sendPage(Q, "console.html");
}

event ChangeGameTimer()
{
    if(Len(newUrl) > 0)
    {
        webadmin.WorldInfo.ServerTravel(newUrl, true);
    }
}

function string getServerOptions()
{
    local string ServerOptions;
    local int Idx;

    ServerOptions = webadmin.WorldInfo.GetLocalURL();
    Idx = InStr(ServerOptions, "?");
    if(Idx > 0)
    {
        ServerOptions = Mid(ServerOptions, Idx);
    }
    return ServerOptions;
}

function handleCurrentChange(WebAdminQuery Q)
{
    local DCEGameInfo GameType;
    local string ServerOptions, currentGameType, curmap, curmiscurl;
    local array<string> currentMutators, opts;
    local string substvar, substvar2;
    local int Idx, I, J;
    local Mutator mut;
    local array<KeyValuePair> Options;

    webadmin.DataStoreCache.loadGameTypes();
    currentGameType = Q.Request.GetVariable("gametype");
    curmap = Q.Request.GetVariable("map");
    ServerOptions = getServerOptions();
    curmiscurl = ServerOptions;
    opts = denyUrlOptions;
    opts.AddItem("mutator";
    opts.AddItem("game";
    opts.AddItem("team";
    opts.AddItem("name";
    opts.AddItem("class";
    opts.AddItem("character";
    opts.AddItem("listen";
    curmiscurl = Class'WebAdminUtils'.static.removeUrlOptions(curmiscurl, opts);
    curmiscurl = Q.Request.GetVariable("urlextra", curmiscurl);
    Idx = int(Q.Request.GetVariable("mutatorGroupCount", "0"));
    I = 0;
    J0x270:

    if(I < Idx)
    {
        substvar = Q.Request.GetVariable("mutgroup" $ string(I), "");
        if(Len(substvar) > 0)
        {
            if(currentMutators.Find(substvar == -1)
            {
                currentMutators.AddItem(substvar;
            }
        }
        ++ I;
        goto J0x270;
    }
    if((Q.Request.GetVariable("action") ~= "change") || Q.Request.GetVariable("action") ~= "change game")
    {
        Options.Length = 0;
        Class'WebAdminUtils'.static.parseUrlOptions(Options, curmiscurl);
        if(currentMutators.Length > 0)
        {
            JoinArray(currentMutators, substvar2, ",");
            Class'WebAdminUtils'.static.parseUrlOptions(Options, "mutator=" $ substvar2);
        }
        Class'WebAdminUtils'.static.parseUrlOptions(Options, "game=" $ currentGameType);
        I = InStr(curmap, "?");
        if(I != -1)
        {
            Class'WebAdminUtils'.static.parseUrlOptions(Options, Mid(curmap, I + 1));
            curmap = Left(curmap, I);
        }
        I = 0;
        J0x543:

        if(I < denyUrlOptions.Length)
        {
            J = Options.Length - 1;
            J0x572:

            if(J >= 0)
            {
                if(Options[J].Key ~= denyUrlOptions[I])
                {
                    Options.Remove(J, 1;
                }
                -- J;
                goto J0x572;
            }
            ++ I;
            goto J0x543;
        }
        substvar = curmap;
        I = 0;
        J0x60E:

        if(I < Options.Length)
        {            
            substvar $= ("?" $ Options[I].Key);
            if(Len(Options[I].Value) > 0)
            {                
                substvar $= ("=" $ Options[I].Value);
            }
            ++ I;
            goto J0x60E;
        }
        webadmin.addMessage(Q, msgChangingGame);
        Q.Response.Subst("newurl", Class'WebAdminUtils'.static.HTMLEscape(substvar));
        webadmin.sendPage(Q, "current_changing.html");
        I = 0;
        J0x7C1:

        if(I < denyUrlOptions.Length)
        {
            if(webadmin.WorldInfo.Game.HasOption(ServerOptions, denyUrlOptions[I]))
            {                
                substvar $= ("?" $ denyUrlOptions[I]);
                substvar2 = webadmin.WorldInfo.Game.ParseOption(ServerOptions, denyUrlOptions[I]);
                if(Len(substvar2) > 0)
                {                    
                    substvar $= ("=" $ substvar2);
                }
            }
            ++ I;
            goto J0x7C1;
        }
        newUrl = substvar;
        if(webadmin.WorldInfo.NetMode == NM_ListenServer)
        {            
            newUrl $= "?listen";
        }
        webadmin.WebServer.SetTimer(0.5, false, 'ChangeGameTimer', self);
        return;
    }
    if(currentGameType == "")
    {
        currentGameType = string(webadmin.WorldInfo.Game.Class);
        curmap = string(webadmin.WorldInfo.GetPackageName());
        ParseStringIntoArray(webadmin.WorldInfo.Game.ParseOption(ServerOptions, "mutator"), currentMutators, ",", true);
        mut = webadmin.WorldInfo.Game.BaseMutator;
        J0xB35:

        if(mut != none)
        {
            substvar = (string(mut.Class.GetPackageName()) $ ".") $ string(mut.Class);
            currentMutators.AddItem(substvar;
            mut = mut.NextMutator;
            goto J0xB35;
        }
    }
    Idx = webadmin.DataStoreCache.resolveGameType(currentGameType);
    if(Idx > -1)
    {
        currentGameType = webadmin.DataStoreCache.GameTypes[Idx].Data.ClassName;
        if(curmap == "")
        {
        }        
    }
    else
    {
        currentGameType = "";
    }
    substvar = "";
    foreach webadmin.DataStoreCache.GameTypes(GameType,)
    {
        Q.Response.Subst("gametype.gamemode", Class'WebAdminUtils'.static.HTMLEscape(GameType.Data.ClassName));
        Q.Response.Subst("gametype.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(GameType.FriendlyName));
        Q.Response.Subst("gametype.description", Class'WebAdminUtils'.static.HTMLEscape(GameType.Description));
        if(currentGameType ~= GameType.Data.ClassName)
        {
            Q.Response.Subst("gametype.selected", "selected=\"selected\"");            
        }
        else
        {
            Q.Response.Subst("gametype.selected", "");
        }        
        substvar $= webadmin.Include(Q, "current_change_gametype.inc");        
    }    
    Q.Response.Subst("gametypes", substvar);
    procCurrentChange(Q, currentGameType, curmap, currentMutators, substvar, substvar2, Idx);
    Q.Response.Subst("maps", substvar);
    Q.Response.Subst("mutators", substvar2);
    Q.Response.Subst("mutator.groups", string(Idx));
    Q.Response.Subst("urlextra", curmiscurl);
    JoinArray(denyUrlOptions, substvar, ", ", true);
    Q.Response.Subst("urlextra.deny", substvar);
    webadmin.sendPage(Q, "current_change.html");
}

function procCurrentChange(WebAdminQuery Q, string currentGameType, string curmap, array<string> currentMutators, out string outMaps, out string outMutators, out int outMutatorGroups)
{
    local string substvar2, substvar3, mutname;
    local int Idx, I, J, K;
    local array<DCEMapInfo> Maps;
    local array<MutatorGroup> Mutators;

    outMaps = "";
    if(currentGameType != "")
    {
        Maps = webadmin.DataStoreCache.getMaps(currentGameType);
        I = 0;
        J0x6F:

        if(I < Maps.Length)
        {
            Q.Response.Subst("map.mapname", Class'WebAdminUtils'.static.HTMLEscape(Maps[I].Data.MapName));
            Q.Response.Subst("map.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(Maps[I].FriendlyName));
            Q.Response.Subst("map.description", Class'WebAdminUtils'.static.HTMLEscape(Maps[I].Description));
            if(curmap ~= Maps[I].MapName)
            {
                Q.Response.Subst("map.selected", "selected=\"selected\"");                
            }
            else
            {
                Q.Response.Subst("map.selected", "");
            }            
            outMaps $= webadmin.Include(Q, "current_change_map.inc");
            ++ I;
            goto J0x6F;
        }
    }
    outMutators = "";
    outMutatorGroups = 0;
    if(currentGameType != "")
    {
        Mutators = webadmin.DataStoreCache.getMutators(currentGameType);
        Idx = 0;
        I = 0;
        J0x3F4:

        if(I < Mutators.Length)
        {
            if((Mutators[I].Mutators.Length == 1) || Len(Mutators[I].GroupName) == 0)
            {
                J = 0;
                J0x474:

                if(J < Mutators[I].Mutators.Length)
                {
                    Q.Response.Subst("mutator.formtype", "checkbox");
                    Q.Response.Subst("mutator.groupid", "mutgroup" $ string(Mutators.Length + outMutatorGroups));
                    Q.Response.Subst("mutator.classname", Class'WebAdminUtils'.static.HTMLEscape(Mutators[I].Mutators[J].ClassName));
                    Q.Response.Subst("mutator.id", "mutfield" $ string(++ Idx));
                    mutname = Mutators[I].Mutators[J].FriendlyName;
                    if(Len(mutname) == 0)
                    {
                        mutname = Mutators[I].Mutators[J].ClassName;
                    }
                    Q.Response.Subst("mutator.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(mutname));
                    Q.Response.Subst("mutator.description", Class'WebAdminUtils'.static.HTMLEscape(Mutators[I].Mutators[J].Description));
                    if(currentMutators.Find(Mutators[I].Mutators[J].ClassName != -1)
                    {
                        Q.Response.Subst("mutator.selected", "checked=\"checked\"");                        
                    }
                    else
                    {
                        Q.Response.Subst("mutator.selected", "");
                    }                    
                    substvar3 $= webadmin.Include(Q, "current_change_mutator.inc");
                    ++ outMutatorGroups;
                    ++ J;
                    goto J0x474;
                }                
            }
            else
            {
                substvar2 = "";
                K = -1;
                J = 0;
                J0x9C6:

                if(J < Mutators[I].Mutators.Length)
                {
                    Q.Response.Subst("mutator.formtype", "radio");
                    Q.Response.Subst("mutator.groupid", "mutgroup" $ string(I));
                    Q.Response.Subst("mutator.classname", Class'WebAdminUtils'.static.HTMLEscape(Mutators[I].Mutators[J].ClassName));
                    Q.Response.Subst("mutator.id", "mutfield" $ string(++ Idx));
                    mutname = Mutators[I].Mutators[J].FriendlyName;
                    if(Len(mutname) == 0)
                    {
                        mutname = Mutators[I].Mutators[J].ClassName;
                    }
                    Q.Response.Subst("mutator.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(mutname));
                    Q.Response.Subst("mutator.description", Class'WebAdminUtils'.static.HTMLEscape(Mutators[I].Mutators[J].Description));
                    if(currentMutators.Find(Mutators[I].Mutators[J].ClassName != -1)
                    {
                        K = J;
                        Q.Response.Subst("mutator.selected", "checked=\"checked\"");                        
                    }
                    else
                    {
                        Q.Response.Subst("mutator.selected", "");
                    }                    
                    substvar2 $= webadmin.Include(Q, "current_change_mutator.inc");
                    ++ J;
                    goto J0x9C6;
                }
                Q.Response.Subst("mutator.formtype", "radio");
                Q.Response.Subst("mutator.groupid", "mutgroup" $ string(I));
                Q.Response.Subst("mutator.classname", "");
                Q.Response.Subst("mutator.id", "mutfield" $ string(++ Idx));
                Q.Response.Subst("mutator.friendlyname", "none");
                Q.Response.Subst("mutator.description", "");
                if(K == -1)
                {
                    Q.Response.Subst("mutator.selected", "checked=\"checked\"");                    
                }
                else
                {
                    Q.Response.Subst("mutator.selected", "");
                }
                substvar2 = webadmin.Include(Q, "current_change_mutator.inc") $ substvar2;
                Q.Response.Subst("group.id", "mutgroup" $ string(I));
                Q.Response.Subst("group.name", Locs(Mutators[I].GroupName));
                Q.Response.Subst("group.mutators", substvar2);                
                outMutators $= webadmin.Include(Q, "current_change_mutator_group.inc");
            }
            ++ I;
            goto J0x3F4;
        }
        if(Len(substvar3) > 0)
        {
            Q.Response.Subst("group.id", "mutgroup0");
            Q.Response.Subst("group.name", "");
            Q.Response.Subst("group.mutators", substvar3);
            outMutators = webadmin.Include(Q, "current_change_mutator_nogroup.inc") $ outMutators;
        }
    }
    outMutatorGroups = outMutatorGroups + Mutators.Length;
    if(Mutators.Length == 0)
    {
        outMutators = ("<span class=\"noMutatorsMsg\">" $ msgNoMutators) $ "</span>";
    }
}

function handleCurrentChangeData(WebAdminQuery Q)
{
    local string currentGameType, curmap;
    local array<string> currentMutators;
    local string substMaps, substMutators, tmp;
    local int Idx;

    currentGameType = Q.Request.GetVariable("gametype");
    curmap = "";
    currentMutators.Length = 0;
    webadmin.DataStoreCache.loadGameTypes();
    Idx = webadmin.DataStoreCache.resolveGameType(currentGameType);
    if(Idx > -1)
    {
        currentGameType = webadmin.DataStoreCache.GameTypes[Idx].Data.ClassName;        
    }
    else
    {
        currentGameType = "";
    }
    Idx = 0;
    J0x178:

    if(Idx < int(Q.Request.GetVariable("mutatorGroupCount", "0")))
    {
        tmp = Q.Request.GetVariable("mutgroup" $ string(Idx), "");
        if(Len(tmp) > 0)
        {
            if(currentMutators.Find(tmp == -1)
            {
                currentMutators.AddItem(tmp;
            }
        }
        ++ Idx;
        goto J0x178;
    }
    procCurrentChange(Q, currentGameType, curmap, currentMutators, substMaps, substMutators, Idx);
    Q.Response.AddHeader("Content-Type: text/html");
    Q.Response.SendText("<select id=\"map\">");
    Q.Response.SendText(substMaps);
    Q.Response.SendText("</select>");
    Q.Response.SendText("<div id=\"mutators\">");
    Q.Response.SendText(substMutators);
    Q.Response.SendText("</div>");
    Q.Response.SendText(("<input type=\"hidden\" id=\"mutatorGroupCount\" value=\"" $ string(Idx)) $ "\" />");
}

defaultproperties
{
    cssHidden="display: none;"
    menuCurrent="Current Game"
    menuCurrentDesc="The current game status."
    menuPlayers="Players"
    menuPlayersDesc="Manage the players currently on the server."
    menuChat="Chat console"
    menuChatDesc="This console allows you to chat with the players on the server."
    menuChange="Change Map"
    menuChangeDesc="Change the current map or game type."
    menuConsole="Management Console"
    menuConsoleDesc="Execute console commands as if they are directly entered on the console of the server. You may not have access to the same commands as you would when logged in as admin when playing on the server."
    menuBots="Bots"
    menuBotsDesc="Add or remove bots from the current game."
    NotesSaved="Notes saved"
    msgPlayerNotFound="Unable to find the requested player."
    msgNoHumanPlayer="No human player associated with this player."
    msgVoiceMuted="Player %s's voice has been muted for everybody."
    msgVoiceUnmuted="Player %s's voice has been unmuted for everybody."
    msgTextMuted="Player %s has been muted for everybody."
    msgTextUnmuted="Player %s has been unmuted for everybody."
    msgCantBanAdmin="Unable to session ban the player %s. Logged in admins can not be removed."
    msgSessionBanned="Player %s was banned for this session."
    msgCantKickAdmin="Unable to kick the player %s. Logged in admins can not be kicked."
    msgPlayerRemoved="Player %s was removed from the server."
    msgTextMute="Text Mute"
    msgTextUnmute="Text Unmute"
    msgExecDisabled="Execution of this command has been disabled."
    msgChangingGame="Changing the game. This could take a little while..."
    msgAddingBots="Attempted to add %d bot(s). It might take a little while before they have all been spawned."
    msgRemovedBots="Removed bots: %s"
    msgNoMutators="There are no mutators available for this gametype."
    msgAddingBotsTeam="Attempted to add %d bot(s) to team %team. It might take a little while before they have all been spawned."
    msgYes="Yes"
    msgNo="No"
    msgScreenshot="Screenshot requested from player %s"
    rmRealistic="Realistic"
    rmStandard="Standard"
    rmCustom="Custom"
    msgOff="Off"
    pbLow="Low"
    pbMedium="Medium"
    pbHigh="High"
    msgUnknown="Unknown"
    msgOn="On"
    msgSessionBanNoROAC="Session ban functionality is not available with the current access control instance.\""
    msgNotAllowed="You are not allowed to execute this action.\""
    menuServerInfo="Server Info"
    menuServerInfoDesc="The current game status."
    playerActions(0)="mutevoice"
    playerActions(1)="unmutevoice"
    notAllowedBanConsoleCommands(0)="kick"
    notAllowedBanConsoleCommands(1)="kickban"
}