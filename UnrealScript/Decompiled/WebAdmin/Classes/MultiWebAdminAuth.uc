/*******************************************************************************
 * MultiWebAdminAuth generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MultiWebAdminAuth extends Object
    implements(IWebAdminAuth);

struct UserRecord
{
    var string Name;
    var MultiAdminData Data;

    structdefaultproperties
    {
        Name=""
        Data=none
    }
};

var WorldInfo WorldInfo;
var array<MultiWebAdminUser> Users;
var array<UserRecord> records;
var const localized string InvalidCreds;
var const localized string NoAdmins;
var const localized string msgUnsupportedHash;
var HashLib HashLib;

function Init(WorldInfo WI)
{
    WorldInfo = WI;
    HashLib = new Class'Sha1HashLib';
    loadRecords();
    loadQueryHandler();
}

function loadRecords()
{
    local array<string> Names;
    local int I, J, Idx;
    local string tmp;

    GetPerObjectConfigSections(Class'MultiAdminData', Names);
    I = 0;
    J0x29:

    if(I < Names.Length)
    {
        Idx = InStr(Names[I], " ");
        if(Idx == -1)
        {            
        }
        else
        {
            tmp = Left(Names[I], Idx);
            J = 0;
            J0xAF:

            if(J < records.Length)
            {
                if(Caps(records[J].Name) > Caps(tmp))
                {
                    records.Insert(J, 1;
                    records[J].Name = tmp;
                    goto J0x155;
                }
                ++ J;
                goto J0xAF;
            }
            J0x155:

            if(J == records.Length)
            {
                records.Length = J + 1;
                records[J].Name = tmp;
            }
        }
        ++ I;
        goto J0x29;
    }
    if(records.Length == 0)
    {
        records.Length = 1;
        records[0].Name = "Admin";
        records[0].Data = new (none, records[0].Name) Class'MultiAdminData';
        records[0].Data.bEnabled = true;
        tmp = WorldInfo.Game.ConsoleCommand("get engine.accesscontrol adminpassword", false);
        if(Len(tmp) == 0)
        {
            tmp = "Admin";
        }
        tmp = getPasswordHash(records[0].Data, tmp);
        records[0].Data.setPassword(tmp);
        records[0].Data.SaveConfig();
        LogInternal("Created initial webadmin administrator account: " $ records[0].Name, 'webadmin');
    }
}

function loadQueryHandler()
{
    local QHMultiAdmin qh;
    local webadmin webadmin;
    local WebServer ws;
    local int I;

    if(webadmin(Outer) != none)
    {
        webadmin = webadmin(Outer);        
    }
    else
    {
        foreach WorldInfo.AllActors(Class'WebServer', ws)
        {
            break;            
        }        
        if(ws == none)
        {
            return;
        }
        I = 0;
        J0x86:

        if(I < 10)
        {
            if(webadmin(ws.ApplicationObjects[I]) != none)
            {
                webadmin = webadmin(ws.ApplicationObjects[I]);
                goto J0x119;
            }
            ++ I;
            goto J0x86;
        }
    }
    J0x119:

    if(webadmin == none)
    {
        return;
    }
    qh = new Class'QHMultiAdmin';
    qh.authModule = self;
    qh.Init(webadmin);
    qh.registerMenuItems(webadmin.menu);
}

function MultiAdminData getRecord(string UserName)
{
    local int Idx;

    Idx = records.Find('Name', UserName;
    if(Idx == -1)
    {
        return none;
    }
    if(records[Idx].Name != UserName)
    {
        return none;
    }
    if(records[Idx].Data == none)
    {
        records[Idx].Data = new (none, records[Idx].Name) Class'MultiAdminData';
    }
    return records[Idx].Data;
}

function bool removeAdminRecord(string UserName)
{
    return false;
}

function Cleanup()
{
    local MultiWebAdminUser User;

    foreach Users(User,)
    {
        User.Logout();        
    }    
    Users.Remove(0, Users.Length;
    records.Length = 0;
    WorldInfo = none;
}

function IWebAdminUser authenticate(string UserName, string Password, string hashAlg, out string errorMsg)
{
    local MultiWebAdminUser User;
    local MultiAdminData adminData;

    adminData = getRecord(UserName);
    if(adminData == none)
    {
        errorMsg = InvalidCreds;
        if(records.Length == 0)
        {            
            errorMsg @= NoAdmins;
        }
        return none;
    }
    if(HashLib != none)
    {
        if(hashAlg == "")
        {
            Password = HashLib.getHash(Password $ UserName);
            hashAlg = HashLib.getAlgName();
        }
    }
    if(!supportHashAlgorithm(hashAlg))
    {
        errorMsg = msgUnsupportedHash;
        return none;
    }
    if(adminData.matchesPassword(Password))
    {
        User = WorldInfo.Spawn(Class'MultiWebAdminUser');
        User.adminData = adminData;
        User.Init();
        User.setUsername(adminData.GetDisplayName());
        Users.AddItem(User;
        return (User);
    }
    errorMsg = InvalidCreds;
    return none;
}

function bool Logout(IWebAdminUser User)
{
    User.Logout();
    Users.RemoveItem(MultiWebAdminUser(bool(User));
    return true;
}

function bool validate(string UserName, string Password, string hashAlg, out string errorMsg)
{
    local MultiAdminData adminData;

    adminData = getRecord(UserName);
    if(adminData == none)
    {
        errorMsg = InvalidCreds;
        return false;
    }
    if(HashLib != none)
    {
        if(hashAlg == "")
        {
            Password = HashLib.getHash(Password $ UserName);
            hashAlg = HashLib.getAlgName();
        }
    }
    if(!supportHashAlgorithm(hashAlg))
    {
        errorMsg = msgUnsupportedHash;
        return false;
    }
    if(adminData.matchesPassword(Password))
    {
        return true;
    }
    errorMsg = InvalidCreds;
    return false;
}

function bool validateUser(IWebAdminUser User, out string errorMsg)
{
    return true;
}

function bool supportHashAlgorithm(string hashAlg)
{
    return HashLib.getAlgName() ~= hashAlg;
}

function string getPasswordHash(MultiAdminData adminData, coerce string newpw)
{
    if(HashLib == none)
    {
        return newpw;
    }
    return HashLib.getHash(newpw $ string(adminData.Name));
}

defaultproperties
{
    InvalidCreds="Invalid credentials."
    NoAdmins="No administrators have been created. Please update the configuration."
    msgUnsupportedHash="Unsupported hash algorithm."
}