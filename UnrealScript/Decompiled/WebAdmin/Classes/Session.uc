/*******************************************************************************
 * Session generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Session extends Object
    implements(ISession);

struct ObjectKV
{
    var string Key;
    var Object Value;

    structdefaultproperties
    {
        Key=""
        Value=none
    }
};

struct StringKV
{
    var string Key;
    var string Value;

    structdefaultproperties
    {
        Key=""
        Value=""
    }
};

var protected string Id;
var protected array<ObjectKV> objects;
var protected array<StringKV> Strings;

function string getId()
{
    local int I;

    if(Id == "")
    {
        I = 0;
        J0x1B:

        if(I < 8)
        {            
            Id $= Right(ToHex(Rand(65535)), 4);
            ++ I;
            goto J0x1B;
        }
    }
    return Id;
}

function Reset()
{
    objects.Remove(0, objects.Length;
    Strings.Remove(0, Strings.Length;
}

function Object GetObject(string Key)
{
    local int Idx;

    Idx = objects.Find('Key', Key;
    if(Idx > -1)
    {
        return objects[Idx].Value;
    }
    return none;
}

function putObject(string Key, Object Value)
{
    local int Idx;

    Idx = objects.Find('Key', Key;
    if(Idx > -1)
    {
        objects[Idx].Value = Value;
        return;
    }
    objects.Add(1;
    objects[objects.Length - 1].Key = Key;
    objects[objects.Length - 1].Value = Value;
}

function removeObject(string Key)
{
    local int Idx;

    Idx = objects.Find('Key', Key;
    if(Idx > -1)
    {
        objects.Remove(Idx, 1;
        return;
    }
}

function string GetString(string Key, optional string defValue)
{
    local int Idx;

    defValue = "";
    Idx = Strings.Find('Key', Key;
    if(Idx > -1)
    {
        return Strings[Idx].Value;
    }
    return defValue;
}

function putString(string Key, string Value)
{
    local int Idx;

    Idx = Strings.Find('Key', Key;
    if(Idx > -1)
    {
        Strings[Idx].Value = Value;
        return;
    }
    Strings.Add(1;
    Strings[Strings.Length - 1].Key = Key;
    Strings[Strings.Length - 1].Value = Value;
}

function removeString(string Key)
{
    local int Idx;

    Idx = Strings.Find('Key', Key;
    if(Idx > -1)
    {
        Strings.Remove(Idx, 1;
        return;
    }
}
