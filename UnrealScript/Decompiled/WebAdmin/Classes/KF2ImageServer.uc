/*******************************************************************************
 * KF2ImageServer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KF2ImageServer extends ImageServer
    config(webadmin);

var config bool bNoGzip;

function string normalizeUri(string URI)
{
    local array<string> Str;
    local int I;

    ParseStringIntoArray(Repl(URI, "\\", "/"), Str, "/", true);
    I = Str.Length - 1;
    J0x40:

    if(I >= 0)
    {
        if(Str[I] == "..")
        {
            I -= 1;
            if(I < 0)
            {
                Str.Remove(0, 1;                
            }
            else
            {
                Str.Remove(I, 2;
            }
        }
        -- I;
        goto J0x40;
    }
    JoinArray(Str, URI, "/");
    return "/" $ URI;
}

function Query(WebRequest Request, WebResponse Response)
{
    local string ext;
    local int Idx;

    if(InStr(Request.URI, "..") != -1)
    {
        Request.URI = normalizeUri(Request.URI);
    }
    Idx = InStr(Request.URI, ".", true);
    if(Idx != -1)
    {
        ext = Mid(Request.URI, Idx + 1);
        if(!bNoGzip && Request.GetVariableCount("gzip") > 0)
        {
            if(InStr(("," $ Request.GetHeader("accept-encoding")) $ ",", ",gzip,") != -1)
            {
                if(Response.FileExists((Path $ Request.URI) $ ".gz"))
                {
                    Response.AddHeader("Content-Encoding: gzip");
                    Request.URI = Request.URI $ ".gz";                    
                }
                else
                {
                    WarnInternal((("Tried to serve non existing gzip file: " $ Path) $ Request.URI) $ ".gz");
                }
            }
        }
    }
    if(ext ~= "js")
    {
        Response.SendStandardHeaders("text/javascript", true);
        Response.IncludeBinaryFile(Path $ Request.URI);
        return;        
    }
    else
    {
        if(ext ~= "css")
        {
            Response.SendStandardHeaders("text/css", true);
            Response.IncludeBinaryFile(Path $ Request.URI);
            return;            
        }
        else
        {
            if(ext ~= "ico")
            {
                Response.SendStandardHeaders("image/x-icon", true);
                Response.IncludeBinaryFile(Path $ Request.URI);
                return;                
            }
            else
            {
                if(ext ~= "gz")
                {
                    Response.SendStandardHeaders("application/x-gzip", true);
                    Response.IncludeBinaryFile(Path $ Request.URI);
                    return;
                }
            }
        }
    }
    super.Query(Request, Response);
}
