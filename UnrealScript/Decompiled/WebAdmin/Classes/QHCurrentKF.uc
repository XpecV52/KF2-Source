/*******************************************************************************
 * QHCurrentKF generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QHCurrentKF extends QHCurrent
    config(webadmin);

var WorkshopTool Tool;
var KFWorkshopSteamworks workshop;
var bool bValidSetup;
var string WorkshopURL;
var const localized string menuWorkshopTool;
var const localized string menuWorkshopToolDesc;

function Init(webadmin webapp)
{
    local int I;
    local OnlineSubsystem OnlineSub;

    super.Init(webapp);
    webadmin = webapp;
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub == none)
    {
        ThrowError("No Online subsystem found (make sure you use this on server)!");
        return;
    }
    Tool = webadmin.WorldInfo.Spawn(Class'WorkshopTool');
    if(Tool == none)
    {
        ThrowError("No TWWorkshopSteamworks found!");
        return;
    }
    Tool.InitWeb();
    workshop = Tool.workshop;
    if(workshop == none)
    {
        ThrowError("No TWWorkshopSteamworks found!");
        return;
    }
    I = 0;
    J0x1BE:

    if(I < Class'TcpNetDriver'.default.DownloadManagers.Length)
    {
        if(Class'TcpNetDriver'.default.DownloadManagers[I] ~= "OnlineSubsystemSteamworks.SteamWorkshopDownload")
        {
            bValidSetup = true;
            goto J0x266;
        }
        ++ I;
        goto J0x1BE;
    }
    J0x266:

}

final function ThrowError(string Er)
{
    LogInternal("WorkshopTool ERROR: " $ Er);
}

function Cleanup()
{
    super.Cleanup();
    Tool = none;
}

function registerMenuItems(WebAdminMenu menu)
{
    super.registerMenuItems(menu);
    menu.addMenu("/current+gamesummary", "", (self));
    menu.addMenu("/current/chat+frame", "", (self));
    menu.addMenu("/current/chat+frame+data", "", (self));
    menu.SetVisibility("/current/chat", false);
    menu.addMenu(WorkshopURL, menuWorkshopTool, (self), menuWorkshopToolDesc);
}

function bool handleQuery(WebAdminQuery Q)
{
    switch(Q.Request.URI)
    {
        case "/current+gamesummary":
            handleAjaxGamesummary(Q);
            return true;
        case "/current/chat+frame":
            Q.Response.Subst("page.css.class", "chatframe");
            handleCurrentChat(Q, "current_chat_frame.html");
            return true;
        case "/current/chat+frame+data":
            handleCurrentChatData(Q);
            return true;
        case "/current/workshoptool":
            handleWorkshop(Q);
            return true;
        default:
            return super.handleQuery(Q);
            break;
    }
}

function decoratePage(WebAdminQuery Q)
{
    if(EqualEqual_InterfaceInterface(Q.User, (none)))
    {
        Q.Response.Subst("gamesummary", "");
        Q.Response.Subst("chatwindow", "");
        return;
    }
    decorateGameSummary(Q);
    decorateChatWindow(Q);
}

function substGameInfo(WebAdminQuery Q)
{
    local KFGameInfo KFGameInfo;
    local string Str;
    local int I;

    super.substGameInfo(Q);
    I = int(webadmin.WorldInfo.Game.GameDifficulty);
    if(float(I) == webadmin.WorldInfo.Game.GameDifficulty)
    {
        Str = Localize("KFCommon_LocalizedStrings", ("DifficultyStrings[" $ string(I)) $ "]", "KFGame");        
    }
    else
    {
        Str = "";
    }
    if(Len(Str) == 0)
    {
        Str = string(webadmin.WorldInfo.Game.GameDifficulty);
    }
    Q.Response.Subst("rules.difficulty.text", Str);
    KFGameInfo = KFGameInfo(webadmin.WorldInfo.Game);
    if(KFGameInfo != none)
    {
        Q.Response.Subst("rules.minnetplayers", string(KFGameInfo.MinNetPlayers));
        Q.Response.Subst("rules.mapvote", Class'WebAdminUtils'.static.HTMLEscape(((KFGameInfo.bDisableMapVote) ? default.msgOff : default.msgOn)));
        Q.Response.Subst("rules.kickvote", Class'WebAdminUtils'.static.HTMLEscape(((KFGameInfo.bDisableKickVote) ? default.msgOff : default.msgOn)));
    }
    if(KFGameInfo_Survival(webadmin.WorldInfo.Game) != none)
    {
        substGameInfoSurvival(Q);
    }
}

function substGameInfoSurvival(WebAdminQuery Q)
{
    local KFGameInfo_Survival GameInfo;
    local KFGameReplicationInfo GRI;
    local int deadMonsters;

    GameInfo = KFGameInfo_Survival(webadmin.WorldInfo.Game);
    GRI = GameInfo.MyKFGRI;
    Q.Response.Subst("wave.num", string(GameInfo.WaveNum));
    Q.Response.Subst("wave.max", string(GameInfo.WaveMax - 1));
    deadMonsters = GameInfo.NumAISpawnsQueued - GameInfo.GetMonsterAliveCount();
    Q.Response.Subst("wave.monsters.pending", string(GRI.WaveTotalAICount - deadMonsters));
    Q.Response.Subst("wave.monsters.dead", string(deadMonsters));
    Q.Response.Subst("wave.monsters.total", string(GRI.WaveTotalAICount));
}

function substPri(WebAdminQuery Q, PlayerReplicationInfo PRI)
{
    local KFPlayerReplicationInfo ropri;

    super.substPri(Q, PRI);
    ropri = KFPlayerReplicationInfo(PRI);
    if(ropri != none)
    {
        Q.Response.Subst("player.perk.class", Class'WebAdminUtils'.static.HTMLEscape(string(ropri.CurrentPerkClass)));
        if(ropri.CurrentPerkClass != none)
        {
            Q.Response.Subst("player.perk.name", Class'WebAdminUtils'.static.HTMLEscape(ropri.CurrentPerkClass.default.PerkName));            
        }
        else
        {
            Q.Response.Subst("player.perk.name", "");
        }
        Q.Response.Subst("player.perk.level", string(ropri.GetActivePerkLevel()));
    }
}

function bool comparePRI(PlayerReplicationInfo PRI1, PlayerReplicationInfo PRI2, string Key)
{
    local KFPlayerReplicationInfo kpri1, kpri2;

    kpri1 = KFPlayerReplicationInfo(PRI1);
    kpri2 = KFPlayerReplicationInfo(PRI2);
    if((kpri1 != none) && kpri2 != none)
    {
        if(Key ~= "perk")
        {
            return Caps(kpri1.CurrentPerkClass.default.PerkName) > Caps(kpri2.CurrentPerkClass.default.PerkName);            
        }
        else
        {
            if(Key != "perklevel")
            {
                return kpri1.GetActivePerkLevel() > kpri2.GetActivePerkLevel();
            }
        }
    }
    return super.comparePRI(PRI1, PRI2, Key);
}

function handleAjaxGamesummary(WebAdminQuery Q)
{
    Q.Response.AddHeader("Content-Type: text/xml");
    Q.Response.SendText("<response>");
    Q.Response.SendText("<gamesummary><![CDATA[");
    Q.Response.SendText(renderGameSummary(Q));
    Q.Response.SendText("]]></gamesummary>");
    Q.Response.SendText("</response>");
}

function decorateGameSummary(WebAdminQuery Q)
{
    Q.Response.Subst("gamesummary.details", renderGameSummary(Q));
    Q.Response.Subst("gamesummary", webadmin.Include(Q, "gamesummary_base.inc"));
}

function string renderGameSummary(WebAdminQuery Q)
{
    substGameInfo(Q);
    return webadmin.Include(Q, getGameTypeIncFile(Q, "gamesummary"));
}

function decorateChatWindow(WebAdminQuery Q)
{
    if(InStr(Q.Request.URI, "/current/chat") == 0)
    {
        Q.Response.Subst("chatwindow", "");
        return;
    }
    Q.Response.Subst("chatwindow", webadmin.Include(Q, "current_chat_frame.inc"));
}

function handleCurrentWorkshopAction(WebAdminQuery Q)
{
    local string Action, Idx;
    local int I;

    Action = Q.Request.GetVariable("action");
    Idx = Q.Request.GetVariable("idx");
    if(Idx == "123456789")
    {
        return;
    }
    if(Action != "")
    {
        if(Action ~= "delete")
        {
            I = 0;
            J0xD3:

            if(I < Tool.CurrentItems.Length)
            {
                if((Idx != "") && Idx == string(I))
                {
                    Tool.DeleteWorkshopItem(Q.User.getUsername(), I);
                    goto J0x197;
                }
                ++ I;
                goto J0xD3;
            }
            J0x197:
            
        }
        else
        {
            if(Action ~= "add")
            {
                Tool.AddNewWorkshopItem(Q.User.getUsername(), Idx);                
            }
            else
            {
                if(Action ~= "download")
                {
                    workshop.UpdateWorkshopFiles();                    
                }
                else
                {
                    if(Action ~= "reload")
                    {
                        LogInternal("Net Driver settings reconfigured, restarting map...");
                        Class'TcpNetDriver'.default.DownloadManagers.Insert(0, 1;
                        Class'TcpNetDriver'.default.DownloadManagers[0] = "OnlineSubsystemSteamworks.SteamWorkshopDownload";
                        Class'TcpNetDriver'.static.StaticSaveConfig();
                        Tool.WorldInfo.Game.bUseSeamlessTravel = false;
                        Tool.WorldInfo.ServerTravel("?restart");
                        Tool.WorldInfo.NextSwitchCountdown = 0;
                        bValidSetup = true;
                        return;
                    }
                }
            }
        }
    }
}

function handleWorkshop(WebAdminQuery Q)
{
    local int I;
    local string workshopinstructions, workshopitemrowstring;
    local bool bHaveContent;

    handleCurrentWorkshopAction(Q);
    bHaveContent = false;
    Q.Response.Subst("isvalidsetup", string(true));
    if(!bValidSetup)
    {
        Q.Response.Subst("isvalidsetup", string(false));
    }
    Q.Response.Subst("hasadditionalmessages", string(false));
    if(workshop.CurrentDownloads.Length > 0)
    {
        Tool.CheckDownload();
        Q.Response.Subst("row1", ((((("<font color=\"red\">Server is currently downloading</font><br />Items to download: " $ string(workshop.CurrentDownloads.Length)) $ "<br />Current item: ") $ Tool.LastDLID) $ " (") $ Tool.LastDLFile) $ ")");
        Q.Response.Subst("hasadditionalmessages", string(true));        
        workshopinstructions $= webadmin.Include(Q, "current_workshoptool_instructions.inc");
        Q.Response.Subst("workshopinstructions", workshopinstructions);
    }
    if(Tool.CurrentItems.Length > 0)
    {
        bHaveContent = true;
    }
    I = 0;
    J0x398:

    if(I < Tool.CurrentItems.Length)
    {
        Q.Response.Subst("workshoptool.steamid", Tool.CurrentItems[I].Id);
        Q.Response.Subst("workshoptool.steamname", Tool.CurrentItems[I].N);
        Q.Response.Subst("index", string(I));
        Q.Response.Subst("index", string(I));        
        workshopitemrowstring $= webadmin.Include(Q, "current_workshoptool_row.inc");
        ++ I;
        goto J0x398;
    }
    if(!bHaveContent)
    {
        workshopitemrowstring = webadmin.Include(Q, "current_workshoptool_empty.inc");
    }
    Q.Response.Subst("workshop", workshopitemrowstring);
    webadmin.sendPage(Q, "workshoptool.html");
}

defaultproperties
{
    WorkshopURL="/current/WorkshopTool"
    ChatRefresh=5000
    bConsoleEnabled=true
    bAdminConsoleCommandsHack=true
    bEnableTeamChat=true
    separateSpectators=true
    denyUrlOptions(0)="GamePassword"
    denyUrlOptions(1)="AdminPassword"
    denyUrlOptions(2)="Port"
    denyUrlOptions(3)="QueryPort"
    denyConsoleCommands(0)="say"
    denyConsoleCommands(1)="obj"
    denyConsoleCommands(2)="debug"
    denyConsoleCommands(3)="flush"
    denyConsoleCommands(4)="set"
    denyConsoleCommands(5)="get engine.accesscontrol"
    AdminCommandHandlerClass="WebAdmin.AdminCommandHandler"
}