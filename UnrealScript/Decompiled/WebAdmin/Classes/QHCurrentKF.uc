/*******************************************************************************
 * QHCurrentKF generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QHCurrentKF extends QHCurrent
    config(webadmin);

function registerMenuItems(WebAdminMenu menu)
{
    super.registerMenuItems(menu);
    menu.addMenu("/current+gamesummary", "", (self));
    menu.addMenu("/current/chat+frame", "", (self));
    menu.addMenu("/current/chat+frame+data", "", (self));
    menu.SetVisibility("/current/chat", false);
}

function bool handleQuery(WebAdminQuery Q)
{
    switch(Q.Request.URI)
    {
        case "/current+gamesummary":
            handleAjaxGamesummary(Q);
            return true;
        case "/current/chat+frame":
            Q.Response.Subst("page.css.class", "chatframe");
            handleCurrentChat(Q, "current_chat_frame.html");
            return true;
        case "/current/chat+frame+data":
            handleCurrentChatData(Q);
            return true;
        default:
            return super.handleQuery(Q);
            break;
    }
}

function decoratePage(WebAdminQuery Q)
{
    if(EqualEqual_InterfaceInterface(Q.User, (none)))
    {
        Q.Response.Subst("gamesummary", "");
        Q.Response.Subst("chatwindow", "");
        return;
    }
    decorateGameSummary(Q);
    decorateChatWindow(Q);
}

function substGameInfo(WebAdminQuery Q)
{
    local KFGameInfo KFGameInfo;
    local string Str;
    local int I;

    super.substGameInfo(Q);
    I = int(webadmin.WorldInfo.Game.GameDifficulty);
    if(float(I) == webadmin.WorldInfo.Game.GameDifficulty)
    {
        Str = Localize("KFCommon_LocalizedStrings", ("DifficultyStrings[" $ string(I)) $ "]", "KFGame");        
    }
    else
    {
        Str = "";
    }
    if(Len(Str) == 0)
    {
        Str = string(webadmin.WorldInfo.Game.GameDifficulty);
    }
    Q.Response.Subst("rules.difficulty.text", Str);
    KFGameInfo = KFGameInfo(webadmin.WorldInfo.Game);
    if(KFGameInfo != none)
    {
        Q.Response.Subst("rules.minnetplayers", string(KFGameInfo.MinNetPlayers));
        Q.Response.Subst("rules.mapvote", Class'WebAdminUtils'.static.HTMLEscape(((KFGameInfo.bDisableMapVote) ? default.msgOff : default.msgOn)));
        Q.Response.Subst("rules.kickvote", Class'WebAdminUtils'.static.HTMLEscape(((KFGameInfo.bDisableKickVote) ? default.msgOff : default.msgOn)));
    }
    if(KFGameInfo_Survival(webadmin.WorldInfo.Game) != none)
    {
        substGameInfoSurvival(Q);
    }
}

function substGameInfoSurvival(WebAdminQuery Q)
{
    local KFGameInfo_Survival GameInfo;
    local KFGameReplicationInfo GRI;
    local int deadMonsters;

    GameInfo = KFGameInfo_Survival(webadmin.WorldInfo.Game);
    GRI = GameInfo.MyKFGRI;
    Q.Response.Subst("wave.num", string(GameInfo.WaveNum));
    Q.Response.Subst("wave.max", string(GameInfo.WaveMax));
    deadMonsters = GameInfo.NumAISpawnsQueued - GameInfo.GetMonsterAliveCount();
    Q.Response.Subst("wave.monsters.pending", string(GRI.WaveTotalAICount - deadMonsters));
    Q.Response.Subst("wave.monsters.dead", string(deadMonsters));
    Q.Response.Subst("wave.monsters.total", string(GRI.WaveTotalAICount));
}

function substPri(WebAdminQuery Q, PlayerReplicationInfo PRI)
{
    local KFPlayerReplicationInfo ropri;

    super.substPri(Q, PRI);
    ropri = KFPlayerReplicationInfo(PRI);
    if(ropri != none)
    {
        Q.Response.Subst("player.perk.class", Class'WebAdminUtils'.static.HTMLEscape(string(ropri.CurrentPerkClass)));
        if(ropri.CurrentPerkClass != none)
        {
            Q.Response.Subst("player.perk.name", Class'WebAdminUtils'.static.HTMLEscape(ropri.CurrentPerkClass.default.PerkName));            
        }
        else
        {
            Q.Response.Subst("player.perk.name", "");
        }
        Q.Response.Subst("player.perk.level", string(ropri.GetActivePerkLevel()));
    }
}

function bool comparePRI(PlayerReplicationInfo PRI1, PlayerReplicationInfo PRI2, string Key)
{
    local KFPlayerReplicationInfo kpri1, kpri2;

    kpri1 = KFPlayerReplicationInfo(PRI1);
    kpri2 = KFPlayerReplicationInfo(PRI2);
    if((kpri1 != none) && kpri2 != none)
    {
        if(Key ~= "perk")
        {
            return Caps(kpri1.CurrentPerkClass.default.PerkName) > Caps(kpri2.CurrentPerkClass.default.PerkName);            
        }
        else
        {
            if(Key != "perklevel")
            {
                return kpri1.GetActivePerkLevel() > kpri2.GetActivePerkLevel();
            }
        }
    }
    return super.comparePRI(PRI1, PRI2, Key);
}

function handleAjaxGamesummary(WebAdminQuery Q)
{
    Q.Response.AddHeader("Content-Type: text/xml");
    Q.Response.SendText("<response>");
    Q.Response.SendText("<gamesummary><![CDATA[");
    Q.Response.SendText(renderGameSummary(Q));
    Q.Response.SendText("]]></gamesummary>");
    Q.Response.SendText("</response>");
}

function decorateGameSummary(WebAdminQuery Q)
{
    Q.Response.Subst("gamesummary.details", renderGameSummary(Q));
    Q.Response.Subst("gamesummary", webadmin.Include(Q, "gamesummary_base.inc"));
}

function string renderGameSummary(WebAdminQuery Q)
{
    substGameInfo(Q);
    return webadmin.Include(Q, getGameTypeIncFile(Q, "gamesummary"));
}

function decorateChatWindow(WebAdminQuery Q)
{
    if(InStr(Q.Request.URI, "/current/chat") == 0)
    {
        Q.Response.Subst("chatwindow", "");
        return;
    }
    Q.Response.Subst("chatwindow", webadmin.Include(Q, "current_chat_frame.inc"));
}

defaultproperties
{
    ChatRefresh=5000
    bConsoleEnabled=true
    bAdminConsoleCommandsHack=true
    bEnableTeamChat=true
    separateSpectators=true
    denyUrlOptions(0)="GamePassword"
    denyUrlOptions(1)="AdminPassword"
    denyUrlOptions(2)="Port"
    denyUrlOptions(3)="QueryPort"
    denyConsoleCommands(0)="say"
    denyConsoleCommands(1)="obj"
    denyConsoleCommands(2)="debug"
    denyConsoleCommands(3)="flush"
    denyConsoleCommands(4)="set"
    denyConsoleCommands(5)="get engine.accesscontrol"
    AdminCommandHandlerClass="WebAdmin.AdminCommandHandler"
}