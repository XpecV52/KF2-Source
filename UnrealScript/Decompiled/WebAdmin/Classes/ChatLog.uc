/*******************************************************************************
 * ChatLog generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ChatLog extends MessagingSpectator
    config(webadmin)
    hidecategories(Navigation);

var config string Filename;
var config bool bUnique;
var config bool bIncludeTimeStamp;
var FileWriter Writer;
var string Tab;

function ReceiveMessage(PlayerReplicationInfo Sender, string msg, name Type)
{
    local string UniqueId;
    local int TeamIndex;

    if(Writer == none)
    {
        CreateFileWriter();
    }
    if(Sender == none)
    {
        Writer.Logf((((((((((TimeStamp() $ Tab) $ "") $ Tab) $ "") $ Tab) $ string(Type)) $ Tab) $ string(-1)) $ Tab) $ msg);
        return;
    }
    UniqueId = Class'OnlineSubsystem'.static.UniqueNetIdToString(Sender.UniqueId);
    if(Sender.Team == none)
    {
        TeamIndex = -1;        
    }
    else
    {
        TeamIndex = Sender.Team.TeamIndex;
    }
    Writer.Logf((((((((((TimeStamp() $ Tab) $ Class'WebAdminUtils'.static.translitText(Sender.PlayerName)) $ Tab) $ UniqueId) $ Tab) $ string(Type)) $ Tab) $ string(TeamIndex)) $ Tab) $ Class'WebAdminUtils'.static.translitText(msg));
}

reliable client simulated event ReceiveLocalizedMessage(class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject)
{
    if(ClassIsChildOf(Message, Class'GameMessage'))
    {
        ReceiveMessage(RelatedPRI_1, Message.static.GetString(Switch, false, RelatedPRI_1, RelatedPRI_2, OptionalObject), name("GameMessage_" $ string(Switch)));
    }
}

reliable client simulated event TeamMessage(PlayerReplicationInfo PRI, coerce string S, name Type, optional float MsgLifeTime)
{
    ReceiveMessage(PRI, S, Type);
}

function CreateFileWriter()
{
    Writer = Spawn(Class'FileWriter');
    Writer.OpenFile(createFilename(), 0,, bUnique, bIncludeTimeStamp);
    Writer.Logf("--- OPEN " $ TimeStamp());
}

function string createFilename()
{
    local string Result, tmp;
    local InternetLink il;
    local IpAddr Addr;
    local int ServerIP, ServerPort;

    if(NotEqual_InterfaceInterface(WorldInfo.Game.OnlineSub.AuthInterface, (none)))
    {
        WorldInfo.Game.OnlineSub.AuthInterface.GetServerAddr(ServerIP, ServerPort);        
    }
    else
    {
        ServerPort = 0;
        ServerIP = 0;
    }
    Result = Filename;
    Result = Repl(Result, "%p", string(ServerPort));
    Result = Repl(Result, "%c", WorldInfo.ComputerName);
    Result = Repl(Result, "%v", WorldInfo.EngineVersion);
    if(InStr(Result, "%i") > -1)
    {
        il = Spawn(Class'InternetLink');
        il.GetLocalIP(Addr);
        tmp = il.IpAddrToString(Addr);
        if(InStr(tmp, ":") > -1)
        {
            tmp = Left(tmp, InStr(tmp, ":"));
        }
        Result = Repl(Result, "%i", tmp);
        il.Destroy();
    }
    return Result;
}

simulated function PostBeginPlay()
{
    local TeamChatProxy tcp;

    super.PostBeginPlay();
    LogInternal("Chat logging enabled", 'webadmin');
    if(Len(Filename) == 0)
    {
        Filename = "Chatlog_%i_%p";
    }
    Tab = Chr(9);
    foreach WorldInfo.AllControllers(Class'TeamChatProxy', tcp)
    {
        tcp.AddReceiver(ReceiveMessage);        
    }    
}

event Destroyed()
{
    local TeamChatProxy tcp;

    foreach WorldInfo.AllControllers(Class'TeamChatProxy', tcp)
    {
        tcp.ClearReceiver(ReceiveMessage);        
    }    
    if(Writer != none)
    {
        Writer.Logf("--- CLOSE " $ TimeStamp());
        Writer.CloseFile();
    }
    super(PlayerController).Destroyed();
}

function InitPlayerReplicationInfo()
{
    super.InitPlayerReplicationInfo();
    PlayerReplicationInfo.PlayerName = "<<ChatLogger>>";
}

defaultproperties
{
    bIncludeTimeStamp=true
    bKeepAlive=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__ChatLog.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__ChatLog.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__ChatLog.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}