/*******************************************************************************
 * MessagingSpectator generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MessagingSpectator extends Admin
    config(Game)
    hidecategories(Navigation);

var protected bool bSeamlessDelete;
var bool bKeepAlive;
var array< delegate<ReceiveMessage> > receivers;
var delegate<ReceiveMessage> __ReceiveMessage__Delegate;

delegate ReceiveMessage(PlayerReplicationInfo Sender, string msg, name Type);

function AddReceiver(delegate<ReceiveMessage> ReceiveMessageDelegate)
{
    if(receivers.Find(ReceiveMessageDelegate == -1)
    {
        receivers[receivers.Length] = ReceiveMessageDelegate;
    }
}

function ClearReceiver(delegate<ReceiveMessage> ReceiveMessageDelegate)
{
    local int RemoveIndex;

    RemoveIndex = receivers.Find(ReceiveMessageDelegate;
    if(RemoveIndex != -1)
    {
        receivers.Remove(RemoveIndex, 1;
    }
    if((receivers.Length == 0) && __ReceiveMessage__Delegate == none)
    {
        Destroy();
    }
}

function bool isSeamlessDelete()
{
    return bSeamlessDelete;
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    bSeamlessDelete = true;
    if(PlayerReplicationInfo == none)
    {
        InitPlayerReplicationInfo();
    }
}

reliable client simulated event TeamMessage(PlayerReplicationInfo PRI, coerce string S, name Type, optional float MsgLifeTime)
{
    local delegate<ReceiveMessage> rm;

    if(Type == 'TeamSay')
    {
        return;
    }
    if(((Type != 'Say') && Type != 'TeamSay') && Type != 'None')
    {
        LogInternal((("Received message that is not 'say' or 'teamsay'. Type=" $ string(Type)) $ " Message= ") $ S);
    }
    foreach receivers(rm,)
    {
        ReceiveMessage(PRI, S, Type);        
    }    
    if(__ReceiveMessage__Delegate != none)
    {
        ReceiveMessage(PRI, S, Type);
    }
}

function InitPlayerReplicationInfo()
{
    super(Controller).InitPlayerReplicationInfo();
    PlayerReplicationInfo.bIsInactive = true;
    PlayerReplicationInfo.PlayerName = "<<WebAdmin>>";
    PlayerReplicationInfo.bIsSpectator = true;
    PlayerReplicationInfo.bOnlySpectator = true;
    PlayerReplicationInfo.bOutOfLives = true;
    PlayerReplicationInfo.bWaitingPlayer = false;
}

function EnterStartState()
{
    GotoState('NotPlaying');
}

function bool IsSpectating()
{
    return true;
}

reliable client simulated function ClientGameEnded(Actor EndGameFocus, bool bIsWinner);

function GameHasEnded(optional Actor EndGameFocus, optional bool bIsWinner);

function Reset();

reliable client simulated function ClientReset();

event InitInputSystem()
{
    if(PlayerInput == none)
    {
        assert(InputClass != none);
        PlayerInput = new (self) InputClass;
    }
    if(Interactions.Find(PlayerInput == -1)
    {
        Interactions[Interactions.Length] = PlayerInput;
    }
}

event PlayerTick(float DeltaTime)
{
    if((WorldInfo.NextURL != "") || WorldInfo.IsInSeamlessTravel())
    {
        Destroy();
    }
}

function bool CanRestartPlayer()
{
    return false;
}

auto state NotPlaying
{    stop;    
}

defaultproperties
{
    CameraClass=none
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__MessagingSpectator.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    bIsPlayer=false
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__MessagingSpectator.CollisionCylinder'
    Components(0)=CollisionCylinder
    bAlwaysTick=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__MessagingSpectator.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}