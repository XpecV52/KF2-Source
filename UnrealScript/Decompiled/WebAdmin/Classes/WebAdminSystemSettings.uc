/*******************************************************************************
 * WebAdminSystemSettings generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WebAdminSystemSettings extends WebAdminSettings
    implements(IQueryHandler);

var webadmin webadmin;
var QHCurrent QHCurrent;
var ChatLog ChatLog;
var SettingsRenderer SettingsRenderer;
var const localized string menuSystem;
var const localized string menuSystemDesc;
var const localized string msgSettingsSaved;

function Init(webadmin webapp)
{
    webadmin = webapp;
}

function DelayedInit()
{
    local IQueryHandler qh;
    local Object O;

    foreach webadmin.handlers(qh,)
    {
        if(qh.IsA('QHCurrent'))
        {
            O = bool(qh);
            QHCurrent = QHCurrent(O);
        }        
    }    
    foreach webadmin.WorldInfo.AllActors(Class'ChatLog', ChatLog)
    {
        break;        
    }    
}

function Cleanup()
{
    SettingsRenderer = none;
    QHCurrent = none;
    ChatLog = none;
    webadmin = none;
}

function registerMenuItems(WebAdminMenu menu)
{
    menu.addMenu("/webadmin", menuSystem, (self), menuSystemDesc, 999);
    menu.addMenu("/system/allowancecache", "", (self), "Rebuild the mutator allowance cache.");
}

function bool handleQuery(WebAdminQuery Q)
{
    switch(Q.Request.URI)
    {
        case "/webadmin":
            handleSettings(Q);
            return true;
        case "/system/allowancecache":
            handleRebuildAllowanceCache(Q);
            return true;
        default:
            return false;
            break;
    }
}

function bool unhandledQuery(WebAdminQuery Q);

function decoratePage(WebAdminQuery Q);

function bool producesXhtml()
{
    return true;
}

function handleRebuildAllowanceCache(WebAdminQuery Q)
{
    local array<DCEGameInfo> gts;
    local int I;

    if(Q.Request.GetVariable("action") ~= "rebuild")
    {
        webadmin.DataStoreCache.allowanceCache.Length = 0;
        gts = webadmin.DataStoreCache.GetGameTypes();
        I = 0;
        J0xC9:

        if(I < gts.Length)
        {            
            webadmin.DataStoreCache.getMutators(gts[I].Data.ClassName);
            ++ I;
            goto J0xC9;
        }
        webadmin.addMessage(Q, "Mutator allowance cache has been rebuild.");
    }
    webadmin.addMessage(Q, (((("<form action=\"" $ webadmin.Path) $ Q.Request.URI) $ "\" method=\"post\">") $ "<p>Only rebuild the mutator cache when the server is empty. It is strongly adviced to restart the game after rebuilding has been completed.</p>") $ "<p><button type=\"submit\" name=\"action\" value=\"rebuild\">Rebuild cache</button></p></form>", 1);
    Q.Response.Subst("page.title", "Rebuild Mutator Allowance Cache");
    webadmin.sendPage(Q, "message.html");
}

function handleSettings(WebAdminQuery Q)
{
    local ISettingsPrivileges privs;

    if(SettingsRenderer == none)
    {
        DelayedInit();
        loadSettings();
        SettingsRenderer = new Class'SettingsRenderer';
        SettingsRenderer.Init(webadmin.Path);
    }
    if(Q.Request.GetVariable("action") ~= "save")
    {
        Class'QHDefaults'.static.applySettings(self, Q.Request);
        saveSettings();
        webadmin.addMessage(Q, msgSettingsSaved);
    }
    privs = Q.User.getSettingsPrivileges();
    if(NotEqual_InterfaceInterface(privs, (none)))
    {
        privs.setBasePrivilegeUri(webadmin.getAuthURL(Q.Request.URI));
    }
    SettingsRenderer.Render(self, Q.Response,, privs);
    Q.Response.Subst("liveAdjustStyle", "style=\"display: none;\"");
    webadmin.sendPage(Q, "default_settings_general.html");
}

protected function loadSettings()
{
    SetStringPropertyByName('AuthenticationClass', webadmin.AuthenticationClass);
    SetStringPropertyByName('SessionHandlerClass', webadmin.SessionHandlerClass);
    SetIntPropertyByName('bHttpAuth', int(webadmin.bHttpAuth));
    SetStringPropertyByName('startpage', webadmin.startpage);
    SetIntPropertyByName('bChatLog', int(webadmin.bChatLog));
    SetIntPropertyByName('bUseStrictContentType', int(webadmin.bUseStrictContentType));
    SetIntPropertyByName('sessionOctetValidation', webadmin.sessionOctetValidation);
    SetIntPropertyByName('MaxAuthFails', webadmin.MaxAuthFails);
    if(QHCurrent != none)
    {
        SetIntPropertyByName('ChatRefresh', QHCurrent.ChatRefresh);
        SetIntPropertyByName('bConsoleEnabled', int(QHCurrent.bConsoleEnabled));
        SetStringArrayPropertyByName('denyUrlOptions', QHCurrent.denyUrlOptions, Chr(10));
        SetStringArrayPropertyByName('denyConsoleCommands', QHCurrent.denyConsoleCommands, Chr(10));
        SetIntPropertyByName('bAdminConsoleCommandsHack', int(QHCurrent.bAdminConsoleCommandsHack));
        SetStringPropertyByName('AdminCommandHandlerClass', QHCurrent.AdminCommandHandlerClass);
        SetIntPropertyByName('bEnableTeamChat', int(QHCurrent.bEnableTeamChat));
        SetIntPropertyByName('hideNews', int(QHCurrent.hideNews));        
    }
    else
    {
        SetIntPropertyByName('ChatRefresh', Class'QHCurrent'.default.ChatRefresh);
        SetIntPropertyByName('bConsoleEnabled', int(Class'QHCurrent'.default.bConsoleEnabled));
        SetStringArrayPropertyByName('denyUrlOptions', Class'QHCurrent'.default.denyUrlOptions, Chr(10));
        SetStringArrayPropertyByName('denyConsoleCommands', Class'QHCurrent'.default.denyConsoleCommands, Chr(10));
        SetIntPropertyByName('bAdminConsoleCommandsHack', int(Class'QHCurrent'.default.bAdminConsoleCommandsHack));
        SetStringPropertyByName('AdminCommandHandlerClass', Class'QHCurrent'.default.AdminCommandHandlerClass);
        SetIntPropertyByName('bEnableTeamChat', int(Class'QHCurrent'.default.bEnableTeamChat));
        SetIntPropertyByName('hideNews', int(Class'QHCurrent'.default.hideNews));
    }
    if(ChatLog != none)
    {
        SetStringPropertyByName('chatLogFilename', ChatLog.Filename);
        SetIntPropertyByName('chatLogUnique', int(ChatLog.bUnique));
        SetIntPropertyByName('chatLogIncludeTimeStamp', int(ChatLog.bIncludeTimeStamp));        
    }
    else
    {
        SetStringPropertyByName('chatLogFilename', Class'ChatLog'.default.Filename);
        SetIntPropertyByName('chatLogUnique', int(Class'ChatLog'.default.bUnique));
        SetIntPropertyByName('chatLogIncludeTimeStamp', int(Class'ChatLog'.default.bIncludeTimeStamp));
    }
}

function saveSettings()
{
    local int intVal;

    GetStringPropertyByName('AuthenticationClass', webadmin.AuthenticationClass);
    GetStringPropertyByName('SessionHandlerClass', webadmin.SessionHandlerClass);
    if(GetIntPropertyByName('bHttpAuth', intVal))
    {
        webadmin.bHttpAuth = intVal != 0;
    }
    GetStringPropertyByName('startpage', webadmin.startpage);
    if(GetIntPropertyByName('bChatLog', intVal))
    {
        webadmin.bChatLog = intVal != 0;
    }
    if(GetIntPropertyByName('bUseStrictContentType', intVal))
    {
        webadmin.bUseStrictContentType = intVal != 0;
    }
    GetIntPropertyByName('sessionOctetValidation', webadmin.sessionOctetValidation);
    GetIntPropertyByName('MaxAuthFails', webadmin.MaxAuthFails);
    webadmin.SaveConfig();
    if(QHCurrent != none)
    {
        GetIntPropertyByName('ChatRefresh', QHCurrent.ChatRefresh);
        if(GetIntPropertyByName('bConsoleEnabled', intVal))
        {
            QHCurrent.bConsoleEnabled = intVal != 0;
        }
        GetStringArrayPropertyByName('denyUrlOptions', QHCurrent.denyUrlOptions, Chr(10));
        GetStringArrayPropertyByName('denyConsoleCommands', QHCurrent.denyConsoleCommands, Chr(10));
        if(GetIntPropertyByName('bAdminConsoleCommandsHack', intVal))
        {
            QHCurrent.bAdminConsoleCommandsHack = intVal != 0;
        }
        GetStringPropertyByName('AdminCommandHandlerClass', QHCurrent.AdminCommandHandlerClass);
        if(GetIntPropertyByName('bEnableTeamChat', intVal))
        {
            QHCurrent.bEnableTeamChat = intVal != 0;
        }
        if(GetIntPropertyByName('hideNews', intVal))
        {
            QHCurrent.hideNews = intVal != 0;
        }
        QHCurrent.SaveConfig();        
    }
    else
    {
        GetIntPropertyByName('ChatRefresh', Class'QHCurrent'.default.ChatRefresh);
        if(GetIntPropertyByName('bConsoleEnabled', intVal))
        {
            Class'QHCurrent'.default.bConsoleEnabled = intVal != 0;
        }
        GetStringArrayPropertyByName('denyUrlOptions', Class'QHCurrent'.default.denyUrlOptions, Chr(10));
        GetStringArrayPropertyByName('denyConsoleCommands', Class'QHCurrent'.default.denyConsoleCommands, Chr(10));
        if(GetIntPropertyByName('bAdminConsoleCommandsHack', intVal))
        {
            Class'QHCurrent'.default.bAdminConsoleCommandsHack = intVal != 0;
        }
        GetStringPropertyByName('AdminCommandHandlerClass', Class'QHCurrent'.default.AdminCommandHandlerClass);
        if(GetIntPropertyByName('bEnableTeamChat', intVal))
        {
            Class'QHCurrent'.default.bEnableTeamChat = intVal != 0;
        }
        if(GetIntPropertyByName('hideNews', intVal))
        {
            Class'QHCurrent'.default.hideNews = intVal != 0;
        }
        Class'QHCurrent'.static.StaticSaveConfig();
    }
    if(ChatLog != none)
    {
        GetStringPropertyByName('chatLogFilename', ChatLog.Filename);
        if(GetIntPropertyByName('chatLogUnique', intVal))
        {
            ChatLog.bUnique = intVal != 0;
        }
        if(GetIntPropertyByName('chatLogIncludeTimeStamp', intVal))
        {
            ChatLog.bIncludeTimeStamp = intVal != 0;
        }
        ChatLog.SaveConfig();        
    }
    else
    {
        GetStringPropertyByName('chatLogFilename', Class'ChatLog'.default.Filename);
        if(GetIntPropertyByName('chatLogUnique', intVal))
        {
            Class'ChatLog'.default.bUnique = intVal != 0;
        }
        if(GetIntPropertyByName('chatLogIncludeTimeStamp', intVal))
        {
            Class'ChatLog'.default.bIncludeTimeStamp = intVal != 0;
        }
        Class'ChatLog'.static.StaticSaveConfig();
    }
}

defaultproperties
{
    menuSystem="WebAdmin Settings"
    menuSystemDesc="Change the web administration configuration."
    msgSettingsSaved="Settings saved."
    SettingsGroups(0)=(GroupID="General",DisplayName="General",pMin=0,pMax=20,lMin=0,lMax=0)
    SettingsGroups(1)=(GroupID="ChatLogging",DisplayName="Chat Logging",pMin=20,pMax=30,lMin=0,lMax=0)
    SettingsGroups(2)=(GroupID="Authentication",DisplayName="Authentication",pMin=30,pMax=40,lMin=0,lMax=0)
    SettingsGroups(3)=(GroupID="Advanced",DisplayName="Advanced",pMin=100,pMax=120,lMin=0,lMax=0)
    Properties=/* Array type was not detected. */
    PropertyMappings=/* Array type was not detected. */
}