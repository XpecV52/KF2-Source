/*******************************************************************************
 * MultiAdminData generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MultiAdminData extends Object
    config(MultiAdmin)
    perobjectconfig;

enum EAccessOrder
{
    DenyAllow,
    AllowDeny,
    EAccessOrder_MAX
};

var config string DisplayName;
var private config string Password;
var config MultiAdminData.EAccessOrder Order;
var config array<config string> Allow;
var config array<config string> Deny;
var config bool bEnabled;
var array<string> cacheDenied;
var array<string> cacheAllowed;

function string GetDisplayName()
{
    if(Len(DisplayName) == 0)
    {
        return string(Name);
    }
    return DisplayName;
}

function setPassword(string pw)
{
    if(Len(pw) > 0)
    {
        Password = pw;
    }
}

function bool matchesPassword(string pw)
{
    if(!bEnabled)
    {
        return false;
    }
    if(Len(Password) == 40)
    {
        return Caps(Password) == Caps(pw);
    }
    return (Password == pw) && Len(pw) > 0;
}

function bool canAccess(string Loc)
{
    local bool Retval;

    if(!bEnabled)
    {
        return false;
    }
    if(cacheAllowed.Find(Loc != -1)
    {
        return true;
    }
    if(cacheDenied.Find(Loc != -1)
    {
        return false;
    }
    Retval = internalCanAccess(Loc);
    if(Retval)
    {
        cacheAllowed.AddItem(Loc;        
    }
    else
    {
        cacheDenied.AddItem(Loc;
    }
    return Retval;
}

protected function bool internalCanAccess(string Loc)
{
    if(Order == 0)
    {
        if(matchDenied(Loc))
        {
            if(!matchAllowed(Loc))
            {
                return false;
            }
        }
        return true;        
    }
    else
    {
        if(Order == 1)
        {
            if(matchAllowed(Loc))
            {
                return true;
            }
            if(matchDenied(Loc))
            {
                return false;
            }
            return false;
        }
    }
    return true;
}

function bool matchAllowed(string Loc)
{
    local string M;

    foreach Allow(M,)
    {
        if(Class'WebAdminUtils'.static.maskedCompare(Loc, M, true))
        {            
            return true;
        }        
    }    
    return false;
}

function bool matchDenied(string Loc)
{
    local string M;

    foreach Deny(M,)
    {
        if(Class'WebAdminUtils'.static.maskedCompare(Loc, M, true))
        {            
            return true;
        }        
    }    
    return false;
}

function clearAuthCache()
{
    cacheDenied.Length = 0;
    cacheAllowed.Length = 0;
}
