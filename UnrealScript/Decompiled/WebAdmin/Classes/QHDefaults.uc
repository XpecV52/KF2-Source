/*******************************************************************************
 * QHDefaults generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QHDefaults extends Object
    config(webadmin)
    implements(IQueryHandler);

struct ClassSettingsMapping
{
    var string ClassName;
    var string settingsClass;

    structdefaultproperties
    {
        ClassName=""
        settingsClass=""
    }
};

struct HasSettingsClass
{
    var string ClassName;
    var bool hasSettings;

    structdefaultproperties
    {
        ClassName=""
        hasSettings=false
    }
};

struct ClassSettingsCacheEntry
{
    var string cls;
    var class<WebAdminSettings> settingsCls;

    structdefaultproperties
    {
        cls=""
        settingsCls=none
    }
};

struct SettingsInstance
{
    var class<WebAdminSettings> cls;
    var WebAdminSettings Instance;

    structdefaultproperties
    {
        cls=none
        Instance=none
    }
};

var config array<config ClassSettingsMapping> SettingsClasses;
var config array<config HasSettingsClass> HasSettingsCache;
var array<ClassSettingsCacheEntry> classSettingsCache;
var array<SettingsInstance> settingsInstances;
var config string GeneralSettingsClass;
var config string WelcomeSettingsClass;
var webadmin webadmin;
var SettingsRenderer SettingsRenderer;
var SettingsMagic SettingsMagic;
var const localized string menuPolicy;
var const localized string menuPolicyDesc;
var const localized string menuBannedId;
var const localized string menuBannedIdDesc;
var const localized string menuBannedHash;
var const localized string menuBannedHashDesc;
var const localized string menuSession;
var const localized string menuSessionDesc;
var const localized string menuSettings;
var const localized string menuGeneral;
var const localized string menuGeneralDesc;
var const localized string menuPassword;
var const localized string menuPasswordDesc;
var const localized string menuGametypes;
var const localized string menuGametypesDesc;
var const localized string menuMutators;
var const localized string menuMutatorsDesc;
var const localized string menuMapCycles;
var const localized string menuMapCyclesDesc;
var const localized string menuMLAddition;
var const localized string menuMLAdditionDesc;
var const localized string msgSettingsCacheDesc;
var const localized string msgRemovedPolicy;
var const localized string msgNoValidIpMask;
var const localized string msgInvalidPolicy;
var const localized string msgAddedPolicy;
var const localized string msdUpdatedPolicy;
var const localized string msgNoValidId;
var const localized string msgAddedBanId;
var const localized string msgNoValidHash;
var const localized string msgBannedHash;
var const localized string msgRemovedSessionBan;
var const localized string msgSettingsSaved;
var const localized string msgCantSaveSettings;
var const localized string msgCantLoadSettings;
var const localized string msgGamePWError;
var const localized string msgGamePWSaved;
var const localized string msgAdminPWError;
var const localized string msgAdminPWSaved;
var const localized string msgAdminPWEmpty;
var const localized string msgMapCycleSaved;
var const localized string msgCantLoadGT;
var const localized string msgImportedMapList;
var const localized string msgInvalidMaplist;
var const localized string Untitled;
var const localized string msgCantFindMapCycle;
var const localized string msgCycleDeleted;
var const localized string msgCycleSaved;
var const localized string msgCycleActivated;
var const localized string menuServerActors;
var const localized string menuServerActorsDesc;
var const localized string msgServerActorsSaved;
var const localized string msgServerActorsSavedWarn;
var const localized string menuWelcome;
var const localized string menuWelcomeDesc;
var const localized string menuIpMask;
var const localized string menuIpMaskDesc;
var const localized string msgSessionBansNoROAC;
var const localized string msgMapCycleActivated;
var const localized string msgMapCycleDeleted;
var const localized string msgNewMapCycle;
var const localized string MapList;
var const localized string activeTag;
var const localized string msgBansImported;
var const localized string msgBansImporting;
var const localized string msgSessionBansNoBans;

function Init(webadmin webapp)
{
    if(Len(GeneralSettingsClass) == 0)
    {
        GeneralSettingsClass = string(Class.GetPackageName()) $ ".GeneralSettings";
        SaveConfig();
    }
    if(Len(WelcomeSettingsClass) == 0)
    {
        WelcomeSettingsClass = string(Class.GetPackageName()) $ ".WelcomeSettings";
        SaveConfig();
    }
    webadmin = webapp;
}

function Cleanup()
{
    local int I;

    if(SettingsMagic != none)
    {
        SettingsMagic.Cleanup();
    }
    SettingsMagic = none;
    webadmin = none;
    if(SettingsRenderer != none)
    {
        SettingsRenderer.Modifiers.Length = 0;
        SettingsRenderer.Cleanup();
    }
    SettingsRenderer = none;
    I = 0;
    J0xA9:

    if(I < settingsInstances.Length)
    {
        if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(settingsInstances[I].Instance), (none)))
        {
            IAdvWebAdminSettings(settingsInstances[I].Instance).cleanupSettings();            
        }
        else
        {
            if(settingsInstances[I].Instance != none)
            {
                settingsInstances[I].Instance.cleanupSettings();
            }
        }
        ++ I;
        goto J0xA9;
    }
    settingsInstances.Length = 0;
}

function bool producesXhtml()
{
    return true;
}

function bool handleQuery(WebAdminQuery Q)
{
    switch(Q.Request.URI)
    {
        case "/policy":
            Q.Response.Redirect(webadmin.Path $ "/policy/passwords");
            return true;
        case "/policy/ip":
            handleIPPolicy(Q);
            return true;
        case "/policy/bans":
            handleBans(Q);
            return true;
        case "/policy/bans+export":
            handleBansExport(Q);
            return true;
        case "/policy/bans+import":
            handleBansImport(Q);
            return true;
        case "/policy/session":
            handleSessionBans(Q);
            return true;
        case "/settings":
            Q.Response.Redirect(webadmin.Path $ "/settings/general");
            return true;
        case "/settings/general":
            handleSettingsGeneral(Q);
            return true;
        case "/policy/passwords":
            handleSettingsPasswords(Q);
            return true;
        case "/settings/welcome":
            handleSettingsWelcome(Q);
            return true;
        case "/settings/gametypes":
            handleSettingsGametypes(Q);
            return true;
        case "/settings/mutators":
            handleSettingsMutators(Q);
            return true;
        case "/settings/maplist":
            handleMapList(Q);
            return true;
        case "/system/settingscache":
            handleRebuildSettingsCache(Q);
            return true;
        case "/settings/serveractors":
            handleServerActors(Q);
            return true;
        default:
            return false;
            break;
    }
}

function bool unhandledQuery(WebAdminQuery Q);

function decoratePage(WebAdminQuery Q);

function registerMenuItems(WebAdminMenu menu)
{
    menu.addMenu("/policy", menuPolicy, (self), menuPolicyDesc, -70);
    menu.addMenu("/policy/passwords", menuPassword, (self), menuPasswordDesc, -100);
    menu.addMenu("/policy/bans", menuBannedId, (self), menuBannedIdDesc, -80);
    menu.addMenu("/policy/bans+export", "", (self));
    menu.addMenu("/policy/bans+import", "", (self));
    menu.addMenu("/policy/session", menuSession, (self), menuSessionDesc, -90);
    menu.addMenu("/policy/ip", menuIpMask, (self), menuIpMaskDesc, -50);
    menu.addMenu("/settings", menuSettings, (self), "", -50);
    menu.addMenu("/settings/general", menuGeneral, (self), menuGeneralDesc, -10);
    menu.addMenu("/settings/welcome", menuWelcome, (self), menuWelcomeDesc);
    menu.addMenu("/settings/gametypes", menuGametypes, (self), menuGametypesDesc);
    menu.addMenu("/settings/maplist", menuMapCycles, (self), menuMapCyclesDesc);
    menu.addMenu("/settings/serveractors", menuServerActors, (self), menuServerActorsDesc);
    menu.addMenu("/system/settingscache", "", (self), msgSettingsCacheDesc);
}

function handleIPPolicy(WebAdminQuery Q)
{
    local string policies, Policy, Action;
    local array<string> parts;
    local int I, Idx;

    Action = Q.Request.GetVariable("action");
    if(Action != "")
    {
        Idx = -1;
        if(Action ~= "modify")
        {
            if(Q.Request.GetVariable("delete") != "")
            {
                Idx = int(Q.Request.GetVariable("delete"));
                Action = "delete";                
            }
            else
            {
                if(Q.Request.GetVariable("update") != "")
                {
                    Idx = int(Q.Request.GetVariable("update"));
                    Action = "update";
                }
            }
        }
        if(Action ~= "delete")
        {
            if((Idx > -1) && Idx < webadmin.WorldInfo.Game.AccessControl.IPPolicies.Length)
            {
                Policy = webadmin.WorldInfo.Game.AccessControl.IPPolicies[Idx];
                webadmin.WorldInfo.Game.AccessControl.IPPolicies.Remove(Idx, 1;
                webadmin.WorldInfo.Game.AccessControl.SaveConfig();
                webadmin.addMessage(Q, msgRemovedPolicy @ Policy);
            }            
        }
        else
        {
            Policy = Q.Request.GetVariable("ipmask");            
            Policy -= " ";
            ParseStringIntoArray(Policy, parts, ".", false);
            I = 0;
            J0x443:

            if(I < parts.Length)
            {
                if(parts[I] == "*")
                {                    
                }
                else
                {
                    if(((parts[I] != string(int(parts[I]))) || int(parts[I]) > 255) || int(parts[I]) < 0)
                    {
                        webadmin.addMessage(Q, Repl(msgNoValidIpMask, "%s", ("<code>" $ Policy) $ "</code>"), 2);
                        goto J0x54C;
                    }
                }
                ++ I;
                goto J0x443;
            }
            J0x54C:

            if((parts.Length > 4) || parts.Length < 1)
            {
                webadmin.addMessage(Q, Repl(msgNoValidIpMask, "%s", ("<code>" $ Policy) $ "</code>"), 2);
                I = -1;
            }
            if(I == parts.Length)
            {
                if(Q.Request.GetVariable("policy") == "")
                {
                    webadmin.addMessage(Q, msgInvalidPolicy, 2);                    
                }
                else
                {
                    Policy = (Q.Request.GetVariable("policy") $ ",") $ Policy;
                    if(Idx == -1)
                    {
                        webadmin.WorldInfo.Game.AccessControl.IPPolicies.AddItem(Policy;
                        webadmin.addMessage(Q, msgAddedPolicy @ Policy);                        
                    }
                    else
                    {
                        if((Idx < -1) || Idx > webadmin.WorldInfo.Game.AccessControl.IPPolicies.Length)
                        {
                            Idx = webadmin.WorldInfo.Game.AccessControl.IPPolicies.Length;
                        }
                        webadmin.WorldInfo.Game.AccessControl.IPPolicies[Idx] = Policy;
                        webadmin.addMessage(Q, msdUpdatedPolicy @ Policy);
                    }
                    webadmin.WorldInfo.Game.AccessControl.SaveConfig();
                }
            }
        }
    }
    I = 0;
    J0x971:

    if(I < webadmin.WorldInfo.Game.AccessControl.IPPolicies.Length)
    {
        Q.Response.Subst("policy.id", "" $ string(I));
        Policy = webadmin.WorldInfo.Game.AccessControl.IPPolicies[I];
        Idx = InStr(Policy, ",");
        if(Idx == -1)
        {
            Idx = InStr(Policy, ";");
        }
        Q.Response.Subst("policy.ipmask", Class'WebAdminUtils'.static.HTMLEscape(Mid(Policy, Idx + 1)));
        Q.Response.Subst("policy.policy", Class'WebAdminUtils'.static.HTMLEscape(Left(Policy, Idx)));
        Q.Response.Subst("policy.selected." $ Caps(Left(Policy, Idx)), "selected=\"selected\"");        
        policies $= webadmin.Include(Q, "policy_row.inc");
        Q.Response.Subst("policy.selected." $ Caps(Left(Policy, Idx)), "");
        ++ I;
        goto J0x971;
    }
    Q.Response.Subst("policies", policies);
    webadmin.sendPage(Q, "policy.html");
}

function handleBans(WebAdminQuery Q)
{
    local string bans, Action;
    local int I;
    local UniqueNetId unid;
    local OnlineSubsystem steamWorks;

    steamWorks = Class'GameEngine'.static.GetOnlineSubsystem();
    Action = Q.Request.GetVariable("action");
    if(Action ~= "delete")
    {
        Action = Q.Request.GetVariable("banid");
        I = InStr(Action, "plainid:");
        if(I == -1)
        {            
        }
        else
        {
            I = int(Mid(Action, 8));
            if((I >= 0) && I < webadmin.WorldInfo.Game.AccessControl.BannedIDs.Length)
            {
                webadmin.WorldInfo.Game.AccessControl.BannedIDs.Remove(I, 1;
                webadmin.WorldInfo.Game.AccessControl.SaveConfig();
            }
        }        
    }
    else
    {
        if(Action ~= "add")
        {
            Action = Q.Request.GetVariable("uniqueid");            
            Action -= " ";
            if(Action != "")
            {
                Class'OnlineSubsystem'.static.StringToUniqueNetId(Action, unid);                
            }
            else
            {
                if(steamWorks != none)
                {
                    Action = Q.Request.GetVariable("steamint64");                    
                    Action -= " ";
                    steamWorks.Int64ToUniqueNetId(Action, unid);
                }
            }
            if(Class'WebAdminUtils'.static.UniqueNetIdToString(unid) == "")
            {
                webadmin.addMessage(Q, Repl(msgNoValidId, "%s", ("<code>" $ Action) $ "</code>"), 2);                
            }
            else
            {
                I = 0;
                J0x446:

                if(I < webadmin.WorldInfo.Game.AccessControl.BannedIDs.Length)
                {
                    if(webadmin.WorldInfo.Game.AccessControl.BannedIDs[I] == unid)
                    {
                        goto J0x53F;
                    }
                    ++ I;
                    goto J0x446;
                }
                J0x53F:

                if(I == webadmin.WorldInfo.Game.AccessControl.BannedIDs.Length)
                {
                    webadmin.WorldInfo.Game.AccessControl.BannedIDs.AddItem(unid;
                    webadmin.WorldInfo.Game.AccessControl.SaveConfig();
                    webadmin.addMessage(Q, msgAddedBanId @ Class'WebAdminUtils'.static.UniqueNetIdToString(unid));
                }
            }
        }
    }
    I = 0;
    J0x6D3:

    if(I < webadmin.WorldInfo.Game.AccessControl.BannedIDs.Length)
    {
        Q.Response.Subst("ban.banid", "plainid:" $ string(I));
        unid = webadmin.WorldInfo.Game.AccessControl.BannedIDs[I];
        Q.Response.Subst("ban.uniqueid", Class'OnlineSubsystem'.static.UniqueNetIdToString(unid));
        if(steamWorks != none)
        {
            Q.Response.Subst("ban.steamid", steamWorks.UniqueNetIdToInt64(unid));
            Action = steamWorks.UniqueNetIdToPlayerName(unid);
            Q.Response.Subst("ban.steamname", Class'WebAdminUtils'.static.HTMLEscape(Action));            
        }
        else
        {
            Q.Response.Subst("ban.steamid", "");
            Q.Response.Subst("ban.steamname", "");
        }
        Q.Response.Subst("ban.playername", "");
        Q.Response.Subst("ban.timestamp", "");        
        bans $= webadmin.Include(Q, "policy_bans_row.inc");
        ++ I;
        goto J0x6D3;
    }
    if(Len(bans) == 0)
    {
        bans = webadmin.Include(Q, "policy_bans_empty.inc");
    }
    Q.Response.Subst("bans", bans);
    webadmin.sendPage(Q, "policy_bans.html");
}

function handleBansExport(WebAdminQuery Q)
{
    local JsonObject Result, bans, banJson;
    local OnlineSubsystem steamWorks;
    local int I, Year, Month, DayOfWeek, Day, Hour,
	    minute, second, MSec;

    GetSystemTime(Year, Month, DayOfWeek, Day, Hour, minute, second, MSec);
    Result = new Class'JsonObject';
    Result.SetStringValue("serverName", webadmin.WorldInfo.Game.GameReplicationInfo.ServerName);
    Result.SetStringValue("timestamp", Class'WebAdminUtils'.static.iso8601datetime(Year, Month, Day, Hour, minute, second, MSec));
    steamWorks = Class'GameEngine'.static.GetOnlineSubsystem();
    bans = new Class'JsonObject';
    Result.SetObject("bans", bans);
    I = 0;
    J0x1F4:

    if(I < webadmin.WorldInfo.Game.AccessControl.BannedIDs.Length)
    {
        banJson = createBanJson(I, steamWorks);
        if(banJson != none)
        {
            bans.ObjectArray.AddItem(banJson;
        }
        ++ I;
        goto J0x1F4;
    }
    Q.Response.AddHeader("Content-Type: application/json");
    Q.Response.AddHeader("Content-Disposition: attachment; filename=\"server-bans.json\"");
    Q.Response.SendText(Class'JsonObject'.static.EncodeJson(Result));
}

function handleBansImport(WebAdminQuery Q)
{
    local string Action;
    local BanImporter BanImporter;
    local int Cnt;

    Action = Q.Request.GetVariable("action");
    if(Action ~= "import")
    {
        BanImporter = new Class'BanImporter';
        BanImporter.importFrom(Q.Request.GetVariable("importurl"));
        Q.Session.putObject("BanImporter", BanImporter);        
    }
    else
    {
        BanImporter = BanImporter(Q.Session.GetObject("BanImporter"));
    }
    if(BanImporter == none)
    {
        Q.Response.Redirect(webadmin.Path $ "/policy/bans");
        return;
    }
    Q.Response.Subst("importer.status", string(BanImporter.Status));
    Q.Response.Subst("importer.statusMessage", BanImporter.getStatusStr());
    Q.Response.Subst("importer.url", BanImporter.importFromUrl);
    if(BanImporter.Status == 3)
    {
        webadmin.addMessage(Q, BanImporter.ErrorMessage, 2);
        Q.Session.removeObject("BanImporter");        
    }
    else
    {
        if(BanImporter.Status == 2)
        {
            Cnt = BanImporter.applyBansTo(webadmin.WorldInfo.Game.AccessControl, Class'GameEngine'.static.GetOnlineSubsystem());
            webadmin.addMessage(Q, Repl(msgBansImported, "%i", string(Cnt)));
            Q.Session.removeObject("BanImporter");
            webadmin.WorldInfo.Game.AccessControl.SaveConfig();
        }
    }
    webadmin.sendPage(Q, "policy_bans_importing.html");
}

function JsonObject createBanJson(int Idx, OnlineSubsystem steamWorks)
{
    local JsonObject Result;
    local AccessControl AC;
    local UniqueNetId unid;

    AC = webadmin.WorldInfo.Game.AccessControl;
    if((AC.BannedIDs.Length < (Idx + 1)) || Idx < 0)
    {
        return none;
    }
    unid = AC.BannedIDs[Idx];
    Result = new Class'JsonObject';
    Result.SetStringValue("uniqueNetId", Class'OnlineSubsystem'.static.UniqueNetIdToString(unid));
    if(steamWorks != none)
    {
        Result.SetStringValue("steamId64", steamWorks.UniqueNetIdToInt64(unid));
        Result.SetStringValue("steamName", steamWorks.UniqueNetIdToPlayerName(unid));
    }
    return Result;
}

function handleSessionBans(WebAdminQuery Q)
{
    local KFAccessControl roac;
    local UniqueNetId unid, Empty;
    local string bans;
    local int I;
    local OnlineSubsystem steamWorks;

    roac = KFAccessControl(webadmin.WorldInfo.Game.AccessControl);
    steamWorks = Class'GameEngine'.static.GetOnlineSubsystem();
    if((roac != none) && Q.Request.GetVariable("action") ~= "revoke")
    {
        I = int(Q.Request.GetVariable("banid", "-1"));
        if((I > -1) && I < roac.SessionBannedIDs.Length)
        {
            unid = roac.SessionBannedIDs[I];
            roac.SessionBannedIDs.Remove(I, 1;
            webadmin.addMessage(Q, Repl(msgRemovedSessionBan, "%1", Class'OnlineSubsystem'.static.UniqueNetIdToString(unid)));
        }
    }
    if(roac != none)
    {
        I = 0;
        J0x240:

        if(I < roac.SessionBannedIDs.Length)
        {
            Q.Response.Subst("ban.banid", string(I));
            unid = roac.SessionBannedIDs[I];
            if(Empty == unid)
            {
                Q.Response.Subst("ban.uniqueid", "");
                Q.Response.Subst("ban.uniqueid.visible", "display: none");                
            }
            else
            {
                Q.Response.Subst("ban.uniqueid", Class'OnlineSubsystem'.static.UniqueNetIdToString(unid));
                Q.Response.Subst("ban.uniqueid.visible", "");
            }
            if(steamWorks != none)
            {
                Q.Response.Subst("ban.steamname", Class'WebAdminUtils'.static.HTMLEscape(steamWorks.UniqueNetIdToPlayerName(unid)));
                Q.Response.Subst("ban.steamid", steamWorks.UniqueNetIdToInt64(unid));                
            }
            else
            {
                Q.Response.Subst("ban.steamname", "");
                Q.Response.Subst("ban.steamid", "");
            }            
            bans $= webadmin.Include(Q, "policy_session_row.inc");
            ++ I;
            goto J0x240;
        }
        if(roac.SessionBannedIDs.Length == 0)
        {
            Q.Response.Subst("sessionban.empty", msgSessionBansNoBans);
            bans = webadmin.Include(Q, "policy_session_empty.inc");
        }        
    }
    else
    {
        LogInternal(("Current AccessControl class: " $ string(webadmin.WorldInfo.Game.AccessControl.Class)) $ " ; Expecting subclass of: KFAccessControl", 'webadmin');
        Q.Response.Subst("sessionban.empty", msgSessionBansNoROAC);
        bans = webadmin.Include(Q, "policy_session_empty.inc");
    }
    Q.Response.Subst("bans", bans);
    webadmin.sendPage(Q, "policy_session.html");
}

function handleRebuildSettingsCache(WebAdminQuery Q)
{
    local array<DCEGameInfo> gts;
    local int I;

    if(Q.Request.GetVariable("action") ~= "rebuild")
    {
        HasSettingsCache.Length = 0;
        gts = webadmin.DataStoreCache.GetGameTypes();
        I = 0;
        J0x9F:

        if(I < gts.Length)
        {
            hasSettings(gts[I].ClassName);
            ++ I;
            goto J0x9F;
        }
        webadmin.DataStoreCache.loadMutators();
        I = 0;
        J0x136:

        if(I < webadmin.DataStoreCache.Mutators.Length)
        {
            hasSettings(webadmin.DataStoreCache.Mutators[I].ClassName);
            ++ I;
            goto J0x136;
        }
        webadmin.addMessage(Q, "Settings cache has been rebuild.");
    }
    webadmin.addMessage(Q, (((("<form action=\"" $ webadmin.Path) $ Q.Request.URI) $ "\" method=\"post\">") $ "<p>Only rebuild the settings cache when the server is empty. It is strongly adviced to restart the game after rebuilding has been completed.</p>") $ "<p><button type=\"submit\" name=\"action\" value=\"rebuild\">Rebuild cache</button></p></form>", 1);
    Q.Response.Subst("page.title", "Rebuild Settings Cache");
    webadmin.sendPage(Q, "message.html");
}

function bool hasSettings(string forClass)
{
    local int I;

    I = HasSettingsCache.Find('ClassName', Locs(forClass);
    if(I != -1)
    {
        return HasSettingsCache[I].hasSettings;
    }
    I = HasSettingsCache.Length;
    HasSettingsCache.Length = I + 1;
    HasSettingsCache[I].ClassName = Locs(forClass);
    HasSettingsCache[I].hasSettings = (getSettingsClassFqn(forClass, true)) != none;
    SaveConfig();
    return HasSettingsCache[I].hasSettings;
}

function class<WebAdminSettings> getSettingsClassFqn(string forClass, optional bool bSilent)
{
    local int Idx;
    local class<WebAdminSettings> Result;

    bSilent = false;
    if(Len(forClass) == 0)
    {
        return none;
    }
    Idx = classSettingsCache.Find('cls', Locs(forClass);
    if(Idx != -1)
    {
        return classSettingsCache[Idx].settingsCls;
    }
    Idx = InStr(forClass, ".");
    if(Idx == -1)
    {
        Result = getSettingsClass("", forClass, bSilent);        
    }
    else
    {
        Result = getSettingsClass(Left(forClass, Idx), Mid(forClass, Idx + 1), bSilent);
    }
    if(Result != none)
    {
        Idx = HasSettingsCache.Find('ClassName', Locs(forClass);
        if(Idx != -1)
        {
            HasSettingsCache[Idx].hasSettings = true;
            SaveConfig();
        }
    }
    return Result;
}

function class<WebAdminSettings> getSettingsClass(string pkgName, string clsName, optional bool bSilent)
{
    local string ClassName, settingsClass;
    local class<WebAdminSettings> Result;
    local int Idx;
    local ClassSettingsCacheEntry cacheEntry;

    bSilent = false;
    if(Len(clsName) == 0)
    {
        return none;
    }
    Idx = classSettingsCache.Find('cls', Locs((pkgName $ ".") $ clsName);
    if(Idx != -1)
    {
        return classSettingsCache[Idx].settingsCls;
    }
    cacheEntry.cls = Locs((pkgName $ ".") $ clsName);
    Idx = SettingsClasses.Find('ClassName', clsName;
    if(Idx == -1)
    {
        ClassName = cacheEntry.cls;
        Idx = SettingsClasses.Find('ClassName', ClassName;
    }
    if(Idx != -1)
    {
        Result = class<WebAdminSettings>(DynamicLoadObject(SettingsClasses[Idx].settingsClass, Class'Class'));
        if(Result == none)
        {
            LogInternal((("Unable to load settings class " $ SettingsClasses[Idx].settingsClass) $ " for the class ") $ SettingsClasses[Idx].ClassName, 'webadmin');            
        }
        else
        {
            cacheEntry.settingsCls = Result;
            classSettingsCache.AddItem(cacheEntry;
            return Result;
        }
    }
    settingsClass = rewriteSettingsClassname(pkgName, clsName);
    Result = class<WebAdminSettings>(DynamicLoadObject(settingsClass, Class'Class', true));
    if(Result != none)
    {
        cacheEntry.settingsCls = Result;
        classSettingsCache.AddItem(cacheEntry;
        return Result;
    }
    Result = class<WebAdminSettings>(FindObject(clsName $ "Settings", Class'Class'));
    if(Result == none)
    {
        if(!bSilent)
        {
            LogInternal(((((("Settings class " $ settingsClass) $ " for class ") $ pkgName) $ ".") $ clsName) $ " not found (auto detection).", 'webadmin');
        }
    }
    cacheEntry.settingsCls = Result;
    classSettingsCache.AddItem(cacheEntry;
    return Result;
}

function string rewriteSettingsClassname(string pkgName, string clsName)
{
    return ((pkgName $ ".") $ clsName) $ "Settings";
}

function class<WebAdminSettings> getSettingsClassByClass(Class forClass, optional bool bSilent)
{
    bSilent = false;
    return getSettingsClass(string(forClass.GetPackageName()), string(forClass.Name), bSilent);
}

function WebAdminSettings getSettingsInstance(class<WebAdminSettings> cls)
{
    local WebAdminSettings Instance;
    local int Idx;

    Idx = settingsInstances.Find('cls', cls;
    if(Idx == -1)
    {
        Instance = new cls;
        Idx = settingsInstances.Length;
        settingsInstances.Length = Idx + 1;
        settingsInstances[Idx].cls = cls;
        settingsInstances[Idx].Instance = Instance;
        if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Instance), (none)))
        {
            IAdvWebAdminSettings(Instance).advInitSettings(webadmin.WorldInfo, webadmin.DataStoreCache);            
        }
        else
        {
            Instance.initSettings();
        }
    }
    return settingsInstances[Idx].Instance;
}

function SettingsRenderer getSettingsRenderer()
{
    if(SettingsRenderer == none)
    {
        SettingsRenderer = new Class'SettingsRenderer';
        SettingsRenderer.Init(webadmin.Path);
    }
    return SettingsRenderer;
}

function handleSettingsGametypes(WebAdminQuery Q)
{
    local string currentGameType, substvar, tmp;
    local DCEGameInfo editGametype, GameType;
    local int Idx;
    local class<WebAdminSettings> settingsClass;
    local class<GameInfo> GI;
    local WebAdminSettings Settings;
    local ISettingsPrivileges privs;
    local bool liveAdjust, settingsSaved;

    currentGameType = Q.Request.GetVariable("gametype");
    if(currentGameType == "")
    {
        currentGameType = string(webadmin.WorldInfo.Game.Class);
    }
    webadmin.DataStoreCache.loadGameTypes();
    Idx = webadmin.DataStoreCache.resolveGameType(currentGameType);
    if(Idx > -1)
    {
        editGametype = webadmin.DataStoreCache.GameTypes[Idx];
        currentGameType = editGametype.Data.ClassName;        
    }
    else
    {
        editGametype = none;
        currentGameType = "";
    }
    substvar = "";
    foreach webadmin.DataStoreCache.GameTypes(GameType,)
    {
        if(!Q.User.canPerform(webadmin.getAuthURL((Q.Request.URI $ "/") $ GameType.Data.ClassName)))
        {
            continue;            
        }
        else
        {
            tmp = "";
            if(!hasSettings(GameType.Data.ClassName))
            {
                tmp = " &sup1;";
            }
            Q.Response.Subst("gametype.gamemode", Class'WebAdminUtils'.static.HTMLEscape(GameType.Data.ClassName));
            Q.Response.Subst("gametype.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(GameType.FriendlyName) $ tmp);
            Q.Response.Subst("gametype.description", Class'WebAdminUtils'.static.HTMLEscape(GameType.Description));
            if(currentGameType ~= GameType.Data.ClassName)
            {
                Q.Response.Subst("editgametype.name", Class'WebAdminUtils'.static.HTMLEscape(GameType.FriendlyName) $ tmp);
                Q.Response.Subst("editgametype.class", Class'WebAdminUtils'.static.HTMLEscape(GameType.Data.ClassName));
                Q.Response.Subst("gametype.selected", "selected=\"selected\"");                
            }
            else
            {
                Q.Response.Subst("gametype.selected", "");
            }            
            substvar $= webadmin.Include(Q, "current_change_gametype.inc");            
        }
    }    
    Q.Response.Subst("gametypes", substvar);
    if(((editGametype != none) && Len(editGametype.Data.ClassName) > 0) && Q.User.canPerform((("webadmin://" $ Q.Request.URI) $ "/") $ editGametype.Data.ClassName))
    {
        GI = class<GameInfo>(DynamicLoadObject(editGametype.Data.ClassName, Class'Class'));
        if(GI != none)
        {
            settingsClass = getSettingsClassFqn(editGametype.Data.ClassName);
        }
        if(settingsClass != none)
        {
            Settings = getSettingsInstance(settingsClass);
        }
        if(Settings == none)
        {
            if(SettingsMagic == none)
            {
                SettingsMagic = new Class'SettingsMagic';
            }
            Settings = SettingsMagic.Find(GI);
        }
    }
    if(Settings != none)
    {
        getSettingsRenderer();
        if((Q.Request.GetVariable("action") ~= "save") || Q.Request.GetVariable("action") ~= "save settings")
        {
            liveAdjust = Q.Request.GetVariable("liveAdjust", "0") == "1";
            if(!liveAdjust)
            {
                Settings.setCurrentGameInfo(none);
            }
            if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Settings), (none)))
            {
                if(IAdvWebAdminSettings(Settings).advSaveSettings(Q.Request, webadmin.getMessagesObject(Q)))
                {
                    webadmin.addMessage(Q, msgSettingsSaved);
                }                
            }
            else
            {
                applySettings(Settings, Q.Request);
                SettingsRenderer.ensureSettingValues(Settings);
                Settings.saveSettings();
                webadmin.addMessage(Q, msgSettingsSaved);
            }
            settingsSaved = true;            
        }
        else
        {
            liveAdjust = true;
        }
        if(liveAdjust)
        {
            Settings.setCurrentGameInfo(webadmin.WorldInfo.Game);
        }
        privs = Q.User.getSettingsPrivileges();
        if(NotEqual_InterfaceInterface(privs, (none)))
        {
            privs.setBasePrivilegeUri(webadmin.getAuthURL((Q.Request.URI $ "/") $ editGametype.Data.ClassName));
        }
        if(!settingsSaved)
        {
            SettingsRenderer.ensureSettingValues(Settings);
        }
        if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Settings), (none)))
        {
            SettingsRenderer.InitEx(Settings, Q.Response);
            IAdvWebAdminSettings(Settings).advRenderSettings(Q.Response, SettingsRenderer,, privs);            
        }
        else
        {
            SettingsRenderer.Render(Settings, Q.Response,, privs);
        }        
    }
    else
    {
        if(editGametype != none)
        {
            webadmin.addMessage(Q, msgCantSaveSettings, 1);
        }
    }
    if((KFGameInfoSettings(Settings) == none) || KFGameInfoSettings(Settings).GameInfo == none)
    {
        Q.Response.Subst("liveAdjustStyle", "style=\"display: none;\"");
    }
    if(liveAdjust)
    {
        Q.Response.Subst("liveAdjustChecked", "checked=\"checked\"");        
    }
    else
    {
        Q.Response.Subst("liveAdjustChecked", "");
    }
    webadmin.sendPage(Q, "default_settings_gametypes.html");
}

static function applySettings(WebAdminSettings Settings, WebRequest Request, optional string Prefix)
{
    local int I, Idx;
    local name sname;
    local string Val;

    Prefix = "settings_";
    I = 0;
    J0x1A:

    if(I < Settings.LocalizedSettingsMappings.Length)
    {
        Idx = Settings.LocalizedSettingsMappings[I].Id;
        sname = Settings.GetStringSettingName(Idx);
        if(Request.GetVariableCount(Prefix $ string(sname)) > 0)
        {
            Val = Request.GetVariable(Prefix $ string(sname));
            Settings.SetStringSettingValue(Idx, int(Val), false);
        }
        ++ I;
        goto J0x1A;
    }
    I = 0;
    J0x186:

    if(I < Settings.PropertyMappings.Length)
    {
        Idx = Settings.PropertyMappings[I].Id;
        sname = Settings.GetPropertyName(Idx);
        if(Request.GetVariableCount(Prefix $ string(sname)) > 0)
        {
            Val = Request.GetVariable(Prefix $ string(sname));
            Settings.SetPropertyFromStringByName(sname, Val);
        }
        ++ I;
        goto J0x186;
    }
}

function handleSettingsGeneral(WebAdminQuery Q)
{
    local class<WebAdminSettings> settingsClass;
    local WebAdminSettings Settings;
    local float Difficulty;
    local int Length;
    local bool bNoLiveAdjust;
    local KFGameInfo KFGI;

    settingsClass = class<WebAdminSettings>(DynamicLoadObject(GeneralSettingsClass, Class'Class'));
    if(settingsClass != none)
    {
        Settings = getSettingsInstance(settingsClass);
    }
    if(Settings != none)
    {
        if((Q.Request.GetVariable("action") ~= "save") || Q.Request.GetVariable("action") ~= "save settings")
        {
            KFGI = KFGameInfo(webadmin.WorldInfo.Game);
            Difficulty = float(Q.Request.GetVariable("settings_GameDifficulty"));
            Length = int(Q.Request.GetVariable("settings_GameLength"));
            if((KFGI != none) && (KFGI.GameDifficulty != Difficulty) || KFGI.GameLength != Length)
            {
                bNoLiveAdjust = true;
            }
        }
        genericSettingsHandler(Q, Settings, bNoLiveAdjust);        
    }
    else
    {
        LogInternal("Failed to load the general settings class " $ GeneralSettingsClass, 'webadmin');
        webadmin.addMessage(Q, msgCantLoadSettings, 1);
    }
    webadmin.sendPage(Q, "default_settings_general.html");
}

function bool genericSettingsHandler(WebAdminQuery Q, WebAdminSettings Settings, optional bool bNoLiveAdjust)
{
    local ISettingsPrivileges privs;
    local bool settingsSaved, liveAdjust;

    bNoLiveAdjust = false;
    settingsSaved = false;
    if((Q.Request.GetVariable("action") ~= "save") || Q.Request.GetVariable("action") ~= "save settings")
    {
        liveAdjust = ((bNoLiveAdjust) ? false : Q.Request.GetVariable("liveAdjust", "0") == "1");
        if(!liveAdjust)
        {
            Settings.setCurrentGameInfo(none);
        }
        if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Settings), (none)))
        {
            if(IAdvWebAdminSettings(Settings).advSaveSettings(Q.Request, webadmin.getMessagesObject(Q)))
            {
                webadmin.addMessage(Q, msgSettingsSaved);
            }            
        }
        else
        {
            applySettings(Settings, Q.Request);
            SettingsRenderer.ensureSettingValues(Settings);
            Settings.saveSettings();
            webadmin.addMessage(Q, msgSettingsSaved);
        }
        settingsSaved = true;        
    }
    else
    {
        liveAdjust = true;
    }
    getSettingsRenderer();
    if(liveAdjust)
    {
        Settings.setCurrentGameInfo(webadmin.WorldInfo.Game);
    }
    if(!settingsSaved)
    {
        SettingsRenderer.ensureSettingValues(Settings);
    }
    privs = Q.User.getSettingsPrivileges();
    if(NotEqual_InterfaceInterface(privs, (none)))
    {
        privs.setBasePrivilegeUri(webadmin.getAuthURL(Q.Request.URI));
    }
    if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Settings), (none)))
    {
        SettingsRenderer.InitEx(Settings, Q.Response);
        IAdvWebAdminSettings(Settings).advRenderSettings(Q.Response, SettingsRenderer,, privs);        
    }
    else
    {
        SettingsRenderer.Render(Settings, Q.Response,, privs);
    }
    if(liveAdjust)
    {
        Q.Response.Subst("liveAdjustChecked", "checked=\"checked\"");        
    }
    else
    {
        Q.Response.Subst("liveAdjustChecked", "");
    }
    return settingsSaved;
}

function handleSettingsWelcome(WebAdminQuery Q)
{
    local class<WebAdminSettings> settingsClass;
    local WebAdminSettings Settings;

    settingsClass = class<WebAdminSettings>(DynamicLoadObject(WelcomeSettingsClass, Class'Class'));
    if(settingsClass != none)
    {
        Settings = getSettingsInstance(settingsClass);
    }
    if(Settings != none)
    {
        genericSettingsHandler(Q, Settings);        
    }
    else
    {
        LogInternal("Failed to load the welcome page settings class " $ WelcomeSettingsClass, 'webadmin');
        webadmin.addMessage(Q, msgCantLoadSettings, 1);
    }
    webadmin.sendPage(Q, "default_settings_welcome.html");
}

function handleSettingsPasswords(WebAdminQuery Q)
{
    local string Action, pw1, pw2;

    Action = Q.Request.GetVariable("action");
    if(Action ~= "gamepassword")
    {
        pw1 = Q.Request.GetVariable("gamepw1");
        pw2 = Q.Request.GetVariable("gamepw2");
        if(pw1 != pw2)
        {
            webadmin.addMessage(Q, msgGamePWError, 2);            
        }
        else
        {
            webadmin.WorldInfo.Game.AccessControl.SetGamePassword(pw1);
            webadmin.WorldInfo.Game.AccessControl.SaveConfig();
            webadmin.addMessage(Q, msgGamePWSaved);
        }        
    }
    else
    {
        if(Action ~= "adminpassword")
        {
            pw1 = Q.Request.GetVariable("adminpw1");
            pw2 = Q.Request.GetVariable("adminpw2");
            if(pw1 != pw2)
            {
                webadmin.addMessage(Q, msgAdminPWError, 2);                
            }
            else
            {
                if(Len(pw1) == 0)
                {
                    webadmin.addMessage(Q, msgAdminPWEmpty, 2);                    
                }
                else
                {
                    webadmin.WorldInfo.Game.AccessControl.SetAdminPassword(pw1);
                    webadmin.WorldInfo.Game.AccessControl.SaveConfig();
                    webadmin.addMessage(Q, msgAdminPWSaved);
                }
            }
        }
    }
    Q.Response.Subst("has.gamepassword", Class'WebAdminUtils'.static.HTMLEscape(string(webadmin.WorldInfo.Game.AccessControl.RequiresPassword())));
    webadmin.sendPage(Q, "default_settings_password.html");
}

function handleSettingsMutators(WebAdminQuery Q)
{
    local DCEMutator Mutator, editMutator;
    local string currentMutator, substvar;
    local class<Mutator> mut;
    local class<WebAdminSettings> settingsClass;
    local WebAdminSettings Settings;
    local int Idx;
    local ISettingsPrivileges privs;

    currentMutator = Q.Request.GetVariable("mutator");
    webadmin.DataStoreCache.loadMutators();
    Idx = 0;
    J0x85:

    if(Idx < webadmin.DataStoreCache.Mutators.Length)
    {
        if(webadmin.DataStoreCache.Mutators[Idx].ClassName ~= currentMutator)
        {
            goto J0x138;
        }
        ++ Idx;
        goto J0x85;
    }
    J0x138:

    if(Idx >= webadmin.DataStoreCache.Mutators.Length)
    {
        Idx = -1;
    }
    if(Idx > -1)
    {
        editMutator = webadmin.DataStoreCache.Mutators[Idx];
        currentMutator = editMutator.ClassName;        
    }
    else
    {
        editMutator = none;
        currentMutator = "";
    }
    substvar = "";
    foreach webadmin.DataStoreCache.Mutators(Mutator,)
    {
        if(!hasSettings(Mutator.ClassName))
        {
            continue;            
        }
        else
        {
            if(!Q.User.canPerform((("webadmin://" $ Q.Request.URI) $ "/") $ Mutator.ClassName))
            {
                continue;                
            }
            else
            {
                Q.Response.Subst("mutator.classname", Class'WebAdminUtils'.static.HTMLEscape(Mutator.ClassName));
                Q.Response.Subst("mutator.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(Mutator.FriendlyName));
                Q.Response.Subst("mutator.description", Class'WebAdminUtils'.static.HTMLEscape(Mutator.Description));
                if(currentMutator ~= Mutator.ClassName)
                {
                    Q.Response.Subst("editmutator.name", Class'WebAdminUtils'.static.HTMLEscape(Mutator.FriendlyName));
                    Q.Response.Subst("editmutator.class", Class'WebAdminUtils'.static.HTMLEscape(Mutator.ClassName));
                    Q.Response.Subst("editmutator.description", Class'WebAdminUtils'.static.HTMLEscape(Mutator.Description));
                    Q.Response.Subst("mutator.selected", "selected=\"selected\"");                    
                }
                else
                {
                    Q.Response.Subst("mutator.selected", "");
                }                
                substvar $= webadmin.Include(Q, "default_settings_mutators_select.inc");                
            }
        }
    }    
    Q.Response.Subst("mutators", substvar);
    if(((editMutator != none) && Len(editMutator.ClassName) > 0) && Q.User.canPerform((("webadmin://" $ Q.Request.URI) $ "/") $ editMutator.ClassName))
    {
        mut = class<Mutator>(DynamicLoadObject(editMutator.ClassName, Class'Class'));
        if(mut != none)
        {
            settingsClass = getSettingsClassFqn(editMutator.ClassName);
        }
        if(settingsClass != none)
        {
            Settings = getSettingsInstance(settingsClass);
        }
    }
    if(Settings != none)
    {
        if((Q.Request.GetVariable("action") ~= "save") || Q.Request.GetVariable("action") ~= "save settings")
        {
            if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Settings), (none)))
            {
                if(IAdvWebAdminSettings(Settings).advSaveSettings(Q.Request, webadmin.getMessagesObject(Q)))
                {
                    webadmin.addMessage(Q, msgSettingsSaved);
                }                
            }
            else
            {
                applySettings(Settings, Q.Request);
                Settings.saveSettings();
                webadmin.addMessage(Q, msgSettingsSaved);
            }
        }
        getSettingsRenderer();
        privs = Q.User.getSettingsPrivileges();
        if(NotEqual_InterfaceInterface(privs, (none)))
        {
            privs.setBasePrivilegeUri(Q.Request.URI);
        }
        if(NotEqual_InterfaceInterface(IAdvWebAdminSettings(Settings), (none)))
        {
            SettingsRenderer.InitEx(Settings, Q.Response);
            IAdvWebAdminSettings(Settings).advRenderSettings(Q.Response, SettingsRenderer,, privs);            
        }
        else
        {
            SettingsRenderer.Render(Settings, Q.Response,, privs);
        }
        Q.Response.Subst("settings", webadmin.Include(Q, "default_settings_mutators.inc"));        
    }
    else
    {
        if(editMutator != none)
        {
            webadmin.addMessage(Q, msgCantLoadSettings, 1);
        }
    }
    webadmin.sendPage(Q, "default_settings_mutators.html");
}

function handleMapList(WebAdminQuery Q)
{
    local string currentGameType, substvar;
    local DCEGameInfo editGametype, GameType;
    local int Idx, I, maplistidx, activeidx;
    local GameMapCycle cycle;
    local array<GameMapCycle> cycles;
    local array<DCEMapInfo> allMaps;
    local array<string> postcycle;

    maplistidx = int(Q.Request.GetVariable("maplistidx", "-2"));
    if(maplistidx == -2)
    {
        if(KFGameInfo(webadmin.WorldInfo.Game) != none)
        {
            maplistidx = KFGameInfo(webadmin.WorldInfo.Game).ActiveMapCycle;
        }
    }
    if(KFGameInfo(webadmin.WorldInfo.Game) != none)
    {
        cycles = KFGameInfo(webadmin.WorldInfo.Game).GameMapCycles;        
    }
    else
    {
        cycles = Class'KFGameInfo'.default.GameMapCycles;
    }
    maplistidx = Min(maplistidx, cycles.Length - 1);
    if(maplistidx >= 0)
    {
        cycle = cycles[maplistidx];
    }
    if(KFGameInfo(webadmin.WorldInfo.Game) != none)
    {
        activeidx = KFGameInfo(webadmin.WorldInfo.Game).ActiveMapCycle;        
    }
    else
    {
        activeidx = Class'KFGameInfo'.default.ActiveMapCycle;
    }
    if((activeidx == maplistidx) || maplistidx < 0)
    {
        Q.Response.Subst("mlactive", "disabled=\"disabled\"");        
    }
    else
    {
        Q.Response.Subst("mlactive", "");
    }
    currentGameType = Q.Request.GetVariable("gametype");
    if(currentGameType == "")
    {
        if(cycle.Maps.Length > 0)
        {
            postcycle = webadmin.DataStoreCache.getGametypesByMap(cycle.Maps[0]);
            if(postcycle.Length > 0)
            {
                currentGameType = postcycle[0];
            }
        }
        if(currentGameType == "")
        {
            currentGameType = string(webadmin.WorldInfo.Game.Class);
        }
    }
    webadmin.DataStoreCache.loadGameTypes();
    Idx = webadmin.DataStoreCache.resolveGameType(currentGameType);
    if(Idx > -1)
    {
        editGametype = webadmin.DataStoreCache.GameTypes[Idx];
        currentGameType = editGametype.Data.ClassName;        
    }
    else
    {
        editGametype = none;
        currentGameType = "";
    }
    substvar = "";
    foreach webadmin.DataStoreCache.GameTypes(GameType,)
    {
        Q.Response.Subst("gametype.gamemode", Class'WebAdminUtils'.static.HTMLEscape(GameType.Data.ClassName));
        Q.Response.Subst("gametype.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(GameType.FriendlyName));
        Q.Response.Subst("gametype.description", Class'WebAdminUtils'.static.HTMLEscape(GameType.Description));
        if(currentGameType ~= GameType.Data.ClassName)
        {
            Q.Response.Subst("editgametype.name", Class'WebAdminUtils'.static.HTMLEscape(GameType.FriendlyName));
            Q.Response.Subst("editgametype.class", Class'WebAdminUtils'.static.HTMLEscape(GameType.Data.ClassName));
            Q.Response.Subst("gametype.selected", "selected=\"selected\"");            
        }
        else
        {
            Q.Response.Subst("gametype.selected", "");
        }        
        substvar $= webadmin.Include(Q, "current_change_gametype.inc");        
    }    
    Q.Response.Subst("gametypes", substvar);
    if((editGametype != none) && Len(editGametype.Data.ClassName) > 0)
    {
        allMaps = webadmin.DataStoreCache.getMaps(editGametype.Data.ClassName);
    }
    if(Len(Q.Request.GetVariable("mapcycle")) > 0)
    {
        ParseStringIntoArray(Q.Request.GetVariable("mapcycle"), postcycle, Chr(10), true);
        cycle.Maps.Length = 0;
        I = 0;
        J0xC3D:

        if(I < postcycle.Length)
        {
            substvar = Class'WebAdminUtils'.static.Trim(postcycle[I]);
            if(Len(substvar) > 0)
            {
                cycle.Maps[cycle.Maps.Length] = substvar;
            }
            ++ I;
            goto J0xC3D;
        }
        if(Len(Q.Request.GetVariable("activate")) > 0)
        {
            if((maplistidx >= 0) && maplistidx < cycles.Length)
            {
                Class'KFGameInfo'.default.ActiveMapCycle = maplistidx;
                Class'KFGameInfo'.static.StaticSaveConfig();
                if(KFGameInfo(webadmin.WorldInfo.Game) != none)
                {
                    KFGameInfo(webadmin.WorldInfo.Game).ActiveMapCycle = Class'KFGameInfo'.default.ActiveMapCycle;
                }
                Q.Response.Subst("mlactive", "disabled=\"disabled\"");
                webadmin.addMessage(Q, Repl(msgMapCycleActivated, "%i", string(maplistidx + 1)));
                activeidx = maplistidx;
            }            
        }
        else
        {
            if(Len(Q.Request.GetVariable("delete")) > 0)
            {
                if((maplistidx >= 0) && maplistidx < cycles.Length)
                {
                    cycles.Remove(maplistidx, 1;
                    Class'KFGameInfo'.default.GameMapCycles = cycles;
                    Class'KFGameInfo'.static.StaticSaveConfig();
                    if(KFGameInfo(webadmin.WorldInfo.Game) != none)
                    {
                        KFGameInfo(webadmin.WorldInfo.Game).GameMapCycles = Class'KFGameInfo'.default.GameMapCycles;
                    }
                    webadmin.addMessage(Q, msgMapCycleDeleted);
                    Q.Response.Subst("mlactive", "disabled=\"disabled\"");
                    maplistidx = -1;
                    cycle.Maps.Length = 0;
                }                
            }
            else
            {
                if(Len(Q.Request.GetVariable("action")) > 0)
                {
                    if(maplistidx == -1)
                    {
                        maplistidx = cycles.Length;
                    }
                    cycles[maplistidx] = cycle;
                    Class'KFGameInfo'.default.GameMapCycles = cycles;
                    Class'KFGameInfo'.static.StaticSaveConfig();
                    if(KFGameInfo(webadmin.WorldInfo.Game) != none)
                    {
                        KFGameInfo(webadmin.WorldInfo.Game).GameMapCycles = Class'KFGameInfo'.default.GameMapCycles;
                    }
                    webadmin.addMessage(Q, msgMapCycleSaved);
                    if((activeidx == maplistidx) || maplistidx < 0)
                    {
                        Q.Response.Subst("mlactive", "disabled=\"disabled\"");                        
                    }
                    else
                    {
                        Q.Response.Subst("mlactive", "");
                    }
                }
            }
        }
    }
    if(maplistidx > -1)
    {
        Q.Response.Subst("mldeletable", "");        
    }
    else
    {
        Q.Response.Subst("mldeletable", "disabled=\"disabled\"");
    }
    Q.Response.Subst("maplistidx", string(maplistidx));
    Q.Response.Subst("editmaplist.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(msgNewMapCycle));
    substvar = "";
    Idx = 0;
    J0x152A:

    if(Idx < cycles.Length)
    {
        Q.Response.Subst("maplist.friendlyname", Class'WebAdminUtils'.static.HTMLEscape(Repl(MapList, "%i", string(Idx + 1)) $ ((activeidx == Idx) ? " " $ activeTag : "")));
        Q.Response.Subst("maplist.index", string(Idx));
        if(maplistidx == Idx)
        {
            Q.Response.Subst("maplist.selected", "selected=\"selected\"");
            Q.Response.Subst("editmaplist.friendlyname", Class'WebAdminUtils'.static.HTMLEscape("Map cycle #" $ string(Idx + 1)));            
        }
        else
        {
            Q.Response.Subst("maplist.selected", "");
        }        
        substvar $= webadmin.Include(Q, "default_maplist_select.inc");
        ++ Idx;
        goto J0x152A;
    }
    Q.Response.Subst("maplists", substvar);
    substvar = "";
    I = 0;
    J0x1848:

    if(I < allMaps.Length)
    {
        if(I > 0)
        {            
            substvar $= Chr(10);
        }        
        substvar $= allMaps[I].Data.MapName;
        ++ I;
        goto J0x1848;
    }
    Q.Response.Subst("allmaps.plain", Class'WebAdminUtils'.static.HTMLEscape(substvar));
    substvar = "";
    I = 0;
    J0x1969:

    if(I < cycle.Maps.Length)
    {
        if(I > 0)
        {            
            substvar $= Chr(10);
        }        
        substvar $= cycle.Maps[I];
        ++ I;
        goto J0x1969;
    }
    Q.Response.Subst("cycle.plain", Class'WebAdminUtils'.static.HTMLEscape(substvar));
    Q.Response.Subst("maplist_editor", webadmin.Include(Q, "default_maplist_editor.inc"));
    webadmin.sendPage(Q, "default_maplist.html");
}

function handleServerActors(WebAdminQuery Q)
{
    local string tmp;
    local array<string> tmpa;
    local int I;
    local GameEngine GameEngine;
    local bool foundWebAdmin;

    if(Q.Request.GetVariable("action") ~= "save")
    {
        ParseStringIntoArray(Q.Request.GetVariable("serveractors"), tmpa, Chr(10), true);
        Class'KFGameEngine'.default.ServerActors.Length = 0;
        foundWebAdmin = false;
        I = 0;
        J0xD7:

        if(I < tmpa.Length)
        {
            tmp = Class'WebAdminUtils'.static.Trim(tmpa[I]);
            if(Len(tmp) > 0)
            {
                if(tmp ~= "IpDrv.WebServer")
                {
                    foundWebAdmin = true;
                }
                Class'KFGameEngine'.default.ServerActors.AddItem(tmp;
            }
            ++ I;
            goto J0xD7;
        }
        if(!foundWebAdmin)
        {
            Class'KFGameEngine'.default.ServerActors.AddItem("IpDrv.WebServer";
            LogInternal("Force added WebServer to server actors list", 'webadmin');
        }
        Class'KFGameEngine'.static.StaticSaveConfig();
        GameEngine = GameEngine(FindObject("Transient.GameEngine_0", Class'KFGameEngine'));
        if(GameEngine != none)
        {
            GameEngine.ServerActors = Class'KFGameEngine'.default.ServerActors;
            webadmin.addMessage(Q, msgServerActorsSaved);            
        }
        else
        {
            webadmin.addMessage(Q, msgServerActorsSavedWarn, 1);
        }
    }
    tmp = "";
    I = 0;
    J0x342:

    if(I < Class'KFGameEngine'.default.ServerActors.Length)
    {
        if(I > 0)
        {            
            tmp $= Chr(10);
        }        
        tmp $= Class'KFGameEngine'.default.ServerActors[I];
        ++ I;
        goto J0x342;
    }
    Q.Response.Subst("serveractors", tmp);
    webadmin.sendPage(Q, "default_serveractors.html");
}

defaultproperties
{
    menuPolicy="Access Policy"
    menuPolicyDesc="Define the policies required to join the server."
    menuBannedId="Banned IDs"
    menuBannedIdDesc="Change account ban records. These records ban a single online account."
    menuBannedHash="Banned Hashes"
    menuBannedHashDesc="Change client ban records. These records ban a single copy of the game."
    menuSession="Session Bans"
    menuSessionDesc="View current session bans."
    menuSettings="Settings"
    menuGeneral="General"
    menuGeneralDesc="Change various server wide settings. These settings affect all game types. Changes will take effect in the next level."
    menuPassword="Passwords"
    menuPasswordDesc="Change the game and/or administration passwords."
    menuGametypes="Gametypes"
    menuGametypesDesc="Change the default settings of the gametypes. Changes will take effect in the next level."
    menuMutators="Mutators"
    menuMutatorsDesc="Change settings for mutators. Not all mutators can be configured. Changes will take effect in the next level."
    menuMapCycles="Map Cycles"
    menuMapCyclesDesc="Change the game type specific map cycles. each game type can have a single map cycle."
    menuMLAddition="Additional Map Cycles"
    menuMLAdditionDesc="Manage additional map cycle configurations."
    msgSettingsCacheDesc="Rebuild the settings cache."
    msgRemovedPolicy="Removed policy:"
    msgNoValidIpMask="%s is not a valid IP mask"
    msgInvalidPolicy="Invalid policy selected."
    msgAddedPolicy="Added IP policy:"
    msdUpdatedPolicy="Updated IP policy: "
    msgNoValidId="%s is not a valid ID"
    msgAddedBanId="Added ban for UniqueID:"
    msgNoValidHash="%s is not a valid client hash"
    msgBannedHash="Added ban for hash: "
    msgRemovedSessionBan="Removed session ban for UniqueID: %1"
    msgSettingsSaved="Settings saved."
    msgCantSaveSettings="Unable to load a settings information for this game type."
    msgCantLoadSettings="Unable to load settings."
    msgGamePWError="Game password and confirmation do not match"
    msgGamePWSaved="Game password updated"
    msgAdminPWError="Admin password and confirmation do not match"
    msgAdminPWSaved="Admin password updated"
    msgAdminPWEmpty="Admin password can not be empty"
    msgMapCycleSaved="Map cycle saved."
    msgCantLoadGT="Unable to load the selected game type."
    msgImportedMapList="Imported map cycle"
    msgInvalidMaplist="Invalid gametype selected."
    Untitled="Untitled"
    msgCantFindMapCycle="Unable to find the map cycle"
    msgCycleDeleted="Map cycle %s deleted."
    msgCycleSaved="Map cycle %s saved"
    msgCycleActivated="Map cycle activated for the game type %s"
    menuServerActors="Server Actors"
    menuServerActorsDesc="Server actors are special addons that often add extra functionality to the server."
    msgServerActorsSaved="Server actors list saved. Changes take effect in the next map."
    msgServerActorsSavedWarn="Server actors list saved. However, changes will not take effect until a server restart."
    menuWelcome="Welcome Screen"
    menuWelcomeDesc="Change the content of the screen shown when players join."
    menuIpMask="IP Masks"
    menuIpMaskDesc="Change the IP policies that determine who can join the server."
    msgSessionBansNoROAC="Session bans are not available with the current access control."
    msgMapCycleActivated="Map cycle #%i activated."
    msgMapCycleDeleted="Map cycle deleted."
    msgNewMapCycle="new map cycle"
    MapList="Map list #%i"
    activeTag="(active)"
    msgBansImported="Added %i new ban(s)."
    msgBansImporting="Ban import status: %s"
    msgSessionBansNoBans="No session bans."
}