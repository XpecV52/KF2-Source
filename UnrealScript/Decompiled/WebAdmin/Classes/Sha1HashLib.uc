/*******************************************************************************
 * Sha1HashLib generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Sha1HashLib extends HashLib;

var private int Hash[5];
var private string hashString;
var private array<byte> Data;

function string getAlgName()
{
    return "sha1";
}

function string getHash(coerce string inputData)
{
    local int StrLen, char, I;

    hashString = "";
    Data.Length = 0;
    StrLen = Len(inputData);
    I = 0;
    J0x38:

    if(I < StrLen)
    {
        char = Asc(Mid(inputData, I, 1));
        J0x70:

        Data[Data.Length] = byte(char & 255);
        char = char >>> 8;
        if(!(char == 0))
            goto J0x70;
        ++ I;
        goto J0x38;
    }
    calcHash();
    Data.Length = 0;
    return hashString;
}

private final function calcHash()
{
    local int I, chunk, tmp, A, B, C,
	    D, E, W;

    Hash[0] = 1732584193;
    Hash[1] = -271733879;
    Hash[2] = -1732584194;
    Hash[3] = 271733878;
    Hash[4] = -1009589776;
    I = Data.Length;
    if((I % 64) < 56)
    {
        Data.Length = (Data.Length + 64) - (I % 64);        
    }
    else
    {
        Data.Length = (Data.Length + 128) - (I % 64);
    }
    Data[I] = 128;
    Data[Data.Length - 5] = byte(I >>> 29);
    Data[Data.Length - 4] = byte(I >>> 21);
    Data[Data.Length - 3] = byte(I >>> 13);
    Data[Data.Length - 2] = byte(I >>> 5);
    Data[Data.Length - 1] = byte(I << 3);
    J0x1B0:

    if((chunk * 64) < Data.Length)
    {
        I = 0;
        J0x1D7:

        if(I < 16)
        {
            W[I] = (((Data[(chunk * 64) + (I * 4)] << 24) | (Data[((chunk * 64) + (I * 4)) + 1] << 16)) | (Data[((chunk * 64) + (I * 4)) + 2] << 8)) | Data[((chunk * 64) + (I * 4)) + 3];
            ++ I;
            goto J0x1D7;
        }
        I = 16;
        J0x2D8:

        if(I < 80)
        {
            tmp = ((W[I - 3] ^ W[I - 8]) ^ W[I - 14]) ^ W[I - 16];
            W[I] = (tmp << 1) | (tmp >>> 31);
            ++ I;
            goto J0x2D8;
        }
        A = Hash[0];
        B = Hash[1];
        C = Hash[2];
        D = Hash[3];
        E = Hash[4];
        E += (((((A << 5) | (A >>> -5)) + (D ^ (B & (C ^ D)))) + W[0]) + 1518500249);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + (C ^ (A & (B ^ C)))) + W[1]) + 1518500249);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + (B ^ (E & (A ^ B)))) + W[2]) + 1518500249);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + (A ^ (D & (E ^ A)))) + W[3]) + 1518500249);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + (E ^ (C & (D ^ E)))) + W[4]) + 1518500249);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + (D ^ (B & (C ^ D)))) + W[5]) + 1518500249);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + (C ^ (A & (B ^ C)))) + W[6]) + 1518500249);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + (B ^ (E & (A ^ B)))) + W[7]) + 1518500249);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + (A ^ (D & (E ^ A)))) + W[8]) + 1518500249);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + (E ^ (C & (D ^ E)))) + W[9]) + 1518500249);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + (D ^ (B & (C ^ D)))) + W[10]) + 1518500249);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + (C ^ (A & (B ^ C)))) + W[11]) + 1518500249);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + (B ^ (E & (A ^ B)))) + W[12]) + 1518500249);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + (A ^ (D & (E ^ A)))) + W[13]) + 1518500249);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + (E ^ (C & (D ^ E)))) + W[14]) + 1518500249);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + (D ^ (B & (C ^ D)))) + W[15]) + 1518500249);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + (C ^ (A & (B ^ C)))) + W[16]) + 1518500249);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + (B ^ (E & (A ^ B)))) + W[17]) + 1518500249);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + (A ^ (D & (E ^ A)))) + W[18]) + 1518500249);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + (E ^ (C & (D ^ E)))) + W[19]) + 1518500249);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[20]) + 1859775393);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[21]) + 1859775393);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[22]) + 1859775393);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[23]) + 1859775393);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[24]) + 1859775393);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[25]) + 1859775393);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[26]) + 1859775393);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[27]) + 1859775393);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[28]) + 1859775393);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[29]) + 1859775393);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[30]) + 1859775393);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[31]) + 1859775393);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[32]) + 1859775393);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[33]) + 1859775393);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[34]) + 1859775393);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[35]) + 1859775393);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[36]) + 1859775393);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[37]) + 1859775393);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[38]) + 1859775393);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[39]) + 1859775393);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B & C) | (D & (B | C)))) + W[40]) + -1894007588);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A & B) | (C & (A | B)))) + W[41]) + -1894007588);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E & A) | (B & (E | A)))) + W[42]) + -1894007588);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D & E) | (A & (D | E)))) + W[43]) + -1894007588);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C & D) | (E & (C | D)))) + W[44]) + -1894007588);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B & C) | (D & (B | C)))) + W[45]) + -1894007588);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A & B) | (C & (A | B)))) + W[46]) + -1894007588);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E & A) | (B & (E | A)))) + W[47]) + -1894007588);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D & E) | (A & (D | E)))) + W[48]) + -1894007588);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C & D) | (E & (C | D)))) + W[49]) + -1894007588);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B & C) | (D & (B | C)))) + W[50]) + -1894007588);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A & B) | (C & (A | B)))) + W[51]) + -1894007588);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E & A) | (B & (E | A)))) + W[52]) + -1894007588);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D & E) | (A & (D | E)))) + W[53]) + -1894007588);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C & D) | (E & (C | D)))) + W[54]) + -1894007588);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B & C) | (D & (B | C)))) + W[55]) + -1894007588);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A & B) | (C & (A | B)))) + W[56]) + -1894007588);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E & A) | (B & (E | A)))) + W[57]) + -1894007588);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D & E) | (A & (D | E)))) + W[58]) + -1894007588);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C & D) | (E & (C | D)))) + W[59]) + -1894007588);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[60]) + -899497514);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[61]) + -899497514);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[62]) + -899497514);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[63]) + -899497514);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[64]) + -899497514);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[65]) + -899497514);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[66]) + -899497514);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[67]) + -899497514);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[68]) + -899497514);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[69]) + -899497514);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[70]) + -899497514);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[71]) + -899497514);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[72]) + -899497514);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[73]) + -899497514);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[74]) + -899497514);
        C = (C << 30) | (C >>> -30);
        E += (((((A << 5) | (A >>> -5)) + ((B ^ C) ^ D)) + W[75]) + -899497514);
        B = (B << 30) | (B >>> -30);
        D += (((((E << 5) | (E >>> -5)) + ((A ^ B) ^ C)) + W[76]) + -899497514);
        A = (A << 30) | (A >>> -30);
        C += (((((D << 5) | (D >>> -5)) + ((E ^ A) ^ B)) + W[77]) + -899497514);
        E = (E << 30) | (E >>> -30);
        B += (((((C << 5) | (C >>> -5)) + ((D ^ E) ^ A)) + W[78]) + -899497514);
        D = (D << 30) | (D >>> -30);
        A += (((((B << 5) | (B >>> -5)) + ((C ^ D) ^ E)) + W[79]) + -899497514);
        C = (C << 30) | (C >>> -30);
        Hash[0] += A;
        Hash[1] += B;
        Hash[2] += C;
        Hash[3] += D;
        Hash[4] += E;
        ++ chunk;
        goto J0x1B0;
    }
    hashString = (((ToHex(Hash[0]) $ ToHex(Hash[1])) $ ToHex(Hash[2])) $ ToHex(Hash[3])) $ ToHex(Hash[4]);
}
