/*******************************************************************************
 * WebAdminMenu generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WebAdminMenu extends Object;

struct MenuItem
{
    var string Path;
    var string permPath;
    var string Title;
    var string Description;
    var int Weight;
    var bool Hidden;
    var IQueryHandler Handler;

    structdefaultproperties
    {
        Path=""
        permPath=""
        Title=""
        Description=""
        Weight=0
        Hidden=false
        Handler=none
    }
};

struct TreeItem
{
    var int cur;
    var string elm;
    var array<int> Children;

    structdefaultproperties
    {
        cur=0
        elm=""
        Children=none
    }
};

var array<MenuItem> menu;
var webadmin webadmin;
var array<TreeItem> Tree;

function addMenuItem(MenuItem Item)
{
    local int Idx;

    Idx = menu.Find('Path', Item.Path;
    if(Len(Item.permPath) == 0)
    {
        Item.permPath = Item.Path;
    }
    if(Idx > -1)
    {
        menu[Idx].Title = Item.Title;
        menu[Idx].Description = Item.Description;
        menu[Idx].Weight = Item.Weight;
        menu[Idx].Handler = Item.Handler;        
    }
    else
    {
        menu.AddItem(Item;
    }
}

function addMenu(string Path, string Title, IQueryHandler Handler, optional string Description, optional int Weight, optional string permPath)
{
    local MenuItem Item;

    Description = "";
    Weight = 0;
    permPath = "";
    Item.Path = Path;
    Item.Title = Title;
    Item.Description = Description;
    Item.Weight = Weight;
    Item.Handler = Handler;
    Item.permPath = permPath;
    Item.Hidden = Len(Title) == 0;
    addMenuItem(Item);
}

function IQueryHandler getHandlerFor(string Path, out string Title, out string Desc)
{
    local int Idx;

    Idx = menu.Find('Path', Path;
    if(Idx > -1)
    {
        Title = menu[Idx].Title;
        Desc = menu[Idx].Description;
        return menu[Idx].Handler;
    }
    return none;
}

function SetVisibility(string Path, bool IsVisible)
{
    local int Idx;

    Idx = menu.Find('Path', Path;
    if(Idx > -1)
    {
        menu[Idx].Hidden = !IsVisible;
    }
}

function WebAdminMenu getUserMenu(IWebAdminUser forUser)
{
    local WebAdminMenu Result;
    local MenuItem Entry, Dummy;

    if(!forUser.canPerform(webadmin.getAuthURL("/")))
    {
        return none;
    }
    Result = new (webadmin) Class;
    Result.webadmin = webadmin;
    foreach menu(Entry,)
    {
        if(forUser.canPerform(webadmin.getAuthURL(Entry.permPath)))
        {
            Result.addSortedItem(Entry);            
        }
        else
        {
            Dummy.Path = Entry.Path;
            Dummy.Weight = Entry.Weight;
            Result.addSortedItem(Dummy);
        }        
    }    
    Result.createTree();
    return Result;
}

protected function addSortedItem(MenuItem Item)
{
    local MenuItem Entry;
    local int Idx;

    foreach menu(Entry, Idx)
    {
        if(Entry.Path > Item.Path)
        {
            menu.InsertItem(Idx, Item;            
            return;
        }        
    }    
    menu.AddItem(Item;
}

protected function createTree()
{
    local MenuItem Entry;
    local int Idx, I, idx2, Parent, Child;

    local array<string> parts;
    local bool Found;

    Tree.Length = 1;
    Tree[0].cur = -1;
    foreach menu(Entry, Idx)
    {
        ParseStringIntoArray(Entry.Path, parts, "/", true);
        Parent = 0;
        I = 0;
        J0x98:

        if(I < (parts.Length - 1))
        {
            Found = false;
            foreach Tree[Parent].Children(Child,)
            {
                if(Tree[Child].elm == parts[I])
                {
                    ++ I;
                    Parent = Child;
                    Found = true;                    
                }
                else
                {                    
                }
            }            
            if(!Found)
            {
                Tree.Add(1;
                Tree[Tree.Length - 1].cur = -1;
                Tree[Tree.Length - 1].elm = parts[I];
                Tree[Parent].Children.AddItem(Tree.Length - 1;
                Parent = Tree.Length - 1;
                ++ I;
            }
            goto J0x98;
        }
        Found = false;
        foreach Tree[Parent].Children(Child, idx2)
        {
            if(menu[Tree[Child].cur].Weight > Entry.Weight)
            {
                Tree[Parent].Children.Insert(idx2, 1;
                Tree[Parent].Children[idx2] = Tree.Length;
                Tree.Add(1;
                Tree[Tree.Length - 1].cur = Idx;
                Tree[Tree.Length - 1].elm = parts[parts.Length - 1];
                Found = true;                
            }
            else
            {                
            }
        }        
        if(!Found)
        {
            idx2 = Tree[Parent].Children.Length;
            Tree[Parent].Children.Add(1;
            Tree[Parent].Children[idx2] = Tree.Length;
            Tree.Add(1;
            Tree[Tree.Length - 1].cur = Idx;
            Tree[Tree.Length - 1].elm = parts[parts.Length - 1];
        }        
    }    
}

function string Render(optional string menu_template, optional string item_template)
{
    local string Result;
    local WebResponse wr;
    local MenuItem Entry;
    local array<MenuItem> menuCopy;

    menu_template = "/navigation_menu.inc";
    item_template = "/navigation_item.inc";
    wr = new Class'WebResponse';
    if(Tree.Length == 0)
    {
        menuCopy = menu;
        menu.Length = 0;
        foreach menuCopy(Entry,)
        {
            addSortedItem(Entry);            
        }        
        createTree();
    }
    Result = renderChilds(Tree[0].Children, wr, menu_template, item_template);
    wr.Subst("navigation.items", Result);
    return wr.LoadParsedUHTM(webadmin.Path $ menu_template);
}

protected function string renderChilds(array<int> childs, WebResponse wr, optional string menu_template, optional string item_template)
{
    local int Child, MenuID;
    local string Result, subitems;

    menu_template = "/navigation_menu.inc";
    item_template = "/navigation_item.inc";
    foreach childs(Child,)
    {
        MenuID = Tree[Child].cur;
        if(((MenuID > -1) && !menu[MenuID].Hidden) && Len(menu[MenuID].Title) > 0)
        {
            if(Tree[Child].Children.Length > 0)
            {
                subitems = renderChilds(Tree[Child].Children, wr, menu_template, item_template);
                if(Len(subitems) > 0)
                {
                    wr.Subst("navigation.items", subitems, true);
                    subitems = wr.LoadParsedUHTM(webadmin.Path $ menu_template);
                }                
            }
            else
            {
                subitems = "";
            }
            wr.Subst("item.submenu", subitems, true);
            wr.Subst("item.type", ((Tree[Child].Children.Length > 0) ? "with-submenu" : "no-submenu"));
            wr.Subst("item.path", webadmin.Path $ menu[MenuID].Path);
            wr.Subst("item.menupath", menu[MenuID].Path);
            wr.Subst("item.title", menu[MenuID].Title);
            wr.Subst("item.description", menu[MenuID].Description);            
            Result $= wr.LoadParsedUHTM(webadmin.Path $ item_template);            
        }
        else
        {
            if(Tree[Child].Children.Length > 0)
            {                
                Result $= (renderChilds(Tree[Child].Children, wr, menu_template, item_template));
            }
        }        
    }    
    return Result;
}
