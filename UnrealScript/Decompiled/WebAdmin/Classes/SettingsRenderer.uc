/*******************************************************************************
 * SettingsRenderer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SettingsRenderer extends Object;

struct SortedSetting
{
    var string txt;
    var int Idx;
    var bool isLocalized;

    structdefaultproperties
    {
        txt=""
        Idx=0
        isLocalized=false
    }
};

struct SettingsGroup
{
    var SettingsGroupSpec Spec;
    var array<SortedSetting> Settings;

    structdefaultproperties
    {
        Spec=(GroupID="",DisplayName="",pMin=0,pMax=0,lMin=0,lMax=0)
        Settings=none
    }
};

var protected string Prefix;
var protected string namePrefix;
var protected string Path;
var int minOptionListSize;
var array<SettingsGroup> Groups;
var protected WebAdminSettings curSettings;
var protected WebResponse curResponse;
var array<ISettingsModifier> Modifiers;
var protected array<ISettingsModifier> activeModifiers;

function Init(string basePath, optional string namePre, optional string filePrefix)
{
    namePre = "settings_";
    filePrefix = "settings_";
    Prefix = filePrefix;
    Path = basePath;
    namePrefix = namePre;
    minOptionListSize = 4;
}

function string getPath()
{
    return Path;
}

function string getFilePrefix()
{
    return Prefix;
}

function string getNamePrefix()
{
    return namePrefix;
}

function Cleanup()
{
    curSettings = none;
    curResponse = none;
}

function initEx(WebAdminSettings Settings, WebResponse Response)
{
    curSettings = Settings;
    curResponse = Response;
}

function ensureSettingValues(WebAdminSettings Settings)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < Modifiers.Length)
    {
        Modifiers[I].ensureSettingValues(Settings);
        ++ I;
        goto J0x0B;
    }
}

function sortSettings(int GroupID)
{
    local int I, J;
    local SortedSetting sortset;

    Groups[GroupID].Settings.Length = 0;
    I = 0;
    J0x34:

    if(I < curSettings.LocalizedSettingsMappings.Length)
    {
        if(curSettings.LocalizedSettingsMappings[I].Id < Groups[GroupID].Spec.lMin)
        {            
        }
        else
        {
            if(curSettings.LocalizedSettingsMappings[I].Id >= Groups[GroupID].Spec.lMax)
            {                
            }
            else
            {
                if(curSettings.LocalizedSettingsMappings[I].Name == 'None')
                {                    
                }
                else
                {
                    sortset.Idx = I;
                    sortset.isLocalized = true;
                    sortset.txt = getLocalizedSettingText(curSettings.LocalizedSettingsMappings[I].Id);
                    J = 0;
                    J0x257:

                    if(J < Groups[GroupID].Settings.Length)
                    {
                        if(Caps(Groups[GroupID].Settings[J].txt) > Caps(sortset.txt))
                        {
                            Groups[GroupID].Settings.Insert(J, 1;
                            Groups[GroupID].Settings[J] = sortset;
                            goto J0x371;
                        }
                        ++ J;
                        goto J0x257;
                    }
                    J0x371:

                    if(J == Groups[GroupID].Settings.Length)
                    {
                        Groups[GroupID].Settings[J] = sortset;
                    }
                }
            }
        }
        ++ I;
        goto J0x34;
    }
    I = 0;
    J0x3F9:

    if(I < curSettings.PropertyMappings.Length)
    {
        if(curSettings.PropertyMappings[I].Id < Groups[GroupID].Spec.pMin)
        {            
        }
        else
        {
            if(curSettings.PropertyMappings[I].Id >= Groups[GroupID].Spec.pMax)
            {                
            }
            else
            {
                if(curSettings.PropertyMappings[I].Name == 'None')
                {                    
                }
                else
                {
                    sortset.Idx = I;
                    sortset.isLocalized = false;
                    sortset.txt = getSettingText(curSettings.PropertyMappings[I].Id);
                    J = 0;
                    J0x61C:

                    if(J < Groups[GroupID].Settings.Length)
                    {
                        if(Caps(Groups[GroupID].Settings[J].txt) > Caps(sortset.txt))
                        {
                            Groups[GroupID].Settings.Insert(J, 1;
                            Groups[GroupID].Settings[J] = sortset;
                            goto J0x736;
                        }
                        ++ J;
                        goto J0x61C;
                    }
                    J0x736:

                    if(J == Groups[GroupID].Settings.Length)
                    {
                        Groups[GroupID].Settings[J] = sortset;
                    }
                }
            }
        }
        ++ I;
        goto J0x3F9;
    }
}

function createGroups()
{
    local SettingsGroup Group;
    local array<SettingsGroupSpec> Specs;
    local SettingsGroupSpec Spec;

    Groups.Length = 0;
    Specs = curSettings.settingGroups();
    foreach Specs(Spec,)
    {
        Group.Spec = Spec;
        Group.Settings.Length = 0;
        Groups.AddItem(Group;        
    }    
    if(Groups.Length == 0)
    {
        Group.Spec.GroupID = "0";
        Group.Spec.pMin = 0;
        Group.Spec.pMax = curSettings.PropertyMappings.Length;
        Group.Spec.lMin = 0;
        Group.Spec.lMax = curSettings.LocalizedSettingsMappings.Length;
        Group.Settings.Length = 0;
        Groups.AddItem(Group;
    }
}

function Render(WebAdminSettings Settings, WebResponse Response, optional string substName, optional ISettingsPrivileges privileges)
{
    local string Result, Entry;
    local int I;

    substName = "settings";    
    curSettings = Settings;
    curResponse = Response;
    activeModifiers.Length = 0;
    I = 0;
    J0x4C:

    if(I < Modifiers.Length)
    {
        if(Modifiers[I].modifierAppliesTo(Settings))
        {
            activeModifiers[activeModifiers.Length] = Modifiers[I];
        }
        ++ I;
        goto J0x4C;
    }
    createGroups();
    I = 0;
    J0xE5:

    if(I < Groups.Length)
    {
        sortSettings(I);
        ++ I;
        goto J0xE5;
    }
    if(Groups.Length == 1)
    {
        curResponse.Subst("settings", renderGroup(Groups[0]));
        Result = curResponse.LoadParsedUHTM(((Path $ "/") $ Prefix) $ "wrapper_single.inc");        
    }
    else
    {
        Result = "";
        I = 0;
        J0x1DF:

        if(I < Groups.Length)
        {
            if(Groups[I].Settings.Length == 0)
            {                
            }
            else
            {
                if(string(int(Groups[I].Spec.GroupID)) != Groups[I].Spec.GroupID)
                {
                    if(NotEqual_InterfaceInterface(privileges, (none)))
                    {
                        if(!privileges.hasSettingsGroupAccess(Settings.Class, Groups[I].Spec.GroupID))
                        {
                            goto J0x4E3;
                        }
                    }
                }
                curResponse.Subst("group.id", Groups[I].Spec.GroupID);
                curResponse.Subst("group.title", Class'WebAdminUtils'.static.HTMLEscape(Groups[I].Spec.DisplayName));
                curResponse.Subst("group.settings", renderGroup(Groups[I]));
                Entry = curResponse.LoadParsedUHTM(((Path $ "/") $ Prefix) $ "group.inc");                
                Result $= Entry;
            }
            J0x4E3:

            ++ I;
            goto J0x1DF;
        }
        curResponse.Subst("settings", Result);
        Result = curResponse.LoadParsedUHTM(((Path $ "/") $ Prefix) $ "wrapper_group.inc");
    }
    I = 0;
    J0x586:

    if(I < activeModifiers.Length)
    {        
        Result $= activeModifiers[I].finalizeAugmentation(curResponse, Path);
        ++ I;
        goto J0x586;
    }
    activeModifiers.Length = 0;
    curResponse.Subst(substName, Result);
}

function string renderGroup(SettingsGroup Group)
{
    local string Result, Entry;
    local int I, J;
    local Engine.Settings.EPropertyValueMappingType mtype;
    local SettingRendererState renderState;

    renderState = new Class'SettingRendererState';
    renderState.WebResponse = curResponse;
    renderState.Path = Path;
    I = 0;
    J0x73:

    if(I < Group.Settings.Length)
    {
        renderState.Reset();
        if(Group.Settings[I].isLocalized)
        {
            Entry = renderLocalizedSetting(curSettings.LocalizedSettingsMappings[Group.Settings[I].Idx].Id, renderState);            
        }
        else
        {
            J = Group.Settings[I].Idx;
            curSettings.GetPropertyMappingType(curSettings.PropertyMappings[J].Id, mtype);
            renderState.MappingType = mtype;
            defaultSubst(curSettings.PropertyMappings[J].Id, renderState);
            switch(mtype)
            {
                case 1:
                    Entry = renderPredefinedValues(curSettings.PropertyMappings[J].Id, J, renderState);
                    break;
                case 2:
                    Entry = renderRanged(curSettings.PropertyMappings[J].Id, renderState);
                    break;
                case 3:
                    Entry = renderIdMapped(curSettings.PropertyMappings[J].Id, J, renderState);
                    break;
                default:
                    Entry = renderRaw(curSettings.PropertyMappings[J].Id, J, renderState);
                    break;
            }
        }
        if((Len(Entry) > 0) && renderState.bVisible)
        {
            curResponse.Subst("setting.html", Entry);            
            Result $= curResponse.LoadParsedUHTM(((Path $ "/") $ Prefix) $ "entry.inc");
        }
        ++ I;
        goto J0x73;
    }
    return Result;
}

function string getLocalizedSettingText(int SettingId)
{
    local string Val, res, elm;
    local int I;

    Val = curSettings.GetStringSettingColumnHeader(SettingId);
    if(Len(Val) > 0)
    {
        return Val;
    }
    Val = string(curSettings.GetStringSettingName(SettingId));
    res = "";
    I = 0;
    J0x98:

    if(I < Len(Val))
    {
        elm = Mid(Val, I, 1);
        if(Caps(elm) == elm)
        {
            elm = " " $ elm;            
        }
        else
        {
            if(((I == 0) && Locs(elm) == elm) && elm == "b")
            {
                goto J0x162;
            }
        }
        res = res $ elm;
        J0x162:

        ++ I;
        goto J0x98;
    }
    return res;
}

function string renderLocalizedSetting(int SettingId, SettingRendererState renderState)
{
    local name propName;
    local string Options;
    local array<IdToStringMapping> Values;
    local int selectedValue, I;

    propName = curSettings.GetStringSettingName(SettingId);
    renderState.settingType = "localizedSetting";
    renderState.SettingId = SettingId;
    renderState.SettingName = propName;
    renderState.formName = namePrefix $ string(propName);
    renderState.Label = getLocalizedSettingText(SettingId);
    renderState.ToolTip = Localize(string(curSettings.Class.Name) $ " Tooltips", string(propName), string(curSettings.Class.GetPackageName()));
    curSettings.GetStringSettingValue(SettingId, selectedValue);
    curSettings.GetStringSettingValueNames(SettingId, Values);
    Options = "";
    if(Values.Length >= minOptionListSize)
    {
        I = 0;
        J0x257:

        if(I < Values.Length)
        {
            renderState.Subst("setting.option.value", string(Values[I].Id));
            renderState.Subst("setting.option.text", Class'WebAdminUtils'.static.HTMLEscape(string(Values[I].Name)));
            if(Values[I].Id == selectedValue)
            {
                renderState.Subst("setting.option.selected", "selected=\"selected\"");                
            }
            else
            {
                renderState.Subst("setting.option.selected", "");
            }            
            Options $= (renderSetting(renderState, "option.inc", I, true));
            ++ I;
            goto J0x257;
        }
        renderState.Subst("setting.options", Options);
        return renderSetting(renderState, "select.inc");        
    }
    else
    {
        I = 0;
        J0x4BA:

        if(I < Values.Length)
        {
            renderState.Subst("setting.radio.index", string(I));
            renderState.Subst("setting.radio.value", string(Values[I].Id));
            renderState.Subst("setting.radio.text", Class'WebAdminUtils'.static.HTMLEscape(string(Values[I].Name)));
            if(Values[I].Id == selectedValue)
            {
                renderState.Subst("setting.radio.selected", "checked=\"checked\"");                
            }
            else
            {
                renderState.Subst("setting.radio.selected", "");
            }            
            Options $= (renderSetting(renderState, "radio.inc", I));
            ++ I;
            goto J0x4BA;
        }
        return Options;
    }
}

function string getSettingText(int SettingId)
{
    local string Val, res, elm;
    local int I;

    Val = curSettings.GetPropertyColumnHeader(SettingId);
    if(Len(Val) > 0)
    {
        return Val;
    }
    Val = string(curSettings.GetPropertyName(SettingId));
    res = "";
    I = 0;
    J0x98:

    if(I < Len(Val))
    {
        elm = Mid(Val, I, 1);
        if((Caps(elm) == elm) && string(int(elm)) != elm)
        {
            elm = " " $ elm;            
        }
        else
        {
            if(((I == 0) && Locs(elm) == elm) && elm == "b")
            {
                goto J0x17F;
            }
        }
        res = res $ elm;
        J0x17F:

        ++ I;
        goto J0x98;
    }
    return res;
}

function defaultSubst(int SettingId, SettingRendererState renderState)
{
    local name propName;

    propName = curSettings.GetPropertyName(SettingId);
    renderState.SettingId = SettingId;
    renderState.SettingName = propName;
    renderState.formName = namePrefix $ string(propName);
    renderState.Label = getSettingText(SettingId);
    renderState.ToolTip = Localize(string(curSettings.Class.Name) $ " Tooltips", string(propName), string(curSettings.Class.GetPackageName()));
    renderState.DataType = curSettings.GetPropertyType(SettingId);
}

function string renderPredefinedValues(int SettingId, int Idx, SettingRendererState renderState)
{
    local string Options, selectedValue, part1, part2, valDesc;

    local int I, J;
    local array<SettingsData> Values;
    local bool usedPreDef, Selected;
    local string svalue;
    local int ivalue;
    local float fvalue;

    renderState.settingType = "predefinedValues";
    selectedValue = curSettings.GetPropertyAsString(SettingId);
    Values = curSettings.PropertyMappings[Idx].PredefinedValues;
    usedPreDef = false;
    I = 0;
    J0xBF:

    if(I < Values.Length)
    {
        valDesc = "";
        J = 0;
        J0xEE:

        if(J < curSettings.PropertyMappings[Idx].ValueMappings.Length)
        {
            if(curSettings.PropertyMappings[Idx].ValueMappings[J].Id == I)
            {
                valDesc = string(curSettings.PropertyMappings[Idx].ValueMappings[J].Name);
            }
            ++ J;
            goto J0xEE;
        }
        switch(Values[I].Type)
        {
            case 1:
            case 2:
                ivalue = curSettings.GetSettingsDataInt(Values[I]);
                renderState.Subst("setting.option.value", string(ivalue));
                if(Len(valDesc) == 0)
                {
                    renderState.Subst("setting.option.text", string(ivalue));                    
                }
                else
                {
                    renderState.Subst("setting.option.text", valDesc);
                }
                Selected = ivalue == int(selectedValue);
                break;
            case 3:
            case 5:
                fvalue = curSettings.GetFloatPredefinedValues(curSettings.PropertyMappings[Idx].Id, I);
                renderState.Subst("setting.option.value", string(fvalue));
                if(Len(valDesc) == 0)
                {
                    renderState.Subst("setting.option.text", string(fvalue));                    
                }
                else
                {
                    renderState.Subst("setting.option.text", valDesc);
                }
                Selected = fvalue ~= float(selectedValue);
                break;
            case 4:
                svalue = curSettings.GetStringPredefinedValues(curSettings.PropertyMappings[Idx].Id, I);
                renderState.Subst("setting.option.value", Class'WebAdminUtils'.static.HTMLEscape(svalue));
                if(Len(valDesc) == 0)
                {
                    renderState.Subst("setting.option.text", Class'WebAdminUtils'.static.HTMLEscape(svalue));                    
                }
                else
                {
                    renderState.Subst("setting.option.text", valDesc);
                }
                Selected = svalue ~= selectedValue;
                break;
            default:
                LogInternal((("Unsupported data type " $ string(Values[I].Type)) $ " for setting id ") $ string(SettingId), 'webadmin');
                return "";
                break;
        }
        if(Selected)
        {
            usedPreDef = true;
            renderState.Subst("setting.option.selected", "selected=\"selected\"");            
        }
        else
        {
            renderState.Subst("setting.option.selected", "");
        }        
        Options $= (renderSetting(renderState, "option.inc", I, true));
        ++ I;
        goto J0xBF;
    }
    curResponse.Subst("setting.options", Options);
    if(!usedPreDef)
    {
        renderState.formName = (namePrefix $ string(curSettings.GetPropertyName(SettingId))) $ "_pre";
    }
    part1 = renderSetting(renderState, "select.inc");
    if(usedPreDef)
    {
        renderState.formName = (namePrefix $ string(curSettings.GetPropertyName(SettingId))) $ "_raw";        
    }
    else
    {
        renderState.formName = namePrefix $ string(curSettings.GetPropertyName(SettingId));
    }
    part2 = renderRaw(SettingId, Idx, renderState);
    renderState.Subst("multisetting.predef", part1);
    renderState.Subst("multisetting.raw", part2);
    renderState.formName = namePrefix $ string(curSettings.GetPropertyName(SettingId));
    renderState.settingType = "predefinedValuesContainer";
    renderState.Subst("multisetting.predef.class", ((usedPreDef) ? "" : "settingsraw"));
    renderState.Subst("multisetting.rawval.class", ((usedPreDef) ? "settingsraw" : ""));
    return renderSetting(renderState, "multisetting.inc");
}

function string renderRanged(int SettingId, SettingRendererState renderState)
{
    local float Value, Min, Max, Incr;
    local byte asInt;

    renderState.settingType = "ranged";
    curSettings.GetRangedPropertyValue(SettingId, Value);
    curSettings.GetPropertyRange(SettingId, Min, Max, Incr, asInt);
    if(asInt != 1)
    {
        renderState.Subst("setting.value", string(Value));
        renderState.Subst("setting.minval", string(Min));
        renderState.Subst("setting.maxval", string(Max));
        renderState.Subst("setting.increment", string(Incr));
        renderState.Subst("setting.asint", "false");        
    }
    else
    {
        renderState.Subst("setting.value", string(int(Value)));
        renderState.Subst("setting.minval", string(int(Min)));
        renderState.Subst("setting.maxval", string(int(Max)));
        renderState.Subst("setting.increment", string(int(Incr)));
        renderState.Subst("setting.asint", "true");
    }
    return renderSetting(renderState, "ranged.inc");
}

function string renderIdMapped(int SettingId, int Idx, SettingRendererState renderState)
{
    local string Options;
    local array<IdToStringMapping> Values;
    local int selectedValue, I;

    renderState.settingType = "idMapped";
    curSettings.GetIntProperty(SettingId, selectedValue);
    Values = curSettings.PropertyMappings[Idx].ValueMappings;
    if(Values.Length >= minOptionListSize)
    {
        I = 0;
        J0xC2:

        if(I < Values.Length)
        {
            renderState.Subst("setting.option.value", string(Values[I].Id));
            renderState.Subst("setting.option.text", Class'WebAdminUtils'.static.HTMLEscape(string(Values[I].Name)));
            if(Values[I].Id == selectedValue)
            {
                renderState.Subst("setting.option.selected", "selected=\"selected\"");                
            }
            else
            {
                renderState.Subst("setting.option.selected", "");
            }            
            Options $= (renderSetting(renderState, "option.inc", I, true));
            ++ I;
            goto J0xC2;
        }
        renderState.Subst("setting.options", Options);
        return renderSetting(renderState, "select.inc");        
    }
    else
    {
        I = 0;
        J0x325:

        if(I < Values.Length)
        {
            renderState.Subst("setting.radio.index", string(I));
            renderState.Subst("setting.radio.value", string(Values[I].Id));
            renderState.Subst("setting.radio.text", Class'WebAdminUtils'.static.HTMLEscape(string(Values[I].Name)));
            if(Values[I].Id == selectedValue)
            {
                renderState.Subst("setting.radio.selected", "checked=\"checked\"");                
            }
            else
            {
                renderState.Subst("setting.radio.selected", "");
            }            
            Options $= (renderSetting(renderState, "radio.inc", I));
            ++ I;
            goto J0x325;
        }
        return Options;
    }
}

function string renderRaw(int SettingId, int Idx, SettingRendererState renderState)
{
    local float Min, Max, Incr;

    renderState.settingType = "raw";
    renderState.Subst("setting.value", Class'WebAdminUtils'.static.HTMLEscape(curSettings.GetPropertyAsString(SettingId)));
    Min = curSettings.PropertyMappings[Idx].MinVal;
    Max = curSettings.PropertyMappings[Idx].MaxVal;
    Incr = curSettings.PropertyMappings[Idx].RangeIncrement;
    switch(curSettings.GetPropertyType(SettingId))
    {
        case 0:
            return "";
        case 1:
        case 2:
            if(Max != float(0))
            {
                renderState.Subst("setting.maxval", string(int(Max)));
                renderState.Subst("setting.minval", string(int(Min)));                
            }
            else
            {
                renderState.Subst("setting.maxval", "Number.NaN");
                renderState.Subst("setting.minval", "Number.NaN");
            }
            if(Incr > float(0))
            {
                renderState.Subst("setting.increment", string(int(Incr)));
            }
            renderState.Subst("setting.asint", "true");
            return renderSetting(renderState, "int.inc");
        case 3:
        case 5:
            if(Max != float(0))
            {
                renderState.Subst("setting.maxval", string(Max));
                renderState.Subst("setting.minval", string(Min));                
            }
            else
            {
                renderState.Subst("setting.maxval", "Number.NaN");
                renderState.Subst("setting.minval", "Number.NaN");
            }
            if(Incr > float(0))
            {
                renderState.Subst("setting.increment", string(Incr));
            }
            renderState.Subst("setting.asint", "false");
            return renderSetting(renderState, "float.inc");
        default:
            if(Max != float(0))
            {
                renderState.Subst("setting.maxval", string(Max));
                renderState.Subst("setting.minval", string(Min));                
            }
            else
            {
                renderState.Subst("setting.maxval", "Number.NaN");
                renderState.Subst("setting.minval", "Number.NaN");
            }
            if((Max > float(0)) && Max > Min)
            {
                renderState.Subst("setting.maxlength", string(int(Max)));                
            }
            else
            {
                renderState.Subst("setting.maxlength", "");
            }
            if(Max > float(256))
            {
                return renderSetting(renderState, "textarea.inc");                
            }
            else
            {
                return renderSetting(renderState, "string.inc");
            }
            break;
    }
}

function string renderSetting(SettingRendererState renderState, string Filename, optional int Index, optional bool inContainer)
{
    local int I;

    Index = -1;    
    I = 0;
    J0x15:

    if(I < activeModifiers.Length)
    {
        activeModifiers[I].augmentSetting(renderState, Index, inContainer);
        ++ I;
        goto J0x15;
    }
    I = 0;
    J0x8C:

    if(I < renderState.substitutions.Length)
    {
        curResponse.Subst(renderState.substitutions[I].Key, renderState.substitutions[I].Value);
        ++ I;
        goto J0x8C;
    }
    curResponse.Subst("setting.type", renderState.settingType);
    curResponse.Subst("setting.id", string(renderState.SettingId));
    curResponse.Subst("setting.name", string(renderState.SettingName));
    curResponse.Subst("setting.formname", renderState.formName);
    curResponse.Subst("setting.text", Class'WebAdminUtils'.static.HTMLEscape(renderState.Label));
    curResponse.Subst("setting.tooltip", Class'WebAdminUtils'.static.HTMLEscape(renderState.ToolTip));
    curResponse.Subst("setting.enabled", ((renderState.bEnabled) ? "" : "disabled=\"disabled\""));
    curResponse.Subst("setting.augmented", renderState.extra);
    curResponse.Subst("setting.css", renderState.cssClass);
    return curResponse.LoadParsedUHTM(((Path $ "/") $ Prefix) $ Filename);
}

defaultproperties
{
    minOptionListSize=4
}