/*******************************************************************************
 * McpUserManagerBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class McpUserManagerBase extends McpServiceBase
    abstract
    config(Engine);

struct McpUserStatus
{
    var string McpId;
    var string SecretKey;
    var string Ticket;
    var string UDID;
    var string RegisteredDate;
    var string LastActiveDate;
    var int DaysInactive;
    var bool bIsBanned;

    structdefaultproperties
    {
        McpId=""
        SecretKey=""
        Ticket=""
        UDID=""
        RegisteredDate=""
        LastActiveDate=""
        DaysInactive=0
        bIsBanned=false
    }
};

var config string McpUserManagerClassName;
var delegate<OnRegisterUserComplete> __OnRegisterUserComplete__Delegate;
var delegate<OnAuthenticateUserComplete> __OnAuthenticateUserComplete__Delegate;
var delegate<OnQueryUsersComplete> __OnQueryUsersComplete__Delegate;
var delegate<OnDeleteUserComplete> __OnDeleteUserComplete__Delegate;

static final function McpUserManagerBase CreateInstance()
{
    local class<McpUserManagerBase> McpUserManagerBaseClass;
    local McpUserManagerBase NewInstance;

    McpUserManagerBaseClass = class<McpUserManagerBase>(DynamicLoadObject(default.McpUserManagerClassName, Class'Class'));
    if(McpUserManagerBaseClass != none)
    {
        NewInstance = new McpUserManagerBaseClass;
        NewInstance.Init();
    }
    return NewInstance;
}

function RegisterUserGenerated();

function RegisterUserFacebook(string FacebookId, string FacebookAuthToken);

delegate OnRegisterUserComplete(string McpId, bool bWasSuccessful, string Error);

function AuthenticateUserFacebook(string FacebookId, string FacebookToken, string UDID);

function AuthenticateUserMcp(string McpId, string ClientSecret, string UDID);

delegate OnAuthenticateUserComplete(string McpId, string Token, bool bWasSuccessful, string Error);

function QueryUser(string McpId, optional bool bShouldUpdateLastActive);

function QueryUsers(const out array<string> McpIds);

delegate OnQueryUsersComplete(bool bWasSuccessful, string Error);

function GetUsers(out array<McpUserStatus> Users);

function bool GetUser(string McpId, out McpUserStatus User);

function DeleteUser(string McpId);

delegate OnDeleteUserComplete(bool bWasSuccessful, string Error);

defaultproperties
{
    McpUserManagerClassName="IpDrv.McpUserManager"
}