/*******************************************************************************
 * TcpLink generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class TcpLink extends InternetLink
    transient
    native
    hidecategories(Navigation,Movement,Collision);

enum ELinkState
{
    STATE_Initialized,
    STATE_Ready,
    STATE_Listening,
    STATE_Connecting,
    STATE_Connected,
    STATE_ListenClosePending,
    STATE_ConnectClosePending,
    STATE_ListenClosing,
    STATE_ConnectClosing,
    STATE_MAX
};

var TcpLink.ELinkState LinkState;
var IpAddr RemoteAddr;
var class<TcpLink> AcceptClass;
var const array<byte> SendFIFO;
var const string RecvBuf;

// Export UTcpLink::execBindPort(FFrame&, void* const)
native function int BindPort(optional int PortNum, optional bool bUseNextAvailable);

// Export UTcpLink::execListen(FFrame&, void* const)
native function bool Listen();

// Export UTcpLink::execOpen(FFrame&, void* const)
native function bool Open(IpAddr Addr);

// Export UTcpLink::execClose(FFrame&, void* const)
native function bool Close();

// Export UTcpLink::execIsConnected(FFrame&, void* const)
native function bool IsConnected();

// Export UTcpLink::execSendText(FFrame&, void* const)
native function int SendText(coerce string Str);

// Export UTcpLink::execSendBinary(FFrame&, void* const)
native function int SendBinary(int Count, byte B[255]);

// Export UTcpLink::execReadText(FFrame&, void* const)
native function int ReadText(out string Str);

// Export UTcpLink::execReadBinary(FFrame&, void* const)
native function int ReadBinary(int Count, out byte B[255]);

event Accepted();

event Opened();

event Closed();

event ReceivedText(string Text);

event ReceivedLine(string Line);

event ReceivedBinary(int Count, byte B[255]);

defaultproperties
{
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__TcpLink.Sprite'
    Components(0)=Sprite
    bAlwaysTick=true
}