/*******************************************************************************
 * McpUserManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class McpUserManager extends McpUserManagerBase
    config(Engine);

struct UserRequest
{
    var string McpId;
    var HttpRequestInterface Request;

    structdefaultproperties
    {
        McpId=""
        Request=none
    }
};

var array<McpUserStatus> UserStatuses;
var config string RegisterUserMcpUrl;
var config string RegisterUserFacebookUrl;
var config string QueryUserUrl;
var config string QueryUsersUrl;
var config string DeleteUserUrl;
var config string FacebookAuthUrl;
var config string McpAuthUrl;
var array<HttpRequestInterface> RegisterUserRequests;
var array<HttpRequestInterface> QueryUsersRequests;
var array<UserRequest> DeleteUserRequests;
var array<HttpRequestInterface> AuthUserRequests;

function RegisterUserGenerated()
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;

    Request = Class'HttpFactory'.static.CreateRequest();
    if(Request != none)
    {
        URL = ((GetBaseURL()) $ RegisterUserMcpUrl) $ (GetAppAccessURL());
        Request.SetURL(URL);
        Request.SetVerb("POST");
        Request.__OnProcessRequestComplete__Delegate = OnRegisterUserRequestComplete;
        AddAt = RegisterUserRequests.Length;
        RegisterUserRequests.Length = AddAt + 1;
        RegisterUserRequests[AddAt] = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start RegisterUser web request for URL(" $ URL) $ ")");
        }
        LogInternal("URL is " $ URL);
    }
}

function RegisterUserFacebook(string FacebookId, string FacebookAuthToken)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;

    Request = Class'HttpFactory'.static.CreateRequest();
    if(Request != none)
    {
        URL = ((((((GetBaseURL()) $ RegisterUserFacebookUrl) $ (GetAppAccessURL())) $ "&facebookId=") $ FacebookId) $ "&facebookToken=") $ FacebookAuthToken;
        Request.SetURL(URL);
        Request.SetVerb("POST");
        Request.__OnProcessRequestComplete__Delegate = OnRegisterUserRequestComplete;
        AddAt = RegisterUserRequests.Length;
        RegisterUserRequests.Length = AddAt + 1;
        RegisterUserRequests[AddAt] = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start RegisterUserFacebook web request for URL(" $ URL) $ ")");
        }
        LogInternal("URL is " $ URL);
    }
}

protected function int ParseUser(string JsonPayload)
{
    local JsonObject ParsedJson;
    local int UserIndex;
    local string McpId;

    ParsedJson = Class'JsonObject'.static.DecodeJson(JsonPayload);
    if(ParsedJson.HasKey("unique_user_id"))
    {
        McpId = ParsedJson.GetStringValue("unique_user_id");
        UserIndex = UserStatuses.Find('McpId', McpId;
        if(UserIndex == -1)
        {
            UserIndex = UserStatuses.Length;
            UserStatuses.Length = UserIndex + 1;
            UserStatuses[UserIndex].McpId = McpId;
        }
        if(ParsedJson.HasKey("client_secret"))
        {
            UserStatuses[UserIndex].SecretKey = ParsedJson.GetStringValue("client_secret");
        }
        if(ParsedJson.HasKey("ticket"))
        {
            UserStatuses[UserIndex].Ticket = ParsedJson.GetStringValue("ticket");
        }
        if(ParsedJson.HasKey("udid"))
        {
            UserStatuses[UserIndex].UDID = ParsedJson.GetStringValue("udid");
        }
        UserStatuses[UserIndex].RegisteredDate = ParsedJson.GetStringValue("registered_date");
        UserStatuses[UserIndex].LastActiveDate = ParsedJson.GetStringValue("last_active_date");
        UserStatuses[UserIndex].DaysInactive = ParsedJson.GetIntValue("days_inactive");
        UserStatuses[UserIndex].bIsBanned = ParsedJson.GetBoolValue("is_banned");        
    }
    else
    {
        UserIndex = -1;
    }
    return UserIndex;
}

function OnRegisterUserRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode, UserIndex;
    local string ResponseString, McpId;

    Index = RegisterUserRequests.Find(Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        ResponseString = Response.GetContentAsString();
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            UserIndex = ParseUser(ResponseString);
            if(UserIndex == -1)
            {
                bWasSuccessful = false;
            }
        }
        McpId = ((bWasSuccessful) ? UserStatuses[UserIndex].McpId : "");
        OnRegisterUserComplete(McpId, bWasSuccessful, ResponseString);
        LogInternal(((((("Register user McpId(" $ McpId) $ ") was successful ") $ string(bWasSuccessful)) $ " with ResponseCode(") $ string(ResponseCode)) $ ")");
        RegisterUserRequests.Remove(Index, 1;
    }
}

function AuthenticateUserFacebook(string FacebookId, string FacebookToken, string UDID)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;

    Request = Class'HttpFactory'.static.CreateRequest();
    if(Request != none)
    {
        URL = ((((((((GetBaseURL()) $ FacebookAuthUrl) $ (GetAppAccessURL())) $ "&facebookId=") $ FacebookId) $ "&facebookToken=") $ FacebookToken) $ "&udid=") $ UDID;
        Request.SetURL(URL);
        Request.SetVerb("POST");
        Request.__OnProcessRequestComplete__Delegate = OnAuthenticateUserRequestComplete;
        AddAt = AuthUserRequests.Length;
        AuthUserRequests.Length = AddAt + 1;
        AuthUserRequests[AddAt] = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start AuthenticateUserFacebook web request for URL(" $ URL) $ ")");
        }
    }
}

function AuthenticateUserMcp(string McpId, string ClientSecret, string UDID)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;

    Request = Class'HttpFactory'.static.CreateRequest();
    if(Request != none)
    {
        URL = ((((((((GetBaseURL()) $ McpAuthUrl) $ (GetAppAccessURL())) $ "&uniqueUserId=") $ McpId) $ "&clientSecret=") $ ClientSecret) $ "&udid=") $ UDID;
        LogInternal("Started Authenticate, url: " $ URL);
        Request.SetURL(URL);
        Request.SetVerb("POST");
        Request.__OnProcessRequestComplete__Delegate = OnAuthenticateUserRequestComplete;
        AddAt = AuthUserRequests.Length;
        AuthUserRequests.Length = AddAt + 1;
        AuthUserRequests[AddAt] = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start AuthenticateUserMCP web request for URL(" $ URL) $ ")");
        }
    }
}

function OnAuthenticateUserRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode, UserIndex;
    local string ResponseString, McpId, Ticket;

    Index = AuthUserRequests.Find(Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        ResponseString = Response.GetContentAsString();
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            UserIndex = ParseUser(ResponseString);
            if(UserIndex == -1)
            {
                bWasSuccessful = false;
            }
        }
        if(bWasSuccessful)
        {
            McpId = UserStatuses[UserIndex].McpId;
            Ticket = UserStatuses[UserIndex].Ticket;
        }
        OnAuthenticateUserComplete(McpId, Ticket, bWasSuccessful, ResponseString);
        LogInternal(((((("Authenticate user was successful " $ string(bWasSuccessful)) $ " with ResponseCode(") $ string(ResponseCode)) $ ") and Ticket (") $ Ticket) $ ")");
        AuthUserRequests.Remove(Index, 1;
    }
}

function QueryUser(string McpId, optional bool bShouldUpdateLastActive)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;

    Request = Class'HttpFactory'.static.CreateRequest();
    if((Request != none) && McpId != "")
    {
        URL = ((((((GetBaseURL()) $ QueryUserUrl) $ (GetAppAccessURL())) $ "&uniqueUserId=") $ McpId) $ "&updateLastActive=") $ string(bShouldUpdateLastActive);
        Request.SetURL(URL);
        Request.SetVerb("GET");
        Request.__OnProcessRequestComplete__Delegate = OnQueryUserRequestComplete;
        AddAt = QueryUsersRequests.Length;
        QueryUsersRequests.Length = AddAt + 1;
        QueryUsersRequests[AddAt] = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start QueryUser web request for URL(" $ URL) $ ")");
        }
    }
}

function OnQueryUserRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode, UserIndex;
    local string ResponseString;

    Index = QueryUsersRequests.Find(Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        ResponseString = Response.GetContentAsString();
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            UserIndex = ParseUser(ResponseString);
            if(UserIndex == -1)
            {
                bWasSuccessful = false;
            }
        }
        OnQueryUsersComplete(bWasSuccessful, ResponseString);
        LogInternal(((("Query user was successful " $ string(bWasSuccessful)) $ " with ResponseCode(") $ string(ResponseCode)) $ ")");
        QueryUsersRequests.Remove(Index, 1;
    }
}

function QueryUsers(const out array<string> McpIds)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;
    local string JsonPayload;
    local int Index;

    Request = Class'HttpFactory'.static.CreateRequest();
    if(Request != none)
    {
        URL = ((GetBaseURL()) $ QueryUsersUrl) $ (GetAppAccessURL());
        JsonPayload = "[ ";
        Index = 0;
        J0x7C:

        if(Index < McpIds.Length)
        {            
            JsonPayload $= (("\"" $ McpIds[Index]) $ "\"");
            if((Index + 1) < McpIds.Length)
            {                
                JsonPayload $= ",";
            }
            ++ Index;
            goto J0x7C;
        }        
        JsonPayload $= " ]";
        Request.SetURL(URL);
        Request.SetContentAsString(JsonPayload);
        Request.SetVerb("POST");
        Request.SetHeader("Content-Type", "multipart/form-data");
        Request.__OnProcessRequestComplete__Delegate = OnQueryUsersRequestComplete;
        AddAt = QueryUsersRequests.Length;
        QueryUsersRequests.Length = AddAt + 1;
        QueryUsersRequests[AddAt] = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start QueryUsers web request for URL(" $ URL) $ ")");
        }
    }
}

protected function ParseUsers(string JsonPayload)
{
    local JsonObject ParsedJson;
    local int JsonIndex, UserIndex;
    local string McpId;

    ParsedJson = Class'JsonObject'.static.DecodeJson(JsonPayload);
    JsonIndex = 0;
    J0x3D:

    if(JsonIndex < ParsedJson.ObjectArray.Length)
    {
        if(ParsedJson.HasKey("unique_user_id"))
        {
            McpId = ParsedJson.GetStringValue("unique_user_id");
            UserIndex = UserStatuses.Find('McpId', McpId;
            if(UserIndex == -1)
            {
                UserIndex = UserStatuses.Length;
                UserStatuses.Length = UserIndex + 1;
                UserStatuses[UserIndex].McpId = McpId;
            }
            if(ParsedJson.HasKey("client_secret"))
            {
                UserStatuses[UserIndex].SecretKey = ParsedJson.GetStringValue("client_secret");
            }
            if(ParsedJson.HasKey("ticket"))
            {
                UserStatuses[UserIndex].Ticket = ParsedJson.GetStringValue("ticket");
            }
            if(ParsedJson.HasKey("udid"))
            {
                UserStatuses[UserIndex].UDID = ParsedJson.GetStringValue("udid");
            }
            UserStatuses[UserIndex].RegisteredDate = ParsedJson.GetStringValue("registered_date");
            UserStatuses[UserIndex].LastActiveDate = ParsedJson.GetStringValue("last_active_date");
            UserStatuses[UserIndex].DaysInactive = ParsedJson.GetIntValue("days_inactive");
            UserStatuses[UserIndex].bIsBanned = ParsedJson.GetBoolValue("is_banned");
        }
        ++ JsonIndex;
        goto J0x3D;
    }
}

function OnQueryUsersRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode;
    local string ResponseString;

    Index = QueryUsersRequests.Find(Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        ResponseString = Response.GetContentAsString();
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ParseUsers(ResponseString);
        }
        OnQueryUsersComplete(bWasSuccessful, ResponseString);
        LogInternal(((("Query users was successful " $ string(bWasSuccessful)) $ " with ResponseCode(") $ string(ResponseCode)) $ ")");
        QueryUsersRequests.Remove(Index, 1;
    }
}

function GetUsers(out array<McpUserStatus> Users)
{
    Users = UserStatuses;
}

function bool GetUser(string McpId, out McpUserStatus User)
{
    local int UserIndex;

    UserIndex = UserStatuses.Find('McpId', McpId;
    if(UserIndex != -1)
    {
        User = UserStatuses[UserIndex];
        return true;
    }
    return false;
}

function DeleteUser(string McpId)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt;

    Request = Class'HttpFactory'.static.CreateRequest();
    if(Request != none)
    {
        URL = ((((GetBaseURL()) $ DeleteUserUrl) $ (GetAppAccessURL())) $ "&uniqueUserId=") $ McpId;
        Request.SetURL(URL);
        Request.SetVerb("DELETE");
        Request.__OnProcessRequestComplete__Delegate = OnDeleteUserRequestComplete;
        AddAt = DeleteUserRequests.Length;
        DeleteUserRequests.Length = AddAt + 1;
        DeleteUserRequests[AddAt].McpId = McpId;
        DeleteUserRequests[AddAt].Request = Request;
        if(!Request.ProcessRequest())
        {
            LogInternal(("Failed to start DeleteUser web request for URL(" $ URL) $ ")");
        }
        LogInternal("URL is " $ URL);
    }
}

function OnDeleteUserRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, UserIndex, ResponseCode;

    Index = DeleteUserRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            UserIndex = UserStatuses.Find('McpId', DeleteUserRequests[Index].McpId;
            if(UserIndex != -1)
            {
                UserStatuses.Remove(UserIndex, 1;
            }
        }
        OnDeleteUserComplete(bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((("Delete user for URL(" $ Request.GetURL()) $ ") successful ") $ string(bWasSuccessful)) $ " with ResponseCode(") $ string(ResponseCode)) $ ")");
        DeleteUserRequests.Remove(Index, 1;
    }
}

defaultproperties
{
    RegisterUserMcpUrl="/registerusermcp"
    RegisterUserFacebookUrl="/registeruserfacebook"
    QueryUserUrl="/userstatus"
    QueryUsersUrl="/usermultiplestatus"
    DeleteUserUrl="/deleteuser"
    FacebookAuthUrl="/authenticateuserfacebook"
    McpAuthUrl="/authenticateusermcp"
}