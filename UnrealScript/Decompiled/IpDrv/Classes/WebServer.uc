/*******************************************************************************
 * WebServer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WebServer extends TcpLink
    transient
    config(Web)
    hidecategories(Navigation,Movement,Collision);

var config string ServerName;
var config string Applications[10];
var config string ApplicationPaths[10];
var config bool bEnabled;
var config int ListenPort;
var config int MaxConnections;
var config int DefaultApplication;
var config int ExpirationSeconds;
var transient int CurrentListenPort;
var string ServerURL;
var WebApplication ApplicationObjects[10];
var int ConnectionCount;
var int ConnID;

function PostBeginPlay()
{
    local int I;
    local class<WebApplication> ApplicationClass;
    local IpAddr L;
    local string S;

    if((WorldInfo.NetMode == NM_Standalone) || WorldInfo.NetMode == NM_Client)
    {
        Destroy();
        return;
    }
    if(!bEnabled)
    {
        LogInternal("Webserver is not enabled.  Set bEnabled to True in Advanced Options.");
        Destroy();
        return;
    }
    super(Actor).PostBeginPlay();
    if(ServerName == "")
    {
        GetLocalIP(L);
        S = IpAddrToString(L);
        I = InStr(S, ":");
        if(I != -1)
        {
            S = Left(S, I);
        }
        ServerURL = "http://" $ S;        
    }
    else
    {
        ServerURL = "http://" $ ServerName;
    }
    CurrentListenPort = Class'GameEngine'.static.GetWebAdminPort();
    if(CurrentListenPort == 0)
    {
        CurrentListenPort = ListenPort;
    }
    if(CurrentListenPort != 80)
    {
        ServerURL = (ServerURL $ ":") $ string(CurrentListenPort);
    }
    if((BindPort(CurrentListenPort)) > 0)
    {
        if((Listen()) == true)
        {
            LogInternal((((((((("Web Server Created" @ ServerURL) @ "Port:") @ string(CurrentListenPort)) @ "MaxCon") @ string(MaxConnections)) @ "ExpirationSecs") @ string(ExpirationSeconds)) @ "Enabled") @ string(bEnabled));
            I = 0;
            J0x2C7:

            if(I < 10)
            {
                if(Applications[I] == "")
                {
                    goto J0x459;
                }
                ApplicationClass = class<WebApplication>(DynamicLoadObject(Applications[I], Class'Class'));
                if(ApplicationClass != none)
                {
                    ApplicationObjects[I] = new (none) ApplicationClass;
                    ApplicationObjects[I].WorldInfo = WorldInfo;
                    ApplicationObjects[I].WebServer = self;
                    ApplicationObjects[I].Path = ApplicationPaths[I];
                    ApplicationObjects[I].Init();                    
                }
                else
                {
                    LogInternal("Failed to load" @ Applications[I]);
                }
                ++ I;
                goto J0x2C7;
            }
            J0x459:

            return;            
        }
        else
        {
            LogInternal("Unable to setup server for listen");
        }        
    }
    else
    {
        LogInternal("Unable to bind webserver to a port");
    }
    Destroy();
}

event Destroyed()
{
    local int I;

    LogInternal("Destroying WebServer");
    I = 0;
    J0x24:

    if(I < 10)
    {
        if(ApplicationObjects[I] != none)
        {
            ApplicationObjects[I].CleanupApp();
        }
        ++ I;
        goto J0x24;
    }
    super(Actor).Destroyed();
}

event GainedChild(Actor C)
{
    super(Actor).GainedChild(C);
    ++ ConnectionCount;
    if(((MaxConnections > 0) && ConnectionCount > MaxConnections) && LinkState == 2)
    {
        LogInternal("WebServer: Too many connections - closing down Listen.");
        Close();
    }
}

event LostChild(Actor C)
{
    super(Actor).LostChild(C);
    -- ConnectionCount;
    if((ConnectionCount <= MaxConnections) && LinkState != 2)
    {
        LogInternal("WebServer: Listening again - connections have been closed.");
        Listen();
    }
}

function WebApplication GetApplication(string URI, out string SubURI)
{
    local int I, L;

    SubURI = "";
    I = 0;
    J0x17:

    if(I < 10)
    {
        if(ApplicationPaths[I] != "")
        {
            L = Len(ApplicationPaths[I]);
            if((Left(URI, L) ~= ApplicationPaths[I]) && (Len(URI) == L) || Mid(URI, L, 1) == "/")
            {
                SubURI = Mid(URI, L);
                return ApplicationObjects[I];
            }
        }
        ++ I;
        goto J0x17;
    }
    LogInternal("No application found to handle request" @ URI);
    return none;
}

defaultproperties
{
    Applications[0]="WebAdmin.KF2ServerAdmin"
    Applications[1]="WebAdmin.KF2ImageServer"
    ApplicationPaths[0]="/ServerAdmin"
    ApplicationPaths[1]="/images"
    ListenPort=8080
    MaxConnections=18
    ExpirationSeconds=86400
    AcceptClass=Class'WebConnection'
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__WebServer.Sprite'
    Components(0)=Sprite
}