/*******************************************************************************
 * PartyBeacon generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PartyBeacon extends Object
    native
    config(Engine);

enum EReservationPacketType
{
    RPT_UnknownPacketType,
    RPT_ClientReservationRequest,
    RPT_ClientReservationUpdateRequest,
    RPT_ClientCancellationRequest,
    RPT_HostReservationResponse,
    RPT_HostReservationCountUpdate,
    RPT_HostTravelRequest,
    RPT_HostIsReady,
    RPT_HostHasCancelled,
    RPT_Heartbeat,
    RPT_MAX
};

enum EPartyReservationResult
{
    PRR_GeneralError,
    PRR_PartyLimitReached,
    PRR_IncorrectPlayerCount,
    PRR_RequestTimedOut,
    PRR_ReservationDuplicate,
    PRR_ReservationNotFound,
    PRR_ReservationAccepted,
    PRR_ReservationDenied,
    PRR_MAX
};

struct native PlayerReservation
{
    var UniqueNetId NetId;
    var int Skill;
    var int XpLevel;
    var Double Mu;
    var Double Sigma;
    var float ElapsedSessionTime;

    structdefaultproperties
    {
        NetId=(Uid=none)
        Skill=0
        XpLevel=0
        Mu=none
        Sigma=none
        ElapsedSessionTime=0
    }
};

struct native PartyReservation
{
    var int TeamNum;
    var UniqueNetId PartyLeader;
    var array<PlayerReservation> PartyMembers;

    structdefaultproperties
    {
        TeamNum=0
        PartyLeader=(Uid=none)
        PartyMembers=none
    }
};

var private native const noexport Pointer VfTable_FTickableObject;
var config int PartyBeaconPort;
var native transient Pointer Socket;
var bool bIsInTick;
var bool bWantsDeferredDestroy;
var bool bShouldTick;
var config float HeartbeatTimeout;
var float ElapsedHeartbeatTime;
var name BeaconName;
var delegate<OnDestroyComplete> __OnDestroyComplete__Delegate;

// Export UPartyBeacon::execDestroyBeacon(FFrame&, void* const)
native event DestroyBeacon();

delegate OnDestroyComplete();

defaultproperties
{
    bShouldTick=true
}