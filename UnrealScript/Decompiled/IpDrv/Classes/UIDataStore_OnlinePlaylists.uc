/*******************************************************************************
 * UIDataStore_OnlinePlaylists generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataStore_OnlinePlaylists extends UIDataStore
    transient
    native(UIPrivate)
    config(Game)
    hidecategories(Object,UIRoot);

const RANKEDPROVIDERTAG = "PlaylistsRanked";
const UNRANKEDPROVIDERTAG = "PlaylistsUnranked";
const RECMODEPROVIDERTAG = "PlaylistsRecMode";
const PRIVATEPROVIDERTAG = "PlaylistsPrivate";

var config string ProviderClassName;
var transient class<UIResourceDataProvider> ProviderClass;
var const array<UIResourceDataProvider> RankedDataProviders;
var const array<UIResourceDataProvider> UnrankedDataProviders;
var const array<UIResourceDataProvider> RecModeDataProviders;
var const array<UIResourceDataProvider> PrivateDataProviders;
var OnlinePlaylistManager PlaylistMan;

event Init()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if((OnlineSub != none) && OnlineSub.Patcher != none)
    {
        PlaylistMan = OnlinePlaylistManager(OnlineSub.GetNamedInterface('PlaylistManager'));
    }
}

// Export UUIDataStore_OnlinePlaylists::execGetResourceProviders(FFrame&, void* const)
native final function bool GetResourceProviders(name ProviderTag, out array<UIResourceDataProvider> out_Providers);

// Export UUIDataStore_OnlinePlaylists::execGetPlaylistProvider(FFrame&, void* const)
native final function bool GetPlaylistProvider(name ProviderTag, int ProviderIndex, out UIResourceDataProvider out_Provider);

static function OnlinePlaylistProvider GetOnlinePlaylistProvider(name ProviderTag, int PlaylistId, optional out int ProviderIndex)
{
    local UIDataStore_OnlinePlaylists PlaylistDS;
    local array<UIResourceDataProvider> Providers;
    local OnlinePlaylistProvider OPP;

    ProviderIndex = -1;
    PlaylistDS = UIDataStore_OnlinePlaylists(Class'UIRoot'.static.StaticResolveDataStore(Class'UIDataStore_OnlinePlaylists'.default.Tag));
    if(PlaylistDS != none)
    {
        PlaylistDS.GetResourceProviders(ProviderTag, Providers);
        ProviderIndex = 0;
        J0xAC:

        if(ProviderIndex < Providers.Length)
        {
            OPP = OnlinePlaylistProvider(Providers[ProviderIndex]);
            if(OPP.PlaylistId == PlaylistId)
            {
                return OPP;
            }
            ++ ProviderIndex;
            goto J0xAC;
        }
    }
    return none;
}

event int GetMatchTypeForPlaylistId(int PlaylistId)
{
    if(PlaylistMan != none)
    {
        return PlaylistMan.GetMatchType(PlaylistId);
    }
    return -1;
}

defaultproperties
{
    Tag=OnlinePlaylists
}