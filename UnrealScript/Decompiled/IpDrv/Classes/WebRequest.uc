/*******************************************************************************
 * WebRequest generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WebRequest extends Object
    native;

enum ERequestType
{
    Request_GET,
    Request_POST,
    Request_MAX
};

var string RemoteAddr;
var string URI;
var string UserName;
var string Password;
var int ContentLength;
var string ContentType;
var WebRequest.ERequestType RequestType;
var private native const Map_Mirror HeaderMap;
var private native const Map_Mirror VariableMap;

// Export UWebRequest::execDecodeBase64(FFrame&, void* const)
native final function string DecodeBase64(string Encoded);

// Export UWebRequest::execEncodeBase64(FFrame&, void* const)
native final function string EncodeBase64(string Decoded);

// Export UWebRequest::execAddHeader(FFrame&, void* const)
native final function AddHeader(string HeaderName, coerce string Value);

// Export UWebRequest::execGetHeader(FFrame&, void* const)
native final function string GetHeader(string HeaderName, optional string DefaultValue);

// Export UWebRequest::execGetHeaders(FFrame&, void* const)
native final function GetHeaders(out array<string> Headers);

// Export UWebRequest::execAddVariable(FFrame&, void* const)
native final function AddVariable(string VariableName, coerce string Value);

// Export UWebRequest::execGetVariable(FFrame&, void* const)
native final function string GetVariable(string VariableName, optional string DefaultValue);

// Export UWebRequest::execGetVariableCount(FFrame&, void* const)
native final function int GetVariableCount(string VariableName);

// Export UWebRequest::execGetVariableNumber(FFrame&, void* const)
native final function string GetVariableNumber(string VariableName, int Number, optional string DefaultValue);

// Export UWebRequest::execGetVariables(FFrame&, void* const)
native final function GetVariables(out array<string> varNames);

// Export UWebRequest::execDump(FFrame&, void* const)
native final function Dump();

function ProcessHeaderString(string S)
{
    local int I;

    if(Left(S, 21) ~= "Authorization: Basic ")
    {
        S = DecodeBase64(Mid(S, 21));
        I = InStr(S, ":");
        if(I != -1)
        {
            UserName = Left(S, I);
            Password = Mid(S, I + 1);
        }        
    }
    else
    {
        if(Left(S, 16) ~= "Content-Length: ")
        {
            ContentLength = int(Mid(S, 16, 64));            
        }
        else
        {
            if(Left(S, 14) ~= "Content-Type: ")
            {
                ContentType = Mid(S, 14);
            }
        }
    }
    I = InStr(S, ":");
    if(I > -1)
    {
        AddHeader(Left(S, I), Mid(S, I + 2));
    }
}

function DecodeFormData(string Data)
{
    local string Token[2], ch;
    local int I, H1, H2, Limit, T;

    T = 0;
    I = 0;
    J0x16:

    if(I < Len(Data))
    {
        if((Limit > Class'WebConnection'.default.MaxValueLength) || I > Class'WebConnection'.default.MaxLineLength)
        {
            goto J0x2E0;
        }
        ch = Mid(Data, I, 1);
        switch(ch)
        {
            case "+":                
                Token[T] $= " ";
                ++ Limit;
                break;
            case "&":
            case "?":
                if(Token[0] != "")
                {
                    AddVariable(Token[0], Token[1]);
                }
                Token[0] = "";
                Token[1] = "";
                T = 0;
                Limit = 0;
                break;
            case "=":
                if(T == 0)
                {
                    Limit = 0;
                    T = 1;                    
                }
                else
                {                    
                    Token[1] $= "=";
                    ++ Limit;
                }
                break;
            case "%":
                H1 = GetHexDigit(Mid(Data, ++ I, 1));
                if(H1 != -1)
                {
                    ++ Limit;
                    H1 *= float(16);
                    H2 = GetHexDigit(Mid(Data, ++ I, 1));
                    if(H2 != -1)
                    {                        
                        Token[T] $= Chr(H1 + H2);
                    }
                }
                ++ Limit;
                break;
            default:                
                Token[T] $= ch;
                ++ Limit;
                break;
        }
        ++ I;
        goto J0x16;
    }
    J0x2E0:

    if(Token[0] != "")
    {
        AddVariable(Token[0], Token[1]);
    }
}

function int GetHexDigit(string D)
{
    switch(Caps(D))
    {
        case "0":
            return 0;
        case "1":
            return 1;
        case "2":
            return 2;
        case "3":
            return 3;
        case "4":
            return 4;
        case "5":
            return 5;
        case "6":
            return 6;
        case "7":
            return 7;
        case "8":
            return 8;
        case "9":
            return 9;
        case "A":
            return 10;
        case "B":
            return 11;
        case "C":
            return 12;
        case "D":
            return 13;
        case "E":
            return 14;
        case "F":
            return 15;
        default:
            return -1;
            break;
    }
}
