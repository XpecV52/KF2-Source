/*******************************************************************************
 * McpManagedValueManagerBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class McpManagedValueManagerBase extends McpServiceBase
    abstract
    config(Engine);

struct ManagedValue
{
    var name ValueId;
    var int Value;

    structdefaultproperties
    {
        ValueId=None
        Value=0
    }
};

struct ManagedValueSaveSlot
{
    var string OwningMcpId;
    var string SaveSlot;
    var array<ManagedValue> Values;

    structdefaultproperties
    {
        OwningMcpId=""
        SaveSlot=""
        Values=none
    }
};

var config string McpManagedValueManagerClassName;
var delegate<OnCreateSaveSlotComplete> __OnCreateSaveSlotComplete__Delegate;
var delegate<OnReadSaveSlotComplete> __OnReadSaveSlotComplete__Delegate;
var delegate<OnUpdateValueComplete> __OnUpdateValueComplete__Delegate;
var delegate<OnDeleteValueComplete> __OnDeleteValueComplete__Delegate;

static final function McpManagedValueManagerBase CreateInstance()
{
    local class<McpManagedValueManagerBase> McpManagedValueManagerBaseClass;
    local McpManagedValueManagerBase NewInstance;

    McpManagedValueManagerBaseClass = class<McpManagedValueManagerBase>(DynamicLoadObject(default.McpManagedValueManagerClassName, Class'Class'));
    if(McpManagedValueManagerBaseClass != none)
    {
        NewInstance = new McpManagedValueManagerBaseClass;
        NewInstance.Init();
    }
    return NewInstance;
}

function CreateSaveSlot(string McpId, string SaveSlot);

delegate OnCreateSaveSlotComplete(string McpId, string SaveSlot, bool bWasSuccessful, string Error);

function ReadSaveSlot(string McpId, string SaveSlot);

delegate OnReadSaveSlotComplete(string McpId, string SaveSlot, bool bWasSuccessful, string Error);

function array<ManagedValue> GetValues(string McpId, string SaveSlot);

function int GetValue(string McpId, string SaveSlot, name ValueId);

function UpdateValue(string McpId, string SaveSlot, name ValueId, int Value);

delegate OnUpdateValueComplete(string McpId, string SaveSlot, name ValueId, int Value, bool bWasSuccessful, string Error);

function DeleteValue(string McpId, string SaveSlot, name ValueId);

delegate OnDeleteValueComplete(string McpId, string SaveSlot, name ValueId, bool bWasSuccessful, string Error);

defaultproperties
{
    McpManagedValueManagerClassName="IpDrv.McpManagedValueManager"
}