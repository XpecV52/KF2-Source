/*******************************************************************************
 * WebConnection generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class WebConnection extends TcpLink
    transient
    config(Web)
    hidecategories(Navigation,Movement,Collision);

var WebServer WebServer;
var string ReceivedData;
var WebRequest Request;
var WebResponse Response;
var WebApplication Application;
var bool bDelayCleanup;
var int RawBytesExpecting;
var config int MaxValueLength;
var config int MaxLineLength;
var int ConnID;

event Accepted()
{
    WebServer = WebServer(Owner);
    SetTimer(30, false);
    ConnID = ++ WebServer.ConnID;
}

event Closed()
{
    Destroy();
}

event Timer()
{
    bDelayCleanup = false;
    Cleanup();
}

event ReceivedText(string Text)
{
    local int I;
    local string S;

    ReceivedData $= Text;
    if(RawBytesExpecting > 0)
    {
        RawBytesExpecting -= Len(Text);
        CheckRawBytes();
        return;
    }
    if(Left(ReceivedData, 1) == Chr(10))
    {
        ReceivedData = Mid(ReceivedData, 1);
    }
    I = InStr(ReceivedData, Chr(13));
    J0x97:

    if(I != -1)
    {
        S = Left(ReceivedData, I);
        ++ I;
        if(Mid(ReceivedData, I, 1) == Chr(10))
        {
            ++ I;
        }
        ReceivedData = Mid(ReceivedData, I);
        ReceivedLine(S);
        if(LinkState != 4)
        {
            return;
        }
        if(RawBytesExpecting > 0)
        {
            CheckRawBytes();
            return;
        }
        I = InStr(ReceivedData, Chr(13));
        goto J0x97;
    }
}

function ReceivedLine(string S)
{
    if(S == "")
    {
        EndOfHeaders();        
    }
    else
    {
        if(Left(S, 4) ~= "GET ")
        {
            ProcessGet(S);            
        }
        else
        {
            if(Left(S, 5) ~= "POST ")
            {
                ProcessPost(S);                
            }
            else
            {
                if(Left(S, 5) ~= "HEAD ")
                {
                    ProcessHead(S);                    
                }
                else
                {
                    if(Request != none)
                    {
                        Request.ProcessHeaderString(S);
                    }
                }
            }
        }
    }
}

function ProcessHead(string S);

function ProcessGet(string S)
{
    local int I;

    if(Request == none)
    {
        CreateResponseObject();
    }
    Request.RequestType = 0;
    S = Mid(S, 4);
    J0x52:

    if(Left(S, 1) == " ")
    {
        S = Mid(S, 1);
        goto J0x52;
    }
    I = InStr(S, " ");
    if(I != -1)
    {
        S = Left(S, I);
    }
    I = InStr(S, "?");
    if(I != -1)
    {
        Request.DecodeFormData(Mid(S, I + 1));
        S = Left(S, I);
    }
    Application = WebServer.GetApplication(S, Request.URI);
    if((Application != none) && Request.URI == "")
    {
        Response.Redirect(S $ "/");
        Cleanup();        
    }
    else
    {
        if((Application == none) && WebServer.DefaultApplication != -1)
        {
            Response.Redirect(WebServer.ApplicationPaths[WebServer.DefaultApplication] $ "/");
            Cleanup();
        }
    }
}

function ProcessPost(string S)
{
    local int I;

    if(Request == none)
    {
        CreateResponseObject();
    }
    Request.RequestType = 1;
    S = Mid(S, 5);
    J0x52:

    if(Left(S, 1) == " ")
    {
        S = Mid(S, 1);
        goto J0x52;
    }
    I = InStr(S, " ");
    if(I != -1)
    {
        S = Left(S, I);
    }
    I = InStr(S, "?");
    if(I != -1)
    {
        Request.DecodeFormData(Mid(S, I + 1));
        S = Left(S, I);
    }
    Application = WebServer.GetApplication(S, Request.URI);
    if((Application != none) && Request.URI == "")
    {
        Response.Redirect(S $ "/");
        Cleanup();
    }
}

function CreateResponseObject()
{
    local int I;

    Request = new (none) Class'WebRequest';
    Request.RemoteAddr = IpAddrToString(RemoteAddr);
    I = InStr(Request.RemoteAddr, ":");
    if(I > -1)
    {
        Request.RemoteAddr = Left(Request.RemoteAddr, I);
    }
    Response = new (none) Class'WebResponse';
    Response.Connection = self;
}

function EndOfHeaders()
{
    if(Response == none)
    {
        CreateResponseObject();
        Response.HTTPError(400);
        Cleanup();
        return;
    }
    if(Application == none)
    {
        Response.HTTPError(404);
        Cleanup();
        return;
    }
    if((Request.ContentLength != 0) && Request.RequestType == 1)
    {
        RawBytesExpecting = Request.ContentLength;
        RawBytesExpecting -= Len(ReceivedData);
        CheckRawBytes();        
    }
    else
    {
        if(Application.PreQuery(Request, Response))
        {
            Application.Query(Request, Response);
            Application.PostQuery(Request, Response);
        }
        Cleanup();
    }
}

function CheckRawBytes()
{
    if(RawBytesExpecting <= 0)
    {
        if(InStr(Locs(Request.ContentType), "application/x-www-form-urlencoded") != 0)
        {
            LogInternal("WebConnection: Unknown form data content-type: " $ Request.ContentType);
            Response.HTTPError(400);            
        }
        else
        {
            Request.DecodeFormData(ReceivedData);
            if(Application.PreQuery(Request, Response))
            {
                Application.Query(Request, Response);
                Application.PostQuery(Request, Response);
            }
            ReceivedData = "";
        }
        Cleanup();
    }
}

function Cleanup()
{
    if(bDelayCleanup)
    {
        return;
    }
    if(Request != none)
    {
        Request = none;
    }
    if(Response != none)
    {
        Response.Connection = none;
        Response = none;
    }
    if(Application != none)
    {
        Application = none;
    }
    Close();
}

final function bool IsHanging()
{
    return bDelayCleanup;
}

defaultproperties
{
    MaxValueLength=4096
    MaxLineLength=4096
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__WebConnection.Sprite'
    Components(0)=Sprite
}