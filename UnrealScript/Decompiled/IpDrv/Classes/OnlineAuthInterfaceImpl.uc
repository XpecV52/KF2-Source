/*******************************************************************************
 * OnlineAuthInterfaceImpl generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineAuthInterfaceImpl extends Object within OnlineSubsystemCommonImpl
    native
    implements(OnlineAuthInterface);

var private native const noexport Pointer VfTable_IOnlineAuthInterface;
var OnlineSubsystemCommonImpl OwningSubsystem;
var const bool bAuthReady;
var native const SparseArray_Mirror ClientAuthSessions;
var native const SparseArray_Mirror ServerAuthSessions;
var native const SparseArray_Mirror PeerAuthSessions;
var native const SparseArray_Mirror LocalClientAuthSessions;
var native const SparseArray_Mirror LocalServerAuthSessions;
var native const SparseArray_Mirror LocalPeerAuthSessions;
var array< delegate<OnAuthReady> > AuthReadyDelegates;
var array< delegate<OnClientAuthRequest> > ClientAuthRequestDelegates;
var array< delegate<OnServerAuthRequest> > ServerAuthRequestDelegates;
var array< delegate<OnClientAuthResponse> > ClientAuthResponseDelegates;
var array< delegate<OnServerAuthResponse> > ServerAuthResponseDelegates;
var array< delegate<OnClientAuthComplete> > ClientAuthCompleteDelegates;
var array< delegate<OnServerAuthComplete> > ServerAuthCompleteDelegates;
var array< delegate<OnClientAuthEndSessionRequest> > ClientAuthEndSessionRequestDelegates;
var array< delegate<OnServerAuthRetryRequest> > ServerAuthRetryRequestDelegates;
var array< delegate<OnClientConnectionClose> > ClientConnectionCloseDelegates;
var array< delegate<OnServerConnectionClose> > ServerConnectionCloseDelegates;
var delegate<OnAuthReady> __OnAuthReady__Delegate;
var delegate<OnClientAuthRequest> __OnClientAuthRequest__Delegate;
var delegate<OnServerAuthRequest> __OnServerAuthRequest__Delegate;
var delegate<OnClientAuthResponse> __OnClientAuthResponse__Delegate;
var delegate<OnServerAuthResponse> __OnServerAuthResponse__Delegate;
var delegate<OnClientAuthComplete> __OnClientAuthComplete__Delegate;
var delegate<OnServerAuthComplete> __OnServerAuthComplete__Delegate;
var delegate<OnClientAuthEndSessionRequest> __OnClientAuthEndSessionRequest__Delegate;
var delegate<OnServerAuthRetryRequest> __OnServerAuthRetryRequest__Delegate;
var delegate<OnClientConnectionClose> __OnClientConnectionClose__Delegate;
var delegate<OnServerConnectionClose> __OnServerConnectionClose__Delegate;

function bool IsReady()
{
    return bAuthReady;
}

delegate OnAuthReady();

function AddAuthReadyDelegate(delegate<OnAuthReady> AuthReadyDelegate)
{
    if(AuthReadyDelegates.Find(AuthReadyDelegate == -1)
    {
        AuthReadyDelegates[AuthReadyDelegates.Length] = AuthReadyDelegate;
    }
}

function ClearAuthReadyDelegate(delegate<OnAuthReady> AuthReadyDelegate)
{
    local int I;

    I = AuthReadyDelegates.Find(AuthReadyDelegate;
    if(I != -1)
    {
        AuthReadyDelegates.Remove(I, 1;
    }
}

delegate OnClientAuthRequest(UniqueNetId ServerUID, IpAddr ServerIP, int ServerPort, bool bSecure);

function AddClientAuthRequestDelegate(delegate<OnClientAuthRequest> ClientAuthRequestDelegate)
{
    if(ClientAuthRequestDelegates.Find(ClientAuthRequestDelegate == -1)
    {
        ClientAuthRequestDelegates[ClientAuthRequestDelegates.Length] = ClientAuthRequestDelegate;
    }
}

function ClearClientAuthRequestDelegate(delegate<OnClientAuthRequest> ClientAuthRequestDelegate)
{
    local int I;

    I = ClientAuthRequestDelegates.Find(ClientAuthRequestDelegate;
    if(I != -1)
    {
        ClientAuthRequestDelegates.Remove(I, 1;
    }
}

delegate OnServerAuthRequest(Player ClientConnection, UniqueNetId ClientUID, IpAddr ClientIP, int ClientPort);

function AddServerAuthRequestDelegate(delegate<OnServerAuthRequest> ServerAuthRequestDelegate)
{
    if(ServerAuthRequestDelegates.Find(ServerAuthRequestDelegate == -1)
    {
        ServerAuthRequestDelegates[ServerAuthRequestDelegates.Length] = ServerAuthRequestDelegate;
    }
}

function ClearServerAuthRequestDelegate(delegate<OnServerAuthRequest> ServerAuthRequestDelegate)
{
    local int I;

    I = ServerAuthRequestDelegates.Find(ServerAuthRequestDelegate;
    if(I != -1)
    {
        ServerAuthRequestDelegates.Remove(I, 1;
    }
}

delegate OnClientAuthResponse(UniqueNetId ClientUID, IpAddr ClientIP, int AuthTicketUID);

function AddClientAuthResponseDelegate(delegate<OnClientAuthResponse> ClientAuthResponseDelegate)
{
    if(ClientAuthResponseDelegates.Find(ClientAuthResponseDelegate == -1)
    {
        ClientAuthResponseDelegates[ClientAuthResponseDelegates.Length] = ClientAuthResponseDelegate;
    }
}

function ClearClientAuthResponseDelegate(delegate<OnClientAuthResponse> ClientAuthResponseDelegate)
{
    local int I;

    I = ClientAuthResponseDelegates.Find(ClientAuthResponseDelegate;
    if(I != -1)
    {
        ClientAuthResponseDelegates.Remove(I, 1;
    }
}

delegate OnServerAuthResponse(UniqueNetId ServerUID, IpAddr ServerIP, int AuthTicketUID);

function AddServerAuthResponseDelegate(delegate<OnServerAuthResponse> ServerAuthResponseDelegate)
{
    if(ServerAuthResponseDelegates.Find(ServerAuthResponseDelegate == -1)
    {
        ServerAuthResponseDelegates[ServerAuthResponseDelegates.Length] = ServerAuthResponseDelegate;
    }
}

function ClearServerAuthResponseDelegate(delegate<OnServerAuthResponse> ServerAuthResponseDelegate)
{
    local int I;

    I = ServerAuthResponseDelegates.Find(ServerAuthResponseDelegate;
    if(I != -1)
    {
        ServerAuthResponseDelegates.Remove(I, 1;
    }
}

delegate OnClientAuthComplete(bool bSuccess, UniqueNetId ClientUID, Player ClientConnection, string ExtraInfo);

function AddClientAuthCompleteDelegate(delegate<OnClientAuthComplete> ClientAuthCompleteDelegate)
{
    if(ClientAuthCompleteDelegates.Find(ClientAuthCompleteDelegate == -1)
    {
        ClientAuthCompleteDelegates[ClientAuthCompleteDelegates.Length] = ClientAuthCompleteDelegate;
    }
}

function ClearClientAuthCompleteDelegate(delegate<OnClientAuthComplete> ClientAuthCompleteDelegate)
{
    local int I;

    I = ClientAuthCompleteDelegates.Find(ClientAuthCompleteDelegate;
    if(I != -1)
    {
        ClientAuthCompleteDelegates.Remove(I, 1;
    }
}

delegate OnServerAuthComplete(bool bSuccess, UniqueNetId ServerUID, Player ServerConnection, string ExtraInfo);

function AddServerAuthCompleteDelegate(delegate<OnServerAuthComplete> ServerAuthCompleteDelegate)
{
    if(ServerAuthCompleteDelegates.Find(ServerAuthCompleteDelegate == -1)
    {
        ServerAuthCompleteDelegates[ServerAuthCompleteDelegates.Length] = ServerAuthCompleteDelegate;
    }
}

function ClearServerAuthCompleteDelegate(delegate<OnServerAuthComplete> ServerAuthCompleteDelegate)
{
    local int I;

    I = ServerAuthCompleteDelegates.Find(ServerAuthCompleteDelegate;
    if(I != -1)
    {
        ServerAuthCompleteDelegates.Remove(I, 1;
    }
}

delegate OnClientAuthEndSessionRequest(Player ServerConnection);

function AddClientAuthEndSessionRequestDelegate(delegate<OnClientAuthEndSessionRequest> ClientAuthEndSessionRequestDelegate)
{
    if(ClientAuthEndSessionRequestDelegates.Find(ClientAuthEndSessionRequestDelegate == -1)
    {
        ClientAuthEndSessionRequestDelegates[ClientAuthEndSessionRequestDelegates.Length] = ClientAuthEndSessionRequestDelegate;
    }
}

function ClearClientAuthEndSessionRequestDelegate(delegate<OnClientAuthEndSessionRequest> ClientAuthEndSessionRequestDelegate)
{
    local int I;

    I = ClientAuthEndSessionRequestDelegates.Find(ClientAuthEndSessionRequestDelegate;
    if(I != -1)
    {
        ClientAuthEndSessionRequestDelegates.Remove(I, 1;
    }
}

delegate OnServerAuthRetryRequest(Player ClientConnection);

function AddServerAuthRetryRequestDelegate(delegate<OnServerAuthRetryRequest> ServerAuthRetryRequestDelegate)
{
    if(ServerAuthRetryRequestDelegates.Find(ServerAuthRetryRequestDelegate == -1)
    {
        ServerAuthRetryRequestDelegates[ServerAuthRetryRequestDelegates.Length] = ServerAuthRetryRequestDelegate;
    }
}

function ClearServerAuthRetryRequestDelegate(delegate<OnServerAuthRetryRequest> ServerAuthRetryRequestDelegate)
{
    local int I;

    I = ServerAuthRetryRequestDelegates.Find(ServerAuthRetryRequestDelegate;
    if(I != -1)
    {
        ServerAuthRetryRequestDelegates.Remove(I, 1;
    }
}

delegate OnClientConnectionClose(Player ClientConnection);

function AddClientConnectionCloseDelegate(delegate<OnClientConnectionClose> ClientConnectionCloseDelegate)
{
    if(ClientConnectionCloseDelegates.Find(ClientConnectionCloseDelegate == -1)
    {
        ClientConnectionCloseDelegates[ClientConnectionCloseDelegates.Length] = ClientConnectionCloseDelegate;
    }
}

function ClearClientConnectionCloseDelegate(delegate<OnClientConnectionClose> ClientConnectionCloseDelegate)
{
    local int I;

    I = ClientConnectionCloseDelegates.Find(ClientConnectionCloseDelegate;
    if(I != -1)
    {
        ClientConnectionCloseDelegates.Remove(I, 1;
    }
}

delegate OnServerConnectionClose(Player ServerConnection);

function AddServerConnectionCloseDelegate(delegate<OnServerConnectionClose> ServerConnectionCloseDelegate)
{
    if(ServerConnectionCloseDelegates.Find(ServerConnectionCloseDelegate == -1)
    {
        ServerConnectionCloseDelegates[ServerConnectionCloseDelegates.Length] = ServerConnectionCloseDelegate;
    }
}

function ClearServerConnectionCloseDelegate(delegate<OnServerConnectionClose> ServerConnectionCloseDelegate)
{
    local int I;

    I = ServerConnectionCloseDelegates.Find(ServerConnectionCloseDelegate;
    if(I != -1)
    {
        ServerConnectionCloseDelegates.Remove(I, 1;
    }
}

function bool SendClientAuthRequest(Player ClientConnection, UniqueNetId ClientUID);

function bool SendServerAuthRequest(UniqueNetId ServerUID);

// Export UOnlineAuthInterfaceImpl::execSendClientAuthResponse(FFrame&, void* const)
native function bool SendClientAuthResponse(int AuthTicketUID);

// Export UOnlineAuthInterfaceImpl::execSendServerAuthResponse(FFrame&, void* const)
native function bool SendServerAuthResponse(Player ClientConnection, int AuthTicketUID);

// Export UOnlineAuthInterfaceImpl::execSendClientAuthEndSessionRequest(FFrame&, void* const)
native function bool SendClientAuthEndSessionRequest(Player ClientConnection);

// Export UOnlineAuthInterfaceImpl::execSendServerAuthRetryRequest(FFrame&, void* const)
native function bool SendServerAuthRetryRequest();

function bool CreateClientAuthSession(UniqueNetId ServerUID, IpAddr ServerIP, int ServerPort, bool bSecure, out int OutAuthTicketUID);

function bool VerifyClientAuthSession(UniqueNetId ClientUID, IpAddr ClientIP, int ClientPort, int AuthTicketUID);

// Export UOnlineAuthInterfaceImpl::execEndLocalClientAuthSession(FFrame&, void* const)
native final function EndLocalClientAuthSession(UniqueNetId ServerUID, IpAddr ServerIP, int ServerPort);

// Export UOnlineAuthInterfaceImpl::execEndRemoteClientAuthSession(FFrame&, void* const)
native final function EndRemoteClientAuthSession(UniqueNetId ClientUID, IpAddr ClientIP);

// Export UOnlineAuthInterfaceImpl::execEndAllLocalClientAuthSessions(FFrame&, void* const)
native function EndAllLocalClientAuthSessions();

// Export UOnlineAuthInterfaceImpl::execEndAllRemoteClientAuthSessions(FFrame&, void* const)
native function EndAllRemoteClientAuthSessions();

function bool CreateServerAuthSession(UniqueNetId ClientUID, IpAddr ClientIP, int ClientPort, out int OutAuthTicketUID);

function bool VerifyServerAuthSession(UniqueNetId ServerUID, IpAddr ServerIP, int AuthTicketUID);

// Export UOnlineAuthInterfaceImpl::execEndLocalServerAuthSession(FFrame&, void* const)
native final function EndLocalServerAuthSession(UniqueNetId ClientUID, IpAddr ClientIP);

// Export UOnlineAuthInterfaceImpl::execEndRemoteServerAuthSession(FFrame&, void* const)
native final function EndRemoteServerAuthSession(UniqueNetId ServerUID, IpAddr ServerIP);

// Export UOnlineAuthInterfaceImpl::execEndAllLocalServerAuthSessions(FFrame&, void* const)
native function EndAllLocalServerAuthSessions();

// Export UOnlineAuthInterfaceImpl::execEndAllRemoteServerAuthSessions(FFrame&, void* const)
native function EndAllRemoteServerAuthSessions();

// Export UOnlineAuthInterfaceImpl::execAllClientAuthSessions(FFrame&, void* const)
native iterator function AllClientAuthSessions(out AuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execAllLocalClientAuthSessions(FFrame&, void* const)
native iterator function AllLocalClientAuthSessions(out LocalAuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execAllServerAuthSessions(FFrame&, void* const)
native iterator function AllServerAuthSessions(out AuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execAllLocalServerAuthSessions(FFrame&, void* const)
native iterator function AllLocalServerAuthSessions(out LocalAuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execFindClientAuthSession(FFrame&, void* const)
native function bool FindClientAuthSession(Player ClientConnection, out AuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execFindLocalClientAuthSession(FFrame&, void* const)
native function bool FindLocalClientAuthSession(Player ServerConnection, out LocalAuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execFindServerAuthSession(FFrame&, void* const)
native function bool FindServerAuthSession(Player ServerConnection, out AuthSession OutSessionInfo);

// Export UOnlineAuthInterfaceImpl::execFindLocalServerAuthSession(FFrame&, void* const)
native function bool FindLocalServerAuthSession(Player ClientConnection, out LocalAuthSession OutSessionInfo);

function bool GetServerUniqueId(out UniqueNetId OutServerUID);

function bool GetServerAddr(out IpAddr OutServerIP, out int OutServerPort);
