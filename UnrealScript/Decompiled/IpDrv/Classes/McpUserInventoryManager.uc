/*******************************************************************************
 * McpUserInventoryManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class McpUserInventoryManager extends McpUserInventoryBase
    config(Engine);

struct SaveSlotRequestState
{
    var string McpId;
    var string SaveSlotId;
    var HttpRequestInterface Request;

    structdefaultproperties
    {
        McpId=""
        SaveSlotId=""
        Request=none
    }
};

struct InventoryItemRequestState extends SaveSlotRequestState
{
    var string ItemId;
};

var config string CreateSaveSlotUrl;
var config string DeleteSaveSlotUrl;
var config string ListSaveSlotUrl;
var config string ListItemsUrl;
var config string PurchaseItemUrl;
var config string SellItemUrl;
var config string EarnItemUrl;
var config string ConsumeItemUrl;
var config string DeleteItemUrl;
var config string IapRecordUrl;
var array<McpInventorySaveSlot> SaveSlots;
var array<SaveSlotRequestState> SaveSlotRequests;
var array<SaveSlotRequestState> ListSaveSlotRequests;
var array<SaveSlotRequestState> ListItemsRequests;
var array<InventoryItemRequestState> ItemRequests;

function CreateSaveSlot(string McpId, string SaveSlotId, optional string ParentSaveSlotId)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindSaveSlotRequest(McpId, SaveSlotId, SaveSlotRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((GetBaseURL()) $ CreateSaveSlotUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId;
            if(Len(ParentSaveSlotId) > 0)
            {                
                URL $= ("&parentSaveSlotId=" $ ParentSaveSlotId);
            }
            Request.SetURL(URL);
            Request.SetVerb("POST");
            Request.__OnProcessRequestComplete__Delegate = OnCreateSaveSlotRequestComplete;
            AddAt = SaveSlotRequests.Length;
            SaveSlotRequests.Length = AddAt + 1;
            SaveSlotRequests[AddAt].McpId = McpId;
            SaveSlotRequests[AddAt].SaveSlotId = SaveSlotId;
            SaveSlotRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start CreateSaveSlot web request for URL(" $ URL) $ ")");
            }
            LogInternal("Create save slot URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((("Already have a pending save slot request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId);
    }
}

function OnCreateSaveSlotRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, SaveSlotIndex, ResponseCode;
    local string ResponseString;

    Index = SaveSlotRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            SaveSlotIndex = FindSaveSlotIndex(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId);
            if(SaveSlotIndex != -1)
            {
                SaveSlots.Remove(SaveSlotIndex, 1;
            }
            ResponseString = Response.GetContentAsString();            
            ParseInventoryForSaveSlot(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId, ResponseString);
        }
        OnCreateSaveSlotComplete(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((("Create save slot:" $ " McpId=") $ SaveSlotRequests[Index].McpId) $ " SaveSlot=") $ SaveSlotRequests[Index].SaveSlotId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        SaveSlotRequests.Remove(Index, 1;
    }
}

function DeleteSaveSlot(string McpId, string SaveSlotId)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindSaveSlotRequest(McpId, SaveSlotId, SaveSlotRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((GetBaseURL()) $ DeleteSaveSlotUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId;
            Request.SetURL(URL);
            Request.SetVerb("DELETE");
            Request.__OnProcessRequestComplete__Delegate = OnDeleteSaveSlotRequestComplete;
            AddAt = SaveSlotRequests.Length;
            SaveSlotRequests.Length = AddAt + 1;
            SaveSlotRequests[AddAt].McpId = McpId;
            SaveSlotRequests[AddAt].SaveSlotId = SaveSlotId;
            SaveSlotRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start DeleteSaveSlot web request for URL(" $ URL) $ ")");
            }
            LogInternal("Delete save slot URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((("Already have a pending save slot request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId);
    }
}

function OnDeleteSaveSlotRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, SaveSlotIndex, ResponseCode;

    Index = SaveSlotRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            SaveSlotIndex = FindSaveSlotIndex(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId);
            if(SaveSlotIndex != -1)
            {
                SaveSlots.Remove(SaveSlotIndex, 1;
            }
        }
        OnDeleteSaveSlotComplete(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((("Delete save slot:" $ " McpId=") $ SaveSlotRequests[Index].McpId) $ " SaveSlot=") $ SaveSlotRequests[Index].SaveSlotId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        SaveSlotRequests.Remove(Index, 1;
    }
}

function QuerySaveSlotList(string McpId)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = ListSaveSlotRequests.Find('McpId', McpId;
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((GetBaseURL()) $ ListSaveSlotUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId;
            Request.SetURL(URL);
            Request.SetVerb("GET");
            Request.__OnProcessRequestComplete__Delegate = OnQuerySaveSlotListRequestComplete;
            AddAt = ListSaveSlotRequests.Length;
            ListSaveSlotRequests.Length = AddAt + 1;
            ListSaveSlotRequests[AddAt].McpId = McpId;
            ListSaveSlotRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start QuerySaveSlotList web request for URL(" $ URL) $ ")");
            }
            LogInternal("Query save slot list URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(("Already have a pending list save slot request for" $ " McpId=") $ McpId);
    }
}

function OnQuerySaveSlotListRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode;
    local string ResponseString;

    Index = ListSaveSlotRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ResponseString = Response.GetContentAsString();
            ParseSaveSlotList(ListSaveSlotRequests[Index].McpId, ResponseString);
        }
        OnQuerySaveSlotListComplete(ListSaveSlotRequests[Index].McpId, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((("List save slots:" $ " McpId=") $ ListSaveSlotRequests[Index].McpId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ListSaveSlotRequests.Remove(Index, 1;
    }
}

function array<string> GetSaveSlotList(string McpId)
{
    local array<string> OutSaveSlots;
    local int SaveSlotIndex;

    OutSaveSlots.Length = SaveSlots.Length;
    SaveSlotIndex = 0;
    J0x20:

    if(SaveSlotIndex < SaveSlots.Length)
    {
        OutSaveSlots[SaveSlotIndex] = SaveSlots[SaveSlotIndex].SaveSlotId;
        ++ SaveSlotIndex;
        goto J0x20;
    }
    return OutSaveSlots;
}

function QueryInventoryItems(string McpId, string SaveSlotId)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindSaveSlotRequest(McpId, SaveSlotId, ListItemsRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((GetBaseURL()) $ ListItemsUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId;
            Request.SetURL(URL);
            Request.SetVerb("GET");
            Request.__OnProcessRequestComplete__Delegate = OnQueryInventoryItemsRequestComplete;
            AddAt = ListItemsRequests.Length;
            ListItemsRequests.Length = AddAt + 1;
            ListItemsRequests[AddAt].McpId = McpId;
            ListItemsRequests[AddAt].SaveSlotId = SaveSlotId;
            ListItemsRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start QueryInventoryItems web request for URL(" $ URL) $ ")");
            }
            LogInternal("Query inventory items URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((("Already have a pending save slot request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId);
    }
}

function OnQueryInventoryItemsRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, SaveSlotIndex, ResponseCode;
    local string ResponseString;

    Index = ListItemsRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            SaveSlotIndex = FindSaveSlotIndex(ListItemsRequests[Index].McpId, ListItemsRequests[Index].SaveSlotId);
            if(SaveSlotIndex != -1)
            {
                SaveSlots[SaveSlotIndex].Items.Length = 0;
            }
            ResponseString = Response.GetContentAsString();            
            ParseInventoryForSaveSlot(ListItemsRequests[Index].McpId, ListItemsRequests[Index].SaveSlotId, ResponseString);
        }
        OnQueryInventoryItemsComplete(ListItemsRequests[Index].McpId, ListItemsRequests[Index].SaveSlotId, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((("Query inventory items:" $ " McpId=") $ ListItemsRequests[Index].McpId) $ " SaveSlot=") $ ListItemsRequests[Index].SaveSlotId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ListItemsRequests.Remove(Index, 1;
    }
}

function GetInventoryItems(string McpId, string SaveSlotId, out array<McpInventoryItem> OutInventoryItems)
{
    local int SaveSlotIndex;

    OutInventoryItems.Length = 0;
    SaveSlotIndex = FindSaveSlotIndex(McpId, SaveSlotId);
    if(SaveSlotIndex != -1)
    {
        OutInventoryItems = SaveSlots[SaveSlotIndex].Items;        
    }
    else
    {
        LogInternal(((("No save slot found for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId);
    }
}

function bool GetInventoryItem(string McpId, string SaveSlotId, string InstanceItemId, out McpInventoryItem OutInventoryItem)
{
    local int SaveSlotIndex, ItemIndex;

    SaveSlotIndex = FindSaveSlotIndex(McpId, SaveSlotId);
    if(SaveSlotIndex != -1)
    {
        ItemIndex = SaveSlots[SaveSlotIndex].Items.Find('InstanceItemId', InstanceItemId;
        if(ItemIndex != -1)
        {
            OutInventoryItem = SaveSlots[SaveSlotIndex].Items[ItemIndex];
            return true;            
        }
        else
        {
            LogInternal(((((("No inventory item found for " $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId) $ " InstanceItemId=") $ InstanceItemId);
        }        
    }
    else
    {
        LogInternal(((("No save slot found for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId);
    }
    return false;
}

function array<string> ParseInventoryForSaveSlot(string McpId, string SaveSlotId, string JsonPayload)
{
    local JsonObject ParsedJson, ParsedJsonAttrs;
    local int JsonIndex, SaveSlotIndex, ItemIndex, JsonAttrsIndex;
    local string GlobalItemId, InstanceItemId;
    local array<string> UpdatedItemIds;
    local array<JsonObject> ObjectArray;

    SaveSlotIndex = FindSaveSlotIndex(McpId, SaveSlotId);
    if(SaveSlotIndex == -1)
    {
        SaveSlotIndex = SaveSlots.Length;
        SaveSlots.Length = SaveSlotIndex + 1;
        SaveSlots[SaveSlotIndex].OwningMcpId = McpId;
        SaveSlots[SaveSlotIndex].SaveSlotId = SaveSlotId;
    }
    LogInternal(("DEBUGSZ" $ " JsonPayload=") $ JsonPayload);
    ParsedJson = Class'JsonObject'.static.DecodeJson(JsonPayload);
    ObjectArray = ParsedJson.ObjectArray;
    if(ObjectArray.Length == 0)
    {
        ObjectArray.AddItem(ParsedJson;
    }
    JsonIndex = 0;
    J0x177:

    if(JsonIndex < ObjectArray.Length)
    {
        InstanceItemId = ObjectArray[JsonIndex].GetStringValue("instance_item_id");
        GlobalItemId = ObjectArray[JsonIndex].GetStringValue("global_item_id");
        if(Len(InstanceItemId) > 0)
        {
            UpdatedItemIds.AddItem(InstanceItemId;
            ItemIndex = SaveSlots[SaveSlotIndex].Items.Find('InstanceItemId', InstanceItemId;
            if(ItemIndex == -1)
            {
                ItemIndex = SaveSlots[SaveSlotIndex].Items.Length;
                SaveSlots[SaveSlotIndex].Items.Length = ItemIndex + 1;
                SaveSlots[SaveSlotIndex].Items[ItemIndex].GlobalItemId = GlobalItemId;
                SaveSlots[SaveSlotIndex].Items[ItemIndex].InstanceItemId = InstanceItemId;
            }
            SaveSlots[SaveSlotIndex].Items[ItemIndex].Quantity = ObjectArray[JsonIndex].GetIntValue("quantity");
            SaveSlots[SaveSlotIndex].Items[ItemIndex].QuantityIAP = ObjectArray[JsonIndex].GetIntValue("iap_quantity");
            SaveSlots[SaveSlotIndex].Items[ItemIndex].Scalar = ObjectArray[JsonIndex].GetFloatValue("scalar");
            SaveSlots[SaveSlotIndex].Items[ItemIndex].LastUpdateTime = ObjectArray[JsonIndex].GetStringValue("last_update_time");
            SaveSlots[SaveSlotIndex].Items[ItemIndex].Attributes.Length = 0;
            ParsedJsonAttrs = ObjectArray[JsonIndex].GetObject("attributes");
            SaveSlots[SaveSlotIndex].Items[ItemIndex].Attributes.Length = ParsedJsonAttrs.ObjectArray.Length;
            JsonAttrsIndex = 0;
            J0x670:

            if(JsonAttrsIndex < ParsedJsonAttrs.ObjectArray.Length)
            {
                SaveSlots[SaveSlotIndex].Items[ItemIndex].Attributes[JsonAttrsIndex].AttributeId = ParsedJsonAttrs.ObjectArray[JsonAttrsIndex].GetStringValue("attribute_id");
                SaveSlots[SaveSlotIndex].Items[ItemIndex].Attributes[JsonAttrsIndex].Value = ParsedJsonAttrs.ObjectArray[JsonAttrsIndex].GetIntValue("value");
                ++ JsonAttrsIndex;
                goto J0x670;
            }
        }
        ++ JsonIndex;
        goto J0x177;
    }
    return UpdatedItemIds;
}

function ParseSaveSlotList(string McpId, string JsonPayload)
{
    local JsonObject ParsedJson;
    local int JsonIndex, SaveSlotIndex;
    local string SaveSlotId;

    ParsedJson = Class'JsonObject'.static.DecodeJson(JsonPayload);
    JsonIndex = 0;
    J0x3D:

    if(JsonIndex < ParsedJson.ObjectArray.Length)
    {
        SaveSlotId = ParsedJson.ObjectArray[JsonIndex].GetStringValue("save_slot_id");
        SaveSlotIndex = FindSaveSlotIndex(McpId, SaveSlotId);
        if(SaveSlotIndex == -1)
        {
            SaveSlotIndex = SaveSlots.Length;
            SaveSlots.Length = SaveSlotIndex + 1;
            SaveSlots[SaveSlotIndex].OwningMcpId = McpId;
            SaveSlots[SaveSlotIndex].SaveSlotId = SaveSlotId;
        }
        ++ JsonIndex;
        goto J0x3D;
    }
}

function int FindSaveSlotIndex(string McpId, string SaveSlotId)
{
    local int SaveSlotIndex;

    SaveSlotIndex = 0;
    J0x0B:

    if(SaveSlotIndex < SaveSlots.Length)
    {
        if((SaveSlots[SaveSlotIndex].OwningMcpId == McpId) && SaveSlots[SaveSlotIndex].SaveSlotId == SaveSlotId)
        {
            return SaveSlotIndex;
        }
        ++ SaveSlotIndex;
        goto J0x0B;
    }
    return -1;
}

function int FindSaveSlotRequest(string McpId, string SaveSlotId, const out array<SaveSlotRequestState> InSaveSlotRequests)
{
    local int Index;

    Index = 0;
    J0x0B:

    if(Index < InSaveSlotRequests.Length)
    {
        if((InSaveSlotRequests[Index].McpId == McpId) && InSaveSlotRequests[Index].SaveSlotId == SaveSlotId)
        {
            return Index;
        }
        ++ Index;
        goto J0x0B;
    }
    return -1;
}

function int FindItemRequest(string McpId, string SaveSlotId, string ItemId, const out array<InventoryItemRequestState> InItemRequests)
{
    local int Index;

    Index = 0;
    J0x0B:

    if(Index < InItemRequests.Length)
    {
        if(((InItemRequests[Index].McpId == McpId) && InItemRequests[Index].SaveSlotId == SaveSlotId) && InItemRequests[Index].ItemId == ItemId)
        {
            return Index;
        }
        ++ Index;
        goto J0x0B;
    }
    return -1;
}

function PurchaseItem(string McpId, string SaveSlotId, string GlobalItemId, array<string> PurchaseItemIds, int Quantity, int StoreVersion, float Scalar)
{
    local string URL, paymentItemsJson;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex, Index;

    ExistingIndex = FindItemRequest(McpId, SaveSlotId, GlobalItemId, ItemRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((((((((((GetBaseURL()) $ PurchaseItemUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId) $ "&globalItemId=") $ GlobalItemId) $ "&quantity=") $ string(Quantity)) $ "&storeVersion=") $ string(StoreVersion)) $ "&scalar=") $ string(Scalar);
            if(PurchaseItemIds.Length > 0)
            {
                paymentItemsJson = "[ ";
                Index = 0;
                J0x194:

                if(Index < PurchaseItemIds.Length)
                {                    
                    paymentItemsJson $= (("\"" $ PurchaseItemIds[Index]) $ "\"");
                    if((Index + 1) < PurchaseItemIds.Length)
                    {                        
                        paymentItemsJson $= ",";
                    }
                    ++ Index;
                    goto J0x194;
                }                
                paymentItemsJson $= " ]";                
                URL $= ("&paymentItemsJson=" $ paymentItemsJson);
            }
            Request.SetURL(URL);
            Request.SetVerb("POST");
            Request.__OnProcessRequestComplete__Delegate = OnPurchaseItemRequestComplete;
            AddAt = ItemRequests.Length;
            ItemRequests.Length = AddAt + 1;
            ItemRequests[AddAt].McpId = McpId;
            ItemRequests[AddAt].SaveSlotId = SaveSlotId;
            ItemRequests[AddAt].ItemId = GlobalItemId;
            ItemRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start PurchaseItem web request for URL(" $ URL) $ ")");
            }
            LogInternal("Purchase item URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((((("Already have a pending item request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId) $ " GlobalItemId=") $ GlobalItemId);
    }
}

function OnPurchaseItemRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, SaveSlotIndex, UpdatedItemIdIndex, FoundItemIndex, ResponseCode;

    local string ResponseString;
    local array<string> UpdatedItemIds;

    Index = ItemRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ResponseString = Response.GetContentAsString();
            UpdatedItemIds = ParseInventoryForSaveSlot(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ResponseString);
            SaveSlotIndex = FindSaveSlotIndex(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId);
            if(SaveSlotIndex != -1)
            {
                UpdatedItemIdIndex = 0;
                J0x1C7:

                if(UpdatedItemIdIndex < UpdatedItemIds.Length)
                {
                    FoundItemIndex = SaveSlots[SaveSlotIndex].Items.Find('InstanceItemId', UpdatedItemIds[UpdatedItemIdIndex];
                    if(((FoundItemIndex != -1) && SaveSlots[SaveSlotIndex].Items[FoundItemIndex].Quantity == 0) && SaveSlots[SaveSlotIndex].Items[FoundItemIndex].QuantityIAP == 0)
                    {
                        SaveSlots[SaveSlotIndex].Items.Remove(FoundItemIndex, 1;
                    }
                    ++ UpdatedItemIdIndex;
                    goto J0x1C7;
                }
            }
        }
        OnPurchaseItemComplete(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ItemRequests[Index].ItemId, UpdatedItemIds, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((((("Purchase item:" $ " McpId=") $ ItemRequests[Index].McpId) $ " SaveSlot=") $ ItemRequests[Index].SaveSlotId) $ " ItemId=") $ ItemRequests[Index].ItemId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ItemRequests.Remove(Index, 1;
    }
}

function SellItem(string McpId, string SaveSlotId, string InstanceItemId, int Quantity, int StoreVersion, const optional out array<McpInventoryItemContainer> ExpectedResultItems)
{
    local string URL, expectedResultsItemsJson;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex, Index;

    ExistingIndex = FindItemRequest(McpId, SaveSlotId, InstanceItemId, ItemRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((((((((GetBaseURL()) $ SellItemUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId) $ "&instanceItemId=") $ InstanceItemId) $ "&quantity=") $ string(Quantity)) $ "&storeVersion=") $ string(StoreVersion);
            if(ExpectedResultItems.Length > 0)
            {
                expectedResultsItemsJson = "[ ";
                Index = 0;
                J0x17E:

                if(Index < ExpectedResultItems.Length)
                {                    
                    expectedResultsItemsJson $= "{";                    
                    expectedResultsItemsJson $= ((("\"global_item_id\":" $ "\"") $ ExpectedResultItems[Index].GlobalItemId) $ "\",");                    
                    expectedResultsItemsJson $= ("\"quantity\":" $ string(ExpectedResultItems[Index].Quantity));                    
                    expectedResultsItemsJson $= "}";
                    if((Index + 1) < ExpectedResultItems.Length)
                    {                        
                        expectedResultsItemsJson $= ",";
                    }
                    ++ Index;
                    goto J0x17E;
                }                
                expectedResultsItemsJson $= " ]";
            }
            Request.SetURL(URL);
            Request.SetVerb("POST");
            Request.SetContentAsString(expectedResultsItemsJson);
            Request.SetHeader("Content-Type", "multipart/form-data");
            Request.__OnProcessRequestComplete__Delegate = OnSellItemRequestComplete;
            AddAt = ItemRequests.Length;
            ItemRequests.Length = AddAt + 1;
            ItemRequests[AddAt].McpId = McpId;
            ItemRequests[AddAt].SaveSlotId = SaveSlotId;
            ItemRequests[AddAt].ItemId = InstanceItemId;
            ItemRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start SellItem web request for URL(" $ URL) $ ")");
            }
            LogInternal("Sell item URL is " $ URL);
            LogInternal("Payload: " $ expectedResultsItemsJson);
        }        
    }
    else
    {
        LogInternal(((((("Already have a pending item request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId) $ " InstanceItemId=") $ InstanceItemId);
    }
}

function OnSellItemRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, SaveSlotIndex, UpdatedItemIdIndex, FoundItemIndex, ResponseCode;

    local string ResponseString;
    local array<string> UpdatedItemIds;

    Index = ItemRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ResponseString = Response.GetContentAsString();
            UpdatedItemIds = ParseInventoryForSaveSlot(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ResponseString);
            SaveSlotIndex = FindSaveSlotIndex(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId);
            if(SaveSlotIndex != -1)
            {
                UpdatedItemIdIndex = 0;
                J0x1C7:

                if(UpdatedItemIdIndex < UpdatedItemIds.Length)
                {
                    FoundItemIndex = SaveSlots[SaveSlotIndex].Items.Find('InstanceItemId', UpdatedItemIds[UpdatedItemIdIndex];
                    if(((FoundItemIndex != -1) && SaveSlots[SaveSlotIndex].Items[FoundItemIndex].Quantity == 0) && SaveSlots[SaveSlotIndex].Items[FoundItemIndex].QuantityIAP == 0)
                    {
                        SaveSlots[SaveSlotIndex].Items.Remove(FoundItemIndex, 1;
                    }
                    ++ UpdatedItemIdIndex;
                    goto J0x1C7;
                }
            }
        }
        OnSellItemComplete(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ItemRequests[Index].ItemId, UpdatedItemIds, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((((("Sell item:" $ " McpId=") $ ItemRequests[Index].McpId) $ " SaveSlot=") $ ItemRequests[Index].SaveSlotId) $ " ItemId=") $ ItemRequests[Index].ItemId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ItemRequests.Remove(Index, 1;
    }
}

function EarnItem(string McpId, string SaveSlotId, string GlobalItemId, int Quantity, int StoreVersion)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindItemRequest(McpId, SaveSlotId, GlobalItemId, ItemRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((((((((GetBaseURL()) $ EarnItemUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId) $ "&globalItemId=") $ GlobalItemId) $ "&quantity=") $ string(Quantity)) $ "&storeVersion=") $ string(StoreVersion);
            Request.SetURL(URL);
            Request.SetVerb("POST");
            Request.__OnProcessRequestComplete__Delegate = OnEarnItemRequestComplete;
            AddAt = ItemRequests.Length;
            ItemRequests.Length = AddAt + 1;
            ItemRequests[AddAt].McpId = McpId;
            ItemRequests[AddAt].SaveSlotId = SaveSlotId;
            ItemRequests[AddAt].ItemId = GlobalItemId;
            ItemRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start EarnItem web request for URL(" $ URL) $ ")");
            }
            LogInternal("Earn item URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((((("Already have a pending item request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId) $ " GlobalItemId=") $ GlobalItemId);
    }
}

function OnEarnItemRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode;
    local string ResponseString;
    local array<string> UpdatedItemIds;

    Index = ItemRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ResponseString = Response.GetContentAsString();
            UpdatedItemIds = ParseInventoryForSaveSlot(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ResponseString);
        }
        OnEarnItemComplete(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ItemRequests[Index].ItemId, UpdatedItemIds, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((((("Earn item:" $ " McpId=") $ ItemRequests[Index].McpId) $ " SaveSlot=") $ ItemRequests[Index].SaveSlotId) $ " ItemId=") $ ItemRequests[Index].ItemId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ItemRequests.Remove(Index, 1;
    }
}

function ConsumeItem(string McpId, string SaveSlotId, string InstanceItemId, int Quantity, int StoreVersion)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindItemRequest(McpId, SaveSlotId, InstanceItemId, ItemRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((((((((GetBaseURL()) $ ConsumeItemUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId) $ "&instanceItemId=") $ InstanceItemId) $ "&quantity=") $ string(Quantity)) $ "&storeVersion=") $ string(StoreVersion);
            Request.SetURL(URL);
            Request.SetVerb("POST");
            Request.__OnProcessRequestComplete__Delegate = OnConsumeItemRequestComplete;
            AddAt = ItemRequests.Length;
            ItemRequests.Length = AddAt + 1;
            ItemRequests[AddAt].McpId = McpId;
            ItemRequests[AddAt].SaveSlotId = SaveSlotId;
            ItemRequests[AddAt].ItemId = InstanceItemId;
            ItemRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start ConsumeItem web request for URL(" $ URL) $ ")");
            }
            LogInternal("Consume item URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((((("Already have a pending item request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId) $ " InstanceItemId=") $ InstanceItemId);
    }
}

function OnConsumeItemRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode;
    local string ResponseString;
    local array<string> UpdatedItemIds;

    Index = ItemRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ResponseString = Response.GetContentAsString();
            UpdatedItemIds = ParseInventoryForSaveSlot(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ResponseString);
        }
        OnConsumeItemComplete(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ItemRequests[Index].ItemId, UpdatedItemIds, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((((("Consume item:" $ " McpId=") $ ItemRequests[Index].McpId) $ " SaveSlot=") $ ItemRequests[Index].SaveSlotId) $ " ItemId=") $ ItemRequests[Index].ItemId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ItemRequests.Remove(Index, 1;
    }
}

function DeleteItem(string McpId, string SaveSlotId, string InstanceItemId, int StoreVersion)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindItemRequest(McpId, SaveSlotId, InstanceItemId, ItemRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((((((GetBaseURL()) $ DeleteItemUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId) $ "&instanceItemId=") $ InstanceItemId) $ "&storeVersion=") $ string(StoreVersion);
            Request.SetURL(URL);
            Request.SetVerb("DELETE");
            Request.__OnProcessRequestComplete__Delegate = OnDeleteItemRequestComplete;
            AddAt = ItemRequests.Length;
            ItemRequests.Length = AddAt + 1;
            ItemRequests[AddAt].McpId = McpId;
            ItemRequests[AddAt].SaveSlotId = SaveSlotId;
            ItemRequests[AddAt].ItemId = InstanceItemId;
            ItemRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start DeleteItem web request for URL(" $ URL) $ ")");
            }
            LogInternal("Delete item URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((((("Already have a pending item request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId) $ " InstanceItemId=") $ InstanceItemId);
    }
}

function OnDeleteItemRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, SaveSlotIndex, ItemIndex, ResponseCode;

    Index = ItemRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            SaveSlotIndex = FindSaveSlotIndex(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId);
            if(SaveSlotIndex != -1)
            {
                ItemIndex = SaveSlots[SaveSlotIndex].Items.Find('InstanceItemId', ItemRequests[Index].ItemId;
                if(ItemIndex != -1)
                {
                    SaveSlots[SaveSlotIndex].Items.Remove(ItemIndex, 1;
                }
            }
        }
        OnDeleteItemComplete(ItemRequests[Index].McpId, ItemRequests[Index].SaveSlotId, ItemRequests[Index].ItemId, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((((("Delete item:" $ " McpId=") $ ItemRequests[Index].McpId) $ " SaveSlot=") $ ItemRequests[Index].SaveSlotId) $ " ItemId=") $ ItemRequests[Index].ItemId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        ItemRequests.Remove(Index, 1;
    }
}

function RecordIap(string McpId, string SaveSlotId, string Receipt)
{
    local string URL;
    local HttpRequestInterface Request;
    local int AddAt, ExistingIndex;

    ExistingIndex = FindSaveSlotRequest(McpId, SaveSlotId, SaveSlotRequests);
    if(ExistingIndex == -1)
    {
        Request = Class'HttpFactory'.static.CreateRequest();
        if(Request != none)
        {
            URL = (((((((GetBaseURL()) $ IapRecordUrl) $ (GetAppAccessURL())) $ (GetUserAuthURL(McpId))) $ "&uniqueUserId=") $ McpId) $ "&saveSlotId=") $ SaveSlotId;
            Request.SetURL(URL);
            Request.SetVerb("POST");
            Request.__OnProcessRequestComplete__Delegate = OnRecordIapRequestComplete;
            Request.SetContentAsString(Receipt);
            Request.SetHeader("Content-Type", "multipart/form-data");
            AddAt = SaveSlotRequests.Length;
            SaveSlotRequests.Length = AddAt + 1;
            SaveSlotRequests[AddAt].McpId = McpId;
            SaveSlotRequests[AddAt].SaveSlotId = SaveSlotId;
            SaveSlotRequests[AddAt].Request = Request;
            if(!Request.ProcessRequest())
            {
                LogInternal(("Failed to start RecordIap web request for URL(" $ URL) $ ")");
            }
            LogInternal("Iap record URL is " $ URL);
        }        
    }
    else
    {
        LogInternal(((("Already have a pending record IAP request for" $ " McpId=") $ McpId) $ " SaveSlotId=") $ SaveSlotId);
    }
}

function OnRecordIapRequestComplete(HttpRequestInterface Request, HttpResponseInterface Response, bool bWasSuccessful)
{
    local int Index, ResponseCode;
    local string ResponseString;
    local array<string> UpdatedItemIds;

    Index = SaveSlotRequests.Find('Request', Request;
    if(Index != -1)
    {
        ResponseCode = 500;
        if(Response != none)
        {
            ResponseCode = Response.GetResponseCode();
        }
        bWasSuccessful = bWasSuccessful && ResponseCode == 200;
        if(bWasSuccessful)
        {
            ResponseString = Response.GetContentAsString();
            UpdatedItemIds = ParseInventoryForSaveSlot(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId, ResponseString);
        }
        OnRecordIapComplete(SaveSlotRequests[Index].McpId, SaveSlotRequests[Index].SaveSlotId, UpdatedItemIds, bWasSuccessful, Response.GetContentAsString());
        LogInternal(((((((("Iap record:" $ " McpId=") $ SaveSlotRequests[Index].McpId) $ " SaveSlot=") $ SaveSlotRequests[Index].SaveSlotId) $ " Successful=") $ string(bWasSuccessful)) $ " ResponseCode=") $ string(ResponseCode));
        SaveSlotRequests.Remove(Index, 1;
    }
}

defaultproperties
{
    CreateSaveSlotUrl="/createsaveslot"
    DeleteSaveSlotUrl="/deletesaveslot"
    ListSaveSlotUrl="/listsaveslot"
    ListItemsUrl="/listitems"
    PurchaseItemUrl="/purchaseitem"
    SellItemUrl="/sellitem"
    EarnItemUrl="/earnitem"
    ConsumeItemUrl="/consumeitem"
    DeleteItemUrl="/deleteitem"
    IapRecordUrl="/recordiap"
}