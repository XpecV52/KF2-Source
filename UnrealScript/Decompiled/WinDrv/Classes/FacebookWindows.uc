/*******************************************************************************
 * FacebookWindows generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class FacebookWindows extends FacebookIntegration
    transient
    native
    config(Engine);

var private native const noexport Pointer VfTable_FTickableObject;
var private native const transient Pointer ChildProcHandle;

// Export UFacebookWindows::execInit(FFrame&, void* const)
native function bool Init();

// Export UFacebookWindows::execAuthorize(FFrame&, void* const)
native function bool Authorize();

// Export UFacebookWindows::execIsAuthorized(FFrame&, void* const)
native function bool IsAuthorized();

// Export UFacebookWindows::execDisconnect(FFrame&, void* const)
native function Disconnect();

function FacebookRequest(string GraphRequest)
{
    Class'HttpFactory'.static.CreateRequest().SetURL((("https://graph.facebook.com/" @ GraphRequest) @ "?access_token=") $ AccessToken).SetVerb("GET").SetProcessRequestCompleteDelegate(FacebookRequestCallback).ProcessRequest();
}

// Export UFacebookWindows::execProcessFacebookRequest(FFrame&, void* const)
native function ProcessFacebookRequest(string Payload, int ResponseCode);

function FacebookRequestCallback(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local string Payload;

    if(bDidSucceed)
    {
        Payload = Response.GetContentAsString();
    }
    ProcessFacebookRequest(Payload, ((bDidSucceed) ? Response.GetResponseCode() : 400));
}

private final event RequestFacebookMeInfo()
{
    UserName = "";
    UserId = "";
    Class'HttpFactory'.static.CreateRequest().SetURL("https://graph.facebook.com/me?access_token=" $ AccessToken).SetHeader("Content-Type", "application/json").SetVerb("GET").SetProcessRequestCompleteDelegate(OnFacebookMeRequestComplete).ProcessRequest();
}

private final function OnFacebookMeRequestComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local string JsonPayload;
    local JsonObject ParsedJson;
    local PlatformInterfaceDelegateResult DelegateResult;

    if(bDidSucceed && Response.GetResponseCode() == 200)
    {
        JsonPayload = Response.GetContentAsString();
        LogInternal(((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "") $ "JsonPayload=") $ JsonPayload);
        if(Len(JsonPayload) > 0)
        {
            DelegateResult.bSuccessful = true;
            ParsedJson = Class'JsonObject'.static.DecodeJson(JsonPayload);
            if(ParsedJson != none)
            {
                UserName = ParsedJson.GetStringValue("name");
                UserId = ParsedJson.GetStringValue("id");                
            }
            else
            {
                LogInternal(((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "Failed to parse JSON");
            }            
        }
        else
        {
            LogInternal(((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "JSON payload is empty");
        }
        CallDelegates(0, DelegateResult);
        RequestFacebookFriends();        
    }
    else
    {
        LogInternal(((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "Failed to get valid response: ") $ " code=") $ string(Response.GetResponseCode()));
        DelegateResult.bSuccessful = false;
        DelegateResult.Data.Type = 3;
        DelegateResult.Data.StringValue = "Failed to request user id and name";
        CallDelegates(0, DelegateResult);
    }
}

private final event RequestFacebookFriends()
{
    FriendsList.Length = 0;
    Class'HttpFactory'.static.CreateRequest().SetURL("https://graph.facebook.com/me/friends?access_token=" $ AccessToken).SetHeader("Content-Type", "application/json").SetVerb("GET").SetProcessRequestCompleteDelegate(OnFacebookFriendsRequestComplete).ProcessRequest();
}

private final function OnFacebookFriendsRequestComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local string JsonPayload;
    local JsonObject ParsedJson, FriendsJson;
    local int JsonIndex;
    local PlatformInterfaceDelegateResult DelegateResult;
    local FacebookFriend Friend;

    if(bDidSucceed && Response.GetResponseCode() == 200)
    {
        JsonPayload = Response.GetContentAsString();
        LogInternal(((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "") $ "JsonPayload=") $ JsonPayload);
        if(Len(JsonPayload) > 0)
        {
            ParsedJson = Class'JsonObject'.static.DecodeJson(JsonPayload);
            if(ParsedJson != none)
            {
                FriendsJson = ParsedJson.GetObject("data");
                if(FriendsJson != none)
                {
                    DelegateResult.bSuccessful = true;
                    JsonIndex = 0;
                    J0x17B:

                    if(JsonIndex < FriendsJson.ObjectArray.Length)
                    {
                        Friend.Name = FriendsJson.ObjectArray[JsonIndex].GetStringValue("name");
                        Friend.Id = FriendsJson.ObjectArray[JsonIndex].GetStringValue("id");
                        FriendsList.AddItem(Friend;
                        ++ JsonIndex;
                        goto J0x17B;
                    }                    
                }
                else
                {
                    LogInternal(((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "Missing data entry in JSON");
                }                
            }
            else
            {
                LogInternal(((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "Failed to parse JSON");
            }            
        }
        else
        {
            LogInternal(((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "JSON payload is empty");
        }
        CallDelegates(3, DelegateResult);        
    }
    else
    {
        LogInternal(((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "Failed to get valid response: ") $ " code=") $ string(Response.GetResponseCode()));
        DelegateResult.bSuccessful = false;
        DelegateResult.Data.Type = 3;
        DelegateResult.Data.StringValue = "Failed to request friends list";
        CallDelegates(3, DelegateResult);
    }
}
