/*******************************************************************************
 * onlinesubsystempc generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class onlinesubsystempc extends OnlineSubsystemCommonImpl
    native
    config(Engine)
    implements(OnlinePlayerInterface,OnlineVoiceInterface,OnlineStatsInterface,OnlineSystemInterface);

var const string LoggedInPlayerName;
var const UniqueNetId LoggedInPlayerId;
var native const array<Pointer> AsyncTasks;
var config string ProfileDataDirectory;
var config string ProfileDataExtension;
var array< delegate<OnReadProfileSettingsComplete> > ReadProfileSettingsDelegates;
var array< delegate<OnWriteProfileSettingsComplete> > WriteProfileSettingsDelegates;
var OnlineProfileSettings CachedProfile;
var array< delegate<OnRecognitionComplete> > SpeechRecognitionCompleteDelegates;
var array< delegate<OnReadFriendsComplete> > ReadFriendsDelegates;
var array< delegate<OnFriendsChange> > FriendsChangeDelegates;
var array< delegate<OnMutingChange> > MutingChangeDelegates;
var delegate<OnLoginChange> __OnLoginChange__Delegate;
var delegate<OnLoginCancelled> __OnLoginCancelled__Delegate;
var delegate<OnCurrentUserChanged> __OnCurrentUserChanged__Delegate;
var delegate<OnTokenAndSignatureRetrieved> __OnTokenAndSignatureRetrieved__Delegate;
var delegate<OnMutingChange> __OnMutingChange__Delegate;
var delegate<OnReadTitleFileComplete> __OnReadTitleFileComplete__Delegate;
var delegate<OnPlayerTalkingStateChange> __OnPlayerTalkingStateChange__Delegate;
var delegate<OnFriendsChange> __OnFriendsChange__Delegate;
var delegate<OnLoginComplete> __OnLoginComplete__Delegate;
var delegate<OnLoginFailed> __OnLoginFailed__Delegate;
var delegate<OnSystemUserControllerPairingChanged> __OnSystemUserControllerPairingChanged__Delegate;
var delegate<OnLogoutCompleted> __OnLogoutCompleted__Delegate;
var delegate<OnPrivilegeLevelChecked> __OnPrivilegeLevelChecked__Delegate;
var delegate<OnReadProfileSettingsComplete> __OnReadProfileSettingsComplete__Delegate;
var delegate<OnWriteProfileSettingsComplete> __OnWriteProfileSettingsComplete__Delegate;
var delegate<OnLoginStatusChange> __OnLoginStatusChange__Delegate;
var delegate<OnReadFriendsComplete> __OnReadFriendsComplete__Delegate;
var delegate<OnRecognitionComplete> __OnRecognitionComplete__Delegate;
var delegate<OnReadOnlineStatsComplete> __OnReadOnlineStatsComplete__Delegate;
var delegate<OnFlushOnlineStatsComplete> __OnFlushOnlineStatsComplete__Delegate;
var delegate<OnRegisterHostStatGuidComplete> __OnRegisterHostStatGuidComplete__Delegate;
var delegate<OnLinkStatusChange> __OnLinkStatusChange__Delegate;
var delegate<OnExternalUIChange> __OnExternalUIChange__Delegate;
var delegate<OnControllerChange> __OnControllerChange__Delegate;
var delegate<OnConnectionStatusChange> __OnConnectionStatusChange__Delegate;
var delegate<OnStorageDeviceChange> __OnStorageDeviceChange__Delegate;
var delegate<OnKeyboardInputComplete> __OnKeyboardInputComplete__Delegate;
var delegate<OnWritePlayerStorageComplete> __OnWritePlayerStorageComplete__Delegate;
var delegate<OnReadPlayerStorageForNetIdComplete> __OnReadPlayerStorageForNetIdComplete__Delegate;
var delegate<OnReadPlayerStorageComplete> __OnReadPlayerStorageComplete__Delegate;
var delegate<OnAddFriendByNameComplete> __OnAddFriendByNameComplete__Delegate;
var delegate<OnFriendInviteReceived> __OnFriendInviteReceived__Delegate;
var delegate<OnReceivedGameInvite> __OnReceivedGameInvite__Delegate;
var delegate<OnReceivedGameInviteById> __OnReceivedGameInviteById__Delegate;
var delegate<OnJoinFriendGameComplete> __OnJoinFriendGameComplete__Delegate;
var delegate<OnFriendMessageReceived> __OnFriendMessageReceived__Delegate;
var delegate<OnUnlockAchievementComplete> __OnUnlockAchievementComplete__Delegate;
var delegate<OnReadAchievementsComplete> __OnReadAchievementsComplete__Delegate;
var delegate<OnStatisticChanged> __OnStatisticChanged__Delegate;

// Export Uonlinesubsystempc::execInit(FFrame&, void* const)
native event bool Init();

delegate OnLoginChange(byte LocalUserNum);

delegate OnLoginCancelled();

delegate OnCurrentUserChanged(byte LocalUserNum, string CurrentUser, string LoggedInUser);

delegate OnTokenAndSignatureRetrieved(byte LocalUserNum, string URL, string Token, string Signature);

function GetTokenAndSignatureForURL(byte LocalUserNum, string URL);

function AddURLTokenRetrievedDelegate(byte LocalUserNum, delegate<OnTokenAndSignatureRetrieved> tsrDelegate);

function ClearURLTokenRetrievedDelegate(byte LocalUserNum, delegate<OnTokenAndSignatureRetrieved> tsrDelegate);

delegate OnMutingChange();

delegate OnReadTitleFileComplete(bool bWasSuccessful, string Filename);

function bool ReadTitleFile(string FileToRead);

function AddReadTitleFileCompleteDelegate(delegate<OnReadTitleFileComplete> ReadTitleFileCompleteDelegate);

function ClearReadTitleFileCompleteDelegate(delegate<OnReadTitleFileComplete> ReadTitleFileCompleteDelegate);

function bool GetTitleFileContents(string Filename, out array<byte> FileContents);

function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetTitleFileState(string Filename);

delegate OnPlayerTalkingStateChange(UniqueNetId Player, bool bIsTalking);

function AddPlayerTalkingDelegate(delegate<OnPlayerTalkingStateChange> TalkerDelegate);

function ClearPlayerTalkingDelegate(delegate<OnPlayerTalkingStateChange> TalkerDelegate);

delegate OnFriendsChange();

function bool ShowLoginUI(byte LocalUserNum, optional bool bShowOnlineOnly)
{
    bShowOnlineOnly = false;
}

function bool Login(byte LocalUserNum, string LoginName, string Password, optional bool bWantsLocalOnly);

delegate OnLoginComplete(byte LocalUserNum, bool bWasSuccessful, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode);

function AddLoginCompleteDelegate(byte LocalUserNum, delegate<OnLoginComplete> InDelegate);

function ClearLoginCompleteDelegate(byte LocalUserNum, delegate<OnLoginComplete> InDelegate);

function bool AutoLogin();

delegate OnLoginFailed(byte LocalUserNum, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode);

function AddLoginFailedDelegate(byte LocalUserNum, delegate<OnLoginFailed> LoginDelegate);

function ClearLoginFailedDelegate(byte LocalUserNum, delegate<OnLoginFailed> LoginDelegate);

delegate OnSystemUserControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum);

function AddSystemUserContrllerPairingChangedDelegate(delegate<OnSystemUserControllerPairingChanged> PairingChangeDelegate);

function ClearSystemUserContrllerPairingChangedDelegate(delegate<OnSystemUserControllerPairingChanged> PairingChangeDelegate);

function bool PairUserAndControllerAtIndex(byte PlayerIndex, byte ControllerIndex, int PairIndex);

function bool Logout(byte LocalUserNum);

delegate OnLogoutCompleted(bool bWasSuccessful);

function AddLogoutCompletedDelegate(byte LocalUserNum, delegate<OnLogoutCompleted> LogoutDelegate);

function ClearLogoutCompletedDelegate(byte LocalUserNum, delegate<OnLogoutCompleted> LogoutDelegate);

function Engine.OnlineSubsystem.ELoginStatus GetLoginStatus(byte LocalUserNum)
{
    return 0;
}

function bool GetUniquePlayerId(byte LocalUserNum, out UniqueNetId PlayerID)
{
    PlayerID = LoggedInPlayerId;
    return true;
}

function string GetPlayerNickname(byte LocalUserNum)
{
    return LoggedInPlayerName;
}

function bool GetControllerIdFromNetId(UniqueNetId PlayerID, out byte ControllerId);

delegate OnPrivilegeLevelChecked(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevel, bool bDiffersFromHint);

function AddPrivilegeLevelCheckedDelegate(delegate<OnPrivilegeLevelChecked> PrivilegeDelegate);

function ClearPrivilegeLevelCheckedDelegate(delegate<OnPrivilegeLevelChecked> PrivilegeDelegate);

function bool CanPlayOnline(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanCommunicateText(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanCommunicateVideo(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanCommunicateVoice(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShareUserCreatedContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanPurchaseContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanViewPlayerProfiles(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShowPresenceInformation(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanRecordDVRClips(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanUseCloudStorage(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanAccessPremiumContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanAccessPremiumVideoContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanBrowseInternet(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShareWithSocialNetwork(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShareKinectContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanUploadFitnessData(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool IsFriend(byte LocalUserNum, UniqueNetId PlayerID);

function bool AreAnyFriends(byte LocalUserNum, out array<FriendsQuery> Query);

function bool IsMuted(byte LocalUserNum, UniqueNetId PlayerID);

function bool IsTalkerMuted(UniqueNetId ConsoleId);

function bool ShowFriendsUI(byte LocalUserNum);

function AddLoginChangeDelegate(delegate<OnLoginChange> LoginDelegate);

function ClearLoginChangeDelegate(delegate<OnLoginChange> LoginDelegate);

function AddLoginCancelledDelegate(delegate<OnLoginCancelled> CancelledDelegate);

function ClearLoginCancelledDelegate(delegate<OnLoginCancelled> CancelledDelegate);

function AddCurrentUserChangedDelegate(delegate<OnCurrentUserChanged> CurrentUserDelegate);

function ClearCurrentUserChangedDelegate(delegate<OnCurrentUserChanged> CurrentUserDelegate);

function bool IsLocalLogin(byte LocalUserNum);

function bool IsGuestLogin(byte LocalUserNum);

function AddMutingChangeDelegate(delegate<OnMutingChange> MutingDelegate)
{
    if(MutingChangeDelegates.Find(MutingDelegate == -1)
    {
        MutingChangeDelegates[MutingChangeDelegates.Length] = MutingDelegate;
    }
}

function ClearMutingChangeDelegate(delegate<OnFriendsChange> MutingDelegate)
{
    local int RemoveIndex;

    RemoveIndex = MutingChangeDelegates.Find(MutingDelegate;
    if(RemoveIndex != -1)
    {
        MutingChangeDelegates.Remove(RemoveIndex, 1;
    }
}

function AddFriendsChangeDelegate(byte LocalUserNum, delegate<OnFriendsChange> FriendsDelegate)
{
    if(LocalUserNum == 0)
    {
        if(FriendsChangeDelegates.Find(FriendsDelegate == -1)
        {
            FriendsChangeDelegates[FriendsChangeDelegates.Length] = FriendsDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearFriendsChangeDelegate()");
    }
}

function ClearFriendsChangeDelegate(byte LocalUserNum, delegate<OnFriendsChange> FriendsDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = FriendsChangeDelegates.Find(FriendsDelegate;
        if(RemoveIndex != -1)
        {
            FriendsChangeDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearFriendsChangeDelegate()");
    }
}

// Export Uonlinesubsystempc::execReadProfileSettings(FFrame&, void* const)
native function bool ReadProfileSettings(byte LocalUserNum, OnlineProfileSettings ProfileSettings);

delegate OnReadProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful);

function AddReadProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadProfileSettingsComplete> ReadProfileSettingsCompleteDelegate)
{
    if(LocalUserNum == 0)
    {
        if(ReadProfileSettingsDelegates.Find(ReadProfileSettingsCompleteDelegate == -1)
        {
            ReadProfileSettingsDelegates[ReadProfileSettingsDelegates.Length] = ReadProfileSettingsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddReadProfileSettingsCompleteDelegate()");
    }
}

function ClearReadProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadProfileSettingsComplete> ReadProfileSettingsCompleteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = ReadProfileSettingsDelegates.Find(ReadProfileSettingsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            ReadProfileSettingsDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearReadProfileSettingsCompleteDelegate()");
    }
}

function OnlineProfileSettings GetProfileSettings(byte LocalUserNum)
{
    if(LocalUserNum == 0)
    {
        return CachedProfile;
    }
    return none;
}

// Export Uonlinesubsystempc::execWriteProfileSettings(FFrame&, void* const)
native function bool WriteProfileSettings(byte LocalUserNum, OnlineProfileSettings ProfileSettings);

delegate OnWriteProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful);

function AddWriteProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnWriteProfileSettingsComplete> WriteProfileSettingsCompleteDelegate)
{
    if(LocalUserNum == 0)
    {
        if(WriteProfileSettingsDelegates.Find(WriteProfileSettingsCompleteDelegate == -1)
        {
            WriteProfileSettingsDelegates[WriteProfileSettingsDelegates.Length] = WriteProfileSettingsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddWriteProfileSettingsCompleteDelegate()");
    }
}

function ClearWriteProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnWriteProfileSettingsComplete> WriteProfileSettingsCompleteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = WriteProfileSettingsDelegates.Find(WriteProfileSettingsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            WriteProfileSettingsDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearWriteProfileSettingsCompleteDelegate()");
    }
}

delegate OnLoginStatusChange(Engine.OnlineSubsystem.ELoginStatus NewStatus, UniqueNetId NewId);

function AddLoginStatusChangeDelegate(delegate<OnLoginStatusChange> LoginStatusDelegate, byte LocalUserNum);

function ClearLoginStatusChangeDelegate(delegate<OnLoginStatusChange> LoginStatusDelegate, byte LocalUserNum);

delegate OnReadFriendsComplete(bool bWasSuccessful);

function bool ReadFriendsList(byte LocalUserNum, optional int Count, optional int StartingAt)
{
    local int Index;
    local delegate<OnReadFriendsComplete> CallDelegate;

    Index = 0;
    J0x0D:

    if(Index < ReadFriendsDelegates.Length)
    {
        CallDelegate = ReadFriendsDelegates[Index];
        if(CallDelegate != none)
        {
            OnReadFriendsComplete(false);
        }
        ++ Index;
        goto J0x0D;
    }
    return false;
}

function AddReadFriendsCompleteDelegate(byte LocalUserNum, delegate<OnReadFriendsComplete> ReadFriendsCompleteDelegate)
{
    if(LocalUserNum == 0)
    {
        if(ReadFriendsDelegates.Find(ReadFriendsCompleteDelegate == -1)
        {
            ReadFriendsDelegates[ReadFriendsDelegates.Length] = ReadFriendsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddReadFriendsCompleteDelegate()");
    }
}

function ClearReadFriendsCompleteDelegate(byte LocalUserNum, delegate<OnReadFriendsComplete> ReadFriendsCompleteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = ReadFriendsDelegates.Find(ReadFriendsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            ReadFriendsDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearReadFriendsCompleteDelegate()");
    }
}

function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetFriendsList(byte LocalUserNum, out array<OnlineFriend> Friends, optional int Count, optional int StartingAt);

function bool RegisterLocalTalker(byte LocalUserNum, optional byte ChannelIndex);

function bool UnregisterLocalTalker(byte LocalUserNum, optional byte ChannelIndex);

function bool AreAnyLocalTalkersRegistered();

function ReceiveReliableVoicePacket(byte MessageType, UniqueNetId Sender, int Length, byte InData[60]);

function bool RegisterRemoteTalker(UniqueNetId PlayerID);

function bool UnregisterRemoteTalker(UniqueNetId PlayerID);

function bool IsLocalPlayerTalking(byte LocalUserNum);

function bool IsRemotePlayerTalking(UniqueNetId PlayerID);

function bool IsHeadsetPresent(byte LocalUserNum);

function bool SetRemoteTalkerPriority(byte LocalUserNum, UniqueNetId PlayerID, int Priority);

function bool MuteRemoteTalker(byte LocalUserNum, UniqueNetId PlayerID, optional bool bIsSystemWide);

function bool UnmuteRemoteTalker(byte LocalUserNum, UniqueNetId PlayerID, optional bool bIsSystemWide);

function StartNetworkedVoice(byte LocalUserNum);

function StopNetworkedVoice(byte LocalUserNum);

function bool StartSpeechRecognition(byte LocalUserNum);

function bool StopSpeechRecognition(byte LocalUserNum);

function bool GetRecognitionResults(byte LocalUserNum, out array<SpeechRecognizedWord> Words);

delegate OnRecognitionComplete();

function AddRecognitionCompleteDelegate(byte LocalUserNum, delegate<OnRecognitionComplete> RecognitionDelegate)
{
    if(SpeechRecognitionCompleteDelegates.Find(RecognitionDelegate == -1)
    {
        SpeechRecognitionCompleteDelegates[SpeechRecognitionCompleteDelegates.Length] = RecognitionDelegate;
    }
}

function ClearRecognitionCompleteDelegate(byte LocalUserNum, delegate<OnRecognitionComplete> RecognitionDelegate)
{
    local int RemoveIndex;

    RemoveIndex = SpeechRecognitionCompleteDelegates.Find(RecognitionDelegate;
    if(RemoveIndex != -1)
    {
        SpeechRecognitionCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool SelectVocabulary(byte LocalUserNum, int VocabularyId);

function bool SetSpeechRecognitionObject(byte LocalUserNum, SpeechRecognition SpeechRecogObj);

delegate OnReadOnlineStatsComplete(bool bWasSuccessful);

function bool SendPlayerSessionStart(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId);

function bool SendPlayerSessionEnd(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId, int ExitStatusId);

function bool SendPlayerSessionPause(byte LocalUserNum, string MultiplayerCorrelationId);

function bool SendPlayerSessionResume(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId);

function bool SendTestEvent(byte LocalUserNum, string TestStatInstancing, int TestStatParameter);

function bool ReadOnlineStatsForPlayer(byte LocalUserNum, OnlineStatsRead StatsRead);

function bool ReadOnlineStats(byte LocalUserNum, const out array<UniqueNetId> Players, OnlineStatsRead StatsRead);

function bool ReadOnlineStatsForFriends(byte LocalUserNum, OnlineStatsRead StatsRead, optional bool FavoriteFriendsOnly, optional int NumToRead)
{
    FavoriteFriendsOnly = false;
    NumToRead = 100;
}

function bool ReadOnlineStatsByRank(byte LocalUserNum, OnlineStatsRead StatsRead, optional int StartIndex, optional int NumToRead)
{
    StartIndex = 1;
    NumToRead = 100;
}

function bool ReadOnlineStatsByRankAroundPlayer(byte LocalUserNum, OnlineStatsRead StatsRead, optional int NumRows)
{
    NumRows = 10;
}

function AddReadOnlineStatsCompleteDelegate(delegate<OnReadOnlineStatsComplete> ReadOnlineStatsCompleteDelegate);

function ClearReadOnlineStatsCompleteDelegate(delegate<OnReadOnlineStatsComplete> ReadOnlineStatsCompleteDelegate);

function FreeStats(OnlineStatsRead StatsRead);

function bool WriteOnlineStats(name SessionName, UniqueNetId Player, OnlineStatsWrite StatsWrite);

function bool FlushOnlineStats(name SessionName);

delegate OnFlushOnlineStatsComplete(name SessionName, bool bWasSuccessful);

function AddFlushOnlineStatsCompleteDelegate(delegate<OnFlushOnlineStatsComplete> FlushOnlineStatsCompleteDelegate);

function ClearFlushOnlineStatsCompleteDelegate(delegate<OnFlushOnlineStatsComplete> FlushOnlineStatsCompleteDelegate);

function bool WriteOnlinePlayerScores(name SessionName, int LeaderboardId, const out array<OnlinePlayerScore> PlayerScores);

function string GetHostStatGuid();

function bool RegisterHostStatGuid(const out string HostStatGuid);

delegate OnRegisterHostStatGuidComplete(bool bWasSuccessful);

function AddRegisterHostStatGuidCompleteDelegate(delegate<OnRegisterHostStatGuidComplete> RegisterHostStatGuidCompleteDelegate);

function ClearRegisterHostStatGuidCompleteDelegateDelegate(delegate<OnRegisterHostStatGuidComplete> RegisterHostStatGuidCompleteDelegate);

function string GetClientStatGuid();

function bool RegisterStatGuid(UniqueNetId PlayerID, const out string ClientStatGuid);

function CalcAggregateSkill(array<Double> Mus, array<Double> Sigmas, out Double OutAggregateMu, out Double OutAggregateSigma);

event string GetPlayerNicknameFromIndex(int UserIndex)
{
    if(UserIndex == 0)
    {
        return LoggedInPlayerName;
    }
    return "";
}

function bool HasLinkConnection()
{
    return true;
}

delegate OnLinkStatusChange(bool bIsConnected);

function AddLinkStatusChangeDelegate(delegate<OnLinkStatusChange> LinkStatusDelegate);

function ClearLinkStatusChangeDelegate(delegate<OnLinkStatusChange> LinkStatusDelegate);

delegate OnExternalUIChange(bool bIsOpening);

function AddExternalUIChangeDelegate(delegate<OnExternalUIChange> ExternalUIDelegate);

function ClearExternalUIChangeDelegate(delegate<OnExternalUIChange> ExternalUIDelegate);

function Engine.OnlineSubsystem.ENetworkNotificationPosition GetNetworkNotificationPosition();

function SetNetworkNotificationPosition(Engine.OnlineSubsystem.ENetworkNotificationPosition NewPos);

delegate OnControllerChange(int ControllerId, bool bIsConnected, bool bPauseGame);

function AddControllerChangeDelegate(delegate<OnControllerChange> ControllerChangeDelegate);

function ClearControllerChangeDelegate(delegate<OnControllerChange> ControllerChangeDelegate);

function bool IsControllerConnected(int ControllerId)
{
    if(ControllerId == 0)
    {
        return true;
    }
    return false;
}

function Engine.OnlineSubsystem.EOnlineServerConnectionStatus GetCurrentConnectionStatus()
{
    return 1;
}

delegate OnConnectionStatusChange(Engine.OnlineSubsystem.EOnlineServerConnectionStatus ConnectionStatus);

function AddConnectionStatusChangeDelegate(delegate<OnConnectionStatusChange> ConnectionStatusDelegate);

function ClearConnectionStatusChangeDelegate(delegate<OnConnectionStatusChange> ConnectionStatusDelegate);

function Engine.OnlineSubsystem.ENATType GetNATType()
{
    return 1;
}

function int GetLocale()
{
    return 0;
}

delegate OnStorageDeviceChange();

function AddStorageDeviceChangeDelegate(delegate<OnStorageDeviceChange> StorageDeviceChangeDelegate);

function ClearStorageDeviceChangeDelegate(delegate<OnStorageDeviceChange> StorageDeviceChangeDelegate);

function SetOnlineStatus(byte LocalUserNum, string StatusString, optional bool PlayerActive)
{
    PlayerActive = true;
}

function bool ShowKeyboardUI(byte LocalUserNum, string TitleText, string DescriptionText, optional bool bIsPassword, optional bool bShouldValidate, optional string DefaultText, optional int MaxResultLength)
{
    bIsPassword = false;
    bShouldValidate = true;    
    MaxResultLength = 256;
}

function bool HideKeyboardUI(byte LocalUserNum);

delegate OnKeyboardInputComplete(bool bWasSuccessful);

function AddKeyboardInputDoneDelegate(delegate<OnKeyboardInputComplete> InputDelegate);

function ClearKeyboardInputDoneDelegate(delegate<OnKeyboardInputComplete> InputDelegate);

function string GetKeyboardInputResults(out byte bWasCanceled);

delegate OnWritePlayerStorageComplete(byte LocalUserNum, bool bWasSuccessful);

function AddWritePlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnWritePlayerStorageComplete> WritePlayerStorageCompleteDelegate);

delegate OnReadPlayerStorageForNetIdComplete(UniqueNetId NetId, bool bWasSuccessful);

function AddReadPlayerStorageForNetIdCompleteDelegate(UniqueNetId NetId, delegate<OnReadPlayerStorageForNetIdComplete> ReadPlayerStorageForNetIdCompleteDelegate);

function bool ReadPlayerStorageForNetId(byte LocalUserNum, UniqueNetId NetId, OnlinePlayerStorage PlayerStorage);

function ClearReadPlayerStorageForNetIdCompleteDelegate(UniqueNetId NetId, delegate<OnReadPlayerStorageForNetIdComplete> ReadPlayerStorageForNetIdCompleteDelegate);

function bool ReadPlayerStorage(byte LocalUserNum, OnlinePlayerStorage PlayerStorage, optional int DeviceID)
{
    DeviceID = -1;
}

delegate OnReadPlayerStorageComplete(byte LocalUserNum, bool bWasSuccessful);

function AddReadPlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnReadPlayerStorageComplete> ReadPlayerStorageCompleteDelegate);

function ClearReadPlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnReadPlayerStorageComplete> ReadPlayerStorageCompleteDelegate);

function OnlinePlayerStorage GetPlayerStorage(byte LocalUserNum)
{
    return none;
}

function bool WritePlayerStorage(byte LocalUserNum, OnlinePlayerStorage PlayerStorage, optional int DeviceID)
{
    DeviceID = -1;
}

function ClearWritePlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnWritePlayerStorageComplete> WritePlayerStorageCompleteDelegate);

function bool AddFriend(byte LocalUserNum, UniqueNetId NewFriend, optional string Message);

function bool AddFriendByName(byte LocalUserNum, string FriendName, optional string Message);

delegate OnAddFriendByNameComplete(bool bWasSuccessful);

function AddAddFriendByNameCompleteDelegate(byte LocalUserNum, delegate<OnAddFriendByNameComplete> FriendDelegate);

function ClearAddFriendByNameCompleteDelegate(byte LocalUserNum, delegate<OnAddFriendByNameComplete> FriendDelegate);

function bool AcceptFriendInvite(byte LocalUserNum, UniqueNetId RequestingPlayer);

function bool DenyFriendInvite(byte LocalUserNum, UniqueNetId RequestingPlayer);

function bool RemoveFriend(byte LocalUserNum, UniqueNetId FormerFriend);

delegate OnFriendInviteReceived(byte LocalUserNum, UniqueNetId RequestingPlayer, string RequestingNick, string Message);

function AddFriendInviteReceivedDelegate(byte LocalUserNum, delegate<OnFriendInviteReceived> InviteDelegate);

function ClearFriendInviteReceivedDelegate(byte LocalUserNum, delegate<OnFriendInviteReceived> InviteDelegate);

function bool SendMessageToFriend(byte LocalUserNum, UniqueNetId Friend, string Message);

function bool SendGameInviteToFriend(byte LocalUserNum, name SessionName, UniqueNetId Friend, optional string Text);

function bool SendGameInviteToFriends(byte LocalUserNum, name SessionName, array<UniqueNetId> Friends, optional string Text);

function bool SendGameInviteToUsers(string SessionId, name SessionName, array<string> MembersToInvite, optional string Text);

delegate OnReceivedGameInvite(byte LocalUserNum, string InviterName);

function AddReceivedGameInviteDelegate(byte LocalUserNum, delegate<OnReceivedGameInvite> ReceivedGameInviteDelegate);

function ClearReceivedGameInviteDelegate(byte LocalUserNum, delegate<OnReceivedGameInvite> ReceivedGameInviteDelegate);

delegate OnReceivedGameInviteById(byte LocalUserNum, UniqueNetId InviterId);

function AddReceivedGameInviteByIdDelegate(byte LocalUserNum, delegate<OnReceivedGameInviteById> ReceivedGameInviteDelegate);

function ClearReceivedGameInviteByIdDelegate(byte LocalUserNum, delegate<OnReceivedGameInviteById> ReceivedGameInviteDelegate);

function bool JoinFriendGame(byte LocalUserNum, UniqueNetId Friend);

delegate OnJoinFriendGameComplete(bool bWasSuccessful);

function AddJoinFriendGameCompleteDelegate(delegate<OnJoinFriendGameComplete> JoinFriendGameCompleteDelegate);

function ClearJoinFriendGameCompleteDelegate(delegate<OnJoinFriendGameComplete> JoinFriendGameCompleteDelegate);

function GetFriendMessages(byte LocalUserNum, out array<OnlineFriendMessage> FriendMessages);

delegate OnFriendMessageReceived(byte LocalUserNum, UniqueNetId SendingPlayer, string SendingNick, string Message);

function AddFriendMessageReceivedDelegate(byte LocalUserNum, delegate<OnFriendMessageReceived> MessageDelegate);

function ClearFriendMessageReceivedDelegate(byte LocalUserNum, delegate<OnFriendMessageReceived> MessageDelegate);

function bool MuteAll(byte LocalUserNum, bool bAllowFriends);

function bool UnmuteAll(byte LocalUserNum);

function bool UpdatePlayerMuteSetting(bool PlayerMuteSetting);

function bool DeleteMessage(byte LocalUserNum, int MessageIndex);

function bool UnlockAchievement(byte LocalUserNum, int AchievementId, optional float PercentComplete)
{
    PercentComplete = 100;
}

delegate OnUnlockAchievementComplete(bool bWasSuccessful);

function AddUnlockAchievementCompleteDelegate(byte LocalUserNum, delegate<OnUnlockAchievementComplete> UnlockAchievementCompleteDelegate);

function ClearUnlockAchievementCompleteDelegate(byte LocalUserNum, delegate<OnUnlockAchievementComplete> UnlockAchievementCompleteDelegate);

function bool ReadAchievements(byte LocalUserNum, optional int TitleId, optional bool bShouldReadText, optional bool bShouldReadImages)
{
    TitleId = 0;
    bShouldReadText = true;
    bShouldReadImages = false;
}

delegate OnReadAchievementsComplete(int TitleId);

function AddReadAchievementsCompleteDelegate(byte LocalUserNum, delegate<OnReadAchievementsComplete> ReadAchievementsCompleteDelegate);

function ClearReadAchievementsCompleteDelegate(byte LocalUserNum, delegate<OnReadAchievementsComplete> ReadAchievementsCompleteDelegate);

function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetAchievements(byte LocalUserNum, out array<AchievementDetails> Achievements, optional int TitleId)
{
    TitleId = 0;
}

function ClearAchievements(byte LocalUserNum, optional int TitleId)
{
    TitleId = 0;
}

delegate OnStatisticChanged(UniqueNetId PlayerNetId, name StatName, string NewStatValue);

function SubscribeToStatisticEvent(byte LocalUserNum, UniqueNetId PlayerNetId, name StatName, delegate<OnStatisticChanged> EventDelegate);

function UnsubscribeToStatisticEvent(byte LocalUserNum, UniqueNetId PlayerNetId, name StatName);

function CheckForGameInviteOnLaunch();

function StartRealtimeMultiplay();

function StopRealtimeMultiplay();

defaultproperties
{
    LoggedInPlayerName="Player1"
}