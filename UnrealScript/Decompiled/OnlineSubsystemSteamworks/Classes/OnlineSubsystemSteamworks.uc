/*******************************************************************************
 * OnlineSubsystemSteamworks generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineSubsystemSteamworks extends OnlineSubsystemCommonImpl
    native
    config(Engine)
    implements(OnlinePlayerInterface,OnlinePlayerInterfaceEx,OnlineVoiceInterface,OnlineStatsInterface,OnlineSystemInterface,UserCloudFileInterface,SharedCloudFileInterface);

enum EMuteType
{
    MUTE_None,
    MUTE_AllButFriends,
    MUTE_All,
    MUTE_MAX
};

enum ELeaderboardRequestType
{
    LRT_Global,
    LRT_Player,
    LRT_Friends,
    LRT_MAX
};

enum ELeaderboardSortType
{
    LST_Ascending,
    LST_Descending,
    LST_MAX
};

enum ELeaderboardFormat
{
    LF_Number,
    LF_Seconds,
    LF_Milliseconds,
    LF_MAX
};

enum ELeaderboardUpdateType
{
    LUT_KeepBest,
    LUT_Force,
    LUT_MAX
};

struct native LocalTalkerSteam extends LocalTalker
{
    var OnlineSubsystemSteamworks.EMuteType MuteType;
};

struct native PlayerStat
{
    var int ViewId;
    var int ColumnId;
    var const SettingsData Data;

    structdefaultproperties
    {
        ViewId=0
        ColumnId=0
        Data=(Type=ESettingsDataType.SDT_Empty,Value1=0,Key=0)
    }
};

struct native PendingPlayerStats
{
    var const UniqueNetId Player;
    var const string PlayerName;
    var const string StatGuid;
    var const array<PlayerStat> Stats;
    var const OnlinePlayerScore Score;
    var const string Place;

    structdefaultproperties
    {
        Player=(Uid=none)
        PlayerName=""
        StatGuid=""
        Stats=none
        Score=(PlayerID=(Uid=none),TeamID=0,Score=0)
        Place=""
    }
};

struct native ProfileSettingsCache
{
    var OnlineProfileSettings Profile;
    var array< delegate<OnReadProfileSettingsComplete> > ReadDelegates;
    var array< delegate<OnWriteProfileSettingsComplete> > WriteDelegates;
    var array< delegate<OnProfileDataChanged> > ProfileDataChangedDelegates;

    structdefaultproperties
    {
        Profile=none
        ReadDelegates=none
        WriteDelegates=none
        ProfileDataChangedDelegates=none
    }
};

struct native DeviceIdCache
{
    var int DeviceID;
    var delegate<OnDeviceSelectionComplete> DeviceSelectionMulticast;
    var array< delegate<OnDeviceSelectionComplete> > DeviceSelectionDelegates;

    structdefaultproperties
    {
        DeviceID=0
        viceSelectio=None
        DeviceSelectionDelegates=none
    }
};

struct native OnlineStatusMapping
{
    var int StatusId;
    var const localized string StatusString;

    structdefaultproperties
    {
        StatusId=0
        StatusString=""
    }
};

struct native ControllerConnectionState
{
    var const int bIsControllerConnected;
    var const int bLastIsControllerConnected;

    structdefaultproperties
    {
        bIsControllerConnected=0
        bLastIsControllerConnected=0
    }
};

struct native SteamUserCloud
{
    var string UserId;
    var array<TitleFile> UserCloudFileData;

    structdefaultproperties
    {
        UserId=""
        UserCloudFileData=none
    }
};

struct native SteamUserCloudMetadata
{
    var string UserId;
    var array<EmsFile> UserCloudMetadata;

    structdefaultproperties
    {
        UserId=""
        UserCloudMetadata=none
    }
};

struct native QueuedAvatarRequest
{
    var const float CheckTime;
    var const int NumberOfAttempts;
    var const UniqueNetId PlayerNetId;
    var const int Size;

    structdefaultproperties
    {
        CheckTime=0
        NumberOfAttempts=0
        PlayerNetId=(Uid=none)
        Size=0
    }
};

struct native AchievementMappingInfo
{
    var int AchievementId;
    var name AchievementName;
    var int ViewId;
    var int ProgressCount;
    var int MaxProgress;
    var bool bAutoUnlock;

    structdefaultproperties
    {
        AchievementId=0
        AchievementName=None
        ViewId=0
        ProgressCount=0
        MaxProgress=0
        bAutoUnlock=false
    }
};

struct native AchievementProgressStat
{
    var int AchievementId;
    var int Progress;
    var int MaxProgress;
    var bool bUnlock;

    structdefaultproperties
    {
        AchievementId=0
        Progress=0
        MaxProgress=0
        bUnlock=false
    }
};

struct LeaderboardHandle
{
    var private const QWord Dud;

    structdefaultproperties
    {
        Dud=none
    }
};

struct native LeaderboardTemplate
{
    var string LeaderboardName;
    var OnlineSubsystemSteamworks.ELeaderboardUpdateType UpdateType;
    var const int LeaderboardSize;
    var const OnlineSubsystemSteamworks.ELeaderboardSortType SortType;
    var const OnlineSubsystemSteamworks.ELeaderboardFormat DisplayFormat;
    var const LeaderboardHandle LeaderboardRef;
    var const bool bLeaderboardInitializing;
    var const bool bLeaderboardInitiated;

    structdefaultproperties
    {
        LeaderboardName=""
        UpdateType=ELeaderboardUpdateType.LUT_KeepBest
        LeaderboardSize=0
        SortType=ELeaderboardSortType.LST_Ascending
        DisplayFormat=ELeaderboardFormat.LF_Number
        LeaderboardRef=(Dud=none)
        bLeaderboardInitializing=false
        bLeaderboardInitiated=false
    }
};

struct native DeferredLeaderboardRead
{
    var string LeaderboardName;
    var byte RequestType;
    var int Start;
    var int End;
    var array<UniqueNetId> PlayerList;

    structdefaultproperties
    {
        LeaderboardName=""
        RequestType=0
        Start=0
        End=0
        PlayerList=none
    }
};

struct native DeferredLeaderboardWrite
{
    var string LeaderboardName;
    var int Score;
    var array<int> LeaderboardData;

    structdefaultproperties
    {
        LeaderboardName=""
        Score=0
        LeaderboardData=none
    }
};

struct native LeaderboardEntry
{
    var UniqueNetId PlayerUID;
    var int Rank;
    var int Score;
    var array<int> LeaderboardData;

    structdefaultproperties
    {
        PlayerUID=(Uid=none)
        Rank=0
        Score=0
        LeaderboardData=none
    }
};

struct native ViewIdToLeaderboardName
{
    var int ViewId;
    var string LeaderboardName;

    structdefaultproperties
    {
        ViewId=0
        LeaderboardName=""
    }
};

struct native SteamPlayerClanData
{
    var const string ClanName;
    var const string ClanTag;

    structdefaultproperties
    {
        ClanName=""
        ClanTag=""
    }
};

var bool bStoringAchievement;
var bool bClientStatsStorePending;
var bool bGSStatsStoresSuccess;
var const bool bNeedsKeyboardTicking;
var const bool bLastHasConnection;
var bool bIsStatsSessionOk;
var const config bool bShouldUseMcp;
var int TotalGSStatsStoresPending;
var Engine.OnlineSubsystem.EOnlineEnumerationReadState UserStatsReceivedState;
var const Engine.OnlineSubsystem.ELoginStatus LoggedInStatus;
var const byte bWasKeyboardInputCanceled;
var config Engine.OnlineSubsystem.ENetworkNotificationPosition CurrentNotificationPosition;
var const OnlineGameInterfaceSteamworks CachedGameInt;
var const localized string LocalProfileName;
var const string LoggedInPlayerName;
var const UniqueNetId LoggedInPlayerId;
var const int LoggedInPlayerNum;
var array< delegate<OnWriteProfileSettingsComplete> > WriteProfileSettingsDelegates;
var OnlineProfileSettings CachedProfile;
var array< delegate<OnReadPlayerStorageComplete> > LocalPlayerStorageReadDelegates;
var array< delegate<OnWritePlayerStorageComplete> > LocalPlayerStorageWriteDelegates;
var array< delegate<OnReadPlayerStorageForNetIdComplete> > RemotePlayerStorageReadDelegates;
var array< delegate<OnRecognitionComplete> > SpeechRecognitionCompleteDelegates;
var array< delegate<OnReadFriendsComplete> > ReadFriendsDelegates;
var array< delegate<OnFriendsChange> > FriendsChangeDelegates;
var array< delegate<OnMutingChange> > MutingChangeDelegates;
var array< delegate<OnLoginChange> > LoginChangeDelegates;
var array< delegate<OnLoginFailed> > LoginFailedDelegates;
var array< delegate<OnLogoutCompleted> > LogoutCompletedDelegates;
var array< delegate<OnPlayerTalkingStateChange> > TalkingDelegates;
var array< delegate<OnReadOnlineStatsComplete> > ReadOnlineStatsCompleteDelegates;
var array< delegate<OnExternalUIChange> > ExternalUIChangeDelegates;
var array< delegate<OnFlushOnlineStatsComplete> > FlushOnlineStatsDelegates;
var array< delegate<OnConnectionStatusChange> > ConnectionStatusChangeDelegates;
var array< delegate<OnControllerChange> > ControllerChangeDelegates;
var array< delegate<OnLinkStatusChange> > LinkStatusDelegates;
var array< delegate<OnReadTitleFileComplete> > ReadTitleFileCompleteDelegates;
var array< delegate<OnUnlockAchievementComplete> > AchievementDelegates;
var array< delegate<OnReadAchievementsComplete> > AchievementReadDelegates;
var array< delegate<OnEnumerateUserFilesComplete> > EnumerateUserFilesCompleteDelegates;
var array< delegate<OnReadUserFileComplete> > ReadUserFileCompleteDelegates;
var array< delegate<OnWriteUserFileComplete> > WriteUserFileCompleteDelegates;
var array< delegate<OnDeleteUserFileComplete> > DeleteUserFileCompleteDelegates;
var array< delegate<OnReadSharedFileComplete> > SharedFileReadCompleteDelegates;
var array< delegate<OnWriteSharedFileComplete> > SharedFileWriteCompleteDelegates;
var array< delegate<OnLoginOnOtherPlatformDoneAndFriendsReady> > LoginOnOtherPlatformDoneAndFriendsReadyDelegates;
var LocalTalkerSteam CurrentLocalTalker;
var const float LastLocalTalkerElapsedTime;
var float LastLocalPlayerTalkTime;
var float TalkTimeOutValue;
var array<RemoteTalker> RemoteTalkers;
var const config int AppID;
var const OnlineStatsRead CurrentStatsRead;
var const array<PendingPlayerStats> PendingStats;
var const string KeyboardResultsString;
var array< delegate<OnKeyboardInputComplete> > KeyboardInputDelegates;
var array< delegate<OnFriendInviteReceived> > FriendInviteReceivedDelegates;
var array< delegate<OnFriendMessageReceived> > FriendMessageReceivedDelegates;
var array< delegate<OnAddFriendByNameComplete> > AddFriendByNameCompleteDelegates;
var ProfileSettingsCache ProfileCache;
var OnlinePlayerStorage PlayerStorageCache;
var const string CachedFriendMessage;
var DeviceIdCache DeviceCache;
var const config array<config string> LocationUrlsForInvites;
var const config string LocationUrl;
var array< delegate<OnReceivedGameInvite> > ReceivedGameInviteDelegates;
var array< delegate<OnJoinFriendGameComplete> > JoinFriendGameCompleteDelegates;
var array< delegate<OnGetNumberOfCurrentPlayersComplete> > GetNumberOfCurrentPlayersCompleteDelegates;
var array< delegate<OnRegisterHostStatGuidComplete> > RegisterHostStatGuidCompleteDelegates;
var array<OnlineFriendMessage> CachedFriendMessages;
var const config array<config OnlineStatusMapping> StatusMappings;
var const localized string DefaultStatus;
var const localized string GameInviteMessage;
var ControllerConnectionState ControllerStates[4];
var float ConnectionPresenceTimeInterval;
var const float ConnectionPresenceElapsedTime;
var const array<UniqueNetId> MuteList;
var config string ProfileDataDirectory;
var config string ProfileDataExtension;
var array<SteamUserCloud> UserCloudFiles;
var array<SteamUserCloudMetadata> UserCloudMetadata;
var array<TitleFile> SharedFileCache;
var const array<QueuedAvatarRequest> QueuedAvatarRequests;
var config array<config AchievementMappingInfo> AchievementMappings;
var const array<AchievementProgressStat> PendingAchievementProgress;
var array<LeaderboardTemplate> LeaderboardList;
var const array<DeferredLeaderboardRead> DeferredLeaderboardReads;
var const array<DeferredLeaderboardWrite> DeferredLeaderboardWrites;
var const array<DeferredLeaderboardWrite> PendingLeaderboardStats;
var config array<config ViewIdToLeaderboardName> LeaderboardNameMappings;
var config array<config int> GameServerStatsMappings;
var const OnlineAuthInterfaceSteamworks CachedAuthInt;
var const array<IpAddr> PendingRedirects;
var OnlineLobbyInterfaceSteamworks LobbyInterface;
var KFWorkshopSteamworks WorkshopInterface;
var delegate<OnLoginChange> __OnLoginChange__Delegate;
var delegate<OnLoginCancelled> __OnLoginCancelled__Delegate;
var delegate<OnMutingChange> __OnMutingChange__Delegate;
var delegate<OnFriendsChange> __OnFriendsChange__Delegate;
var delegate<OnTokenAndSignatureRetrieved> __OnTokenAndSignatureRetrieved__Delegate;
var delegate<OnLoginComplete> __OnLoginComplete__Delegate;
var delegate<OnLoginFailed> __OnLoginFailed__Delegate;
var delegate<OnLogoutCompleted> __OnLogoutCompleted__Delegate;
var delegate<OnSystemUserControllerPairingChanged> __OnSystemUserControllerPairingChanged__Delegate;
var delegate<OnPrivilegeLevelChecked> __OnPrivilegeLevelChecked__Delegate;
var delegate<OnLoginStatusChange> __OnLoginStatusChange__Delegate;
var delegate<OnCurrentUserChanged> __OnCurrentUserChanged__Delegate;
var delegate<OnReadProfileSettingsComplete> __OnReadProfileSettingsComplete__Delegate;
var delegate<OnWriteProfileSettingsComplete> __OnWriteProfileSettingsComplete__Delegate;
var delegate<OnReadPlayerStorageComplete> __OnReadPlayerStorageComplete__Delegate;
var delegate<OnReadPlayerStorageForNetIdComplete> __OnReadPlayerStorageForNetIdComplete__Delegate;
var delegate<OnWritePlayerStorageComplete> __OnWritePlayerStorageComplete__Delegate;
var delegate<OnReadFriendsComplete> __OnReadFriendsComplete__Delegate;
var delegate<OnLoginOnOtherPlatformDoneAndFriendsReady> __OnLoginOnOtherPlatformDoneAndFriendsReady__Delegate;
var delegate<OnRegisterLocalTalkerComplete> __OnRegisterLocalTalkerComplete__Delegate;
var delegate<OnUnregisterLocalTalkerComplete> __OnUnregisterLocalTalkerComplete__Delegate;
var delegate<OnUnregisterRemoteTalkerComplete> __OnUnregisterRemoteTalkerComplete__Delegate;
var delegate<OnPlayerTalkingStateChange> __OnPlayerTalkingStateChange__Delegate;
var delegate<OnRemoteTalkerStatusChange> __OnRemoteTalkerStatusChange__Delegate;
var delegate<OnRecognitionComplete> __OnRecognitionComplete__Delegate;
var delegate<OnReadOnlineProfilesComplete> __OnReadOnlineProfilesComplete__Delegate;
var delegate<OnReadOnlineStatsComplete> __OnReadOnlineStatsComplete__Delegate;
var delegate<OnFlushOnlineStatsComplete> __OnFlushOnlineStatsComplete__Delegate;
var delegate<OnLinkStatusChange> __OnLinkStatusChange__Delegate;
var delegate<OnExternalUIChange> __OnExternalUIChange__Delegate;
var delegate<OnControllerChange> __OnControllerChange__Delegate;
var delegate<OnConnectionStatusChange> __OnConnectionStatusChange__Delegate;
var delegate<OnStorageDeviceChange> __OnStorageDeviceChange__Delegate;
var delegate<OnReadTitleFileComplete> __OnReadTitleFileComplete__Delegate;
var delegate<OnKeyboardInputComplete> __OnKeyboardInputComplete__Delegate;
var delegate<OnAddFriendByNameComplete> __OnAddFriendByNameComplete__Delegate;
var delegate<OnFriendInviteReceived> __OnFriendInviteReceived__Delegate;
var delegate<OnReceivedGameInvite> __OnReceivedGameInvite__Delegate;
var delegate<OnReceivedGameInviteById> __OnReceivedGameInviteById__Delegate;
var delegate<OnJoinFriendGameComplete> __OnJoinFriendGameComplete__Delegate;
var delegate<OnFriendMessageReceived> __OnFriendMessageReceived__Delegate;
var delegate<OnStatisticChanged> __OnStatisticChanged__Delegate;
var delegate<OnRegisterHostStatGuidComplete> __OnRegisterHostStatGuidComplete__Delegate;
var delegate<OnPeoplePickerComplete> __OnPeoplePickerComplete__Delegate;
var delegate<OnShowGamerCardComplete> __OnShowGamerCardComplete__Delegate;
var delegate<OnShowHelpComplete> __OnShowHelpComplete__Delegate;
var delegate<OnAcceptReceivedData> __OnAcceptReceivedData__Delegate;
var delegate<OnDeviceSelectionComplete> __OnDeviceSelectionComplete__Delegate;
var delegate<OnUnlockAchievementComplete> __OnUnlockAchievementComplete__Delegate;
var delegate<OnProfileDataChanged> __OnProfileDataChanged__Delegate;
var delegate<OnReadAchievementsComplete> __OnReadAchievementsComplete__Delegate;
var delegate<OnGetNumberOfCurrentPlayersComplete> __OnGetNumberOfCurrentPlayersComplete__Delegate;
var delegate<OnReadCrossTitleProfileSettingsComplete> __OnReadCrossTitleProfileSettingsComplete__Delegate;
var delegate<OnStoreDataRead> __OnStoreDataRead__Delegate;
var delegate<OnEntitlementsRead> __OnEntitlementsRead__Delegate;
var delegate<OnEnumerateUserFilesComplete> __OnEnumerateUserFilesComplete__Delegate;
var delegate<OnReadUserFileComplete> __OnReadUserFileComplete__Delegate;
var delegate<OnWriteUserFileComplete> __OnWriteUserFileComplete__Delegate;
var delegate<OnDeleteUserFileComplete> __OnDeleteUserFileComplete__Delegate;
var delegate<OnReadSharedFileComplete> __OnReadSharedFileComplete__Delegate;
var delegate<OnWriteSharedFileComplete> __OnWriteSharedFileComplete__Delegate;

// Export UOnlineSubsystemSteamworks::execInit(FFrame&, void* const)
native event bool Init();

// Export UOnlineSubsystemSteamworks::execExit(FFrame&, void* const)
native event Exit();

delegate OnLoginChange(byte LocalUserNum);

delegate OnLoginCancelled();

delegate OnMutingChange();

delegate OnFriendsChange();

delegate OnTokenAndSignatureRetrieved(byte LocalUserNum, string URL, string Token, string Signature);

function GetTokenAndSignatureForURL(byte LocalUserNum, string URL);

function AddURLTokenRetrievedDelegate(byte LocalUserNum, delegate<OnTokenAndSignatureRetrieved> tsrDelegate);

function ClearURLTokenRetrievedDelegate(byte LocalUserNum, delegate<OnTokenAndSignatureRetrieved> tsrDelegate);

function bool ShowLoginUI(byte LocalUserNum, optional bool bShowOnlineOnly)
{
    bShowOnlineOnly = false;
}

// Export UOnlineSubsystemSteamworks::execLogin(FFrame&, void* const)
native function bool Login(byte LocalUserNum, string LoginName, string Password, optional bool bWantsLocalOnly);

delegate OnLoginComplete(byte LocalUserNum, bool bWasSuccessful, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode);

function AddLoginCompleteDelegate(byte LocalUserNum, delegate<OnLoginComplete> InDelegate);

function ClearLoginCompleteDelegate(byte LocalUserNum, delegate<OnLoginComplete> InDelegate);

// Export UOnlineSubsystemSteamworks::execAutoLogin(FFrame&, void* const)
native function bool AutoLogin();

delegate OnLoginFailed(byte LocalUserNum, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode);

function AddLoginFailedDelegate(byte LocalUserNum, delegate<OnLoginFailed> LoginFailedDelegate)
{
    if(LoginFailedDelegates.Find(LoginFailedDelegate == -1)
    {
        LoginFailedDelegates[LoginFailedDelegates.Length] = LoginFailedDelegate;
    }
}

function ClearLoginFailedDelegate(byte LocalUserNum, delegate<OnLoginFailed> LoginFailedDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LoginFailedDelegates.Find(LoginFailedDelegate;
    if(RemoveIndex != -1)
    {
        LoginFailedDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execLogout(FFrame&, void* const)
native function bool Logout(byte LocalUserNum);

delegate OnLogoutCompleted(bool bWasSuccessful);

function AddLogoutCompletedDelegate(byte LocalUserNum, delegate<OnLogoutCompleted> LogoutDelegate)
{
    if(LogoutCompletedDelegates.Find(LogoutDelegate == -1)
    {
        LogoutCompletedDelegates[LogoutCompletedDelegates.Length] = LogoutDelegate;
    }
}

function ClearLogoutCompletedDelegate(byte LocalUserNum, delegate<OnLogoutCompleted> LogoutDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LogoutCompletedDelegates.Find(LogoutDelegate;
    if(RemoveIndex != -1)
    {
        LogoutCompletedDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnSystemUserControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum);

function AddSystemUserContrllerPairingChangedDelegate(delegate<OnSystemUserControllerPairingChanged> PairingChangeDelegate);

function ClearSystemUserContrllerPairingChangedDelegate(delegate<OnSystemUserControllerPairingChanged> PairingChangeDelegate);

function bool PairUserAndControllerAtIndex(byte PlayerIndex, byte ControllerIndex, int PairIndex);

// Export UOnlineSubsystemSteamworks::execGetLoginStatus(FFrame&, void* const)
native function Engine.OnlineSubsystem.ELoginStatus GetLoginStatus(byte LocalUserNum);

function bool IsGuestLogin(byte LocalUserNum);

function bool IsLocalLogin(byte LocalUserNum);

function bool GetUniquePlayerId(byte LocalUserNum, out UniqueNetId PlayerID)
{
    PlayerID = LoggedInPlayerId;
    return true;
}

function bool GetControllerIdFromNetId(UniqueNetId PlayerID, out byte ControllerId);

function string GetPlayerNickname(byte LocalUserNum)
{
    return LoggedInPlayerName;
}

// Export UOnlineSubsystemSteamworks::execCanCommunicate(FFrame&, void* const)
native function Engine.OnlineSubsystem.EFeaturePrivilegeLevel CanCommunicate(byte LocalUserNum);

delegate OnPrivilegeLevelChecked(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevel, bool bDiffersFromHint);

function AddPrivilegeLevelCheckedDelegate(delegate<OnPrivilegeLevelChecked> PrivilegeDelegate);

function ClearPrivilegeLevelCheckedDelegate(delegate<OnPrivilegeLevelChecked> PrivilegeDelegate);

// Export UOnlineSubsystemSteamworks::execCanPlayOnline(FFrame&, void* const)
native function bool CanPlayOnline(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";                        
}

function bool CanCommunicateText(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanCommunicateVideo(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanCommunicateVoice(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShareUserCreatedContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanPurchaseContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanViewPlayerProfiles(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShowPresenceInformation(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanRecordDVRClips(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanUseCloudStorage(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanAccessPremiumContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanAccessPremiumVideoContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanBrowseInternet(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShareWithSocialNetwork(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanShareKinectContent(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

function bool CanUploadFitnessData(byte LocalUserNum, out Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevelHint, optional bool bAttemptToResolve, optional string Reason)
{
    bAttemptToResolve = false;
    Reason = "";
}

// Export UOnlineSubsystemSteamworks::execIsFriend(FFrame&, void* const)
native function bool IsFriend(byte LocalUserNum, UniqueNetId PlayerID);

// Export UOnlineSubsystemSteamworks::execAreAnyFriends(FFrame&, void* const)
native function bool AreAnyFriends(byte LocalUserNum, out array<FriendsQuery> Query);

function bool IsMuted(byte LocalUserNum, UniqueNetId PlayerID);

function AddLoginChangeDelegate(delegate<OnLoginChange> LoginDelegate)
{
    if(LoginChangeDelegates.Find(LoginDelegate == -1)
    {
        LoginChangeDelegates[LoginChangeDelegates.Length] = LoginDelegate;
    }
}

function ClearLoginChangeDelegate(delegate<OnLoginChange> LoginDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LoginChangeDelegates.Find(LoginDelegate;
    if(RemoveIndex != -1)
    {
        LoginChangeDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnLoginStatusChange(Engine.OnlineSubsystem.ELoginStatus NewStatus, UniqueNetId NewId);

function AddLoginStatusChangeDelegate(delegate<OnLoginStatusChange> LoginStatusDelegate, byte LocalUserNum);

function ClearLoginStatusChangeDelegate(delegate<OnLoginStatusChange> LoginStatusDelegate, byte LocalUserNum);

function AddLoginCancelledDelegate(delegate<OnLoginCancelled> CancelledDelegate);

function ClearLoginCancelledDelegate(delegate<OnLoginCancelled> CancelledDelegate);

delegate OnCurrentUserChanged(byte CurrentUserLocalNum, string CurrentUser, string LoggedInUser);

function AddCurrentUserChangedDelegate(delegate<OnCurrentUserChanged> CurrentUserDelegate);

function ClearCurrentUserChangedDelegate(delegate<OnCurrentUserChanged> CurrentUserDelegate);

function AddMutingChangeDelegate(delegate<OnMutingChange> MutingDelegate)
{
    if(MutingChangeDelegates.Find(MutingDelegate == -1)
    {
        MutingChangeDelegates[MutingChangeDelegates.Length] = MutingDelegate;
    }
}

function ClearMutingChangeDelegate(delegate<OnFriendsChange> MutingDelegate)
{
    local int RemoveIndex;

    RemoveIndex = MutingChangeDelegates.Find(MutingDelegate;
    if(RemoveIndex != -1)
    {
        MutingChangeDelegates.Remove(RemoveIndex, 1;
    }
}

function AddFriendsChangeDelegate(byte LocalUserNum, delegate<OnFriendsChange> FriendsDelegate)
{
    if(LocalUserNum == 0)
    {
        if(FriendsChangeDelegates.Find(FriendsDelegate == -1)
        {
            FriendsChangeDelegates[FriendsChangeDelegates.Length] = FriendsDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearFriendsChangeDelegate()");
    }
}

function ClearFriendsChangeDelegate(byte LocalUserNum, delegate<OnFriendsChange> FriendsDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = FriendsChangeDelegates.Find(FriendsDelegate;
        if(RemoveIndex != -1)
        {
            FriendsChangeDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearFriendsChangeDelegate()");
    }
}

// Export UOnlineSubsystemSteamworks::execReadProfileSettings(FFrame&, void* const)
native function bool ReadProfileSettings(byte LocalUserNum, OnlineProfileSettings ProfileSettings);

delegate OnReadProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful);

function AddReadProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadProfileSettingsComplete> ReadProfileSettingsCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        if(ProfileCache.ReadDelegates.Find(ReadProfileSettingsCompleteDelegate == -1)
        {
            ProfileCache.ReadDelegates[ProfileCache.ReadDelegates.Length] = ReadProfileSettingsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddReadProfileSettingsCompleteDelegate()");
    }
}

function ClearReadProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadProfileSettingsComplete> ReadProfileSettingsCompleteDelegate)
{
    local int RemoveIndex;

    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        RemoveIndex = ProfileCache.ReadDelegates.Find(ReadProfileSettingsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            ProfileCache.ReadDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearReadProfileSettingsCompleteDelegate()");
    }
}

function OnlineProfileSettings GetProfileSettings(byte LocalUserNum)
{
    if(LocalUserNum == 0)
    {
        return CachedProfile;
    }
    return none;
}

// Export UOnlineSubsystemSteamworks::execWriteProfileSettings(FFrame&, void* const)
native function bool WriteProfileSettings(byte LocalUserNum, OnlineProfileSettings ProfileSettings);

delegate OnWriteProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful);

function AddWriteProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnWriteProfileSettingsComplete> WriteProfileSettingsCompleteDelegate)
{
    if(LocalUserNum == 0)
    {
        if(WriteProfileSettingsDelegates.Find(WriteProfileSettingsCompleteDelegate == -1)
        {
            WriteProfileSettingsDelegates[WriteProfileSettingsDelegates.Length] = WriteProfileSettingsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddWriteProfileSettingsCompleteDelegate()");
    }
}

function ClearWriteProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnWriteProfileSettingsComplete> WriteProfileSettingsCompleteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = WriteProfileSettingsDelegates.Find(WriteProfileSettingsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            WriteProfileSettingsDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearWriteProfileSettingsCompleteDelegate()");
    }
}

function bool ReadPlayerStorage(byte LocalUserNum, OnlinePlayerStorage PlayerStorage, optional int DeviceID)
{
    DeviceID = -1;
}

delegate OnReadPlayerStorageComplete(byte LocalUserNum, bool bWasSuccessful);

function AddReadPlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnReadPlayerStorageComplete> ReadPlayerStorageCompleteDelegate)
{
    if(LocalPlayerStorageReadDelegates.Find(ReadPlayerStorageCompleteDelegate == -1)
    {
        LocalPlayerStorageReadDelegates.AddItem(ReadPlayerStorageCompleteDelegate;
    }
}

function ClearReadPlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnReadPlayerStorageComplete> ReadPlayerStorageCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LocalPlayerStorageReadDelegates.Find(ReadPlayerStorageCompleteDelegate;
    if(RemoveIndex != -1)
    {
        LocalPlayerStorageReadDelegates.Remove(RemoveIndex, 1;
    }
}

function bool ReadPlayerStorageForNetId(byte LocalUserNum, UniqueNetId NetId, OnlinePlayerStorage PlayerStorage);

delegate OnReadPlayerStorageForNetIdComplete(UniqueNetId NetId, bool bWasSuccessful);

function AddReadPlayerStorageForNetIdCompleteDelegate(UniqueNetId NetId, delegate<OnReadPlayerStorageForNetIdComplete> ReadPlayerStorageForNetIdCompleteDelegate)
{
    if(RemotePlayerStorageReadDelegates.Find(ReadPlayerStorageForNetIdCompleteDelegate == -1)
    {
        RemotePlayerStorageReadDelegates.AddItem(ReadPlayerStorageForNetIdCompleteDelegate;
    }
}

function ClearReadPlayerStorageForNetIdCompleteDelegate(UniqueNetId NetId, delegate<OnReadPlayerStorageForNetIdComplete> ReadPlayerStorageForNetIdCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = RemotePlayerStorageReadDelegates.Find(ReadPlayerStorageForNetIdCompleteDelegate;
    if(RemoveIndex != -1)
    {
        RemotePlayerStorageReadDelegates.Remove(RemoveIndex, 1;
    }
}

function OnlinePlayerStorage GetPlayerStorage(byte LocalUserNum)
{
    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        return PlayerStorageCache;
    }
    return none;
}

function bool WritePlayerStorage(byte LocalUserNum, OnlinePlayerStorage PlayerStorage, optional int DeviceID)
{
    DeviceID = -1;
}

delegate OnWritePlayerStorageComplete(byte LocalUserNum, bool bWasSuccessful);

function AddWritePlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnWritePlayerStorageComplete> WritePlayerStorageCompleteDelegate)
{
    if(LocalPlayerStorageWriteDelegates.Find(WritePlayerStorageCompleteDelegate == -1)
    {
        LocalPlayerStorageWriteDelegates.AddItem(WritePlayerStorageCompleteDelegate;
    }
}

function ClearWritePlayerStorageCompleteDelegate(byte LocalUserNum, delegate<OnWritePlayerStorageComplete> WritePlayerStorageCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LocalPlayerStorageWriteDelegates.Find(WritePlayerStorageCompleteDelegate;
    if(RemoveIndex != -1)
    {
        LocalPlayerStorageWriteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execReadFriendsList(FFrame&, void* const)
native function bool ReadFriendsList(byte LocalUserNum, optional int Count, optional int StartingAt);

delegate OnReadFriendsComplete(bool bWasSuccessful);

function AddReadFriendsCompleteDelegate(byte LocalUserNum, delegate<OnReadFriendsComplete> ReadFriendsCompleteDelegate)
{
    if(LocalUserNum == 0)
    {
        if(ReadFriendsDelegates.Find(ReadFriendsCompleteDelegate == -1)
        {
            ReadFriendsDelegates[ReadFriendsDelegates.Length] = ReadFriendsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for AddReadFriendsCompleteDelegate()");
    }
}

function ClearReadFriendsCompleteDelegate(byte LocalUserNum, delegate<OnReadFriendsComplete> ReadFriendsCompleteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == 0)
    {
        RemoveIndex = ReadFriendsDelegates.Find(ReadFriendsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            ReadFriendsDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid user index (" $ string(LocalUserNum)) $ ") specified for ClearReadFriendsCompleteDelegate()");
    }
}

// Export UOnlineSubsystemSteamworks::execGetFriendsList(FFrame&, void* const)
native function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetFriendsList(byte LocalUserNum, out array<OnlineFriend> Friends, optional int Count, optional int StartingAt);

// Export UOnlineSubsystemSteamworks::execLoginOnOtherPlatform(FFrame&, void* const)
native function LoginOnOtherPlatform();

// Export UOnlineSubsystemSteamworks::execTriggerRefreshFriendsList(FFrame&, void* const)
native function TriggerRefreshFriendsList();

// Export UOnlineSubsystemSteamworks::execIsLoggedInOnOtherPlatform(FFrame&, void* const)
native function bool IsLoggedInOnOtherPlatform();

delegate OnLoginOnOtherPlatformDoneAndFriendsReady();

// Export UOnlineSubsystemSteamworks::execCheckLoginOnOtherPlatformAndFriends(FFrame&, void* const)
native function CheckLoginOnOtherPlatformAndFriends();

// Export UOnlineSubsystemSteamworks::execGetFriendsListFromOtherPlatform(FFrame&, void* const)
native function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetFriendsListFromOtherPlatform(byte LocalUserNum, out array<OnlineFriend> Friends, optional int Count, optional int StartingAt);

// Export UOnlineSubsystemSteamworks::execRegisterLocalTalker(FFrame&, void* const)
native function bool RegisterLocalTalker(byte LocalUserNum, optional byte ChannelIndex);

// Export UOnlineSubsystemSteamworks::execUnregisterLocalTalker(FFrame&, void* const)
native function bool UnregisterLocalTalker(byte LocalUserNum, optional byte ChannelIndex);

function bool AreAnyLocalTalkersRegistered();

function ReceiveReliableVoicePacket(byte MessageType, UniqueNetId Sender, int Length, byte InData[60]);

// Export UOnlineSubsystemSteamworks::execRegisterRemoteTalker(FFrame&, void* const)
native function bool RegisterRemoteTalker(UniqueNetId PlayerID);

// Export UOnlineSubsystemSteamworks::execUnregisterRemoteTalker(FFrame&, void* const)
native function bool UnregisterRemoteTalker(UniqueNetId PlayerID);

delegate OnRegisterLocalTalkerComplete(byte LocalUserNum, bool bWasSuccessful);

function AddRegisterLocalTalkerCompleteDelegate(delegate<OnRegisterLocalTalkerComplete> RegisterLocalTalkerCompleteDelegate);

function ClearRegisterLocalTalkerCompleteDelegate(delegate<OnRegisterLocalTalkerComplete> RegisterLocalTalkerCompleteDelegate);

delegate OnUnregisterLocalTalkerComplete(byte LocalUserNum, bool bWasSuccessful);

function AddUnregisterLocalTalkerCompleteDelegate(delegate<OnUnregisterLocalTalkerComplete> UnregisterLocalTalkerCompleteDelegate);

function ClearUnregisterLocalTalkerCompleteDelegate(delegate<OnUnregisterLocalTalkerComplete> UnregisterLocalTalkerCompleteDelegate);

delegate OnUnregisterRemoteTalkerComplete(UniqueNetId RemoteNetId, bool bWasSuccessful);

function AddUnregisterRemoteTalkerCompleteDelegate(delegate<OnUnregisterRemoteTalkerComplete> UnregisterRemoteTalkerCompleteDelegate);

function ClearUnregisterRemoteTalkerCompleteDelegate(delegate<OnUnregisterRemoteTalkerComplete> UnregisterRemoteTalkerCompleteDelegate);

// Export UOnlineSubsystemSteamworks::execIsLocalPlayerTalking(FFrame&, void* const)
native function bool IsLocalPlayerTalking(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execIsRemotePlayerTalking(FFrame&, void* const)
native function bool IsRemotePlayerTalking(UniqueNetId PlayerID);

// Export UOnlineSubsystemSteamworks::execIsHeadsetPresent(FFrame&, void* const)
native function bool IsHeadsetPresent(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execSetRemoteTalkerPriority(FFrame&, void* const)
native function bool SetRemoteTalkerPriority(byte LocalUserNum, UniqueNetId PlayerID, int Priority);

// Export UOnlineSubsystemSteamworks::execMuteRemoteTalker(FFrame&, void* const)
native function bool MuteRemoteTalker(byte LocalUserNum, UniqueNetId PlayerID, optional bool bIsSystemWide);

// Export UOnlineSubsystemSteamworks::execUnmuteRemoteTalker(FFrame&, void* const)
native function bool UnmuteRemoteTalker(byte LocalUserNum, UniqueNetId PlayerID, optional bool bIsSystemWide);

function bool IsTalkerMuted(UniqueNetId ConsoleId);

function bool UpdatePlayerMuteSetting(bool PlayerMuteSetting);

delegate OnPlayerTalkingStateChange(UniqueNetId Player, bool bIsTalking);

delegate OnRemoteTalkerStatusChange(UniqueNetId RemoteNetId, bool bIsTalking);

function AddPlayerTalkingDelegate(delegate<OnPlayerTalkingStateChange> TalkerDelegate)
{
    local int AddIndex;

    if(TalkingDelegates.Find(TalkerDelegate == -1)
    {
        AddIndex = TalkingDelegates.Length;
        TalkingDelegates.Length = TalkingDelegates.Length + 1;
        TalkingDelegates[AddIndex] = TalkerDelegate;
    }
}

function ClearPlayerTalkingDelegate(delegate<OnPlayerTalkingStateChange> TalkerDelegate)
{
    local int RemoveIndex;

    RemoveIndex = TalkingDelegates.Find(TalkerDelegate;
    if(RemoveIndex != -1)
    {
        TalkingDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execStartNetworkedVoice(FFrame&, void* const)
native function StartNetworkedVoice(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execStopNetworkedVoice(FFrame&, void* const)
native function StopNetworkedVoice(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execStartSpeechRecognition(FFrame&, void* const)
native function bool StartSpeechRecognition(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execStopSpeechRecognition(FFrame&, void* const)
native function bool StopSpeechRecognition(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execGetRecognitionResults(FFrame&, void* const)
native function bool GetRecognitionResults(byte LocalUserNum, out array<SpeechRecognizedWord> Words);

delegate OnRecognitionComplete();

function AddRecognitionCompleteDelegate(byte LocalUserNum, delegate<OnRecognitionComplete> RecognitionDelegate)
{
    if(SpeechRecognitionCompleteDelegates.Find(RecognitionDelegate == -1)
    {
        SpeechRecognitionCompleteDelegates[SpeechRecognitionCompleteDelegates.Length] = RecognitionDelegate;
    }
}

function ClearRecognitionCompleteDelegate(byte LocalUserNum, delegate<OnRecognitionComplete> RecognitionDelegate)
{
    local int RemoveIndex;

    RemoveIndex = SpeechRecognitionCompleteDelegates.Find(RecognitionDelegate;
    if(RemoveIndex != -1)
    {
        SpeechRecognitionCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execSelectVocabulary(FFrame&, void* const)
native function bool SelectVocabulary(byte LocalUserNum, int VocabularyId);

// Export UOnlineSubsystemSteamworks::execSetSpeechRecognitionObject(FFrame&, void* const)
native function bool SetSpeechRecognitionObject(byte LocalUserNum, SpeechRecognition SpeechRecogObj);

function bool ReadOnlineProfilesForPlayers(array<string> PlayerIDs);

delegate OnReadOnlineProfilesComplete(bool bWasSuccessful, array<string> PlayerIDs, array<OnlineProfile> OnlineProfiles);

function AddReadOnlineProfilesCompleteDelegate(delegate<OnReadOnlineProfilesComplete> ReadOnlineProfileDelegate);

function ClearReadOnlineProfilesCompleteDelegate(delegate<OnReadOnlineProfilesComplete> ReadOnlineProfileDelegate);

function bool ReadOnlineStatsForPlayer(byte LocalUserNum, OnlineStatsRead StatsRead);

// Export UOnlineSubsystemSteamworks::execReadOnlineStats(FFrame&, void* const)
native function bool ReadOnlineStats(byte LocalUserNum, const out array<UniqueNetId> Players, OnlineStatsRead StatsRead);

// Export UOnlineSubsystemSteamworks::execReadOnlineStatsForFriends(FFrame&, void* const)
native function bool ReadOnlineStatsForFriends(byte LocalUserNum, OnlineStatsRead StatsRead, optional bool FavoriteFriendsOnly, optional int NumToRead)
{
    FavoriteFriendsOnly = false;
    NumToRead = 100;                        
}

// Export UOnlineSubsystemSteamworks::execReadOnlineStatsByRank(FFrame&, void* const)
native function bool ReadOnlineStatsByRank(byte LocalUserNum, OnlineStatsRead StatsRead, optional int StartIndex, optional int NumToRead)
{
    StartIndex = 1;
    NumToRead = 100;                        
}

// Export UOnlineSubsystemSteamworks::execReadOnlineStatsByRankAroundPlayer(FFrame&, void* const)
native function bool ReadOnlineStatsByRankAroundPlayer(byte LocalUserNum, OnlineStatsRead StatsRead, optional int NumRows)
{
    NumRows = 10;                    
}

delegate OnReadOnlineStatsComplete(bool bWasSuccessful);

function AddReadOnlineStatsCompleteDelegate(delegate<OnReadOnlineStatsComplete> ReadOnlineStatsCompleteDelegate)
{
    if(ReadOnlineStatsCompleteDelegates.Find(ReadOnlineStatsCompleteDelegate == -1)
    {
        ReadOnlineStatsCompleteDelegates[ReadOnlineStatsCompleteDelegates.Length] = ReadOnlineStatsCompleteDelegate;
    }
}

function ClearReadOnlineStatsCompleteDelegate(delegate<OnReadOnlineStatsComplete> ReadOnlineStatsCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ReadOnlineStatsCompleteDelegates.Find(ReadOnlineStatsCompleteDelegate;
    if(RemoveIndex != -1)
    {
        ReadOnlineStatsCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execFreeStats(FFrame&, void* const)
native function FreeStats(OnlineStatsRead StatsRead);

// Export UOnlineSubsystemSteamworks::execWriteOnlineStats(FFrame&, void* const)
native function bool WriteOnlineStats(name SessionName, UniqueNetId Player, OnlineStatsWrite StatsWrite);

// Export UOnlineSubsystemSteamworks::execFlushOnlineStats(FFrame&, void* const)
native function bool FlushOnlineStats(name SessionName);

delegate OnFlushOnlineStatsComplete(name SessionName, bool bWasSuccessful);

function AddFlushOnlineStatsCompleteDelegate(delegate<OnFlushOnlineStatsComplete> FlushOnlineStatsCompleteDelegate)
{
    if(FlushOnlineStatsDelegates.Find(FlushOnlineStatsCompleteDelegate == -1)
    {
        FlushOnlineStatsDelegates[FlushOnlineStatsDelegates.Length] = FlushOnlineStatsCompleteDelegate;
    }
}

function ClearFlushOnlineStatsCompleteDelegate(delegate<OnFlushOnlineStatsComplete> FlushOnlineStatsCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = FlushOnlineStatsDelegates.Find(FlushOnlineStatsCompleteDelegate;
    if(RemoveIndex != -1)
    {
        FlushOnlineStatsDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execWriteOnlinePlayerScores(FFrame&, void* const)
native function bool WriteOnlinePlayerScores(name SessionName, int LeaderboardId, const out array<OnlinePlayerScore> PlayerScores);

event string GetPlayerNicknameFromIndex(int UserIndex)
{
    if(UserIndex == 0)
    {
        return LoggedInPlayerName;
    }
    return "";
}

function bool GetPlayerNicknameForPlayerId(UniqueNetId InPlayerId, out string OutPlayerNickname);

function bool GetPlayerIDForPlayerNickname(string InPlayerNickname, out UniqueNetId OutPlayerId);

// Export UOnlineSubsystemSteamworks::execHasLinkConnection(FFrame&, void* const)
native function bool HasLinkConnection();

delegate OnLinkStatusChange(bool bIsConnected);

function AddLinkStatusChangeDelegate(delegate<OnLinkStatusChange> LinkStatusDelegate)
{
    if(LinkStatusDelegates.Find(LinkStatusDelegate == -1)
    {
        LinkStatusDelegates[LinkStatusDelegates.Length] = LinkStatusDelegate;
    }
}

function ClearLinkStatusChangeDelegate(delegate<OnLinkStatusChange> LinkStatusDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LinkStatusDelegates.Find(LinkStatusDelegate;
    if(RemoveIndex != -1)
    {
        LinkStatusDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnExternalUIChange(bool bIsOpening);

function AddExternalUIChangeDelegate(delegate<OnExternalUIChange> ExternalUIDelegate)
{
    local int AddIndex;

    if(ExternalUIChangeDelegates.Find(ExternalUIDelegate == -1)
    {
        AddIndex = ExternalUIChangeDelegates.Length;
        ExternalUIChangeDelegates.Length = ExternalUIChangeDelegates.Length + 1;
        ExternalUIChangeDelegates[AddIndex] = ExternalUIDelegate;
    }
}

function ClearExternalUIChangeDelegate(delegate<OnExternalUIChange> ExternalUIDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ExternalUIChangeDelegates.Find(ExternalUIDelegate;
    if(RemoveIndex != -1)
    {
        ExternalUIChangeDelegates.Remove(RemoveIndex, 1;
    }
}

function Engine.OnlineSubsystem.ENetworkNotificationPosition GetNetworkNotificationPosition()
{
    return CurrentNotificationPosition;
}

// Export UOnlineSubsystemSteamworks::execSetNetworkNotificationPosition(FFrame&, void* const)
native function SetNetworkNotificationPosition(Engine.OnlineSubsystem.ENetworkNotificationPosition NewPos);

delegate OnControllerChange(int ControllerId, bool bIsConnected, bool bPauseGame);

function AddControllerChangeDelegate(delegate<OnControllerChange> ControllerChangeDelegate)
{
    if(ControllerChangeDelegates.Find(ControllerChangeDelegate == -1)
    {
        ControllerChangeDelegates[ControllerChangeDelegates.Length] = ControllerChangeDelegate;
    }
}

function ClearControllerChangeDelegate(delegate<OnControllerChange> ControllerChangeDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ControllerChangeDelegates.Find(ControllerChangeDelegate;
    if(RemoveIndex != -1)
    {
        ControllerChangeDelegates.Remove(RemoveIndex, 1;
    }
}

function bool IsControllerConnected(int ControllerId);

function Engine.OnlineSubsystem.EOnlineServerConnectionStatus GetCurrentConnectionStatus()
{
    return 1;
}

delegate OnConnectionStatusChange(Engine.OnlineSubsystem.EOnlineServerConnectionStatus ConnectionStatus);

function AddConnectionStatusChangeDelegate(delegate<OnConnectionStatusChange> ConnectionStatusDelegate)
{
    if(ConnectionStatusChangeDelegates.Find(ConnectionStatusDelegate == -1)
    {
        ConnectionStatusChangeDelegates[ConnectionStatusChangeDelegates.Length] = ConnectionStatusDelegate;
    }
}

function ClearConnectionStatusChangeDelegate(delegate<OnConnectionStatusChange> ConnectionStatusDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ConnectionStatusChangeDelegates.Find(ConnectionStatusDelegate;
    if(RemoveIndex != -1)
    {
        ConnectionStatusChangeDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execGetNATType(FFrame&, void* const)
native function Engine.OnlineSubsystem.ENATType GetNATType();

function int GetLocale()
{
    return 0;
}

delegate OnStorageDeviceChange();

function AddStorageDeviceChangeDelegate(delegate<OnStorageDeviceChange> StorageDeviceChangeDelegate);

function ClearStorageDeviceChangeDelegate(delegate<OnStorageDeviceChange> StorageDeviceChangeDelegate);

delegate OnReadTitleFileComplete(bool bWasSuccessful, string Filename);

// Export UOnlineSubsystemSteamworks::execReadTitleFile(FFrame&, void* const)
native function bool ReadTitleFile(string FileToRead);

function AddReadTitleFileCompleteDelegate(delegate<OnReadTitleFileComplete> ReadTitleFileCompleteDelegate)
{
    if(ReadTitleFileCompleteDelegates.Find(ReadTitleFileCompleteDelegate == -1)
    {
        ReadTitleFileCompleteDelegates[ReadTitleFileCompleteDelegates.Length] = ReadTitleFileCompleteDelegate;
    }
}

function ClearReadTitleFileCompleteDelegate(delegate<OnReadTitleFileComplete> ReadTitleFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ReadTitleFileCompleteDelegates.Find(ReadTitleFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        ReadTitleFileCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execGetTitleFileContents(FFrame&, void* const)
native function bool GetTitleFileContents(string Filename, out array<byte> FileContents);

function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetTitleFileState(string Filename);

// Export UOnlineSubsystemSteamworks::execSetOnlineStatus(FFrame&, void* const)
native function SetOnlineStatus(byte LocalUserNum, string StatusString, optional bool PlayerActive)
{
    PlayerActive = true;                    
}

function bool ShowKeyboardUI(byte LocalUserNum, string TitleText, string DescriptionText, optional bool bIsPassword, optional bool bShouldValidate, optional string DefaultText, optional int MaxResultLength)
{
    bIsPassword = false;
    bShouldValidate = true;    
    MaxResultLength = 256;
}

function bool HideKeyboardUI(byte LocalUserNum);

delegate OnKeyboardInputComplete(bool bWasSuccessful);

function AddKeyboardInputDoneDelegate(delegate<OnKeyboardInputComplete> InputDelegate);

function ClearKeyboardInputDoneDelegate(delegate<OnKeyboardInputComplete> InputDelegate);

function string GetKeyboardInputResults(out byte bWasCanceled);

// Export UOnlineSubsystemSteamworks::execAddFriend(FFrame&, void* const)
native function bool AddFriend(byte LocalUserNum, UniqueNetId NewFriend, optional string Message);

// Export UOnlineSubsystemSteamworks::execAddFriendByName(FFrame&, void* const)
native function bool AddFriendByName(byte LocalUserNum, string FriendName, optional string Message);

delegate OnAddFriendByNameComplete(bool bWasSuccessful);

function AddAddFriendByNameCompleteDelegate(byte LocalUserNum, delegate<OnAddFriendByNameComplete> FriendDelegate)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        if(AddFriendByNameCompleteDelegates.Find(FriendDelegate == -1)
        {
            AddFriendByNameCompleteDelegates[AddFriendByNameCompleteDelegates.Length] = FriendDelegate;
        }
    }
}

function ClearAddFriendByNameCompleteDelegate(byte LocalUserNum, delegate<OnAddFriendByNameComplete> FriendDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == LoggedInPlayerNum)
    {
        RemoveIndex = AddFriendByNameCompleteDelegates.Find(FriendDelegate;
        if(RemoveIndex != -1)
        {
            AddFriendByNameCompleteDelegates.Remove(RemoveIndex, 1;
        }
    }
}

// Export UOnlineSubsystemSteamworks::execRemoveFriend(FFrame&, void* const)
native function bool RemoveFriend(byte LocalUserNum, UniqueNetId FormerFriend);

// Export UOnlineSubsystemSteamworks::execAcceptFriendInvite(FFrame&, void* const)
native function bool AcceptFriendInvite(byte LocalUserNum, UniqueNetId RequestingPlayer);

// Export UOnlineSubsystemSteamworks::execDenyFriendInvite(FFrame&, void* const)
native function bool DenyFriendInvite(byte LocalUserNum, UniqueNetId RequestingPlayer);

delegate OnFriendInviteReceived(byte LocalUserNum, UniqueNetId RequestingPlayer, string RequestingNick, string Message);

function AddFriendInviteReceivedDelegate(byte LocalUserNum, delegate<OnFriendInviteReceived> InviteDelegate)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        if(FriendInviteReceivedDelegates.Find(InviteDelegate == -1)
        {
            FriendInviteReceivedDelegates[FriendInviteReceivedDelegates.Length] = InviteDelegate;
        }
    }
}

function ClearFriendInviteReceivedDelegate(byte LocalUserNum, delegate<OnFriendInviteReceived> InviteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == LoggedInPlayerNum)
    {
        RemoveIndex = FriendInviteReceivedDelegates.Find(InviteDelegate;
        if(RemoveIndex != -1)
        {
            FriendInviteReceivedDelegates.Remove(RemoveIndex, 1;
        }
    }
}

// Export UOnlineSubsystemSteamworks::execSendMessageToFriend(FFrame&, void* const)
native function bool SendMessageToFriend(byte LocalUserNum, UniqueNetId Friend, string Message);

// Export UOnlineSubsystemSteamworks::execSendGameInviteToFriend(FFrame&, void* const)
native function bool SendGameInviteToFriend(byte LocalUserNum, name SessionName, UniqueNetId Friend, optional string Text);

// Export UOnlineSubsystemSteamworks::execSendGameInviteToFriends(FFrame&, void* const)
native function bool SendGameInviteToFriends(byte LocalUserNum, name SessionName, array<UniqueNetId> Friends, optional string Text);

function bool SendGameInviteToUsers(string SessionId, name SessionName, array<string> MembersToInvite, optional string Text);

delegate OnReceivedGameInvite(byte LocalUserNum, string InviterName);

function AddReceivedGameInviteDelegate(byte LocalUserNum, delegate<OnReceivedGameInvite> ReceivedGameInviteDelegate)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        if(ReceivedGameInviteDelegates.Find(ReceivedGameInviteDelegate == -1)
        {
            ReceivedGameInviteDelegates[ReceivedGameInviteDelegates.Length] = ReceivedGameInviteDelegate;
        }
    }
}

function ClearReceivedGameInviteDelegate(byte LocalUserNum, delegate<OnReceivedGameInvite> ReceivedGameInviteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == LoggedInPlayerNum)
    {
        RemoveIndex = ReceivedGameInviteDelegates.Find(ReceivedGameInviteDelegate;
        if(RemoveIndex != -1)
        {
            ReceivedGameInviteDelegates.Remove(RemoveIndex, 1;
        }
    }
}

function CheckForGameInviteOnLaunch();

delegate OnReceivedGameInviteById(byte LocalUserNum, UniqueNetId InviterId);

function ClearReceivedGameInviteByIdDelegate(byte LocalUserNum, delegate<OnReceivedGameInviteById> ReceivedGameInviteDelegate);

function AddReceivedGameInviteByIdDelegate(byte LocalUserNum, delegate<OnReceivedGameInviteById> ReceivedGameInviteDelegate);

// Export UOnlineSubsystemSteamworks::execJoinFriendGame(FFrame&, void* const)
native function bool JoinFriendGame(byte LocalUserNum, UniqueNetId Friend);

delegate OnJoinFriendGameComplete(bool bWasSuccessful);

function AddJoinFriendGameCompleteDelegate(delegate<OnJoinFriendGameComplete> JoinFriendGameCompleteDelegate)
{
    if(JoinFriendGameCompleteDelegates.Find(JoinFriendGameCompleteDelegate == -1)
    {
        JoinFriendGameCompleteDelegates[JoinFriendGameCompleteDelegates.Length] = JoinFriendGameCompleteDelegate;
    }
}

function ClearJoinFriendGameCompleteDelegate(delegate<OnJoinFriendGameComplete> JoinFriendGameCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = JoinFriendGameCompleteDelegates.Find(JoinFriendGameCompleteDelegate;
    if(RemoveIndex != -1)
    {
        JoinFriendGameCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function GetFriendMessages(byte LocalUserNum, out array<OnlineFriendMessage> FriendMessages)
{
    if(LocalUserNum == 0)
    {
        FriendMessages = CachedFriendMessages;
    }
}

delegate OnFriendMessageReceived(byte LocalUserNum, UniqueNetId SendingPlayer, string SendingNick, string Message);

function AddFriendMessageReceivedDelegate(byte LocalUserNum, delegate<OnFriendMessageReceived> MessageDelegate)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        if(FriendMessageReceivedDelegates.Find(MessageDelegate == -1)
        {
            FriendMessageReceivedDelegates[FriendMessageReceivedDelegates.Length] = MessageDelegate;
        }
    }
}

function ClearFriendMessageReceivedDelegate(byte LocalUserNum, delegate<OnFriendMessageReceived> MessageDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == LoggedInPlayerNum)
    {
        RemoveIndex = FriendMessageReceivedDelegates.Find(MessageDelegate;
        if(RemoveIndex != -1)
        {
            FriendMessageReceivedDelegates.Remove(RemoveIndex, 1;
        }
    }
}

delegate OnStatisticChanged(UniqueNetId PlayerNetId, name StatName, string NewStatValue);

function SubscribeToStatisticEvent(byte LocalUserNum, UniqueNetId PlayerNetId, name StatName, delegate<OnStatisticChanged> EventDelegate);

function UnsubscribeToStatisticEvent(byte LocalUserNum, UniqueNetId PlayerNetId, name StatName);

function bool SendPlayerSessionStart(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId);

function bool SendPlayerSessionEnd(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId, int ExitStatusId);

function bool SendPlayerSessionPause(byte LocalUserNum, string MultiplayerCorrelationId);

function bool SendPlayerSessionResume(byte LocalUserNum, string MultiplayerCorrelationId, int GameplayModeId, int DifficultyLevelId);

function bool SendTestEvent(byte LocalUserNum, string TestStatInstancing, int TestStatParameter);

function string GetHostStatGuid();

function bool RegisterHostStatGuid(const out string HostStatGuid);

delegate OnRegisterHostStatGuidComplete(bool bWasSuccessful);

function AddRegisterHostStatGuidCompleteDelegate(delegate<OnRegisterHostStatGuidComplete> RegisterHostStatGuidCompleteDelegate)
{
    if(RegisterHostStatGuidCompleteDelegates.Find(RegisterHostStatGuidCompleteDelegate == -1)
    {
        RegisterHostStatGuidCompleteDelegates[RegisterHostStatGuidCompleteDelegates.Length] = RegisterHostStatGuidCompleteDelegate;
    }
}

function ClearRegisterHostStatGuidCompleteDelegateDelegate(delegate<OnRegisterHostStatGuidComplete> RegisterHostStatGuidCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = RegisterHostStatGuidCompleteDelegates.Find(RegisterHostStatGuidCompleteDelegate;
    if(RemoveIndex != -1)
    {
        RegisterHostStatGuidCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function string GetClientStatGuid();

function bool RegisterStatGuid(UniqueNetId PlayerID, const out string ClientStatGuid);

function CalcAggregateSkill(array<Double> Mus, array<Double> Sigmas, out Double OutAggregateMu, out Double OutAggregateSigma);

function bool MuteAll(byte LocalUserNum, bool bAllowFriends)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        CurrentLocalTalker.MuteType = ((bAllowFriends) ? 1 : 2);
        return true;
    }
    return false;
}

function bool UnmuteAll(byte LocalUserNum)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        CurrentLocalTalker.MuteType = 0;
        return true;
    }
    return false;
}

function bool DeleteMessage(byte LocalUserNum, int MessageIndex)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        if((MessageIndex >= 0) && MessageIndex < CachedFriendMessages.Length)
        {
            CachedFriendMessages.Remove(MessageIndex, 1;
            return true;
        }
    }
    return false;
}

// Export UOnlineSubsystemSteamworks::execShowFeedbackUI(FFrame&, void* const)
native function bool ShowFeedbackUI(byte LocalUserNum, UniqueNetId PlayerID);

// Export UOnlineSubsystemSteamworks::execShowGamerCardUI(FFrame&, void* const)
native function bool ShowGamerCardUI(byte LocalUserNum, UniqueNetId PlayerID);

// Export UOnlineSubsystemSteamworks::execShowMessagesUI(FFrame&, void* const)
native function bool ShowMessagesUI(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execShowAchievementsUI(FFrame&, void* const)
native function bool ShowAchievementsUI(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execShowInviteUI(FFrame&, void* const)
native function bool ShowInviteUI(byte LocalUserNum, optional string InviteText);

// Export UOnlineSubsystemSteamworks::execShowMembershipMarketplaceUI(FFrame&, void* const)
native function bool ShowMembershipMarketplaceUI(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execShowDeviceSelectionUI(FFrame&, void* const)
native function bool ShowDeviceSelectionUI(byte LocalUserNum, int SizeNeeded, optional bool bManageStorage);

// Export UOnlineSubsystemSteamworks::execShowContentMarketplaceUI(FFrame&, void* const)
native function bool ShowContentMarketplaceUI(byte LocalUserNum, int ParentProductType, int RequestedProductTypes, optional string ParentProductId);

function bool ShowContentPurchaseUI(byte LocalUserNum, string Offer);

function bool ShowProductDetailsUI(byte LocalUserNum, optional string ParentProductId);

function bool ShowContentRedeemCodeUI(byte LocalUserNum, string Offer);

function CloseCurrentContentUI();

function bool ShowPeoplePickerUI(byte LocalUserNum, array<OnlineFriend> People, int MaxSelectable, optional string Text);

delegate OnPeoplePickerComplete(bool bWasSuccessful, array<OnlineFriend> PeoplePicked);

function AddPeoplePickerCompleteDelegate(byte LocalUserNum, delegate<OnPeoplePickerComplete> InDelegate);

function ClearPeoplePickerCompleteDelegate(byte LocalUserNum, delegate<OnPeoplePickerComplete> InDelegate);

delegate OnShowGamerCardComplete(bool bWasSuccessful);

function AddShowGamerCardCompleteDelegate(delegate<OnShowGamerCardComplete> GamerCardDelegate);

function ClearShowGamerCardCompleteDelegate(delegate<OnShowGamerCardComplete> GamerCardDelegate);

function bool ShowVideo(string URL);

function bool ShowHelpUI(byte LocalUserNum);

function bool ShowHelpForErrorUI(string ContextId, string ErrorString);

delegate OnShowHelpComplete(bool bWasSuccessful);

function AddShowHelpCompleteDelegate(delegate<OnShowHelpComplete> HelpDelegate);

function ClearShowHelpCompleteDelegate(delegate<OnShowHelpComplete> HelpDelegate);

function bool ShowDataSendingUI(byte LocalUserNum, string Message, string DataName, string DataDescription, array<byte> Data, int MaxSelectableUsers);

delegate OnAcceptReceivedData(string Data);

function AddAcceptReceivedDataDelegate(byte LocalUserNum, delegate<OnAcceptReceivedData> InDelegate);

function ClearAcceptReceivedDataDelegate(byte LocalUserNum, delegate<OnAcceptReceivedData> InDelegate);

delegate OnDeviceSelectionComplete(bool bWasSuccessful);

function AddDeviceSelectionDoneDelegate(byte LocalUserNum, delegate<OnDeviceSelectionComplete> DeviceDelegate)
{
    local int AddIndex;

    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        if(DeviceCache.DeviceSelectionDelegates.Find(DeviceDelegate == -1)
        {
            AddIndex = DeviceCache.DeviceSelectionDelegates.Length;
            DeviceCache.DeviceSelectionDelegates.Length = DeviceCache.DeviceSelectionDelegates.Length + 1;
            DeviceCache.DeviceSelectionDelegates[AddIndex] = DeviceDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to SetDeviceSelectionDoneDelegate()");
    }
}

function ClearDeviceSelectionDoneDelegate(byte LocalUserNum, delegate<OnDeviceSelectionComplete> DeviceDelegate)
{
    local int RemoveIndex;

    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        RemoveIndex = DeviceCache.DeviceSelectionDelegates.Find(DeviceDelegate;
        if(RemoveIndex != -1)
        {
            DeviceCache.DeviceSelectionDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearDeviceSelectionDoneDelegate()");
    }
}

function int GetDeviceSelectionResults(byte LocalUserNum, out string DeviceName);

function bool IsDeviceValid(int DeviceID, optional int SizeNeeded);

// Export UOnlineSubsystemSteamworks::execUnlockAchievement(FFrame&, void* const)
native function bool UnlockAchievement(byte LocalUserNum, int AchievementId, optional float PercentComplete)
{
    PercentComplete = 100;                    
}

delegate OnUnlockAchievementComplete(bool bWasSuccessful);

function AddUnlockAchievementCompleteDelegate(byte LocalUserNum, delegate<OnUnlockAchievementComplete> UnlockAchievementCompleteDelegate)
{
    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        if(AchievementDelegates.Find(UnlockAchievementCompleteDelegate == -1)
        {
            AchievementDelegates.AddItem(UnlockAchievementCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to AddUnlockAchievementCompleteDelegate()");
    }
}

function ClearUnlockAchievementCompleteDelegate(byte LocalUserNum, delegate<OnUnlockAchievementComplete> UnlockAchievementCompleteDelegate)
{
    local int RemoveIndex;

    if((LocalUserNum >= 0) && LocalUserNum < 4)
    {
        RemoveIndex = AchievementDelegates.Find(UnlockAchievementCompleteDelegate;
        if(RemoveIndex != -1)
        {
            AchievementDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearUnlockAchievementCompleteDelegate()");
    }
}

function bool UnlockGamerPicture(byte LocalUserNum, int PictureId);

delegate OnProfileDataChanged();

function AddProfileDataChangedDelegate(byte LocalUserNum, delegate<OnProfileDataChanged> ProfileDataChangedDelegate)
{
    if(LocalUserNum == 0)
    {
        if(ProfileCache.ProfileDataChangedDelegates.Find(ProfileDataChangedDelegate == -1)
        {
            ProfileCache.ProfileDataChangedDelegates.AddItem(ProfileDataChangedDelegate;
        }        
    }
    else
    {
        LogInternal(("Invalid user id (" $ string(LocalUserNum)) $ ") specified for AddProfileDataChangedDelegate()");
    }
}

function ClearProfileDataChangedDelegate(byte LocalUserNum, delegate<OnProfileDataChanged> ProfileDataChangedDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == LoggedInPlayerNum)
    {
        RemoveIndex = ProfileCache.ProfileDataChangedDelegates.Find(ProfileDataChangedDelegate;
        if(RemoveIndex != -1)
        {
            ProfileCache.ProfileDataChangedDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        LogInternal(("Invalid user id (" $ string(LocalUserNum)) $ ") specified for ClearProfileDataChangedDelegate()");
    }
}

// Export UOnlineSubsystemSteamworks::execShowFriendsUI(FFrame&, void* const)
native function bool ShowFriendsUI(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execShowFriendsInviteUI(FFrame&, void* const)
native function bool ShowFriendsInviteUI(byte LocalUserNum, UniqueNetId PlayerID);

// Export UOnlineSubsystemSteamworks::execShowPlayersUI(FFrame&, void* const)
native function bool ShowPlayersUI(byte LocalUserNum);

// Export UOnlineSubsystemSteamworks::execReadAchievements(FFrame&, void* const)
native function bool ReadAchievements(byte LocalUserNum, optional int TitleId, optional bool bShouldReadText, optional bool bShouldReadImages)
{
    TitleId = 0;
    bShouldReadText = true;
    bShouldReadImages = false;                        
}

function ClearAchievements(byte LocalUserNum, optional int TitleId)
{
    TitleId = 0;
}

delegate OnReadAchievementsComplete(int TitleId);

function AddReadAchievementsCompleteDelegate(byte LocalUserNum, delegate<OnReadAchievementsComplete> ReadAchievementsCompleteDelegate)
{
    if(LocalUserNum == LoggedInPlayerNum)
    {
        if(AchievementReadDelegates.Find(ReadAchievementsCompleteDelegate == -1)
        {
            AchievementReadDelegates.AddItem(ReadAchievementsCompleteDelegate;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to AddReadAchievementsComplete()");
    }
}

function ClearReadAchievementsCompleteDelegate(byte LocalUserNum, delegate<OnReadAchievementsComplete> ReadAchievementsCompleteDelegate)
{
    local int RemoveIndex;

    if(LocalUserNum == LoggedInPlayerNum)
    {
        RemoveIndex = AchievementReadDelegates.Find(ReadAchievementsCompleteDelegate;
        if(RemoveIndex != -1)
        {
            AchievementReadDelegates.Remove(RemoveIndex, 1;
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(LocalUserNum)) $ ") passed to ClearReadAchievementsCompleteDelegate()");
    }
}

// Export UOnlineSubsystemSteamworks::execGetAchievements(FFrame&, void* const)
native function Engine.OnlineSubsystem.EOnlineEnumerationReadState GetAchievements(byte LocalUserNum, out array<AchievementDetails> Achievements, optional int TitleId)
{
    TitleId = 0;                    
}

// Export UOnlineSubsystemSteamworks::execShowCustomPlayersUI(FFrame&, void* const)
native function bool ShowCustomPlayersUI(byte LocalUserNum, const out array<UniqueNetId> Players, string Title, string Description);

// Export UOnlineSubsystemSteamworks::execReadOnlineAvatar(FFrame&, void* const)
native function ReadOnlineAvatar(const UniqueNetId PlayerNetId, int Size);

// Export UOnlineSubsystemSteamworks::execGetNumberOfCurrentPlayers(FFrame&, void* const)
native function bool GetNumberOfCurrentPlayers();

delegate OnGetNumberOfCurrentPlayersComplete(int TotalPlayers);

function AddGetNumberOfCurrentPlayersCompleteDelegate(delegate<OnGetNumberOfCurrentPlayersComplete> GetNumberOfCurrentPlayersCompleteDelegate)
{
    if(GetNumberOfCurrentPlayersCompleteDelegates.Find(GetNumberOfCurrentPlayersCompleteDelegate == -1)
    {
        GetNumberOfCurrentPlayersCompleteDelegates.AddItem(GetNumberOfCurrentPlayersCompleteDelegate;
    }
}

function ClearGetNumberOfCurrentPlayersCompleteDelegate(delegate<OnGetNumberOfCurrentPlayersComplete> GetNumberOfCurrentPlayersCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = GetNumberOfCurrentPlayersCompleteDelegates.Find(GetNumberOfCurrentPlayersCompleteDelegate;
    if(RemoveIndex != -1)
    {
        GetNumberOfCurrentPlayersCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execGetSteamClanData(FFrame&, void* const)
native function GetSteamClanData(out array<SteamPlayerClanData> Results);

function bool UnlockAvatarAward(byte LocalUserNum, int AvatarItemId);

function bool ReadCrossTitleProfileSettings(byte LocalUserNum, int TitleId, OnlineProfileSettings ProfileSettings);

delegate OnReadCrossTitleProfileSettingsComplete(byte LocalUserNum, int TitleId, bool bWasSuccessful);

function AddReadCrossTitleProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadCrossTitleProfileSettingsComplete> ReadProfileSettingsCompleteDelegate);

function ClearReadCrossTitleProfileSettingsCompleteDelegate(byte LocalUserNum, delegate<OnReadCrossTitleProfileSettingsComplete> ReadProfileSettingsCompleteDelegate);

function OnlineProfileSettings GetCrossTitleProfileSettings(byte LocalUserNum, int TitleId);

function ClearCrossTitleProfileSettings(byte LocalUserNum, int TitleId);

function bool ShowCustomMessageUI(byte LocalUserNum, const out array<UniqueNetId> Recipients, string MessageTitle, string NonEditableMessage, optional string EditableMessage);

function PostActivityFeedBossKill(string BossName, string ClassName, string MapName);

function PostActivityFeedTeamAward(string AwardName);

function PostActivityFeedPerkLevelUp(string PerkClassName, int Level);

function ReadStoreData();

delegate OnStoreDataRead(bool bSuccessful);

function AddStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate);

function ClearStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate);

function ReadEntitlements();

delegate OnEntitlementsRead(bool bSuccess);

function AddOnEntitlementsReadDelegate(delegate<OnEntitlementsRead> InDelegate);

function ClearOnEntitlementsReadDelegate(delegate<OnEntitlementsRead> InDelegate);

function UpsellPremiumOnlineService();

function bool ShowSystemErrorUI(int ErrorCode, string ErrorContext);

function bool ShowCustomErrorUI(int ErrorCode, optional string ErrorContext, optional string DialogTitle, optional string DialogContent);

// Export UOnlineSubsystemSteamworks::execResetStats(FFrame&, void* const)
native function bool ResetStats(bool bResetAchievements);

// Export UOnlineSubsystemSteamworks::execCreateLeaderboard(FFrame&, void* const)
native function bool CreateLeaderboard(string LeaderboardName, OnlineSubsystemSteamworks.ELeaderboardSortType SortType, OnlineSubsystemSteamworks.ELeaderboardFormat DisplayFormat);

// Export UOnlineSubsystemSteamworks::execDisplayAchievementProgress(FFrame&, void* const)
native function bool DisplayAchievementProgress(int AchievementId, int ProgressCount, int MaxProgress);

// Export UOnlineSubsystemSteamworks::execUniqueNetIdToPlayerName(FFrame&, void* const)
native function string UniqueNetIdToPlayerName(const out UniqueNetId Uid);

// Export UOnlineSubsystemSteamworks::execShowProfileUI(FFrame&, void* const)
native function bool ShowProfileUI(byte LocalUserNum, optional string SubURL, optional UniqueNetId PlayerUID);

function OnVOIPPlaybackFinished(AudioComponent AC)
{
    NotifyVOIPPlaybackFinished(AC);
}

// Export UOnlineSubsystemSteamworks::execNotifyVOIPPlaybackFinished(FFrame&, void* const)
native function NotifyVOIPPlaybackFinished(AudioComponent VOIPAudioComponent);

event bool SetLobbyInterface(Object NewInterface)
{
    LobbyInterface = OnlineLobbyInterfaceSteamworks(NewInterface);
    LobbyInterface.Initialize();
    return LobbyInterface != none;
}

function TWOnlineLobby GetLobbyInterface()
{
    return LobbyInterface;
}

// Export UOnlineSubsystemSteamworks::execSetWorkshopInterface(FFrame&, void* const)
native function bool SetWorkshopInterface(KFWorkshopSteamworks NewInterface);

// Export UOnlineSubsystemSteamworks::execGetUGCInterface(FFrame&, void* const)
native function TWOnlineUGCInterface GetUGCInterface();

// Export UOnlineSubsystemSteamworks::execUniqueNetIdToInt64(FFrame&, void* const)
native function string UniqueNetIdToInt64(const out UniqueNetId Uid);

// Export UOnlineSubsystemSteamworks::execInt64ToUniqueNetId(FFrame&, void* const)
native function bool Int64ToUniqueNetId(string UIDString, out UniqueNetId OutUID);

// Export UOnlineSubsystemSteamworks::execGetCommandlineJoinURL(FFrame&, void* const)
native function bool GetCommandlineJoinURL(bool bMarkAsJoined, out string ServerURL, out string ServerUID);

// Export UOnlineSubsystemSteamworks::execGetFriendJoinURL(FFrame&, void* const)
native function bool GetFriendJoinURL(UniqueNetId FriendUID, out string ServerURL, out string ServerUID);

// Export UOnlineSubsystemSteamworks::execWriteUserFileInternal(FFrame&, void* const)
private native final function bool WriteUserFileInternal(string UserId, string Filename, const out array<byte> FileContents);

// Export UOnlineSubsystemSteamworks::execGetFileContents(FFrame&, void* const)
native function bool GetFileContents(string UserId, string Filename, out array<byte> FileContents);

// Export UOnlineSubsystemSteamworks::execClearFiles(FFrame&, void* const)
native function bool ClearFiles(string UserId);

// Export UOnlineSubsystemSteamworks::execClearFile(FFrame&, void* const)
native function bool ClearFile(string UserId, string Filename);

delegate OnEnumerateUserFilesComplete(bool bWasSuccessful, string UserId);

// Export UOnlineSubsystemSteamworks::execEnumerateUserFiles(FFrame&, void* const)
native function EnumerateUserFiles(string UserId);

function AddEnumerateUserFileCompleteDelegate(delegate<OnEnumerateUserFilesComplete> EnumerateUserFileCompleteDelegate)
{
    if(EnumerateUserFilesCompleteDelegates.Find(EnumerateUserFileCompleteDelegate == -1)
    {
        EnumerateUserFilesCompleteDelegates[EnumerateUserFilesCompleteDelegates.Length] = EnumerateUserFileCompleteDelegate;
    }
}

function ClearEnumerateUserFileCompleteDelegate(delegate<OnEnumerateUserFilesComplete> EnumerateUserFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = EnumerateUserFilesCompleteDelegates.Find(EnumerateUserFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        EnumerateUserFilesCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execGetUserFileList(FFrame&, void* const)
native function GetUserFileList(string UserId, out array<EmsFile> UserFiles);

delegate OnReadUserFileComplete(bool bWasSuccessful, string UserId, string Filename);

// Export UOnlineSubsystemSteamworks::execReadUserFile(FFrame&, void* const)
native function bool ReadUserFile(string UserId, string Filename);

function AddReadUserFileCompleteDelegate(delegate<OnReadUserFileComplete> ReadUserFileCompleteDelegate)
{
    if(ReadUserFileCompleteDelegates.Find(ReadUserFileCompleteDelegate == -1)
    {
        ReadUserFileCompleteDelegates[ReadUserFileCompleteDelegates.Length] = ReadUserFileCompleteDelegate;
    }
}

function ClearReadUserFileCompleteDelegate(delegate<OnReadUserFileComplete> ReadUserFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ReadUserFileCompleteDelegates.Find(ReadUserFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        ReadUserFileCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnWriteUserFileComplete(bool bWasSuccessful, string UserId, string Filename);

// Export UOnlineSubsystemSteamworks::execWriteUserFile(FFrame&, void* const)
native function bool WriteUserFile(string UserId, string Filename, const out array<byte> FileContents);

function AddWriteUserFileCompleteDelegate(delegate<OnWriteUserFileComplete> WriteUserFileCompleteDelegate)
{
    if(WriteUserFileCompleteDelegates.Find(WriteUserFileCompleteDelegate == -1)
    {
        WriteUserFileCompleteDelegates[WriteUserFileCompleteDelegates.Length] = WriteUserFileCompleteDelegate;
    }
}

function ClearWriteUserFileCompleteDelegate(delegate<OnWriteUserFileComplete> WriteUserFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = WriteUserFileCompleteDelegates.Find(WriteUserFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        WriteUserFileCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnDeleteUserFileComplete(bool bWasSuccessful, string UserId, string Filename);

// Export UOnlineSubsystemSteamworks::execDeleteUserFile(FFrame&, void* const)
native function bool DeleteUserFile(string UserId, string Filename, bool bShouldCloudDelete, bool bShouldLocallyDelete);

function AddDeleteUserFileCompleteDelegate(delegate<OnDeleteUserFileComplete> DeleteUserFileCompleteDelegate)
{
    if(DeleteUserFileCompleteDelegates.Find(DeleteUserFileCompleteDelegate == -1)
    {
        DeleteUserFileCompleteDelegates[DeleteUserFileCompleteDelegates.Length] = DeleteUserFileCompleteDelegate;
    }
}

function ClearDeleteUserFileCompleteDelegate(delegate<OnDeleteUserFileComplete> DeleteUserFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = DeleteUserFileCompleteDelegates.Find(DeleteUserFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        DeleteUserFileCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineSubsystemSteamworks::execGetSharedFileContents(FFrame&, void* const)
native function bool GetSharedFileContents(string SharedHandle, out array<byte> FileContents);

// Export UOnlineSubsystemSteamworks::execClearSharedFiles(FFrame&, void* const)
native function bool ClearSharedFiles();

// Export UOnlineSubsystemSteamworks::execClearSharedFile(FFrame&, void* const)
native function bool ClearSharedFile(string SharedHandle);

delegate OnReadSharedFileComplete(bool bWasSuccessful, string SharedHandle);

// Export UOnlineSubsystemSteamworks::execReadSharedFile(FFrame&, void* const)
native function bool ReadSharedFile(string SharedHandle);

function AddReadSharedFileCompleteDelegate(delegate<OnReadSharedFileComplete> ReadSharedFileCompleteDelegate)
{
    if(SharedFileReadCompleteDelegates.Find(ReadSharedFileCompleteDelegate == -1)
    {
        SharedFileReadCompleteDelegates[SharedFileReadCompleteDelegates.Length] = ReadSharedFileCompleteDelegate;
    }
}

function ClearReadSharedFileCompleteDelegate(delegate<OnReadSharedFileComplete> ReadSharedFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = SharedFileReadCompleteDelegates.Find(ReadSharedFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        SharedFileReadCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnWriteSharedFileComplete(bool bWasSuccessful, string UserId, string Filename, string SharedHandle);

// Export UOnlineSubsystemSteamworks::execWriteSharedFile(FFrame&, void* const)
native function bool WriteSharedFile(string UserId, string Filename, const out array<byte> Contents);

function AddWriteSharedFileCompleteDelegate(delegate<OnWriteSharedFileComplete> WriteSharedFileCompleteDelegate)
{
    if(SharedFileWriteCompleteDelegates.Find(WriteSharedFileCompleteDelegate == -1)
    {
        SharedFileWriteCompleteDelegates[SharedFileWriteCompleteDelegates.Length] = WriteSharedFileCompleteDelegate;
    }
}

function ClearWriteSharedFileCompleteDelegate(delegate<OnWriteSharedFileComplete> WriteSharedFileCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = SharedFileWriteCompleteDelegates.Find(WriteSharedFileCompleteDelegate;
    if(RemoveIndex != -1)
    {
        SharedFileWriteCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function AddLoginOnOtherPlatformDoneAndFriendsReadyDelegate(delegate<OnLoginOnOtherPlatformDoneAndFriendsReady> LoginOnOtherPlatformDoneAndFriendsReadyDelegate)
{
    if(LoginOnOtherPlatformDoneAndFriendsReadyDelegates.Find(LoginOnOtherPlatformDoneAndFriendsReadyDelegate == -1)
    {
        LoginOnOtherPlatformDoneAndFriendsReadyDelegates[SharedFileWriteCompleteDelegates.Length] = LoginOnOtherPlatformDoneAndFriendsReadyDelegate;
    }
}

function ClearLoginOnOtherPlatformDoneAndFriendsReadyDelegate(delegate<OnLoginOnOtherPlatformDoneAndFriendsReady> LoginOnOtherPlatformDoneAndFriendsReadyDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LoginOnOtherPlatformDoneAndFriendsReadyDelegates.Find(LoginOnOtherPlatformDoneAndFriendsReadyDelegate;
    if(RemoveIndex != -1)
    {
        LoginOnOtherPlatformDoneAndFriendsReadyDelegates.Remove(RemoveIndex, 1;
    }
}

function ClearAllDelegates()
{
    EnumerateUserFilesCompleteDelegates.Length = 0;
    ReadUserFileCompleteDelegates.Length = 0;
    WriteUserFileCompleteDelegates.Length = 0;
    DeleteUserFileCompleteDelegates.Length = 0;
}

// Export UOnlineSubsystemSteamworks::execGetVivoxAudioDevices(FFrame&, void* const)
native function array<string> GetVivoxAudioDevices();

// Export UOnlineSubsystemSteamworks::execSetVivoxMicDevice(FFrame&, void* const)
native function SetVivoxMicDevice(int deviceIndex);

// Export UOnlineSubsystemSteamworks::execVivoxEchoTestStart(FFrame&, void* const)
native function VivoxEchoTestStart();

// Export UOnlineSubsystemSteamworks::execVivoxEchoTestStop(FFrame&, void* const)
native function VivoxEchoTestStop();

// Export UOnlineSubsystemSteamworks::execSetVoIPVolume(FFrame&, void* const)
native function SetVoIPVolume(float Volume);

// Export UOnlineSubsystemSteamworks::execSetVoIPMicVolume(FFrame&, void* const)
native function SetVoIPMicVolume(float Volume);

// Export UOnlineSubsystemSteamworks::execGetVoIPVolume(FFrame&, void* const)
native function float GetVoIPVolume();

// Export UOnlineSubsystemSteamworks::execGetCurrentVOIPLevel(FFrame&, void* const)
native function float GetCurrentVOIPLevel();

// Export UOnlineSubsystemSteamworks::execShowVoIPConfigUI(FFrame&, void* const)
native function ShowVoIPConfigUI();

// Export UOnlineSubsystemSteamworks::execValidateStat(FFrame&, void* const)
private native final function bool ValidateStat(QWord UserId, int StatId, int Value);

// Export UOnlineSubsystemSteamworks::execSubmitStatValidation(FFrame&, void* const)
private native final function SubmitStatValidation(QWord UserId, int StatId, int Value, bool bClientInterface);

// Export UOnlineSubsystemSteamworks::execGetItemDefs(FFrame&, void* const)
native function GetItemDefs();

// Export UOnlineSubsystemSteamworks::execRefreshInventory(FFrame&, void* const)
native function RefreshInventory();

// Export UOnlineSubsystemSteamworks::execOpenMarketPlaceSearch(FFrame&, void* const)
native function OpenMarketPlaceSearch(ItemProperties Item);

// Export UOnlineSubsystemSteamworks::execOpenItemPurchaseOverlay(FFrame&, void* const)
native function OpenItemPurchaseOverlay(int SKU);

// Export UOnlineSubsystemSteamworks::execOpenURL(FFrame&, void* const)
native function OpenURL(string WebsiteLink);

// Export UOnlineSubsystemSteamworks::execGetPlayerGroups(FFrame&, void* const)
native function GetPlayerGroups(out array<UniqueNetId> PlayerGroups);

// Export UOnlineSubsystemSteamworks::execCheckPlayerGroup(FFrame&, void* const)
native function bool CheckPlayerGroup(UniqueNetId Group);

function bool AddInGamePost(int InPostID, optional string InPostParam);

function bool ShowGamerCardUIByUsername(byte LocalUserNum, string UserName);

function bool RecordPlayersRecentlyMet(byte LocalUserNum, out array<PlayerNameIdPair> Players, string GameDescription);

defaultproperties
{
    CurrentNotificationPosition=ENetworkNotificationPosition.NNP_TopRight
    LoggedInPlayerName="Local Profile"
    TalkTimeOutValue=0.5
    ConnectionPresenceTimeInterval=0.5
    ProfileDataDirectory="..\\..\\KFGame\\SaveData"
}