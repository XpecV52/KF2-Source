/*******************************************************************************
 * KFOnlineLobbySteamworks generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFOnlineLobbySteamworks extends OnlineLobbyInterfaceSteamworks within OnlineSubsystemSteamworks
    native
    config(Engine);

var UniqueNetId CurrentLobbyId;
var const UniqueNetId ZeroUniqueId;
var bool bCreatingLobby;
var bool bWaitingForLobby;
var bool bWaitingForServer;
var bool bDebug;
var string PendingServerIP;

function UniqueNetId GetCurrentLobbyId()
{
    return CurrentLobbyId;
}

function bool IsInLobby()
{
    if(CurrentLobbyId != ZeroUniqueId)
    {
        return true;
    }
    return false;
}

function bool IsLobbyOwner()
{
    local bool Success;
    local UniqueNetId OwnerId;

    if(!IsInLobby())
    {
        if(bDebug)
        {
            LogInternal(string(GetFuncName()) @ "Not in lobby", 'DevLobby');
        }
        return false;
    }
    Success = GetLobbyAdmin(CurrentLobbyId, OwnerId);
    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "success=") $ string(Success)) @ "CurrentLobbyId=") $ Outer.UniqueNetIdToString(CurrentLobbyId)) @ "OwnerID=") $ Outer.UniqueNetIdToString(OwnerId), 'DevLobby');
    }
    return Success && OwnerId == Outer.LoggedInPlayerId;
}

function Initialize()
{
    AddLobbyInviteDelegate(OnLobbyInvite);
    AddLobbyJoinGameDelegate(OnLobbyJoinGame);
    AddLobbyReceiveMessageDelegate(OnLobbyReceiveMessage);
}

function bool MakeLobby(int MaxPlayers, Engine.TWOnlineLobby.ELobbyVisibility Type)
{
    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "MaxPlayers=") $ string(MaxPlayers)) @ "Type=") $ string(Type)) @ "CurrentLobbyId=") $ Outer.UniqueNetIdToString(CurrentLobbyId), 'DevLobby');
    }
    if(IsInLobby())
    {
        SetLobbyType(CurrentLobbyId, Type);
        return false;
    }
    AddCreateLobbyCompleteDelegate(OnCreateLobbyComplete);
    bCreatingLobby = true;
    return CreateLobby(MaxPlayers, Type);
}

function OnCreateLobbyComplete(bool bWasSuccessful, UniqueNetId LobbyId, string Error)
{
    local string ConnectedServerIP;

    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "bWasSuccessful=") $ string(bWasSuccessful)) @ "Id=") $ Outer.UniqueNetIdToString(LobbyId)) @ "Error=") $ Error, 'DevLobby');
    }
    ClearCreateLobbyCompleteDelegate(OnCreateLobbyComplete);
    bCreatingLobby = false;
    if(bWasSuccessful)
    {
        AddLobbyMemberStatusUpdateDelegate(OnLobbyMemberStatusUpdate);
        CurrentLobbyId = LobbyId;
        ConnectedServerIP = GetConnectedServerIP();
        if(ConnectedServerIP != "")
        {
            if(bDebug)
            {
                LogInternal((((string(GetFuncName()) @ "SetLobbyServer CurrentLobbyId=") $ Outer.UniqueNetIdToString(CurrentLobbyId)) @ "ConnectedServerIP=") $ ConnectedServerIP, 'DevLobby');
            }
            SetLobbyServer(CurrentLobbyId, ZeroUniqueId, ConnectedServerIP);
        }
        if(bWaitingForLobby)
        {
            bWaitingForLobby = false;
            ShowLobbyInviteInterfaceInternal();
        }
        NotifyLobbyStatusChanged(true);
    }
}

// Export UKFOnlineLobbySteamworks::execShowLobbyInviteInterfaceInternal(FFrame&, void* const)
native function bool ShowLobbyInviteInterfaceInternal();

function ShowLobbyInviteInterface()
{
    if(bDebug)
    {
        LogInternal((string(GetFuncName()) @ "bCreatingLobby=") $ string(bCreatingLobby), 'DevLobby');
    }
    if(bCreatingLobby)
    {
        bWaitingForLobby = true;        
    }
    else
    {
        ShowLobbyInviteInterfaceInternal();
    }
}

event bool InviteFriendToLobby(string NickName)
{
    local bool Success;
    local UniqueNetId FriendId;

    if(bDebug)
    {
        LogInternal((string(GetFuncName()) @ "Nickname=") $ NickName, 'DevLobby');
    }
    if(!IsInLobby())
    {
        return false;
    }
    FriendId = GetFriendUniqueId(NickName);
    if(FriendId != ZeroUniqueId)
    {
        Success == (InviteToLobby(CurrentLobbyId, FriendId));
    }
    if(Success)
    {
        if(bDebug)
        {
            LogInternal((((("Friend" @ NickName) @ "with id") @ Outer.UniqueNetIdToString(FriendId)) @ "invited to party") @ Outer.UniqueNetIdToString(CurrentLobbyId), 'DevLobby');
        }        
    }
    else
    {
        if(bDebug)
        {
            LogInternal((("Failed to invite Friend" @ NickName) @ "to party") @ Outer.UniqueNetIdToString(CurrentLobbyId), 'DevLobby');
        }
    }
    return Success;
}

function UniqueNetId GetFriendUniqueId(string NickName, optional bool IncludeSelf)
{
    local Engine.OnlineSubsystem.EOnlineEnumerationReadState ReadState;
    local array<OnlineFriend> Friends;
    local OnlineFriend I;

    IncludeSelf = true;
    if(IncludeSelf && NickName == Outer.LoggedInPlayerName)
    {
        return Outer.LoggedInPlayerId;
    }
    ReadState = Outer.GetFriendsList(0, Friends);
    if(ReadState != 2)
    {
        if(bDebug)
        {
            LogInternal("Do not have friends list loaded.", 'DevLobby');
        }
        return ZeroUniqueId;
    }
    foreach Friends(I,)
    {
        if(Caps(I.NickName) == Caps(NickName))
        {            
            return I.UniqueId;
        }        
    }    
    if(bDebug)
    {
        LogInternal(("A user with nickname" @ NickName) @ "is not a friend.", 'DevLobby');
    }
    return ZeroUniqueId;
}

function OnLobbyMemberStatusUpdate(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int MemberIndex, int InstigatorIndex, string Status)
{
    local UniqueNetId MemberId;
    local string NickName;

    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "LobbyIndex=") $ string(LobbyIndex)) @ "MemberIndex=") $ string(MemberIndex)) @ "Status=") $ Status, 'DevLobby');
    }
    MemberId = LobbyList[LobbyIndex].Members[MemberIndex].PlayerUID;
    if(MemberId != ZeroUniqueId)
    {
        NickName = Outer.UniqueNetIdToPlayerName(MemberId);
        if(NickName == "")
        {
            NickName = "Unknown Nickname";
        }
        if(bDebug)
        {
            LogInternal((((((NickName @ "(UID") @ Outer.UniqueNetIdToString(MemberId)) $ ") status changed in party") @ Outer.UniqueNetIdToString(LobbyList[LobbyIndex].LobbyUID)) $ ":") @ Status, 'DevLobby');
        }
    }
}

function OnLobbyInvite(UniqueNetId LobbyId, UniqueNetId FriendId, bool bAccepted)
{
    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "LobbyId=") $ Outer.UniqueNetIdToString(LobbyId)) @ "FriendId=") $ Outer.UniqueNetIdToString(FriendId)) @ "bAccepted=") $ string(bAccepted), 'DevLobby');
    }
    if(!bAccepted)
    {
        return;
    }
    if(LobbyId == CurrentLobbyId)
    {
        if(bDebug)
        {
            LogInternal(string(GetFuncName()) @ "Ignoring invitation to current lobby.", 'DevLobby');
        }
        return;
    }
    if((GetPC()) != none)
    {
        if(bDebug)
        {
            LogInternal(string(GetFuncName()) @ "Accepting lobby invite; disconnecting from current server.", 'DevLobby');
        }        
        GetPC().ConsoleCommand("disconnect");
    }
    AddJoinLobbyCompleteDelegate(OnJoinLobbyComplete);
    JoinLobby(LobbyId);
}

function OnJoinLobbyComplete(bool bWasSuccessful, const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, UniqueNetId LobbyUID, string Error)
{
    local string ServerIPAddress;

    if(bDebug)
    {
        LogInternal((((((((string(GetFuncName()) @ "bWasSuccessful=") $ string(bWasSuccessful)) @ "LobbyIndex=") $ string(LobbyIndex)) @ "LobbyUID=") $ Outer.UniqueNetIdToString(LobbyUID)) @ "Error=") $ Error, 'DevLobby');
    }
    ClearJoinLobbyCompleteDelegate(OnJoinLobbyComplete);
    if(bWasSuccessful)
    {
        if(IsInLobby())
        {
            LeaveLobby(CurrentLobbyId);
        }
        CurrentLobbyId = LobbyUID;
        AddLobbyMemberStatusUpdateDelegate(OnLobbyMemberStatusUpdate);
        ServerIPAddress = GetLobbyServerIP(CurrentLobbyId);
        if(bDebug)
        {
            LogInternal((string(GetFuncName()) @ "ServerIPAddress=") $ ServerIPAddress, 'DevLobby');
        }
        if(ServerIPAddress != "")
        {
            if(bDebug)
            {
                LogInternal(string(GetFuncName()) @ "JoinServer called", 'DevLobby');
            }
            JoinServer(ServerIPAddress, ZeroUniqueId);
            QuitLobby();
        }
        NotifyLobbyStatusChanged(true);
    }
}

function bool QuitLobby()
{
    local bool Success;

    if(bDebug)
    {
        LogInternal((string(GetFuncName()) @ "CurrentLobbyId=") $ Outer.UniqueNetIdToString(CurrentLobbyId), 'DevLobby');
    }
    if(IsInLobby())
    {
        Success = LeaveLobby(CurrentLobbyId);
        CurrentLobbyId = ZeroUniqueId;
        ClearLobbyMemberStatusUpdateDelegate(OnLobbyMemberStatusUpdate);
    }
    if(Success)
    {
        NotifyLobbyStatusChanged(false);
    }
    return Success;
}

function UniqueNetId GetMyId()
{
    local UniqueNetId LoggedInPlayer;

    Outer.GetUniquePlayerId(0, LoggedInPlayer);
    return LoggedInPlayer;
}

// Export UKFOnlineLobbySteamworks::execJoinServer(FFrame&, void* const)
native function bool JoinServer(string ServerIP, UniqueNetId ServerID);

// Export UKFOnlineLobbySteamworks::execSetLobbyServer(FFrame&, void* const)
native function bool SetLobbyServer(UniqueNetId LobbyId, UniqueNetId ServerUID, string ServerIP);

// Export UKFOnlineLobbySteamworks::execGetServerConnected(FFrame&, void* const)
native function bool GetServerConnected();

// Export UKFOnlineLobbySteamworks::execGetLobbyServerIP(FFrame&, void* const)
native function string GetLobbyServerIP(const out UniqueNetId LobbyId);

// Export UKFOnlineLobbySteamworks::execGetConnectedServerIP(FFrame&, void* const)
native function string GetConnectedServerIP();

// Export UKFOnlineLobbySteamworks::execAppendPasswordToURL(FFrame&, void* const)
native function string AppendPasswordToURL(string URL, string Password);

function bool LobbyJoinGame(optional string ServerIP)
{
    if(bDebug)
    {
        LogInternal((string(GetFuncName()) @ "ServerIP=") $ (GetLobbyServerIP(CurrentLobbyId)), 'DevLobby');
    }
    if(!IsInLobby())
    {
        return false;        
    }
    else
    {
        if(!GetServerConnected() || !Outer.CachedAuthInt.IsReady())
        {
            if(bDebug)
            {
                LogInternal(string(GetFuncName()) @ "Server is not connected or auth is not ready.", 'DevLobby');
            }
            if(!bWaitingForServer)
            {
                PendingServerIP = ServerIP;
                bWaitingForServer = true;
                Outer.CachedAuthInt.AddAuthReadyDelegate(LobbyJoinGameDelegate);
                if(bDebug)
                {
                    LogInternal((string(GetFuncName()) @ "Waiting for server PendingServerIP=") @ PendingServerIP, 'DevLobby');
                }
            }
            return true;
        }
    }
    LobbyJoinGameDelegate();
    return true;
}

function LobbyJoinGameDelegate()
{
    local UniqueNetId ServerID;

    if(bDebug)
    {
        LogInternal((string(GetFuncName()) @ "Done waiting for server PendingServerIP=") @ PendingServerIP, 'DevLobby');
    }
    bWaitingForServer = false;
    Outer.CachedAuthInt.ClearAuthReadyDelegate(LobbyJoinGameDelegate);
    Outer.CachedAuthInt.GetServerUniqueId(ServerID);
    SetLobbyServer(CurrentLobbyId, ServerID, PendingServerIP);
    PendingServerIP = "";
}

function bool LobbyJoinServer(string ServerIP)
{
    if(bDebug)
    {
        LogInternal((string(GetFuncName()) @ "ServerIP=") $ ServerIP, 'DevLobby');
    }
    if(IsLobbyOwner())
    {
        return SetLobbyServer(CurrentLobbyId, ZeroUniqueId, ServerIP);        
    }
    else
    {
        QuitLobby();
        return false;
    }
}

function OnLobbyJoinGame(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, UniqueNetId ServerID, string ServerIP)
{
    local bool bSuccess;

    if(IsLobbyOwner())
    {
        return;
    }
    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "LobbyIndex=") $ string(LobbyIndex)) @ "ServerId=") $ Outer.UniqueNetIdToString(ServerID)) @ "ServerIp=") $ ServerIP, 'DevLobby');
    }
    bSuccess = JoinServer(ServerIP, ServerID);
    QuitLobby();
    if(bDebug)
    {
        LogInternal((((string(GetFuncName()) @ "bSuccess=") $ string(bSuccess)) @ "ServerIP=") $ ServerIP, 'DevLobby');
    }
}

function bool FindLobbies(optional int MaxResults, optional array<LobbyFilter> Filters, optional array<LobbySortFilter> SortFilters, optional int MinSlots, optional OnlineLobbyInterfaceSteamworks.ELobbyDistance Distance)
{
    MaxResults = 32;            
    Distance = 0;
    AddFindLobbiesCompleteDelegate(FindLobbiesComplete);
    return super.FindLobbies(MaxResults, Filters, SortFilters, MinSlots, Distance);
}

function FindLobbiesComplete(bool bWasSuccessful, const out array<BasicLobbyInfo> LobbyList)
{
    ClearFindLobbiesCompleteDelegate(FindLobbiesComplete);
    if(bWasSuccessful && LobbyList.Length > 0)
    {
        AddJoinLobbyCompleteDelegate(OnJoinLobbyComplete);
        LogInternal("Starting join of party" @ Outer.UniqueNetIdToString(LobbyList[0].LobbyUID));
        JoinLobby(LobbyList[0].LobbyUID);        
    }
    else
    {
        if(bWasSuccessful)
        {
            LogInternal("Unable to find a matching lobby.");
            NotifyUnsuccessfulSearch();            
        }
        else
        {
            LogInternal("Find lobbies failed.");
        }
    }
}

function NotifyUnsuccessfulSearch()
{
    local PlayerController PC;

    PC = GetPC();
    if(PC != none)
    {
        PC.NotifyUnsuccessfulSearch();
    }
}

function NotifyLobbyStatusChanged(bool bInLobby)
{
    local PlayerController PC;

    PC = GetPC();
    if(PC != none)
    {
        PC.OnLobbyStatusChanged(bInLobby);
    }
}

// Export UKFOnlineLobbySteamworks::execGetLobbyData(FFrame&, void* const)
native function string GetLobbyData(int LobbyIndex, string Key);

function SetLobbyData(string Key, string Value)
{
    if(!IsInLobby())
    {
        return;
    }
    SetLobbySetting(CurrentLobbyId, Key, Value);
}

function bool SetVisibility(int VisibilityIndex)
{
    if(IsInLobby())
    {
        return SetLobbyType(CurrentLobbyId, byte(VisibilityIndex));
    }
    return false;
}

function PlayerController GetPC()
{
    local WorldInfo WI;

    WI = Class'WorldInfo'.static.GetWorldInfo();
    return WI.GetALocalPlayerController();
}

event ConsolePrint(string Message)
{
    GetPC().ClientMessage(Message);
}

function OnLobbyReceiveMessage(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int MemberIndex, string Type, string Message)
{
    local UniqueNetId MemberId;
    local string NickName;

    MemberId = LobbyList[LobbyIndex].Members[MemberIndex].PlayerUID;
    if(MemberId != ZeroUniqueId)
    {
        NickName = Outer.UniqueNetIdToPlayerName(MemberId);
        if(NickName == "")
        {
            NickName = "Unknown Nickname";
        }
        ConsolePrint(Message);
    }
}

function bool LobbyMessage(string Message)
{
    if(!IsInLobby())
    {
        return false;
    }
    return SendLobbyMessage(CurrentLobbyId, Message);
}

event TestFindLobbies()
{
    LogInternal("Attempting to find lobbies.");
    FindLobbies();
}

function string GetLobbyURLString()
{
    local ActiveLobbyInfo LobbyInfo;
    local string LobbyURLString;
    local LobbyMember Member;
    local int Index;

    if(!GetCurrentLobby(LobbyInfo))
    {
        return "";
    }
    foreach LobbyInfo.Members(Member, Index)
    {
        if(Member.PlayerUID != Outer.LoggedInPlayerId)
        {
            LogInternal("LobbyURLString:" @ Outer.UniqueNetIdToString(Member.PlayerUID));            
            LobbyURLString $= ((("?party" $ string(Index)) $ "=") $ Outer.UniqueNetIdToString(Member.PlayerUID));
        }        
    }    
    LogInternal("LobbyURLString:" @ LobbyURLString);
    return LobbyURLString;
}

function bool GetCurrentLobby(out ActiveLobbyInfo LobbyInfo)
{
    local ActiveLobbyInfo I;

    if(IsInLobby())
    {
        foreach ActiveLobbies(I,)
        {
            if(I.LobbyUID == CurrentLobbyId)
            {
                LobbyInfo = I;                
                return true;
            }            
        }        
    }
    return false;
}

function string GetFriendNickname(UniqueNetId FriendId, optional bool IncludeSelf)
{
    local string NickName;

    IncludeSelf = true;
    if(FriendId == ZeroUniqueId)
    {
        return "";
    }
    if(IncludeSelf && FriendId == Outer.LoggedInPlayerId)
    {
        return Outer.LoggedInPlayerName;
    }
    NickName = Outer.UniqueNetIdToPlayerName(FriendId);
    if(NickName == "")
    {
        NickName = "Non-friend";
    }
    return NickName;
}

function SetServerPassword(string Password)
{
    if(IsLobbyOwner())
    {
        SetLobbyData("Password", Password);
    }
}

defaultproperties
{
    bDebug=true
}