/*******************************************************************************
 * OnlineLobbyInterfaceSteamworks generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineLobbyInterfaceSteamworks extends TWOnlineLobby within OnlineSubsystemCommonImpl
    native
    config(Engine);

enum ELobbyDistance
{
    LD_Best,
    LD_Close,
    LD_Far,
    LD_Any,
    LD_MAX
};

struct native LobbySortFilter
{
    var string Key;
    var int TargetVal;

    structdefaultproperties
    {
        Key=""
        TargetVal=0
    }
};

var array<LobbyMetaData> CreateLobbySettings;
var const UniqueNetId PendingCreateLobbyResult;
var array< delegate<OnCreateLobbyComplete> > CreateLobbyCompleteDelegates;
var const bool bLobbySearchInProgress;
var bool CommandLineLobbyJoined;
var const array<BasicLobbyInfo> CachedFindLobbyResults;
var array< delegate<OnFindLobbiesComplete> > FindLobbiesCompleteDelegates;
var const array<ActiveLobbyInfo> ActiveLobbies;
var array< delegate<OnJoinLobbyComplete> > JoinLobbyCompleteDelegates;
var config array<config string> LobbyMemberKeys;
var array< delegate<OnLobbySettingsUpdate> > LobbySettingsUpdateDelegates;
var array< delegate<OnLobbyMemberSettingsUpdate> > LobbyMemberSettingsUpdateDelegates;
var array< delegate<OnLobbyMemberStatusUpdate> > LobbyMemberStatusUpdateDelegates;
var array< delegate<OnLobbyReceiveMessage> > LobbyReceiveMessageDelegates;
var array< delegate<OnLobbyReceiveBinaryData> > LobbyReceiveBinaryDataDelegates;
var const array<byte> CachedBinaryData;
var array< delegate<OnLobbyJoinGame> > LobbyJoinGameDelegates;
var array< delegate<OnLobbyInvite> > LobbyInviteDelegates;
var delegate<OnCreateLobbyComplete> __OnCreateLobbyComplete__Delegate;
var delegate<OnFindLobbiesComplete> __OnFindLobbiesComplete__Delegate;
var delegate<OnJoinLobbyComplete> __OnJoinLobbyComplete__Delegate;
var delegate<OnLobbySettingsUpdate> __OnLobbySettingsUpdate__Delegate;
var delegate<OnLobbyMemberSettingsUpdate> __OnLobbyMemberSettingsUpdate__Delegate;
var delegate<OnLobbyMemberStatusUpdate> __OnLobbyMemberStatusUpdate__Delegate;
var delegate<OnLobbyReceiveMessage> __OnLobbyReceiveMessage__Delegate;
var delegate<OnLobbyReceiveBinaryData> __OnLobbyReceiveBinaryData__Delegate;
var delegate<OnLobbyJoinGame> __OnLobbyJoinGame__Delegate;
var delegate<OnLobbyKicked> __OnLobbyKicked__Delegate;
var delegate<OnLobbyInvite> __OnLobbyInvite__Delegate;

function Initialize();

// Export UOnlineLobbyInterfaceSteamworks::execCreateLobby(FFrame&, void* const)
native function bool CreateLobby(int MaxPlayers, optional Engine.TWOnlineLobby.ELobbyVisibility Type, optional array<LobbyMetaData> InitialSettings);

delegate OnCreateLobbyComplete(bool bWasSuccessful, UniqueNetId LobbyId, string Error);

function AddCreateLobbyCompleteDelegate(delegate<OnCreateLobbyComplete> CreateLobbyCompleteDelegate)
{
    if(CreateLobbyCompleteDelegates.Find(CreateLobbyCompleteDelegate == -1)
    {
        CreateLobbyCompleteDelegates[CreateLobbyCompleteDelegates.Length] = CreateLobbyCompleteDelegate;
    }
}

function ClearCreateLobbyCompleteDelegate(delegate<OnCreateLobbyComplete> CreateLobbyCompleteDelegate)
{
    local int I;

    I = CreateLobbyCompleteDelegates.Find(CreateLobbyCompleteDelegate;
    if(I != -1)
    {
        CreateLobbyCompleteDelegates.Remove(I, 1;
    }
}

// Export UOnlineLobbyInterfaceSteamworks::execFindLobbies(FFrame&, void* const)
native function bool FindLobbies(optional int MaxResults, optional array<LobbyFilter> Filters, optional array<LobbySortFilter> SortFilters, optional int MinSlots, optional OnlineLobbyInterfaceSteamworks.ELobbyDistance Distance)
{
    MaxResults = 32;            
    Distance = 0;                            
}

// Export UOnlineLobbyInterfaceSteamworks::execUpdateFoundLobbies(FFrame&, void* const)
native function bool UpdateFoundLobbies(optional UniqueNetId LobbyId);

delegate OnFindLobbiesComplete(bool bWasSuccessful, const out array<BasicLobbyInfo> LobbyList);

event TriggerFindLobbiesCompleteDelegates(bool bWasSuccessful)
{
    local array< delegate<OnFindLobbiesComplete> > DelList;
    local delegate<OnFindLobbiesComplete> CurDel;

    DelList = FindLobbiesCompleteDelegates;
    foreach DelList(CurDel,)
    {
        OnFindLobbiesComplete(bWasSuccessful, CachedFindLobbyResults);        
    }    
}

function AddFindLobbiesCompleteDelegate(delegate<OnFindLobbiesComplete> FindLobbiesCompleteDelegate)
{
    if(FindLobbiesCompleteDelegates.Find(FindLobbiesCompleteDelegate == -1)
    {
        FindLobbiesCompleteDelegates[FindLobbiesCompleteDelegates.Length] = FindLobbiesCompleteDelegate;
    }
}

function ClearFindLobbiesCompleteDelegate(delegate<OnFindLobbiesComplete> FindLobbiesCompleteDelegate)
{
    local int I;

    I = FindLobbiesCompleteDelegates.Find(FindLobbiesCompleteDelegate;
    if(I != -1)
    {
        FindLobbiesCompleteDelegates.Remove(I, 1;
    }
}

// Export UOnlineLobbyInterfaceSteamworks::execJoinLobby(FFrame&, void* const)
native function bool JoinLobby(UniqueNetId LobbyId);

delegate OnJoinLobbyComplete(bool bWasSuccessful, const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, UniqueNetId LobbyUID, string Error);

event TriggerJoinLobbyCompleteDelegates(bool bWasSuccessful, int LobbyIndex, UniqueNetId LobbyUID, string Error)
{
    local array< delegate<OnJoinLobbyComplete> > DelList;
    local delegate<OnJoinLobbyComplete> CurDel;

    DelList = JoinLobbyCompleteDelegates;
    foreach DelList(CurDel,)
    {
        OnJoinLobbyComplete(bWasSuccessful, ActiveLobbies, LobbyIndex, LobbyUID, Error);        
    }    
}

function AddJoinLobbyCompleteDelegate(delegate<OnJoinLobbyComplete> JoinLobbyCompleteDelegate)
{
    if(JoinLobbyCompleteDelegates.Find(JoinLobbyCompleteDelegate == -1)
    {
        JoinLobbyCompleteDelegates[JoinLobbyCompleteDelegates.Length] = JoinLobbyCompleteDelegate;
    }
}

function ClearJoinLobbyCompleteDelegate(delegate<OnJoinLobbyComplete> JoinLobbyCompleteDelegate)
{
    local int I;

    I = JoinLobbyCompleteDelegates.Find(JoinLobbyCompleteDelegate;
    if(I != -1)
    {
        JoinLobbyCompleteDelegates.Remove(I, 1;
    }
}

// Export UOnlineLobbyInterfaceSteamworks::execLeaveLobby(FFrame&, void* const)
native function bool LeaveLobby(UniqueNetId LobbyId);

// Export UOnlineLobbyInterfaceSteamworks::execSetLobbyUserSetting(FFrame&, void* const)
native function bool SetLobbyUserSetting(UniqueNetId LobbyId, string Key, string Value);

// Export UOnlineLobbyInterfaceSteamworks::execSendLobbyMessage(FFrame&, void* const)
native function bool SendLobbyMessage(UniqueNetId LobbyId, string Message);

// Export UOnlineLobbyInterfaceSteamworks::execSendLobbyBinaryData(FFrame&, void* const)
native function bool SendLobbyBinaryData(UniqueNetId LobbyId, const out array<byte> Data);

delegate OnLobbySettingsUpdate(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex);

event TriggerLobbySettingsUpdateDelegates(int LobbyIndex)
{
    local array< delegate<OnLobbySettingsUpdate> > DelList;
    local delegate<OnLobbySettingsUpdate> CurDel;

    DelList = LobbySettingsUpdateDelegates;
    foreach DelList(CurDel,)
    {
        OnLobbySettingsUpdate(ActiveLobbies, LobbyIndex);        
    }    
}

function AddLobbySettingsUpdateDelegate(delegate<OnLobbySettingsUpdate> LobbySettingsUpdateDelegate)
{
    if(LobbySettingsUpdateDelegates.Find(LobbySettingsUpdateDelegate == -1)
    {
        LobbySettingsUpdateDelegates[LobbySettingsUpdateDelegates.Length] = LobbySettingsUpdateDelegate;
    }
}

function ClearLobbySettingsUpdateDelegate(delegate<OnLobbySettingsUpdate> LobbySettingsUpdateDelegate)
{
    local int I;

    I = LobbySettingsUpdateDelegates.Find(LobbySettingsUpdateDelegate;
    if(I != -1)
    {
        LobbySettingsUpdateDelegates.Remove(I, 1;
    }
}

delegate OnLobbyMemberSettingsUpdate(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int MemberIndex);

event TriggerLobbyMemberSettingsUpdateDelegates(int LobbyIndex, int MemberIndex)
{
    local array< delegate<OnLobbyMemberSettingsUpdate> > DelList;
    local delegate<OnLobbyMemberSettingsUpdate> CurDel;

    DelList = LobbyMemberSettingsUpdateDelegates;
    foreach DelList(CurDel,)
    {
        OnLobbyMemberSettingsUpdate(ActiveLobbies, LobbyIndex, MemberIndex);        
    }    
}

function AddLobbyMemberSettingsUpdateDelegate(delegate<OnLobbyMemberSettingsUpdate> LobbyMemberSettingsUpdateDelegate)
{
    if(LobbyMemberSettingsUpdateDelegates.Find(LobbyMemberSettingsUpdateDelegate == -1)
    {
        LobbyMemberSettingsUpdateDelegates[LobbyMemberSettingsUpdateDelegates.Length] = LobbyMemberSettingsUpdateDelegate;
    }
}

function ClearLobbyMemberSettingsUpdateDelegate(delegate<OnLobbyMemberSettingsUpdate> LobbyMemberSettingsUpdateDelegate)
{
    local int I;

    I = LobbyMemberSettingsUpdateDelegates.Find(LobbyMemberSettingsUpdateDelegate;
    if(I != -1)
    {
        LobbyMemberSettingsUpdateDelegates.Remove(I, 1;
    }
}

delegate OnLobbyMemberStatusUpdate(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int MemberIndex, int InstigatorIndex, string Status);

event TriggerLobbyMemberStatusUpdateDelegates(int LobbyIndex, int MemberIndex, int InstigatorIndex, string Status)
{
    local array< delegate<OnLobbyMemberStatusUpdate> > DelList;
    local delegate<OnLobbyMemberStatusUpdate> CurDel;

    DelList = LobbyMemberStatusUpdateDelegates;
    foreach DelList(CurDel,)
    {
        OnLobbyMemberStatusUpdate(ActiveLobbies, LobbyIndex, MemberIndex, InstigatorIndex, Status);        
    }    
}

function AddLobbyMemberStatusUpdateDelegate(delegate<OnLobbyMemberStatusUpdate> LobbyMemberStatusUpdateDelegate)
{
    if(LobbyMemberStatusUpdateDelegates.Find(LobbyMemberStatusUpdateDelegate == -1)
    {
        LobbyMemberStatusUpdateDelegates[LobbyMemberStatusUpdateDelegates.Length] = LobbyMemberStatusUpdateDelegate;
    }
}

function ClearLobbyMemberStatusUpdateDelegate(delegate<OnLobbyMemberStatusUpdate> LobbyMemberStatusUpdateDelegate)
{
    local int I;

    I = LobbyMemberStatusUpdateDelegates.Find(LobbyMemberStatusUpdateDelegate;
    if(I != -1)
    {
        LobbyMemberStatusUpdateDelegates.Remove(I, 1;
    }
}

delegate OnLobbyReceiveMessage(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int MemberIndex, string Type, string Message);

event TriggerLobbyReceiveMessageDelegates(int LobbyIndex, int MemberIndex, string Type, string Message)
{
    local array< delegate<OnLobbyReceiveMessage> > DelList;
    local delegate<OnLobbyReceiveMessage> CurDel;

    DelList = LobbyReceiveMessageDelegates;
    foreach DelList(CurDel,)
    {
        OnLobbyReceiveMessage(ActiveLobbies, LobbyIndex, MemberIndex, Type, Message);        
    }    
}

function AddLobbyReceiveMessageDelegate(delegate<OnLobbyReceiveMessage> LobbyReceiveMessageDelegate)
{
    if(LobbyReceiveMessageDelegates.Find(LobbyReceiveMessageDelegate == -1)
    {
        LobbyReceiveMessageDelegates[LobbyReceiveMessageDelegates.Length] = LobbyReceiveMessageDelegate;
    }
}

function ClearLobbyReceiveMessageDelegate(delegate<OnLobbyReceiveMessage> LobbyReceiveMessageDelegate)
{
    local int I;

    I = LobbyReceiveMessageDelegates.Find(LobbyReceiveMessageDelegate;
    if(I != -1)
    {
        LobbyReceiveMessageDelegates.Remove(I, 1;
    }
}

delegate OnLobbyReceiveBinaryData(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int MemberIndex, const out array<byte> Data);

event TriggerLobbyReceiveBinaryDataDelegates(int LobbyIndex, int MemberIndex)
{
    local array< delegate<OnLobbyReceiveBinaryData> > DelList;
    local delegate<OnLobbyReceiveBinaryData> CurDel;

    DelList = LobbyReceiveBinaryDataDelegates;
    foreach DelList(CurDel,)
    {
        OnLobbyReceiveBinaryData(ActiveLobbies, LobbyIndex, MemberIndex, CachedBinaryData);        
    }    
}

function AddLobbyReceiveBinaryDataDelegate(delegate<OnLobbyReceiveBinaryData> LobbyReceiveBinaryDataDelegate)
{
    if(LobbyReceiveBinaryDataDelegates.Find(LobbyReceiveBinaryDataDelegate == -1)
    {
        LobbyReceiveBinaryDataDelegates[LobbyReceiveBinaryDataDelegates.Length] = LobbyReceiveBinaryDataDelegate;
    }
}

function ClearLobbyReceiveBinaryDataDelegate(delegate<OnLobbyReceiveBinaryData> LobbyReceiveBinaryDataDelegate)
{
    local int I;

    I = LobbyReceiveBinaryDataDelegates.Find(LobbyReceiveBinaryDataDelegate;
    if(I != -1)
    {
        LobbyReceiveBinaryDataDelegates.Remove(I, 1;
    }
}

delegate OnLobbyJoinGame(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, UniqueNetId ServerID, string ServerIP);

event TriggerLobbyJoinGameDelegates(int LobbyIndex, UniqueNetId ServerID, string ServerIP)
{
    local array< delegate<OnLobbyJoinGame> > DelList;
    local delegate<OnLobbyJoinGame> CurDel;

    DelList = LobbyJoinGameDelegates;
    foreach DelList(CurDel,)
    {
        OnLobbyJoinGame(ActiveLobbies, LobbyIndex, ServerID, ServerIP);        
    }    
}

function AddLobbyJoinGameDelegate(delegate<OnLobbyJoinGame> LobbyJoinGameDelegate)
{
    if(LobbyJoinGameDelegates.Find(LobbyJoinGameDelegate == -1)
    {
        LobbyJoinGameDelegates[LobbyJoinGameDelegates.Length] = LobbyJoinGameDelegate;
    }
}

function ClearLobbyJoinGameDelegate(delegate<OnLobbyJoinGame> LobbyJoinGameDelegate)
{
    local int I;

    I = LobbyJoinGameDelegates.Find(LobbyJoinGameDelegate;
    if(I != -1)
    {
        LobbyJoinGameDelegates.Remove(I, 1;
    }
}

delegate OnLobbyKicked(const out array<ActiveLobbyInfo> LobbyList, int LobbyIndex, int AdminIndex);

// Export UOnlineLobbyInterfaceSteamworks::execGetLobbyAdmin(FFrame&, void* const)
native function bool GetLobbyAdmin(UniqueNetId LobbyId, out UniqueNetId AdminId);

// Export UOnlineLobbyInterfaceSteamworks::execSetLobbySetting(FFrame&, void* const)
native function bool SetLobbySetting(UniqueNetId LobbyId, string Key, string Value);

// Export UOnlineLobbyInterfaceSteamworks::execRemoveLobbySetting(FFrame&, void* const)
native function bool RemoveLobbySetting(UniqueNetId LobbyId, string Key);

// Export UOnlineLobbyInterfaceSteamworks::execSetLobbyServer(FFrame&, void* const)
native function bool SetLobbyServer(UniqueNetId LobbyId, UniqueNetId ServerUID, string ServerIP);

// Export UOnlineLobbyInterfaceSteamworks::execSetLobbyType(FFrame&, void* const)
native function bool SetLobbyType(UniqueNetId LobbyId, Engine.TWOnlineLobby.ELobbyVisibility Type);

// Export UOnlineLobbyInterfaceSteamworks::execSetLobbyLock(FFrame&, void* const)
native function bool SetLobbyLock(UniqueNetId LobbyId, bool bLocked);

// Export UOnlineLobbyInterfaceSteamworks::execSetLobbyOwner(FFrame&, void* const)
native function bool SetLobbyOwner(UniqueNetId LobbyId, UniqueNetId NewOwner);

// Export UOnlineLobbyInterfaceSteamworks::execInviteToLobby(FFrame&, void* const)
native function bool InviteToLobby(UniqueNetId LobbyId, UniqueNetId PlayerID);

delegate OnLobbyInvite(UniqueNetId LobbyId, UniqueNetId FriendId, bool bAccepted);

function AddLobbyInviteDelegate(delegate<OnLobbyInvite> LobbyInviteDelegate)
{
    if(LobbyInviteDelegates.Find(LobbyInviteDelegate == -1)
    {
        LobbyInviteDelegates[LobbyInviteDelegates.Length] = LobbyInviteDelegate;
    }
}

function ClearLobbyInviteDelegate(delegate<OnLobbyInvite> LobbyInviteDelegate)
{
    local int I;

    I = LobbyInviteDelegates.Find(LobbyInviteDelegate;
    if(I != -1)
    {
        LobbyInviteDelegates.Remove(I, 1;
    }
}

// Export UOnlineLobbyInterfaceSteamworks::execGetLobbyFromCommandline(FFrame&, void* const)
native function bool GetLobbyFromCommandline(out UniqueNetId LobbyId, optional bool bMarkAsJoined)
{
    bMarkAsJoined = true;                
}
