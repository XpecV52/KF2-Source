/*******************************************************************************
 * OnlineGameInterfaceSteamworks generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineGameInterfaceSteamworks extends OnlineGameInterfaceImpl within OnlineSubsystemCommonImpl
    native
    config(Engine);

struct native ServerQueryToRulesResponseMapping
{
    var int Query;
    var native Pointer Response;

    structdefaultproperties
    {
        Query=0
    }
};

struct native ServerQueryToPingResponseMapping
{
    var int Query;
    var native Pointer Response;

    structdefaultproperties
    {
        Query=0
    }
};

struct native ServerQueryToPlayerListResponseMapping
{
    var int Query;
    var native Pointer Response;

    structdefaultproperties
    {
        Query=-1
    }
};

struct native ClientFilterORClause
{
    var native transient MultiMap_Mirror OrParams;
};

struct native MatchmakingQueryState
{
    var const OnlineGameSearch GameSearch;
    var array<ServerQueryToRulesResponseMapping> QueryToRulesResponseMap;
    var array<ServerQueryToPingResponseMapping> QueryToPingResponseMap;
    var ServerQueryToPlayerListResponseMapping PlayerListQuery;
    var native Pointer ServerListResponse;
    var Engine.OnlineGameInterface.ESteamMatchmakingType CurrentMatchmakingType;
    var native Pointer CurrentMatchmakingQuery;
    var native transient array<ClientFilterORClause> ActiveClientsideFilters;
    var array<OnlineGameSettings> PendingRulesSearchSettings;
    var array<OnlineGameSettings> PendingPingSearchSettings;
    var bool bIgnoreRefreshComplete;
    var float LastActivityTimestamp;

    structdefaultproperties
    {
        GameSearch=none
        QueryToRulesResponseMap=none
        QueryToPingResponseMap=none
        PlayerListQuery=(Query=-1)
        CurrentMatchmakingType=ESteamMatchmakingType.SMT_Invalid
        PendingRulesSearchSettings=none
        PendingPingSearchSettings=none
        bIgnoreRefreshComplete=false
        LastActivityTimestamp=0
    }
};

struct native FilterKeyToSteamKeyMapping
{
    var int KeyId;
    var Engine.OnlineGameSearch.EOnlineGameSearchEntryType KeyType;
    var string RawKey;
    var string SteamKey;
    var bool bReverseFilter;
    var string IgnoreValue;

    structdefaultproperties
    {
        KeyId=0
        KeyType=EOnlineGameSearchEntryType.OGSET_Property
        RawKey=""
        SteamKey=""
        bReverseFilter=false
        IgnoreValue=""
    }
};

struct native FavoriteServer
{
    var int IP;
    var int ConnectionPort;
    var int QueryPort;

    structdefaultproperties
    {
        IP=0
        ConnectionPort=0
        QueryPort=0
    }
};

var const MatchmakingQueryState ServerBrowserSearchQuery;
var const MatchmakingQueryState InviteSearchQuery;
var float ServerBrowserTimeout;
var float InviteTimeout;
var const UniqueNetId InviteServerUID;
var array< delegate<OnGameInviteAccepted> > GameInviteAcceptedDelegates;
var private const OnlineGameSearch InviteGameSearch;
var private const string InviteLocationUrl;
var array< delegate<OnRegisterPlayerComplete> > RegisterPlayerCompleteDelegates;
var array< delegate<OnUnregisterPlayerComplete> > UnregisterPlayerCompleteDelegates;
var bool bFilterEngineBuild;
var config array<config FilterKeyToSteamKeyMapping> FilterKeyToSteamKeyMap;
var Engine.OnlineGameInterface.ESteamMatchmakingType MatchmakingTypeMode;
var array< delegate<OnGetPlayerListComplete> > GetPlayerListCompleteDelegates;
var array<FavoriteServer> FavoriteServerList;
var delegate<OnGetPlayerListComplete> __OnGetPlayerListComplete__Delegate;
var delegate<OnGameInviteAccepted> __OnGameInviteAccepted__Delegate;
var delegate<OnRegisterPlayerComplete> __OnRegisterPlayerComplete__Delegate;
var delegate<OnUnregisterPlayerComplete> __OnUnregisterPlayerComplete__Delegate;

// Export UOnlineGameInterfaceSteamworks::execGetGametagString(FFrame&, void* const)
native function string GetGametagString(name PropertyName, string StringVal);

// Export UOnlineGameInterfaceSteamworks::execGetGametagStringBool(FFrame&, void* const)
native function string GetGametagStringBool(name PropertyName, byte BoolVal);

delegate OnGetPlayerListComplete(OnlineGameSettings PlayerListSettings, bool Success);

function SetMatchmakingTypeMode(Engine.OnlineGameInterface.ESteamMatchmakingType InMatchmakingTypeMode)
{
    switch(InMatchmakingTypeMode)
    {
        case 2:
        case 3:
        case 4:
        case 5:
        case 1:
            MatchmakingTypeMode = InMatchmakingTypeMode;
            break;
        default:
            LogInternal(("Steam server search type" @ string(InMatchmakingTypeMode)) @ "not supported.");
            MatchmakingTypeMode = 2;
            break;
            break;
    }
}

function AddGetPlayerListCompleteDelegate(delegate<OnGetPlayerListComplete> GetPlayerListCompleteDelegate)
{
    if(GetPlayerListCompleteDelegates.Find(GetPlayerListCompleteDelegate == -1)
    {
        GetPlayerListCompleteDelegates[GetPlayerListCompleteDelegates.Length] = GetPlayerListCompleteDelegate;
    }
}

function ClearGetPlayerListCompleteDelegate(delegate<OnGetPlayerListComplete> GetPlayerListCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = GetPlayerListCompleteDelegates.Find(GetPlayerListCompleteDelegate;
    if(RemoveIndex != -1)
    {
        GetPlayerListCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceSteamworks::execAddSearchResultToFavorites(FFrame&, void* const)
native function bool AddSearchResultToFavorites(int Index);

// Export UOnlineGameInterfaceSteamworks::execRemoveSearchResultFromFavorites(FFrame&, void* const)
native function bool RemoveSearchResultFromFavorites(int Index);

// Export UOnlineGameInterfaceSteamworks::execIsSearchResultInFavoritesList(FFrame&, void* const)
native function bool IsSearchResultInFavoritesList(int Index);

function AddServerFilter(OnlineGameSearch Search, string Key, optional string Val, optional int Location)
{
    Val = "";
    Location = -1;
    if(Location < 0)
    {
        Search.MasterServerSearchKeys.AddItem(Key;
        Search.MasterServerSearchValues.AddItem(Val;        
    }
    else
    {
        Search.MasterServerSearchKeys.InsertItem(Location, Key;
        Search.MasterServerSearchValues.InsertItem(Location, Val;
    }
}

function TestAddBoolGametagFilter(out string GametagString, bool Test, name Property, byte BoolVal)
{
    if(Test)
    {
        if(Len(GametagString) > 0)
        {            
            GametagString $= ",";
        }        
        GametagString $= (GetGametagStringBool(Property, BoolVal));
    }
}

function AddGametagFilter(out string GametagString, name Property, string Val)
{
    if(Len(GametagString) > 0)
    {        
        GametagString $= ",";
    }    
    GametagString $= (GetGametagString(Property, Val));
}

function TestAddServerFilter(OnlineGameSearch Search, bool Test, string Key, optional string Val)
{
    Val = "";
    if(Test)
    {
        AddServerFilter(Search, Key, Val);
    }
}

function ClearServerFilters(OnlineGameSearch Search)
{
    Search.MasterServerSearchKeys.Length = 0;
    Search.MasterServerSearchValues.Length = 0;
}

// Export UOnlineGameInterfaceSteamworks::execUpdateOnlineGame(FFrame&, void* const)
native function bool UpdateOnlineGame(name SessionName, OnlineGameSettings UpdatedGameSettings, optional bool bShouldRefreshOnlineData)
{
    bShouldRefreshOnlineData = false;                    
}

function AddGameInviteAcceptedDelegate(byte LocalUserNum, delegate<OnGameInviteAccepted> GameInviteAcceptedDelegate)
{
    if(GameInviteAcceptedDelegates.Find(GameInviteAcceptedDelegate == -1)
    {
        GameInviteAcceptedDelegates[GameInviteAcceptedDelegates.Length] = GameInviteAcceptedDelegate;
    }
}

function ClearGameInviteAcceptedDelegate(byte LocalUserNum, delegate<OnGameInviteAccepted> GameInviteAcceptedDelegate)
{
    local int RemoveIndex;

    RemoveIndex = GameInviteAcceptedDelegates.Find(GameInviteAcceptedDelegate;
    if(RemoveIndex != -1)
    {
        GameInviteAcceptedDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnGameInviteAccepted(const out OnlineGameSearchResult InviteResult);

// Export UOnlineGameInterfaceSteamworks::execAcceptGameInvite(FFrame&, void* const)
native function bool AcceptGameInvite(byte LocalUserNum, name SessionName);

// Export UOnlineGameInterfaceSteamworks::execRegisterPlayer(FFrame&, void* const)
native function bool RegisterPlayer(name SessionName, UniqueNetId PlayerID, bool bWasInvited);

delegate OnRegisterPlayerComplete(name SessionName, UniqueNetId PlayerID, bool bWasSuccessful);

function AddRegisterPlayerCompleteDelegate(delegate<OnRegisterPlayerComplete> RegisterPlayerCompleteDelegate)
{
    if(RegisterPlayerCompleteDelegates.Find(RegisterPlayerCompleteDelegate == -1)
    {
        RegisterPlayerCompleteDelegates[RegisterPlayerCompleteDelegates.Length] = RegisterPlayerCompleteDelegate;
    }
}

function ClearRegisterPlayerCompleteDelegate(delegate<OnRegisterPlayerComplete> RegisterPlayerCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = RegisterPlayerCompleteDelegates.Find(RegisterPlayerCompleteDelegate;
    if(RemoveIndex != -1)
    {
        RegisterPlayerCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UOnlineGameInterfaceSteamworks::execUnregisterPlayer(FFrame&, void* const)
native function bool UnregisterPlayer(name SessionName, UniqueNetId PlayerID);

delegate OnUnregisterPlayerComplete(name SessionName, UniqueNetId PlayerID, bool bWasSuccessful);

function AddUnregisterPlayerCompleteDelegate(delegate<OnUnregisterPlayerComplete> UnregisterPlayerCompleteDelegate)
{
    if(UnregisterPlayerCompleteDelegates.Find(UnregisterPlayerCompleteDelegate == -1)
    {
        UnregisterPlayerCompleteDelegates[UnregisterPlayerCompleteDelegates.Length] = UnregisterPlayerCompleteDelegate;
    }
}

function ClearUnregisterPlayerCompleteDelegate(delegate<OnUnregisterPlayerComplete> UnregisterPlayerCompleteDelegate)
{
    local int RemoveIndex;

    RemoveIndex = UnregisterPlayerCompleteDelegates.Find(UnregisterPlayerCompleteDelegate;
    if(RemoveIndex != -1)
    {
        UnregisterPlayerCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool QueryNonAdvertisedData(int StartAt, int NumberToQuery)
{
    LogInternal("Ignored on Steamworks");
    return false;
}

function ClearOnlineDelegates()
{
    UnregisterPlayerCompleteDelegates.Length = 0;
    GetPlayerListCompleteDelegates.Length = 0;
    GameInviteAcceptedDelegates.Length = 0;
    RegisterPlayerCompleteDelegates.Length = 0;
    CreateOnlineGameCompleteDelegates.Length = 0;
    super.ClearOnlineDelegates();
}

defaultproperties
{
    ServerBrowserSearchQuery=(GameSearch=none,QueryToRulesResponseMap=none,QueryToPingResponseMap=none,PlayerListQuery=(Query=-1),CurrentMatchmakingType=ESteamMatchmakingType.SMT_Invalid,PendingRulesSearchSettings=none,PendingPingSearchSettings=none,bIgnoreRefreshComplete=false,LastActivityTimestamp=0)
    InviteSearchQuery=(GameSearch=none,QueryToRulesResponseMap=none,QueryToPingResponseMap=none,PlayerListQuery=(Query=-1),CurrentMatchmakingType=ESteamMatchmakingType.SMT_Invalid,PendingRulesSearchSettings=none,PendingPingSearchSettings=none,bIgnoreRefreshComplete=false,LastActivityTimestamp=0)
    MatchmakingTypeMode=ESteamMatchmakingType.SMT_Internet
}