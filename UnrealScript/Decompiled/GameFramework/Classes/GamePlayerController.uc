/*******************************************************************************
 * GamePlayerController generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GamePlayerController extends PlayerController
    abstract
    native
    config(Game)
    hidecategories(Navigation);

var bool bWarnCrowdMembers;
/** If TRUE, draw debug info for crowd awareness checks */
var(Debug) bool bDebugCrowdAwareness;
var transient bool bIsWarmupPaused;
var float AgentAwareRadius;
var protected transient name CurrentSoundMode;

function OnToggleMouseCursor(SeqAct_ToggleMouseCursor inAction)
{
    local GameViewportClient GVC;

    GVC = ((LocalPlayer(Player) != none) ? LocalPlayer(Player).ViewportClient : none);
    if(GVC != none)
    {
        GVC.SetHardwareMouseCursorVisibility(inAction.InputLinks[0].bHasImpulse);
    }
}

// Export UGamePlayerController::execGetUIPlayerIndex(FFrame&, void* const)
native function int GetUIPlayerIndex();

exec function CrowdDebug(bool bEnabled)
{
    local GameCrowdAgent GCA;
    local int I, AgentCount;
    local float DebugRadius;

    LogInternal(("CROWDDEBUG" @ string(myHUD)) @ string(bEnabled));
    myHUD.bShowOverlays = bEnabled;
    I = 0;
    J0x5F:

    if(I < myHUD.PostRenderedActors.Length)
    {
        GCA = GameCrowdAgent(myHUD.PostRenderedActors[I]);
        if(GCA != none)
        {
            myHUD.RemovePostRenderedActor(GCA);
        }
        ++ I;
        goto J0x5F;
    }
    if(bEnabled)
    {
        DebugRadius = 2000;
        foreach VisibleActors(Class'GameCrowdAgent', GCA, DebugRadius, ((Pawn != none) ? Pawn.Location : Location))
        {
            ++ AgentCount;            
        }        
        if(AgentCount > 100)
        {
            DebugRadius *= Sqrt(100 / float(AgentCount));
        }
        foreach VisibleActors(Class'GameCrowdAgent', GCA, DebugRadius, ((Pawn != none) ? Pawn.Location : Location))
        {
            myHUD.AddPostRenderedActor(GCA);            
        }        
    }
}

event NotifyCrowdAgentRefresh();

event NotifyCrowdAgentInRadius(GameCrowdAgent Agent);

protected simulated function DoForceFeedbackForScreenShake(CameraShake ShakeData, float Scale)
{
    local int ShakeLevel;
    local float RotMag, LocMag, FOVMag;

    if(ShakeData != none)
    {
        RotMag = ShakeData.GetRotOscillationMagnitude() * Scale;
        if(RotMag > 40)
        {
            ShakeLevel = 2;            
        }
        else
        {
            if(RotMag > 20)
            {
                ShakeLevel = 1;
            }
        }
        if(ShakeLevel < 2)
        {
            LocMag = ShakeData.GetLocOscillationMagnitude() * Scale;
            if(LocMag > 10)
            {
                ShakeLevel = 2;                
            }
            else
            {
                if(LocMag > 5)
                {
                    ShakeLevel = 1;
                }
            }
            FOVMag = ShakeData.FOVOscillation.Amplitude * Scale;
            if(ShakeLevel < 2)
            {
                if(FOVMag > 5)
                {
                    ShakeLevel = 2;                    
                }
                else
                {
                    if(FOVMag > 2)
                    {
                        ShakeLevel = 1;
                    }
                }
            }
        }
        if(ShakeLevel == 2)
        {
            if(ShakeData.OscillationDuration <= float(1))
            {
                ClientPlayForceFeedbackWaveform(Class'GameWaveForms'.default.CameraShakeBigShort);                
            }
            else
            {
                ClientPlayForceFeedbackWaveform(Class'GameWaveForms'.default.CameraShakeBigLong);
            }            
        }
        else
        {
            if(ShakeLevel == 1)
            {
                if(ShakeData.OscillationDuration <= float(1))
                {
                    ClientPlayForceFeedbackWaveform(Class'GameWaveForms'.default.CameraShakeMediumShort);                    
                }
                else
                {
                    ClientPlayForceFeedbackWaveform(Class'GameWaveForms'.default.CameraShakeMediumLong);
                }
            }
        }
    }
}

simulated function SetSoundMode(name InSoundModeName)
{
    local AudioDevice Audio;
    local bool bSet;

    Audio = Class'Engine'.static.GetAudioDevice();
    if(Audio != none)
    {
        if(CurrentSoundMode != InSoundModeName)
        {
            bSet = Audio.super(GamePlayerController).SetSoundMode(InSoundModeName);
            if(bSet == true)
            {
                CurrentSoundMode = InSoundModeName;
            }
        }
    }
}

// Export UGamePlayerController::execShowLoadingMovie(FFrame&, void* const)
native static final function ShowLoadingMovie(bool bShowMovie, optional bool bPauseAfterHide, optional float PauseDuration, optional float KeepPlayingDuration, optional bool bOverridePreviousDelays);

// Export UGamePlayerController::execKeepPlayingLoadingMovie(FFrame&, void* const)
native static final function KeepPlayingLoadingMovie();

// Export UGamePlayerController::execClientPlayMovie(FFrame&, void* const)
reliable client native final simulated event ClientPlayMovie(string MovieName, int InStartOfRenderingMovieFrame, int InEndOfRenderingMovieFrame, bool bRestrictPausing, bool bPlayOnceFromStream, bool bOnlyBackButtonSkipsMovie);

// Export UGamePlayerController::execClientStopMovie(FFrame&, void* const)
reliable client native final simulated event ClientStopMovie(float DelayInSeconds, bool bAllowMovieToFinish, bool bForceStopNonSkippable, bool bForceStopLoadingMovie);

// Export UGamePlayerController::execGetCurrentMovie(FFrame&, void* const)
native final function GetCurrentMovie(out string MovieName);

function bool CanUnpauseWarmup()
{
    return !bIsWarmupPaused;
}

event WarmupPause(bool bDesiredPauseState)
{
    local Color FadeColor;
    local PlayerController PC;
    local string MovieName;

    bIsWarmupPaused = bDesiredPauseState;
    SetPause(bDesiredPauseState, CanUnpauseWarmup);
    if(!bDesiredPauseState)
    {
        GetCurrentMovie(MovieName);
        if(MovieName != "")
        {
            foreach LocalPlayerControllers(Class'PlayerController', PC)
            {
                GamePlayerController(PC).ClientColorFade(FadeColor, 255, 0, 2);                
            }            
        }
    }
}

reliable client simulated function ClientColorFade(Color FadeColor, byte FromAlpha, byte ToAlpha, float FadeTime);

defaultproperties
{
    AgentAwareRadius=200
    CheatClass=Class'GameCheatManager'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__GamePlayerController.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__GamePlayerController.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__GamePlayerController.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}