/*******************************************************************************
 * MobileDebugCameraController generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MobileDebugCameraController extends DebugCameraController
    config(Input)
    hidecategories(Navigation);

var int OldMobileGroup;
var MobilePlayerInput MPI;

function OnActivate(PlayerController PC)
{
    MPI = MobilePlayerInput(OriginalControllerRef.PlayerInput);
    if(MPI != none)
    {
        OldMobileGroup = MPI.CurrentMobileGroup;
        MPI.CurrentMobileGroup = -1;
    }
    MPI = new (self) Class'MobileDebugCameraInput';
    super.OnActivate(PC);
    MPI.InitInputSystem();
    SetupDebugZones();
    MPI.ActivateInputGroup("DebugGroup");
    MobileDebugCameraHUD(myHUD).bDrawDebugText = bDrawDebugText;
}

function InitDebugInputSystem()
{
    MPI.MobileInputGroups.Remove(0, MPI.MobileInputGroups.Length;
    MPI.MobileInputZones.Remove(0, MPI.MobileInputZones.Length;
}

function OnDeactivate(PlayerController PC)
{
    local MobilePlayerInput MobileInput;

    MPI.CurrentMobileGroup = -1;
    super.OnDeactivate(PC);
    MobileInput = MobilePlayerInput(OriginalControllerRef.PlayerInput);
    MobileInput.SwapZoneOwners();
    MobileInput.CurrentMobileGroup = OldMobileGroup;
}

event InitInputSystem()
{
    super(PlayerController).InitInputSystem();
}

function SetupDebugZones()
{
    local float Ratio, Spacer;
    local MobileInputZone StickMoveZone, StickLookZone;
    local Vector2D ViewportSize;

    MPI.InitializeInputZones();
    StickMoveZone = MPI.FindZone("DebugStickMoveZone");
    StickLookZone = MPI.FindZone("DebugStickLookZone");
    LocalPlayer(OriginalPlayer).ViewportClient.GetViewportSize(ViewportSize);
    Ratio = ViewportSize.Y / ViewportSize.X;
    Spacer = float(((Ratio == 0.75) ? 96 : 64));
    Spacer *= (ViewportSize.X / float(1024));
    if(StickMoveZone != none)
    {
        if(Ratio == 0.75)
        {
            StickMoveZone.SizeX = ViewportSize.X * 0.12;
            StickMoveZone.SizeY = StickMoveZone.SizeX;
            StickMoveZone.ActiveSizeX = StickMoveZone.SizeX;
            StickMoveZone.ActiveSizeY = StickMoveZone.SizeY;
        }
        StickMoveZone.SizeX = Spacer + StickMoveZone.SizeX;
        StickMoveZone.SizeY = Spacer + StickMoveZone.SizeY;
        if(Ratio == 0.75)
        {
            StickMoveZone.SizeY *= 1.5;
        }
        StickMoveZone.X = 0;
        StickMoveZone.Y = ViewportSize.Y - StickMoveZone.SizeY;
        StickMoveZone.CurrentCenter.X = (StickMoveZone.X + StickMoveZone.SizeX) - (StickMoveZone.ActiveSizeX * 0.5);
        if(Ratio == 0.75)
        {
            StickMoveZone.CurrentCenter.Y = ViewportSize.Y - (StickMoveZone.SizeY * 0.33);            
        }
        else
        {
            StickMoveZone.CurrentCenter.Y = StickMoveZone.Y + (StickMoveZone.ActiveSizeY * 0.5);
        }
        StickMoveZone.CurrentLocation = StickMoveZone.CurrentCenter;
        StickMoveZone.InitialCenter = StickMoveZone.CurrentCenter;
        StickMoveZone.bCenterOnEvent = true;
    }
    if(StickLookZone != none)
    {
        if(Ratio == 0.75)
        {
            StickLookZone.SizeX = ViewportSize.X * 0.12;
            StickLookZone.SizeY = StickLookZone.SizeX;
            StickLookZone.ActiveSizeX = StickLookZone.SizeX;
            StickLookZone.ActiveSizeY = StickLookZone.SizeY;
        }
        StickLookZone.SizeX = Spacer + StickLookZone.SizeX;
        StickLookZone.SizeY = Spacer + StickLookZone.SizeY;
        if(Ratio == 0.75)
        {
            StickLookZone.SizeY *= 1.5;
        }
        StickLookZone.X = ViewportSize.X - StickLookZone.SizeX;
        StickLookZone.Y = ViewportSize.Y - StickLookZone.SizeY;
        StickLookZone.CurrentCenter.X = StickLookZone.X + (StickLookZone.ActiveSizeX * 0.5);
        if(Ratio == 0.75)
        {
            StickLookZone.CurrentCenter.Y = ViewportSize.Y - (StickLookZone.SizeY * 0.33);            
        }
        else
        {
            StickLookZone.CurrentCenter.Y = StickLookZone.Y + (StickLookZone.ActiveSizeY * 0.5);
        }
        StickLookZone.CurrentLocation = StickLookZone.CurrentCenter;
        StickLookZone.InitialCenter = StickLookZone.CurrentCenter;
        StickLookZone.bCenterOnEvent = true;
    }
}

defaultproperties
{
    HUDClass=Class'MobileDebugCameraHUD'
    InputClass=Class'MobileDebugCameraInput'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__MobileDebugCameraController.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__MobileDebugCameraController.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__MobileDebugCameraController.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}