/*******************************************************************************
 * GameTypes generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameTypes extends Object
    native;

const LOADING_MOVIE = "LoadingMovie";

enum EShakeParam
{
    ESP_OffsetRandom,
    ESP_OffsetZero,
    ESP_MAX
};

struct native ScreenShakeAnimStruct
{
    var CameraAnim Anim;
    var bool bUseDirectionalAnimVariants;
    var CameraAnim Anim_Left;
    var CameraAnim Anim_Right;
    var CameraAnim Anim_Rear;
    var float AnimPlayRate;
    var float AnimScale;
    var float AnimBlendInTime;
    var float AnimBlendOutTime;
    var bool bRandomSegment;
    var float RandomSegmentDuration;
    var bool bSingleInstance;

    structdefaultproperties
    {
        Anim=none
        bUseDirectionalAnimVariants=false
        Anim_Left=none
        Anim_Right=none
        Anim_Rear=none
        AnimPlayRate=1
        AnimScale=1
        AnimBlendInTime=0.2
        AnimBlendOutTime=0.2
        bRandomSegment=false
        RandomSegmentDuration=0
        bSingleInstance=false
    }
};

struct native ShakeParams
{
    var GameTypes.EShakeParam X;
    var GameTypes.EShakeParam Y;
    var GameTypes.EShakeParam Z;
    var const transient byte Padding;

    structdefaultproperties
    {
        X=EShakeParam.ESP_OffsetRandom
        Y=EShakeParam.ESP_OffsetRandom
        Z=EShakeParam.ESP_OffsetRandom
        Padding=0
    }
};

struct native ScreenShakeStruct
{
    var float TimeToGo;
    var float TimeDuration;
    var Vector RotAmplitude;
    var Vector RotFrequency;
    var Vector RotSinOffset;
    var ShakeParams RotParam;
    var Vector LocAmplitude;
    var Vector LocFrequency;
    var Vector LocSinOffset;
    var ShakeParams LocParam;
    var float FOVAmplitude;
    var float FOVFrequency;
    var float FOVSinOffset;
    var GameTypes.EShakeParam FOVParam;
    var name ShakeName;
    var bool bOverrideTargetingDampening;
    var float TargetingDampening;

    structdefaultproperties
    {
        TimeToGo=0
        TimeDuration=1
        RotAmplitude=(X=100,Y=100,Z=200)
        RotFrequency=(X=10,Y=10,Z=25)
        RotSinOffset=(X=0,Y=0,Z=0)
        RotParam=(X=EShakeParam.ESP_OffsetRandom,Y=EShakeParam.ESP_OffsetRandom,Z=EShakeParam.ESP_OffsetRandom,Padding=0)
        LocAmplitude=(X=0,Y=3,Z=5)
        LocFrequency=(X=1,Y=10,Z=20)
        LocSinOffset=(X=0,Y=0,Z=0)
        LocParam=(X=EShakeParam.ESP_OffsetRandom,Y=EShakeParam.ESP_OffsetRandom,Z=EShakeParam.ESP_OffsetRandom,Padding=0)
        FOVAmplitude=2
        FOVFrequency=5
        FOVSinOffset=0
        FOVParam=EShakeParam.ESP_OffsetRandom
        ShakeName=None
        bOverrideTargetingDampening=false
        TargetingDampening=0
    }
};

struct native TakeHitInfo
{
    var Vector HitLocation;
    var Vector Momentum;
    var class<DamageType> DamageType;
    var Pawn InstigatedBy;
    var byte HitBoneIndex;
    var PhysicalMaterial PhysicalMaterial;
    var float Damage;
    var Vector RadialDamageOrigin;

    structdefaultproperties
    {
        HitLocation=(X=0,Y=0,Z=0)
        Momentum=(X=0,Y=0,Z=0)
        DamageType=none
        InstigatedBy=none
        HitBoneIndex=0
        PhysicalMaterial=none
        Damage=0
        RadialDamageOrigin=(X=0,Y=0,Z=0)
    }
};

struct native GameSpecialMoveInfo
{
    /** Struct to map specialmove label/class and allow overrides via the same label key */
    var() name SpecialMoveName;
    /** Struct to map specialmove label/class and allow overrides via the same label key */
    var() class<GameSpecialMove> SpecialMoveClass;
    /** Instance of the special move class */
    var() GameSpecialMove SpecialMoveInstance;

    structdefaultproperties
    {
        SpecialMoveName=None
        SpecialMoveClass=none
        SpecialMoveInstance=none
    }
};

struct native SpecialMoveStruct
{
    var name SpecialMoveName;
    var GamePawn InteractionPawn;
    var Actor InteractionActor;
    var int Flags;

    structdefaultproperties
    {
        SpecialMoveName=None
        InteractionPawn=none
        InteractionActor=none
        Flags=0
    }
};

struct native AICmdHistoryItem
{
    var class<GameAICommand> CmdClass;
    var float TimeStamp;
    var string VerboseString;

    structdefaultproperties
    {
        CmdClass=none
        TimeStamp=0
        VerboseString=""
    }
};

struct native NearbyDynamicItem
{
    var() Actor Dynamic;

    structdefaultproperties
    {
        Dynamic=none
    }
};

struct native CrowdSpawnerPlayerInfo
{
    var Vector ViewLocation;
    var Rotator ViewRotation;
    var Vector PredictLocation;
    var PlayerController PC;

    structdefaultproperties
    {
        ViewLocation=(X=0,Y=0,Z=0)
        ViewRotation=(Pitch=0,Yaw=0,Roll=0)
        PredictLocation=(X=0,Y=0,Z=0)
        PC=none
    }
};

struct native AgentArchetypeInfo
{
    var() Object AgentArchetype;
    /** added to selection rate. */
    var() float FrequencyModifier;
    /**  
     *No matter the frequency, we want to limit the number of this type of crowd agent.  Another knob to easily set. 
     *     Basically, we often want to adjust the number of crowds members / density but don't want a certain Archetype to also grow/shrink
     *        Due to native struct properties not being properly updated in already existing instanced objects we say MaxAllowed of 0 means infi guys
     */
    var() int MaxAllowed;
    var transient int CurrSpawned;
    /** additional agents to spawn with this one as part of group */
    var() array<Object> GroupMembers;

    structdefaultproperties
    {
        AgentArchetype=none
        FrequencyModifier=1
        MaxAllowed=0
        CurrSpawned=0
        GroupMembers=none
    }
};

struct native CrowdSpawnInfoItem
{
    var SeqAct_GameCrowdPopulationManagerToggle SeqSpawner;
    var bool bSpawningActive;
    var float SpawnRate;
    var int SpawnNum;
    var float Remainder;
    var array<GameCrowdAgent> ActiveAgents;
    var array<AgentArchetypeInfo> AgentArchetypes;
    var float AgentFrequencySum;
    var float MaxSpawnDist;
    var float MaxSpawnDistSq;
    var float MinBehindSpawnDist;
    var float MinBehindSpawnDistSq;
    var float AgentWarmupTime;
    var bool bForceObstacleChecking;
    var bool bForceNavMeshPathing;
    var bool bEnableCrowdLightEnvironment;
    var bool bCastShadows;
    var LightingChannelContainer AgentLightingChannel;
    /** Lighting channels to put the agents in. */
    var() int NumAgentsToTickPerFrame;
    var int LastAgentTickedIndex;
    var array<GameCrowdDestination> PotentialSpawnPoints;
    var float SpawnPrioritizationInterval;
    var int PrioritizationIndex;
    var int PrioritizationUpdateIndex;
    var array<GameCrowdDestination> PrioritizedSpawnPoints;
    var float PlayerPositionPredictionTime;

    structdefaultproperties
    {
        SeqSpawner=none
        bSpawningActive=false
        SpawnRate=0
        SpawnNum=0
        Remainder=0
        ActiveAgents=none
        AgentArchetypes=none
        AgentFrequencySum=0
        MaxSpawnDist=0
        MaxSpawnDistSq=0
        MinBehindSpawnDist=0
        MinBehindSpawnDistSq=0
        AgentWarmupTime=3
        bForceObstacleChecking=false
        bForceNavMeshPathing=false
        bEnableCrowdLightEnvironment=false
        bCastShadows=false
        AgentLightingChannel=(bInitialized=false,BSP=false,Static=false,Dynamic=false,CompositeDynamic=false,Skybox=false,Unnamed_1=false,Unnamed_2=false,Unnamed_3=false,Unnamed_4=false,Unnamed_5=false,Unnamed_6=false,Cinematic_1=false,Cinematic_2=false,Cinematic_3=false,Cinematic_4=false,Cinematic_5=false,Cinematic_6=false,Cinematic_7=false,Cinematic_8=false,Cinematic_9=false,Cinematic_10=false,Gameplay_1=false,Gameplay_2=false,Gameplay_3=false,Gameplay_4=false,Crowd=false,Indoor=false,Outdoor=false)
        NumAgentsToTickPerFrame=0
        LastAgentTickedIndex=0
        PotentialSpawnPoints=none
        SpawnPrioritizationInterval=0.4
        PrioritizationIndex=0
        PrioritizationUpdateIndex=0
        PrioritizedSpawnPoints=none
        PlayerPositionPredictionTime=0
    }
};
