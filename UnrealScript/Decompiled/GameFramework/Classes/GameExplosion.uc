/*******************************************************************************
 * GameExplosion generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameExplosion extends Object
    native
    editinlinenew;

/**  
 *If TRUE, this will be a "directional" explosion, meaning that all radial effects will be applied only
 *  within DirectionalExplosionAngleDeg degrees of the blast's facing direction (which should be supplied via Explode()).
 */
var() bool bDirectionalExplosion;
var transient bool bIgnoreInstigator;
/** True to allow teammates to cringe, regardless of friendly fire setting. */
var() bool bAllowTeammateCringes;
var transient bool bFullDamageToAttachee;
/** Whether or not we should attach something to the attachee */
var() bool bAttachExplosionEmitterToAttachee;
/** If true, will perform an EffectIsRelevant check before spawning the radial blur */
var() bool bPerformRadialBlurRelevanceCheck;
/** Controls if this explosion will cause fracturing */
var() bool bCausesFracture;
/** If true, attempt to get effect information from the physical material system.  If false or a physicalmaterial is unavailable, just use the information above. */
var() bool bAllowPerMaterialFX;
/** So for tagged grenades we need override the particle system but still want material based decals and such. */
var() bool bParticleSystemIsBeingOverriddenDontUsePhysMatVersion;
/** If true, the PhysMat's default particle system will not override the one already set in the explosion */
var() bool bSkipDefaultPhysMatParticleSystem;
/** This tells the explosion to look in the Map's MapSpecific info */
var() bool bUseMapSpecificValues;
var() bool bUseOverlapCheck;
/** TRUE to rotate CamShake to play radially relative to the explosion.  Left/Right/Rear will be ignored. */
var() bool bOrientCameraShakeTowardsEpicenter;
/** TRUE to attempt to automatically do force feedback to match the camera shake */
var() bool bAutoControllerVibration;
/** Half-angle, in degrees, of the cone that defines the effective area of a directional explosion. */
var() float DirectionalExplosionAngleDeg;
/** Delay before applying damage after spawning FX, 0.f == no delay */
var() float DamageDelay;
/** Amount of damage done at the epicenter. */
var() float Damage;
/** Damage range. */
var() float DamageRadius;
/** Defines how damage falls off.  High numbers cause faster falloff, lower (closer to zero) cause slower falloff.  1 is linear. */
var() float DamageFalloffExponent;
var transient Actor ActorToIgnoreForDamage;
/** The actor class to ignore for damage from this explosion */
var() class<Actor> ActorClassToIgnoreForDamage<AllowAbstract=>;
/** The actor class to ignore for knockdowns and cringes from this explosion */
var() class<Actor> ActorClassToIgnoreForKnockdownsAndCringes;
/** What damagetype to use */
var() class<DamageType> MyDamageType<AllowAbstract=>;
/** radius at which people will be knocked down/ragdolled by the projectile's explosion */
var() float KnockDownRadius;
/** @fixme, base this on MomentumTransferScale? */
var() float KnockDownStrength;
/** radius at which people will cringe from the explosion */
var() float CringeRadius;
/** duration of the cringe.  X=duration at epicenter, Y=duration at CringeRadius. Values <0 mean use default cringe. */
var() Vector2D CringeDuration;
/** Percentage of damagetype's momentum to apply. */
var() float MomentumTransferScale;
/** Which particle effect to play. */
var() ParticleSystem ParticleEmitterTemplate;
/** Scalar for increasing/decreasing explosion effect size. */
var() float ExplosionEmitterScale;
var Actor HitActor;
var Vector HitLocation;
var Vector HitNormal;
/** Audio to play at explosion time. */
var() AkBaseSoundObject ExplosionSound;
/** Audio to play at explosion time if at least one pawn got hurt. Does not work for delayed damage. As we typically don't want to delay the explosion sound. */
var() AkBaseSoundObject ExplosionSoundHurtSomeone;
/** Defines the dynamic light cast by the explosion */
var() export editinline PointLightComponent ExploLight;
/** Dynamic Light fade out time, in seconds */
var() float ExploLightFadeOutTime;
/** Dynamic Light start fade out time, in seconds */
var() float ExploLightStartFadeOutTime;
/** Intensity of the light flicker */
var() float ExploLightFlickerIntensity;
/** How quickly the light will flicker */
var() float ExploLightFlickerInterpSpeed;
/** Defines the blurred region for the explosion */
var() export editinline RadialBlurComponent ExploRadialBlur;
/** Radial blur fade out time, in seconds */
var() float ExploRadialBlurFadeOutTime;
/** Radial blur max blur amount */
var() float ExploRadialBlurMaxBlur;
/** How far away from explosion we break bits off */
var() float FractureMeshRadius;
/** How hard to throw broken off pieces */
var() float FracturePartVel;
/** Shake to play when source is in front of the camera, or when directional variants are unspecified. */
var() editinline CameraShake CamShake;
/** Anim to play when the source event is to the left of the camera.  If None, CamShake will be used instead. */
var() editinline CameraShake CamShake_Left;
/** Anim to play when the source event is to the right of the camera.  If None, CamShake will be used instead. */
var() editinline CameraShake CamShake_Right;
/** Anim to play when the source event is behind of the camera.  If None, CamShake will be used instead. */
var() editinline CameraShake CamShake_Rear;
/** Radius within which to play full-powered camera shake (will be scaled within radius) */
var() float CamShakeInnerRadius;
/** Between inner and outer radii, scale shake from full to zero */
var() float CamShakeOuterRadius;
/** Exponent for intensity falloff between inner and outer radii. */
var() float CamShakeFalloff;
/** Play this CameraLensEffect when ever damage of this type is given.  This will primarily be used by explosions.  But could be used for other impacts too! */
var() class<EmitterCameraLensEffectBase> CameraLensEffect;
/** This is the radius to play the camera effect on */
var() float CameraLensEffectRadius;

defaultproperties
{
    bCausesFracture=true
    bAutoControllerVibration=true
    CringeDuration=(X=-1,Y=-1)
    MomentumTransferScale=1
    ExplosionEmitterScale=1
    ExploRadialBlurMaxBlur=2
    CamShakeFalloff=2
}