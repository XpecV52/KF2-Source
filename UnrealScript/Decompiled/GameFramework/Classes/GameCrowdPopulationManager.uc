/*******************************************************************************
 * GameCrowdPopulationManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameCrowdPopulationManager extends CrowdPopulationManagerBase
    native
    hidecategories(Navigation)
    implements(Interface_NavigationHandle);

var private native const noexport Pointer VfTable_IInterface_NavigationHandle;
var CrowdSpawnInfoItem CloudSpawnInfo;
var array<CrowdSpawnInfoItem> ScriptedSpawnInfo;
var GameCrowdInfoVolume ActiveCrowdInfoVolume;
var array<GameCrowdDestination> GlobalPotentialSpawnPoints;
var float SplitScreenNumReduction;
var float PlayerPositionPredictionTime;
var float HeadVisibilityOffset;
var class<NavigationHandle> NavigationHandleClass;
var NavigationHandle NavigationHandle;
var GameCrowdAgent QueryingAgent;
var array<CrowdSpawnerPlayerInfo> PlayerInfo;
var float LastPlayerInfoUpdateTime;
var(Debug) bool bDebugSpawns;
var(Debug) bool bPauseCrowd;

function PostBeginPlay()
{
    local GameCrowdDestination GCD;

    super(Actor).PostBeginPlay();
    if(!bDeleteMe)
    {
        WorldInfo.PopulationManager = self;
    }
    if(NavigationHandleClass != none)
    {
        NavigationHandle = new (self) NavigationHandleClass;
    }
    foreach AllActors(Class'GameCrowdDestination', GCD)
    {
        AddSpawnPoint(GCD);        
    }    
}

event NotifyPathChanged();

function AddSpawnPoint(GameCrowdDestination GCD)
{
    if((GCD.MyPopMgr != none) || !GCD.bAllowCloudSpawning)
    {
        return;
    }
    GCD.MyPopMgr = self;
    GlobalPotentialSpawnPoints[GlobalPotentialSpawnPoints.Length] = GCD;
    if(ActiveCrowdInfoVolume == none)
    {
        CloudSpawnInfo.PotentialSpawnPoints[CloudSpawnInfo.PotentialSpawnPoints.Length] = GCD;
    }
}

function RemoveSpawnPoint(GameCrowdDestination GCD)
{
    local int Idx, AgentIdx;

    GCD.MyPopMgr = none;
    CloudSpawnInfo.PotentialSpawnPoints.RemoveItem(GCD;
    CloudSpawnInfo.PrioritizedSpawnPoints.RemoveItem(GCD;
    GlobalPotentialSpawnPoints.RemoveItem(GCD;
    AgentIdx = 0;
    J0x93:

    if(AgentIdx < CloudSpawnInfo.ActiveAgents.Length)
    {
        if(CloudSpawnInfo.ActiveAgents[AgentIdx].CurrentDestination == GCD)
        {
            CloudSpawnInfo.ActiveAgents[AgentIdx].Destroy();
        }
        ++ AgentIdx;
        goto J0x93;
    }
    Idx = 0;
    J0x155:

    if(Idx < ScriptedSpawnInfo.Length)
    {
        ScriptedSpawnInfo[Idx].PotentialSpawnPoints.RemoveItem(GCD;
        ScriptedSpawnInfo[Idx].PrioritizedSpawnPoints.RemoveItem(GCD;
        AgentIdx = 0;
        J0x1DE:

        if(AgentIdx < ScriptedSpawnInfo[Idx].ActiveAgents.Length)
        {
            if(ScriptedSpawnInfo[Idx].ActiveAgents[AgentIdx].CurrentDestination == GCD)
            {
                ScriptedSpawnInfo[Idx].ActiveAgents[AgentIdx].Destroy();
            }
            ++ AgentIdx;
            goto J0x1DE;
        }
        ++ Idx;
        goto J0x155;
    }
}

function SetCrowdInfoVolume(GameCrowdInfoVolume Vol)
{
    if(Vol != ActiveCrowdInfoVolume)
    {
        ActiveCrowdInfoVolume = Vol;
        if(Vol != none)
        {
            CloudSpawnInfo.PotentialSpawnPoints = Vol.PotentialSpawnPoints;            
        }
        else
        {
            CloudSpawnInfo.PotentialSpawnPoints = GlobalPotentialSpawnPoints;
        }
        CloudSpawnInfo.PrioritizedSpawnPoints.Length = 0;
        CloudSpawnInfo.PrioritizationIndex = 0;
        CloudSpawnInfo.PrioritizationUpdateIndex = 0;
    }
}

event int CreateSpawner(SeqAct_GameCrowdPopulationManagerToggle inAction)
{
    local int Idx;

    Idx = ScriptedSpawnInfo.Length;
    ScriptedSpawnInfo.Length = Idx + 1;
    ScriptedSpawnInfo[Idx].SeqSpawner = inAction;
    return Idx;
}

event FlushAgents(CrowdSpawnInfoItem Item)
{
    local int AgentIdx;

    AgentIdx = 0;
    J0x0B:

    if(AgentIdx < Item.ActiveAgents.Length)
    {
        Item.ActiveAgents[AgentIdx].Destroy();
        ++ AgentIdx;
        goto J0x0B;
    }
    Item.ActiveAgents.Length = 0;
}

event FlushAllAgents()
{
    local int Idx;

    FlushAgents(CloudSpawnInfo);
    Idx = 0;
    J0x1E:

    if(Idx < ScriptedSpawnInfo.Length)
    {
        FlushAgents(ScriptedSpawnInfo[Idx]);
        ++ Idx;
        goto J0x1E;
    }
}

function AgentDestroyed(GameCrowdAgent Agent)
{
    local int SpawnerIdx, I;

    SpawnerIdx = ScriptedSpawnInfo.Find('SeqSpawner', SeqAct_GameCrowdPopulationManagerToggle(bool(Agent.MySpawner));
    if(SpawnerIdx >= 0)
    {
        I = 0;
        J0x63:

        if(I < ScriptedSpawnInfo[SpawnerIdx].AgentArchetypes.Length)
        {
            if(GameCrowdAgent(ScriptedSpawnInfo[SpawnerIdx].AgentArchetypes[I].AgentArchetype) == Agent.MyArchetype)
            {
                -- ScriptedSpawnInfo[SpawnerIdx].AgentArchetypes[I].CurrSpawned;
            }
            ++ I;
            goto J0x63;
        }
        ScriptedSpawnInfo[SpawnerIdx].ActiveAgents.RemoveItem(Agent;        
    }
    else
    {
        if(NotEqual_InterfaceInterface(Agent.MySpawner, (none)))
        {
            I = 0;
            J0x1D0:

            if(I < CloudSpawnInfo.AgentArchetypes.Length)
            {
                if(GameCrowdAgent(CloudSpawnInfo.AgentArchetypes[I].AgentArchetype) == Agent.MyArchetype)
                {
                    -- CloudSpawnInfo.AgentArchetypes[I].CurrSpawned;
                }
                ++ I;
                goto J0x1D0;
            }
            CloudSpawnInfo.ActiveAgents.RemoveItem(Agent;
        }
    }
}

simulated function DisplayDebug(HUD HUD, out float out_YL, out float out_YPos)
{
    local Canvas Canvas;
    local int RenderedNum, LOSNum, SimNum, ActualCount, DistanceBucket, I,
	    RVONum;

    local Actor HitActor;
    local Vector HitNormal, HitLocation;
    local GameCrowdAgent GCA;
    local float Dist;
    local array<GameCrowdAgent> AgentList;
    local int PlayerIdx, SpawnIdx;
    local bool bHasLOS;
    local float BucketSize;

    Canvas = HUD.Canvas;
    Canvas.SetDrawColor(255, 255, 255);
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText("---- GameCrowdPopulationManager ---");
    out_YPos += out_YL;
    if(!GetPlayerInfo())
    {
        return;
    }
    foreach DynamicActors(Class'GameCrowdAgent', GCA)
    {
        if(!GCA.bDeleteMe)
        {
            AgentList[AgentList.Length] = GCA;
        }        
    }    
    BucketSize = (2 * CloudSpawnInfo.MaxSpawnDist) / float(20);
    foreach AgentList(GCA,)
    {
        ++ ActualCount;
        if(GCA.Health > 0)
        {
            if(GCA.bSimulateThisTick)
            {
                ++ SimNum;
            }
            if(((WorldInfo.TimeSeconds - GCA.LastRenderTime) < 1) && GCA.LastRenderTime != GCA.InitialLastRenderTime)
            {
                bHasLOS = true;
                ++ RenderedNum;                
            }
            else
            {
                bHasLOS = false;
                PlayerIdx = 0;
                J0x2A8:

                if(PlayerIdx < PlayerInfo.Length)
                {
                    HitActor = Trace(HitLocation, HitNormal, GCA.Location, PlayerInfo[PlayerIdx].ViewLocation, false);
                    if(HitActor == none)
                    {
                        bHasLOS = true;
                        goto J0x353;
                    }
                    ++ PlayerIdx;
                    goto J0x2A8;
                }
            }
            J0x353:

            if(bHasLOS)
            {
                ++ LOSNum;
                if(GCA.bSimulateThisTick)
                {
                    ++ RVONum;
                }
            }
            GCA.bSimulateThisTick = false;
        }
        Dist = 999999;
        PlayerIdx = 0;
        J0x3D3:

        if(PlayerIdx < PlayerInfo.Length)
        {
            Dist = FMin(VSize(PlayerInfo[PlayerIdx].ViewLocation - GCA.Location), Dist);
            ++ PlayerIdx;
            goto J0x3D3;
        }
        ++ DistanceBucket[Min(19, int(Dist / BucketSize))];        
    }    
    Canvas.DrawText("TotalCount: " $ string(ActualCount));
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText((("Cloud:" @ string(CloudSpawnInfo.ActiveAgents.Length)) @ "Active:") @ string(CloudSpawnInfo.bSpawningActive));
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    SpawnIdx = 0;
    J0x5C3:

    if(SpawnIdx < ScriptedSpawnInfo.Length)
    {
        Canvas.DrawText(((("Scripted: " $ string(ScriptedSpawnInfo[SpawnIdx].ActiveAgents.Length)) @ string(ScriptedSpawnInfo[SpawnIdx].SeqSpawner)) @ "Active:") @ string(ScriptedSpawnInfo[SpawnIdx].bSpawningActive));
        out_YPos += out_YL;
        Canvas.SetPos(4, out_YPos);
        ++ SpawnIdx;
        goto J0x5C3;
    }
    Canvas.DrawText("Agents Rendered:" @ string(RenderedNum));
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText("Agents LOS:" @ string(LOSNum));
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText("Agents Simulated:" @ string(SimNum));
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText("Agents RVO:" @ string(RVONum));
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText("Distance Buckets");
    out_YPos += out_YL;
    Canvas.SetPos(4, out_YPos);
    I = 0;
    J0x96E:

    if(I < 19)
    {
        if(DistanceBucket[I] > 0)
        {
            Canvas.DrawText(((" (<" $ string(BucketSize * float(I + 1))) $ ")") $ string(DistanceBucket[I]));
            out_YPos += out_YL;
            Canvas.SetPos(4, out_YPos);
        }
        ++ I;
        goto J0x96E;
    }
}

function bool IsSpawningActive()
{
    local int SpawnerIdx;

    if(CloudSpawnInfo.bSpawningActive)
    {
        return true;
    }
    SpawnerIdx = 0;
    J0x2D:

    if(SpawnerIdx < ScriptedSpawnInfo.Length)
    {
        if(ScriptedSpawnInfo[SpawnerIdx].bSpawningActive)
        {
            return true;
        }
        ++ SpawnerIdx;
        goto J0x2D;
    }
    return false;
}

simulated function bool ShouldDebugDestinations()
{
    return bDebugSpawns;
}

function Tick(float DeltaTime)
{
    local GameCrowdDestination PickedSpawnPoint;
    local int Idx, PlayerIdx;

    if((ShouldDebugDestinations()) && GetPlayerInfo())
    {
        PlayerIdx = 0;
        J0x27:

        if(PlayerIdx < PlayerInfo.Length)
        {
            DrawDebugBox(PlayerInfo[PlayerIdx].PredictLocation, vect(20, 20, 20), 255, 0, 0);
            DrawDebugBox(PlayerInfo[PlayerIdx].ViewLocation, vect(10, 10, 10), 255, 255, 255);
            DrawDebugLine(PlayerInfo[PlayerIdx].ViewLocation, PlayerInfo[PlayerIdx].ViewLocation + (vector(PlayerInfo[PlayerIdx].ViewRotation) * float(64)), 255, 255, 255);
            ++ PlayerIdx;
            goto J0x27;
        }
        Idx = 0;
        J0x16D:

        if(Idx < CloudSpawnInfo.PotentialSpawnPoints.Length)
        {
            PickedSpawnPoint = CloudSpawnInfo.PotentialSpawnPoints[Idx];
            if(PickedSpawnPoint == none)
            {                
            }
            else
            {
                PickedSpawnPoint.AnalyzeSpawnPoint(PlayerInfo, CloudSpawnInfo.MaxSpawnDistSq, CloudSpawnInfo.bForceNavMeshPathing, NavigationHandle);
                PickedSpawnPoint.PrioritizeSpawnPoint(PlayerInfo, CloudSpawnInfo.MaxSpawnDist);
                PickedSpawnPoint.DrawDebug(PlayerInfo);
                if(!ValidateSpawnAt(CloudSpawnInfo, PickedSpawnPoint))
                {
                    DrawDebugCylinder(PickedSpawnPoint.Location, PickedSpawnPoint.Location, PickedSpawnPoint.CylinderComponent.CollisionRadius, int(PickedSpawnPoint.CylinderComponent.CollisionHeight), 255, 0, 0);
                }
            }
            ++ Idx;
            goto J0x16D;
        }
    }
    if(!bPauseCrowd && IsSpawningActive())
    {
        UpdateAllSpawners(DeltaTime);
    }
}

// Export UGameCrowdPopulationManager::execUpdateAllSpawners(FFrame&, void* const)
native function UpdateAllSpawners(float DeltaTime);

event bool UpdateSpawner(out CrowdSpawnInfoItem Item, float DeltaTime)
{
    local GameCrowdDestination PickedSpawnPoint;
    local GameCrowdAgent A;
    local int NumSpawned;

    if(!Item.bSpawningActive || Item.ActiveAgents.Length >= Item.SpawnNum)
    {
        return false;
    }
    if(Item.SeqSpawner != none)
    {
        Item.SeqSpawner.LastSpawnedList.Length = 0;
    }
    Item.Remainder += (FMin(DeltaTime, 0.05) * Item.SpawnRate);
    if(Item.Remainder > 1)
    {
        PrioritizeSpawnPoints(Item, DeltaTime);
        J0x148:

        if((Item.Remainder > 1) && Item.ActiveAgents.Length < Item.SpawnNum)
        {
            PickedSpawnPoint = PickSpawnPoint(Item);
            if(PickedSpawnPoint != none)
            {
                PickedSpawnPoint.LastSpawnTime = WorldInfo.TimeSeconds;
                A = SpawnAgent(Item, PickedSpawnPoint);
                if(A != none)
                {
                    ++ NumSpawned;
                    if(Item.SeqSpawner != none)
                    {
                        Item.SeqSpawner.LastSpawnedList.AddItem(A;
                    }
                }
                Item.Remainder -= 1;                
            }
            else
            {
                Item.Remainder = 0;
            }
            goto J0x148;
        }
    }
    return NumSpawned > 0;
}

event GameCrowdDestination PickSpawnPoint(out CrowdSpawnInfoItem Item)
{
    local int StartingIndex, SpawnIdx;
    local GameCrowdDestination Candidate;

    StartingIndex = Min(Item.PrioritizationIndex, Item.PrioritizedSpawnPoints.Length);
    SpawnIdx = 0;
    J0x50:

    if(SpawnIdx < Item.PrioritizedSpawnPoints.Length)
    {
        Item.PrioritizationIndex = (StartingIndex + SpawnIdx) % Item.PrioritizedSpawnPoints.Length;
        Candidate = Item.PrioritizedSpawnPoints[Item.PrioritizationIndex];
        if(ValidateSpawnAt(Item, Candidate))
        {
            return Candidate;
        }
        ++ SpawnIdx;
        goto J0x50;
    }
    return none;
}

// Export UGameCrowdPopulationManager::execGetPlayerInfo(FFrame&, void* const)
native simulated function bool GetPlayerInfo();

// Export UGameCrowdPopulationManager::execStaticGetPlayerInfo(FFrame&, void* const)
native static simulated function bool StaticGetPlayerInfo(out array<CrowdSpawnerPlayerInfo> out_PlayerInfo);

event PrioritizeSpawnPoints(out CrowdSpawnInfoItem Item, float DeltaTime)
{
    local int UpdateNum;

    if((Item.PotentialSpawnPoints.Length == 0) || !GetPlayerInfo())
    {
        return;
    }
    UpdateNum = Max(1, int((DeltaTime * float(Item.PotentialSpawnPoints.Length)) / Item.SpawnPrioritizationInterval));
    AnalyzeSpawnPoints(Item, Item.PrioritizationUpdateIndex, UpdateNum);
    Item.PrioritizationUpdateIndex = (Item.PrioritizationUpdateIndex + UpdateNum) % Item.PotentialSpawnPoints.Length;
}

function AnalyzeSpawnPoints(out CrowdSpawnInfoItem Item, int StartIndex, int NumToUpdate)
{
    local int UpdateIdx, Idx, NumUpdated;
    local GameCrowdDestination GCD;

    if((StartIndex >= Item.PotentialSpawnPoints.Length) || !GetPlayerInfo())
    {
        return;
    }
    NumUpdated = 0;
    UpdateIdx = 0;
    J0x54:

    if((NumUpdated < NumToUpdate) && UpdateIdx < Item.PotentialSpawnPoints.Length)
    {
        Idx = (StartIndex + UpdateIdx) % Item.PotentialSpawnPoints.Length;
        GCD = Item.PotentialSpawnPoints[Idx];
        if(GCD == none)
        {
            Item.PotentialSpawnPoints.Remove(-- UpdateIdx, 1;            
        }
        else
        {
            Item.PrioritizedSpawnPoints.RemoveItem(GCD;
            if(GCD.AnalyzeSpawnPoint(PlayerInfo, Item.MaxSpawnDistSq, Item.bForceNavMeshPathing, NavigationHandle))
            {
                ++ NumUpdated;
                if(GCD.bCanSpawnHereNow)
                {
                    AddPrioritizedSpawnPoint(Item, GCD);
                }
            }
        }
        ++ UpdateIdx;
        goto J0x54;
    }
}

function AddPrioritizedSpawnPoint(out CrowdSpawnInfoItem Item, GameCrowdDestination GCD)
{
    local int SpawnIdx, StartingIndex;

    GCD.PrioritizeSpawnPoint(PlayerInfo, Item.MaxSpawnDist);
    StartingIndex = Min(Item.PrioritizationIndex, Item.PrioritizedSpawnPoints.Length);
    SpawnIdx = 0;
    J0x94:

    if(SpawnIdx < Item.PrioritizedSpawnPoints.Length)
    {
        Item.PrioritizationIndex = (StartingIndex + SpawnIdx) % Item.PrioritizedSpawnPoints.Length;
        if(Item.PrioritizedSpawnPoints[Item.PrioritizationIndex].Priority < GCD.Priority)
        {
            Item.PrioritizedSpawnPoints.Insert(Item.PrioritizationIndex, 1;
            Item.PrioritizedSpawnPoints[Item.PrioritizationIndex] = GCD;
            return;
        }
        ++ SpawnIdx;
        goto J0x94;
    }
    Item.PrioritizedSpawnPoints.Insert(StartingIndex, 1;
    Item.PrioritizedSpawnPoints[StartingIndex] = GCD;
    Item.PrioritizationIndex = (StartingIndex + 1) % Item.PrioritizedSpawnPoints.Length;
}

function bool ValidateSpawnAt(out CrowdSpawnInfoItem Item, GameCrowdDestination Candidate)
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;
    local float DistSq, MinDistFromViewSq, DestDotView;
    local int PlayerIdx;

    if((!Candidate.bIsEnabled || !Candidate.bAllowsSpawning) || Candidate.AtCapacity())
    {
        return false;
    }
    if(Candidate.bAllowVisibleSpawning)
    {
        return true;
    }
    if(GetPlayerInfo())
    {
        MinDistFromViewSq = 2.147484E+09;
        PlayerIdx = 0;
        J0xBC:

        if(PlayerIdx < PlayerInfo.Length)
        {
            DistSq = VSizeSq(Candidate.Location - PlayerInfo[PlayerIdx].ViewLocation);
            MinDistFromViewSq = FMin(DistSq, MinDistFromViewSq);
            if(DistSq < Item.MaxSpawnDistSq)
            {
                DestDotView = Normal(Candidate.Location - PlayerInfo[PlayerIdx].ViewLocation) Dot vector(PlayerInfo[PlayerIdx].ViewRotation);
                if((DistSq < Item.MinBehindSpawnDistSq) || DestDotView > 0.7)
                {
                    HitActor = Trace(HitLocation, HitNormal, Candidate.Location + (HeadVisibilityOffset * vect(0, 0, 1)), PlayerInfo[PlayerIdx].ViewLocation, false,,, 1);
                    if(HitActor == none)
                    {
                        return false;
                    }
                }
            }
            ++ PlayerIdx;
            goto J0xBC;
        }
        if(MinDistFromViewSq < Item.MaxSpawnDistSq)
        {
            return true;
        }
    }
    return false;
}

// Export UGameCrowdPopulationManager::execSpawnAgentByIdx(FFrame&, void* const)
native function GameCrowdAgent SpawnAgentByIdx(int SpawnerIdx, GameCrowdDestination SpawnLoc);

// Export UGameCrowdPopulationManager::execSpawnAgent(FFrame&, void* const)
native function GameCrowdAgent SpawnAgent(out CrowdSpawnInfoItem Item, GameCrowdDestination SpawnLoc);

// Export UGameCrowdPopulationManager::execWarmup(FFrame&, void* const)
native function bool Warmup(out CrowdSpawnInfoItem Item, int WarmupNum);

event GameCrowdAgent CreateNewAgent(out CrowdSpawnInfoItem Item, GameCrowdDestination SpawnLoc, GameCrowdAgent AgentTemplate, GameCrowdGroup NewGroup)
{
    local GameCrowdAgent Agent;
    local Rotator SpawnRot;
    local Vector SpawnPos;
    local int I;

    GameCrowdSpawnInterface(SpawnLoc).GetSpawnPosition(none, SpawnPos, SpawnRot);
    if(!GetPlayerInfo())
    {
        return none;
    }
    Agent = Spawn(AgentTemplate.Class,,, SpawnPos, SpawnRot, AgentTemplate);
    Agent.SetLighting(Item.bEnableCrowdLightEnvironment, Item.AgentLightingChannel, Item.bCastShadows);
    if(Item.bForceObstacleChecking)
    {
        Agent.bCheckForObstacles = true;
    }
    if(Item.bForceNavMeshPathing)
    {
        Agent.bUseNavMeshPathing = true;
    }
    if(SpawnLoc.bWillBeVisible)
    {
        Agent.bPreferVisibleDestinationOnSpawn = Agent.bPreferVisibleDestination;
    }
    Agent.MySpawner = GameCrowdSpawnerInterface(Item.SeqSpawner);
    Item.ActiveAgents[Item.ActiveAgents.Length] = Agent;
    Agent.InitializeAgent(SpawnLoc, PlayerInfo, AgentTemplate, NewGroup, (Item.AgentWarmupTime * 2) * FRand(), Item.AgentWarmupTime > 0, true);
    I = 0;
    J0x316:

    if(I < Item.AgentArchetypes.Length)
    {
        if(GameCrowdAgent(Item.AgentArchetypes[I].AgentArchetype) == Agent.MyArchetype)
        {
            ++ Item.AgentArchetypes[I].CurrSpawned;
        }
        ++ I;
        goto J0x316;
    }
    return Agent;
}

defaultproperties
{
    CloudSpawnInfo=(SeqSpawner=none,bSpawningActive=false,SpawnRate=0,SpawnNum=0,Remainder=0,ActiveAgents=none,AgentArchetypes=none,AgentFrequencySum=0,MaxSpawnDist=0,MaxSpawnDistSq=0,MinBehindSpawnDist=0,MinBehindSpawnDistSq=0,AgentWarmupTime=3,bForceObstacleChecking=false,bForceNavMeshPathing=false,bEnableCrowdLightEnvironment=false,bCastShadows=false,AgentLightingChannel=(bInitialized=false,BSP=false,Static=false,Dynamic=false,CompositeDynamic=false,Skybox=false,Unnamed_1=false,Unnamed_2=false,Unnamed_3=false,Unnamed_4=false,Unnamed_5=false,Unnamed_6=false,Cinematic_1=false,Cinematic_2=false,Cinematic_3=false,Cinematic_4=false,Cinematic_5=false,Cinematic_6=false,Cinematic_7=false,Cinematic_8=false,Cinematic_9=false,Cinematic_10=false,Gameplay_1=false,Gameplay_2=false,Gameplay_3=false,Gameplay_4=false,Crowd=false,Indoor=false,Outdoor=false),NumAgentsToTickPerFrame=0,LastAgentTickedIndex=0,PotentialSpawnPoints=none,SpawnPrioritizationInterval=0.4,PrioritizationIndex=0,PrioritizationUpdateIndex=0,PrioritizedSpawnPoints=none,PlayerPositionPredictionTime=0)
    SplitScreenNumReduction=0.5
    PlayerPositionPredictionTime=5
    HeadVisibilityOffset=40
    NavigationHandleClass=Class'Engine.NavigationHandle'
    bHidden=true
    bSkipActorPropertyReplication=true
    bOnlyDirtyReplication=true
    NetUpdateFrequency=10
}