/*******************************************************************************
 * GameCheatManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameCheatManager extends CheatManager within GamePlayerController
    native
    config(Game);

var DebugCameraController DebugCameraControllerRef;
var class<DebugCameraController> DebugCameraControllerClass;
var config string DebugCameraControllerClassName;

function PatchDebugCameraController()
{
    local class<DebugCameraController> TempCameraControllerClass;

    if(DebugCameraControllerClassName != "")
    {
        TempCameraControllerClass = class<DebugCameraController>(DynamicLoadObject(DebugCameraControllerClassName, Class'Class'));
        if(TempCameraControllerClass != none)
        {
            DebugCameraControllerClass = TempCameraControllerClass;
        }
    }
}

exec function ToggleDebugCamera(optional bool bDrawDebugText)
{
    local PlayerController PC;
    local DebugCameraController DCC;

    bDrawDebugText = true;
    foreach Outer.WorldInfo.AllControllers(Class'PlayerController', PC)
    {
        if(PC.bIsPlayer && PC.IsLocalPlayerController())
        {
            DCC = DebugCameraController(PC);
            if((DCC != none) && DCC.OriginalControllerRef == none)
            {
                continue;                
            }
            break;
        }        
    }    
    if((DCC != none) && DCC.OriginalControllerRef != none)
    {
        DCC.DisableDebugCamera();
        DCC.Destroy();
        DCC = none;        
    }
    else
    {
        if(PC != none)
        {
            EnableDebugCamera(bDrawDebugText);
        }
    }
}

exec function TeleportPawnToCamera(optional bool bToggleDebugCameraOff)
{
    local PlayerController PC;
    local DebugCameraController DCC;
    local Vector ViewLocation;
    local Rotator ViewRotation;

    bToggleDebugCameraOff = true;
    foreach Outer.WorldInfo.AllControllers(Class'PlayerController', PC)
    {
        if(PC.bIsPlayer && PC.IsLocalPlayerController())
        {
            DCC = DebugCameraController(PC);
            if((DCC != none) && DCC.OriginalControllerRef == none)
            {
                continue;                
            }
            break;
        }        
    }    
    if((DCC != none) && DCC.OriginalControllerRef != none)
    {
        if(DCC.OriginalControllerRef.Pawn != none)
        {
            Outer.GetPlayerViewPoint(ViewLocation, ViewRotation);
            DCC.OriginalControllerRef.Pawn.SetLocation(ViewLocation);
            DCC.OriginalControllerRef.Pawn.SetRotation(ViewRotation);
        }
        if(bToggleDebugCameraOff)
        {
            ToggleDebugCamera();
        }        
    }
    else
    {
        Outer.ClientMessage("TeleportPawnToCamera should be used in conjunction with the ToggleDebugCamera command.   Failed.");
    }
}

function EnableDebugCamera(bool bEnableDebugText)
{
    local Player P;
    local Vector eyeLoc;
    local Rotator eyeRot;
    local float CameraFOVAngle;

    P = Outer.Player;
    if(((P != none) && Outer.Pawn != none) && Outer.IsLocalPlayerController())
    {
        PatchDebugCameraController();
        if(DebugCameraControllerRef != none)
        {
            DebugCameraControllerRef.Destroy();
        }
        CameraFOVAngle = Outer.GetFOVAngle();
        DebugCameraControllerRef = Outer.Spawn(DebugCameraControllerClass);
        DebugCameraControllerRef.PlayerInput = none;
        DebugCameraControllerRef.OriginalPlayer = P;
        DebugCameraControllerRef.OriginalControllerRef = Outer;
        Outer.GetPlayerViewPoint(eyeLoc, eyeRot);
        DebugCameraControllerRef.SetLocation(eyeLoc);
        DebugCameraControllerRef.SetRotation(eyeRot);
        DebugCameraControllerRef.bDrawDebugText = bEnableDebugText;
        P.SwitchController(DebugCameraControllerRef);
        DebugCameraControllerRef.OnActivate(Outer);
        DebugCameraControllerRef.GetPlayerViewPoint(eyeLoc, eyeRot);
        if(DebugCameraControllerRef.PlayerCamera != none)
        {
            DebugCameraControllerRef.PlayerCamera.SetFOV(CameraFOVAngle);
            DebugCameraControllerRef.PlayerCamera.UpdateCamera(0);            
        }
        else
        {
            DebugCameraControllerRef.FOVAngle = CameraFOVAngle;
        }
    }
}

exec function TestHttp(string Verb, string Payload, string URL, optional bool bSendParallelRequest)
{
    local HttpRequestInterface R;

    R = Class'HttpFactory'.static.CreateRequest();
    R.__OnProcessRequestComplete__Delegate = OnRequestComplete;
    LogInternal("Created request");
    R.SetURL(URL);
    if(Len(Verb) > 0)
    {
        R.SetVerb(Verb);        
    }
    else
    {
        LogInternal("No Verb given, using the defaults.");
    }
    if(Len(Payload) > 0)
    {
        R.SetContentAsString(Payload);        
    }
    else
    {
        LogInternal("No payload given.");
    }
    LogInternal("Creating request for URL:" @ URL);
    LogInternal("Key1 =" @ R.GetURLParameter("Key1"));
    LogInternal("Key2 =" @ R.GetURLParameter("Key2"));
    LogInternal("Key3NoValue =" @ R.GetURLParameter("Key3NoValue"));
    LogInternal("NonexistentKey =" @ R.GetURLParameter("NonexistentKey"));
    LogInternal("NonExistentHeader =" @ R.GetHeader("NonExistentHeader"));
    LogInternal("CustomHeaderName =" @ R.GetHeader("CustomHeaderName"));
    LogInternal("ContentType =" @ R.GetContentType());
    LogInternal("ContentLength =" @ string(R.GetContentLength()));
    LogInternal("URL =" @ R.GetURL());
    LogInternal("Verb =" @ R.GetVerb());
    if(!R.ProcessRequest())
    {
        LogInternal("ProcessRequest failed. Unsuppress DevHttpRequest to see more details.");        
    }
    else
    {
        LogInternal("Request sent");
    }
    if(bSendParallelRequest)
    {
        if(!Class'HttpFactory'.static.CreateRequest().SetURL("http://www.epicgames.com").SetVerb("GET").SetHeader("Test", "Value").SetProcessRequestCompleteDelegate(OnRequestComplete).ProcessRequest())
        {
            LogInternal("ProcessRequest for parallel request failed. Unsuppress DevHttpRequest to see more details.");            
        }
        else
        {
            LogInternal("Parallel Request sent");
        }
    }
}

function OnRequestComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local array<string> Headers;
    local string Header, Payload;
    local int PayloadIndex;

    LogInternal("Got response!!!!!!! Succeeded=" @ string(bDidSucceed));
    LogInternal("URL=" @ OriginalRequest.GetURL());
    if(Response != none)
    {
        LogInternal("ResponseURL=" @ Response.GetURL());
        LogInternal("Response Code=" @ string(Response.GetResponseCode()));
        Headers = Response.GetHeaders();
        foreach Headers(Header,)
        {
            LogInternal("Header:" @ Header);            
        }        
        Payload = Response.GetContentAsString();
        if(Len(Payload) > 1024)
        {
            PayloadIndex = 0;
            LogInternal("Payload:");
            J0x181:

            if(PayloadIndex < Len(Payload))
            {
                LogInternal("    " @ Mid(Payload, PayloadIndex, 1024));
                PayloadIndex = PayloadIndex + 1024;
                goto J0x181;
            }            
        }
        else
        {
            LogInternal("Payload:" @ Payload);
        }
    }
}

defaultproperties
{
    DebugCameraControllerClassName="GameFramework.DebugCameraController"
}