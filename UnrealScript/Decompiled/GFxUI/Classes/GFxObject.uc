/*******************************************************************************
 * GFxObject generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GFxObject extends Object within GFxMoviePlayer
    native;

struct native ASDisplayInfo
{
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float X;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float Y;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float Z;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float Rotation;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float XRotation;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float YRotation;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float XScale;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float YScale;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float ZScale;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() float Alpha;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool Visible;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasX;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasY;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasZ;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasRotation;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasXRotation;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasYRotation;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasXScale;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasYScale;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasZScale;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasAlpha;
    /** Struct for storing properties of display objects for easy and quick manipulation at runtime using the Complex Object Interface */
    var() bool hasVisible;

    structdefaultproperties
    {
        X=0
        Y=0
        Z=0
        Rotation=0
        XRotation=0
        YRotation=0
        XScale=0
        YScale=0
        ZScale=0
        Alpha=0
        Visible=false
        hasX=false
        hasY=false
        hasZ=false
        hasRotation=false
        hasXRotation=false
        hasYRotation=false
        hasXScale=false
        hasYScale=false
        hasZScale=false
        hasAlpha=false
        hasVisible=false
    }
};

struct native ASColorTransform
{
    /** Struct for storing color transformation information for manipulation using the Complex Object Interface */
    var() LinearColor Multiply;
    /** Struct for storing color transformation information for manipulation using the Complex Object Interface */
    var() LinearColor Add;

    structdefaultproperties
    {
        Multiply=(R=1,G=1,B=1,A=1)
        Add=(R=0,G=0,B=0,A=0)
    }
};

var private native const int Value[12];
var array<GFxWidgetBinding> SubWidgetBindings;

// Export UGFxObject::execGet(FFrame&, void* const)
native final function ASValue Get(string Member);

// Export UGFxObject::execGetBool(FFrame&, void* const)
native final function bool GetBool(string Member);

// Export UGFxObject::execGetFloat(FFrame&, void* const)
native final function float GetFloat(string Member);

// Export UGFxObject::execGetInt(FFrame&, void* const)
native final function int GetInt(string Member);

// Export UGFxObject::execGetString(FFrame&, void* const)
native final function string GetString(string Member);

// Export UGFxObject::execGetObject(FFrame&, void* const)
native final function GFxObject GetObject(string Member, optional class<GFxObject> Type)
{
    Type = Class'GFxObject';                
}

// Export UGFxObject::execSet(FFrame&, void* const)
native final function Set(string Member, ASValue Arg);

// Export UGFxObject::execSetBool(FFrame&, void* const)
native final function SetBool(string Member, bool B);

// Export UGFxObject::execSetFloat(FFrame&, void* const)
native final function SetFloat(string Member, float F);

// Export UGFxObject::execSetInt(FFrame&, void* const)
native final function SetInt(string Member, int I);

// Export UGFxObject::execSetString(FFrame&, void* const)
native final function SetString(string Member, string S, optional TranslationContext InContext);

// Export UGFxObject::execSetObject(FFrame&, void* const)
native final function SetObject(string Member, GFxObject Val);

// Export UGFxObject::execSetFunction(FFrame&, void* const)
native final function SetFunction(string Member, Object context, name fname);

// Export UGFxObject::execTranslateString(FFrame&, void* const)
native static function string TranslateString(string StringToTranslate, optional TranslationContext InContext);

// Export UGFxObject::execGetDisplayInfo(FFrame&, void* const)
native final function ASDisplayInfo GetDisplayInfo();

// Export UGFxObject::execGetPosition(FFrame&, void* const)
native final function bool GetPosition(out float X, out float Y);

// Export UGFxObject::execGetColorTransform(FFrame&, void* const)
native final function ASColorTransform GetColorTransform();

// Export UGFxObject::execGetDisplayMatrix(FFrame&, void* const)
native final function Matrix GetDisplayMatrix();

// Export UGFxObject::execGetDisplayMatrix3D(FFrame&, void* const)
native final function Matrix GetDisplayMatrix3D();

// Export UGFxObject::execSetDisplayInfo(FFrame&, void* const)
native final function SetDisplayInfo(ASDisplayInfo D);

// Export UGFxObject::execSetPosition(FFrame&, void* const)
native final function SetPosition(float X, float Y);

// Export UGFxObject::execSetColorTransform(FFrame&, void* const)
native final function SetColorTransform(ASColorTransform cxform);

// Export UGFxObject::execSetDisplayMatrix(FFrame&, void* const)
native final function SetDisplayMatrix(Matrix M);

// Export UGFxObject::execSetDisplayMatrix3D(FFrame&, void* const)
native final function SetDisplayMatrix3D(Matrix M);

// Export UGFxObject::execSetVisible(FFrame&, void* const)
native final function SetVisible(bool Visible);

// Export UGFxObject::execGetText(FFrame&, void* const)
native final function string GetText();

// Export UGFxObject::execSetText(FFrame&, void* const)
native final function SetText(coerce string Text, optional TranslationContext InContext);

// Export UGFxObject::execGetElement(FFrame&, void* const)
native final function ASValue GetElement(int Index);

// Export UGFxObject::execGetElementObject(FFrame&, void* const)
native final function GFxObject GetElementObject(int Index, optional class<GFxObject> Type)
{
    Type = Class'GFxObject';                
}

// Export UGFxObject::execGetElementBool(FFrame&, void* const)
native final function bool GetElementBool(int Index);

// Export UGFxObject::execGetElementFloat(FFrame&, void* const)
native final function float GetElementFloat(int Index);

// Export UGFxObject::execGetElementInt(FFrame&, void* const)
native final function int GetElementInt(int Index);

// Export UGFxObject::execGetElementString(FFrame&, void* const)
native final function string GetElementString(int Index);

// Export UGFxObject::execSetElement(FFrame&, void* const)
native final function SetElement(int Index, ASValue Arg);

// Export UGFxObject::execSetElementObject(FFrame&, void* const)
native final function SetElementObject(int Index, GFxObject Val);

// Export UGFxObject::execSetElementBool(FFrame&, void* const)
native final function SetElementBool(int Index, bool B);

// Export UGFxObject::execSetElementFloat(FFrame&, void* const)
native final function SetElementFloat(int Index, float F);

// Export UGFxObject::execSetElementInt(FFrame&, void* const)
native final function SetElementInt(int Index, int I);

// Export UGFxObject::execSetElementString(FFrame&, void* const)
native final function SetElementString(int Index, string S);

// Export UGFxObject::execGetElementDisplayInfo(FFrame&, void* const)
native final function ASDisplayInfo GetElementDisplayInfo(int Index);

// Export UGFxObject::execGetElementDisplayMatrix(FFrame&, void* const)
native final function Matrix GetElementDisplayMatrix(int Index);

// Export UGFxObject::execSetElementDisplayInfo(FFrame&, void* const)
native final function SetElementDisplayInfo(int Index, ASDisplayInfo D);

// Export UGFxObject::execSetElementDisplayMatrix(FFrame&, void* const)
native final function SetElementDisplayMatrix(int Index, Matrix M);

// Export UGFxObject::execSetElementVisible(FFrame&, void* const)
native final function SetElementVisible(int Index, bool Visible);

// Export UGFxObject::execSetElementPosition(FFrame&, void* const)
native final function SetElementPosition(int Index, float X, float Y);

// Export UGFxObject::execSetElementColorTransform(FFrame&, void* const)
native final function SetElementColorTransform(int Index, ASColorTransform cxform);

// Export UGFxObject::execGetElementMember(FFrame&, void* const)
native final function ASValue GetElementMember(int Index, string Member);

// Export UGFxObject::execGetElementMemberObject(FFrame&, void* const)
native final function GFxObject GetElementMemberObject(int Index, string Member, optional class<GFxObject> Type)
{
    Type = Class'GFxObject';                    
}

// Export UGFxObject::execGetElementMemberBool(FFrame&, void* const)
native final function bool GetElementMemberBool(int Index, string Member);

// Export UGFxObject::execGetElementMemberFloat(FFrame&, void* const)
native final function float GetElementMemberFloat(int Index, string Member);

// Export UGFxObject::execGetElementMemberInt(FFrame&, void* const)
native final function int GetElementMemberInt(int Index, string Member);

// Export UGFxObject::execGetElementMemberString(FFrame&, void* const)
native final function string GetElementMemberString(int Index, string Member);

// Export UGFxObject::execSetElementMember(FFrame&, void* const)
native final function SetElementMember(int Index, string Member, ASValue Arg);

// Export UGFxObject::execSetElementMemberObject(FFrame&, void* const)
native final function SetElementMemberObject(int Index, string Member, GFxObject Val);

// Export UGFxObject::execSetElementMemberBool(FFrame&, void* const)
native final function SetElementMemberBool(int Index, string Member, bool B);

// Export UGFxObject::execSetElementMemberFloat(FFrame&, void* const)
native final function SetElementMemberFloat(int Index, string Member, float F);

// Export UGFxObject::execSetElementMemberInt(FFrame&, void* const)
native final function SetElementMemberInt(int Index, string Member, int I);

// Export UGFxObject::execSetElementMemberString(FFrame&, void* const)
native final function SetElementMemberString(int Index, string Member, string S);

// Export UGFxObject::execActionScriptSetFunction(FFrame&, void* const)
protected native final function ActionScriptSetFunction(string Member);

// Export UGFxObject::execActionScriptSetFunctionOn(FFrame&, void* const)
protected native final function ActionScriptSetFunctionOn(GFxObject Target, string Member);

// Export UGFxObject::execInvoke(FFrame&, void* const)
native final function ASValue Invoke(string Member, array<ASValue> args);

// Export UGFxObject::execActionScriptVoid(FFrame&, void* const)
native final function ActionScriptVoid(string method);

// Export UGFxObject::execActionScriptInt(FFrame&, void* const)
native final function int ActionScriptInt(string method);

// Export UGFxObject::execActionScriptFloat(FFrame&, void* const)
native final function float ActionScriptFloat(string method);

// Export UGFxObject::execActionScriptString(FFrame&, void* const)
native final function string ActionScriptString(string method);

// Export UGFxObject::execActionScriptObject(FFrame&, void* const)
native final function GFxObject ActionScriptObject(string Path);

// Export UGFxObject::execActionScriptArray(FFrame&, void* const)
native final function array<GFxObject> ActionScriptArray(string Path);

// Export UGFxObject::execGotoAndPlay(FFrame&, void* const)
native final function GotoAndPlay(string frame);

// Export UGFxObject::execGotoAndPlayI(FFrame&, void* const)
native final function GotoAndPlayI(int frame);

// Export UGFxObject::execGotoAndStop(FFrame&, void* const)
native final function GotoAndStop(string frame);

// Export UGFxObject::execGotoAndStopI(FFrame&, void* const)
native final function GotoAndStopI(int frame);

// Export UGFxObject::execCreateEmptyMovieClip(FFrame&, void* const)
native final function GFxObject CreateEmptyMovieClip(string instancename, optional int Depth, optional class<GFxObject> Type)
{
    Depth = -1;
    Type = Class'GFxObject';                    
}

// Export UGFxObject::execAttachMovie(FFrame&, void* const)
native final function GFxObject AttachMovie(string symbolname, string instancename, optional int Depth, optional class<GFxObject> Type)
{
    Depth = -1;
    Type = Class'GFxObject';                        
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget);

event bool WidgetUnloaded(name WidgetName, name WidgetPath, GFxObject Widget);
