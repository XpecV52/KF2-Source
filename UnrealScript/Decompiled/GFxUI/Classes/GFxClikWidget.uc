/*******************************************************************************
 * GFxClikWidget generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GFxClikWidget extends GFxObject within GFxMoviePlayer;

struct EventData
{
    var GFxObject _this;
    var GFxObject Target;
    var string Type;
    var int Data;
    var int mouseIndex;
    var int Button;
    var int Index;
    var int lastIndex;

    structdefaultproperties
    {
        _this=none
        Target=none
        Type=""
        Data=0
        mouseIndex=0
        Button=0
        Index=0
        lastIndex=0
    }
};

var GFxObject AddedListener;
var delegate<EventListener> __EventListener__Delegate;

delegate EventListener(EventData Data);

function AddEventListener(name Type, delegate<EventListener> Listener, optional bool useCapture, optional int listenerPriority, optional bool useWeakReference)
{
    local GFxObject O, funcobj;
    local string TypeString;

    useCapture = false;
    listenerPriority = 0;
    useWeakReference = false;
    TypeString = GetEventStringFromTypename(Type);
    if(TypeString != "")
    {
        O = Outer.CreateObject("Object");
        SetListener(O, TypeString, Listener);
        if(Outer.GetAVMVersion() == 2)
        {
            funcobj = O.GetObject(TypeString);
            AS3AddEventListener(TypeString, funcobj, useCapture, listenerPriority, useWeakReference);            
        }
        else
        {
            ASAddEventListener(TypeString, O, TypeString);
        }
    }
}

function AddAS3EventListener(name Type, delegate<EventListener> Listener, optional bool useCapture, optional int listenerPriority, optional bool useWeakReference)
{
    local GFxObject O, funcobj;
    local string TypeString;

    useCapture = false;
    listenerPriority = 0;
    useWeakReference = false;
    TypeString = GetEventStringFromTypename(Type);
    if(TypeString != "")
    {
        if(AddedListener != none)
        {
            AS3RemoveEventListener(TypeString, AddedListener, useCapture);
        }
        O = Outer.CreateObject("Object");
        SetListener(O, TypeString, Listener);
        funcobj = O.GetObject(TypeString);
        AS3AddEventListener(TypeString, funcobj, useCapture, listenerPriority, useWeakReference);
        AddedListener = funcobj;
    }
}

function RemoveAllEventListeners(string Event)
{
    ASRemoveAllEventListeners(Event);
}

private final function string GetEventStringFromTypename(name Typename)
{
    local string TypeString;

    TypeString = string(Typename);
    if(InStr(TypeString, "CLIK_") >= 0)
    {
        return Split(TypeString, "CLIK_", true);        
    }
    else
    {
        LogInternal("Improper CLIK callback name!  All callback names must start with CLIK_ (e.g. 'CLIK_press')");
        return "";
    }
}

private final function SetListener(GFxObject O, string Member, delegate<EventListener> Listener)
{
    ActionScriptSetFunctionOn(O, Member);
}

private final function ASAddEventListener(string Type, GFxObject O, string func)
{
    ActionScriptVoid("addEventListener");
}

private final function AS3AddEventListener(string Type, GFxObject O, optional bool useCapture, optional int listenerPriority, optional bool useWeakReference)
{
    useCapture = false;
    listenerPriority = 0;
    useWeakReference = true;
    ActionScriptVoid("addEventListener");
}

private final function ASRemoveAllEventListeners(string Event)
{
    ActionScriptVoid("removeAllEventListeners");
}

private final function AS3RemoveEventListener(string Type, GFxObject O, optional bool useCapture)
{
    useCapture = false;
    ActionScriptVoid("removeEventListener");
}
