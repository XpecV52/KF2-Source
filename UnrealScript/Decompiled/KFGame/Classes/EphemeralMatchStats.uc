/*******************************************************************************
 * EphemeralMatchStats generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class EphemeralMatchStats extends Object within KFPlayerController;

const MATCH_EVENT_HEADSHOT = 0;
const MATCH_EVENT_DOSH_EARNED = 1;
const MATCH_EVENT_DAMAGE_DEALT = 2;
const MATCH_EVENT_DAMAGE_TAKEN = 3;
const MATCH_EVENT_HEAL_GIVEN = 4;
const MATCH_EVENT_HEAL_RECEIVED = 5;
const MATCH_EVENT_MAX_EVENTID = 0x0000FFFF;

enum ETeamAwards
{
    ETA_MedicineMaster,
    ETA_ZedSlayer,
    ETA_Enforcer,
    ETA_Destroyer,
    ETA_GiantSlayer,
    ETA_MoneyBags,
    ETA_HeadPopper,
    ETA_Dominator,
    ETA_MAX
};

enum EPersonalBests
{
    EPB_KnifeKills,
    EPB_PistolKills,
    EPB_HeadShots,
    EPB_Healing,
    EPB_Kills,
    EPB_Assists,
    EPB_LargeZedKill,
    EPB_Dosh,
    EPB_DoorWelding,
    EPB_MAX
};

struct TopWeaponReplicationInfo
{
    var class<KFWeaponDefinition> TopWeapon1;
    var class<KFWeaponDefinition> TopWeapon2;
    var class<KFWeaponDefinition> TopWeapon3;
    var Vector TopWeapon1Info;
    var Vector TopWeapon2Info;
    var Vector TopWeapon3Info;

    structdefaultproperties
    {
        TopWeapon1=none
        TopWeapon2=none
        TopWeapon3=none
        TopWeapon1Info=(X=0,Y=0,Z=0)
        TopWeapon2Info=(X=0,Y=0,Z=0)
        TopWeapon3Info=(X=0,Y=0,Z=0)
    }
};

struct AARAward
{
    var name IconPath;
    var string TitleIdentifier;
    var string DescriptionIdentifier;
    var string ValueIdentifier;
    var int DisplayValue;
    var bool bHighLight;
    var PlayerReplicationInfo PRI;

    structdefaultproperties
    {
        IconPath=None
        TitleIdentifier=""
        DescriptionIdentifier=""
        ValueIdentifier=""
        DisplayValue=0
        bHighLight=false
        PRI=none
    }
};

struct ZedKillType
{
    var class<KFPawn_Monster> MonsterClass;
    var int KillCount;

    structdefaultproperties
    {
        MonsterClass=none
        KillCount=0
    }
};

struct WeaponDamage
{
    var class<KFWeaponDefinition> WeaponDef;
    var int DamageAmount;
    var int HeadShots;
    var int LargeZedKills;
    var int Kills;

    structdefaultproperties
    {
        WeaponDef=none
        DamageAmount=0
        HeadShots=0
        LargeZedKills=0
        Kills=0
    }
};

struct PerkXPGain
{
    var class<KFPerk> PerkClass;
    var int XPDelta;
    var int SecondaryXPGain;
    var float StartXPPercentage;
    var int StartLevel;

    structdefaultproperties
    {
        PerkClass=none
        XPDelta=0
        SecondaryXPGain=0
        StartXPPercentage=0
        StartLevel=0
    }
};

var bool bShowMatchStatsLogging;
var bool bKilledBoss;
var array<AARAward> TeamAwardList;
var array<AARAward> PersonalBestList;
var TopWeaponReplicationInfo TWRI;
var int ZedsKilledLastWave;
var byte DeathStreak;
var byte SurvivedStreak;
var int TotalHeadShots;
var int TotalDoshEarned;
var int TotalDamageDealt;
var int TotalDamageTaken;
var int TotalAmountHealGiven;
var int TotalAmountHealReceived;
var int TotalLargeZedKills;
var array<PerkXPGain> PerkXPList;
var array<WeaponDamage> WeaponDamageList;
var array<ZedKillType> ZedKillsArray;
var delegate<SortXP> __SortXP__Delegate;
var delegate<SortWeapons> __SortWeapons__Delegate;

function RecordIntStat(int StatId, int Value)
{
    switch(StatId)
    {
        case 0:
            IncrementHeadShotsInWave(Value);
            break;
        case 1:
            IncrementDoshEarnedInWave(Value);
            break;
        case 2:
            IncrementDamageDealtInWave(Value);
            break;
        case 3:
            IncrementDamageTakenInWave(Value);
            break;
        case 4:
            IncrementHealGivenInWave(Value);
            break;
        case 5:
            IncrementHealReceivedInWave(Value);
            break;
        default:
            break;
    }
}

function IncrementHeadShotsInWave(int Delta)
{
    Outer.PWRI.VectData1.X += float(Delta);
}

function int GetHeadShotsInWave()
{
    return int(Outer.PWRI.VectData1.X);
}

function IncrementDoshEarnedInWave(int Delta)
{
    Outer.PWRI.VectData1.Y += float(Delta);
}

function int GetDoshEarnedInWave()
{
    return int(Outer.PWRI.VectData1.Y);
}

function IncrementDamageDealtInWave(int Delta)
{
    Outer.PWRI.VectData1.Z += float(Delta);
}

function int GetDamageDealtInWave()
{
    return int(Outer.PWRI.VectData1.Z);
}

function IncrementDamageTakenInWave(int Delta)
{
    Outer.PWRI.VectData2.X += float(Delta);
}

function int GetDamageTakenInWave()
{
    return int(Outer.PWRI.VectData2.X);
}

function IncrementHealReceivedInWave(int Delta)
{
    Outer.PWRI.VectData2.Y += float(Delta);
}

function int GetHealReceivedInWave()
{
    return int(Outer.PWRI.VectData2.Y);
}

function IncrementHealGivenInWave(int Delta)
{
    Outer.PWRI.VectData2.Z += float(Delta);
}

function int GetHealGivenInWave()
{
    return int(Outer.PWRI.VectData2.Z);
}

function RecordWaveInfo()
{
    if(Outer.IsTimerActive('ResetLastWaveInfo', self))
    {
        ResetLastWaveInfo();
    }
    TotalHeadShots += (GetHeadShotsInWave());
    TotalDoshEarned += (GetDoshEarnedInWave());
    TotalAmountHealGiven += (GetHealGivenInWave());
    TotalAmountHealReceived += (GetHealReceivedInWave());
    TotalDamageTaken += (GetDamageTakenInWave());
    TotalDamageDealt += (GetDamageDealtInWave());
    if(Outer.PWRI.bDiedDuringWave)
    {
        ++ DeathStreak;
        SurvivedStreak = 0;        
    }
    else
    {
        DeathStreak = 0;
        ++ SurvivedStreak;
    }
    Outer.SetTimer(1, false, 'ResetLastWaveInfo', self);
}

function ResetLastWaveInfo()
{
    Outer.PWRI.VectData1.X = 0;
    Outer.PWRI.VectData1.Y = 0;
    Outer.PWRI.VectData1.Z = 0;
    Outer.PWRI.VectData2.X = 0;
    Outer.PWRI.VectData2.Y = 0;
    Outer.PWRI.VectData2.Z = 0;
    Outer.PWRI.bKilledMostZeds = false;
    Outer.PWRI.bKilledFleshpoundLastWave = false;
    Outer.PWRI.bKilledScrakeLastWave = false;
    Outer.PWRI.ClassKilledByLastWave = none;
    Outer.PWRI.bAllSurvivedLastWave = false;
    Outer.PWRI.bSomeSurvivedLastWave = false;
    Outer.PWRI.bOneSurvivedLastWave = false;
    Outer.PWRI.bDiedDuringWave = false;
    ZedsKilledLastWave = 0;
}

function RecordPerkXPGain(class<KFPerk> PerkClass, int XPDelta)
{
    local int Index;
    local PerkXPGain TempPerkXPItem;

    Index = PerkXPList.Find('PerkClass', PerkClass;
    if(Index == -1)
    {
        TempPerkXPItem.PerkClass = PerkClass;
        TempPerkXPItem.StartLevel = Outer.GetPerkLevelFromPerkList(PerkClass);
        TempPerkXPItem.StartXPPercentage = Outer.GetPerkLevelProgressPercentage(PerkClass);
        TempPerkXPItem.XPDelta += XPDelta;
        PerkXPList.AddItem(TempPerkXPItem;        
    }
    else
    {
        PerkXPList[Index].XPDelta += XPDelta;
    }
}

function RecordSecondaryXPGain(class<KFPerk> PerkClass, int XPDelta)
{
    local int Index;

    Index = PerkXPList.Find('PerkClass', PerkClass;
    if(Index != -1)
    {
        PerkXPList[Index].SecondaryXPGain += XPDelta;
    }
}

function RecordZedKill(class<Pawn> PawnClass, class<DamageType> DT)
{
    local int Index;
    local ZedKillType TempZedKillType;
    local class<KFDamageType> KFDT;
    local class<KFPawn_Monster> MonsterClass;

    MonsterClass = class<KFPawn_Monster>(PawnClass);
    KFDT = class<KFDamageType>(DT);
    if(KFDT != none)
    {
        RecordWeaponKill(KFDT.default.WeaponDef);
    }
    if(MonsterClass != none)
    {
        if(MonsterClass.static.IsLargeZed())
        {
            ++ TotalLargeZedKills;
        }
        Index = ZedKillsArray.Find('MonsterClass', MonsterClass;
        if(Index == -1)
        {
            TempZedKillType.MonsterClass = MonsterClass;
            ++ TempZedKillType.KillCount;
            ZedKillsArray.AddItem(TempZedKillType;            
        }
        else
        {
            ++ ZedKillsArray[Index].KillCount;
        }
    }
}

static function RecordWeaponHeadShot(Controller InstigatedBy, class<DamageType> WeaponDamageType)
{
    local int WeaponIndex;
    local WeaponDamage TempWeaponDamage;
    local KFPlayerController KFPC;
    local class<KFDamageType> KFDT;

    if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
    {
        LogInternal(string('RecordWeaponHeadShot'));
    }
    KFPC = KFPlayerController(InstigatedBy);
    KFDT = class<KFDamageType>(WeaponDamageType);
    if((KFPC != none) && KFPC.MatchStats != none)
    {
        if((KFPC != none) && KFPC.MatchStats != none)
        {
            KFPC.MatchStats.RecordIntStat(0, 1);
        }
        if(KFDT != none)
        {
            WeaponIndex = KFPC.MatchStats.WeaponDamageList.Find('WeaponDef', KFDT.default.WeaponDef;
            if(WeaponIndex == -1)
            {
                TempWeaponDamage.WeaponDef = KFDT.default.WeaponDef;
                ++ TempWeaponDamage.HeadShots;
                KFPC.MatchStats.WeaponDamageList.AddItem(TempWeaponDamage;                
            }
            else
            {
                ++ KFPC.MatchStats.WeaponDamageList[WeaponIndex].HeadShots;
            }
        }
    }
}

static function RecordWeaponDamage(Controller InstigatedBy, class<KFWeaponDefinition> WeaponDef, int Damage, KFPawn TargetPawn, int HitZoneIdx)
{
    local KFPlayerController KFPC;

    if(InstigatedBy == none)
    {
        return;
    }
    KFPC = KFPlayerController(InstigatedBy);
    if((KFPC != none) && KFPC.MatchStats != none)
    {
        KFPC.MatchStats.InternalRecordWeaponDamage(WeaponDef, Damage, TargetPawn, HitZoneIdx);
    }
}

function RecordWeaponKill(class<KFWeaponDefinition> WeaponDef)
{
    local int WeaponIndex;
    local WeaponDamage TempWeaponDamage;

    WeaponIndex = WeaponDamageList.Find('WeaponDef', WeaponDef;
    if(WeaponIndex == -1)
    {
        TempWeaponDamage.WeaponDef = WeaponDef;
        ++ TempWeaponDamage.Kills;
        WeaponDamageList.AddItem(TempWeaponDamage;        
    }
    else
    {
        ++ WeaponDamageList[WeaponIndex].Kills;
    }
}

function InternalRecordWeaponDamage(class<KFWeaponDefinition> WeaponDef, int Damage, KFPawn TargetPawn, int HitZoneIdx)
{
    local int WeaponIndex;
    local WeaponDamage TempWeaponDamage;
    local bool bLargeZedKill, bKilled;
    local int PreHealth;

    if((Outer.Role != ROLE_Authority) || !TargetPawn.IsA('KFPawn_Monster'))
    {
        return;
    }
    bKilled = (TargetPawn.Health <= 0) && (TargetPawn.Health + Damage) > 0;
    bLargeZedKill = bKilled && TargetPawn.IsLargeZed();
    WeaponIndex = WeaponDamageList.Find('WeaponDef', WeaponDef;
    if(WeaponIndex == -1)
    {
        TempWeaponDamage.WeaponDef = WeaponDef;
        WeaponIndex = WeaponDamageList.Length;
        WeaponDamageList.AddItem(TempWeaponDamage;
    }
    if(WeaponDamageList[WeaponIndex].WeaponDef == WeaponDef)
    {
        PreHealth = TargetPawn.Health + Damage;
        if(TargetPawn.Health > 0)
        {
            RecordIntStat(2, Damage);
            WeaponDamageList[WeaponIndex].DamageAmount += Damage;            
        }
        else
        {
            if(PreHealth > 0)
            {
                RecordIntStat(2, PreHealth);
                WeaponDamageList[WeaponIndex].DamageAmount += PreHealth;
            }
        }
        if(bLargeZedKill)
        {
            ++ WeaponDamageList[WeaponIndex].LargeZedKills;
        }
    }
}

function PackTopWeapons()
{
    local array<WeaponDamage> TopWeaponsArray;
    local int I;

    GetTopWeapons(3, TopWeaponsArray);
    I = 0;
    J0x20:

    if(I < 3)
    {
        if(I >= TopWeaponsArray.Length)
        {
            return;
        }
        switch(I)
        {
            case 0:
                TWRI.TopWeapon1 = TopWeaponsArray[I].WeaponDef;
                TWRI.TopWeapon1Info.X = float(TopWeaponsArray[I].DamageAmount);
                TWRI.TopWeapon1Info.Y = float(TopWeaponsArray[I].HeadShots);
                TWRI.TopWeapon1Info.Z = float(TopWeaponsArray[I].LargeZedKills);
                break;
            case 1:
                TWRI.TopWeapon2 = TopWeaponsArray[I].WeaponDef;
                TWRI.TopWeapon2Info.X = float(TopWeaponsArray[I].DamageAmount);
                TWRI.TopWeapon2Info.Y = float(TopWeaponsArray[I].HeadShots);
                TWRI.TopWeapon2Info.Z = float(TopWeaponsArray[I].LargeZedKills);
                break;
            case 2:
                TWRI.TopWeapon3 = TopWeaponsArray[I].WeaponDef;
                TWRI.TopWeapon3Info.X = float(TopWeaponsArray[I].DamageAmount);
                TWRI.TopWeapon3Info.Y = float(TopWeaponsArray[I].HeadShots);
                TWRI.TopWeapon3Info.Z = float(TopWeaponsArray[I].LargeZedKills);
                break;
            default:
                break;
        }
        ++ I;
        goto J0x20;
    }
}

function UnpackTopWeapons(TopWeaponReplicationInfo TopWeapons)
{
    TWRI = TopWeapons;
    if(TWRI.TopWeapon1 != none)
    {
        AddUnpackedWeaponToDamageList(TWRI.TopWeapon1, int(TWRI.TopWeapon1Info.X), int(TWRI.TopWeapon1Info.Y), int(TWRI.TopWeapon1Info.Z));
    }
    if(TWRI.TopWeapon2 != none)
    {
        AddUnpackedWeaponToDamageList(TWRI.TopWeapon2, int(TWRI.TopWeapon2Info.X), int(TWRI.TopWeapon2Info.Y), int(TWRI.TopWeapon2Info.Z));
    }
    if(TWRI.TopWeapon3 != none)
    {
        AddUnpackedWeaponToDamageList(TWRI.TopWeapon3, int(TWRI.TopWeapon3Info.X), int(TWRI.TopWeapon3Info.Y), int(TWRI.TopWeapon3Info.Z));
    }
}

function ProcessTopWeaponsStats()
{
    if(Outer.Role == ROLE_Authority)
    {
        PackTopWeapons();
        Outer.ReceiveTopWeapons(TWRI);
    }
}

function AddUnpackedWeaponToDamageList(class<KFWeaponDefinition> WeaponDef, int DamageAmount, int HeadShots, int LargeZedKills)
{
    local WeaponDamage TempWeaponDamage;
    local int WeaponIndex;

    WeaponIndex = WeaponDamageList.Find('WeaponDef', WeaponDef;
    if(WeaponIndex == -1)
    {
        TempWeaponDamage.DamageAmount = DamageAmount;
        TempWeaponDamage.HeadShots = HeadShots;
        TempWeaponDamage.LargeZedKills = LargeZedKills;
        WeaponDamageList.AddItem(TempWeaponDamage;        
    }
    else
    {
        WeaponDamageList[WeaponIndex].WeaponDef = WeaponDef;
        WeaponDamageList[WeaponIndex].DamageAmount = DamageAmount;
        WeaponDamageList[WeaponIndex].HeadShots = HeadShots;
        WeaponDamageList[WeaponIndex].LargeZedKills = LargeZedKills;
    }
}

function GetTopWeapons(int AmountToGrab, out array<WeaponDamage> TopWeaponList)
{
    local int I;

    WeaponDamageList.Sort(SortWeapons;
    I = 0;
    J0x29:

    if(I < WeaponDamageList.Length)
    {
        if(I < AmountToGrab)
        {
            if(WeaponDamageList[I].WeaponDef == none)
            {
                WeaponDamageList.Remove(I, 1;
                I -= 1;                
            }
            else
            {
                TopWeaponList.AddItem(WeaponDamageList[I];
            }
        }
        ++ I;
        goto J0x29;
    }
}

delegate int SortXP(PerkXPGain A, PerkXPGain B)
{
    return ((A.XPDelta < B.XPDelta) ? -1 : 0);
}

delegate int SortWeapons(WeaponDamage A, WeaponDamage B)
{
    return ((A.DamageAmount < B.DamageAmount) ? -1 : 0);
}

static function ProcessPostGameStats()
{
    local int I, J;
    local array<KFPlayerController> KFPCArray;
    local KFPlayerController KFPC;
    local WorldInfo WI;
    local AARAward TempAwardObject;

    WI = Class'WorldInfo'.static.GetWorldInfo();
    foreach WI.AllControllers(Class'KFPlayerController', KFPC)
    {
        if(KFPC != none)
        {
            KFPCArray.AddItem(KFPC;
            KFPC.MatchStats.ProcessTopWeaponsStats();
        }        
    }    
    I = 0;
    J0xC3:

    if(I < 8)
    {
        GetTeamAward(byte(I), TempAwardObject, KFPCArray);
        J = 0;
        J0x105:

        if(J < KFPCArray.Length)
        {
            KFPCArray[J].ClientReceiveAwardInfo(byte(I), TempAwardObject.PRI, TempAwardObject.DisplayValue);
            ++ J;
            goto J0x105;
        }
        TempAwardObject.PRI = none;
        TempAwardObject.DisplayValue = 0;
        ++ I;
        goto J0xC3;
    }
}

static function SendMapOptionsAndOpenAARMenu()
{
    local WorldInfo WI;
    local KFPlayerController KFPC;
    local KFPlayerReplicationInfo KFPRI;
    local KFGameInfo KFGI;
    local int I;

    WI = Class'WorldInfo'.static.GetWorldInfo();
    KFGI = KFGameInfo(WI.Game);
    foreach WI.AllControllers(Class'KFPlayerController', KFPC)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        I = 0;
        J0xCA:

        if(I < KFGI.GameMapCycles[KFGI.ActiveMapCycle].Maps.Length)
        {
            if(KFPRI != none)
            {
                if(KFGI.IsMapAllowedInCycle(KFGI.GameMapCycles[KFGI.ActiveMapCycle].Maps[I]))
                {
                    KFPRI.RecieveAARMapOption(KFGI.GameMapCycles[KFGI.ActiveMapCycle].Maps[I]);
                }
            }
            ++ I;
            goto J0xCA;
        }
        KFPC.ClientOpenPostGameMenu();        
    }    
}

function GetPersonalBests(out array<AARAward> PersonalBests)
{
    PersonalBests.AddItem(GivePersonalBestKnifeKills();
    PersonalBests.AddItem(GivePersonalBestPistolKills();
    PersonalBests.AddItem(GivePersonalBestHealing();
    PersonalBests.AddItem(GivePersonalBestKills();
    PersonalBests.AddItem(GivePersonalBestAssists();
    PersonalBests.AddItem(GivePersonalBestLargeZedKills();
    PersonalBests.AddItem(GivePersonalBestDoshEarned();
    PersonalBests.AddItem(GivePersonalBestHeadShots();
}

function int GetPistolKills()
{
    local int WeaponIndex, TotalPistolKills;

    WeaponIndex = WeaponDamageList.Find('WeaponDef', Class'KFWeapDef_9mm';
    if(WeaponIndex != -1)
    {
        TotalPistolKills += WeaponDamageList[WeaponIndex].Kills;
    }
    WeaponIndex = WeaponDamageList.Find('WeaponDef', Class'KFWeapDef_Remington1858';
    if(WeaponIndex != -1)
    {
        TotalPistolKills += WeaponDamageList[WeaponIndex].Kills;
    }
    WeaponIndex = WeaponDamageList.Find('WeaponDef', Class'KFWeapDef_Colt1911';
    if(WeaponIndex != -1)
    {
        TotalPistolKills += WeaponDamageList[WeaponIndex].Kills;
    }
    WeaponIndex = WeaponDamageList.Find('WeaponDef', Class'KFWeapDef_Deagle';
    if(WeaponIndex != -1)
    {
        TotalPistolKills += WeaponDamageList[WeaponIndex].Kills;
    }
    WeaponIndex = WeaponDamageList.Find('WeaponDef', Class'KFWeapDef_SW500';
    if(WeaponIndex != -1)
    {
        TotalPistolKills += WeaponDamageList[WeaponIndex].Kills;
    }
    WeaponIndex = WeaponDamageList.Find('WeaponDef', Class'KFWeapDef_MedicPistol';
    if(WeaponIndex != -1)
    {
        TotalPistolKills += WeaponDamageList[WeaponIndex].Kills;
    }
    return TotalPistolKills;
}

function int GetKnifeKills()
{
    local int TotalKnifeKills, I;

    I = 0;
    J0x0B:

    if(I < WeaponDamageList.Length)
    {
        if((WeaponDamageList[I].WeaponDef != none) && class<KFweapDef_Knife_Base>(WeaponDamageList[I].WeaponDef) != none)
        {
            TotalKnifeKills += WeaponDamageList[I].Kills;
        }
        ++ I;
        goto J0x0B;
    }
    return TotalKnifeKills;
}

function AARAward GivePersonalBestKnifeKills()
{
    local int Value, KnifeKills;

    Value = Outer.GetPersonalBest(0);
    KnifeKills = GetKnifeKills();
    if(Value < KnifeKills)
    {
        PersonalBestList[0].DisplayValue = KnifeKills;
        PersonalBestList[0].bHighLight = true;
        Outer.SavePersonalBest(0, KnifeKills);        
    }
    else
    {
        PersonalBestList[0].DisplayValue = Value;
    }
    return PersonalBestList[0];
}

function AARAward GivePersonalBestPistolKills()
{
    local int Value, PistolKills;

    Value = Outer.GetPersonalBest(1);
    PistolKills = GetPistolKills();
    if(Value < PistolKills)
    {
        PersonalBestList[1].DisplayValue = PistolKills;
        PersonalBestList[1].bHighLight = true;
        Outer.SavePersonalBest(1, PistolKills);        
    }
    else
    {
        PersonalBestList[1].DisplayValue = Value;
    }
    return PersonalBestList[1];
}

function AARAward GivePersonalBestHeadShots()
{
    local int Value;

    Value = Outer.GetPersonalBest(2);
    if(Value < TotalHeadShots)
    {
        PersonalBestList[2].DisplayValue = TotalHeadShots;
        PersonalBestList[2].bHighLight = true;
        Outer.SavePersonalBest(2, TotalHeadShots);        
    }
    else
    {
        PersonalBestList[2].DisplayValue = Value;
    }
    return PersonalBestList[2];
}

function AARAward GivePersonalBestHealing()
{
    local int Value;

    Value = Outer.GetPersonalBest(3);
    if(Value < TotalAmountHealGiven)
    {
        PersonalBestList[3].DisplayValue = TotalAmountHealGiven;
        PersonalBestList[3].bHighLight = true;
        Outer.SavePersonalBest(3, TotalAmountHealGiven);        
    }
    else
    {
        PersonalBestList[3].DisplayValue = Value;
    }
    return PersonalBestList[3];
}

function AARAward GivePersonalBestLargeZedKills()
{
    local int Value;

    Value = Outer.GetPersonalBest(6);
    if(Value < TotalLargeZedKills)
    {
        PersonalBestList[6].DisplayValue = TotalLargeZedKills;
        PersonalBestList[6].bHighLight = true;
        Outer.SavePersonalBest(6, TotalLargeZedKills);        
    }
    else
    {
        PersonalBestList[6].DisplayValue = Value;
    }
    return PersonalBestList[6];
}

function AARAward GivePersonalBestDoshEarned()
{
    local int Value;

    Value = Outer.GetPersonalBest(7);
    if(Value < TotalDoshEarned)
    {
        PersonalBestList[7].DisplayValue = TotalDoshEarned;
        PersonalBestList[7].bHighLight = true;
        Outer.SavePersonalBest(7, TotalDoshEarned);        
    }
    else
    {
        PersonalBestList[7].DisplayValue = Value;
    }
    return PersonalBestList[7];
}

function AARAward GivePersonalBestKills()
{
    local int Value;

    Value = Outer.GetPersonalBest(4);
    if(Value < Outer.PlayerReplicationInfo.Kills)
    {
        PersonalBestList[4].DisplayValue = Outer.PlayerReplicationInfo.Kills;
        PersonalBestList[4].bHighLight = true;
        Outer.SavePersonalBest(4, Outer.PlayerReplicationInfo.Kills);        
    }
    else
    {
        PersonalBestList[4].DisplayValue = Value;
    }
    return PersonalBestList[4];
}

function AARAward GivePersonalBestAssists()
{
    local int Value;
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(Outer.PlayerReplicationInfo);
    Value = Outer.GetPersonalBest(5);
    if(Value < KFPRI.Assists)
    {
        PersonalBestList[5].DisplayValue = KFPRI.Assists;
        PersonalBestList[5].bHighLight = true;
        Outer.SavePersonalBest(5, KFPRI.Assists);        
    }
    else
    {
        PersonalBestList[5].DisplayValue = Value;
    }
    return PersonalBestList[5];
}

function AARAward GivePersonalBestDoorWelding()
{
    local int Value;

    Value = Outer.GetPersonalBest(8);
    if(true)
    {
        PersonalBestList[8].DisplayValue = Value;
        PersonalBestList[8].bHighLight = true;
        Outer.SavePersonalBest(8, Value);        
    }
    else
    {
        PersonalBestList[8].DisplayValue = Value;
    }
    return PersonalBestList[8];
}

static function GetTeamAward(EphemeralMatchStats.ETeamAwards AwardIndex, out AARAward TempAwardObject, const out array<KFPlayerController> KFPCArray)
{
    switch(AwardIndex)
    {
        case 0:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_MedicineMaster");
            }
            Give_MedicineMaster(TempAwardObject, KFPCArray);
            break;
        case 1:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_ZedSlayer");
            }
            Give_ZedSlayer(TempAwardObject, KFPCArray);
            break;
        case 2:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_Enforcer");
            }
            Give_Enforcer(TempAwardObject, KFPCArray);
            break;
        case 3:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_Destroyer");
            }
            Give_Destroyer(TempAwardObject, KFPCArray);
            break;
        case 4:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_GiantSlayer");
            }
            Give_GiantSlayer(TempAwardObject, KFPCArray);
            break;
        case 5:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_MoneyBags");
            }
            Give_MoneyBags(TempAwardObject, KFPCArray);
            break;
        case 6:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_HeadPopper");
            }
            Give_HeadPopper(TempAwardObject, KFPCArray);
            break;
        case 7:
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal("Attempting to get ETA_Dominator");
            }
            Give_Dominator(TempAwardObject, KFPCArray);
            break;
        default:
            break;
    }
}

static function Give_MedicineMaster(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        if(KFPCArray[I].MatchStats != none)
        {
            if(KFPCArray[I].MatchStats.TotalAmountHealGiven > outAward.DisplayValue)
            {
                outAward.PRI = KFPCArray[I].PlayerReplicationInfo;
                outAward.DisplayValue = KFPCArray[I].MatchStats.TotalAmountHealGiven;
                if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
                {
                    LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPCArray[I].MatchStats.TotalAmountHealGiven));
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_ZedSlayer(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local KFPlayerReplicationInfo KFPRI;
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        KFPRI = KFPlayerReplicationInfo(KFPCArray[I].PlayerReplicationInfo);
        if(KFPRI.Kills > outAward.DisplayValue)
        {
            outAward.PRI = KFPRI;
            outAward.DisplayValue = KFPRI.Kills;
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPRI.Kills));
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_Enforcer(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local KFPlayerReplicationInfo KFPRI;
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        KFPRI = KFPlayerReplicationInfo(KFPCArray[I].PlayerReplicationInfo);
        if(KFPRI.Assists > outAward.DisplayValue)
        {
            outAward.PRI = KFPRI;
            outAward.DisplayValue = KFPRI.Assists;
            if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
            {
                LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPRI.Assists));
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_Destroyer(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        if(KFPCArray[I].MatchStats != none)
        {
            if(KFPCArray[I].MatchStats.TotalDamageDealt > outAward.DisplayValue)
            {
                outAward.PRI = KFPCArray[I].PlayerReplicationInfo;
                outAward.DisplayValue = KFPCArray[I].MatchStats.TotalDamageDealt;
                if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
                {
                    LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPCArray[I].MatchStats.TotalDamageDealt));
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_GiantSlayer(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        if(KFPCArray[I].MatchStats != none)
        {
            if(KFPCArray[I].MatchStats.TotalLargeZedKills > outAward.DisplayValue)
            {
                outAward.PRI = KFPCArray[I].PlayerReplicationInfo;
                outAward.DisplayValue = KFPCArray[I].MatchStats.TotalLargeZedKills;
                if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
                {
                    LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPCArray[I].MatchStats.TotalLargeZedKills));
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_MoneyBags(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        if(KFPCArray[I].MatchStats != none)
        {
            if(KFPCArray[I].MatchStats.TotalDoshEarned > outAward.DisplayValue)
            {
                outAward.PRI = KFPCArray[I].PlayerReplicationInfo;
                outAward.DisplayValue = KFPCArray[I].MatchStats.TotalDoshEarned;
                if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
                {
                    LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPCArray[I].MatchStats.TotalDoshEarned));
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_HeadPopper(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        if(KFPCArray[I].MatchStats != none)
        {
            if(KFPCArray[I].MatchStats.TotalHeadShots > outAward.DisplayValue)
            {
                outAward.PRI = KFPCArray[I].PlayerReplicationInfo;
                outAward.DisplayValue = KFPCArray[I].MatchStats.TotalHeadShots;
                if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
                {
                    LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ string(KFPCArray[I].MatchStats.TotalHeadShots));
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
}

static function Give_Dominator(out AARAward outAward, const out array<KFPlayerController> KFPCArray)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KFPCArray.Length)
    {
        if(KFPCArray[I].MatchStats != none)
        {
            if(KFPCArray[I].MatchStats.bKilledBoss)
            {
                outAward.PRI = KFPCArray[I].PlayerReplicationInfo;
                outAward.DisplayValue = 1;
                if(Class'EphemeralMatchStats'.default.bShowMatchStatsLogging)
                {
                    LogInternal(KFPCArray[I].PlayerReplicationInfo.PlayerName @ "Killed boss");
                }
                return;
            }
        }
        ++ I;
        goto J0x0B;
    }
}

function ReceiveAwardInfo(byte AwardID, PlayerReplicationInfo PRI, int Value)
{
    TeamAwardList[AwardID].PRI = PRI;
    TeamAwardList[AwardID].DisplayValue = Value;
}

defaultproperties
{
    TeamAwardList(0)=(IconPath=UI_Award_Team.UI_Award_Team-Healing,TitleIdentifier="MedicineMaster",DescriptionIdentifier="",ValueIdentifier="MedicineMasterValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(1)=(IconPath=UI_Award_Team.UI_Award_Team-Kills,TitleIdentifier="ZedSlayer",DescriptionIdentifier="",ValueIdentifier="ZedSlayerValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(2)=(IconPath=UI_Award_Team.UI_Award_Team-Assists,TitleIdentifier="Enforcer",DescriptionIdentifier="",ValueIdentifier="EnforcerValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(3)=(IconPath=UI_Award_Team.UI_Award_Team-Damage,TitleIdentifier="Destroyer",DescriptionIdentifier="",ValueIdentifier="DestroyerValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(4)=(IconPath=UI_Award_Team.UI_Award_Team-Giants,TitleIdentifier="GiantSlayer",DescriptionIdentifier="",ValueIdentifier="GiantSlayerValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(5)=(IconPath=UI_Award_Team.UI_Award_Team-Dosh,TitleIdentifier="MoneyBags",DescriptionIdentifier="",ValueIdentifier="MoneyBagsValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(6)=(IconPath=UI_Award_Team.UI_Award_Team-Headshots,TitleIdentifier="HeadPopper",DescriptionIdentifier="",ValueIdentifier="HeadPopperValue",DisplayValue=0,bHighLight=false,PRI=none)
    TeamAwardList(7)=(IconPath=UI_Award_Team.UI_Award_Team-BossKO,TitleIdentifier="Dominator",DescriptionIdentifier="",ValueIdentifier="DominatorValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(0)=(IconPath=UI_Award_PersonalSolo.UI_Award_PersonalSolo-Knife,TitleIdentifier="EPB_KnifeKills",DescriptionIdentifier="",ValueIdentifier="EPB_KnifeKillsValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(1)=(IconPath=UI_Award_PersonalSolo.UI_Award_PersonalSolo-Pistol,TitleIdentifier="EPB_PistolKills",DescriptionIdentifier="",ValueIdentifier="EPB_PistolKillsValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(2)=(IconPath=UI_Award_PersonalMulti.UI_Award_PersonalMulti-Headshots,TitleIdentifier="EPB_HeadShots",DescriptionIdentifier="",ValueIdentifier="EPB_HeadShotsValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(3)=(IconPath=UI_Award_PersonalMulti.UI_Award_PersonalMulti-Healing,TitleIdentifier="EPB_Healing",DescriptionIdentifier="",ValueIdentifier="EPB_HealingValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(4)=(IconPath=UI_Award_PersonalMulti.UI_Award_PersonalMulti-Kills,TitleIdentifier="EPB_Kills",DescriptionIdentifier="",ValueIdentifier="EPB_KillsValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(5)=(IconPath=UI_Award_PersonalMulti.UI_Award_PersonalMulti-Assists,TitleIdentifier="EPB_Assists",DescriptionIdentifier="",ValueIdentifier="EPB_AssistsValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(6)=(IconPath=UI_Award_PersonalMulti.UI_Award_PersonalMulti-Giants,TitleIdentifier="EPB_LargeZedKill",DescriptionIdentifier="",ValueIdentifier="EPB_LargeZedKillValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(7)=(IconPath=UI_Award_PersonalMulti.UI_Award_PersonalMulti-Dosh,TitleIdentifier="EPB_Dosh",DescriptionIdentifier="",ValueIdentifier="EPB_DoshValue",DisplayValue=0,bHighLight=false,PRI=none)
    PersonalBestList(8)=(IconPath=ui_weaponselect_tex.UI_WeaponSelect_Welder,TitleIdentifier="EPB_DoorWelding",DescriptionIdentifier="",ValueIdentifier="EPB_DoorWeldingValue",DisplayValue=0,bHighLight=false,PRI=none)
}