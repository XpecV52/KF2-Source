/*******************************************************************************
 * KFUsablePerkTrigger generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFUsablePerkTrigger extends Trigger_PawnsOnly
    native
    hidecategories(Navigation)
    implements(KFInterface_Usable);

var int InteractionIndex;

simulated function bool GetIsUsable(Pawn User)
{
    return GetCanInteract(User);
}

function SetInteractionIndex(int Index)
{
    InteractionIndex = Index;
}

function int GetInteractionIndex(Pawn User)
{
    return InteractionIndex;
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    local KFPawn_Human KFP;

    super(Trigger).Touch(Other, OtherComp, HitLocation, HitNormal);
    KFP = KFPawn_Human(Other);
    if(((KFP != none) && KFP.Controller != none) && KFP != Owner)
    {
        KFPlayerController(KFP.Controller).SetPendingInteractionMessage();
    }
}

event UnTouch(Actor Other)
{
    local KFPawn_Human KFP;

    super(Actor).UnTouch(Other);
    KFP = KFPawn_Human(Other);
    if(((KFP != none) && KFP.Controller != none) && KFP != Owner)
    {
        KFPlayerController(KFP.Controller).SetPendingInteractionMessage();
    }
}

function bool GetCanInteract(Pawn User, optional bool bInteractIfTrue)
{
    local KFPawn_Human OwnerPawn, UserPawn;
    local KFPerk CurrentPerk;

    bInteractIfTrue = false;
    OwnerPawn = KFPawn_Human(Owner);
    UserPawn = KFPawn_Human(User);
    if((((OwnerPawn != none) && UserPawn != none) && UserPawn.Controller != none) && OwnerPawn != UserPawn)
    {
        CurrentPerk = OwnerPawn.GetPerk();
        if((CurrentPerk != none) && CurrentPerk.CanInteract(UserPawn))
        {
            if(bInteractIfTrue)
            {
                CurrentPerk.Interact(UserPawn);
                KFPlayerController(UserPawn.Controller).SetPendingInteractionMessage();
            }
            return true;
        }
    }
    return false;
}

simulated function DestroyTrigger()
{
    local KFPawn_Human Toucher;

    foreach TouchingActors(Class'KFPawn_Human', Toucher)
    {
        UnTouch(Toucher);        
    }    
    Destroy();
}

function bool UsedBy(Pawn User)
{
    return GetCanInteract(User, true);
}

defaultproperties
{
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=100
        CollisionRadius=200
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFUsablePerkTrigger.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFUsablePerkTrigger.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=100
        CollisionRadius=200
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFUsablePerkTrigger.CollisionCylinder'
    Components(1)=CollisionCylinder
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bNoDelete=false
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=100
        CollisionRadius=200
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFUsablePerkTrigger.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}