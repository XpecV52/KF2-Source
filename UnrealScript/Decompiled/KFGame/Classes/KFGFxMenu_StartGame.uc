/*******************************************************************************
 * KFGFxMenu_StartGame generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_StartGame extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI)
    config(UI);

const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;
const KFID_ToggleToRun = 172;
const KFID_ClassicPlayerInfo = 173;
const KFID_VOIPMicVolumeMultiplier = 174;
const KFID_GamepadDeadzoneScale = 175;
const KFID_GamepadAccelerationJumpScale = 176;
const KFID_HasTabbedToStore = 177;

var string WhatsNewPS;
var string WhatsNewMS;
var string WhatsNewSteam;
var bool bIsLeader;
var bool bIsInParty;
var bool bSearchingForGame;
var bool bLeaderInServerBrowser;
var bool bLeaderWasInServerBrowser;
var bool bPendingLeaveMenu;
var transient bool AttemptingJoin;
var transient bool bAttemptingServerCreate;
var bool bHarrassedPlayerAboutSharedContent;
var config bool AttemptServerTakeovers;
var transient bool bPauseTryingServers;
var config bool bLogSearchInfo;
var transient bool SearchFinished;
var transient bool bIsPlayGoRun;
var transient int CurrentSearchIndex;
var const string ModeKey;
var const string DifficultyKey;
var const string MapKey;
var const string WhitelistedKey;
var const string InProgressKey;
var const string PermissionsKey;
var const string ServerTypeKey;
var const string GameLengthKey;
var KFGFxStartGameContainer_FindGame FindGameContainer;
var KFGFxStartGameContainer_Options OptionsComponent;
var KFGFxStartContainer_InGameOverview OverviewContainer;
var KFGFxStartContainer_ServerBrowserOverview ServerBrowserOverviewContainer;
var KFGFxStartContainer_NewsImageHolder NewsImageHolderContainer;
var KFGFxMissionObjectivesContainer MissionObjectiveContainer;
var GFxObject CreateGameButton;
var GFxObject MatchMakingButton;
var GFxObject ServerBrowserButton;
var const localized string FindGameString;
var const localized string HostOptionsString;
var const localized string OverviewString;
var const localized string MatchmakingString;
var const localized string CreateMatchString;
var const localized string ServerBrowserString;
var const localized string NewsPageString;
var const localized string GameModeTitle;
var const localized string DifficultyTitle;
var const localized string LengthTitle;
var const localized string MapTitle;
var const localized string MutatorTitle;
var const localized string PermissionsTitle;
var const localized string ServerTypeString;
var const localized string WhiteListedTitle;
var const localized string InfoTitle;
var const localized string InProgressString;
var const localized string LeaveMenuString;
var const localized string CouldNotFindGameTitleString;
var private const localized string CouldNotFindGameDescriptionStringPC;
var private const localized string CouldNotFindGameDescriptionStringOrbis;
var const localized array<localized string> WhiteListedStrings;
var protected const transient name SearchDSName;
var transient KFDataStore_OnlineGameSearch SearchDataStore;
var transient OnlineGameInterface GameInterface;
var array<string> MapStringList;
var transient string MapTakeoverURL;
var transient string PendingResolvedAddress;
var string CurrentPartyLeaderName;
var config float InitialSearchPause;
var config int MaxResultsToTry;
var config int ServerConnectTimeout;
var config int ServerTakeoverTimeout;
var config array<config string> StockMaps;
var transient string LobbyOwnerPassword;
var config string TestLobbyOwnerPassword;
var transient string CurrentConnectMap;

// Export UKFGFxMenu_StartGame::execGetMapList(FFrame&, void* const)
native static function GetMapList(out array<string> MapList, optional int OverrideGameModeIndex, optional bool bStockMapsOnly)
{
    OverrideGameModeIndex = -1;                        
}

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    local DataStoreClient DSClient;

    super.InitializeMenu(InManager);
    SetSeasonalEventClass();
    DSClient = Class'UIInteraction'.static.GetDataStoreClient();
    if(DSClient != none)
    {
        SearchDataStore = KFDataStore_OnlineGameSearch(DSClient.FindDataStore(SearchDSName));
    }
    if(Class'GameEngine'.static.GetOnlineSubsystem() != none)
    {
        GameInterface = Class'GameEngine'.static.GetOnlineSubsystem().GameInterface;
        bIsPlayGoRun = !Class'GameEngine'.static.IsGameFullyInstalled();
        if(bIsPlayGoRun)
        {
            Manager.DelayedOpenPopup(2, 0, Localize("Notifications", "PlayGoBusyTitle", "KFGameConsole"), Localize("Notifications", "PlayGoBusyMessage", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
        }
    }
    setVivoxWordmarkVisibility();
}

function setVivoxWordmarkVisibility()
{
    if((isPC()) && IsMultiplayerGame())
    {
        GetObject("wordmarkVivox").SetVisible(true);        
    }
    else
    {
        GetObject("wordmarkVivox").SetVisible(false);
    }
}

function bool isPC()
{
    return !Class'WorldInfo'.static.IsConsoleBuild();
}

function bool IsMultiplayerGame()
{
    return Outer.GetPC().WorldInfo.NetMode != NM_Standalone;
}

function SetSeasonalEventClass()
{
    local GFxWidgetBinding MyWidgetBinding;

    MyWidgetBinding.WidgetName = 'specialEventContainerMC';
    MyWidgetBinding.WidgetClass = GetSpecialEventClass(Class'KFGameEngine'.static.GetSeasonalEventID());
    SubWidgetBindings[8] = MyWidgetBinding;
}

static function class<KFGFxSpecialEventObjectivesContainer> GetSpecialEventClass(int SpecialEventID)
{
    switch(SpecialEventID)
    {
        case 1:
            return Class'KFGFxSpecialEventObjectivesContainer_Spring2021';
        case 2:
            return Class'KFGFxSpecialEventObjectivesContainer_Summer2020';
        case 3:
            return Class'KFGFXSpecialEventObjectivesContainer_Fall2020';
        case 4:
            return Class'KFGFXSpecialEventObjectivesContainer_Xmas2020';
        default:
            return Class'KFGFxSpecialEventObjectivesContainer';
            break;
    }
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'newsPage':
            if(NewsImageHolderContainer == none)
            {
                NewsImageHolderContainer = KFGFxStartContainer_NewsImageHolder(Widget);
                NewsImageHolderContainer.Initialize(self);
            }
            break;
        case 'missionObjectivesContainerMC':
            if(MissionObjectiveContainer == none)
            {
                MissionObjectiveContainer = KFGFxMissionObjectivesContainer(Widget);
                MissionObjectiveContainer.Initialize(self);
            }
            break;
        case 'dailyContainerMC':
            if(MissionObjectiveContainer.ExpandedObjectiveContainer.DailyObjectiveContainer == none)
            {
                MissionObjectiveContainer.ExpandedObjectiveContainer.DailyObjectiveContainer = KFGFxDailyObjectivesContainer(Widget);
                MissionObjectiveContainer.ExpandedObjectiveContainer.DailyObjectiveContainer.Initialize(self);
            }
            break;
        case 'expandedMissionObjectivesMC':
            if(MissionObjectiveContainer.ExpandedObjectiveContainer == none)
            {
                MissionObjectiveContainer.ExpandedObjectiveContainer = KFGFxExpandedObjectivesContainer(Widget);
                MissionObjectiveContainer.ExpandedObjectiveContainer.Initialize(self);
            }
            break;
        case 'collapsedMissionObjectivesMC':
            if(MissionObjectiveContainer.CollapsedObjectiveContainer == none)
            {
                MissionObjectiveContainer.CollapsedObjectiveContainer = KFGFxCollapsedObjectivesContainer(Widget);
                MissionObjectiveContainer.CollapsedObjectiveContainer.Initialize(self);
            }
            break;
        case 'specialEventContainerMC':
            if(MissionObjectiveContainer.ExpandedObjectiveContainer.SpecialEventsContainer == none)
            {
                MissionObjectiveContainer.ExpandedObjectiveContainer.SpecialEventsContainer = KFGFxSpecialEventObjectivesContainer(Widget);
                MissionObjectiveContainer.ExpandedObjectiveContainer.SpecialEventsContainer.Initialize(self);
            }
            break;
        case 'weeklyContainerMC':
            if(MissionObjectiveContainer.ExpandedObjectiveContainer.WeeklyEventContainer == none)
            {
                MissionObjectiveContainer.ExpandedObjectiveContainer.WeeklyEventContainer = KFGFxWeeklyObjectivesContainer(Widget);
                MissionObjectiveContainer.ExpandedObjectiveContainer.WeeklyEventContainer.Initialize(self);
            }
            break;
        case 'FindGameContainer':
            if(FindGameContainer == none)
            {
                FindGameContainer = KFGFxStartGameContainer_FindGame(Widget);
                FindGameContainer.Initialize(self);
            }
            break;
        case 'gameOptionsContainer':
            if(OptionsComponent == none)
            {
                OptionsComponent = KFGFxStartGameContainer_Options(Widget);
                OptionsComponent.Initialize(self);
            }
            break;
        case 'OverviewContainer':
            if(OverviewContainer == none)
            {
                OverviewContainer = KFGFxStartContainer_InGameOverview(Widget);
                OverviewContainer.Initialize(self);
                SetOverview(true);
            }
            break;
        case 'ServerBrowserOverviewContainer':
            if(ServerBrowserOverviewContainer == none)
            {
                ServerBrowserOverviewContainer = KFGFxStartContainer_ServerBrowserOverview(Widget);
                ServerBrowserOverviewContainer.Initialize(self);
            }
            break;
        case 'MatchMakingButton':
            MatchMakingButton = Widget;
            if(Class'WorldInfo'.static.IsConsoleBuild())
            {
                CheckGameFullyInstalled();
            }
            break;
        case 'CreateGameButton':
            CreateGameButton = Widget;
            if(Class'WorldInfo'.static.IsConsoleBuild())
            {
                CheckGameFullyInstalled();
            }
            break;
        case 'ServerBrowserButton':
            ServerBrowserButton = Widget;
            if(Class'WorldInfo'.static.IsConsoleBuild())
            {
                CheckGameFullyInstalled();
            }
            break;
        default:
            break;
    }
    return true;
}

function string GetCouldNotFindGameDescription()
{
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        return CouldNotFindGameDescriptionStringOrbis;        
    }
    else
    {
        return CouldNotFindGameDescriptionStringPC;
    }
}

function CheckGameFullyInstalled()
{
    if(bIsPlayGoRun)
    {
        if(Class'GameEngine'.static.IsGameFullyInstalled())
        {
            if(MatchMakingButton != none)
            {
                MatchMakingButton.SetBool("enabled", true);
            }
            if(CreateGameButton != none)
            {
                CreateGameButton.SetBool("enabled", true);
            }
            if(ServerBrowserButton != none)
            {
                ServerBrowserButton.SetBool("enabled", true);
            }
            InitializeMenu(Manager);
            ReloadSounds();            
        }
        else
        {
            if(MatchMakingButton != none)
            {
                MatchMakingButton.SetBool("enabled", false);
            }
            if(CreateGameButton != none)
            {
                CreateGameButton.SetBool("enabled", false);
            }
            if(ServerBrowserButton != none)
            {
                ServerBrowserButton.SetBool("enabled", false);
            }
            Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(1, false, 'CheckGameFullyInstalled', self);
        }
    }
}

// Export UKFGFxMenu_StartGame::execReloadSounds(FFrame&, void* const)
native function ReloadSounds();

function SetOverview(optional bool bInitialize)
{
    local UniqueNetId AdminId, MyUID, ZeroId;
    local bool bCurrentlyLeader, bCurrentlyInParty;

    if(OverviewContainer != none)
    {
        OverviewContainer.UpdateOverviewInGame();
    }
    if(OnlineLobby != none)
    {
        MyUID = OnlineLobby.GetMyId();
        OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
        bCurrentlyLeader = MyUID == AdminId && MyUID != ZeroId;
        bCurrentlyInParty = OnlineLobby.IsInLobby();
    }
    if((((bIsLeader != bCurrentlyLeader) || bCurrentlyInParty != bIsInParty) || bInitialize) || bLeaderInServerBrowser != bLeaderWasInServerBrowser)
    {
        bIsLeader = bCurrentlyLeader;
        bIsInParty = bCurrentlyInParty;
        bLeaderWasInServerBrowser = bLeaderInServerBrowser;
        if(Class'WorldInfo'.static.IsMenuLevel())
        {
            if(bIsInParty)
            {
                if(bIsLeader)
                {
                    if(Manager.CurrentMenuIndex == 16)
                    {
                        ShowOverview(false, bIsLeader, Class'WorldInfo'.static.IsMenuLevel(), false);
                        Manager.OpenMenu(16);                        
                    }
                    else
                    {
                        ShowOverview(false, bIsLeader, Class'WorldInfo'.static.IsMenuLevel(), false);
                    }                    
                }
                else
                {
                    ShowOverview(!bIsLeader, bIsLeader, Class'WorldInfo'.static.IsMenuLevel(), bLeaderInServerBrowser);
                }
            }            
        }
        else
        {
            ShowOverview(true, bIsLeader, false, false);
        }
    }
}

function OnPlayerReadiedUp()
{
    local PlayerController PC;

    PC = Outer.GetPC();
    if(bHarrassedPlayerAboutSharedContent)
    {
        return;
    }
    if(((OverviewContainer != none) && OverviewContainer.bContentShared) && PC.WorldInfo.NetMode != NM_Standalone)
    {
        if(Manager.CurrentMenuIndex != 0)
        {
            Manager.OpenMenu(0);
        }
        if(!PC.WorldInfo.IsConsoleBuild())
        {
            OverviewContainer.ActionScriptVoid("showSharedContentList");
        }
    }
    bHarrassedPlayerAboutSharedContent = true;
}

function OneSecondLoop()
{
    SetOverview();
    if(Manager.CurrentMenuIndex != 17)
    {
        UpdateMenu();
    }
    if((OverviewContainer != none) && Manager.CurrentMenu == self)
    {
        OverviewContainer.UpdateSharedContent();
    }
    if(FindGameContainer != none)
    {
        FindGameContainer.CheckNewsState();
    }
}

function byte GetStartMenuState()
{
    return byte(GetInt("menuState"));
}

function string GetMapSource(string MapName)
{
    local KFMapSummary MapData;

    MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName(MapName);
    if(MapData != none)
    {
        return "img://" $ MapData.ScreenshotPathName;        
    }
    else
    {
        MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName("KF-Default");
        if(MapData != none)
        {
            return "img://" $ MapData.ScreenshotPathName;
        }
    }
}

function HandleSteamLobbyLeaderTakeOver(UniqueNetId AdminId)
{
    local bool bClientIsLeader;

    bClientIsLeader = Outer.GetPC().PlayerReplicationInfo.UniqueId == AdminId;
    switch(GetStartMenuState())
    {
        case 7:
            if(bClientIsLeader)
            {
                Manager.OpenMenu(16);
                return;
            }
        default:
            if(bClientIsLeader)
            {
                Manager.SetStartMenuState(0);
                SetInt("externalMenuState", 0);
                return;
            }
            if(!bClientIsLeader)
            {
                SendToOverviewOnChange();
            }
            break;
    }
}

function SendToOverviewOnChange()
{
    Manager.SetStartMenuState(6);
    Manager.OpenMenu(0);
    SetOverview(true);
}

function UpdateMenu()
{
    local UniqueNetId AdminId, LoggedInPlayer;

    if((Class'WorldInfo'.static.IsMenuLevel() && OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
        LoggedInPlayer = OnlineLobby.GetMyId();
        if(LoggedInPlayer == AdminId)
        {
            SendLeaderOptions();            
        }
        else
        {
            ReceiveLeaderOptions();
            CurrentPartyLeaderName = OnlineLobby.GetFriendNickname(AdminId);
            if(CurrentPartyLeaderName != "")
            {
                ServerBrowserOverviewContainer.SetDescriptionString(CurrentPartyLeaderName);
            }
        }
    }
}

function SendLeaderOptions()
{
    if(OptionsComponent != none)
    {
        SetLobbyData(GameLengthKey, string(OptionsComponent.GetLengthIndex()));
        SetLobbyData(DifficultyKey, string(OptionsComponent.GetDifficultyIndex()));
        SetLobbyData(MapKey, OptionsComponent.GetMapName());
        SetLobbyData(ModeKey, string(Manager.GetModeIndex()));
        SetLobbyData(PermissionsKey, string(OptionsComponent.GetPrivacyIndex()));
    }
}

function ReceiveLeaderOptions()
{
    local string OptionString, DisplayMapName, MapSource;
    local int OptionIndex;

    OptionIndex = int(OnlineLobby.GetLobbyData(0, ModeKey));
    OverviewContainer.UpdateGameMode(Class'KFCommon_LocalizedStrings'.static.GetGameModeString(OptionIndex));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, GameLengthKey));
    OverviewContainer.UpdateLength(Class'KFCommon_LocalizedStrings'.static.GetLengthString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, ServerTypeKey));
    OverviewContainer.UpdateServerType(Class'KFCommon_LocalizedStrings'.static.GetServerTypeString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, DifficultyKey));
    OverviewContainer.UpdateDifficulty(Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(OptionIndex)));
    OptionString = OnlineLobby.GetLobbyData(0, MapKey);
    DisplayMapName = Class'KFCommon_LocalizedStrings'.static.GetFriendlyMapName(OptionString);
    MapSource = GetMapSource(OptionString);
    OverviewContainer.UpdateMap(DisplayMapName, MapSource);
    OptionIndex = int(OnlineLobby.GetLobbyData(0, PermissionsKey));
    OverviewContainer.UpdatePrivacy(Class'KFCommon_LocalizedStrings'.static.GetPermissionString(float(OptionIndex)));
}

function ApproveMatchMakingLeave()
{
    if(OptionsComponent != none)
    {
        bPendingLeaveMenu = false;
        if((OnlineLobby != none) && OnlineLobby.IsInLobby())
        {
            OnlineLobby.QuitLobby();
        }
        CancelGameSearch();
        SetInt("externalMenuState", 0);
        UpdateStartMenuState();
    }
}

function GoToServerBrowser()
{
    Manager.OpenMenu(16);
}

function CancelLeaveMenu()
{
    Outer.GetPC().SetTimer(0.5, false, 'ClearLeaveMenuFlag', self);
}

function ClearLeaveMenuFlag()
{
    bPendingLeaveMenu = false;
}

function UpdateStartMenuState()
{
    local byte CurrentMenuState;

    if(Manager != none)
    {
        CurrentMenuState = GetStartMenuState();
        Manager.SetStartMenuState(CurrentMenuState);
        switch(CurrentMenuState)
        {
            case 2:
                OptionsComponent.bShowLengthNoPref = false;
                OptionsComponent.InitializeGameOptions();
                break;
            case 1:
                OptionsComponent.bShowLengthNoPref = true;
                OptionsComponent.InitializeGameOptions();
                OptionsComponent.PrivacyChanged(0);
                break;
            case 4:
                OptionsComponent.bShowLengthNoPref = false;
                OptionsComponent.InitializeGameOptions();
                break;
            default:
                break;
        }
    }
    else
    {
    }
}

function ProceedToTutorial()
{
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        if((OnlineLobby != none) && OnlineLobby.IsInLobby())
        {
            OnlineLobby.QuitLobby();
        }
    }
    CancelGameSearch();
    Outer.ConsoleCommand("open KF-EvacuationPoint?game=KFGameContent.KFGameInfo_Tutorial");
}

function ProceedToSoloMenu()
{
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        if((OnlineLobby != none) && OnlineLobby.IsInLobby())
        {
            OnlineLobby.QuitLobby();
        }
    }
    Manager.SoloGameMenuOpened();
    CancelGameSearch();
    SetInt("externalMenuState", 4);
}

function PostPartyDisbandTutorial()
{
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        if((OnlineLobby != none) && OnlineLobby.IsInLobby())
        {
            OnlineLobby.QuitLobby();
        }
    }
    CancelGameSearch();
    Manager.DelayedOpenPopup(0, 0, Class'KFCommon_LocalizedStrings'.default.ProceedToTutorialString, Class'KFCommon_LocalizedStrings'.default.ProceedToTutorialDescriptionString, Class'KFCommon_LocalizedStrings'.default.ConfirmString, Class'KFCommon_LocalizedStrings'.default.CancelString, ProceedToTutorial);
}

function Callback_OnWhatsNewClicked(int Index, string URL)
{
    local OnlineSubsystem OnlineSub;
    local int I;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        if(Class'WorldInfo'.static.IsConsoleBuild())
        {
            if(Class'WorldInfo'.static.IsConsoleBuild(8) && !OnlineSub.IsGameOwned())
            {
                Manager.OnBuyGamePressed();
                return;
            }
            if(!FindGameContainer.PS4ActiveWhatsNewItems[Index].bPlayfabItemPairedUp)
            {
                LogInternal(((((((("(" $ string(Name)) $ ") KFGFxMenu_StartGame::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ " Product ID: ") @ FindGameContainer.PS4ActiveWhatsNewItems[Index].PSNProductId) @ " does not have a playfab item paired up. Opening up directly store.");
                if(Class'WorldInfo'.static.IsConsoleBuild(8))
                {
                    OnlineSub.OpenMarketPlaceSearchBySignedOfferId(FindGameContainer.PS4ActiveWhatsNewItems[Index].PSNProductId);                    
                }
                else
                {
                    OnlineSub.PlayerInterfaceEx.ShowProductDetailsUI(byte(Outer.GetLP().ControllerId), FindGameContainer.PS4ActiveWhatsNewItems[Index].PSNProductId);
                }                
            }
            else
            {
                if(FindGameContainer.PS4ActiveWhatsNewItems[Index].PSNProductId != "")
                {
                    I = 0;
                    J0x35B:

                    if(I < OnlineSub.ItemPropertiesList.Length)
                    {
                        if(OnlineSub.ItemPropertiesList[I].ProductID == FindGameContainer.PS4ActiveWhatsNewItems[Index].PSNProductId)
                        {
                            if(OnlineSub.ItemPropertiesList[I].SignedOfferId != "")
                            {
                                if(Class'WorldInfo'.static.IsConsoleBuild(8))
                                {
                                    OnlineSub.OpenMarketPlaceSearch(OnlineSub.ItemPropertiesList[I]);                                    
                                }
                                else
                                {
                                    OnlineSub.PlayerInterfaceEx.ShowProductDetailsUI(byte(Outer.GetLP().ControllerId), OnlineSub.ItemPropertiesList[I].ProductID);
                                }                                
                            }
                            else
                            {
                                WarnInternal("No PSN signed offer ID for item with product ID" @ FindGameContainer.PS4ActiveWhatsNewItems[Index].PSNProductId);
                            }
                            goto J0x5DD;
                        }
                        ++ I;
                        goto J0x35B;
                    }
                    J0x5DD:
                    
                }
                else
                {
                    if(FindGameContainer.PS4ActiveWhatsNewItems[Index].RedirectURL != "")
                    {
                        OnlineSub.OpenURL(FindGameContainer.PS4ActiveWhatsNewItems[Index].RedirectURL);
                    }
                }
            }            
        }
        else
        {
            OnlineSub.OpenURL(URL);
        }
    }
}

function Callback_NewsButtonPressed()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub == none)
    {
        return;
    }
    if(Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        OnlineSub.OpenURL(default.WhatsNewPS);        
    }
    else
    {
        if(Class'WorldInfo'.static.IsConsoleBuild(9))
        {
            OnlineSub.OpenURL(default.WhatsNewMS);            
        }
        else
        {
            OnlineSub.OpenURL(default.WhatsNewSteam);
        }
    }
}

function Callback_SoloButtonPressed()
{
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        Manager.DelayedOpenPopup(0, 0, Class'KFCommon_LocalizedStrings'.default.StartOfflineGameString, Class'KFCommon_LocalizedStrings'.default.StartOfflineGameDescriptionString, Class'KFCommon_LocalizedStrings'.default.DisbandPartyString, Class'KFCommon_LocalizedStrings'.default.CancelString, ProceedToSoloMenu);        
    }
    else
    {
        ProceedToSoloMenu();
    }
}

function Callback_StartTutorial()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    CancelGameSearch();
    if(!OnlineSub.IsGameOwned() && Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        if(OnlineSub.CanCheckFreeTrialState() && !OnlineSub.IsFreeTrialPeriodActive())
        {
            Manager.HandleFreeTrialError(2);
            return;
        }
        if(!OnlineSub.CanCheckFreeTrialState())
        {
            Manager.HandleFreeTrialError(1);
            return;
        }
    }
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        Manager.DelayedOpenPopup(0, 0, Class'KFCommon_LocalizedStrings'.default.StartOfflineGameString, Class'KFCommon_LocalizedStrings'.default.StartOfflineGameDescriptionString, Class'KFCommon_LocalizedStrings'.default.DisbandPartyString, Class'KFCommon_LocalizedStrings'.default.CancelString, PostPartyDisbandTutorial);        
    }
    else
    {
        Manager.DelayedOpenPopup(0, 0, Class'KFCommon_LocalizedStrings'.default.ProceedToTutorialString, Class'KFCommon_LocalizedStrings'.default.ProceedToTutorialDescriptionString, Class'KFCommon_LocalizedStrings'.default.ConfirmString, Class'KFCommon_LocalizedStrings'.default.CancelString, ProceedToTutorial);
    }
}

function Callback_OnWebLinkClicked(string WebsiteLink)
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        OnlineSub.OpenURL(WebsiteLink);
    }
}

function Callback_CancelSearch()
{
    if(OptionsComponent != none)
    {
        CancelGameSearch();
        Outer.GetPC().WorldInfo.CancelPendingMapChange();
        KFGameEngine(Class'Engine'.static.GetEngine()).CancelPendingLevel();
    }
}

function Callback_OptionListOpened(string ListName, int OptionIndex)
{
    local string MessageString;

    if(OptionsComponent.bIsSoloGame && ListName == "modeList")
    {
        OptionIndex = ((OptionIndex >= 2) ? OptionIndex + 1 : OptionIndex);
    }
    if((ListName == "mapList") || Outer.GetPC().WorldInfo.IsConsoleBuild() && ListName == "regionList")
    {
        return;
    }
    if(OptionIndex == -1)
    {
        return;
    }
    MessageString = Localize("StartMenuHelperText", ListName $ string(OptionIndex), "KFGame");
    if(OptionsComponent != none)
    {
        OptionsComponent.SetHelpText(MessageString);
    }
}

function Callback_InGamePermissionChange(int Index)
{
    if(OnlineLobby != none)
    {
        if(OnlineLobby.SetVisibility(Index) && OptionsComponent != none)
        {
            OptionsComponent.PrivacyChanged(Index);
        }
    }
}

function Callback_OpenMatchMaking()
{
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        KFPlayerController(Outer.GetPC()).StartLogin(ProceedToMatchMaking, true);        
    }
    else
    {
        ProceedToMatchMaking();
    }
}

function Callback_OpenCreateGame()
{
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        KFPlayerController(Outer.GetPC()).StartLogin(ProceedToCreateGame, true);        
    }
    else
    {
        ProceedToCreateGame();
    }
}

function ProceedToMatchMaking()
{
    SetInt("externalMenuState", 1);
}

function ProceedToCreateGame()
{
    SetInt("externalMenuState", 2);
}

function Callback_OpenServerBrowser()
{
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {        
    }
    else
    {
        Manager.OpenMenu(16);
    }
}

function OnCanPlayOnlineCheckComplete(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevel, bool bDiffersFromHint)
{
    if(Privilege == 0)
    {
        Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.ClearPrivilegeLevelCheckedDelegate(OnCanPlayOnlineCheckComplete);
        Manager.UnloadCurrentPopup();
        if(PrivilegeLevel == 2)
        {
            Manager.OpenMenu(16);            
        }
        else
        {
            Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterfaceEx.UpsellPremiumOnlineService();
        }
    }
}

function Callback_StartMenuRequestReinit()
{
    if(OptionsComponent != none)
    {
        OptionsComponent.bShowLengthNoPref = GetStartMenuState() == 1;
        OptionsComponent.InitializeGameOptions();
        OptionsComponent.SetOptions(true);
    }
}

function Callback_StartMenuChange()
{
    UpdateStartMenuState();
}

function Callback_Mode(int Index)
{
    OptionsComponent.ModeChanged(Index);
}

function Callback_Length(int Index)
{
    OptionsComponent.LengthChanged(Index);
}

function Callback_Difficulty(int Index)
{
    OptionsComponent.DifficultyChanged(Index);
}

function Callback_Privacy(int Index)
{
    OptionsComponent.PrivacyChanged(Index);
}

function Callback_MapSelection(string MapKeyString)
{
    local string MapName;
    local int MapIndex;

    MapIndex = MapStringList.Find(MapKeyString;
    if(MapIndex == -1)
    {
        MapName = "";        
    }
    else
    {
        MapName = MapKeyString;
    }
    OptionsComponent.MapChanged(MapName);
}

function Callback_Region(int RegionIndex)
{
    OptionsComponent.SetRegionIndex(RegionIndex);
}

function SetLobbyData(string KeyName, string ValueData)
{
    OnlineLobby.SetLobbyData(KeyName, ValueData);
}

function string MakeMapURL(KFGFxStartGameContainer_Options InOptionsComponent)
{
    local string MapName;
    local int LengthIndex, ModeIndex;

    ModeIndex = InOptionsComponent.GetNormalizedGameModeIndex(Manager.GetModeIndex(true));
    LengthIndex = InOptionsComponent.GetLengthIndex();
    MapName = InOptionsComponent.GetMapName();
    if((MapName == "") || MapStringList.Find(MapName == -1)
    {
        if((CurrentConnectMap != "") && MapStringList.Find(CurrentConnectMap != -1)
        {
            MapName = CurrentConnectMap;            
        }
        else
        {
            if(Class'WorldInfo'.static.IsConsoleBuild())
            {
                if(Class'GameEngine'.static.IsGameFullyInstalled())
                {
                    MapName = MapStringList[Rand(MapStringList.Length)];                    
                }
                else
                {
                    MapName = "KF-EvacuationPoint";
                }                
            }
            else
            {
                if(ModeIndex == 4)
                {
                    MapName = "KF-SteamFortress";                    
                }
                else
                {
                    MapName = "KF-BioticsLab";
                }
            }
        }
    }
    return (((((MapName $ "?Game=") $ Class'KFGameInfo'.static.GetGameModeClassFromNum(ModeIndex)) $ "?Difficulty=") $ string(Class'KFGameDifficultyInfo'.static.GetDifficultyValue(byte(InOptionsComponent.GetDifficultyIndex())))) $ "?GameLength=") $ string(LengthIndex);
}

// Export UKFGFxMenu_StartGame::execGetSearchComplete(FFrame&, void* const)
native function bool GetSearchComplete(KFOnlineGameSearch GameSearch);

// Export UKFGFxMenu_StartGame::execTryNextServer(FFrame&, void* const)
native function TryNextServer();

// Export UKFGFxMenu_StartGame::execHandleSearchOver(FFrame&, void* const)
native function HandleSearchOver();

event OpenNotFoundPopup()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Outer.GetPC());
    LogInternal("KFGFxMenu_StartGame.OpenNotFoundPopup: No servers found, giving up.");
    KFPC.MyGFxManager.DelayedOpenPopup(2, 0, CouldNotFindGameTitleString, GetCouldNotFindGameDescription(), Class'KFCommon_LocalizedStrings'.default.OKString);
}

event int GetLobbySize()
{
    local ActiveLobbyInfo LobbyInfo;

    if((OnlineLobby == none) || !OnlineLobby.GetCurrentLobby(LobbyInfo))
    {
        return 0;        
    }
    else
    {
        return LobbyInfo.Members.Length;
    }
}

function OnFindGameServerComplete(bool bWasSuccessful)
{
    if(bWasSuccessful && !bPauseTryingServers)
    {
        if(bAttemptingServerCreate && Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild())
        {
            RandomizeSearchResults(SearchDataStore.GetActiveGameSearch());            
        }
        else
        {
            if(Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild())
            {
                SortServers(SearchDataStore.GetActiveGameSearch());                
            }
            else
            {
                SortLastEntry(SearchDataStore.GetActiveGameSearch());
            }
        }
    }
    TryNextServer();
}

// Export UKFGFxMenu_StartGame::execSpaceAvailable(FFrame&, void* const)
native function bool SpaceAvailable(const OnlineGameSettings Settings);

// Export UKFGFxMenu_StartGame::execMapGood(FFrame&, void* const)
native function bool MapGood(const OnlineGameSettings Settings, optional out string CurrentMap);

// Export UKFGFxMenu_StartGame::execSortLastEntry(FFrame&, void* const)
native function SortLastEntry(OnlineGameSearch Search);

// Export UKFGFxMenu_StartGame::execSortServers(FFrame&, void* const)
native function SortServers(OnlineGameSearch Search);

// Export UKFGFxMenu_StartGame::execRandomizeSearchResults(FFrame&, void* const)
native function RandomizeSearchResults(OnlineGameSearch Search);

function string BuildJoinFiltersRequestURL()
{
    local string FiltersURL;
    local int GameMode, GameDifficulty;

    GameMode = Manager.GetModeIndex();
    GameDifficulty = OptionsComponent.GetDifficulty();
    if(GameMode >= 0)
    {        
        FiltersURL $= ("?Game=" $ Class'KFGameInfo'.static.GetGameModeClassFromNum(GameMode));
    }
    if(GameDifficulty >= 0)
    {        
        FiltersURL $= ("?Difficulty=" $ string(GameDifficulty));
    }
    if(OptionsComponent.bLengthFilterSet)
    {        
        FiltersURL $= ("?GameLength=" $ string(OptionsComponent.LengthFilter));
    }
    return FiltersURL;
}

function string BuildTakeoverURL(optional out string Password)
{
    local string TakeoverURL;

    TakeoverURL = MakeMapURL(OptionsComponent);
    if(Len(Password) > 0)
    {        
        TakeoverURL $= ((("?gamepassword=" $ Password) $ "?password=") $ Password);
    }    
    TakeoverURL $= ("?Private=" $ string(OptionsComponent.GetPrivacyIndex()));
    if(Class'WorldInfo'.static.IsConsoleBuild() && OptionsComponent.GetPrivacyIndex() == 1)
    {        
        TakeoverURL $= "?bJoinViaInvite";
    }
    return TakeoverURL $ OnlineLobby.GetLobbyURLString();
}

// Export UKFGFxMenu_StartGame::execSecureTakeover(FFrame&, void* const)
private native final function SecureTakeover(const out string Address, const string TakeoverURL);

function OnJoinGameComplete(name SessionName, bool bSuccessful)
{
    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    }
    if(!bSuccessful)
    {
        AttemptingJoin = false;
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: join online game failed completion for server index" @ string(CurrentSearchIndex));
        }
        TryNextServer();
        return;
    }
    if(GameInterface.GetResolvedConnectString(SessionName, PendingResolvedAddress))
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: OnJoinGameComplete called for server index" @ string(CurrentSearchIndex));
        }
        KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
        SetServerConnectGiveUpTimer(OptionsComponent.GetMakeNewServer());
        if(OptionsComponent.GetMakeNewServer())
        {
            if(bLogSearchInfo)
            {
                LogInternal(("KFGFxMenu_StartGame.OnJoinGameComplete: servertakeover" @ PendingResolvedAddress) @ (BuildTakeoverURL(LobbyOwnerPassword)));
            }
            SecureTakeover(PendingResolvedAddress, BuildTakeoverURL(LobbyOwnerPassword));            
        }
        else
        {            
            Outer.GetPC().ConsoleCommand((("open" @ PendingResolvedAddress) $ (BuildJoinFiltersRequestURL())) $ OnlineLobby.GetLobbyURLString());
        }        
    }
    else
    {
        AttemptingJoin = false;
        LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: unable to resolve server address, bLogSearchInfo");
        TryNextServer();
    }
}

function ConnectToPlayfabServer(string ServerIP)
{
    local string OpenCommand;
    local bool bInParty;

    OpenCommand = ((bAttemptingServerCreate) ? "servertakeover" : "open");    
    OpenCommand @= ServerIP;
    bInParty = ((OnlineLobby != none) && OnlineLobby.IsInLobby()) && OnlineLobby.IsLobbyOwner();
    if(bInParty)
    {
        PendingResolvedAddress = ServerIP;
    }
    if(bAttemptingServerCreate)
    {
        if(Class'WorldInfo'.static.IsEOSBuild())
        {            
            OpenCommand @= (BuildTakeoverURL(LobbyOwnerPassword));            
        }
        else
        {            
            OpenCommand @= (BuildTakeoverURL());
        }        
    }
    else
    {
        if(bInParty)
        {            
            OpenCommand $= OnlineLobby.GetLobbyURLString();
        }
    }
    if(!bAttemptingServerCreate)
    {        
        OpenCommand $= (BuildJoinFiltersRequestURL());
    }
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(float(((bAttemptingServerCreate) ? 8 : ServerConnectTimeout)), false, 'ServerConnectGiveUp', self);    
    OpenCommand $= ("?PlayfabPlayerId=" $ Class'GameEngine'.static.GetPlayfabInterface().CachedPlayfabId);
    LogInternal("Going to connect with URL:" @ OpenCommand);
    Outer.ConsoleCommand(OpenCommand);
}

event SetServerConnectGiveUpTimer(bool ServerTakover)
{
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(float(((ServerTakover) ? ServerTakeoverTimeout : ServerConnectTimeout)), false, 'ServerConnectGiveUp', self);
}

event AddJoinGameCompleteDelegate(OnlineGameSearch LatestGameSearch)
{
    if((Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build()) || Class'WorldInfo'.static.IsEOSBuild())
    {
        if(LatestGameSearch.Results[CurrentSearchIndex].GameSettings.JoinString == "")
        {
            AttemptingJoin = false;
            TryNextServer();            
        }
        else
        {
            ConnectToPlayfabServer(LatestGameSearch.Results[CurrentSearchIndex].GameSettings.JoinString);
        }        
    }
    else
    {
        GameInterface.AddJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
        GameInterface.JoinOnlineGame(0, 'Game', LatestGameSearch.Results[CurrentSearchIndex]);
    }
}

function ServerConnectGiveUp()
{
    if(bLogSearchInfo)
    {
        LogInternal("KFGFxMenu_StartGame.ServerConnectGiveUp: ServerConnectGiveUp");
    }
    KFGameEngine(Class'KFGameEngine'.static.GetEngine()).KillPendingServerConnection();
}

function OnOpen()
{
    if(Manager != none)
    {
        Manager.SetStartMenuState(GetStartMenuState());
    }
    if(MissionObjectiveContainer != none)
    {
        MissionObjectiveContainer.Refresh(true);
    }
}

function OnServerTakeoverResponseRecieved()
{
    LogInternal(string(GetFuncName()));
    if(Class'WorldInfo'.static.IsEOSBuild())
    {
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.ClearTimer('ServerConnectGiveUp', self);
    }
}

function bool OnHandshakeComplete(bool bSuccess, string Description, out int SuppressPasswordRetry)
{
    if(bLogSearchInfo)
    {
        LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete");
    }
    AttemptingJoin = false;
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.ClearTimer('ServerConnectGiveUp', self);
    if(bSuccess)
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete: LobbyJoinServer" @ PendingResolvedAddress);
        }
        if(Class'WorldInfo'.static.IsConsoleBuild())
        {
            if(((OnlineLobby != none) && OnlineLobby.IsInLobby()) && OnlineLobby.IsLobbyOwner())
            {
                OnlineLobby.LobbyJoinServer(PendingResolvedAddress);
            }            
        }
        else
        {
            if(Len(LobbyOwnerPassword) > 0)
            {
                OnlineLobby.SetServerPassword(LobbyOwnerPassword);
            }
            OnlineLobby.LobbyJoinServer(PendingResolvedAddress);
        }
        PendingResolvedAddress = "";        
    }
    else
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete:  TryNextServer");
        }
        if(!Class'WorldInfo'.static.IsConsoleBuild())
        {
            GameInterface.DestroyOnlineGame('Game');
        }
        PendingResolvedAddress = "";
        TryNextServer();
    }
    return true;
}

event OnClose()
{
    if(OverviewContainer != none)
    {
        OverviewContainer.ActionScriptVoid("hideSharedContentList");
    }
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
        GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    }
    Manager.CachedProfile.Save(byte(Outer.GetLP().ControllerId));
    if((Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild()) && !Class'WorldInfo'.static.IsE3Build())
    {
        Class'GameEngine'.static.GetPlayfabInterface().ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
    }
}

function AddLobbyFilter(out array<LobbyFilter> Filters, bool bIsSet, string Key, coerce string Val, bool bNumeric)
{
    local LobbyFilter Filter;

    if(bIsSet)
    {
        Filter.Key = Key;
        Filter.Value = Val;
        Filter.Operator = 0;
        Filter.bNumeric = bNumeric;
        Filters.AddItem(Filter;
    }
}

function BuildServerFilters(OnlineGameInterface GameInterfaceSteam, KFGFxStartGameContainer_Options Options, OnlineGameSearch Search)
{
    local int GameMode, GameDifficulty, GameLength;
    local string GameTagFilters;
    local ActiveLobbyInfo LobbyInfo;

    Search.ClearServerFilters();
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        Search.AddGametagFilter(GameTagFilters, 'Region', Class'GameEngine'.static.GetPlayfabInterface().CurrRegionName);        
    }
    else
    {
        Search.AddServerFilter("version_match", string(Class'KFGameEngine'.static.GetKFGameVersion()));
        Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bServerExiled', 0);
    }
    if(OptionsComponent.GetMakeNewServer() || bAttemptingServerCreate)
    {
        Search.AddGametagFilter(GameTagFilters, 'bAvailableForTakeover', "1");
        Search.AddGametagFilter(GameTagFilters, 'bRequiresPassword', "0");        
    }
    else
    {
        if(((OnlineLobby != none) && OnlineLobby.GetCurrentLobby(LobbyInfo)) && LobbyInfo.Members.Length >= 6)
        {
            Search.AddServerFilter("noplayers", "");            
        }
        else
        {
            Search.AddServerFilter("notfull", "");
        }
        GameMode = Manager.GetModeIndex();
        if(GameMode >= 0)
        {
            Search.AddGametagFilter(GameTagFilters, 'Mode', string(GameMode));
        }
        if(ShouldUseDifficultyFilter(GameMode))
        {
            GameDifficulty = OptionsComponent.GetDifficulty();
            if(GameDifficulty >= 0)
            {
                Search.AddGametagFilter(GameTagFilters, 'Difficulty', string(GameDifficulty));
            }
        }
        if(ShouldUseLengthFilter(GameMode))
        {
            GameLength = OptionsComponent.GetGameLength();
            if(GameLength >= 0)
            {
                Search.AddGametagFilter(GameTagFilters, 'NumWaves', string(GameLength));
            }
        }
        Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bRequiresPassword', 0);
        Search.TestAddBoolGametagFilter(GameTagFilters, false, 'bInProgress', 0);
        if(!Class'WorldInfo'.static.IsConsoleBuild())
        {
            Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bCustom', 0);
            Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bUsesStats', 1);
        }
    }
    if(Len(GameTagFilters) > 0)
    {
        Search.AddServerFilter("gametagsand", GameTagFilters);
    }
    if(Search.MasterServerSearchKeys.Length > 1)
    {
        Search.AddServerFilter("and", string(Search.MasterServerSearchKeys.Length), 0);
    }
}

function bool ShouldUseDifficultyFilter(int GameModeIndex)
{
    switch(GameModeIndex)
    {
        case 1:
            return false;
        default:
            return true;
            break;
    }
}

function bool ShouldUseLengthFilter(int GameModeIndex)
{
    switch(GameModeIndex)
    {
        case 1:
        case 3:
        case 4:
            return false;
        default:
            return true;
            break;
    }
}

function Callback_StartGame()
{
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        Manager.DelayedOpenPopup(0, 0, Class'KFCommon_LocalizedStrings'.default.StartOfflineGameString, Class'KFCommon_LocalizedStrings'.default.StartOfflineGameDescriptionString, Class'KFCommon_LocalizedStrings'.default.DisbandPartyString, Class'KFCommon_LocalizedStrings'.default.CancelString, Callback_StartOfflineGame);        
    }
    else
    {
        Callback_StartOfflineGame();
    }
}

function Callback_StartOfflineGame()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if((OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        OnlineLobby.QuitLobby();
    }
    if(!OnlineSub.IsGameOwned() && Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        if(OnlineSub.CanCheckFreeTrialState() && !OnlineSub.IsFreeTrialPeriodActive())
        {
            Manager.HandleFreeTrialError(2);
            return;
        }
        if(!OnlineSub.CanCheckFreeTrialState())
        {
            Manager.HandleFreeTrialError(1);
            return;
        }
    }
    Outer.ConsoleCommand("open" @ (MakeMapURL(OptionsComponent)));
}

event StartOnlineGame()
{
    OptionsComponent.UpdateFilters();
    GameInterface.SetMatchmakingTypeMode(2);
    CurrentSearchIndex = 0;
    if(Class'WorldInfo'.static.IsConsoleBuild() && OptionsComponent.GetPrivacyIndex() == 1)
    {
        bAttemptingServerCreate = true;
    }
    BuildServerFilters(GameInterface, OptionsComponent, SearchDataStore.GetCurrentGameSearch());
    SearchDataStore.GetCurrentGameSearch().MaxSearchResults = MaxResultsToTry;
    if((Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build()) || Class'WorldInfo'.static.IsEOSBuild())
    {
        AttemptingJoin = false;
        Class'GameEngine'.static.GetPlayfabInterface().AddFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);        
    }
    else
    {
        GameInterface.AddFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
    }
    if(Class'WorldInfo'.static.IsEOSBuild())
    {
        SearchFinished = false;
    }
    if(!SearchDataStore.SubmitGameSearch(byte(Class'UIInteraction'.static.GetPlayerControllerId(0)), false))
    {
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
        if((Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build()) || Class'WorldInfo'.static.IsEOSBuild())
        {
        }        
    }
    else
    {
        bPauseTryingServers = true;
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(InitialSearchPause, false, 'UnpauseTryingServers', self);
        bSearchingForGame = true;
        OptionsComponent.SetSearching(bSearchingForGame);
    }
}

function ShowServerTakeoverPasswordPrompt()
{
    Manager.DelayedOpenPopup(4, 0, Class'KFCommon_LocalizedStrings'.default.SetTakeoverServerPasswordTitle, "", Class'KFCommon_LocalizedStrings'.default.ConfirmString, Class'KFCommon_LocalizedStrings'.default.CancelString, OnSetTakoverServerPassword);
}

function OnSetTakoverServerPassword()
{
    local string Password;

    Password = KFGFxPopup_InputPrompt(Manager.CurrentPopup).PlayerInputString;
    LobbyOwnerPassword = Password;
    StartOnlineGame();
}

// Export UKFGFxMenu_StartGame::execGenerateRandomPassword(FFrame&, void* const)
native function string GenerateRandomPassword();

function Callback_StartOnlineGame()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(!OnlineSub.IsGameOwned() && Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        if(OnlineSub.CanCheckFreeTrialState() && !OnlineSub.IsFreeTrialPeriodActive())
        {
            Manager.HandleFreeTrialError(2);
            return;
        }
        if(!OnlineSub.CanCheckFreeTrialState())
        {
            Manager.HandleFreeTrialError(1);
            return;
        }
    }
    if(Class'KFGameEngine'.static.IsFreeConsolePlayOver())
    {
        Manager.DelayedOpenPopup(0, 0, "", Class'KFCommon_LocalizedStrings'.default.FreeConsolePlayOverString, Class'KFCommon_LocalizedStrings'.default.BuyGameString, Class'KFCommon_LocalizedStrings'.default.OKString, OnBuyGamePressed);
        return;
    }
    bAttemptingServerCreate = false;
    StartOnlineGame();
}

function Callback_CreateOnlineGame()
{
    local OnlineSubsystem OnlineSub;

    CancelGameSearch();
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(!OnlineSub.IsGameOwned() && Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        if(OnlineSub.CanCheckFreeTrialState() && !OnlineSub.IsFreeTrialPeriodActive())
        {
            Manager.HandleFreeTrialError(2);
            return;
        }
        if(!OnlineSub.CanCheckFreeTrialState())
        {
            Manager.HandleFreeTrialError(1);
            return;
        }
    }
    if(Class'KFGameEngine'.static.IsFreeConsolePlayOver())
    {
        Manager.DelayedOpenPopup(0, 0, "", Class'KFCommon_LocalizedStrings'.default.FreeConsolePlayOverString, Class'KFCommon_LocalizedStrings'.default.BuyGameString, Class'KFCommon_LocalizedStrings'.default.OKString, OnBuyGamePressed);
        return;
    }
    LobbyOwnerPassword = "";
    bAttemptingServerCreate = true;
    if((OptionsComponent.GetPrivacyIndex() == 1) && !Class'WorldInfo'.static.IsConsoleBuild())
    {
        ShowServerTakeoverPasswordPrompt();
        return;        
    }
    else
    {
        StartOnlineGame();
    }
}

function OnBuyGamePressed()
{
    local OnlineSubsystem OnlineSub;

    if(Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        OnlineSub.OpenGameStorePage();
    }
}

function UnpauseTryingServers()
{
    bPauseTryingServers = false;
    if(bAttemptingServerCreate)
    {
        RandomizeSearchResults(SearchDataStore.GetActiveGameSearch());        
    }
    else
    {
        SortServers(SearchDataStore.GetActiveGameSearch());
    }
    TryNextServer();
}

event CancelGameSearch()
{
    local KFOnlineGameSearch ActiveGameSearch;

    ActiveGameSearch = KFOnlineGameSearch(SearchDataStore.GetActiveGameSearch());
    if(ActiveGameSearch != none)
    {
        if((Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild()) && !Class'WorldInfo'.static.IsE3Build())
        {
            Class'GameEngine'.static.GetPlayfabInterface().CancelGameSearch();
            OnCancelSearchComplete(true);            
        }
        else
        {
            GameInterface.AddCancelFindOnlineGamesCompleteDelegate(OnCancelSearchComplete);
            GameInterface.CancelFindOnlineGames();
        }        
    }
    else
    {
        OnCancelSearchComplete(false);
    }
    OptionsComponent.SetHelpText("");
}

function OnCancelSearchComplete(bool bWasSuccessful)
{
    bSearchingForGame = false;
    OptionsComponent.SetSearching(bSearchingForGame);
    Manager.SetSearchingForMatch(bSearchingForGame);
}

event int GetGameModeIndex()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(Class'WorldInfo'.static.GetWorldInfo().GRI);
    if(Manager != none)
    {
        return Manager.GetModeIndex();        
    }
    else
    {
        if(KFGRI != none)
        {
            return Class'KFGameInfo'.static.GetGameModeIndexFromName(string(KFGRI.GameClass.Name));
        }
    }
    return 0;
}

function ShowOverview(bool bShowOverview, bool bLeader, bool bInMainMenu, bool bhostInServerBrowser)
{
    if(bShowOverview)
    {
        if(bInMainMenu)
        {
            if(!bLeader)
            {
                if(bhostInServerBrowser)
                {
                    SetInt("externalMenuState", 7);                    
                }
                else
                {
                    SetInt("externalMenuState", 6);
                }
            }            
        }
        else
        {
            SetInt("externalMenuState", 6);
        }
    }
}

function OnPartyLeave()
{
    SetInt("externalMenuState", 0);
}

defaultproperties
{
    WhatsNewPS="https://www.killingfloor2.com/psnews"
    WhatsNewMS="https://www.killingfloor2.com/xboxnews"
    WhatsNewSteam="https://www.killingfloor2.com/pcnews"
    ModeKey="ModeKey"
    DifficultyKey="DifficultyKey"
    MapKey="MapKey"
    WhitelistedKey="WhitelistedKey"
    InProgressKey="InProgress"
    PermissionsKey="PermissionsKey"
    ServerTypeKey="ServerTypeKey"
    GameLengthKey="GameLengthKey"
    FindGameString="HOME"
    MatchmakingString="FIND A MATCH"
    CreateMatchString="CREATE MATCH"
    ServerBrowserString="Browse Servers"
    NewsPageString="News"
    GameModeTitle="GAME MODE"
    DifficultyTitle="DIFFICULTY"
    LengthTitle="LENGTH"
    MapTitle="STARTING MAP"
    MutatorTitle="MUTATORS"
    PermissionsTitle="PERMISSIONS"
    ServerTypeString="SERVER TYPE"
    WhiteListedTitle="STATS ENABLED"
    InfoTitle="INFORMATION"
    InProgressString="IN PROGRESS"
    LeaveMenuString="Leaving matchmaking will disband your party. Go to server browser instead?"
    CouldNotFindGameTitleString="Unable To Find Match"
    CouldNotFindGameDescriptionStringPC="No servers matching the search settings were found. Try different filters or use the server browser."
    CouldNotFindGameDescriptionStringOrbis="No servers matching the search settings were found. Try different filters."
    WhiteListedStrings(0)="YES"
    WhiteListedStrings(1)="NO"
    SearchDSName=KFGameSearch
    InitialSearchPause=2
    MaxResultsToTry=20000
    ServerConnectTimeout=4
    ServerTakeoverTimeout=30
    StockMaps(0)="kf-biolapse"
    StockMaps(1)="kf-bioticslab"
    StockMaps(2)="kf-burningparis"
    StockMaps(3)="kf-outpost"
    StockMaps(4)="kf-voltermanor"
    StockMaps(5)="kf-catacombs"
    StockMaps(6)="kf-evacuationpoint"
    StockMaps(7)="kf-blackforest"
    StockMaps(8)="kf-farmhouse"
    StockMaps(9)="kf-prison"
    StockMaps(10)="kf-containmentstation"
    StockMaps(11)="kf-hostilegrounds"
    StockMaps(12)="kf-infernalrealm"
    StockMaps(13)="kf-zedlanding"
    StockMaps(14)="kf-thedescent"
    StockMaps(15)="kf-nuked"
    StockMaps(16)="kf-nightmare"
    StockMaps(17)="kf-krampuslair"
    StockMaps(18)="kf-diesector"
    StockMaps(19)="kf-powercore_holdout"
    StockMaps(20)="kf-lockdown"
    StockMaps(21)="kf-monsterball"
    StockMaps(22)="kf-airship"
    StockMaps(23)="kf-tragickingdom"
    StockMaps(24)="kf-shoppingspree"
    StockMaps(25)="kf-santasworkshop"
    StockMaps(26)="kf-sanitarium"
    StockMaps(27)="kf-spillway"
    StockMaps(28)="kf-steamfortress"
    StockMaps(29)="kf-ashwoodasylum"
    StockMaps(30)="kf-desolation"
    StockMaps(31)="kf-hellmarkstation"
    StockMaps(32)="kf-elysium"
    StockMaps(33)="kf-dystopia2029"
    SubWidgetBindings=/* Array type was not detected. */
}