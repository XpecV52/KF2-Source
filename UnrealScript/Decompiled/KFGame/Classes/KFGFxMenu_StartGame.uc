/*******************************************************************************
 * KFGFxMenu_StartGame generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_StartGame extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI)
    config(UI);

var bool bIsLeader;
var bool bIsInParty;
var bool bSearchingForGame;
var bool bLeaderInServerBrowser;
var bool bLeaderWasInServerBrowser;
var transient bool AttemptingJoin;
var bool bHarrassedPlayerAboutSharedContent;
var config bool AttemptServerTakeovers;
var transient bool bPauseTryingServers;
var config bool bLogSearchInfo;
var transient bool SearchFinished;
var transient int CurrentSearchIndex;
var const string ModeKey;
var const string DifficultyKey;
var const string MapKey;
var const string WhitelistedKey;
var const string InProgressKey;
var const string PermissionsKey;
var const string ServerTypeKey;
var const string GameLengthKey;
var KFGFxStartGameContainer_FindGame FindGameContainer;
var KFGFxStartGameContainer_Options OptionsComponent;
var KFGFxStartContainer_InGameOverview OverviewContainer;
var KFGFxStartContainer_ServerBrowserOverview ServerBrowserOverviewContainer;
var const localized string FindGameString;
var const localized string HostOptionsString;
var const localized string OverviewString;
var const localized string MatchmakingString;
var const localized string ServerBrowserString;
var const localized string GameModeTitle;
var const localized string DifficultyTitle;
var const localized string LengthTitle;
var const localized string MapTitle;
var const localized string MutatorTitle;
var const localized string PermissionsTitle;
var const localized string ServerTypeString;
var const localized string WhiteListedTitle;
var const localized string InfoTitle;
var const localized string InProgressString;
var const localized string LeaveMenuString;
var const localized string CouldNotFindGameTitleString;
var const localized string CouldNotFindGameDescriptionString;
var const localized array<localized string> WhiteListedStrings;
var protected const transient name SearchDSName;
var transient KFDataStore_OnlineGameSearch SearchDataStore;
var transient OnlineGameInterface GameInterface;
var array<string> MapStringList;
var transient string MapTakeoverURL;
var transient string PendingResolvedAddress;
var string CurrentPartyLeaderName;
var config float InitialSearchPause;
var config int MaxResultsToTry;
var config int ServerConnectTimeout;

// Export UKFGFxMenu_StartGame::execGetMapList(FFrame&, void* const)
native function GetMapList(out array<string> MapList);

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    local DataStoreClient DSClient;

    super.InitializeMenu(InManager);
    GetMapList(MapStringList);
    DSClient = Class'UIInteraction'.static.GetDataStoreClient();
    if(DSClient != none)
    {
        SearchDataStore = KFDataStore_OnlineGameSearch(DSClient.FindDataStore(SearchDSName));
    }
    GameInterface = Class'GameEngine'.static.GetOnlineSubsystem().GameInterface;
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'FindGameContainer':
            if(FindGameContainer == none)
            {
                FindGameContainer = KFGFxStartGameContainer_FindGame(Widget);
                FindGameContainer.Initialize(self);
            }
            break;
        case 'gameOptionsContainer':
            if(OptionsComponent == none)
            {
                OptionsComponent = KFGFxStartGameContainer_Options(Widget);
                OptionsComponent.Initialize(self);
            }
            break;
        case 'OverviewContainer':
            if(OverviewContainer == none)
            {
                OverviewContainer = KFGFxStartContainer_InGameOverview(Widget);
                OverviewContainer.Initialize(self);
                SetOverview(true);
            }
            break;
        case 'ServerBrowserOverviewContainer':
            if(ServerBrowserOverviewContainer == none)
            {
                ServerBrowserOverviewContainer = KFGFxStartContainer_ServerBrowserOverview(Widget);
                ServerBrowserOverviewContainer.Initialize(self);
            }
            break;
        default:
            break;
    }
    return true;
}

function SetOverview(optional bool bInitialize)
{
    local UniqueNetId AdminId, MyUID;
    local bool bCurrentlyLeader, bCurrentlyInParty;

    if(OverviewContainer != none)
    {
        OverviewContainer.UpdateOverviewInGame();
    }
    MyUID = Outer.GetPC().PlayerReplicationInfo.UniqueId;
    OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
    bCurrentlyLeader = MyUID == AdminId;
    bCurrentlyInParty = OnlineLobby.IsInLobby();
    if((((bIsLeader != bCurrentlyLeader) || bCurrentlyInParty != bIsInParty) || bInitialize) || bLeaderInServerBrowser != bLeaderWasInServerBrowser)
    {
        bIsLeader = bCurrentlyLeader;
        bIsInParty = bCurrentlyInParty;
        bLeaderWasInServerBrowser = bLeaderInServerBrowser;
        if(Class'WorldInfo'.static.IsMenuLevel())
        {
            if(bIsInParty && !bIsLeader)
            {
                if(bLeaderInServerBrowser)
                {
                    ShowOverview(!bIsLeader, bIsLeader, true, true);                    
                }
                else
                {
                    ShowOverview(!bIsLeader, bIsLeader, true, false);
                }
            }            
        }
        else
        {
            ShowOverview(true, bIsLeader, false, false);
        }
    }
}

function OnPlayerReadiedUp()
{
    if(bHarrassedPlayerAboutSharedContent)
    {
        return;
    }
    if(((OverviewContainer != none) && OverviewContainer.bContentShared) && Outer.GetPC().WorldInfo.NetMode != NM_Standalone)
    {
        if(Manager.CurrentMenuIndex != 0)
        {
            Manager.OpenMenu(0);
        }
        OverviewContainer.ActionScriptVoid("showSharedContentList");
    }
    bHarrassedPlayerAboutSharedContent = true;
}

function OneSecondLoop()
{
    SetOverview();
    UpdateMenu();
    if((OverviewContainer != none) && Manager.CurrentMenu == self)
    {
        OverviewContainer.UpdateSharedContent();
    }
}

function byte GetStartMenuState()
{
    return byte(GetInt("menuState"));
}

function string GetMapSource(string MapName)
{
    local KFMapSummary MapData;

    MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName(MapName);
    if(MapData != none)
    {
        return "img://" $ MapData.ScreenshotPathName;        
    }
    else
    {
        MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName("KF-Default");
        if(MapData != none)
        {
            return "img://" $ MapData.ScreenshotPathName;
        }
    }
}

function string GetFriendlyMapName(string MapName)
{
    local KFMapSummary MapData;

    MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName(MapName);
    if((MapData != none) && MapData.DisplayName != "")
    {
        return MapData.DisplayName;        
    }
    else
    {
        return MapName;
    }
}

function HandleSteamLobbyLeaderTakeOver(UniqueNetId AdminId)
{
    local bool bClientIsLeader;

    bClientIsLeader = Outer.GetPC().PlayerReplicationInfo.UniqueId == AdminId;
    switch(GetStartMenuState())
    {
        case 3:
            if(bClientIsLeader)
            {
                OpenMultiplayerMenu();
                return;
            }
        case 4:
            if(bClientIsLeader)
            {
                Manager.OpenMenu(14);
                return;
            }
        default:
            if(!bClientIsLeader)
            {
                SendToOverviewOnChange();
            }
            break;
    }
}

function SendToOverviewOnChange()
{
    Manager.SetStartMenuState(3);
    Manager.OpenMenu(0);
    SetOverview(true);
}

function UpdateMenu()
{
    local UniqueNetId AdminId, LoggedInPlayer;

    if(Class'WorldInfo'.static.IsMenuLevel() && OnlineLobby.IsInLobby())
    {
        OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
        OnlineLobby.Outer.GetUniquePlayerId(0, LoggedInPlayer);
        if(LoggedInPlayer == AdminId)
        {
            SendLeaderOptions();            
        }
        else
        {
            ReceiveLeaderOptions();
            CurrentPartyLeaderName = OnlineLobby.GetFriendNickname(AdminId);
            if(CurrentPartyLeaderName != "")
            {
                ServerBrowserOverviewContainer.SetDescriptionString(CurrentPartyLeaderName);
            }
        }
    }
}

function SendLeaderOptions()
{
    if(OptionsComponent != none)
    {
        SetLobbyData(GameLengthKey, string(OptionsComponent.SavedLengthIndex));
        SetLobbyData(DifficultyKey, string(OptionsComponent.SavedDifficultyIndex));
        SetLobbyData(MapKey, OptionsComponent.SavedMapString);
        SetLobbyData(ServerTypeKey, string(OptionsComponent.SavedServerTypeIndex));
        SetLobbyData(ModeKey, string(OptionsComponent.SavedModeIndex));
        SetLobbyData(PermissionsKey, string(OptionsComponent.SavedPrivacyIndex));
    }
}

function ReceiveLeaderOptions()
{
    local string OptionString, DisplayMapName, MapSource;
    local int OptionIndex;

    OptionIndex = int(OnlineLobby.GetLobbyData(0, ModeKey));
    OverviewContainer.UpdateGameMode(Class'KFCommon_LocalizedStrings'.static.GetGameModeString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, GameLengthKey));
    OverviewContainer.UpdateLength(Class'KFCommon_LocalizedStrings'.static.GetLengthString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, ServerTypeKey));
    OverviewContainer.UpdateServerType(Class'KFCommon_LocalizedStrings'.static.GetServerTypeString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, DifficultyKey));
    OverviewContainer.UpdateDifficulty(Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(OptionIndex)));
    OptionString = OnlineLobby.GetLobbyData(0, MapKey);
    DisplayMapName = GetFriendlyMapName(OptionString);
    MapSource = GetMapSource(OptionString);
    OverviewContainer.UpdateMap(DisplayMapName, MapSource);
    OptionIndex = int(OnlineLobby.GetLobbyData(0, PermissionsKey));
    OverviewContainer.UpdatePrivacy(Class'KFCommon_LocalizedStrings'.static.GetPermissionString(float(OptionIndex)));
}

function ApproveMatchMakingLeave()
{
    if(OptionsComponent != none)
    {
        if(OnlineLobby.IsInLobby())
        {
            OnlineLobby.QuitLobby();
        }
        CancelGameSearch();
        OptionsComponent.SetBool("approveMatchMakingLeave", true);
        UpdateStartMenuState();
    }
}

function GoToServerBrowser()
{
    Manager.OpenMenu(14);
}

function CancelLeaveMenu();

function OpenMultiplayerMenu()
{
    ActionScriptVoid("openMultiplayerMenu");
}

function UpdateStartMenuState()
{
    if(Manager != none)
    {
        Manager.SetStartMenuState(GetStartMenuState());
    }
}

function Callback_CancelSearch()
{
    if(OptionsComponent != none)
    {
        CancelGameSearch();
    }
}

function Callback_RequestLeaveMatchmaking()
{
    if(OptionsComponent != none)
    {
        if(OnlineLobby.IsInLobby())
        {
            Manager.OpenPopup(0, Class'KFCommon_LocalizedStrings'.default.LeaveCurrentMenuString, LeaveMenuString, Manager.BrowseServersString, Class'KFCommon_LocalizedStrings'.default.CancelString, GoToServerBrowser, CancelLeaveMenu, Class'KFCommon_LocalizedStrings'.default.DisbandPartyString, ApproveMatchMakingLeave);            
        }
        else
        {
            ApproveMatchMakingLeave();
        }
    }
}

function Callback_InGamePermissionChange(int Index)
{
    if(OnlineLobby != none)
    {
        if(OnlineLobby.SetVisibility(Index) && OptionsComponent != none)
        {
            OptionsComponent.PrivacyChanged(Index);
        }
    }
}

function Callback_OpenServerBrowser()
{
    Manager.OpenMenu(14);
}

function Callback_StartMenuRequestReinit()
{
    if(OptionsComponent != none)
    {
        OptionsComponent.InitializeGameOptions();
        OptionsComponent.SetOptions();
    }
}

function Callback_StartMenuChange()
{
    UpdateStartMenuState();
}

function Callback_Mode(int Index)
{
    OptionsComponent.ModeChanged(Index);
}

function Callback_Length(int Index)
{
    OptionsComponent.LengthChanged(Index);
}

function Callback_Difficulty(int Index)
{
    OptionsComponent.DifficultyChanged(Index);
}

function Callback_Privacy(int Index)
{
    OptionsComponent.PrivacyChanged(Index);
}

function Callback_MapSelection(byte MapIndex)
{
    local string MapName;

    if(MapIndex < MapStringList.Length)
    {
        MapName = MapStringList[MapIndex];        
    }
    else
    {
        MapName = "";
    }
    OptionsComponent.MapChanged(MapName);
}

function Callback_RecieveMap(int Index)
{
    if((Index >= 0) && Index < MapStringList.Length)
    {
        OptionsComponent.UpdateMapSource(MapStringList[Index]);        
    }
    else
    {
        OptionsComponent.UpdateMapSource("Default");
    }
}

function Callback_ServerType(int Index)
{
    OptionsComponent.ServerTypeChanged(Index);
}

function Callback_InProgress(int Index)
{
    OptionsComponent.InProgressChanged(Index);
}

function SetLobbyData(string KeyName, string ValueData)
{
    OnlineLobby.SetLobbyData(KeyName, ValueData);
}

function string MakeMapURL(string MapName, float GameDifficulty, byte GameLength)
{
    return (((MapName $ "?Difficulty=") $ string(GameDifficulty)) $ "?GameLength=") $ string(GameLength);
}

// Export UKFGFxMenu_StartGame::execGetSearchComplete(FFrame&, void* const)
native function bool GetSearchComplete(KFOnlineGameSearch GameSearch);

// Export UKFGFxMenu_StartGame::execTryNextServer(FFrame&, void* const)
native function TryNextServer();

event OpenNotFoundPopup()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Outer.GetPC());
    LogInternal("KFGFxMenu_StartGame.OpenNotFoundPopup: No servers found, giving up.");
    KFPC.MyGFxManager.OpenPopup(2, CouldNotFindGameTitleString, CouldNotFindGameDescriptionString, Class'KFCommon_LocalizedStrings'.default.OKString);
}

event int GetLobbySize()
{
    local ActiveLobbyInfo LobbyInfo;

    if(!OnlineLobby.GetCurrentLobby(LobbyInfo))
    {
        return 0;        
    }
    else
    {
        return LobbyInfo.Members.Length;
    }
}

function OnFindGameServerComplete(bool bWasSuccessful)
{
    if(bWasSuccessful && !bPauseTryingServers)
    {
        SortLastEntry(SearchDataStore.GetActiveGameSearch());
    }
    TryNextServer();
}

// Export UKFGFxMenu_StartGame::execSpaceAvailable(FFrame&, void* const)
native function bool SpaceAvailable(const OnlineGameSettings Settings);

// Export UKFGFxMenu_StartGame::execSortLastEntry(FFrame&, void* const)
native function SortLastEntry(OnlineGameSearch Search);

// Export UKFGFxMenu_StartGame::execSortServers(FFrame&, void* const)
native function SortServers(OnlineGameSearch Search);

function OnJoinGameComplete(name SessionName, bool bSuccessful)
{
    GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    if(!bSuccessful)
    {
        AttemptingJoin = false;
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: join online game failed completion for server index" @ string(CurrentSearchIndex - 1));
        }
        TryNextServer();
        return;
    }
    if(GameInterface.GetResolvedConnectString(SessionName, PendingResolvedAddress))
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: OnJoinGameComplete called for server index" @ string(CurrentSearchIndex - 1));
        }
        KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
        SetServerConnectGiveUpTimer();        
        Outer.GetPC().ConsoleCommand(("open" @ PendingResolvedAddress) $ OnlineLobby.GetLobbyURLString());        
    }
    else
    {
        AttemptingJoin = false;
        LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: unable to resolve server address, bLogSearchInfo");
        TryNextServer();
    }
}

event SetServerConnectGiveUpTimer()
{
    Manager.TimerHelper.SetTimer(float(ServerConnectTimeout), false, 'ServerConnectGiveUp', self);
}

event AddJoinGameCompleteDelegate(OnlineGameSearch LatestGameSearch)
{
    GameInterface.AddJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    GameInterface.JoinOnlineGame(0, 'Game', LatestGameSearch.Results[CurrentSearchIndex]);
}

function ServerConnectGiveUp()
{
    if(bLogSearchInfo)
    {
        LogInternal("KFGFxMenu_StartGame.ServerConnectGiveUp: ServerConnectGiveUp");
    }
    KFGameEngine(Class'KFGameEngine'.static.GetEngine()).KillPendingServerConnection();
}

function OnOpen()
{
    if(Manager != none)
    {
        Manager.SetStartMenuState(GetStartMenuState());
    }
}

function bool OnHandshakeComplete(bool bSuccess, string Description, out int SuppressPasswordRetry)
{
    if(bLogSearchInfo)
    {
        LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete");
    }
    AttemptingJoin = false;
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    Manager.TimerHelper.ClearTimer('ServerConnectGiveUp', self);
    if(bSuccess)
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete: LobbyJoinServer");
        }
        OnlineLobby.LobbyJoinServer(PendingResolvedAddress);
        PendingResolvedAddress = "";        
    }
    else
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete:  TryNextServer");
        }
        GameInterface.DestroyOnlineGame('Game');
        PendingResolvedAddress = "";
        TryNextServer();
    }
    return true;
}

event OnClose()
{
    if(OverviewContainer != none)
    {
        OverviewContainer.ActionScriptVoid("hideSharedContentList");
    }
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
    GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
}

function AddLobbyFilter(out array<LobbyFilter> Filters, bool bIsSet, string Key, coerce string Val, bool bNumeric)
{
    local LobbyFilter Filter;

    if(bIsSet)
    {
        Filter.Key = Key;
        Filter.Value = Val;
        Filter.Operator = 0;
        Filter.bNumeric = bNumeric;
        Filters.AddItem(Filter;
    }
}

function BuildServerFilters(OnlineGameInterface GameInterfaceSteam, KFGFxStartGameContainer_Options Options, OnlineGameSearch Search)
{
    local string MapName;
    local int GameDifficulty, GameLength;
    local bool AllowInProgress;
    local string GameTagFilters;
    local int bCustom, bRanked;
    local ActiveLobbyInfo LobbyInfo;

    GameInterfaceSteam.ClearServerFilters(Search);
    GameInterfaceSteam.AddServerFilter(Search, "version_match", string(Class'KFGameEngine'.static.GetKFGameVersion()));
    MapName = OptionsComponent.GetMapName();
    if(MapName != "")
    {
        GameInterfaceSteam.AddServerFilter(Search, "map", MapName);
    }
    if(OnlineLobby.GetCurrentLobby(LobbyInfo) && LobbyInfo.Members.Length >= 6)
    {
        GameInterfaceSteam.AddServerFilter(Search, "noplayers", "");        
    }
    else
    {
        GameInterfaceSteam.AddServerFilter(Search, "notfull", "");
    }
    GameDifficulty = OptionsComponent.GetDifficulty();
    if(GameDifficulty >= 0)
    {
        GameInterfaceSteam.AddGametagFilter(GameTagFilters, 'Difficulty', string(GameDifficulty));
    }
    GameLength = OptionsComponent.GetGameLength();
    if(GameLength >= 0)
    {
        GameInterfaceSteam.AddGametagFilter(GameTagFilters, 'NumWaves', string(GameLength));
    }
    GameInterfaceSteam.TestAddBoolGametagFilter(GameTagFilters, true, 'bRequiresPassword', 0);
    AllowInProgress = OptionsComponent.GetAllowInProgress();
    GameInterfaceSteam.TestAddBoolGametagFilter(GameTagFilters, !AllowInProgress, 'bInProgress', 0);
    OptionsComponent.GetServerTypeBools(bCustom, bRanked);
    GameInterfaceSteam.TestAddBoolGametagFilter(GameTagFilters, true, 'bCustom', byte(bCustom));
    GameInterfaceSteam.TestAddBoolGametagFilter(GameTagFilters, true, 'bUsesStats', 1);
    if(Len(GameTagFilters) > 0)
    {
        GameInterfaceSteam.AddServerFilter(Search, "gametagsand", GameTagFilters);
    }
    if(Search.MasterServerSearchKeys.Length > 1)
    {
        GameInterfaceSteam.AddServerFilter(Search, "and", string(Search.MasterServerSearchKeys.Length), 0);
    }
}

function Callback_StartGame()
{
    Callback_StartOfflineGame();
}

function Callback_StartOfflineGame()
{
    local string MapName;
    local float GameDifficulty;
    local byte GameLength;

    MapName = OptionsComponent.SavedMapString;
    GameDifficulty = Class'KFDifficultyInfo'.static.GetDifficultyValue(OptionsComponent.SavedDifficultyIndex);
    GameLength = OptionsComponent.SavedLengthIndex;
    Outer.ConsoleCommand("open" @ (MakeMapURL(MapName, GameDifficulty, GameLength)));
}

function Callback_StartOnlineGame()
{
    GameInterface.SetMatchmakingTypeMode(2);
    CurrentSearchIndex = 0;
    OptionsComponent.UpdateFilters();
    BuildServerFilters(GameInterface, OptionsComponent, SearchDataStore.GetCurrentGameSearch());
    SearchDataStore.GetCurrentGameSearch().MaxSearchResults = MaxResultsToTry;
    GameInterface.AddFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
    if(!SearchDataStore.SubmitGameSearch(byte(Class'UIInteraction'.static.GetPlayerControllerId(0)), false))
    {
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);        
    }
    else
    {
        bPauseTryingServers = true;
        Manager.TimerHelper.SetTimer(InitialSearchPause, false, 'UnpauseTryingServers', self);
        bSearchingForGame = true;
        OptionsComponent.SetSearching(bSearchingForGame);
    }
}

function UnpauseTryingServers()
{
    bPauseTryingServers = false;
    SortServers(SearchDataStore.GetActiveGameSearch());
    TryNextServer();
}

event CancelGameSearch()
{
    local KFOnlineGameSearch ActiveGameSearch;

    ActiveGameSearch = KFOnlineGameSearch(SearchDataStore.GetActiveGameSearch());
    if(ActiveGameSearch != none)
    {
        GameInterface.AddCancelFindOnlineGamesCompleteDelegate(OnCancelSearchComplete);
        GameInterface.CancelFindOnlineGames();        
    }
    else
    {
        OnCancelSearchComplete(false);
    }
}

function OnCancelSearchComplete(bool bWasSuccessful)
{
    bSearchingForGame = false;
    OptionsComponent.SetSearching(bSearchingForGame);
    Manager.SetSearchingForMatch(bSearchingForGame);
}

function ShowOverview(bool bShowOverview, bool bLeader, bool bInMainMenu, bool bhostInServerBrowser)
{
    ActionScriptVoid("showOverview");
}

defaultproperties
{
    ModeKey="ModeKey"
    DifficultyKey="DifficultyKey"
    MapKey="MapKey"
    WhitelistedKey="WhitelistedKey"
    InProgressKey="InProgress"
    PermissionsKey="PermissionsKey"
    ServerTypeKey="ServerTypeKey"
    GameLengthKey="GameLengthKey"
    FindGameString="HOME"
    MatchmakingString="ONLINE MATCHMAKING"
    ServerBrowserString="Browse Servers"
    GameModeTitle="GAME MODE"
    DifficultyTitle="DIFFICULTY"
    LengthTitle="LENGTH"
    MapTitle="STARTING MAP"
    MutatorTitle="MUTATORS"
    PermissionsTitle="PERMISSIONS"
    ServerTypeString="SERVER TYPE"
    WhiteListedTitle="STATS ENABLED"
    InfoTitle="INFORMATION"
    InProgressString="IN PROGRESS"
    LeaveMenuString="Leaving matchmaking will disband your party.  Go to server browser instead?"
    CouldNotFindGameTitleString="Unable To Find Match"
    CouldNotFindGameDescriptionString="No servers matching the search settings were found. Try different filters or use the server browser."
    WhiteListedStrings(0)="YES"
    WhiteListedStrings(1)="NO"
    SearchDSName=KFGameSearch
    InitialSearchPause=2
    MaxResultsToTry=20000
    ServerConnectTimeout=2
    SubWidgetBindings=/* Array type was not detected. */
}