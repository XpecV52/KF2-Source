/*******************************************************************************
 * KFGFxMenu_StartGame generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_StartGame extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI)
    config(UI);

var bool bIsLeader;
var bool bIsInParty;
var bool bSearchingForGame;
var bool bLeaderInServerBrowser;
var bool bLeaderWasInServerBrowser;
var transient bool AttemptingJoin;
var transient bool bAttemptingServerCreate;
var bool bHarrassedPlayerAboutSharedContent;
var config bool AttemptServerTakeovers;
var transient bool bPauseTryingServers;
var config bool bLogSearchInfo;
var transient bool SearchFinished;
var transient int CurrentSearchIndex;
var const string ModeKey;
var const string DifficultyKey;
var const string MapKey;
var const string WhitelistedKey;
var const string InProgressKey;
var const string PermissionsKey;
var const string ServerTypeKey;
var const string GameLengthKey;
var KFGFxStartGameContainer_FindGame FindGameContainer;
var KFGFxStartGameContainer_Options OptionsComponent;
var KFGFxStartContainer_InGameOverview OverviewContainer;
var KFGFxStartContainer_ServerBrowserOverview ServerBrowserOverviewContainer;
var GFxObject MatchMakingButton;
var GFxObject ServerBrowserButton;
var const localized string FindGameString;
var const localized string HostOptionsString;
var const localized string OverviewString;
var const localized string MatchmakingString;
var const localized string ServerBrowserString;
var const localized string GameModeTitle;
var const localized string DifficultyTitle;
var const localized string LengthTitle;
var const localized string MapTitle;
var const localized string MutatorTitle;
var const localized string PermissionsTitle;
var const localized string ServerTypeString;
var const localized string WhiteListedTitle;
var const localized string InfoTitle;
var const localized string InProgressString;
var const localized string LeaveMenuString;
var const localized string CouldNotFindGameTitleString;
var private const localized string CouldNotFindGameDescriptionStringPC;
var private const localized string CouldNotFindGameDescriptionStringOrbis;
var const localized array<localized string> WhiteListedStrings;
var protected const transient name SearchDSName;
var transient KFDataStore_OnlineGameSearch SearchDataStore;
var transient OnlineGameInterface GameInterface;
var array<string> MapStringList;
var transient string MapTakeoverURL;
var transient string PendingResolvedAddress;
var string CurrentPartyLeaderName;
var config float InitialSearchPause;
var config int MaxResultsToTry;
var config int ServerConnectTimeout;
var config array<config string> StockMaps;
var transient string LobbyOwnerPassword;
var config string TestLobbyOwnerPassword;
var transient string CurrentConnectMap;

// Export UKFGFxMenu_StartGame::execGetMapList(FFrame&, void* const)
native function GetMapList(out array<string> MapList);

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    local DataStoreClient DSClient;
    local PlayerController PC;

    PC = Outer.GetPC();
    super.InitializeMenu(InManager);
    GetMapList(MapStringList);
    DSClient = Class'UIInteraction'.static.GetDataStoreClient();
    if(DSClient != none)
    {
        SearchDataStore = KFDataStore_OnlineGameSearch(DSClient.FindDataStore(SearchDSName));
    }
    if(Class'GameEngine'.static.GetOnlineSubsystem() != none)
    {
        GameInterface = Class'GameEngine'.static.GetOnlineSubsystem().GameInterface;
        if(PC.WorldInfo.IsConsoleBuild(8) && !Class'GameEngine'.static.GetOnlineSubsystem().ContentInterface.IsGameFullyInstalled())
        {
            Manager.OpenPopup(2, Localize("Notifications", "PlayGoBusyTitle", "KFGameConsole"), Localize("Notifications", "PlayGoBusyMessage", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
        }
    }
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'FindGameContainer':
            if(FindGameContainer == none)
            {
                FindGameContainer = KFGFxStartGameContainer_FindGame(Widget);
                FindGameContainer.Initialize(self);
            }
            break;
        case 'gameOptionsContainer':
            if(OptionsComponent == none)
            {
                OptionsComponent = KFGFxStartGameContainer_Options(Widget);
                OptionsComponent.Initialize(self);
            }
            break;
        case 'OverviewContainer':
            if(OverviewContainer == none)
            {
                OverviewContainer = KFGFxStartContainer_InGameOverview(Widget);
                OverviewContainer.Initialize(self);
                SetOverview(true);
            }
            break;
        case 'ServerBrowserOverviewContainer':
            if(ServerBrowserOverviewContainer == none)
            {
                ServerBrowserOverviewContainer = KFGFxStartContainer_ServerBrowserOverview(Widget);
                ServerBrowserOverviewContainer.Initialize(self);
            }
            break;
        case 'MatchMakingButton':
            MatchMakingButton = Widget;
            if(Class'WorldInfo'.static.IsConsoleBuild(8) && ServerBrowserButton != none)
            {
                CheckGameFullyInstalled();
            }
            break;
        case 'ServerBrowserButton':
            ServerBrowserButton = Widget;
            if(Class'WorldInfo'.static.IsConsoleBuild(8) && MatchMakingButton != none)
            {
                CheckGameFullyInstalled();
            }
            break;
        default:
            break;
    }
    return true;
}

function string GetCouldNotFindGameDescription()
{
    if(Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        return CouldNotFindGameDescriptionStringOrbis;        
    }
    else
    {
        return CouldNotFindGameDescriptionStringPC;
    }
}

function CheckGameFullyInstalled()
{
    if(Class'GameEngine'.static.GetOnlineSubsystem().ContentInterface.IsGameFullyInstalled())
    {
        MatchMakingButton.SetBool("enabled", true);
        ServerBrowserButton.SetBool("enabled", true);
        InitializeMenu(Manager);
        ReloadSounds();        
    }
    else
    {
        MatchMakingButton.SetBool("enabled", false);
        ServerBrowserButton.SetBool("enabled", false);
        Manager.TimerHelper.SetTimer(1, false, 'CheckGameFullyInstalled', self);
    }
}

// Export UKFGFxMenu_StartGame::execReloadSounds(FFrame&, void* const)
native function ReloadSounds();

function SetOverview(optional bool bInitialize)
{
    local UniqueNetId AdminId, MyUID;
    local bool bCurrentlyLeader, bCurrentlyInParty;

    if(OverviewContainer != none)
    {
        OverviewContainer.UpdateOverviewInGame();
    }
    if(OnlineLobby != none)
    {
        MyUID = OnlineLobby.GetMyId();
        OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
        bCurrentlyLeader = MyUID == AdminId;
        bCurrentlyInParty = OnlineLobby.IsInLobby();
    }
    if((((bIsLeader != bCurrentlyLeader) || bCurrentlyInParty != bIsInParty) || bInitialize) || bLeaderInServerBrowser != bLeaderWasInServerBrowser)
    {
        bIsLeader = bCurrentlyLeader;
        bIsInParty = bCurrentlyInParty;
        bLeaderWasInServerBrowser = bLeaderInServerBrowser;
        if(Class'WorldInfo'.static.IsMenuLevel())
        {
            if(bIsInParty)
            {
                if(bIsLeader)
                {
                    if(Manager.CurrentMenuIndex == 15)
                    {
                        ShowOverview(false, bIsLeader, Class'WorldInfo'.static.IsMenuLevel(), false);
                        Manager.OpenMenu(15);                        
                    }
                    else
                    {
                        ShowOverview(false, bIsLeader, Class'WorldInfo'.static.IsMenuLevel(), false);
                        OpenMultiplayerMenu();
                    }                    
                }
                else
                {
                    ShowOverview(!bIsLeader, bIsLeader, Class'WorldInfo'.static.IsMenuLevel(), bLeaderInServerBrowser);
                }
            }            
        }
        else
        {
            ShowOverview(true, bIsLeader, false, false);
        }
    }
}

function OnPlayerReadiedUp()
{
    if(bHarrassedPlayerAboutSharedContent)
    {
        return;
    }
    if(((OverviewContainer != none) && OverviewContainer.bContentShared) && Outer.GetPC().WorldInfo.NetMode != NM_Standalone)
    {
        if(Manager.CurrentMenuIndex != 0)
        {
            Manager.OpenMenu(0);
        }
        OverviewContainer.ActionScriptVoid("showSharedContentList");
    }
    bHarrassedPlayerAboutSharedContent = true;
}

function OneSecondLoop()
{
    SetOverview();
    UpdateMenu();
    if((OverviewContainer != none) && Manager.CurrentMenu == self)
    {
        OverviewContainer.UpdateSharedContent();
    }
}

function byte GetStartMenuState()
{
    return byte(GetInt("menuState"));
}

function string GetMapSource(string MapName)
{
    local KFMapSummary MapData;

    MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName(MapName);
    if(MapData != none)
    {
        return "img://" $ MapData.ScreenshotPathName;        
    }
    else
    {
        MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName("KF-Default");
        if(MapData != none)
        {
            return "img://" $ MapData.ScreenshotPathName;
        }
    }
}

function HandleSteamLobbyLeaderTakeOver(UniqueNetId AdminId)
{
    local bool bClientIsLeader;

    bClientIsLeader = Outer.GetPC().PlayerReplicationInfo.UniqueId == AdminId;
    switch(GetStartMenuState())
    {
        case 3:
            if(bClientIsLeader)
            {
                OpenMultiplayerMenu();
                return;
            }
        case 4:
            if(bClientIsLeader)
            {
                Manager.OpenMenu(15);
                return;
            }
        default:
            if(!bClientIsLeader)
            {
                SendToOverviewOnChange();
            }
            break;
    }
}

function SendToOverviewOnChange()
{
    Manager.SetStartMenuState(3);
    Manager.OpenMenu(0);
    SetOverview(true);
}

function UpdateMenu()
{
    local UniqueNetId AdminId, LoggedInPlayer;

    if((Class'WorldInfo'.static.IsMenuLevel() && OnlineLobby != none) && OnlineLobby.IsInLobby())
    {
        OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
        LoggedInPlayer = OnlineLobby.GetMyId();
        if(LoggedInPlayer == AdminId)
        {
            SendLeaderOptions();            
        }
        else
        {
            ReceiveLeaderOptions();
            CurrentPartyLeaderName = OnlineLobby.GetFriendNickname(AdminId);
            if(CurrentPartyLeaderName != "")
            {
                ServerBrowserOverviewContainer.SetDescriptionString(CurrentPartyLeaderName);
            }
        }
    }
}

function SendLeaderOptions()
{
    if(OptionsComponent != none)
    {
        SetLobbyData(GameLengthKey, string(OptionsComponent.GetLengthIndex()));
        SetLobbyData(DifficultyKey, string(OptionsComponent.GetDifficultyIndex()));
        SetLobbyData(MapKey, OptionsComponent.GetMapName());
        SetLobbyData(ServerTypeKey, string(OptionsComponent.GetServerTypeIndex()));
        SetLobbyData(ModeKey, string(OptionsComponent.GetModeIndex()));
        SetLobbyData(PermissionsKey, string(OptionsComponent.GetPrivacyIndex()));
    }
}

function ReceiveLeaderOptions()
{
    local string OptionString, DisplayMapName, MapSource;
    local int OptionIndex;

    OptionIndex = int(OnlineLobby.GetLobbyData(0, ModeKey));
    OverviewContainer.UpdateGameMode(Class'KFCommon_LocalizedStrings'.static.GetGameModeString(OptionIndex));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, GameLengthKey));
    OverviewContainer.UpdateLength(Class'KFCommon_LocalizedStrings'.static.GetLengthString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, ServerTypeKey));
    OverviewContainer.UpdateServerType(Class'KFCommon_LocalizedStrings'.static.GetServerTypeString(float(OptionIndex)));
    OptionIndex = int(OnlineLobby.GetLobbyData(0, DifficultyKey));
    OverviewContainer.UpdateDifficulty(Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(OptionIndex)));
    OptionString = OnlineLobby.GetLobbyData(0, MapKey);
    DisplayMapName = Class'KFCommon_LocalizedStrings'.static.GetFriendlyMapName(OptionString);
    MapSource = GetMapSource(OptionString);
    OverviewContainer.UpdateMap(DisplayMapName, MapSource);
    OptionIndex = int(OnlineLobby.GetLobbyData(0, PermissionsKey));
    OverviewContainer.UpdatePrivacy(Class'KFCommon_LocalizedStrings'.static.GetPermissionString(float(OptionIndex)));
}

function ApproveMatchMakingLeave()
{
    if(OptionsComponent != none)
    {
        if(((OnlineLobby != none) && OnlineLobby.IsInLobby()) && !Class'WorldInfo'.static.IsConsoleBuild())
        {
            OnlineLobby.QuitLobby();
        }
        CancelGameSearch();
        OptionsComponent.SetBool("approveMatchMakingLeave", true);
        UpdateStartMenuState();
    }
}

function GoToServerBrowser()
{
    Manager.OpenMenu(15);
}

function CancelLeaveMenu();

function OpenMultiplayerMenu()
{
    ActionScriptVoid("openMultiplayerMenu");
}

function UpdateStartMenuState()
{
    if(Manager != none)
    {
        Manager.SetStartMenuState(GetStartMenuState());
    }
}

function Callback_OnWhatsNewClicked(int Index)
{
    local OnlineSubsystem OnlineSub;
    local int I;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        if(Class'WorldInfo'.static.IsConsoleBuild())
        {
            if(Class'KFGFxStartGameContainer_FindGame'.default.PS4WhatsNewItems[Index].PSNProductId != "")
            {
                I = 0;
                J0xA8:

                if(I < OnlineSub.ItemPropertiesList.Length)
                {
                    if(OnlineSub.ItemPropertiesList[I].ProductId == Class'KFGFxStartGameContainer_FindGame'.default.PS4WhatsNewItems[Index].PSNProductId)
                    {
                        if(OnlineSub.ItemPropertiesList[I].SignedOfferId != "")
                        {
                            OnlineSub.OpenMarketPlaceSearch(OnlineSub.ItemPropertiesList[I]);                            
                        }
                        else
                        {
                            WarnInternal("No PSN signed offer ID for item with product ID" @ Class'KFGFxStartGameContainer_FindGame'.default.PS4WhatsNewItems[Index].PSNProductId);
                        }
                        goto J0x25D;
                    }
                    ++ I;
                    goto J0xA8;
                }
                J0x25D:
                
            }
            else
            {
                if(Class'KFGFxStartGameContainer_FindGame'.default.PS4WhatsNewItems[Index].RedirectURL != "")
                {
                    OnlineSub.OpenURL(Class'KFGFxStartGameContainer_FindGame'.default.PS4WhatsNewItems[Index].RedirectURL);
                }
            }            
        }
        else
        {
            OnlineSub.OpenURL(Class'KFGFxStartGameContainer_FindGame'.default.WhatsNewItems[Index].RedirectURL);
        }
    }
}

function Callback_StartTutorial()
{
    Outer.ConsoleCommand("open KF-EvacuationPoint?game=KFGameContent.KFGameInfo_Tutorial");
}

function Callback_OnWebLinkClicked(string WebsiteLink)
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        OnlineSub.OpenURL(WebsiteLink);
    }
}

function Callback_CancelSearch()
{
    if(OptionsComponent != none)
    {
        CancelGameSearch();
    }
}

function Callback_RequestLeaveMatchmaking()
{
    if(OptionsComponent != none)
    {
        if(OnlineLobby.IsInLobby() && !Class'WorldInfo'.static.IsConsoleBuild())
        {
            Manager.OpenPopup(0, Class'KFCommon_LocalizedStrings'.default.LeaveCurrentMenuString, LeaveMenuString, Manager.BrowseServersString, Class'KFCommon_LocalizedStrings'.default.CancelString, GoToServerBrowser, CancelLeaveMenu, Class'KFCommon_LocalizedStrings'.default.DisbandPartyString, ApproveMatchMakingLeave);            
        }
        else
        {
            ApproveMatchMakingLeave();
        }
    }
}

function Callback_OptionListOpened(string ListName, int OptionIndex)
{
    local string MessageString;

    if((ListName == "mapList") || Outer.GetPC().WorldInfo.IsConsoleBuild(8) && ListName == "serverTypeList")
    {
        return;
    }
    if(OptionIndex == -1)
    {
        return;
    }
    MessageString = Localize("StartMenuHelperText", ListName $ string(OptionIndex), "KFGame");
    if(OptionsComponent != none)
    {
        OptionsComponent.SetHelpText(MessageString);
    }
}

function Callback_InGamePermissionChange(int Index)
{
    if(OnlineLobby != none)
    {
        if(OnlineLobby.SetVisibility(Index) && OptionsComponent != none)
        {
            OptionsComponent.PrivacyChanged(Index);
        }
    }
}

function Callback_OpenMatchMaking()
{
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        KFPlayerController(Outer.GetPC()).StartLogin(ProceedToMatchMaking, true);        
    }
    else
    {
        ProceedToMatchMaking();
    }
}

function ProceedToMatchMaking()
{
    ActionScriptVoid("proceedToMatchMaking");
}

function Callback_OpenServerBrowser()
{
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {        
    }
    else
    {
        Manager.OpenMenu(15);
    }
}

function OnCanPlayOnlineCheckComplete(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevel)
{
    if(Privilege == 0)
    {
        Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.ClearPrivilegeLevelCheckedDelegate(OnCanPlayOnlineCheckComplete);
        Manager.UnloadCurrentPopup();
        if(PrivilegeLevel == 2)
        {
            Manager.OpenMenu(15);            
        }
        else
        {
            Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterfaceEx.UpsellPremiumOnlineService();
        }
    }
}

function Callback_StartMenuRequestReinit()
{
    if(OptionsComponent != none)
    {
        OptionsComponent.InitializeGameOptions();
        OptionsComponent.SetOptions();
    }
}

function Callback_StartMenuChange()
{
    UpdateStartMenuState();
}

function Callback_Mode(int Index)
{
    OptionsComponent.ModeChanged(Index);
}

function Callback_Length(int Index)
{
    OptionsComponent.LengthChanged(Index);
}

function Callback_Difficulty(int Index)
{
    OptionsComponent.DifficultyChanged(Index);
}

function Callback_Privacy(int Index)
{
    OptionsComponent.PrivacyChanged(Index);
}

function Callback_MapSelection(byte MapIndex)
{
    local string MapName;

    if(MapIndex < MapStringList.Length)
    {
        MapName = MapStringList[MapIndex];        
    }
    else
    {
        MapName = "";
    }
    OptionsComponent.MapChanged(MapName);
}

function Callback_RecieveMap(int Index)
{
    if((Index >= 0) && Index < MapStringList.Length)
    {
        OptionsComponent.UpdateMapSource(MapStringList[Index]);        
    }
    else
    {
        OptionsComponent.UpdateMapSource("Default");
    }
}

function Callback_ServerType(int Index)
{
    OptionsComponent.ServerTypeChanged(Index);
}

function Callback_InProgress(int Index)
{
    OptionsComponent.InProgressChanged(Index);
}

function SetLobbyData(string KeyName, string ValueData)
{
    OnlineLobby.SetLobbyData(KeyName, ValueData);
}

function string MakeMapURL(KFGFxStartGameContainer_Options InOptionsComponent)
{
    local string MapName;
    local int LengthIndex;

    MapName = InOptionsComponent.GetMapName();
    if(MapName == "")
    {
        if(CurrentConnectMap != "")
        {
            MapName = CurrentConnectMap;            
        }
        else
        {
            MapName = "kf-bioticslab";
        }
    }
    LengthIndex = InOptionsComponent.GetLengthIndex(1);
    return (((((MapName $ "?Game=") $ Class'KFGameInfo'.static.GetGameModeClassFromNum(InOptionsComponent.GetModeIndex())) $ "?Difficulty=") $ string(Class'KFGameDifficultyInfo'.static.GetDifficultyValue(byte(InOptionsComponent.GetDifficultyIndex())))) $ "?GameLength=") $ string(LengthIndex);
}

// Export UKFGFxMenu_StartGame::execGetSearchComplete(FFrame&, void* const)
native function bool GetSearchComplete(KFOnlineGameSearch GameSearch);

// Export UKFGFxMenu_StartGame::execTryNextServer(FFrame&, void* const)
native function TryNextServer();

// Export UKFGFxMenu_StartGame::execHandleSearchOver(FFrame&, void* const)
native function HandleSearchOver();

event OpenNotFoundPopup()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Outer.GetPC());
    LogInternal("KFGFxMenu_StartGame.OpenNotFoundPopup: No servers found, giving up.");
    KFPC.MyGFxManager.OpenPopup(2, CouldNotFindGameTitleString, GetCouldNotFindGameDescription(), Class'KFCommon_LocalizedStrings'.default.OKString);
}

event int GetLobbySize()
{
    local ActiveLobbyInfo LobbyInfo;

    if(!OnlineLobby.GetCurrentLobby(LobbyInfo))
    {
        return 0;        
    }
    else
    {
        return LobbyInfo.Members.Length;
    }
}

function OnFindGameServerComplete(bool bWasSuccessful)
{
    if(bWasSuccessful && !bPauseTryingServers)
    {
        SortLastEntry(SearchDataStore.GetActiveGameSearch());
    }
    TryNextServer();
}

// Export UKFGFxMenu_StartGame::execSpaceAvailable(FFrame&, void* const)
native function bool SpaceAvailable(const OnlineGameSettings Settings);

// Export UKFGFxMenu_StartGame::execMapGood(FFrame&, void* const)
native function bool MapGood(const OnlineGameSettings Settings, optional out string CurrentMap);

// Export UKFGFxMenu_StartGame::execSortLastEntry(FFrame&, void* const)
native function SortLastEntry(OnlineGameSearch Search);

// Export UKFGFxMenu_StartGame::execSortServers(FFrame&, void* const)
native function SortServers(OnlineGameSearch Search);

function string BuildTakeoverURL(out string Password)
{
    local string TakeoverURL;

    TakeoverURL = MakeMapURL(OptionsComponent);
    if(Len(Password) > 0)
    {        
        TakeoverURL $= ("?gamepassword=" $ Password);
    }
    return TakeoverURL $ OnlineLobby.GetLobbyURLString();
}

function OnJoinGameComplete(name SessionName, bool bSuccessful)
{
    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    }
    if(!bSuccessful)
    {
        AttemptingJoin = false;
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: join online game failed completion for server index" @ string(CurrentSearchIndex));
        }
        TryNextServer();
        return;
    }
    if(GameInterface.GetResolvedConnectString(SessionName, PendingResolvedAddress))
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: OnJoinGameComplete called for server index" @ string(CurrentSearchIndex));
        }
        KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
        SetServerConnectGiveUpTimer();
        if(OptionsComponent.GetMakeNewServer())
        {
            LogInternal("**************SERVER TAKEOVER TESTING");
            LogInternal(("servertakeover" @ PendingResolvedAddress) @ (BuildTakeoverURL(LobbyOwnerPassword)));            
            Outer.GetPC().ConsoleCommand(("servertakeover" @ PendingResolvedAddress) @ (BuildTakeoverURL(LobbyOwnerPassword)));            
        }
        else
        {            
            Outer.GetPC().ConsoleCommand(("open" @ PendingResolvedAddress) $ OnlineLobby.GetLobbyURLString());
        }        
    }
    else
    {
        AttemptingJoin = false;
        LogInternal("KFGFxMenu_StartGame.OnJoinGameComplete: unable to resolve server address, bLogSearchInfo");
        TryNextServer();
    }
}

function OnQueryAdditionalServerInfoComplete(bool bWasSuccessful, string LobbyId, string ServerIP, int ServerPort, string ServerTicket)
{
    LogInternal((((((("OnQueryAdditionalServerInfoComplete with success" @ string(bWasSuccessful)) @ "and lobbyID") @ LobbyId) @ "and server IP") @ ServerIP) @ "and port") @ string(ServerPort));
    Class'GameEngine'.static.GetPlayfabInterface().ClearQueryServerInfoCompleteDelegate(OnQueryAdditionalServerInfoComplete);
    if(!bWasSuccessful || ServerIP == "")
    {
        AttemptingJoin = false;
        TryNextServer();        
    }
    else
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnQueryAdditionalServerInfoComplete: called for server index" @ string(CurrentSearchIndex));
        }
        ConnectToPlayfabServer(LobbyId, ServerIP, ServerPort, ServerTicket, false);
    }
}

event CreateNewServer()
{
    local string CustomCommandline, MapName;
    local int GameLength;

    bAttemptingServerCreate = true;
    if(OptionsComponent.GetMapName() != "")
    {
        MapName = OptionsComponent.GetMapName();        
    }
    else
    {
        MapName = MapStringList[Rand(MapStringList.Length)];
    }
    if((OptionsComponent.bLengthFilterSet && OptionsComponent.LengthFilter >= 0) && OptionsComponent.LengthFilter <= 2)
    {
        GameLength = OptionsComponent.LengthFilter;        
    }
    else
    {
        GameLength = 1;
    }
    CustomCommandline = MapName;    
    CustomCommandline $= ("?Difficulty=" $ string(OptionsComponent.GetDifficultyIndex()));    
    CustomCommandline $= ("?GameLength=" $ string(GameLength));
    LogInternal("Starting new server with URL" @ CustomCommandline);
    Class'GameEngine'.static.GetPlayfabInterface().AddOnServerStartedDelegate(OnServerStarted);
    Class'GameEngine'.static.GetPlayfabInterface().StartNewServerInstance(SearchDataStore.GetActiveGameSearch().GameModes[0], CustomCommandline);
}

function OnServerStarted(bool bWasSuccessful, string ServerLobbyId, string ServerIP, int ServerPort, string ServerTicket)
{
    LogInternal((((((((("Server started with success flag" @ string(bWasSuccessful)) @ "and with lobby id") @ ServerLobbyId) @ "and server IP") @ ServerIP) @ "and port") @ string(ServerPort)) @ "and ticket") @ ServerTicket);
    Class'GameEngine'.static.GetPlayfabInterface().ClearOnServerStartedDelegate(OnServerStarted);
    if(bWasSuccessful)
    {
        ConnectToPlayfabServer(ServerLobbyId, ServerIP, ServerPort, ServerTicket, true);        
    }
    else
    {
        bAttemptingServerCreate = false;
        OpenNotFoundPopup();
        CancelGameSearch();
    }
}

function ConnectToPlayfabServer(string LobbyId, string ServerIP, int ServerPort, string ServerTicket, bool bNewServer)
{
    local string OpenCommand;

    OpenCommand = (("open" @ ServerIP) $ ":") $ string(ServerPort);    
    OpenCommand $= ("?AuthTicket=" $ ServerTicket);    
    OpenCommand $= ("?PlayfabPlayerId=" $ Class'GameEngine'.static.GetPlayfabInterface().CachedPlayfabId);
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
    Manager.TimerHelper.SetTimer(float(((bNewServer) ? 20 : ServerConnectTimeout)), false, 'ServerConnectGiveUp', self);
    LogInternal("Going to connect with URL:" @ OpenCommand);
    Outer.ConsoleCommand(OpenCommand);
}

event SetServerConnectGiveUpTimer()
{
    Manager.TimerHelper.SetTimer(float(ServerConnectTimeout), false, 'ServerConnectGiveUp', self);
}

event AddJoinGameCompleteDelegate(OnlineGameSearch LatestGameSearch)
{
    if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
    {
        Class'GameEngine'.static.GetPlayfabInterface().AddQueryServerInfoCompleteDelegate(OnQueryAdditionalServerInfoComplete);
        Class'GameEngine'.static.GetPlayfabInterface().QueryServerInfo(LatestGameSearch.Results[CurrentSearchIndex].GameSettings.LobbyId);        
    }
    else
    {
        GameInterface.AddJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
        GameInterface.JoinOnlineGame(0, 'Game', LatestGameSearch.Results[CurrentSearchIndex]);
    }
}

function ServerConnectGiveUp()
{
    if(bLogSearchInfo)
    {
        LogInternal("KFGFxMenu_StartGame.ServerConnectGiveUp: ServerConnectGiveUp");
    }
    KFGameEngine(Class'KFGameEngine'.static.GetEngine()).KillPendingServerConnection();
}

function OnOpen()
{
    if(Manager != none)
    {
        Manager.SetStartMenuState(GetStartMenuState());
    }
}

function bool OnHandshakeComplete(bool bSuccess, string Description, out int SuppressPasswordRetry)
{
    if(bLogSearchInfo)
    {
        LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete");
    }
    AttemptingJoin = false;
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    Manager.TimerHelper.ClearTimer('ServerConnectGiveUp', self);
    if(bSuccess)
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete: LobbyJoinServer");
        }
        if(Len(LobbyOwnerPassword) > 0)
        {
            OnlineLobby.SetServerPassword(LobbyOwnerPassword);
            if(OptionsComponent.GetPrivacyIndex() == 1)
            {
                Class'GameEngine'.static.GetOnlineSubsystem().SetSharedPassword(LobbyOwnerPassword);
            }
        }
        OnlineLobby.LobbyJoinServer(PendingResolvedAddress);
        PendingResolvedAddress = "";
        bAttemptingServerCreate = false;        
    }
    else
    {
        if(bLogSearchInfo)
        {
            LogInternal("KFGFxMenu_StartGame.OnHandShakeComplete:  TryNextServer");
        }
        GameInterface.DestroyOnlineGame('Game');
        PendingResolvedAddress = "";
        TryNextServer();
    }
    return true;
}

event OnClose()
{
    if(OverviewContainer != none)
    {
        OverviewContainer.ActionScriptVoid("hideSharedContentList");
    }
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
        GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    }
    Manager.CachedProfile.Save(byte(Outer.GetLP().ControllerId));
    if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
    {
        Class'GameEngine'.static.GetPlayfabInterface().ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
        Class'GameEngine'.static.GetPlayfabInterface().ClearQueryServerInfoCompleteDelegate(OnQueryAdditionalServerInfoComplete);
    }
}

function AddLobbyFilter(out array<LobbyFilter> Filters, bool bIsSet, string Key, coerce string Val, bool bNumeric)
{
    local LobbyFilter Filter;

    if(bIsSet)
    {
        Filter.Key = Key;
        Filter.Value = Val;
        Filter.Operator = 0;
        Filter.bNumeric = bNumeric;
        Filters.AddItem(Filter;
    }
}

function BuildServerFilters(OnlineGameInterface GameInterfaceSteam, KFGFxStartGameContainer_Options Options, OnlineGameSearch Search)
{
    local string MapName;
    local int GameMode, GameDifficulty, GameLength;
    local bool AllowInProgress;
    local string GameTagFilters;
    local ActiveLobbyInfo LobbyInfo;

    Search.ClearServerFilters();
    if(!Class'WorldInfo'.static.IsConsoleBuild())
    {
        Search.AddServerFilter("version_match", string(Class'KFGameEngine'.static.GetKFGameVersion()));
    }
    if(OptionsComponent.GetMakeNewServer())
    {
        Search.AddGametagFilter(GameTagFilters, 'bUsedForTakeover', "1");
        Search.AddGametagFilter(GameTagFilters, 'bAvailableForTakeover', "1");        
    }
    else
    {
        MapName = OptionsComponent.GetMapName();
        if(MapName != "")
        {
            Search.AddServerFilter("map", MapName);
        }
        if(((OnlineLobby != none) && OnlineLobby.GetCurrentLobby(LobbyInfo)) && LobbyInfo.Members.Length >= 6)
        {
            Search.AddServerFilter("noplayers", "");            
        }
        else
        {
            Search.AddServerFilter("notfull", "");
        }
        GameMode = OptionsComponent.GetModeIndex();
        if((GameMode >= 0) && !Class'WorldInfo'.static.IsConsoleBuild())
        {
            Search.AddGametagFilter(GameTagFilters, 'Mode', string(GameMode));
        }
        GameDifficulty = OptionsComponent.GetDifficulty();
        if(GameDifficulty >= 0)
        {
            Search.AddGametagFilter(GameTagFilters, 'Difficulty', string(GameDifficulty));
        }
        GameLength = OptionsComponent.GetGameLength();
        if(GameLength >= 0)
        {
            Search.AddGametagFilter(GameTagFilters, 'NumWaves', string(GameLength));
        }
        if(!Class'WorldInfo'.static.IsConsoleBuild())
        {
            Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bRequiresPassword', 0);
        }
        AllowInProgress = OptionsComponent.GetAllowInProgress();
        Search.TestAddBoolGametagFilter(GameTagFilters, !AllowInProgress, 'bInProgress', 0);
        if(!Class'WorldInfo'.static.IsConsoleBuild())
        {
            switch(OptionsComponent.GetServerTypeIndex())
            {
                case 0:
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bCustom', 0);
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bUsesStats', 1);
                    break;
                case 2:
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bCustom', 1);
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bUsesStats', 1);
                    break;
                case 3:
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bUsesStats', 0);
                    break;
                default:
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bCustom', 0);
                    Search.TestAddBoolGametagFilter(GameTagFilters, true, 'bUsesStats', 1);
                    break;
                    break;
            }
        }
    }
    if(Len(GameTagFilters) > 0)
    {
        Search.AddServerFilter("gametagsand", GameTagFilters);
    }
    if(Search.MasterServerSearchKeys.Length > 1)
    {
        Search.AddServerFilter("and", string(Search.MasterServerSearchKeys.Length), 0);
    }
}

function Callback_StartGame()
{
    Callback_StartOfflineGame();
}

function Callback_StartOfflineGame()
{
    Outer.ConsoleCommand("open" @ (MakeMapURL(OptionsComponent)));
}

function StartOnlineGame()
{
    OptionsComponent.UpdateFilters();
    GameInterface.SetMatchmakingTypeMode(2);
    CurrentSearchIndex = 0;
    BuildServerFilters(GameInterface, OptionsComponent, SearchDataStore.GetCurrentGameSearch());
    SearchDataStore.GetCurrentGameSearch().MaxSearchResults = MaxResultsToTry;
    if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
    {
        AttemptingJoin = false;
        Class'GameEngine'.static.GetPlayfabInterface().AddFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);        
    }
    else
    {
        GameInterface.AddFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
    }
    SearchDataStore.ActiveSearchIndex = 0;
    SearchDataStore.GetActiveGameSearch().GameModes.Length = 1;
    SearchDataStore.GetActiveGameSearch().GameModes[0] = Class'KFGameInfo'.default.GameModes[OptionsComponent.GetModeIndex()].FriendlyName;
    if(!SearchDataStore.SubmitGameSearch(byte(Class'UIInteraction'.static.GetPlayerControllerId(0)), false))
    {
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
        if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
        {
            Class'GameEngine'.static.GetPlayfabInterface().ClearFindOnlineGamesCompleteDelegate(OnFindGameServerComplete);
        }        
    }
    else
    {
        bPauseTryingServers = true;
        Manager.TimerHelper.SetTimer(InitialSearchPause, false, 'UnpauseTryingServers', self);
        bSearchingForGame = true;
        OptionsComponent.SetSearching(bSearchingForGame);
    }
}

function ShowServerTakeoverPasswordPrompt()
{
    Manager.OpenPopup(4, Class'KFCommon_LocalizedStrings'.default.SetTakeoverServerPasswordTitle, "", Class'KFCommon_LocalizedStrings'.default.ConfirmString, Class'KFCommon_LocalizedStrings'.default.CancelString, OnSetTakoverServerPassword);
}

function OnSetTakoverServerPassword()
{
    local string Password;

    Password = KFGFxPopup_InputPrompt(Manager.CurrentPopup).PlayerInputString;
    LobbyOwnerPassword = Password;
    StartOnlineGame();
}

// Export UKFGFxMenu_StartGame::execGenerateRandomPassword(FFrame&, void* const)
native function string GenerateRandomPassword();

function Callback_StartOnlineGame()
{
    LobbyOwnerPassword = "";
    if(OptionsComponent.GetMakeNewServer())
    {
        if(OptionsComponent.GetPrivacyIndex() == 2)
        {
            ShowServerTakeoverPasswordPrompt();
            return;            
        }
        else
        {
            if(OptionsComponent.GetPrivacyIndex() == 1)
            {
                LobbyOwnerPassword = GenerateRandomPassword();
            }
        }
    }
    StartOnlineGame();
}

function UnpauseTryingServers()
{
    bPauseTryingServers = false;
    SortServers(SearchDataStore.GetActiveGameSearch());
    TryNextServer();
}

event CancelGameSearch()
{
    local KFOnlineGameSearch ActiveGameSearch;

    ActiveGameSearch = KFOnlineGameSearch(SearchDataStore.GetActiveGameSearch());
    if(ActiveGameSearch != none)
    {
        if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
        {
            Class'GameEngine'.static.GetPlayfabInterface().CancelGameSearch();
            OnCancelSearchComplete(true);            
        }
        else
        {
            GameInterface.AddCancelFindOnlineGamesCompleteDelegate(OnCancelSearchComplete);
            GameInterface.CancelFindOnlineGames();
        }        
    }
    else
    {
        OnCancelSearchComplete(false);
    }
    OptionsComponent.SetHelpText("");
}

function OnCancelSearchComplete(bool bWasSuccessful)
{
    bSearchingForGame = false;
    OptionsComponent.SetSearching(bSearchingForGame);
    Manager.SetSearchingForMatch(bSearchingForGame);
}

function ShowOverview(bool bShowOverview, bool bLeader, bool bInMainMenu, bool bhostInServerBrowser)
{
    ActionScriptVoid("showOverview");
}

defaultproperties
{
    ModeKey="ModeKey"
    DifficultyKey="DifficultyKey"
    MapKey="MapKey"
    WhitelistedKey="WhitelistedKey"
    InProgressKey="InProgress"
    PermissionsKey="PermissionsKey"
    ServerTypeKey="ServerTypeKey"
    GameLengthKey="GameLengthKey"
    FindGameString="HOME"
    MatchmakingString="ONLINE MATCHMAKING"
    ServerBrowserString="Browse Servers"
    GameModeTitle="GAME MODE"
    DifficultyTitle="DIFFICULTY"
    LengthTitle="LENGTH"
    MapTitle="STARTING MAP"
    MutatorTitle="MUTATORS"
    PermissionsTitle="PERMISSIONS"
    ServerTypeString="SERVER TYPE"
    WhiteListedTitle="STATS ENABLED"
    InfoTitle="INFORMATION"
    InProgressString="IN PROGRESS"
    LeaveMenuString="Leaving matchmaking will disband your party. Go to server browser instead?"
    CouldNotFindGameTitleString="Unable To Find Match"
    CouldNotFindGameDescriptionStringPC="No servers matching the search settings were found. Try different filters or use the server browser."
    CouldNotFindGameDescriptionStringOrbis="No servers matching the search settings were found. Try different filters."
    WhiteListedStrings(0)="YES"
    WhiteListedStrings(1)="NO"
    SearchDSName=KFGameSearch
    InitialSearchPause=2
    MaxResultsToTry=20000
    ServerConnectTimeout=2
    StockMaps(0)="kf-bioticslab"
    StockMaps(1)="kf-outpost"
    StockMaps(2)="kf-burningparis"
    StockMaps(3)="kf-voltermanor"
    StockMaps(4)="kf-catacombs"
    StockMaps(5)="kf-evacuationpoint"
    StockMaps(6)="kf-blackforest"
    StockMaps(7)="kf-farmhouse"
    StockMaps(8)="kf-prison"
    StockMaps(9)="kf-containmentstation"
    StockMaps(10)="kf-hostilegrounds"
    SubWidgetBindings=/* Array type was not detected. */
}