/*******************************************************************************
 * AICommand_Crawler_MoveToGoal generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AICommand_Crawler_MoveToGoal extends AICommand_MoveToGoal within KFAIController_ZedCrawler;

static function bool CrawlerMoveToGoal(KFAIController_ZedCrawler AI, Actor NewMoveGoal, optional Actor NewMoveFocus, optional float NewMoveOffset, optional bool bIsValidCache, optional bool bInCanPathfind, optional bool bInAllowedToAttackDuringMove, optional bool bInAllowPartialPath)
{
    local AICommand_Crawler_MoveToGoal Cmd;

    bInCanPathfind = true;
    bInAllowedToAttackDuringMove = true;
    bInAllowPartialPath = true;
    if((AI != none) && NewMoveGoal != none)
    {
        Cmd = new (AI) Class'AICommand_Crawler_MoveToGoal';
        if(Cmd != none)
        {
            if(Controller(NewMoveGoal) != none)
            {
                NewMoveGoal = Controller(NewMoveGoal).Pawn;
            }
            AI.MoveGoal = NewMoveGoal;
            AI.MoveFocus = NewMoveFocus;
            AI.MoveOffset = NewMoveOffset;
            Cmd.MoveToActor = NewMoveGoal;
            Cmd.bValidRouteCache = bIsValidCache;
            Cmd.bCanPathfind = bInCanPathfind;
            Cmd.bAllowedToAttack = bInAllowedToAttackDuringMove;
            Cmd.bAllowPartialPath = bInAllowPartialPath;
            AI.SetBasedPosition(AI.MovePosition, vect(0, 0, 0));
            AI.PushCommand(Cmd);
            return true;
        }
    }
    return false;
}

function bool NotifyLanded(Vector HitNormal, Actor FloorActor)
{
    if((HitNormal.Z >= Outer.Pawn.WalkableFloorZ) && (Outer.Pawn.Physics == 1) || Outer.Pawn.Physics == 2)
    {
        Outer.Pawn.SetPhysics(1);
        return true;
    }
    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal((string(GetFuncName()) $ " setting physics to PHYS_Spider, FloorActor: ") $ string(FloorActor), 'Crawler');
    }
    Outer.Pawn.SetPhysics(8);
    return true;
}

state MovingToGoal
{
    ignores FindDirectPath;

    event BeginState(name PreviousStateName)
    {
        Outer.bSpawnedByEmergeSpecialMove = false;
        super(Object).BeginState(PreviousStateName);
        Outer.DisableSeePlayer(0);
    }

    function bool CanDirectlyReach(Actor Goal)
    {
        local KFPathnode KFP;

        KFP = KFPathnode(Goal);
        if(KFP == none)
        {
            if(Outer.Pawn.Physics == 8)
            {
                return false;
            }
            return super.CanDirectlyReach(Goal);
        }
        if(Outer.Pawn.Physics == 8)
        {
            return false;
            if(KFP.bIsDropDownDest)
            {
                if(!Class'Engine'.static.GetEngine().bDisableAILogging)
                {
                    Outer.AILog_Internal(((string(GetFuncName()) $ " returning false for goal ") $ string(Goal)) $ " because it's a dropdown dest", 'Command_Crawler_MoveToGoal');
                }
                return false;
            }
            if(KFWallPathNode(Goal) != none)
            {
                if(!Class'Engine'.static.GetEngine().bDisableAILogging)
                {
                    Outer.AILog_Internal((string(GetFuncName()) $ " returning false for goal ") $ string(Goal), 'Command_Crawler_MoveToGoal');
                }
                return false;
            }
        }
        return super.CanDirectlyReach(Goal);
    }

    function bool NotifyBaseChange(Actor NewBase, Vector NewFloor)
    {
        if(!Class'Engine'.static.GetEngine().bDisableAILogging)
        {
            Outer.AILog_Internal((((((((string(GetFuncName()) $ " OldBase: ") $ string(Outer.Pawn.Base)) $ " NewBase: ") $ string(NewBase)) $ " NewFloor: ") $ string(NewFloor)) $ " OldFloor: ") $ string(Outer.OldFloor), 'Command_Crawler_MoveToGoal');
        }
        if(((NewFloor != Outer.OldFloor) && NewFloor == vect(0, 0, 1)) && Outer.Pawn.Physics == 8)
        {
            if(!Class'Engine'.static.GetEngine().bDisableAILogging)
            {
                Outer.AILog_Internal(string(GetFuncName()) $ " setting pawn physics back to walking", 'Command_Crawler_MoveToGoal');
            }
            Outer.Pawn.SetPhysics(1);            
        }
        else
        {
            if(((((((NewFloor != Outer.OldFloor) && Outer.IsDoingLatentMove()) && Outer.Pawn != none) && Outer.Pawn.Physics == 8) && NewBase != none) && !NewBase.IsA('Pawn')) && NewBase.bWorldGeometry)
            {
                Outer.AIActionStatus = (("NotifyBaseChange, to " $ string(NewBase)) $ ": But not stopping my movement Dist From Goal: ") $ string(VSize(Outer.MoveTarget.Location - Outer.Pawn.Location));
                if(!Class'Engine'.static.GetEngine().bDisableAILogging)
                {
                    Outer.AILog_Internal((("NotifyBaseChange, to " $ string(NewBase)) $ ": But not stopping my movement Dist From Goal: ") $ string(VSize(Outer.MoveTarget.Location - Outer.Pawn.Location)));
                }
            }
        }
        return false;
    }

    function bool NotifyFallingHitWall(Vector HitNormal, Actor Wall)
    {
        return NotifyHitWall(HitNormal, Wall);
    }

    function bool NotifyHitWall(Vector HitNormal, Actor Wall)
    {
        if(KFDoorActor(Wall) == none)
        {
            if(!Class'Engine'.static.GetEngine().bDisableAILogging)
            {
                Outer.AILog_Internal((((string(GetFuncName()) $ "() Wall: ") $ string(Wall)) $ " HitNormal: ") $ string(HitNormal), 'HitWall');
            }            
        }
        else
        {
            if(((KFDoorActor(Wall).WeldIntegrity <= 0) && KFDoorMarker(KFDoorActor(Wall).MyMarker) != none) && !KFDoorActor(Wall).IsCompletelyOpen())
            {
                Outer.DisableNotifyHitWall(0.25);
                Outer.WaitForDoor(KFDoorActor(Wall));
                if(!Class'Engine'.static.GetEngine().bDisableAILogging)
                {
                    Outer.AILog_Internal(("NotifyHitWall() while in MoveToGoal, Wall: " $ string(Wall)) $ " Using door and waiting for it to open", 'Doors');
                }
                KFDoorActor(Wall).UseDoor(Outer.Pawn);
                return true;
            }
            if(!Class'Engine'.static.GetEngine().bDisableAILogging)
            {
                Outer.AILog_Internal(((((string(GetFuncName()) $ "() Wall: ") $ string(Wall)) $ " HitNormal: ") $ string(HitNormal)) $ " ran into a door!", 'Doors');
            }
            if((!KFDoorActor(Wall).IsCompletelyOpen() && KFDoorActor(Wall).WeldIntegrity > 0) && (Outer.Pawn.Anchor == KFDoorActor(Wall).MyMarker) || (Outer.DoorEnemy != none) && (Outer.DoorEnemy == KFDoorActor(Wall)) || Outer.PendingDoor == KFDoorActor(Wall))
            {
                if(!Class'Engine'.static.GetEngine().bDisableAILogging)
                {
                    Outer.AILog_Internal((string(GetFuncName()) $ "() calling NotifyAttackDoor for ") $ string(Wall), 'Doors');
                }
                Outer.NotifyAttackDoor(KFDoorActor(Wall));
                return true;
            }
        }
        if(!Class'Engine'.static.GetEngine().bDisableAILogging)
        {
            Outer.AILog_Internal((((string(GetFuncName()) $ " Wall: ") $ string(Wall)) $ " HitNormal: ") $ string(HitNormal), 'Command_Crawler_MoveToGoal');
        }
        if(!Wall.bCanStepUpOn)
        {
            WarnInternal(((string(GetFuncName()) $ "() Wall ") $ string(Wall)) $ " bCanStepUpOn is FALSE");
            return false;
        }
        if(Outer.Pawn.Physics == 2)
        {
            if(!Class'Engine'.static.GetEngine().bDisableAILogging)
            {
                Outer.AILog_Internal(((string(GetFuncName()) $ " Wall: ") $ string(Wall)) $ " setting physics to PHYS_Spider", 'Crawler');
            }
            Outer.Pawn.SetPhysics(8);
            Outer.Pawn.SetBase(Wall, HitNormal);
            Outer.DisableNotifyHitWall(1);
            return true;
        }
        return false;
    }
HandleNewFloor:

    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal(((((string(self) $ " HandleNewFloor label at ") $ string(Outer.Pawn.Location)) $ " - trying to move ahead (base: ") $ string(Outer.Pawn.Base)) $ ")", 'Command_Crawler_MoveToGoal');
    }
    Outer.MoveTo(Outer.Pawn.Location + (vector(Outer.Pawn.Rotation) * 512));
    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal((((string(self) $ " HandleNewFloor done extra move, location is now ") $ string(Outer.Pawn.Location)) $ " base is now ") $ string(Outer.Pawn.Base), 'Command_Crawler_MoveToGoal');
    }
    if(!HasReachedMoveGoal())
    {
        Outer.bReevaluatePath = true;
        NotifyNeedRepath();
    }
    stop;        
}
