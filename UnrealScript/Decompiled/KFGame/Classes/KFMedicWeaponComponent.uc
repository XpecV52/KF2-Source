/*******************************************************************************
 * KFMedicWeaponComponent generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMedicWeaponComponent extends Actor
    abstract
    notplaceable
    hidecategories(Navigation);

const DEFAULT_FIREMODE = 0;
const ALTFIRE_FIREMODE = 1;
const ShootDartAnim = 'Shoot_Dart';
const ShootDartIronAnim = 'Shoot_Iron_Dart';

var KFWeapon KFW;
var byte AmmoCost;
var repnotify byte HealingDartAmmo;
var byte StoredPrimaryAmmo;
var byte StoredSecondaryAmmo;
var bool bOpticsPaused;
var bool bRechargeHealAmmo;
var class<DamageType> HealingDartDamageType;
var int HealAmount;
var float HealFullRechargeSeconds;
var float HealingIncrement;
var float HealRechargePerSecond;
var AkEvent HealImpactSoundPlayEvent;
var AkEvent HurtImpactSoundPlayEvent;
var WeaponFireSndInfo DartFireSnd;
var float HealDartShotWeakZedGrabCooldown;
var int DartMaxRecoilPitch;
var int DartMinRecoilPitch;
var int DartMaxRecoilYaw;
var int DartMinRecoilYaw;
var ForceFeedbackWaveform HealingDartWaveForm;
var class<KFGFxWorld_MedicOptics> OpticsUIClass;
var KFGFxWorld_MedicOptics OpticsUI;

replication
{
     if(bNetDirty && bRechargeHealAmmo)
        HealingDartAmmo;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'HealingDartAmmo')
    {
        KFW.AmmoCount[1] = HealingDartAmmo;        
    }
    else
    {
        super.ReplicatedEvent(VarName);
    }
}

simulated function Init(KFWeapon InKFW, byte InAmmoCost)
{
    KFW = InKFW;
    Instigator = InKFW.Instigator;
    AmmoCost = InAmmoCost;
}

simulated event Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    if(KFW.AmmoCount[1] < KFW.MagazineCapacity[1])
    {
        HealAmmoRegeneration(DeltaTime);
    }
    if(Instigator.IsLocallyControlled() && Instigator.Weapon == KFW)
    {
        UpdateOpticsUI();
    }
}

function StartHealRecharge()
{
    local KFPerk InstigatorPerk;
    local float UsedHealRechargeTime;

    if(!bRechargeHealAmmo)
    {
        return;
    }
    if(Role == ROLE_Authority)
    {
        InstigatorPerk = KFW.GetPerk();
        UsedHealRechargeTime = HealFullRechargeSeconds * KFW.GetUpgradeHealRechargeMod(KFW.CurrentWeaponUpgradeIndex);
        InstigatorPerk.ModifyHealerRechargeTime(UsedHealRechargeTime);
        HealRechargePerSecond = float(KFW.MagazineCapacity[1]) / UsedHealRechargeTime;
        HealingIncrement = 0;
    }
}

function HealAmmoRegeneration(float DeltaTime)
{
    if(!bRechargeHealAmmo)
    {
        return;
    }
    if(Role == ROLE_Authority)
    {
        HealingIncrement += (HealRechargePerSecond * DeltaTime);
        if((HealingIncrement >= 1) && KFW.AmmoCount[1] < KFW.MagazineCapacity[1])
        {
            ++ KFW.AmmoCount[1];
            HealingIncrement -= 1;
            if(KFW.bAllowClientAmmoTracking)
            {
                HealingDartAmmo = KFW.AmmoCount[1];
            }
        }
    }
}

simulated function InitOptics()
{
    local KFInventoryManager KFIM;

    if((OpticsUI == none) && WorldInfo.NetMode != NM_DedicatedServer)
    {
        KFIM = KFInventoryManager(KFW.InvManager);
        if(KFIM != none)
        {
            OpticsUI = KFGFxWorld_MedicOptics(KFIM.GetOpticsUIMovie(OpticsUIClass));
        }
    }
}

simulated function ShutdownOptics()
{
    local KFInventoryManager KFIM;
    local KFWeapon InvKFW;

    if(OpticsUI != none)
    {
        KFIM = KFInventoryManager(KFW.InvManager);
        if(KFIM != none)
        {
            foreach KFIM.InventoryActors(Class'KFWeapon', InvKFW)
            {
                if(((InvKFW != KFW) && (InvKFW.MedicComp != none) && InvKFW.MedicComp.OpticsUI.Class == OpticsUI.Class) || (KFWeap_MedicBase(InvKFW) != none) && KFWeap_MedicBase(InvKFW).OpticsUI.Class == OpticsUI.Class)
                {                    
                    return;
                }                
            }            
            KFIM.RemoveOpticsUIMovie(OpticsUI.Class);
            OpticsUI.Close();
            OpticsUI = none;
        }
    }
}

simulated function UpdateOpticsUI(optional bool bForceUpdate)
{
    local int DefAmmoCount, AltAmmoCount;

    DefAmmoCount = 0;
    if((KFW.Instigator != none) && KFW.Instigator.Weapon == KFW)
    {
        if(OpticsUI == none)
        {
            InitOptics();
        }
        if((DefAmmoCount != StoredPrimaryAmmo) || bForceUpdate)
        {
            StoredPrimaryAmmo = byte(DefAmmoCount);
            OpticsUI.SetPrimaryAmmo(StoredPrimaryAmmo);
        }
        AltAmmoCount = KFW.GetTotalAmmoAmount(1);
        if((AltAmmoCount != StoredSecondaryAmmo) || bForceUpdate)
        {
            StoredSecondaryAmmo = byte(AltAmmoCount);
            OpticsUI.SetHealerCharge(byte(StoredSecondaryAmmo * 100));
        }
        if(OpticsUI.MinPercentPerShot != float(AltAmmoCount))
        {
            OpticsUI.SetShotPercentCost(float(AmmoCost));
        }
    }
}

simulated function bool ProcessInstantHitEx(ImpactInfo Impact)
{
    local KFPawn HealTarget;
    local float AdjustedHealAmount;

    HealTarget = KFPawn(Impact.HitActor);
    if(HealTarget == none)
    {
        return false;
    }
    if(WorldInfo.GRI.OnSameTeam(Instigator, HealTarget))
    {
        if(KFPlayerController(Instigator.Controller) != none)
        {
            KFPlayerController(Instigator.Controller).AddShotsHit(1);
        }
        AdjustedHealAmount = float(HealAmount) * KFW.GetUpgradeHealMod(KFW.CurrentWeaponUpgradeIndex);
        HealTarget.HealDamage(int(AdjustedHealAmount), Instigator.Controller, HealingDartDamageType);
        if((HealImpactSoundPlayEvent != none) && !KFW.bSuppressSounds)
        {
            HealTarget.PlaySoundBase(HealImpactSoundPlayEvent, false, false,, Impact.HitLocation);
        }
        return true;        
    }
    else
    {
        if(((HurtImpactSoundPlayEvent != none) && HealTarget != none) && !KFW.bSuppressSounds)
        {
            HealTarget.PlaySoundBase(HurtImpactSoundPlayEvent, false, false,, Impact.HitLocation);
        }
        return false;
    }
}

simulated event AdjustRecoil(byte CurrentFireMode)
{
    if(CurrentFireMode == 1)
    {
        KFW.minRecoilPitch = DartMinRecoilPitch;
        KFW.maxRecoilPitch = DartMaxRecoilPitch;
        KFW.minRecoilYaw = DartMinRecoilYaw;
        KFW.maxRecoilYaw = DartMaxRecoilYaw;        
    }
    else
    {
        KFW.minRecoilPitch = KFW.default.minRecoilPitch;
        KFW.maxRecoilPitch = KFW.default.maxRecoilPitch;
        KFW.minRecoilYaw = KFW.default.minRecoilYaw;
        KFW.maxRecoilYaw = KFW.default.maxRecoilYaw;
    }
}

simulated function AdjustShakeView(byte CurrentFireMode)
{
    if(CurrentFireMode == 1)
    {
        KFW.WeaponFireWaveForm = HealingDartWaveForm;        
    }
    else
    {
        KFW.WeaponFireWaveForm = KFW.default.WeaponFireWaveForm;
    }
}

simulated function OnWeaponFireAmmunition(byte CurrentFireMode)
{
    if(CurrentFireMode == 1)
    {
        KFW.SetWeakZedGrabCooldownOnPawn(HealDartShotWeakZedGrabCooldown);
        StartHealRecharge();
    }
}

simulated function bool ShouldStartFire(byte FireModeNum)
{
    return (FireModeNum != 1) || KFW.HasAmmo(1, AmmoCost);
}

function OnWeaponGivenTo(Pawn thisPawn, optional bool bDoNotActivate)
{
    if((Role == ROLE_Authority) && !thisPawn.IsLocallyControlled())
    {
        StartHealRecharge();
    }
}

simulated function PlayFiringSound()
{
    KFW.WeaponPlayFireSound(DartFireSnd.DefaultCue, DartFireSnd.FirstPersonCue);
}

simulated function name GetWeaponFireAnim()
{
    return ((KFW.bUsingSights) ? 'Shoot_Iron_Dart' : 'Shoot_Dart');
}

simulated function OnClientWeaponSet()
{
    InitOptics();
    StartHealRecharge();
}

simulated function OnWeaponRemovedFromInvManager()
{
    ShutdownOptics();
}

simulated function OnWeaponAttachedTo()
{
    if(OpticsUI != none)
    {
        OpticsUI.SetPause(false);
        OpticsUI.ClearLockOn();
        UpdateOpticsUI(true);
        OpticsUI.SetShotPercentCost(float(AmmoCost));
    }
}

simulated function OnWeaponDetached()
{
    if((Instigator != none) && Instigator.Weapon == KFW)
    {
        if(OpticsUI != none)
        {
            OpticsUI.SetPause();
        }
    }
}

defaultproperties
{
    HealingDartAmmo=100
    bRechargeHealAmmo=true
    HealAmount=20
    HealFullRechargeSeconds=15
    HealDartShotWeakZedGrabCooldown=0.5
    DartMaxRecoilPitch=250
    DartMinRecoilPitch=200
    DartMaxRecoilYaw=100
    DartMinRecoilYaw=-100
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bHidden=true
    bOnlyRelevantToOwner=true
}