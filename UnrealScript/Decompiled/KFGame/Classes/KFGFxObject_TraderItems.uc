/*******************************************************************************
 * KFGFxObject_TraderItems generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxObject_TraderItems extends Object
    native(UI);

enum TraderWeaponStat
{
    TWS_Damage,
    TWS_RateOfFire,
    TWS_Range,
    TWS_Penetration,
    TWS_Block,
    TWS_Parry,
    TWS_MagazineSize,
    TWS_AmmoCapacity,
    TWS_HealAmount,
    TWS_RechargeTime,
    TWS_MAX
};

enum EFilterTypeUI
{
    FT_Pistol,
    FT_Shotgun,
    FT_Rifle,
    FT_Projectile,
    FT_Flame,
    FT_Electric,
    FT_Explosive,
    FT_Assault,
    FT_Melee,
    FT_SMG,
    FT_MAX
};

struct native STraderItemWeaponStats
{
    var KFGFxObject_TraderItems.TraderWeaponStat StatType;
    var float StatValue;

    structdefaultproperties
    {
        StatType=TraderWeaponStat.TWS_Damage
        StatValue=0
    }
};

struct native STraderItem
{
    /** Link to weapon defintion class */
    var() class<KFWeaponDefinition> WeaponDef<AllowAbstract=>;
    var name ClassName;
    var name SingleClassName;
    var name DualClassName;
    var class<KFPerk> AssociatedPerkClass;
    var int MaxSpareAmmo;
    var int InitialSpareMags;
    var int MaxSecondaryAmmoCount;
    var byte MagazineCapacity;
    var byte BlocksRequired;
    var string SecondaryAmmoImagePath;
    var KFGFxObject_TraderItems.EFilterTypeUI TraderFilter;
    var byte InventoryGroup;
    var float GroupPriority;
    /** Dynamic array of stats to display. Each weapon has the opportunity to set its own stats. */
    var() editconst array<editconst STraderItemWeaponStats> WeaponStats;

    structdefaultproperties
    {
        WeaponDef=none
        ClassName=None
        SingleClassName=None
        DualClassName=None
        AssociatedPerkClass=none
        MaxSpareAmmo=0
        InitialSpareMags=0
        MaxSecondaryAmmoCount=0
        MagazineCapacity=0
        BlocksRequired=0
        SecondaryAmmoImagePath=""
        TraderFilter=EFilterTypeUI.FT_Pistol
        InventoryGroup=0
        GroupPriority=0
        WeaponStats=none
    }
};

var() editoronly transient bool bBuildItemInfo;
/** main list of all items available for purchase at trader */
var() array<STraderItem> SaleItems;
/** Cost per 1 armor point */
var() int ArmorPrice;
/** Cost per 1 grenade */
var() int GrenadePrice;
var class<KFWeaponDefinition> ArmorDef;
var array<STraderItemWeaponStats> KnifeStats;
var string OffPerkIconPath;

// Export UKFGFxObject_TraderItems::execSetItemsInfo(FFrame&, void* const)
native function SetItemsInfo(out array<STraderItem> ItemArray);

final function bool GetItemIndicesFromArche(out byte ItemIndex, name WeaponClassName)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < SaleItems.Length)
    {
        if(WeaponClassName == SaleItems[I].ClassName)
        {
            ItemIndex = I;
            return true;
        }
        ++ I;
        goto J0x0C;
    }
    return false;
}

defaultproperties
{
    ArmorPrice=3
    GrenadePrice=40
    ArmorDef=Class'KFWeapDef_Armor'
    KnifeStats(0)=(StatType=TraderWeaponStat.TWS_Damage,StatValue=64)
    KnifeStats(1)=(StatType=TraderWeaponStat.TWS_RateOfFire,StatValue=100)
    KnifeStats(2)=(StatType=TraderWeaponStat.TWS_Range,StatValue=2)
    OffPerkIconPath="UI_TraderMenu_TEX.UI_WeaponSelect_Trader_Perk"
}