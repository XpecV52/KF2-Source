/*******************************************************************************
 * KFGiblet generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGiblet extends Actor
    notplaceable
    hidecategories(Navigation);

var export editinline MeshComponent GibMeshComp;
var KFPawnSoundGroup SoundGroup;
var float LastCollisionTime;

simulated function LifespanTimer()
{
    if((LifeSpan < 3.5) && PlayerCanSeeMe())
    {
        LifeSpan = 3.5;
    }
    SetTimer(2, false, 'LifespanTimer');
}

simulated function SetMesh(KFGibletInfo InGibInfo)
{
    local editinline StaticMeshComponent SMC;
    local editinline SkeletalMeshComponent SKMC;

    if(InGibInfo.GibStaticMesh != none)
    {
        GibMeshComp = new (self) Class'KFGibStaticMeshComponent';
        CollisionComponent = GibMeshComp;
        SMC = StaticMeshComponent(GibMeshComp);
        SMC.SetScale(InGibInfo.DrawScale);
        if(InGibInfo.CullDistance > 0)
        {
            SMC.SetCullDistance(float(InGibInfo.CullDistance));
        }
        AttachComponent(GibMeshComp);
        SMC.SetStaticMesh(InGibInfo.GibStaticMesh);        
    }
    else
    {
        if((InGibInfo.GibSkelMesh != none) && InGibInfo.GibPhysAsset != none)
        {
            GibMeshComp = new (self) Class'KFGibSkeletalMeshComponent';
            CollisionComponent = GibMeshComp;
            SKMC = SkeletalMeshComponent(GibMeshComp);
            SKMC.SetSkeletalMesh(InGibInfo.GibSkelMesh);
            SKMC.SetPhysicsAsset(InGibInfo.GibPhysAsset);
            SKMC.SetScale(InGibInfo.DrawScale);
            if(InGibInfo.CullDistance > 0)
            {
                SKMC.SetCullDistance(float(InGibInfo.CullDistance));
            }
            AttachComponent(GibMeshComp);
            SKMC.SetHasPhysicsAssetInstance(true);            
        }
        else
        {
            Destroy();
        }
    }
    if(((GibMeshComp != none) && !WorldInfo.bDropDetail) && WorldInfo.GetDetailMode() > 1)
    {
        GibMeshComp.SetNotifyRigidBodyCollision(true);
    }
}

simulated event RigidBodyCollision(PrimitiveComponent HitComponent, PrimitiveComponent OtherComponent, const out CollisionImpactData RigidCollisionData, int ContactIndex)
{
    local int I;
    local KFGoreManager GoreManager;
    local RigidBodyContactInfo ContactInfo;

    GoreManager = KFGoreManager(WorldInfo.MyGoreEffectManager);
    if((GoreManager != none) && (WorldInfo.TimeSeconds - LastCollisionTime) > GoreManager.GetTimeBetweenGibBloodSplats())
    {
        if(((OtherComponent != none) && OtherComponent.Owner != none) && !OtherComponent.Owner.IsA('KFPawn_Monster'))
        {
            SoundGroup.PlayGibletCollisionSound(self, RigidCollisionData.ContactInfos[ContactIndex].ContactPosition);
            I = 0;
            J0x164:

            if(I < RigidCollisionData.ContactInfos.Length)
            {
                ContactInfo = RigidCollisionData.ContactInfos[I];
                GoreManager.LeaveAPersistentBloodSplat(ContactInfo.ContactPosition, -ContactInfo.ContactNormal);
                ++ I;
                goto J0x164;
            }
            LastCollisionTime = WorldInfo.TimeSeconds;
        }
    }
}

defaultproperties
{
    Physics=EPhysics.PHYS_RigidBody
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    TickGroup=ETickingGroup.TG_PostAsyncWork
    bDestroyedByInterpActor=true
    bGameRelevant=true
    bCollideActors=true
    bProjTarget=true
    bNoEncroachCheck=true
    LifeSpan=10
}