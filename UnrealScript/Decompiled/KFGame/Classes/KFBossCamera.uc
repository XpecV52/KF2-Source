/*******************************************************************************
 * KFBossCamera generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFBossCamera extends GameCameraBase;

struct CameraOffsets
{
    var Vector ViewOffset;
    var Vector RotOffset;
    var int CameraDistance;

    structdefaultproperties
    {
        ViewOffset=(X=0,Y=0,Z=0)
        RotOffset=(X=0,Y=0,Z=0)
        CameraDistance=0
    }
};

var CameraOffsets BaseOffsets;
var CameraOffsets BackupOffsets;
var CameraOffsets DeadOffsets;
var export editinline PointLightComponent PointLightTemplate;
var export editinline transient PointLightComponent PointLight;
var KFInterface_MonsterBoss ViewedBoss;

function OnBecomeActive(GameCameraBase NewCamera)
{
    if((PointLight == none) && PointLightTemplate != none)
    {
        PointLight = new (self) Class'PointLightComponent' (PointLightTemplate);
        PointLight.SetEnabled(true);
    }
}

function OnBecomeInActive(GameCameraBase NewCamera)
{
    if(((PlayerCamera != none) && PlayerCamera.PCOwner != none) && PlayerCamera.PCOwner.Pawn != none)
    {
        PlayerCamera.PCOwner.SetViewTarget(PlayerCamera.PCOwner.Pawn);
    }
    if(PointLight != none)
    {
        if(NotEqual_InterfaceInterface(ViewedBoss, (none)))
        {
            ViewedBoss.GetMonsterPawn().DetachComponent(PointLight);
        }
        PointLight.SetEnabled(false);
        PointLight = none;
    }
    ViewedBoss = none;
}

function UpdateCamera(Pawn P, GamePlayerCamera CameraActor, float DeltaTime, out TViewTarget OutVT)
{
    local Vector Loc, X, Y, Z;
    local Rotator Rot;
    local CameraOffsets FinalOffsets;

    if(EqualEqual_InterfaceInterface(ViewedBoss, (none)))
    {
        ViewedBoss = KFInterface_MonsterBoss(P);
    }
    if(((P != none) && PointLight != none) && !PointLight.bAttached)
    {
        if(NotEqual_InterfaceInterface(ViewedBoss, (none)))
        {
            ViewedBoss.GetMonsterPawn().AttachComponent(PointLight);
        }
        PointLight.SetTranslation(Loc - OutVT.Target.Location);
    }
    if((NotEqual_InterfaceInterface(ViewedBoss, (none)) && ViewedBoss.UseAnimatedBossCamera()) && ViewedBoss.GetBossCameraSocket() != 'None')
    {
        ViewedBoss.GetMonsterPawn().Mesh.GetSocketWorldLocationAndRotation(ViewedBoss.GetBossCameraSocket(), Loc, Rot);
        GetAxes(Rot, X, Y, Z);
        Loc += (((X * ViewedBoss.GetBossCameraOffset().X) + (Y * ViewedBoss.GetBossCameraOffset().Y)) + (Z * ViewedBoss.GetBossCameraOffset().Z));
        OutVT.POV.Location = Loc;
        OutVT.POV.Rotation = Rot;
        PlayerCamera.ApplyCameraModifiers(DeltaTime, OutVT.POV);        
    }
    else
    {
        FinalOffsets = (((P != none) && P.IsAliveAndWell()) ? BaseOffsets : DeadOffsets);
        if(!GetOffsets(OutVT.Target, CameraActor, FinalOffsets, Loc, Rot))
        {
            GetOffsets(OutVT.Target, CameraActor, BackupOffsets, Loc, Rot);
        }
        OutVT.POV.Location = Loc;
        OutVT.POV.Rotation = Rot;
    }
}

function bool GetOffsets(Actor Target, GamePlayerCamera CameraActor, out CameraOffsets InOffsets, out Vector InLoc, out Rotator InRot)
{
    local Vector pos, HitLocation, HitNormal;
    local Actor HitActor;

    InLoc = Target.Location;
    InRot = Target.Rotation;
    InRot.Yaw += int(InOffsets.RotOffset.X);
    InRot.Pitch += int(InOffsets.RotOffset.Y);
    InLoc += (InOffsets.ViewOffset >> InRot);
    pos = InLoc - (vector(InRot) * float(InOffsets.CameraDistance));
    HitActor = CameraActor.Trace(HitLocation, HitNormal, pos, InLoc, false, vect(12, 12, 12));
    InLoc = ((HitActor == none) ? pos : HitLocation);
    return HitActor == none;
}

defaultproperties
{
    BaseOffsets=(ViewOffset=(X=0,Y=85,Z=90),RotOffset=(X=38000,Y=1200,Z=0),CameraDistance=250)
    BackupOffsets=(ViewOffset=(X=0,Y=0,Z=65),RotOffset=(X=32768,Y=0,Z=0),CameraDistance=300)
    DeadOffsets=(ViewOffset=(X=0,Y=0,Z=-50),RotOffset=(X=38000,Y=-1500,Z=0),CameraDistance=200)
    begin object name=PointLightTemplate class=PointLightComponent
        Radius=250
        FalloffExponent=10
        LightColor=(B=255,G=255,R=255,A=255)
        bEnabled=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFBossCamera.PointLightTemplate'
    PointLightTemplate=PointLightTemplate
}