/*******************************************************************************
 * KFWallPathNode generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWallPathNode extends KFPathnode
    native(Waypoint)
    hidecategories(Navigation,Lighting,LightColor,Force);

var duplicatetransient const float MaxJumpDist;
/** If true, Crawlers will attempt to jump from the floor to this node when attempting to move from the floor to a wall */
var() duplicatetransient bool bMustJumpTo;
var duplicatetransient bool bAutoConnectDropDownNodes;
/** KFPathnodes on the default floor will not add a floor-to-wall connection to this wall node if the distance between the nodes exceeds this value. */
var() duplicatetransient float MaxFloorToWallDistance;
/**  
 *Maximum allowed distance (Unreal units) to nodes on the ground - this is almost always going to be for KFWallPathNode to KFPathnode connections.
 *       Pawns can drop to floor if within distance.
 */
var() duplicatetransient float Max2DDistToFloorNodes;
/** Maximum allowed distance (Unreal units) to nodes on other walls or ceiling if I'm not on a ceiling (excluding the real floor, which is handled by MaxDistToFloorNodes */
var() duplicatetransient float MaxDistToNodesOnOtherFloors;
/** Maximum height distance (UU) to create a wall-to-floor dropdown reachspec from this node to nearby pathnodes on the floor */
var() duplicatetransient float MaxDropFromWallDistance;
/** Auto-generated during pathbuilding. This is a reference to the KFPathNode, if any, that a Crawler can drop down to from this wall node. */
var() duplicatetransient editconst KFPathnode DropDownNode;

// Export UKFWallPathNode::execIsUsableAnchorFor(FFrame&, void* const)
native function bool IsUsableAnchorFor(Pawn P);

simulated event string GetDebugAbbrev()
{
    return "WPN";
}

event int SpecialCost(Pawn Seeker, ReachSpec Path)
{
    return super(NavigationPoint).SpecialCost(Seeker, Path);
}

event bool Accept(Actor Incoming, Actor Source)
{
    return super(NavigationPoint).Accept(Incoming, Source);
}

event float DetourWeight(Pawn Other, float PathWeight)
{
    return super(NavigationPoint).DetourWeight(Other, PathWeight);
}

event bool SuggestMovePreparation(Pawn Other)
{
    return Other.SpecialMoveTo(Other.Anchor, self, Other.Controller.MoveTarget);
}

defaultproperties
{
    MaxJumpDist=512
    MaxFloorToWallDistance=100
    Max2DDistToFloorNodes=96
    MaxDistToNodesOnOtherFloors=300
    MaxDropFromWallDistance=350
    WallReachSpecClass=Class'WallReachSpec'
    bSpecialMove=true
    bWallNode=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFWallPathNode.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFWallPathNode.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFWallPathNode.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFWallPathNode.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFWallPathNode.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFWallPathNode.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFWallPathNode.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__KFWallPathNode.PathRenderer'
    Components(4)=PathRenderer
    EditorIconColor=(B=255,G=50,R=50,A=255)
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFWallPathNode.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}