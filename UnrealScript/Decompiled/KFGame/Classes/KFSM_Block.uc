/*******************************************************************************
 * KFSM_Block generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Block extends KFSM_PlaySingleAnim;

var const array<AnimVariants> BlockAnims;
var protected KFPawn_Monster MyMonsterPawn;
var protected int NumBlocks;
var protected KFPawn.EPawnOctant ReactionDir;
var protected bool bPlayedBlockBreak;

static function byte PackBlockSMFLags(byte BlockDir)
{
    local byte Variant;

    Variant = byte(Rand(2));
    return byte(BlockDir + (Variant << 4));
}

protected function bool InternalCanDoSpecialMove()
{
    return !KFPOwner.IsDoingSpecialMove() || KFPOwner.IsDoingSpecialMove(16);
}

function bool CanOverrideMoveWith(name NewMove)
{
    if(NewMove == Class'KFSM_MeleeAttack'.default.Handle)
    {
        return true;
    }
    return super(GameSpecialMove).CanOverrideMoveWith(NewMove);
}

function bool CanChainMove(name NextMove)
{
    return NextMove == Class.Name;
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    if(MyMonsterPawn == none)
    {
        MyMonsterPawn = KFPawn_Monster(KFPOwner);
    }
    bPlayedBlockBreak = false;
    ReactionDir = 8;
    NumBlocks = 1;
    if(MyMonsterPawn.bIsSprinting)
    {
        MyMonsterPawn.SetSprinting(false);
    }
    if(MyMonsterPawn.Role == ROLE_Authority)
    {
        MyMonsterPawn.SetTimer(MyMonsterPawn.GetBlockSettings().Duration, false, 'Timer_BlockDurationExpired', self);
        MyMonsterPawn.SetTimer(BlendInTime, false, 'Timer_EnableBlocking', self);
    }
    super.SpecialMoveStarted(bForced, PrevMove);
}

function PlayAnimation()
{
    local byte Type, Variant;

    Type = byte(MyMonsterPawn.SpecialMoveFlags & 15);
    Variant = byte(MyMonsterPawn.SpecialMoveFlags >> 4);
    AnimName = BlockAnims[Type].Anims[Variant];
    super.PlayAnimation();
    MyMonsterPawn.SetTimer(MyMonsterPawn.WorldInfo.DeltaSeconds, false, 'Timer_ResetSpecialMoveFlags', self);
    MyMonsterPawn.bForceNetUpdate = true;
}

function Timer_ResetSpecialMoveFlags()
{
    MyMonsterPawn.SpecialMoveFlags = 255;
}

function SpecialMoveFlagsUpdated()
{
    local KFPawn.EPawnOctant BlockDir;

    if((MyMonsterPawn.SpecialMoveFlags != 255) && !MyMonsterPawn.IsTimerActive('Timer_BlockBroken', self))
    {
        ++ NumBlocks;
        if(float(NumBlocks) > MyMonsterPawn.GetBlockSettings().MaxBlocks)
        {
            BlockDir = byte(MyMonsterPawn.SpecialMoveFlags & 15);
            if(BlockDir == 3)
            {
                ReactionDir = 4;                
            }
            else
            {
                if(BlockDir == 2)
                {
                    ReactionDir = 5;                    
                }
                else
                {
                    ReactionDir = 0;
                }
            }
            MyMonsterPawn.ClearTimer('Timer_BlockDurationExpired', self);
            MyMonsterPawn.SetTimer(BlendInTime, false, 'Timer_BlockBroken', self);            
        }
        else
        {
            if(MyMonsterPawn.Role == ROLE_Authority)
            {
                MyMonsterPawn.SetTimer(MyMonsterPawn.GetBlockSettings().Duration, false, 'Timer_BlockDurationExpired', self);
            }
        }
        PlayAnimation();
    }
}

function Timer_EnableBlocking()
{
    MyMonsterPawn.bIsBlocking = true;
}

function Timer_BlockDurationExpired()
{
    if(MyMonsterPawn != none)
    {
        MyMonsterPawn.EndSpecialMove();
    }
}

function Timer_BlockBroken()
{
    bPlayedBlockBreak = true;
    MyMonsterPawn.StopBodyAnim(AnimStance, BlendOutTime);
    MyMonsterPawn.PawnAnimInfo.PlayHitReactionAnim(MyMonsterPawn, 2, ReactionDir);
    MyMonsterPawn.EndSpecialMove();
}

function NotifyHitReactionInterrupt();

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    super(KFSpecialMove).SpecialMoveEnded(PrevMove, NextMove);
    if(MyMonsterPawn != none)
    {
        if(!bPlayedBlockBreak)
        {
            MyMonsterPawn.StopBodyAnim(AnimStance, BlendOutTime);
        }
        if(MyMonsterPawn.Role == ROLE_Authority)
        {
            MyMonsterPawn.ClearTimer('Timer_ResetSpecialMoveFlags', self);
            MyMonsterPawn.ClearTimer('Timer_EnableBlocking', self);
            MyMonsterPawn.ClearTimer('Timer_BlockDurationExpired', self);
            MyMonsterPawn.ClearTimer('Timer_BlockBroken', self);
            MyMonsterPawn.bIsBlocking = false;
            MyMonsterPawn.LastBlockTime = MyMonsterPawn.WorldInfo.TimeSeconds;
        }
    }
}

defaultproperties
{
    BlockAnims(0)=(Anims=(Block_Idle,Block_Idle))
    BlockAnims(1)=(Anims=(Block_Idle,Block_Idle))
    BlockAnims(2)=(Anims=(Block_R,Block_R))
    BlockAnims(3)=(Anims=(Block_L,Block_L))
    AnimStance=EAnimSlotStance.EAS_UpperBody
    bLoopAnim=true
    bCanBeInterrupted=true
    BlendInTime=0.2
    Handle=KFSM_Block
}