/*******************************************************************************
 * KFPickupFactory generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPickupFactory extends PickupFactory
    abstract
    native
    hidecategories(Navigation,Lighting,LightColor,Force);

var bool bToBeActivated;
/** If TRUE, will not be added to the standard pickup list, and relies on kismet to enable/disable */
var() bool bKismetDriven;
/** [KISMET ONLY] Overrides the respawn time set in the InventoryType by the RespawnTime property */
var() bool bUseRespawnTimeOverride<EditCondition=bKismetDriven>;
/** [KISMET ONLY] Whether this pickup factory is enabled at the start of play, or spawns in disabled */
var() bool bEnabledAtStart<EditCondition=bKismetDriven>;
var transient bool bKismetEnabled;
/** [KISMET ONLY] Time, in seconds, that it will take this pickup to respawn again after being picked up */
var() float RespawnTime<EditCondition=bUseRespawnTimeOverride|ClampMin=1.0|Multiple=1.0>;

function Reset()
{
    if(bKismetDriven)
    {
        SetInitialState();        
    }
    else
    {
        bToBeActivated = false;
        GotoState('Pickup');
    }
}

simulated event SetInitialState()
{
    if(!bKismetDriven || Role < ROLE_Authority)
    {
        return;
    }
    bKismetEnabled = bEnabledAtStart;
    if(bEnabledAtStart)
    {
        GotoState('Pickup');        
    }
    else
    {
        GotoState('Disabled');
    }
}

function OnToggle(SeqAct_Toggle Action)
{
    if(!bKismetDriven)
    {
        return;
    }
    if(Action.InputLinks[0].bHasImpulse)
    {
        bKismetEnabled = true;        
    }
    else
    {
        if(Action.InputLinks[1].bHasImpulse)
        {
            bKismetEnabled = false;            
        }
        else
        {
            if(Action.InputLinks[2].bHasImpulse)
            {
                bKismetEnabled = !bKismetEnabled;
            }
        }
    }
    if(bKismetEnabled)
    {
        if(!IsInState('Pickup'))
        {
            GotoState('Pickup');
        }        
    }
    else
    {
        if(!IsInState('Disabled'))
        {
            GotoState('Disabled');
        }
    }
}

function SetRespawn()
{
    if(bKismetDriven)
    {
        if(!bKismetEnabled)
        {
            GotoState('Disabled');            
        }
        else
        {
            if(bUseRespawnTimeOverride)
            {
                GotoState('Sleeping');
            }
        }
        return;
    }
    super.SetRespawn();
}

function float GetRespawnTime()
{
    if(bKismetDriven && bUseRespawnTimeOverride)
    {
        return RespawnTime;
    }
    return super.GetRespawnTime();
}

function StartSleeping()
{
    super.StartSleeping();
    ClearTimer('Reset');
}

function bool DelayRespawn()
{
    if(bKismetDriven)
    {
        return false;
    }
    return true;
}

function bool CurrentPickupIsWeapon()
{
    return false;
}

function bool CurrentPickupIsArmor()
{
    return false;
}

function bool CurrentPickupIsAmmo()
{
    return false;
}

simulated function SetPickupHidden()
{
    super.SetPickupHidden();
    if(PickupMesh != none)
    {
        PickupMesh.SetBlockRigidBody(false);
    }
}

simulated function SetPickupVisible()
{
    super.SetPickupVisible();
    if(PickupMesh != none)
    {
        PickupMesh.SetBlockRigidBody(true);
    }
}

defaultproperties
{
    RespawnTime=45
    bAllowPathConnections=false
    bNoAutoConnect=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPickupFactory.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPickupFactory.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPickupFactory.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__KFPickupFactory.PathRenderer'
    Components(4)=PathRenderer
    TickGroup=ETickingGroup.TG_PostAsyncWork
    bMovable=false
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPickupFactory.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}