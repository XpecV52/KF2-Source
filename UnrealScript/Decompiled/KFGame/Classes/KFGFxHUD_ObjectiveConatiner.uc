/*******************************************************************************
 * KFGFxHUD_ObjectiveConatiner generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_ObjectiveConatiner extends GFxObject within GFxMoviePlayer;

var float UpdateRate;
var KFInterface_MapObjective CurrentObjectiveInterface;
var Texture2D LastIcon;
var KFPlayerController KFPC;
var name SoundThemeName;
var name SoundCueName;
var float LastProgress;
var bool bLastMissionCritical;

function InitializeHUD()
{
    KFPC = KFPlayerController(Outer.GetPC());
    SetVisible(false);
    LocalizeContainer();
}

function LocalizeContainer()
{
    local GFxObject TextObject;

    TextObject = Outer.CreateObject("Object");
    TextObject.SetString("failedString", Localize("Objectives", "FailedString", "KFGame"));
    SetObject("localizedText", TextObject);
}

simulated function SetActive(bool bActive)
{
    SetVisible(bActive);
    if(bActive)
    {
        CurrentObjectiveInterface = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI).ObjectiveInterface;
        if(NotEqual_InterfaceInterface(CurrentObjectiveInterface, (none)) && CurrentObjectiveInterface.ShouldShowObjectiveContainer())
        {
            SetFailState(CurrentObjectiveInterface.HasFailedObjective());
            SetCurrentProgress(CurrentObjectiveInterface.GetProgress());
            UpdateActorCount();
            UpdateIcon();
            SetCompleted(CurrentObjectiveInterface.IsComplete());
            SetMissionCritical(CurrentObjectiveInterface.GetIsMissionCritical());            
        }
        else
        {
            CurrentObjectiveInterface = none;
            SetVisible(false);
        }        
    }
    else
    {
        CurrentObjectiveInterface = none;
        GetObject("objectiveNumberMC").SetVisible(false);
    }
}

function SetCompleted(bool bComplete)
{
    SetBool("completeStatus", bComplete);
    if(((KFPC != none) && KFPC.myGfxHUD != none) && bComplete)
    {
        KFPC.myGfxHUD.PlaySoundFromTheme(SoundCueName, SoundThemeName);
    }
}

function SetMissionCritical(bool bMissionCritical)
{
    bMissionCritical = false;
    if(bMissionCritical != bLastMissionCritical)
    {
        SetBool("missionCriticalStatus", bMissionCritical);
        bLastMissionCritical = bMissionCritical;
    }
}

function SetCurrentIcon(string IconPath)
{
    if(IconPath == "")
    {
        SetString("currentIcon", "");        
    }
    else
    {
        SetString("currentIcon", "img://" $ IconPath);
    }
}

function TickHud(float DeltaTime)
{
    if(NotEqual_InterfaceInterface(CurrentObjectiveInterface, (none)))
    {
        SetCurrentProgress(CurrentObjectiveInterface.GetProgress());
        SetInt("rewardValue", CurrentObjectiveInterface.GetDoshReward());
        UpdateActorCount();
        if(LastIcon != CurrentObjectiveInterface.GetIcon())
        {
            UpdateIcon();
        }
        SetMissionCritical(CurrentObjectiveInterface.GetIsMissionCritical());
    }
}

function UpdateIcon()
{
    LastIcon = CurrentObjectiveInterface.GetIcon();
    SetCurrentIcon(PathName(LastIcon));
}

function UpdateActorCount()
{
    local GFxObject DataObject;

    if(CurrentObjectiveInterface.UsesMultipleActors())
    {
        DataObject = Outer.CreateObject("Object");
        DataObject.SetString("textValue", CurrentObjectiveInterface.GetActorCount());
        SetObject("objectiveNumber", DataObject);
    }
}

function UpdateRequirements();

function SetFailState(bool bFailed)
{
    local GFxObject DataObject;

    DataObject = Outer.CreateObject("Object");
    DataObject.SetBool("bFailed", bFailed);
    DataObject.SetString("failedString", ((bFailed) ? Localize("Objectives", "FailedString", "KFGame") : ""));
    SetObject("failed", DataObject);
    if(bFailed)
    {
    }
}

function ClearObjectiveUI()
{
    SetActive(false);
}

function SetCurrentProgress(float CurrentProgress)
{
    if(LastProgress != CurrentProgress)
    {
        CurrentProgress = FClamp(CurrentProgress, 0, 1);
        LastProgress = CurrentProgress;
        SetInt("currentProgress", int(float(100) * CurrentProgress));
        SetCompleted(CurrentObjectiveInterface.IsComplete());
    }
}

defaultproperties
{
    UpdateRate=0.1
    SoundThemeName=UI
    SoundCueName=TraderTime_Countdown
}