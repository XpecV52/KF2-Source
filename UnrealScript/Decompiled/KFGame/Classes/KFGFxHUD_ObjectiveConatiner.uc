/*******************************************************************************
 * KFGFxHUD_ObjectiveConatiner generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_ObjectiveConatiner extends GFxObject within GFxMoviePlayer;

var float UpdateRate;
var KFInterface_MapObjective CurrentObjectiveInterface;

function InitializeHUD()
{
    SetVisible(false);
    LocalizeContainer();
}

function LocalizeContainer()
{
    local GFxObject TextObject;

    TextObject = Outer.CreateObject("Object");
    TextObject.SetString("failedString", Localize("Objectives", "FailedString", "KFGame"));
    SetObject("localizedText", TextObject);
}

simulated function SetActive(bool bActive)
{
    SetVisible(bActive);
    if(bActive)
    {
        CurrentObjectiveInterface = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI).ObjectiveInterface;
        if(NotEqual_InterfaceInterface(CurrentObjectiveInterface, (none)))
        {
            SetFailState(CurrentObjectiveInterface.HasFailedObjective());
            SetCurrentProgress(CurrentObjectiveInterface.GetProgress());
            SetCurrentIcon(PathName(CurrentObjectiveInterface.GetIcon()));
        }        
    }
    else
    {
        CurrentObjectiveInterface = none;
    }
}

function SetCurrentIcon(string IconPath)
{
    if(IconPath == "")
    {
        SetString("currentIcon", "");        
    }
    else
    {
        SetString("currentIcon", "img://" $ IconPath);
    }
}

function TickHud(float DeltaTime)
{
    if(NotEqual_InterfaceInterface(CurrentObjectiveInterface, (none)))
    {
        SetCurrentProgress(CurrentObjectiveInterface.GetProgress());
        SetInt("rewardValue", CurrentObjectiveInterface.GetDoshReward());
        UpdateActorCount();
    }
}

function UpdateActorCount()
{
    local GFxObject DataObject;

    if(CurrentObjectiveInterface.UsesMultipleActors())
    {
        DataObject = Outer.CreateObject("Object");
        DataObject.SetString("textValue", CurrentObjectiveInterface.GetActorCount());
        SetObject("objectiveNumber", DataObject);
    }
}

function UpdateRequirements();

function SetFailState(bool bFailed)
{
    local GFxObject DataObject;

    DataObject = Outer.CreateObject("Object");
    DataObject.SetBool("bFailed", bFailed);
    DataObject.SetString("failedString", ((bFailed) ? Localize("Objectives", "FailedString", "KFGame") : ""));
    SetObject("failed", DataObject);
    if(bFailed)
    {
    }
}

function ClearObjectiveUI()
{
    SetActive(false);
}

function SetCurrentProgress(float CurrentProgress)
{
    CurrentProgress = FClamp(CurrentProgress, 0, 1);
    SetInt("currentProgress", int(float(100) * CurrentProgress));
}

defaultproperties
{
    UpdateRate=0.1
}