/*******************************************************************************
 * KFTeleporter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFTeleporter extends Teleporter
    hidecategories(Navigation,Lighting,LightColor,Force);

var transient int URLNum;
var() array<string> URLs;

function OnSetURLNum(KFSeqAct_SetTeleporterURLNum Action)
{
    local SeqVar_Int IntVar;

    if(Action.VariableLinks[0].LinkedVariables.Length > 0)
    {
        IntVar = SeqVar_Int(Action.VariableLinks[1].LinkedVariables[0]);
        if(IntVar != none)
        {
            URLNum = IntVar.IntValue;
        }
    }
}

event PostBeginPlay()
{
    if((URL ~= "") && URLs.Length == 0)
    {
        SetCollision(false, false);
    }
    super(Actor).PostBeginPlay();
}

simulated event PostTouch(Actor Other)
{
    local Teleporter D, Dest;
    local int I;
    local string TempURL;

    if((URLs.Length > 0) && URLNum < URLs.Length)
    {
        TempURL = URLs[URLNum];        
    }
    else
    {
        TempURL = URL;
    }
    if((InStr(TempURL, "/") >= 0) || InStr(TempURL, "#") >= 0)
    {
        if(((Role == ROLE_Authority) && Pawn(Other) != none) && Pawn(Other).IsHumanControlled())
        {
            WorldInfo.Game.SendPlayer(PlayerController(Pawn(Other).Controller), TempURL);
        }        
    }
    else
    {
        foreach AllActors(Class'Teleporter', D)
        {
            if((string(D.Tag) ~= TempURL) && D != self)
            {
                Dest[I] = D;
                ++ I;
                if(I > 16)
                {
                    break;
                }
            }            
        }        
        I = Rand(I);
        if(Dest[I] != none)
        {
            if(Other.IsA('Pawn'))
            {
                Other.PlayTeleportEffect(true, true);
            }
            Dest[I].Accept(Other, self);
        }
    }
}

event Actor SpecialHandling(Pawn Other)
{
    local string TempURL;

    if((URLs.Length > 0) && URLNum < URLs.Length)
    {
        TempURL = URLs[URLNum];        
    }
    else
    {
        TempURL = URL;
    }
    if(((bEnabled && Other.Controller.RouteCache.Length > 1) && Teleporter(Other.Controller.RouteCache[1]) != none) && string(Other.Controller.RouteCache[1].Tag) ~= TempURL)
    {
        if(IsOverlapping(Other))
        {
            PostTouch(Other);
        }
        return self;
    }
    return none;
}

defaultproperties
{
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTeleporter.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFTeleporter.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFTeleporter.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFTeleporter.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFTeleporter.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFTeleporter.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTeleporter.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__KFTeleporter.PathRenderer'
    Components(4)=PathRenderer
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTeleporter.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}