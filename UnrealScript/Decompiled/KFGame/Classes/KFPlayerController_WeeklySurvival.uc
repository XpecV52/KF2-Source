/*******************************************************************************
 * KFPlayerController_WeeklySurvival generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPlayerController_WeeklySurvival extends KFPlayerController
    native(Controller)
    config(Game)
    hidecategories(Navigation);

struct native GunGameInfo
{
    var transient byte Level;
    var transient int Score;
    var array<byte> GunGamePreselectedWeapons;
    var byte WaveToUseForRestart;
    var bool GiveWeaponMaster;

    structdefaultproperties
    {
        Level=0
        Score=0
        GunGamePreselectedWeapons=none
        WaveToUseForRestart=0
        GiveWeaponMaster=false
    }
};

struct native VIPGameInfo
{
    var bool IsVIP;
    var bool WasVIP;
    var bool PendingHealthReset;
    var int ExtraHealth;
    var int DamageHealthLimit;
    var int DamageHealthTop;
    var int DamageHealthBottom;
    var float DamageLimitModifier;
    var float OutputDamageTopModifier;
    var float InputDamageTopModifier;
    var float OutputDamageBottomModifier;
    var float InputDamageBottomModifier;

    structdefaultproperties
    {
        IsVIP=false
        WasVIP=false
        PendingHealthReset=false
        ExtraHealth=100
        DamageHealthLimit=100
        DamageHealthTop=50
        DamageHealthBottom=25
        DamageLimitModifier=1
        OutputDamageTopModifier=1.5
        InputDamageTopModifier=0.75
        OutputDamageBottomModifier=1.75
        InputDamageBottomModifier=0.5
    }
};

var bool bUsingPermanentZedTime;
var float ZedTimeRadius;
var float ZedTimeBossRadius;
var float ZedTimeHeight;
var float ZedRecheckTime;
var int GoompaStreak;
var int GoompaStreakBonus;
var transient int MaxGoompaStreak;
var protected const name RhytmMethodRTPCName;
var protected const AkEvent RhythmMethodSoundReset;
var protected const AkEvent RhythmMethodSoundHit;
var protected const AkEvent RhythmMethodSoundTop;
var protected const AkEvent AracnoStompSoundEvent;
var protected const AkEvent GunGameLevelUpSoundEvent;
var protected const AkEvent GunGameLevelUpFinalWeaponSoundEvent;
var protected const AkEvent VIPChosenSoundEvent;
var protected const AkEvent VIPLowHealthSoundEvent;
var protected float VIPLowHealthLastTimePlayed;
var transient GunGameInfo GunGameData;
var transient VIPGameInfo VIPGameData;

replication
{
     if(bNetDirty)
        GoompaStreak, GunGameData, 
        ZedTimeBossRadius, ZedTimeHeight, 
        ZedTimeRadius, bUsingPermanentZedTime;
}

simulated event PostBeginPlay()
{
    local KFGameInfo KFGI;

    super.PostBeginPlay();
    KFGI = KFGameInfo(WorldInfo.Game);
    if(((KFGI != none) && KFGI.OutbreakEvent != none) && KFGI.OutbreakEvent.ActiveEvent.bGoompaJumpEnabled)
    {
        MaxGoompaStreak = KFGI.OutbreakEvent.ActiveEvent.GoompaStreakMax;
    }
}

function EnterZedTime()
{
    local bool bNewResult;
    local KFPawn KFP;
    local KFPerk MyPerk;

    if(bUsingPermanentZedTime)
    {
        SetTimer(ZedRecheckTime, false, 'RecheckZedTime');
        KFP = KFPawn(Pawn);
        if(KFP != none)
        {
            bNewResult = IsAffectedByZedTime();
            if(KFP.bUnaffectedByZedTime == bNewResult)
            {
                MyPerk = GetPerk();
                if(MyPerk != none)
                {
                    MyPerk.NotifyZedTimeStarted();
                }
                KFP.bUnaffectedByZedTime = !bNewResult;
                if(KFP.bUnaffectedByZedTime)
                {
                    StartPartialZedTimeSightCounter();
                }
                ClientEnterZedTime(KFP.bUnaffectedByZedTime);
            }
        }        
    }
    else
    {
        super.EnterZedTime();
    }
}

function RecheckZedTime()
{
    EnterZedTime();
}

reliable client simulated function UpdateWaveCount()
{
    if(myGfxHUD != none)
    {
        myGfxHUD.UpdateWaveCount();
    }
}

reliable client simulated function UpdateGunGameWidget(int Score, int max_score, int Level, int max_level)
{
    if(myGfxHUD != none)
    {
        myGfxHUD.UpdateGunGameWidget(Score, max_score, Level, max_level);
    }
}

simulated function UpdateVIPWidget(ReplicatedVIPGameInfo VIPInfo)
{
    if(myGfxHUD != none)
    {
        myGfxHUD.UpdateVIP(VIPInfo, VIPInfo.VIPPlayer == PlayerReplicationInfo);
    }
}

function bool CanUseHealObject()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(((KFGRI != none) && KFGRI.VIPRepPlayer != none) && KFGRI.VIPRepPlayer == KFPlayerReplicationInfo(PlayerReplicationInfo))
    {
        return false;
    }
    return super.CanUseHealObject();
}

function UpdateGoompaStreak()
{
    ++ GoompaStreak;
    GoompaStreakBonus = GoompaStreak;
    UpdateGoompaCounterWidget(GoompaStreak, MaxGoompaStreak);
    GoompaStompMessage(byte(GoompaStreak));
    if(IsTimerActive('ResetStreakInfo'))
    {
        ClearTimer('ResetStreakInfo');
    }
}

function ResetGoompaStreak()
{
    local KFGameInfo KFGI;

    if(GoompaStreak > 0)
    {
        KFGI = KFGameInfo(WorldInfo.Game);
        GoompaStreak = 0;
        if(KFGI != none)
        {
            SetTimer(KFGI.OutbreakEvent.ActiveEvent.GoompaBonusDuration, false, 'ResetStreakInfo');
        }
    }
}

function ResetStreakInfo()
{
    UpdateGoompaCounterWidget(GoompaStreak, MaxGoompaStreak);
    GoompaStompMessage(byte(GoompaStreak));
    GoompaStreakBonus = 0;
}

function bool IsGoompaBonusActive()
{
    return GoompaStreakBonus > 0;
}

reliable client simulated function GoompaStompMessage(byte StompNum)
{
    local int I;
    local AkEvent TempAkEvent;

    if(myGfxHUD == none)
    {
        return;
    }
    I = StompNum;
    UpdateGoompaCounterWidget(StompNum, MaxGoompaStreak);
    if(StompNum == 0)
    {
        TempAkEvent = RhythmMethodSoundReset;        
    }
    else
    {
        if(StompNum == (MaxGoompaStreak - 1))
        {
            TempAkEvent = RhythmMethodSoundHit;            
        }
        else
        {
            if(StompNum == MaxGoompaStreak)
            {
                TempAkEvent = RhythmMethodSoundTop;
                ++ I;
            }
        }
    }
    if(TempAkEvent != none)
    {
        PlayRMEffect(TempAkEvent, RhytmMethodRTPCName, I);
    }
    if((StompNum > 0) && AracnoStompSoundEvent != none)
    {
        PlaySoundBase(AracnoStompSoundEvent);
    }
}

reliable client simulated function PlayGunGameMessage(bool isLastLevel)
{
    if(isLastLevel)
    {
        if(GunGameLevelUpFinalWeaponSoundEvent != none)
        {
            PlaySoundBase(GunGameLevelUpFinalWeaponSoundEvent);
        }        
    }
    else
    {
        if(GunGameLevelUpSoundEvent != none)
        {
            PlaySoundBase(GunGameLevelUpSoundEvent);
        }
    }
}

reliable client simulated function PlayVIPSound_ChosenInternal()
{
    if(VIPChosenSoundEvent != none)
    {
        PlaySoundBase(VIPChosenSoundEvent);
    }
}

reliable client simulated function PlayVIPGameChosenSound(float Delay)
{
    SetTimer(Delay, false, 'PlayVIPSound_ChosenInternal');
}

reliable client simulated function PlayVIPGameLowHealthSound()
{
    if(VIPLowHealthSoundEvent != none)
    {
        if((WorldInfo.TimeSeconds - VIPLowHealthLastTimePlayed) > 8)
        {
            VIPLowHealthLastTimePlayed = WorldInfo.TimeSeconds;
            PlaySoundBase(VIPLowHealthSoundEvent);
        }
    }
}

function ResetGameplayPostProcessFX()
{
    local KFGameReplicationInfo KFGRI;

    super.ResetGameplayPostProcessFX();
    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((((KFGRI != none) && KFGRI.bIsWeeklyMode) && KFGRI.CurrentWeeklyIndex == 12) && GameplayPostProcessEffectMIC != none)
    {
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectZedTimeSepiaParamName, 1);
    }
}

simulated function SetBossCamera(KFInterface_MonsterBoss Boss)
{
    local KFGameReplicationInfo KFGRI;
    local bool bIsBossRush;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    bIsBossRush = KFGRI.bIsWeeklyMode && KFGRI.CurrentWeeklyIndex == 14;
    if((bIsBossRush && Boss.GetHealthPercent() <= 0) && KFGRI.WaveNum != KFGRI.WaveMax)
    {
        SetTimer(5, false, 'ResetBossCamera');
    }
    super.SetBossCamera(Boss);
}

simulated function ResetBossCamera()
{
    ResetCameraMode();
}

function RestartGunGame()
{
    local KFGameInfo KFGI;
    local KFGameReplicationInfo KFGRI;

    KFGI = KFGameInfo(WorldInfo.Game);
    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((KFGI != none) && KFGRI != none)
    {
        KFGI.RestartGunGamePlayerWeapon(self, GunGameData.WaveToUseForRestart);
    }
}

function UpdateInitialHeldWeapon()
{
    local KFPawn_Human KFPH;
    local KFGameInfo KFGI;
    local KFGameReplicationInfo KFGRI;

    KFPH = KFPawn_Human(Pawn);
    if((KFPH == none) || KFPH.InvManager == none)
    {
        return;
    }
    KFGI = KFGameInfo(WorldInfo.Game);
    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((KFGI != none) && KFGRI != none)
    {
        KFGI.ResetGunGame(self);
        GunGameData.WaveToUseForRestart = KFGRI.WaveNum;
        SetTimer(1, false, 'RestartGunGame');
    }
}

function AdjustDamage(out int InDamage, Controller InstigatedBy, class<DamageType> DamageType, Actor DamageCauser, Actor DamageReceiver)
{
    local KFGameInfo KFGI;
    local float Multiplier, ModifierRange, HealthTop, HealthRange;
    local KFGameReplicationInfo KFGRI;

    super.AdjustDamage(InDamage, InstigatedBy, DamageType, DamageCauser, DamageReceiver);
    KFGI = KFGameInfo(WorldInfo.Game);
    if((((Pawn != none) && KFGI != none) && KFGI.OutbreakEvent != none) && KFGI.OutbreakEvent.ActiveEvent.bVIPGameMode)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(((((KFGRI != none) && KFGRI.VIPRepPlayer != none) && KFGRI.VIPRepPlayer == KFPlayerReplicationInfo(PlayerReplicationInfo)) && InstigatedBy == self) && DamageReceiver != self.Pawn)
        {
            Multiplier = 1;
            if(Pawn.Health < VIPGameData.DamageHealthLimit)
            {
                if(Pawn.Health <= VIPGameData.DamageHealthBottom)
                {
                    Multiplier = VIPGameData.OutputDamageBottomModifier;                    
                }
                else
                {
                    if(Pawn.Health > VIPGameData.DamageHealthTop)
                    {
                        Multiplier = VIPGameData.DamageLimitModifier;
                        ModifierRange = VIPGameData.OutputDamageTopModifier - VIPGameData.DamageLimitModifier;
                        HealthTop = float(VIPGameData.DamageHealthLimit);
                        HealthRange = Abs(HealthTop - float(VIPGameData.DamageHealthTop));                        
                    }
                    else
                    {
                        Multiplier = VIPGameData.OutputDamageTopModifier;
                        ModifierRange = VIPGameData.OutputDamageBottomModifier - VIPGameData.OutputDamageTopModifier;
                        HealthTop = float(VIPGameData.DamageHealthTop);
                        HealthRange = Abs(HealthTop - float(VIPGameData.DamageHealthBottom));
                    }
                    Multiplier += (ModifierRange * ((HealthTop - float(Pawn.Health)) / HealthRange));
                }                
            }
            else
            {
                Multiplier = VIPGameData.DamageLimitModifier;
            }
            InDamage = int(float(InDamage) * Multiplier);
        }
    }
}

function AdjustVIPDamage(out int InDamage, Controller InstigatedBy)
{
    local KFGameInfo KFGI;
    local float Multiplier, ModifierRange, HealthTop, HealthRange;
    local KFGameReplicationInfo KFGRI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if((((Pawn != none) && KFGI != none) && KFGI.OutbreakEvent != none) && KFGI.OutbreakEvent.ActiveEvent.bVIPGameMode)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(((KFGRI != none) && KFGRI.VIPRepPlayer != none) && KFGRI.VIPRepPlayer == KFPlayerReplicationInfo(PlayerReplicationInfo))
        {
            Multiplier = 1;
            if(Pawn.Health < VIPGameData.DamageHealthLimit)
            {
                if(Pawn.Health <= VIPGameData.DamageHealthBottom)
                {
                    Multiplier = VIPGameData.InputDamageBottomModifier;                    
                }
                else
                {
                    if(Pawn.Health > VIPGameData.DamageHealthTop)
                    {
                        Multiplier = VIPGameData.DamageLimitModifier;
                        ModifierRange = VIPGameData.InputDamageTopModifier - VIPGameData.DamageLimitModifier;
                        HealthTop = float(VIPGameData.DamageHealthLimit);
                        HealthRange = Abs(HealthTop - float(VIPGameData.DamageHealthTop));                        
                    }
                    else
                    {
                        Multiplier = VIPGameData.InputDamageTopModifier;
                        ModifierRange = VIPGameData.InputDamageBottomModifier - VIPGameData.InputDamageTopModifier;
                        HealthTop = float(VIPGameData.DamageHealthTop);
                        HealthRange = Abs(HealthTop - float(VIPGameData.DamageHealthBottom));
                    }
                    Multiplier += (ModifierRange * ((HealthTop - float(Pawn.Health)) / HealthRange));
                }                
            }
            else
            {
                Multiplier = VIPGameData.DamageLimitModifier;
            }
            InDamage = int(float(InDamage) * Multiplier);
        }
    }
}

function NotifyTakeHit(Controller InstigatedBy, Vector HitLocation, int Damage, class<DamageType> DamageType, Vector Momentum)
{
    local KFPlayerController_WeeklySurvival KFPC_WS;

    super(PlayerController).NotifyTakeHit(InstigatedBy, HitLocation, Damage, DamageType, Momentum);
    if(VIPGameData.IsVIP)
    {
        if((Pawn.Health < 50) && (Pawn.Health + Damage) >= 50)
        {
            foreach WorldInfo.AllControllers(Class'KFPlayerController_WeeklySurvival', KFPC_WS)
            {
                KFPC_WS.PlayVIPGameLowHealthSound();                
            }            
        }
    }
}

function UpdateVIPDamage()
{
    local KFGameReplicationInfo KFGRI;

    if(VIPGameData.IsVIP)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            KFGRI.UpdateVIPCurrentHealth(Pawn.Health);
        }
    }
}

defaultproperties
{
    MaxGoompaStreak=-1
    RhytmMethodRTPCName=R_Method
    RhythmMethodSoundReset=AkEvent'WW_UI_PlayerCharacter.Play_R_Method_Reset'
    RhythmMethodSoundHit=AkEvent'WW_UI_PlayerCharacter.Play_R_Method_Hit'
    RhythmMethodSoundTop=AkEvent'WW_UI_PlayerCharacter.Play_R_Method_Top'
    AracnoStompSoundEvent=AkEvent'WW_GLO_Runtime.WeeklyArcno'
    GunGameLevelUpSoundEvent=AkEvent'WW_GLO_Runtime.WeeklyAALevelUp'
    GunGameLevelUpFinalWeaponSoundEvent=AkEvent'WW_GLO_Runtime.WeeklyAALevelFinal'
    VIPChosenSoundEvent=AkEvent'WW_UI_Menu.Play_AAR_TOPWEAPON_SLIDEIN_B'
    VIPLowHealthSoundEvent=AkEvent'WW_GLO_Runtime.WeeklyVIPAlarm'
    VIPGameData=(IsVIP=false,WasVIP=false,PendingHealthReset=false,ExtraHealth=100,DamageHealthLimit=100,DamageHealthTop=50,DamageHealthBottom=25,DamageLimitModifier=1,OutputDamageTopModifier=1.5,InputDamageTopModifier=0.75,OutputDamageBottomModifier=1.75,InputDamageBottomModifier=0.5)
    StingerAkComponent=AkComponent'Default__KFPlayerController_WeeklySurvival.AkComponent'
    AmplificationLightTemplate=PointLightComponent'Default__KFPlayerController_WeeklySurvival.AmplificationLightTemplate'
    NVGLightTemplate=PointLightComponent'Default__KFPlayerController_WeeklySurvival.NVGLightTemplate'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerController_WeeklySurvival.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerController_WeeklySurvival.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFPlayerController_WeeklySurvival.AkComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerController_WeeklySurvival.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}