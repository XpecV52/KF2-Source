/*******************************************************************************
 * KFGFxPerksContainer_Details generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxPerksContainer_Details extends KFGFxPerksContainer within GFxMoviePlayer;

var const localized string ExperienceString;
var const localized string ObjectivesString;
var const localized string PerkBonusesString;
var const localized string BasicLoadoutString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super(KFGFxObject_Container).Initialize(NewParentMenu);
    LocalizeContainer();
}

function LocalizeContainer()
{
    GetObject("objectivesTitleTextField").SetString("text", ObjectivesString);
    GetObject("perkBonusTextField").SetString("text", PerkBonusesString);
    GetObject("basicLoadoutTextField").SetString("text", BasicLoadoutString);
}

function UpdateDetailsInternal(class<KFPerk> PerkClass, KFPlayerController KFPC, byte WeaponIdx, byte GrenadeIdx)
{
    local GFxObject DetailsProvider;
    local array<string> WeaponNames, WeaponSources;
    local int I;

    DetailsProvider = Outer.CreateObject("Object");
    DetailsProvider.SetString("ExperienceMessage", ExperienceString @ string(KFPC.GetPerkXP(PerkClass)));
    if(PerkClass.default.PrimaryWeaponDef != none)
    {
        AddWeaponInfo(WeaponNames, WeaponSources, PerkClass.static.GetPrimaryWeaponName(WeaponIdx), PerkClass.static.GetPrimaryWeaponImagePath(WeaponIdx));
    }
    if(PerkClass.default.SecondaryWeaponDef != none)
    {
        AddWeaponInfo(WeaponNames, WeaponSources, PerkClass.default.SecondaryWeaponDef.GetItemName(), PerkClass.default.SecondaryWeaponDef.GetImagePath());
    }
    if(PerkClass.default.KnifeWeaponDef != none)
    {
        AddWeaponInfo(WeaponNames, WeaponSources, PerkClass.default.KnifeWeaponDef.GetItemName(), PerkClass.default.KnifeWeaponDef.GetImagePath());
    }
    if(PerkClass.default.GrenadeWeaponDef != none)
    {
        AddWeaponInfo(WeaponNames, WeaponSources, PerkClass.static.GetGrenadeWeaponName(GrenadeIdx), PerkClass.static.GetGrenadeWeaponImagePath(GrenadeIdx));
    }
    I = 0;
    J0x316:

    if(I < WeaponNames.Length)
    {
        DetailsProvider.SetString("WeaponName" $ string(I), WeaponNames[I]);
        DetailsProvider.SetString("WeaponImage" $ string(I), "img://" $ WeaponSources[I]);
        ++ I;
        goto J0x316;
    }
    DetailsProvider.SetString("EXPAction1", PerkClass.default.EXPAction1);
    DetailsProvider.SetString("EXPAction2", PerkClass.default.EXPAction2);
    DetailsProvider.SetBool("ShowPrimaryWeaponSelectors", PerkClass.static.CanChoosePrimaryWeapon());
    DetailsProvider.SetBool("ShowGrenadeSelectors", PerkClass.static.CanChooseGrenade());
    SetObject("detailsData", DetailsProvider);
}

function UpdateDetails(class<KFPerk> PerkClass, byte SelectedSkills[5], bool IsChoosingPrev, bool IsChoosingNext)
{
    local KFPlayerController KFPC;
    local byte WeaponIdx, GrenadeIdx;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC == none)
    {
        return;
    }
    WeaponIdx = 0;
    GrenadeIdx = 0;
    UpdateAndGetCurrentWeaponIndexes(PerkClass, KFPC, WeaponIdx, GrenadeIdx, SelectedSkills, IsChoosingPrev, IsChoosingNext);
    UpdateDetailsInternal(PerkClass, KFPC, WeaponIdx, GrenadeIdx);
}

function AddWeaponInfo(out array<string> WeaponNames, out array<string> WeaponSources, string WeaponName, string WeaponSource)
{
    WeaponNames.AddItem(WeaponName;
    WeaponSources.AddItem(WeaponSource;
}

function UpdatePassives(class<KFPerk> PerkClass)
{
    local GFxObject PassivesProvider, PassiveObject;
    local KFPlayerController KFPC;
    local array<string> PassiveValues, Increments;
    local byte I;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        PerkClass.static.GetPassiveStrings(PassiveValues, Increments, KFPC.GetPerkLevelFromPerkList(PerkClass));
        PassivesProvider = Outer.CreateArray();
        I = 0;
        J0xCF:

        if(I < PassiveValues.Length)
        {
            PassiveObject = Outer.CreateObject("Object");
            PassiveObject.SetString("PassiveTitle", PerkClass.default.Passives[I].Title);
            PassiveObject.SetString("PerkBonusModifier", Increments[I]);
            PassiveObject.SetString("PerkBonusAmount", PassiveValues[I]);
            PassivesProvider.SetElementObject(I, PassiveObject);
            ++ I;
            goto J0xCF;
        }
    }
    SetObject("passivesData", PassivesProvider);
}

function UpdateAndGetCurrentWeaponIndexes(class<KFPerk> PerkClass, KFPlayerController KFPC, out byte WeaponIdx, out byte GrenadeIdx, byte SelectedSkills[5], bool IsChoosingPrev, bool IsChoosingNext)
{
    if(PerkClass.Name == 'KFPerk_Survivalist')
    {
        WeaponIdx = KFPC.CurrentPerk.SetWeaponSelectedIndex(KFPC.SurvivalPerkWeapIndex);
        GrenadeIdx = KFPC.CurrentPerk.SetGrenadeSelectedIndexUsingSkills(KFPC.SurvivalPerkGrenIndex, SelectedSkills, IsChoosingPrev, IsChoosingNext);
    }
}

defaultproperties
{
    ObjectivesString="XP OBJECTIVES"
    PerkBonusesString="PERK BONUSES"
    BasicLoadoutString="STARTING LOADOUT"
}