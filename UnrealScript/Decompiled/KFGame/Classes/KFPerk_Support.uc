/*******************************************************************************
 * KFPerk_Support generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_Support extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision,Mobile,Object,Debug,Advanced,Physics,Actor,Attachment,Display);

enum ESupportPerkSkills
{
    ESupportAmmo,
    ESupportSupplier,
    ESupportFortitude,
    ESupportRegeneration,
    ESupportBombard,
    ESupportTacticalReload,
    ESupportStrength,
    ESupportTenacity,
    ESupportSafeguard,
    ESupportBarrage,
    ESupportPerkSkills_MAX
};

/** Passives */
var() const PerkSkill WeldingProficiency;
/** Shotgun dmg modifier */
var() const PerkSkill ShotgunDamage;
/** Shotgun extra penetration Use INTs only */
var() const PerkSkill ShotgunPenetration;
/** Grenade dmg modifier */
var() const PerkSkill GrenadeDamage;
var array<KFPawn_Human> SuppliedPawnList;
var int SafeguardRangeSQ;

function ApplySkillsToPawn()
{
    local KFInventoryManager KFIM;

    super.ApplySkillsToPawn();
    KFIM = KFInventoryManager(OwnerPawn.InvManager);
    if(KFIM != none)
    {
        if(IsStrengthActive())
        {
            KFIM.MaxCarryBlocks = byte(float(KFIM.default.MaxCarryBlocks) + PerkSkills[6].StartingValue);
        }
    }
    ResetSupplier();
}

private final simulated function ResetSupplier()
{
    if((MyPRI != none) && IsSupplierActive())
    {
        if(SuppliedPawnList.Length > 0)
        {
            SuppliedPawnList.Remove(0, SuppliedPawnList.Length;
        }
        MyPRI.bPerkCanSupply = true;
        if(InteractionTrigger != none)
        {
            InteractionTrigger.Destroy();
            InteractionTrigger = none;
        }
        if(CheckOwnerPawn())
        {
            InteractionTrigger = Spawn(Class'KFUsablePerkTrigger', OwnerPawn,, OwnerPawn.Location, OwnerPawn.Rotation,, true);
            InteractionTrigger.SetBase(OwnerPawn);
            InteractionTrigger.SetInteractionIndex(5);
            OwnerPC.SetPendingInteractionMessage();
        }        
    }
    else
    {
        if(InteractionTrigger != none)
        {
            InteractionTrigger.Destroy();
        }
    }
}

protected simulated event PostSkillUpdate()
{
    super.PostSkillUpdate();
    SetTickIsDisabled(!IsRegenerationActive());
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType)
{
    local KFWeapon MyKFWeapon;
    local float TempDamage, BaseDamage, ShotgunDamageMod;

    TempDamage = float(InDamage);
    BaseDamage = TempDamage;
    if(DamageCauser != none)
    {
        if(DamageCauser.IsA('KFProj_Grenade '))
        {
            TempDamage += (BaseDamage * (GetPassiveValue(GrenadeDamage, CurrentLevel)));            
        }
        else
        {
            if((DamageInstigator != none) && DamageInstigator.Pawn != none)
            {
                MyKFWeapon = KFWeapon(DamageInstigator.Pawn.Weapon);
                if(MyKFWeapon != none)
                {
                    if((IsWeaponOnPerk(MyKFWeapon)) && IsDamageTypeOnPerk(DamageType))
                    {
                        ShotgunDamageMod = GetPassiveValue(ShotgunDamage, CurrentLevel);
                        TempDamage = ((ShotgunDamageMod > float(0)) ? TempDamage += (BaseDamage * ShotgunDamageMod) : TempDamage);
                        if(IsTenacityActive())
                        {
                            TempDamage += (BaseDamage * PerkSkills[7].StartingValue);
                        }
                    }
                }
            }
        }
        if(IsBarrageActive())
        {
            TempDamage += (BaseDamage * PerkSkills[9].StartingValue);
        }
    }
    InDamage = FCeil(TempDamage);
}

simulated function ModifyWeldingRate(out float FastenRate, out float UnfastenRate)
{
    local float WeldingModifier;

    WeldingModifier = GetPassiveValue(WeldingProficiency, CurrentLevel);
    FastenRate *= WeldingModifier;
    UnfastenRate *= WeldingModifier;
}

simulated function float GetPenetrationModifier(byte Level, class<KFDamageType> DamageType, optional bool bForce)
{
    if(!bForce && (DamageType == none) || !IsDamageTypeOnPerk(DamageType))
    {
        return 0;
    }
    return GetPassiveValue(ShotgunPenetration, Level);
}

simulated function ModifySpareAmmoAmount(KFWeapon KFW, out int PrimarySpareAmmo, const optional out STraderItem TraderItem)
{
    local float TempSpareAmmoAmount;
    local class<KFPerk> WeaponPerkClass;

    if(KFW == none)
    {
        WeaponPerkClass = TraderItem.AssociatedPerkClass;        
    }
    else
    {
        WeaponPerkClass = KFW.AssociatedPerkClass;
    }
    if(IsAmmoActive() && IsWeaponOnPerk(KFW, WeaponPerkClass))
    {
        TempSpareAmmoAmount = float(PrimarySpareAmmo);
        TempSpareAmmoAmount *= PerkSkills[0].StartingValue;
        PrimarySpareAmmo = Round(TempSpareAmmoAmount);
    }
}

simulated function ModifyMaxSpareAmmoAmount(KFWeapon KFW, out int MaxSpareAmmo, const optional out STraderItem TraderItem)
{
    local float TempMaxSpareAmmoAmount;
    local class<KFPerk> WeaponPerkClass;

    if(KFW == none)
    {
        WeaponPerkClass = TraderItem.AssociatedPerkClass;        
    }
    else
    {
        WeaponPerkClass = KFW.AssociatedPerkClass;
    }
    if(IsAmmoActive() && IsWeaponOnPerk(KFW, WeaponPerkClass))
    {
        TempMaxSpareAmmoAmount = float(MaxSpareAmmo);
        TempMaxSpareAmmoAmount *= PerkSkills[0].StartingValue;
        MaxSpareAmmo = Round(TempMaxSpareAmmoAmount);
    }
}

simulated function bool GetUsingTactialReload(KFWeapon KFW)
{
    return IsTacticalReloadActive() && (IsWeaponOnPerk(KFW)) || IsBackupWeapon(KFW);
}

function ModifyHealth(out int InHealth)
{
    local float TempHealth;

    if(IsFortitudeActive())
    {
        TempHealth = float(InHealth);
        TempHealth *= PerkSkills[2].StartingValue;
        InHealth = FCeil(TempHealth);
    }
}

function NotifyZedTimeStarted()
{
    if(IsSafeguardActive() || IsBarrageActive())
    {
        CheckOwnerPawn();
        GivePlayerBuffs();
        if(IsSafeguardActive() && !OwnerPawn.bHasSupportSafeguardBuff)
        {
            OwnerPawn.SetSupportSafeguardBuff(true);
            OwnerPawn.AddArmor(int(PerkSkills[8].StartingValue * float(OwnerPawn.MaxArmor)));
        }
        if(IsBarrageActive() && !OwnerPawn.bHasSupportBarrageBuff)
        {
            OwnerPawn.SetSupportBarrageBuff(true);
        }
    }
}

function NotifyZedTimeEnded()
{
    if(IsSafeguardActive() || IsBarrageActive())
    {
        ResetPlayerBuffs();
        CheckOwnerPawn();
        if(IsSafeguardActive() && OwnerPawn.bHasSupportSafeguardBuff)
        {
            OwnerPawn.SetSupportSafeguardBuff(false);
        }
        if(IsBarrageActive() && OwnerPawn.bHasSupportBarrageBuff)
        {
            OwnerPawn.SetSupportBarrageBuff(false);
        }
    }
}

function GivePlayerBuffs()
{
    local KFPawn_Human OtherPawn;

    if(CheckOwnerPawn() && OwnerPawn.IsAliveAndWell())
    {
        foreach WorldInfo.AllPawns(Class'KFPawn_Human', OtherPawn)
        {
            if((OtherPawn != OwnerPawn) && VSizeSq(OtherPawn.Location - OwnerPawn.Location) <= float(SafeguardRangeSQ))
            {
                if(IsSafeguardActive() && !OtherPawn.bHasSupportSafeguardBuff)
                {
                    OtherPawn.SetSupportSafeguardBuff(true);
                    BuffedPlayerInfos.Insert(0, 1;
                    BuffedPlayerInfos[0].BuffedPawn = OtherPawn;
                    OtherPawn.AddArmor(int(PerkSkills[8].StartingValue * float(OtherPawn.MaxArmor)));
                    continue;
                }
                if(IsBarrageActive() && !OtherPawn.bHasSupportBarrageBuff)
                {
                    OtherPawn.SetSupportBarrageBuff(true);
                    BuffedPlayerInfos.Insert(0, 1;
                    BuffedPlayerInfos[0].BuffedPawn = OtherPawn;
                }
            }            
        }        
    }
}

function ResetPlayerBuffs()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < BuffedPlayerInfos.Length)
    {
        if(IsSafeguardActive())
        {
            BuffedPlayerInfos[I].BuffedPawn.SetSupportSafeguardBuff(false);
        }
        if(IsBarrageActive())
        {
            BuffedPlayerInfos[I].BuffedPawn.SetSupportBarrageBuff(false);
        }
        ++ I;
        goto J0x0B;
    }
    BuffedPlayerInfos.Remove(0, BuffedPlayerInfos.Length;
}

function float GetStumblePowerModifier(optional KFPawn KFP, optional class<KFDamageType> DamageType, optional out float CooldownModifier, optional byte BodyPart)
{
    if((IsWeaponOnPerk(GetOwnerWeapon())) && IsBombardActive())
    {
        return 1 + PerkSkills[4].StartingValue;
    }
    return 1;
}

simulated function Interact(KFPawn_Human KFPH)
{
    local KFWeapon KFW;
    local int MagCount;
    local KFPlayerController KFPC;
    local KFPlayerReplicationInfo UserPRI, OwnerPRI;

    if(SuppliedPawnList.Find(KFPH != -1)
    {
        return;
    }
    if(Role == ROLE_Authority)
    {
        KFPC = KFPlayerController(KFPH.Controller);
        OwnerPC.ReceiveLocalizedMessage(Class'KFLocalMessage_Game', 1, KFPC.PlayerReplicationInfo);
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage_Game', 0, OwnerPC.PlayerReplicationInfo);
        UserPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        OwnerPRI = KFPlayerReplicationInfo(OwnerPC.PlayerReplicationInfo);
        if((UserPRI != none) && OwnerPRI != none)
        {
            UserPRI.MarkSupplierOwnerUsed(OwnerPRI);
        }
    }
    foreach KFPH.InvManager.InventoryActors(Class'KFWeapon', KFW)
    {
        if(KFW.IsInventoryWeapon())
        {
            continue;            
        }
        MagCount = Max(KFW.InitialSpareMags[0] / 3, 1);
        KFW.AddAmmo(MagCount * KFW.MagazineCapacity[0]);
        if(KFW.CanRefillSecondaryAmmo())
        {
            KFW.AddSecondaryAmmo(Max(KFW.InitialSpareMags[1] / 3, 1));
        }        
    }    
    SuppliedPawnList.AddItem(KFPH;
}

simulated function bool CanInteract(KFPawn_Human MyKFPH)
{
    return (IsSupplierActive()) && SuppliedPawnList.Find(MyKFPH == -1;
}

simulated function bool PerkNeedsTick()
{
    return IsRegenerationActive();
}

event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    if(IsRegenerationActive())
    {
        TickRegen(DeltaTime);
    }
}

function OnWaveEnded()
{
    super.OnWaveEnded();
    ResetSupplier();
}

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round(((GetPassiveValue(default.WeldingProficiency, Level)) - float(1)) * float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.ShotgunDamage, Level)) * float(100))) $ "%";
    PassiveValues[2] = string(Round((GetPassiveValue(default.ShotgunPenetration, Level)) * float(100))) $ "%";
    PassiveValues[3] = string(Round((GetPassiveValue(default.GrenadeDamage, Level)) * float(100))) $ "%";
    Increments[0] = ((("[" @ string(int(default.WeldingProficiency.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = ((("[" @ string(int(default.ShotgunDamage.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[2] = ((("[" @ string(int(default.ShotgunPenetration.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[3] = ((("[" @ string(int(default.GrenadeDamage.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
}

simulated function bool IsSupplierActive()
{
    return PerkSkills[1].bActive;
}

private final function bool IsBarrageActive()
{
    return PerkSkills[9].bActive && WorldInfo.TimeDilation < 1;
}

private final simulated function bool IsAmmoActive()
{
    return PerkSkills[0].bActive;
}

private final function bool IsFortitudeActive()
{
    return PerkSkills[2].bActive;
}

private final function bool IsRegenerationActive()
{
    return PerkSkills[3].bActive;
}

private final function bool IsBombardActive()
{
    return PerkSkills[4].bActive;
}

private final simulated function bool IsTacticalReloadActive()
{
    return PerkSkills[5].bActive;
}

private final function bool IsStrengthActive()
{
    return PerkSkills[6].bActive;
}

private final function bool IsTenacityActive()
{
    return PerkSkills[7].bActive;
}

private final function bool IsSafeguardActive()
{
    return PerkSkills[8].bActive;
}

private final simulated function name LogTacticalReload()
{
    local KFWeapon KFW;

    KFW = GetOwnerWeapon();
    if(KFW != none)
    {
        return KFW.GetReloadAnimName(GetUsingTactialReload(KFW));
    }
    return 'None';
}

simulated function LogPerkSkills()
{
    super.LogPerkSkills();
    if(bLogPerk)
    {
        LogInternal("PASSIVE PERKS");
        LogInternal(("-Welding Modifier:" @ string(((GetPassiveValue(WeldingProficiency, CurrentLevel)) - float(1)) * float(100))) $ "%");
        LogInternal(("-Shotgun Damage Modifier:" @ string(((GetPassiveValue(ShotgunDamage, CurrentLevel)) - float(1)) * float(100))) $ "%");
        LogInternal("-Shotgun Penetration Modifier:" @ string(GetPassiveValue(default.ShotgunPenetration, CurrentLevel)));
        LogInternal(("-Grenade Damage Modifier:" @ string((GetPassiveValue(GrenadeDamage, CurrentLevel, 100)) * float(100))) $ "%");
        LogInternal("Skill Tree");
        LogInternal("-Ammo:" @ string(PerkSkills[5].bActive));
        LogInternal("-Supplier:" @ string(IsSupplierActive()));
        LogInternal("-Fortitude:" @ string(PerkSkills[2].bActive));
        LogInternal("-Regeneration:" @ string(PerkSkills[3].bActive));
        LogInternal("-Bombard:" @ string(PerkSkills[4].bActive));
        LogInternal(("-Tactical Reload:" @ string(PerkSkills[5].bActive)) @ string(LogTacticalReload()));
        LogInternal("-Strength:" @ string(PerkSkills[6].bActive));
        LogInternal("-Tenacity:" @ string(PerkSkills[7].bActive));
        LogInternal("-Safeguard:" @ string(PerkSkills[8].bActive));
        LogInternal("-Barrage:" @ string(PerkSkills[9].bActive));
    }
}

simulated function PlayerDied()
{
    super.PlayerDied();
    if(InteractionTrigger != none)
    {
        InteractionTrigger.DestroyTrigger();
    }
}

defaultproperties
{
    WeldingProficiency=(Name="Welding Proficiency",Increment=0.02,Rank=0,StartingValue=1,MaxValue=1.5,ModifierValue=0,IconPath="",bActive=false)
    ShotgunDamage=(Name="Shotgun Damage",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    ShotgunPenetration=(Name="Shotgun Penetration",Increment=0.25,Rank=0,StartingValue=0,MaxValue=6.25,ModifierValue=0,IconPath="",bActive=false)
    GrenadeDamage=(Name="Grenade Damage",Increment=0.02,Rank=0,StartingValue=0,MaxValue=0.5,ModifierValue=0,IconPath="",bActive=false)
    SafeguardRangeSQ=1000000
    ProgressStatID=20
    PerkBuildStatID=21
    SecondaryXPModifier[0]=6
    SecondaryXPModifier[1]=8
    SecondaryXPModifier[2]=10
    SecondaryXPModifier[3]=14
    PerkName="Support"
    Passives(0)=(Title="Welding Proficiency",Description="Welding speed increased by %x%",IconPath="")
    Passives(1)=(Title="Perk Weapon Damage",Description="Perk weapon damage increased by %x%",IconPath="")
    Passives(2)=(Title="Perk Weapon Penetration",Description="Every level, Perk weapons gain %x% increased penetration power",IconPath="")
    Passives(3)=(Title="Grenade Damage",Description="Grenade damage increased by %x%",IconPath="")
    Passives(4)=(Title="",Description="",IconPath="")
    SkillCatagories[0]="Weapon Handling"
    SkillCatagories[1]="Fitness"
    SkillCatagories[2]="Supply"
    SkillCatagories[3]="Endurance"
    SkillCatagories[4]="Advanced Training"
    EXPAction1="Dealing Support weapon damage"
    EXPAction2="Welding doors"
    PerkIcon=Texture2D'UI_PerkIcons_TEX.UI_PerkIcon_Support'
    InteractIcon=Texture2D'UI_World_TEX.Support_Supplier_HUD'
    PerkSkills(0)=(Name="Ammo",Increment=0,Rank=0,StartingValue=1.2,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Ammo",bActive=false)
    PerkSkills(1)=(Name="Supplier",Increment=0,Rank=0,StartingValue=1.15,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Supplier",bActive=false)
    PerkSkills(2)=(Name="Fortitude",Increment=0,Rank=0,StartingValue=1.5,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Fortitude",bActive=false)
    PerkSkills(3)=(Name="Regeneration",Increment=0,Rank=0,StartingValue=0.15,MaxValue=0.15,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Regeneration",bActive=false)
    PerkSkills(4)=(Name="Bombard",Increment=0,Rank=0,StartingValue=0.6,MaxValue=0.6,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Bombard",bActive=false)
    PerkSkills(5)=(Name="TacticalReload",Increment=0,Rank=0,StartingValue=0.8,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_TacticalReload",bActive=false)
    PerkSkills(6)=(Name="Strength",Increment=0,Rank=0,StartingValue=5,MaxValue=5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Strength",bActive=false)
    PerkSkills(7)=(Name="Tenacity",Increment=0,Rank=0,StartingValue=0.1,MaxValue=0.1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Tenacity",bActive=false)
    PerkSkills(8)=(Name="Safeguard",Increment=0,Rank=0,StartingValue=0.05,MaxValue=0.05,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Safeguard",bActive=false)
    PerkSkills(9)=(Name="Barrage",Increment=0,Rank=0,StartingValue=0.15,MaxValue=0.15,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Support.UI_Talents_Support_Barrage",bActive=false)
    RegenerationInterval=2.5
    RegenerationAmount=4
    PrimaryWeaponDef=Class'KFWeapDef_MB500'
    KnifeWeaponDef=Class'KFWeapDef_Knife_Support'
    GrenadeWeaponDef=Class'KFWeapDef_Grenade_Support'
}