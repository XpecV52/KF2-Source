/*******************************************************************************
 * KFGFxDailyObjectivesContainer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxDailyObjectivesContainer extends KFGFxObject_Container within GFxMoviePlayer;

enum E_DailyIcon
{
    DI_Character,
    DI_Map,
    DI_PerkXP,
    DI_Versus,
    DI_Weapon,
    DI_ZED,
    DI_MAX
};

struct ObjectiveProgress
{
    var bool bComplete;
    var int numericValue;

    structdefaultproperties
    {
        bComplete=false
        numericValue=0
    }
};

var const localized string TitleString;
var const localized string OverviewString;
var const localized string SubtitleString;
var const localized string KnifeString;
var string IconURL;
var KFPlayerController KFPC;
var array<string> ObjectiveIconURLs;
var const int NUM_OF_DAILIES;
var array<ObjectiveProgress> ObjectiveStatusList;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    KFPC = KFPlayerController(Outer.GetPC());
    LocalizeMenu();
    PopulateData();
}

function LocalizeMenu()
{
    local GFxObject TextObject;

    TextObject = Outer.CreateObject("Object");
    TextObject.SetString("title", default.TitleString);
    TextObject.SetString("overview", default.OverviewString);
    TextObject.SetString("subtitle", default.SubtitleString);
    SetObject("localizedText", TextObject);
}

function bool PopulateData(optional bool bForceRefresh)
{
    local GFxObject DataObject, DataProvider;
    local int I;

    DataProvider = Outer.CreateArray();
    I = 0;
    J0x35:

    if(I < NUM_OF_DAILIES)
    {
        DataObject = Outer.CreateObject("Object");
        if(DataObject != none)
        {
            MakeDailyDataObject(KFPC.GetDailyObjective(I), I, KFPC, DataObject);
            DataProvider.SetElementObject(I, DataObject);
        }
        ++ I;
        goto J0x35;
    }
    SetObject("dailyObjectiveData", DataProvider);
    return HasObjectiveStatusChanged();
}

static function GFxObject MakeDailyDataObject(DailyEventInformation EventInfo, int Index, KFPlayerController MyKFPC, out GFxObject RefDataObject)
{
    local bool bProgressObjective;

    bProgressObjective = IsProgressObjective(EventInfo);
    RefDataObject.SetString("label", FormTitleForObjective(EventInfo));
    RefDataObject.SetString("description", FormDescriptionForObjective(EventInfo));
    RefDataObject.SetString("iconPath", GetIconForObjective(EventInfo));
    RefDataObject.SetBool("complete", MyKFPC.IsDailyObjectiveComplete(Index));
    RefDataObject.SetBool("showProgres", bProgressObjective);
    if(bProgressObjective)
    {
        RefDataObject.SetFloat("progress", FClamp(float(MyKFPC.GetCurrentDailyValue(Index) / MyKFPC.GetMaxDailyValue(Index)), 0, 1));
        RefDataObject.SetString("textValue", (string(MyKFPC.GetCurrentDailyValue(Index)) $ "/") $ string(MyKFPC.GetMaxDailyValue(Index)));        
    }
    else
    {
        RefDataObject.SetFloat("progress", 0);
        RefDataObject.SetString("textValue", "");
    }
    RefDataObject.SetString("rewardText", Class'KFMission_LocalizedStrings'.default.RewardString);
    RefDataObject.SetInt("reward", Class'KFOnlineStatsWrite'.static.GetDailyEventReward());
    return RefDataObject;
}

static function string GetIconForObjective(DailyEventInformation EventInfo)
{
    switch(EventInfo.ObjectiveType)
    {
        case 0:
            return "img://" $ default.ObjectiveIconURLs[4];
        case 1:
            switch(EventInfo.SecondaryType)
            {
                case 1:
                    return "img://" $ default.ObjectiveIconURLs[2];
                case 0:
                    return "img://" $ default.ObjectiveIconURLs[2];
                default:
                    break;
                    break;
            }
        case 2:
            switch(EventInfo.SecondaryType)
            {
                case 4:
                    return "img://" $ default.ObjectiveIconURLs[3];
                case 5:
                    return "img://" $ default.ObjectiveIconURLs[3];
                case 3:
                    return "img://" $ default.ObjectiveIconURLs[1];
                case 6:
                    return "img://" $ default.ObjectiveIconURLs[0];
                default:
                    break;
                    break;
            }
        default:
            return "";
            break;
    }
}

static function bool IsProgressObjective(DailyEventInformation EventInfo)
{
    switch(EventInfo.ObjectiveType)
    {
        case 0:
            return true;
        case 1:
            switch(EventInfo.SecondaryType)
            {
                case 1:
                case 0:
                    return true;
                default:
                    break;
                    break;
            }
        case 2:
            switch(EventInfo.SecondaryType)
            {
                case 4:
                case 5:
                    return true;
                case 3:
                case 6:
                    return false;
                default:
                    break;
                    break;
            }
        default:
            return false;
            break;
    }
}

static function string FormTitleForObjective(DailyEventInformation EventInfo)
{
    local string NewString;

    switch(EventInfo.ObjectiveType)
    {
        case 0:
            NewString = Class'KFMission_LocalizedStrings'.default.DealDamageString;
            break;
        case 1:
            switch(EventInfo.SecondaryType)
            {
                case 1:
                    NewString = Class'KFMission_LocalizedStrings'.default.KillZedsString;
                    break;
                case 0:
                    NewString = Class'KFMission_LocalizedStrings'.default.EarnXPString;
                    break;
                default:
                    break;
            }
            break;
        case 2:
            switch(EventInfo.SecondaryType)
            {
                case 3:
                    NewString = Class'KFMission_LocalizedStrings'.default.CompleteMapString;
                    break;
                case 4:
                    NewString = Class'KFMission_LocalizedStrings'.default.DealVersusDamageString;
                    break;
                case 5:
                    NewString = Class'KFMission_LocalizedStrings'.default.VersusKillsString;
                    break;
                case 6:
                    NewString = Class'KFMission_LocalizedStrings'.default.VersusCompletionString;
                    break;
                default:
                    break;
            }
            break;
        default:
            break;
    }
    return NewString;
}

static function string FormDescriptionForObjective(DailyEventInformation EventInfo)
{
    local string DescriptionString;

    switch(EventInfo.ObjectiveType)
    {
        case 0:
            DescriptionString = GetWeaponStringForDT(EventInfo.ObjectiveClasses[0]);
            break;
        case 1:
            switch(EventInfo.SecondaryType)
            {
                case 1:
                    DescriptionString = GetKillsString(EventInfo.ObjectiveClasses[0]);
                    break;
                case 0:
                    DescriptionString = GetPerkString(EventInfo.ObjectiveClasses[0]);
                    break;
                default:
                    break;
            }
            break;
        case 2:
            switch(EventInfo.SecondaryType)
            {
                case 3:
                    DescriptionString = GetMapString(EventInfo);
                    break;
                case 4:
                    DescriptionString = GetVersusDamageString(EventInfo);
                    break;
                case 5:
                    DescriptionString = GetVersusKillsString(EventInfo);
                    break;
                case 6:
                    DescriptionString = GetVersusCompleteString(EventInfo);
                    break;
                default:
                    break;
            }
            break;
        default:
            break;
    }
    return DescriptionString;
}

static function string GetWeaponStringForDT(name WeaponName)
{
    local string MyString;

    if(WeaponName == 'KFWeap_Edged_Knife')
    {
        MyString = default.KnifeString;        
    }
    else
    {
        MyString = Localize(string(WeaponName), "ItemName", "KFGameContent");
    }
    return MyString;
}

static function string GetPerkString(name PerkClassName)
{
    local string MyString;

    MyString = Localize(string(PerkClassName), "PerkName", "KFGame");
    return MyString;
}

static function string GetKillsString(name ZedClassName)
{
    local string MyString;

    MyString = Localize("Zeds", string(ZedClassName), "KFGame");
    return MyString;
}

static function string GetMapString(DailyEventInformation EventInfo)
{
    local string MyString;

    MyString = (Class'KFCommon_LocalizedStrings'.static.GetFriendlyMapName(string(EventInfo.ObjectiveClasses[0])) @ "-") @ Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(EventInfo.CompletionAmount));
    return MyString;
}

static function string GetVersusDamageString(DailyEventInformation EventInfo)
{
    local string MyString;

    MyString = Localize("Zeds", string(EventInfo.ObjectiveClasses[0]), "KFGame");
    return MyString;
}

static function string GetVersusKillsString(DailyEventInformation EventInfo)
{
    local string MyString;

    MyString = Localize("Zeds", string(EventInfo.ObjectiveClasses[0]), "KFGame");
    return MyString;
}

static function string GetVersusCompleteString(DailyEventInformation EventInfo)
{
    local string MyString;

    MyString = Localize(string(EventInfo.ObjectiveClasses[0]), "CharacterName", "KFCharacterInfo");
    return MyString;
}

function bool HasObjectiveStatusChanged()
{
    local int I;
    local bool bHasChanged, bTempStatus;
    local int tempNumericValue;

    if(KFPC == none)
    {
        return false;
    }
    if(!KFPC.HasReadStats())
    {
        return true;
    }
    if(NUM_OF_DAILIES != ObjectiveStatusList.Length)
    {
        ObjectiveStatusList.Length = NUM_OF_DAILIES;
        I = 0;
        J0x6E:

        if(I < NUM_OF_DAILIES)
        {
            ObjectiveStatusList[I].bComplete = KFPC.IsDailyObjectiveComplete(I);
            ObjectiveStatusList[I].numericValue = KFPC.GetCurrentDailyValue(I);
            ++ I;
            goto J0x6E;
        }
        bHasChanged = true;        
    }
    else
    {
        I = 0;
        J0x14C:

        if(I < NUM_OF_DAILIES)
        {
            bTempStatus = KFPC.IsDailyObjectiveComplete(I);
            tempNumericValue = KFPC.GetCurrentDailyValue(I);
            if((ObjectiveStatusList[I].bComplete != bTempStatus) || tempNumericValue != ObjectiveStatusList[I].numericValue)
            {
                bHasChanged = true;
                ObjectiveStatusList[I].bComplete = bTempStatus;
                ObjectiveStatusList[I].numericValue = tempNumericValue;
            }
            ++ I;
            goto J0x14C;
        }
    }
    return bHasChanged;
}

defaultproperties
{
    TitleString="DAILY OBJECTIVES"
    OverviewString="Daily Objectives are a randomly determined set of goals that change each day. Completing a Daily Objective will earn Dosh for your Dosh Vault."
    SubtitleString="Current Daily Objectives"
    KnifeString="Knife"
    IconURL="UI_PerkIcons_TEX.UI_PerkIcon_Berserker"
    ObjectiveIconURLs(0)="DailyObjective_UI.KF2_Dailies_Icon_Character"
    ObjectiveIconURLs(1)="DailyObjective_UI.KF2_Dailies_Icon_Map"
    ObjectiveIconURLs(2)="DailyObjective_UI.KF2_Dailies_Icon_PerkLvl"
    ObjectiveIconURLs(3)="DailyObjective_UI.KF2_Dailies_Icon_VS"
    ObjectiveIconURLs(4)="DailyObjective_UI.KF2_Dailies_Icon_Weapon"
    ObjectiveIconURLs(5)="DailyObjective_UI.KF2_Dailies_Icon_ZED"
    NUM_OF_DAILIES=3
}