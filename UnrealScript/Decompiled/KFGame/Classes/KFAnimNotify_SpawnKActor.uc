/*******************************************************************************
 * KFAnimNotify_SpawnKActor generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAnimNotify_SpawnKActor extends AnimNotify_Scripted
    editinlinenew
    collapsecategories
    hidecategories(Object);

/** Mesh to spawn physics for */
var() const StaticMesh RigidBodyMesh;
/** Lower bound of random initial linear vel */
var() Vector MinLinearVel;
/** Upper bound of random initial linear vel */
var() Vector MaxLinearVel;
/** Lower bound of random initial angular vel */
var() Vector MinAngularVel;
/** Upper bound of random initial angular vel */
var() Vector MaxAngularVel;
/** Mesh translation */
var() Vector MeshTranslation;
/** Mesh rotation */
var() Rotator MeshRotation;
/** Bone to spawn this actor on */
var() name BoneName;
/** If set, hide the bone when spawning the new mesh */
var() bool bShouldHideBone;
/** If true, calls ANIMNOTIFY_SpawnedKActor on KFPawn, allowing access to the spawned KActor */
var() bool bNotifyPawnOwner;
/** If true, do not run on dedicated server */
var() bool bClientOnly;
/** If true, always spawn regardless of effect relevancy or detail */
var() bool bIgnoreEffectRelevancy;
/** If > 0, when spawned in first person the mesh is hidden for a short time */
var() float FirstPersonUnhideDelay;

event Notify(Actor Owner, AnimNodeSequence AnimSeqInstigator)
{
    local KFKActorSpawnable NewKActor;
    local editinline SkeletalMeshComponent SkelComp;
    local Vector Loc, LinearVel, AngularVel;
    local Rotator Rot;
    local Quat BoneQuat;
    local KFPawn P;

    if(bClientOnly && Owner.WorldInfo.NetMode == NM_DedicatedServer)
    {
        return;
    }
    SkelComp = AnimSeqInstigator.SkelComponent;
    if((RigidBodyMesh == none) || SkelComp == none)
    {
        return;
    }
    if(bShouldHideBone)
    {
        SkelComp.HideBoneByName(BoneName, 0);
    }
    if(!bIgnoreEffectRelevancy && Owner.WorldInfo.bDropDetail || !Owner.ActorEffectIsRelevant(none, false))
    {
        return;
    }
    Loc = SkelComp.GetBoneLocation(BoneName);
    BoneQuat = SkelComp.GetBoneQuaternion(BoneName);
    Rot = QuatToRotator(BoneQuat);
    NewKActor = Owner.Spawn(Class'KFKActorSpawnable', Owner,, Loc, Rot + MeshRotation);
    if(NewKActor != none)
    {
        NewKActor.StaticMeshComponent.SetStaticMesh(RigidBodyMesh);
        NewKActor.StaticMeshComponent.SetTranslation(MeshTranslation);
        NewKActor.LifeSpan = 30 * FClamp(Owner.WorldInfo.DestructionLifetimeScale, 0.1, 2);
        LinearVel.X = RandRange(MinLinearVel.X, MaxLinearVel.X);
        LinearVel.Y = RandRange(MinLinearVel.Y, MaxLinearVel.Y);
        LinearVel.Z = RandRange(MinLinearVel.Z, MaxLinearVel.Z);
        NewKActor.StaticMeshComponent.SetRBLinearVelocity(Owner.Velocity + QuatRotateVector(BoneQuat, LinearVel));
        AngularVel.X = RandRange(MinAngularVel.X, MaxAngularVel.X);
        AngularVel.Y = RandRange(MinAngularVel.Y, MaxAngularVel.Y);
        AngularVel.Z = RandRange(MinAngularVel.Z, MaxAngularVel.Z);
        NewKActor.StaticMeshComponent.SetRBAngularVelocity(QuatRotateVector(BoneQuat, AngularVel));
        NewKActor.StaticMeshComponent.WakeRigidBody();
        if(bNotifyPawnOwner || SkelComp.bOwnerNoSee && FirstPersonUnhideDelay > float(0))
        {
            P = KFPawn(Owner);
            if(bNotifyPawnOwner)
            {
                P.ANIMNOTIFY_SpawnedKActor(NewKActor, AnimSeqInstigator);
            }
            if((SkelComp.bOwnerNoSee && FirstPersonUnhideDelay > float(0)) && P.IsFirstPerson())
            {
                NewKActor.HideForInterval(FirstPersonUnhideDelay);
            }
        }
    }
}

defaultproperties
{
    BoneName=RW_Magazine1
    FirstPersonUnhideDelay=0.15
    NotifyColor=(B=255,G=0,R=255,A=255)
}