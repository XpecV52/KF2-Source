/*******************************************************************************
 * KFOnlineStatsWrite generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFOnlineStatsWrite extends OnlineStatsWrite
    native
    config(Game);

const KFMAX_Perks = 10;
const VIEWID_KFGameStats = 1;
const STATID_None = 0;
const STATID_Cmdo_Progress = 1;
const STATID_Cmdo_Build = 2;
const STATID_Bsrk_Progress = 10;
const STATID_Bsrk_Build = 11;
const STATID_Sup_Progress = 20;
const STATID_Sup_Build = 21;
const STATID_Sup_WeldPoints = 22;
const STATID_Fire_Progress = 30;
const STATID_Fire_Build = 31;
const STATID_Medic_Progress = 40;
const STATID_Medic_Build = 41;
const STATID_Medic_HealPoints = 42;
const STATID_Shrp_Progress = 50;
const STATID_Shrp_Build = 51;
const STATID_Demo_Progress = 60;
const STATID_Demo_Build = 61;
const STATID_Surv_Progress = 70;
const STATID_Surv_Build = 71;
const STATID_Guns_Progress = 80;
const STATID_Guns_Build = 81;
const STATID_SWAT_Progress = 90;
const STATID_SWAT_Build = 91;
const STATID_Kills = 200;
const STATID_StalkerKills = 201;
const STATID_CrawlerKills = 202;
const STATID_FleshpoundKills = 203;
const STATID_SpecialEventProgress = 300;
const STATID_WeeklyEventProgress = 301;
const STATID_DailyEventInfo = 302;
const STATID_DailyEventIDs = 303;
const STATID_DailyEventStats1 = 304;
const STATID_DailyEventStats2 = 305;
const STATID_SpecialEventKills_DEPRECATED = 306;
const STATID_SeasonalEventStats1 = 307;
const STATID_SeasonalEventStats2 = 308;
const STATID_SeasonalEventStats3 = 309;
const STATID_SeasonalEventStats4 = 310;
const STATID_SeasonalEventStats5 = 311;
const STATID_DoshVaultTotal = 400;
const STATID_LastViewedDoshVaultTotal = 401;
const STATID_DoshVaultProgress = 402;
const STATID_DoshVaultRecovered = 403;
const STATID_AchievementPlaceholder = 500;
const STATID_AnalyticsPlaceholder = 800;
const STATID_PersonalBest_KnifeKills = 2000;
const STATID_PersonalBest_PistolKills = 2001;
const STATID_PersonalBest_HeadShots = 2002;
const STATID_PersonalBest_Healing = 2003;
const STATID_PersonalBest_Kills = 2004;
const STATID_PersonalBest_Assists = 2005;
const STATID_PersonalBest_LargeZedKill = 2006;
const STATID_PersonalBest_Dosh = 2007;
const STATID_MatchWins = 3000;
const STATID_DingoAchievementStart = 4000;
const STATID_ACHIEVE_MrPerky5 = 4001;
const STATID_ACHIEVE_MrPerky10 = 4002;
const STATID_ACHIEVE_MrPerky15 = 4003;
const STATID_ACHIEVE_MrPerky20 = 4004;
const STATID_ACHIEVE_MrPerky25 = 4005;
const STATID_ACHIEVE_HardWins = 4015;
const STATID_ACHIEVE_SuicidalWins = 4016;
const STATID_ACHIEVE_HellWins = 4017;
const STATID_ACHIEVE_VSZedWins = 4009;
const STATID_ACHIEVE_VSHumanWins = 4010;
const STATID_ACHIEVE_HoldOut = 4011;
const STATID_ACHIEVE_DieVolter = 4012;
const STATID_ACHIEVE_FleshPoundKill = 4013;
const STATID_ACHIEVE_ShrikeKill = 4014;
const STATID_ACHIEVE_SirenKill = 4018;
const STATID_ACHIEVE_Benefactor = 4019;
const STATID_ACHIEVE_HealTeam = 4020;
const STATID_ACHIEVE_QuickOnTheTrigger = 4033;
const STATID_ACHIEVE_CollectCatacolmbs = 4021;
const STATID_ACHIEVE_BioticsCollectibles = 4022;
const STATID_ACHIEVE_EvacsCollectibles = 4023;
const STATID_ACHIEVE_OutpostCollectibles = 4024;
const STATID_ACHIEVE_PrisonCollectibles = 4025;
const STATID_ACHIEVE_ManorCollectibles = 4026;
const STATID_ACHIEVE_ParisCollectibles = 4027;
const STATID_ACHIEVE_FarmhouseCollectibles = 4028;
const STATID_ACHIEVE_BlackForestCollectibles = 4029;
const STATID_ACHIEVE_ContainmentStationCollectibles = 4030;
const STATID_ACHIEVE_InfernalRealmCollectibles = 4031;
const STATID_ACHIEVE_HostileGroundsCollectibles = 4032;
const STATID_ACHIEVE_ZedLandingCollectibles = 4035;
const STATID_ACHIEVE_DescentCollectibles = 4036;
const STATID_ACHIEVE_NukedCollectibles = 4037;
const STATID_ACHIEVE_TragicKingdomCollectibles = 4038;
const STATID_ACHIEVE_NightmareCollectibles = 4039;
const STATID_ACHIEVE_KrampusCollectibles = 4040;
const STATID_ACHIEVE_ArenaCollectibles = 4041;
const STATID_ACHIEVE_PowercoreCollectibles = 4042;
const STATID_ACHIEVE_AirshipCollectibles = 4043;
const STATID_ACHIEVE_LockdownCollectibles = 4044;
const STATID_ACHIEVE_MonsterBallCollectibles = 4045;
const STATID_ACHIEVE_MonsterBallSecretRoom = 4046;
const STATID_ACHIEVE_SantasWorkshopCollectibles = 4047;
const STATID_ACHIEVE_ShoppingSpreeCollectibles = 4048;
const STATID_ACHIEVE_SpillwayCollectibles = 4049;
const STATID_ACHIEVE_SteamFortressCollectibles = 4050;
const STATID_ACHIEVE_AsylumCollectibles = 4051;
const STATID_ACHIEVE_SanitariumCollectibles = 4052;
const STATID_ACHIEVE_DefeatMatriarch = 4053;
const STATID_ACHIEVE_BiolapseCollectibles = 4054;
const WeldingPointsRequired = 510;
const HealingPointsRequired = 10;
const MaxPerkLevel = 25;
const MaxPrestigeLevel = 5;
const SpecialEventObjectiveCountMax = 8;
const KFACHID_ParisNormal = 0;
const KFACHID_ParisHard = 1;
const KFACHID_ParisSuicidal = 2;
const KFACHID_ParisHellOnEarth = 3;
const KFACHID_OutpostNormal = 4;
const KFACHID_OutpostHard = 5;
const KFACHID_OutpostSuicidal = 6;
const KFACHID_OutpostHellOnEarth = 7;
const KFACHID_BioticsNormal = 8;
const KFACHID_BioticsHard = 9;
const KFACHID_BioticsSuicidal = 10;
const KFACHID_BioticsHellOnEarth = 11;
const KFACHID_ManorNormal = 12;
const KFACHID_ManorHard = 13;
const KFACHID_ManorSuicidal = 14;
const KFACHID_ManorHellOnEarth = 15;
const KFACHID_ParisCollectibles = 16;
const KFACHID_OutpostCollectibles = 17;
const KFACHID_BioticsCollectibles = 18;
const KFACHID_ManorCollectibles = 19;
const KFACHID_EvacNormal = 20;
const KFACHID_EvacHard = 21;
const KFACHID_EvacSuicidal = 22;
const KFACHID_EvacHellOnEarth = 23;
const KFACHID_CatacombsNormal = 24;
const KFACHID_CatacombsHard = 25;
const KFACHID_CatacombsSuicidal = 26;
const KFACHID_CatacombsHellOnEarth = 27;
const KFACHID_EvacsCollectibles = 28;
const KFACHID_CatacombsCollectibles = 29;
const KFACHID_Berserker_Lvl5 = 30;
const KFACHID_Berserker_Lvl10 = 31;
const KFACHID_Berserker_Lvl15 = 32;
const KFACHID_Berserker_Lvl20 = 33;
const KFACHID_Berserker_Lvl25 = 34;
const KFACHID_FieldMedic_Lvl5 = 35;
const KFACHID_FieldMedic_Lvl10 = 36;
const KFACHID_FieldMedic_Lvl15 = 37;
const KFACHID_FieldMedic_Lvl20 = 38;
const KFACHID_FieldMedic_Lvl25 = 39;
const KFACHID_Commando_Lvl5 = 40;
const KFACHID_Commando_Lvl10 = 41;
const KFACHID_Commando_Lvl15 = 42;
const KFACHID_Commando_Lvl20 = 43;
const KFACHID_Commando_Lvl25 = 44;
const KFACHID_Support_Lvl5 = 45;
const KFACHID_Support_Lvl10 = 46;
const KFACHID_Support_Lvl15 = 47;
const KFACHID_Support_Lvl20 = 48;
const KFACHID_Support_Lvl25 = 49;
const KFACHID_Firebug_Lvl5 = 50;
const KFACHID_Firebug_Lvl10 = 51;
const KFACHID_Firebug_Lvl15 = 52;
const KFACHID_Firebug_Lvl20 = 53;
const KFACHID_Firebug_Lvl25 = 54;
const KFACHID_Demolitionist_Lvl5 = 55;
const KFACHID_Demolitionist_Lvl10 = 56;
const KFACHID_Demolitionist_Lvl15 = 57;
const KFACHID_Demolitionist_Lvl20 = 58;
const KFACHID_Demolitionist_Lvl25 = 59;
const KFACHID_Gunslinger_Lvl5 = 60;
const KFACHID_Gunslinger_Lvl10 = 61;
const KFACHID_Gunslinger_Lvl15 = 62;
const KFACHID_Gunslinger_Lvl20 = 63;
const KFACHID_Gunslinger_Lvl25 = 64;
const KFACHID_BerserkerNormal = 65;
const KFACHID_BerserkerHard = 66;
const KFACHID_BerserkerSuicidal = 67;
const KFACHID_BerserkerHellOnEarth = 68;
const KFACHID_FieldMedicNormal = 69;
const KFACHID_FieldMedicHard = 70;
const KFACHID_FieldMedicSuicidal = 71;
const KFACHID_FieldMedicHellOnEarth = 72;
const KFACHID_CommandoNormal = 73;
const KFACHID_CommandoHard = 74;
const KFACHID_CommandoSuicidal = 75;
const KFACHID_CommandoHellOnEarth = 76;
const KFACHID_SupportNormal = 77;
const KFACHID_SupportHard = 78;
const KFACHID_SupportSuicidal = 79;
const KFACHID_SupportHellOnEarth = 80;
const KFACHID_FirebugNormal = 81;
const KFACHID_FirebugHard = 82;
const KFACHID_FirebugSuicidal = 83;
const KFACHID_FirebugHellOnEarth = 84;
const KFACHID_DemolitionistNormal = 85;
const KFACHID_DemolitionistHard = 86;
const KFACHID_DemolitionistSuicidal = 87;
const KFACHID_DemolitionistHellOnEarth = 88;
const KFACHID_GunslingerNormal = 89;
const KFACHID_GunslingerHard = 90;
const KFACHID_GunslingerSuicidal = 91;
const KFACHID_GunslingerHellOnEarth = 92;
const KFACHID_All_Lvl25 = 93;
const KFACHID_BlackForestNormal = 94;
const KFACHID_BlackForestHard = 95;
const KFACHID_BlackForestSuicidal = 96;
const KFACHID_BlackForestHellOnEarth = 97;
const KFACHID_BlackForestCollectibles = 98;
const KFACHID_FarmhouseNormal = 99;
const KFACHID_FarmhouseHard = 100;
const KFACHID_FarmhouseSuicidal = 101;
const KFACHID_FarmhouseHellOnEarth = 102;
const KFACHID_FarmhouseCollectibles = 103;
const KFACHID_PrisonNormal = 104;
const KFACHID_PrisonHard = 105;
const KFACHID_PrisonSuicidal = 106;
const KFACHID_PrisonHellOnEarth = 107;
const KFACHID_PrisonCollectibles = 108;
const KFACHID_TutorialComplete = 109;
const KFACHID_Sharpshooter_Lvl5 = 110;
const KFACHID_Sharpshooter_Lvl10 = 111;
const KFACHID_Sharpshooter_Lvl15 = 112;
const KFACHID_Sharpshooter_Lvl20 = 113;
const KFACHID_Sharpshooter_Lvl25 = 114;
const KFACHID_SharpshooterNormal = 115;
const KFACHID_SharpshooterHard = 116;
const KFACHID_SharpshooterSuicidal = 117;
const KFACHID_SharpshooterHellOnEarth = 118;
const KFACHID_ContainmentStationNormal = 119;
const KFACHID_ContainmentStationHard = 120;
const KFACHID_ContainmentStationSuicidal = 121;
const KFACHID_ContainmentStationHellOnEarth = 122;
const KFACHID_ContainmentStationCollectibles = 123;
const KFACHID_HostileGroundsNormal = 124;
const KFACHID_HostileGroundsHard = 125;
const KFACHID_HostileGroundsSuicidal = 126;
const KFACHID_HostileGroundsHellOnEarth = 127;
const KFACHID_HostileGroundsCollectibles = 128;
const KFACHID_DeadSilence = 129;
const KFACHID_QuickOnTheTrigger = 130;
const KFACHID_ItsOnlyAFleshWound = 131;
const KFACHID_HackAndSlash = 132;
const KFACHID_DieVolter = 133;
const KFACHID_WinHard = 134;
const KFACHID_WinSuicidal = 135;
const KFACHID_WinHellOnEarth = 136;
const KFACHID_MrPerky5 = 137;
const KFACHID_MrPerky10 = 138;
const KFACHID_MrPerky15 = 139;
const KFACHID_MrPerky20 = 140;
const KFACHID_MrPerky25 = 141;
const KFACHID_Win1 = 142;
const KFACHID_Win10 = 143;
const KFACHID_Win25 = 144;
const KFACHID_VsZedWin = 145;
const KFACHID_VsHumanWin = 146;
const KFACHID_HoldOut = 147;
const KFACHID_IGotYourBack = 148;
const KFACHID_Benefactor = 149;
const KFACHID_InfernalRealmNormal = 150;
const KFACHID_InfernalRealmHard = 151;
const KFACHID_InfernalRealmSuicidal = 152;
const KFACHID_InfernalRealmHellOnEarth = 153;
const KFACHID_InfernalRealmCollectibles = 154;
const KFACHID_SWAT_Lvl5 = 155;
const KFACHID_SWAT_Lvl10 = 156;
const KFACHID_SWAT_Lvl15 = 157;
const KFACHID_SWAT_Lvl20 = 158;
const KFACHID_SWAT_Lvl25 = 159;
const KFACHID_SWATNormal = 160;
const KFACHID_SWATHard = 161;
const KFACHID_SWATSuicidal = 162;
const KFACHID_SWATHellOnEarth = 163;
const KFACHID_Surv_Lvl5 = 164;
const KFACHID_Surv_Lvl10 = 165;
const KFACHID_Surv_Lvl15 = 166;
const KFACHID_Surv_Lvl20 = 167;
const KFACHID_Surv_Lvl25 = 168;
const KFACHID_SurvNormal = 169;
const KFACHID_SurvHard = 170;
const KFACHID_SurvSuicidal = 171;
const KFACHID_SurvHellOnEarth = 172;
const KFACHID_ZedLandingNormal = 173;
const KFACHID_ZedLandingHard = 174;
const KFACHID_ZedLandingSuicidal = 175;
const KFACHID_ZedLandingHellOnEarth = 176;
const KFACHID_ZedLandingCollectibles = 177;
const KFACHID_DescentNormal = 178;
const KFACHID_DescentHard = 179;
const KFACHID_DescentSuicidal = 180;
const KFACHID_DescentHellOnEarth = 181;
const KFACHID_DescentCollectibles = 182;
const KFACHID_NukedNormal = 183;
const KFACHID_NukedHard = 184;
const KFACHID_NukedSuicidal = 185;
const KFACHID_NukedHellOnEarth = 186;
const KFACHID_NukedCollectibles = 187;
const KFACHID_TragicKingdomNormal = 188;
const KFACHID_TragicKingdomHard = 189;
const KFACHID_TragicKingdomSuicidal = 190;
const KFACHID_TragicKingdomHellOnEarth = 191;
const KFACHID_TragicKingdomCollectibles = 192;
const KFACHID_NightmareNormal = 193;
const KFACHID_NightmareHard = 194;
const KFACHID_NightmareSuicidal = 195;
const KFACHID_NightmareHellOnEarth = 196;
const KFACHID_NightmareCollectibles = 197;
const KFACHID_KrampusNormal = 198;
const KFACHID_KrampusHard = 199;
const KFACHID_KrampusSuicidal = 200;
const KFACHID_KrampusHellOnEarth = 201;
const KFACHID_KrampusCollectibles = 202;
const KFACHID_ArenaNormal = 203;
const KFACHID_ArenaHard = 204;
const KFACHID_ArenaSuicidal = 205;
const KFACHID_ArenaHellOnEarth = 206;
const KFACHID_ArenaCollectibles = 207;
const KFACHID_PowercoreNormal = 208;
const KFACHID_PowercoreHard = 209;
const KFACHID_PowercoreSuicidal = 210;
const KFACHID_PowercoreHellOnEarth = 211;
const KFACHID_PowercoreCollectibles = 212;
const KFACHID_AirshipNormal = 213;
const KFACHID_AirshipHard = 214;
const KFACHID_AirshipSuicidal = 215;
const KFACHID_AirshipHellOnEarth = 216;
const KFACHID_AirshipCollectibles = 217;
const KFACHID_LockdownNormal = 218;
const KFACHID_LockdownHard = 219;
const KFACHID_LockdownSuicidal = 220;
const KFACHID_LockdownHellOnEarth = 221;
const KFACHID_LockdownCollectibles = 222;
const KFACHID_MonsterBallNormal = 223;
const KFACHID_MonsterBallHard = 224;
const KFACHID_MonsterBallSuicidal = 225;
const KFACHID_MonsterBallHellOnEarth = 226;
const KFACHID_MonsterBallCollectibles = 227;
const KFACHID_MonsterBallSecretRoom = 228;
const KFACHID_SantasWorkshopNormal = 229;
const KFACHID_SantasWorkshopHard = 230;
const KFACHID_SantasWorkshopSuicidal = 231;
const KFACHID_SantasWorkshopHellOnEarth = 232;
const KFACHID_SantasWorkshopCollectibles = 233;
const KFACHID_ShoppingSpreeNormal = 234;
const KFACHID_ShoppingSpreeHard = 235;
const KFACHID_ShoppingSpreeSuicidal = 236;
const KFACHID_ShoppingSpreeHellOnEarth = 237;
const KFACHID_ShoppingSpreeCollectibles = 238;
const KFACHID_SpillwayNormal = 239;
const KFACHID_SpillwayHard = 240;
const KFACHID_SpillwaySuicidal = 241;
const KFACHID_SpillwayHellOnEarth = 242;
const KFACHID_SpillwayCollectibles = 243;
const KFACHID_SteamFortressObjectiveNormal = 244;
const KFACHID_SteamFortressObjectiveHard = 245;
const KFACHID_SteamFortressObjectiveSuicidal = 246;
const KFACHID_SteamFortressObjectiveHellOnEarth = 247;
const KFACHID_SteamFortressCollectibles = 248;
const KFACHID_ZedLandingObjectiveNormal = 249;
const KFACHID_ZedLandingObjectiveHard = 250;
const KFACHID_ZedLandingObjectiveSuicidal = 251;
const KFACHID_ZedLandingObjectiveHellOnEarth = 252;
const KFACHID_OutpostObjectiveNormal = 253;
const KFACHID_OutpostObjectiveHard = 254;
const KFACHID_OutpostObjectiveSuicidal = 255;
const KFACHID_OutpostObjectiveHellOnEarth = 256;
const KFACHID_AsylumHard = 257;
const KFACHID_AsylumHellOnEarth = 258;
const KFACHID_AsylumCollectibles = 259;
const KFACHID_NukedObjectiveHard = 260;
const KFACHID_NukedObjectiveHellOnEarth = 261;
const KFACHID_BioticsLabObjectiveHard = 262;
const KFACHID_BioticsLabObjectiveHellOnEarth = 263;
const KFACHID_SanitariumHard = 264;
const KFACHID_SanitariumHellOnEarth = 265;
const KFACHID_SanitariumCollectibles = 266;
const KFACHID_DefeatMatriarch = 267;
const KFACHID_BiolapseHard = 268;
const KFACHID_BiolapseHellOnEarth = 269;
const KFACHID_BiolapseCollectibles = 270;

enum eDailyObjectiveType
{
    DOT_WeaponDamage,
    DOT_PerkXP,
    DOT_Maps,
    DOT_MAX
};

enum eDailyObjectiveSecondaryType
{
    DOST_PlayPerk,
    DOST_KillZeds,
    DOST_KillBoss,
    DOST_MapCompletion,
    DOST_VersusDamage,
    DOST_VersusKills,
    DOST_CharacterCompletion,
    DOST_KnifeDamage,
    DOST_MAX
};

struct native DailyEventInformation
{
    var KFOnlineStatsWrite.eDailyObjectiveType ObjectiveType;
    var KFOnlineStatsWrite.eDailyObjectiveSecondaryType SecondaryType;
    var array<name> ObjectiveClasses;
    var int CompletionAmount;

    structdefaultproperties
    {
        ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage
        SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk
        ObjectiveClasses=none
        CompletionAmount=0
    }
};

var KFPlayerController MyKFPC;
var private int Kills;
var private int StalkerKills;
var private int CrawlerKills;
var private int FleshPoundKills;
var private int WeldingPoints;
var private int HealingPoints;
var private int CommandoXP;
var private int CommandoLVL;
var private int CommandoPSG;
var private int CommandoBuild;
var private int BerserkerXP;
var private int BerserkerLVL;
var private int BerserkerPSG;
var private int BerserkerBuild;
var private int SupportXP;
var private int SupportLVL;
var private int SupportPSG;
var private int SupportBuild;
var private int MedicXP;
var private int MedicLVL;
var private int MedicPSG;
var private int MedicBuild;
var private int FirebugXP;
var private int FirebugLVL;
var private int FirebugPSG;
var private int FirebugBuild;
var private int DemoXP;
var private int DemoLVL;
var private int DemoPSG;
var private int DemoBuild;
var private int GunslingerXP;
var private int GunslingerLVL;
var private int GunslingerPSG;
var private int GunslingerBuild;
var private int SharpshooterXP;
var private int SharpshooterLVL;
var private int SharpshooterPSG;
var private int SharpshooterBuild;
var private int SwatXP;
var private int SwatLVL;
var private int SwatPSG;
var private int SwatBuild;
var private int SurvXP;
var private int SurvLVL;
var private int SurvPSG;
var private int SurvBuild;
var private float BonusXPRemainder[10];
var private int PersonalBest_KnifeKills;
var private int PersonalBest_PistolKills;
var private int PersonalBest_HeadShots;
var private int PersonalBest_Healing;
var private int PersonalBest_Kills;
var private int PersonalBest_Assists;
var private int PersonalBest_LargeZedKil;
var private int PersonalBest_Dosh;
var private int SpecialEventInfo;
var private int InitialSpecialEventInfo;
var private int WeeklyEventInfo;
var private int InitialWeeklyEventInfo;
var private int DailyEventInfo;
var private bool bIgnoreDailyStatReads;
var private const bool bFailedToRead;
var private const bool bReadSuccessful;
var config bool bAllowPerkCheats;
var private const bool bDisabled;
var bool bLogStatsWrite;
var private int DailyEventIDs;
var private int DailyEventStats1;
var private int DailyEventStats2;
var private int SpecialEventKills_DEPRECATED;
var private int SeasonalEventStats1;
var private int SeasonalEventStatsMax1;
var private int SeasonalEventStats2;
var private int SeasonalEventStatsMax2;
var private int SeasonalEventStats3;
var private int SeasonalEventStatsMax3;
var private int SeasonalEventStats4;
var private int SeasonalEventStatsMax4;
var private int SeasonalEventStats5;
var private int SeasonalEventStatsMax5;
var int PerRoundWeldXP;
var int PerRoundHealXP;
var array<AchievementDetails> Achievements;
var const int XPTable[25];
var int VoshRewards[11];
var array<float> VoshDifficultyScalar;
var native map<0, 0> KillZedRewards;
var native map<0, 0> ZedsKilled;
var array<DailyEventInformation> DailyEvents;
var int SeasonalKillsObjectiveThreshold;
var private const KFSeasonalEventStats SeasonalEvent;

// Export UKFOnlineStatsWrite::execOnStatsInitialized(FFrame&, void* const)
native function OnStatsInitialized(bool bWasSuccessful);

// Export UKFOnlineStatsWrite::execIncrementIntStat(FFrame&, void* const)
native function IncrementIntStat(int StatId, optional int IncBy)
{
    IncBy = 1;                
}

// Export UKFOnlineStatsWrite::execIncrementFloatStat(FFrame&, void* const)
native function IncrementFloatStat(int StatId, optional float IncBy)
{
    IncBy = 1;                
}

// Export UKFOnlineStatsWrite::execSetIntStat(FFrame&, void* const)
native function SetIntStat(int StatId, int Value);

// Export UKFOnlineStatsWrite::execSetFloatStat(FFrame&, void* const)
native function SetFloatStat(int StatId, float Value);

// Export UKFOnlineStatsWrite::execHasCheated(FFrame&, void* const)
native final function bool HasCheated();

// Export UKFOnlineStatsWrite::execNotifyCheats(FFrame&, void* const)
native final function NotifyCheats(optional bool bSaveToConfig);

// Export UKFOnlineStatsWrite::execHasReadFailure(FFrame&, void* const)
native final function bool HasReadFailure();

// Export UKFOnlineStatsWrite::execNotifyReadFailure(FFrame&, void* const)
native final function NotifyReadFailure();

// Export UKFOnlineStatsWrite::execHasReadStats(FFrame&, void* const)
native final function bool HasReadStats();

// Export UKFOnlineStatsWrite::execNotifyReadSucceeded(FFrame&, void* const)
native final function NotifyReadSucceeded();

// Export UKFOnlineStatsWrite::execLogSubsystemIntStat(FFrame&, void* const)
private native final function int LogSubsystemIntStat(int StatId);

simulated function LogStats()
{
    LogInternal("###############################################################");
    LogInternal("CACHED VALUES:");
    LogInternal((("CommandoXP, CommandoLVL " @ "    =") @ string(CommandoXP)) @ string(CommandoLVL));
    LogInternal((("BerserkerXP, BerserkerLVL " @ "  =") @ string(BerserkerXP)) @ string(BerserkerLVL));
    LogInternal((("SupportXP, SupportLVL " @ "      =") @ string(SupportXP)) @ string(SupportLVL));
    LogInternal((("MedicXP, MedicLVL " @ "          =") @ string(MedicXP)) @ string(MedicLVL));
    LogInternal("---------------------------------------------------------------");
    LogInternal("STEAM VALUES:");
    LogInternal((("CommandoXP, CommandoLVL " @ "    =") @ string(GetXPFromProgress(LogSubsystemIntStat(1)))) @ string(GetLVLFromProgress(LogSubsystemIntStat(1))));
    LogInternal((("BerserkerXP, BerserkerLVL " @ "  =") @ string(GetXPFromProgress(LogSubsystemIntStat(10)))) @ string(GetLVLFromProgress(LogSubsystemIntStat(10))));
    LogInternal((("SupportXP, SupportLVL " @ "      =") @ string(GetXPFromProgress(LogSubsystemIntStat(20)))) @ string(GetLVLFromProgress(LogSubsystemIntStat(20))));
    LogInternal((("MedicXP, MedicLVL " @ "          =") @ string(GetXPFromProgress(LogSubsystemIntStat(40)))) @ string(GetLVLFromProgress(LogSubsystemIntStat(40))));
    LogInternal(" ");
    LogInternal(("CommandoProgress " @ "           =") @ string(LogSubsystemIntStat(1)));
    LogInternal(("BerserkerProgress " @ "          =") @ string(LogSubsystemIntStat(10)));
    LogInternal(("SupportProgress " @ "            =") @ string(LogSubsystemIntStat(20)));
    LogInternal(("MedicProgress " @ "              =") @ string(LogSubsystemIntStat(40)));
    LogInternal("###############################################################");
}

simulated function LogStatValue(int StatId)
{
    LogInternal((("*** Stat value for ID" @ string(StatId)) @ ": ") @ string(LogSubsystemIntStat(StatId)));
}

event CacheFloatStatsValue(int StatId, float Value)
{
    LogInternal(("*** Not caching float value, please do something with this:" @ string(StatId)) @ string(Value));
}

event CacheStatsValue(int StatId, int Value)
{
    switch(StatId)
    {
        case 1:
            CommandoXP = GetXPFromProgress(Value);
            CommandoLVL = GetLVLFromProgress(Value);
            CommandoPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Commando', CommandoLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "CommandoXP:") @ string(CommandoXP)) @ string(CommandoLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 2:
            CommandoBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "CommandoBuild:") @ string(CommandoBuild));
            }
            break;
        case 10:
            BerserkerXP = GetXPFromProgress(Value);
            BerserkerLVL = GetLVLFromProgress(Value);
            BerserkerPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Berserker', BerserkerLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "BerserkerXP:") @ string(BerserkerXP)) @ string(BerserkerLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 11:
            BerserkerBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "BerserkerBuild:") @ string(BerserkerBuild));
            }
            break;
        case 20:
            SupportXP = GetXPFromProgress(Value);
            SupportLVL = GetLVLFromProgress(Value);
            SupportPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Support', SupportLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "SupportXP:") @ string(SupportXP)) @ string(SupportLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 21:
            SupportBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SupportBuild:") @ string(SupportBuild));
            }
            break;
        case 40:
            MedicXP = GetXPFromProgress(Value);
            MedicLVL = GetLVLFromProgress(Value);
            MedicPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_FieldMedic', MedicLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "MedicXP:") @ string(MedicXP)) @ string(MedicLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 41:
            MedicBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "MedicBuild:") @ string(MedicBuild));
            }
            break;
        case 30:
            FirebugXP = GetXPFromProgress(Value);
            FirebugLVL = GetLVLFromProgress(Value);
            FirebugPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Firebug', FirebugLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "FirebugXP:") @ string(FirebugXP)) @ string(FirebugLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 31:
            FirebugBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "FirebugBuild:") @ string(FirebugBuild));
            }
            break;
        case 60:
            DemoXP = GetXPFromProgress(Value);
            DemoLVL = GetLVLFromProgress(Value);
            DemoPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Demolitionist', DemoLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "DemoXP:") @ string(DemoXP)) @ string(DemoLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 61:
            DemoBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "DemoBuild:") @ string(DemoBuild));
            }
            break;
        case 80:
            GunslingerXP = GetXPFromProgress(Value);
            GunslingerLVL = GetLVLFromProgress(Value);
            GunslingerPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Gunslinger', GunslingerLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "GunslingerXP:") @ string(GunslingerXP)) @ string(GunslingerLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 81:
            GunslingerBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "GunslingerBuild:") @ string(GunslingerBuild));
            }
            break;
        case 50:
            SharpshooterXP = GetXPFromProgress(Value);
            SharpshooterLVL = GetLVLFromProgress(Value);
            SharpshooterPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Sharpshooter', SharpshooterLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "SharpshooterXP:") @ string(SharpshooterXP)) @ string(SharpshooterLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 51:
            SharpshooterBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SharpshooterBuild:") @ string(SharpshooterBuild));
            }
            break;
        case 90:
            SwatXP = GetXPFromProgress(Value);
            SwatLVL = GetLVLFromProgress(Value);
            SwatPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_SWAT', SwatLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "SwatXP:") @ string(SwatXP)) @ string(SwatLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 91:
            SwatBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SwatBuild:") @ string(SwatBuild));
            }
            break;
        case 70:
            SurvXP = GetXPFromProgress(Value);
            SurvLVL = GetLVLFromProgress(Value);
            SurvPSG = GetPSGFromProgress(Value);
            CheckPerkLvlAchievement(Class'KFPerk_Survivalist', SurvLVL);
            if(bLogStatsWrite)
            {
                LogInternal(((((string(GetFuncName()) @ "SurvXP:") @ string(SurvXP)) @ string(SurvLVL)) @ "VALUE:") @ string(Round(float(Value))));
            }
            break;
        case 71:
            SurvBuild = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SurvBuild:") @ string(SurvBuild));
            }
            break;
        case 200:
            Kills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Kills:") @ string(Kills));
            }
            break;
        case 201:
            StalkerKills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Stalker Kills:") @ string(StalkerKills));
            }
            break;
        case 22:
            WeldingPoints = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Welding points:") @ string(WeldingPoints));
            }
            break;
        case 42:
            HealingPoints = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Healing points:") @ string(HealingPoints));
            }
            break;
        case 202:
            CrawlerKills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Crawler kills:") @ string(CrawlerKills));
            }
            break;
        case 203:
            FleshPoundKills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Fleshpound kills:") @ string(FleshPoundKills));
            }
            break;
        case 300:
            InitialSpecialEventInfo = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Special Event: ") @ string(SpecialEventInfo));
            }
            break;
        case 301:
            InitialWeeklyEventInfo = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Weekly Event:") @ string(WeeklyEventInfo));
            }
            break;
        case 302:
            CacheDailyEventProgress(Value);
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Daily Event:") @ string(DailyEventInfo));
            }
            break;
        case 303:
            if(!bIgnoreDailyStatReads)
            {
                DailyEventIDs = Value;
            }
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Daily Event IDs:") @ string(DailyEventIDs));
            }
            break;
        case 304:
            if(bIgnoreDailyStatReads)
            {
                DailyEventStats1 = 0;                
            }
            else
            {
                DailyEventStats1 = Value;
            }
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Daily Event Stats 1:") @ string(DailyEventStats1));
            }
            break;
        case 305:
            if(bIgnoreDailyStatReads)
            {
                DailyEventStats2 = 0;                
            }
            else
            {
                DailyEventStats2 = Value;
            }
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "Daily Event Stats 2:") @ string(DailyEventStats2));
            }
            break;
        case 306:
            SpecialEventKills_DEPRECATED = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SpecialEventKills_DEPRECATED:") @ string(SpecialEventKills_DEPRECATED));
            }
            break;
        case 307:
            SeasonalEventStats1 = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SeasonalEventStats1:") @ string(SeasonalEventStats1));
            }
            break;
        case 308:
            SeasonalEventStats2 = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SeasonalEventStats2:") @ string(SeasonalEventStats2));
            }
            break;
        case 309:
            SeasonalEventStats3 = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SeasonalEventStats3:") @ string(SeasonalEventStats3));
            }
            break;
        case 310:
            SeasonalEventStats4 = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SeasonalEventStats4:") @ string(SeasonalEventStats4));
            }
            break;
        case 311:
            SeasonalEventStats5 = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "SeasonalEventStats5:") @ string(SeasonalEventStats5));
            }
            break;
        case 402:
            VerifyDoshVaultCrates();
            break;
        case 2000:
            PersonalBest_KnifeKills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_KnifeKills:") @ string(PersonalBest_KnifeKills));
            }
            break;
        case 2001:
            PersonalBest_PistolKills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_PistolKills:") @ string(PersonalBest_PistolKills));
            }
            break;
        case 2002:
            PersonalBest_HeadShots = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_HeadShots:") @ string(PersonalBest_HeadShots));
            }
            break;
        case 2003:
            PersonalBest_Healing = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_Healing:") @ string(PersonalBest_Healing));
            }
            break;
        case 2004:
            PersonalBest_Kills = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_Kills:") @ string(PersonalBest_Kills));
            }
            break;
        case 2005:
            PersonalBest_Assists = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_Assists:") @ string(PersonalBest_Assists));
            }
            break;
        case 2006:
            PersonalBest_LargeZedKil = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_LargeZedKil:") @ string(PersonalBest_LargeZedKil));
            }
            break;
        case 2007:
            PersonalBest_Dosh = Value;
            if(bLogStatsWrite)
            {
                LogInternal((string(GetFuncName()) @ "PersonalBest_Dosh:") @ string(PersonalBest_Dosh));
            }
            break;
        default:
            break;
    }
}

private final event GetPerkBuildFromStats(class<KFPerk> PerkClass, out int Build)
{
    switch(PerkClass)
    {
        case Class'KFPerk_Commando':
            Build = CommandoBuild;
            break;
        case Class'KFPerk_Berserker':
            Build = BerserkerBuild;
            break;
        case Class'KFPerk_Support':
            Build = SupportBuild;
            break;
        case Class'KFPerk_FieldMedic':
            Build = MedicBuild;
            break;
        case Class'KFPerk_Firebug':
            Build = FirebugBuild;
            break;
        case Class'KFPerk_Demolitionist':
            Build = DemoBuild;
            break;
        case Class'KFPerk_Gunslinger':
            Build = GunslingerBuild;
            break;
        case Class'KFPerk_Sharpshooter':
            Build = SharpshooterBuild;
            break;
        case Class'KFPerk_SWAT':
            Build = SwatBuild;
            break;
        case Class'KFPerk_Survivalist':
            Build = SurvBuild;
            break;
        default:
            break;
    }
}

private final event SaveBuildToStats(class<KFPerk> InPerk, int Build)
{
    local int StatId;

    StatId = InPerk.static.GetPerkBuildStatID();
    SetIntStat(StatId, Build);
    CacheStatsValue(StatId, Build);
    if(bLogStatsWrite)
    {
        LogInternal((((string(GetFuncName()) @ "Saving build for perk:") @ string(InPerk)) @ "Build:") @ string(Build));
    }
}

// Export UKFOnlineStatsWrite::execGetPerkPrestigeLevel(FFrame&, void* const)
native final function int GetPerkPrestigeLevel(class<KFPerk> Perk);

// Export UKFOnlineStatsWrite::execGetPerkLevel(FFrame&, void* const)
native final function int GetPerkLevel(class<KFPerk> Perk);

// Export UKFOnlineStatsWrite::execGetPerkBuild(FFrame&, void* const)
native final function int GetPerkBuild(class<KFPerk> Perk);

// Export UKFOnlineStatsWrite::execGetXPNeededAt(FFrame&, void* const)
native static final function int GetXPNeededAt(int Level);

// Export UKFOnlineStatsWrite::execIncrementXPStat(FFrame&, void* const)
private native final function IncrementXPStat(class<KFPerk> PerkClass, optional int IncBy)
{
    IncBy = 1;                
}

// Export UKFOnlineStatsWrite::execIncrementPSGStat(FFrame&, void* const)
private native final function bool IncrementPSGStat(class<KFPerk> PerkClass);

// Export UKFOnlineStatsWrite::execGetXPFromProgress(FFrame&, void* const)
private native final function int GetXPFromProgress(int PerkProgress);

// Export UKFOnlineStatsWrite::execGetLVLFromProgress(FFrame&, void* const)
private native final function int GetLVLFromProgress(int PerkProgress);

// Export UKFOnlineStatsWrite::execGetPSGFromProgress(FFrame&, void* const)
private native final function int GetPSGFromProgress(int PerkProgress);

private final event AddXP(class<KFPerk> PerkClass, int dXP, optional bool bApplyPrestigeBonus)
{
    local float XPMultiplier, BonusXP;
    local int PerkIndex, BonusXPTruncated, BonusXPOverflow;

    bApplyPrestigeBonus = false;
    XPMultiplier = 0;
    if(PerkClass == none)
    {
        return;
    }
    if((MyKFPC != none) && bApplyPrestigeBonus)
    {
        XPMultiplier = MyKFPC.GetPerkPrestigeXPMultiplier(PerkClass);
        if(XPMultiplier > 0)
        {
            BonusXP = float(dXP) * XPMultiplier;
            BonusXPTruncated = int(BonusXP);
            PerkIndex = MyKFPC.GetPerkIndexFromClass(PerkClass);
            BonusXPRemainder[PerkIndex] += (BonusXP - float(BonusXPTruncated));
            if(BonusXPRemainder[PerkIndex] >= 1)
            {
                BonusXPOverflow = int(BonusXPRemainder[PerkIndex]);
                BonusXPTruncated += BonusXPOverflow;
                BonusXPRemainder[PerkIndex] -= float(BonusXPOverflow);
            }
            dXP += BonusXPTruncated;
        }
    }
    IncrementXPStat(PerkClass, dXP);
    if(MyKFPC != none)
    {
        MyKFPC.NotifyXPGain(PerkClass, dXP, BonusXPTruncated);
    }
    if(bLogStatsWrite)
    {
        LogInternal((((("AddXP Perk: " $ string(PerkClass)) $ "; dXP: ") $ string(dXP)) $ "; BonusXP: ") $ string(BonusXPTruncated));
    }
}

private final event NotifyLevelUp(class<KFPerk> PerkClass, int NewLVL, int NewPrestigeLevel)
{
    if(MyKFPC != none)
    {
        MyKFPC.NotifyLevelUp(PerkClass, byte(NewLVL), byte(NewPrestigeLevel));
        if(bLogStatsWrite)
        {
            LogInternal((((((string(GetFuncName()) @ "PerkClass:") @ string(PerkClass)) @ "New LVL:") @ string(NewLVL)) @ "NewPrestigeLevel") @ string(NewPrestigeLevel));
        }
        if((NewLVL % 5) == 0)
        {
            CheckPerkLvlAchievement(PerkClass, NewLVL);
        }
    }
}

private final event int GetPerkXP(int StatId)
{
    switch(StatId)
    {
        case 1:
            return CommandoXP;
        case 10:
            return BerserkerXP;
        case 20:
            return SupportXP;
        case 40:
            return MedicXP;
        case 30:
            return FirebugXP;
        case 60:
            return DemoXP;
        case 80:
            return GunslingerXP;
        case 50:
            return SharpshooterXP;
        case 90:
            return SwatXP;
        case 70:
            return SurvXP;
        default:
            return 0;
            break;
    }
}

private final event int GetPerkLVLInternal(int StatId)
{
    switch(StatId)
    {
        case 1:
            return CommandoLVL;
        case 10:
            return BerserkerLVL;
        case 20:
            return SupportLVL;
        case 40:
            return MedicLVL;
        case 30:
            return FirebugLVL;
        case 60:
            return DemoLVL;
        case 80:
            return GunslingerLVL;
        case 50:
            return SharpshooterLVL;
        case 90:
            return SwatLVL;
        case 70:
            return SurvLVL;
        default:
            return 0;
            break;
    }
}

private final event int GetPerkPSG(int StatId)
{
    switch(StatId)
    {
        case 1:
            return CommandoPSG;
        case 10:
            return BerserkerPSG;
        case 20:
            return SupportPSG;
        case 40:
            return MedicPSG;
        case 30:
            return FirebugPSG;
        case 60:
            return DemoPSG;
        case 80:
            return GunslingerPSG;
        case 50:
            return SharpshooterPSG;
        case 90:
            return SwatPSG;
        case 70:
            return SurvPSG;
        default:
            return 0;
            break;
    }
}

private final event int GetPerkLVLByClass(class<KFPerk> PerkClass)
{
    local int StatId;

    StatId = PerkClass.static.GetProgressStatID();
    return GetPerkLVLInternal(StatId);
}

private final event int GetPerkPrestigeLVLByClass(class<KFPerk> PerkClass)
{
    local int StatId;

    StatId = PerkClass.static.GetProgressStatID();
    return GetPerkPSG(StatId);
}

function int GetPersonalBest(EphemeralMatchStats.EPersonalBests PersonalBestID)
{
    switch(PersonalBestID)
    {
        case 0:
            return PersonalBest_KnifeKills;
        case 1:
            return PersonalBest_PistolKills;
        case 2:
            return PersonalBest_HeadShots;
        case 3:
            return PersonalBest_Healing;
        case 4:
            return PersonalBest_Kills;
        case 5:
            return PersonalBest_Assists;
        case 6:
            return PersonalBest_LargeZedKil;
        case 7:
            return PersonalBest_Dosh;
        default:
            return 0;
            break;
    }
}

function SavePersonalBest(EphemeralMatchStats.EPersonalBests PersonalBestID, int Value)
{
    switch(PersonalBestID)
    {
        case 0:
            SetIntStat(2000, Value);
            break;
        case 1:
            SetIntStat(2001, Value);
            break;
        case 2:
            SetIntStat(2002, Value);
            break;
        case 3:
            SetIntStat(2003, Value);
            break;
        case 4:
            SetIntStat(2004, Value);
            break;
        case 5:
            SetIntStat(2005, Value);
            break;
        case 6:
            SetIntStat(2006, Value);
            break;
        case 7:
            SetIntStat(2007, Value);
            break;
        default:
            break;
    }
}

private final event AddToKills(class<KFPawn_Monster> MonsterClass, byte Difficulty, class<DamageType> DT, bool bKiller)
{
    SeasonalEventStats_OnZedKilled(MonsterClass, Difficulty, DT);
    if(!bKiller)
    {
        return;
    }
    IncrementIntStat(200, 1);
    ++ Kills;
    if(!MonsterClass.default.bVersusZed)
    {
        MyKFPC.ReceiveLocalizedMessage(Class'KFLocalMessage_PlayerKills', 1, MyKFPC.PlayerReplicationInfo, none, MonsterClass);
    }
    if(IsStalkerKill(MonsterClass, DT))
    {
        AddStalkerKill(Difficulty);        
    }
    else
    {
        if(IsCrawlerKill(MonsterClass, DT))
        {
            AddCrawlerKill(Difficulty);            
        }
        else
        {
            if(IsFleshPoundKill(MonsterClass, DT))
            {
                AddFleshpoundKill(Difficulty);                
            }
            else
            {
                if(IsClotKill(MonsterClass, DT))
                {
                    AddClotKill(Difficulty);                    
                }
                else
                {
                    if(IsBloatKill(MonsterClass, DT))
                    {
                        AddBloatKill(Difficulty);
                    }
                }
            }
        }
    }
    if((MyKFPC != none) && MyKFPC.MatchStats != none)
    {
        MyKFPC.MatchStats.RecordZedKill(MonsterClass, DT);
    }
    AddToKillObjectives(MonsterClass);
}

private final event AddNonZedKill(class<Pawn> KilledClass, byte Difficulty)
{
    if(((MyKFPC != none) && MyKFPC.Pawn != none) && (KilledClass.Name == 'KFPawn_Human_Versus') || KilledClass.Name == 'KFPawn_Human')
    {
        AddToVersusKillObjectives(MyKFPC.Pawn.Class);
    }
}

// Export UKFOnlineStatsWrite::execAddToKillObjectives(FFrame&, void* const)
private native final function AddToKillObjectives(class<KFPawn_Monster> ZedClass);

// Export UKFOnlineStatsWrite::execAddToVersusKillObjectives(FFrame&, void* const)
private native final function AddToVersusKillObjectives(class<Pawn> KillerClass);

private final function AddStalkerKill(byte Difficulty)
{
    ++ StalkerKills;
    IncrementIntStat(201, 1);
    AddXP(Class'KFPerk_Commando', Class'KFPerk_Commando'.static.GetStalkerKillXP(Difficulty));
    if(bLogStatsWrite)
    {
        LogInternal((string(GetFuncName()) @ "Adding stalker kill, IncrementIntStat STATID_StalkerKills by:") @ string(Class'KFPerk_Commando'.static.GetStalkerKillXP(Difficulty)));
    }
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Commando' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Commando', Class'KFPerk_Commando'.static.GetStalkerKillXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Commando'.static.GetStalkerKillXP(Difficulty);
}

private final event AddSmallRadiusKill(byte Difficulty)
{
    AddXP(Class'KFPerk_Berserker', Class'KFPerk_Berserker'.static.GetSmallRadiusKillXP(Difficulty));
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Berserker' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Berserker', Class'KFPerk_Berserker'.static.GetSmallRadiusKillXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Berserker'.static.GetSmallRadiusKillXP(Difficulty);
}

private final function AddCrawlerKill(byte Difficulty)
{
    ++ CrawlerKills;
    IncrementIntStat(202, 1);
    AddXP(Class'KFPerk_Firebug', Class'KFPerk_Firebug'.static.GetCrawlerKillXP(Difficulty));
    if(bLogStatsWrite)
    {
        LogInternal((string(GetFuncName()) @ "Adding crawler kill, IncrementIntStat STATID_CrawlerKills by:") @ string(Class'KFPerk_Firebug'.static.GetCrawlerKillXP(Difficulty)));
    }
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Firebug' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Firebug', Class'KFPerk_Firebug'.static.GetCrawlerKillXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Firebug'.static.GetCrawlerKillXP(Difficulty);
}

private final function AddFleshpoundKill(byte Difficulty)
{
    ++ FleshPoundKills;
    IncrementIntStat(203, 1);
    AddXP(Class'KFPerk_Demolitionist', Class'KFPerk_Demolitionist'.static.GetFleshpoundKillXP(Difficulty));
    if(bLogStatsWrite)
    {
        LogInternal((string(GetFuncName()) @ "Adding crawler kill, IncrementIntStat STATID_CrawlerKills by:") @ string(Class'KFPerk_Firebug'.static.GetCrawlerKillXP(Difficulty)));
    }
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Demolitionist' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Demolitionist', Class'KFPerk_Demolitionist'.static.GetFleshpoundKillXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Demolitionist'.static.GetFleshpoundKillXP(Difficulty);
}

private final function AddClotKill(byte Difficulty)
{
    AddXP(Class'KFPerk_SWAT', Class'KFPerk_SWAT'.static.GetClotKillXP(Difficulty));
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_SWAT' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_SWAT', Class'KFPerk_SWAT'.static.GetClotKillXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_SWAT'.static.GetClotKillXP(Difficulty);
}

private final function AddBloatKill(byte Difficulty)
{
    AddXP(Class'KFPerk_Firebug', Class'KFPerk_Firebug'.static.GetBloatKillXP(Difficulty));
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Firebug' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Firebug', Class'KFPerk_Firebug'.static.GetBloatKillXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Firebug'.static.GetBloatKillXP(Difficulty);
}

private final function bool IsCrawlerKill(class<KFPawn_Monster> MonsterClass, class<DamageType> DT)
{
    return MonsterClass.static.IsCrawlerClass() && Class'KFPerk'.static.IsDamageTypeOnThisPerk(class<KFDamageType>(DT), Class'KFPerk_Firebug'.static.GetPerkClass());
}

private final function bool IsStalkerKill(class<KFPawn_Monster> MonsterClass, class<DamageType> DT)
{
    return MonsterClass.static.IsStalkerClass() && Class'KFPerk'.static.IsDamageTypeOnThisPerk(class<KFDamageType>(DT), Class'KFPerk_Commando'.static.GetPerkClass());
}

private final function bool IsFleshPoundKill(class<KFPawn_Monster> MonsterClass, class<DamageType> DT)
{
    return MonsterClass.static.IsFleshpoundClass() && Class'KFPerk'.static.IsDamageTypeOnThisPerk(class<KFDamageType>(DT), Class'KFPerk_Demolitionist'.static.GetPerkClass());
}

private final function bool IsClotKill(class<KFPawn_Monster> MonsterClass, class<DamageType> DT)
{
    return MonsterClass.static.IsClotClass() && Class'KFPerk'.static.IsDamageTypeOnThisPerk(class<KFDamageType>(DT), Class'KFPerk_SWAT'.static.GetPerkClass());
}

private final function bool IsBloatKill(class<KFPawn_Monster> MonsterClass, class<DamageType> DT)
{
    return MonsterClass.static.IsBloatClass() && Class'KFPerk'.static.IsDamageTypeOnThisPerk(class<KFDamageType>(DT), Class'KFPerk_Firebug'.static.GetPerkClass());
}

private final function int ComputeWeldingXP(int Points)
{
    local int XPEarned;
    local KFGameReplicationInfo KFGRI;

    XPEarned = FFloor(float(Points) / float(510));
    if(XPEarned >= 1)
    {
        KFGRI = KFGameReplicationInfo(MyKFPC.WorldInfo.GRI);
        Class'KFPerk_Support'.static.MultiplySecondaryXPPoints(XPEarned, KFGRI.GameDifficulty);
    }
    return XPEarned;
}

private final event int AddWeldingPoints(int PointsWelded)
{
    local int XPEarned;

    WeldingPoints += PointsWelded;
    if(bLogStatsWrite)
    {
        LogInternal((string(GetFuncName()) @ "WeldingPoints are now:") @ string(WeldingPoints));
    }
    XPEarned = ComputeWeldingXP(WeldingPoints);
    if(XPEarned >= 1)
    {
        AddXP(Class'KFPerk_Support', XPEarned);
        if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Support' != none)
        {
            MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Support', XPEarned);
        }
        KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += XPEarned;
        PerRoundWeldXP += XPEarned;
        WeldingPoints = WeldingPoints % 510;
        if(bLogStatsWrite)
        {
            LogInternal((string(GetFuncName()) @ "Welding XP earned :") @ string(XPEarned));
        }
    }
    SetIntStat(22, WeldingPoints);
    return XPEarned;
}

private final event int DoorRepaired()
{
    local int XPEarned;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(MyKFPC.WorldInfo.GRI);
    if(KFGRI != none)
    {
        Class'KFPerk_Support'.static.GetDoorRepairXP(XPEarned, KFGRI.GameDifficulty);
        if(XPEarned > 0)
        {
            AddXP(Class'KFPerk_Support', XPEarned);
            if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Support' != none)
            {
                MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Support', XPEarned);
            }
            KFGRI.SecondaryXPAccumulator += XPEarned;
            PerRoundWeldXP += XPEarned;
            LogInternal((string(GetFuncName()) @ "Door Repair XP earned :") @ string(XPEarned));
        }
    }
    return XPEarned;
}

private final function int ComputeHealingXP(int Points)
{
    local int XPEarned;
    local KFGameReplicationInfo KFGRI;

    XPEarned = FFloor(float(Points) / float(10));
    if(XPEarned >= 1)
    {
        KFGRI = KFGameReplicationInfo(MyKFPC.WorldInfo.GRI);
        Class'KFPerk_FieldMedic'.static.MultiplySecondaryXPPoints(XPEarned, KFGRI.GameDifficulty);
    }
    return XPEarned;
}

private final event int AddHealingPoints(int PointsHealed)
{
    local int XPEarned;

    HealingPoints += PointsHealed;
    if(bLogStatsWrite)
    {
        LogInternal((string(GetFuncName()) @ "HealingPoints are now:") @ string(10));
    }
    XPEarned = ComputeHealingXP(HealingPoints);
    if(XPEarned >= 1)
    {
        AddXP(Class'KFPerk_FieldMedic', XPEarned);
        if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_FieldMedic' != none)
        {
            MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_FieldMedic', XPEarned);
        }
        KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += XPEarned;
        PerRoundHealXP += XPEarned;
        HealingPoints = HealingPoints % 10;
        if(bLogStatsWrite)
        {
            LogInternal((string(GetFuncName()) @ "Healing XP earned :") @ string(XPEarned));
        }
    }
    SetIntStat(42, HealingPoints);
    if(MyKFPC != none)
    {
        MyKFPC.ClientUnlockAchievement(148);
    }
    return XPEarned;
}

private final event AddToHeadshots(byte Difficulty, class<DamageType> DT)
{
    if(IsGunslingerHeadshot(DT))
    {
        AddGunslingerHeadshot(Difficulty);
    }
    if(IsSharpshooterHeadshot(DT))
    {
        AddSharpshooterHeadshot(Difficulty);
    }
}

private final function AddGunslingerHeadshot(byte Difficulty)
{
    AddXP(Class'KFPerk_Gunslinger', Class'KFPerk_Gunslinger'.static.GetHeadshotXP(Difficulty));
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Gunslinger' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Gunslinger', Class'KFPerk_Gunslinger'.static.GetHeadshotXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Gunslinger'.static.GetHeadshotXP(Difficulty);
}

private final function AddSharpshooterHeadshot(byte Difficulty)
{
    AddXP(Class'KFPerk_Sharpshooter', Class'KFPerk_Sharpshooter'.static.GetHeadshotXP(Difficulty));
    if(((MyKFPC != none) && MyKFPC.MatchStats != none) && Class'KFPerk_Sharpshooter' != none)
    {
        MyKFPC.MatchStats.RecordSecondaryXPGain(Class'KFPerk_Sharpshooter', Class'KFPerk_Sharpshooter'.static.GetHeadshotXP(Difficulty));
    }
    KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).SecondaryXPAccumulator += Class'KFPerk_Sharpshooter'.static.GetHeadshotXP(Difficulty);
}

private final function bool IsGunslingerHeadshot(class<DamageType> DT)
{
    return Class'KFPerk_Gunslinger'.static.IsDamageTypeOnPerk(class<KFDamageType>(DT));
}

private final function bool IsSharpshooterHeadshot(class<DamageType> DT)
{
    return Class'KFPerk'.static.IsDamageTypeOnThisPerk(class<KFDamageType>(DT), Class'KFPerk_Sharpshooter'.static.GetPerkClass());
}

final function int GetSeasonalEventStatValue(int StatIdx)
{
    switch(StatIdx)
    {
        case 0:
            return SeasonalEventStats1;
        case 1:
            return SeasonalEventStats2;
        case 2:
            return SeasonalEventStats3;
        case 3:
            return SeasonalEventStats4;
        case 4:
            return SeasonalEventStats5;
        default:
            return -1;
            break;
    }
}

final function int GetSeasonalEventStatMaxValue(int StatIdx)
{
    switch(StatIdx)
    {
        case 0:
            return SeasonalEventStatsMax1;
        case 1:
            return SeasonalEventStatsMax2;
        case 2:
            return SeasonalEventStatsMax3;
        case 3:
            return SeasonalEventStatsMax4;
        case 4:
            return SeasonalEventStatsMax5;
        default:
            return -1;
            break;
    }
}

function GetAchievements()
{
    if(MyKFPC.IsLocalPlayerController())
    {
        Achievements.Remove(0, Achievements.Length;
        MyKFPC.OnlineSub.PlayerInterface.GetAchievements(0, Achievements);
    }
}

final function bool IsAchievementUnlocked(int AchievementIndex)
{
    return (AchievementIndex < Achievements.Length) && Achievements[AchievementIndex].bWasAchievedOnline;
}

function OnUnlockAchievement(int AchievementIndex)
{
    GetAchievements();
}

// Export UKFOnlineStatsWrite::execUnlockDingoAchievement(FFrame&, void* const)
native function UnlockDingoAchievement(int AchievementId, optional int Value)
{
    Value = 1;                
}

// Export UKFOnlineStatsWrite::execOnGameWon(FFrame&, void* const)
native final function OnGameWon(string MapName, byte Difficulty, byte GameLength, byte bCoop, class<KFPerk> PerkClass);

// Export UKFOnlineStatsWrite::execOnRoundEnd(FFrame&, void* const)
native final function OnRoundEnd(byte WinningTeam);

// Export UKFOnlineStatsWrite::execOnGameEnd(FFrame&, void* const)
native final function OnGameEnd(string MapName, byte Difficulty, byte GameLength, byte EndingWaveNum, byte bCoop, class<KFPerk> PerkClass);

// Export UKFOnlineStatsWrite::execCheckMapEndAchievements(FFrame&, void* const)
native final function CheckMapEndAchievements(string MapName, byte Difficulty, byte bCoop, byte bObjectiveMode);

// Export UKFOnlineStatsWrite::execCheckCollectibleAchievement(FFrame&, void* const)
native final function CheckCollectibleAchievement(string MapName);

// Export UKFOnlineStatsWrite::execCheckEndWaveObjective(FFrame&, void* const)
native final function CheckEndWaveObjective(int CurrentWave);

// Export UKFOnlineStatsWrite::execCheckPerkLvlAchievement(FFrame&, void* const)
private native final function CheckPerkLvlAchievement(class<KFPerk> PerkClass, int NewLVL);

// Export UKFOnlineStatsWrite::execCheckPerkDifficultyAchievements(FFrame&, void* const)
private native final function CheckPerkDifficultyAchievements(class<KFPerk> PerkClass, byte Difficulty);

// Export UKFOnlineStatsWrite::execCheckAllPerksLvl25(FFrame&, void* const)
private native final function CheckAllPerksLvl25();

// Export UKFOnlineStatsWrite::execUnlockTutorialAchievement(FFrame&, void* const)
native final function UnlockTutorialAchievement();

// Export UKFOnlineStatsWrite::execCheckForRoundTeamWinAchievements(FFrame&, void* const)
native final function CheckForRoundTeamWinAchievements(byte WinningTeam);

// Export UKFOnlineStatsWrite::execCheckPerkPSGRewards(FFrame&, void* const)
native final function CheckPerkPSGRewards(class<KFPerk> PSGPerkClass);

final function bool CanCacheSpecialEvent()
{
    return InitialSpecialEventInfo > 0;
}

// Export UKFOnlineStatsWrite::execCacheSpecialEventState(FFrame&, void* const)
private native final function CacheSpecialEventState(int Value);

// Export UKFOnlineStatsWrite::execGetSpecialEventRewardValue(FFrame&, void* const)
native final function int GetSpecialEventRewardValue();

final function UpdateSpecialEventState()
{
    CacheSpecialEventState(InitialSpecialEventInfo);
    if(InitialSpecialEventInfo != SpecialEventInfo)
    {
        MyKFPC.ClientWriteAndFlushStats();
    }
}

// Export UKFOnlineStatsWrite::execUpdateSpecialEvent(FFrame&, void* const)
native final function UpdateSpecialEvent(int EventIndex, int ObjectiveIndex);

// Export UKFOnlineStatsWrite::execIsEventObjectiveComplete(FFrame&, void* const)
native final function bool IsEventObjectiveComplete(int ObjectiveIndex);

final function bool CanCacheWeeklyEvent()
{
    return InitialWeeklyEventInfo > 0;
}

// Export UKFOnlineStatsWrite::execCacheWeeklyEventState(FFrame&, void* const)
private native final function CacheWeeklyEventState(int Value);

final function UpdateWeeklyEventState()
{
    CacheWeeklyEventState(InitialWeeklyEventInfo);
    if(InitialWeeklyEventInfo != WeeklyEventInfo)
    {
        MyKFPC.ClientWriteAndFlushStats();
    }
}

// Export UKFOnlineStatsWrite::execWeeklyEventComplete(FFrame&, void* const)
native final function WeeklyEventComplete();

// Export UKFOnlineStatsWrite::execIsWeeklyEventComplete(FFrame&, void* const)
native final function bool IsWeeklyEventComplete();

// Export UKFOnlineStatsWrite::execGetWeeklyOutbreakRewards(FFrame&, void* const)
native static final function array<int> GetWeeklyOutbreakRewards(optional int Index)
{
    Index = -1;            
}

// Export UKFOnlineStatsWrite::execGetMapObjectiveVoshReward(FFrame&, void* const)
native static final function int GetMapObjectiveVoshReward(byte Difficulty, byte WaveNum);

// Export UKFOnlineStatsWrite::execMapObjectiveCompleted(FFrame&, void* const)
native final function MapObjectiveCompleted();

// Export UKFOnlineStatsWrite::execSeasonalEventIsValid(FFrame&, void* const)
native final simulated function bool SeasonalEventIsValid();

final simulated function SeasonalEventStats_OnMapObjectiveDeactivated(Actor ObjectiveInterfaceActor)
{
    if(SeasonalEventIsValid())
    {
        SeasonalEvent.OnMapObjectiveDeactivated(ObjectiveInterfaceActor);
    }
}

final simulated function SeasonalEventStats_OnMapCollectibleFound(PlayerReplicationInfo FinderPRI, int CollectibleID)
{
    if(SeasonalEventIsValid())
    {
        SeasonalEvent.OnMapCollectibleFound(FinderPRI, CollectibleID);
    }
}

// Export UKFOnlineStatsWrite::execSeasonalEventStats_OnGameWon(FFrame&, void* const)
native final simulated event SeasonalEventStats_OnGameWon(class<GameInfo> GameClass, int Difficulty, int GameLength, bool bCoop);

final simulated function SeasonalEventStats_OnZedKilled(class<KFPawn_Monster> MonsterClass, int Difficulty, class<DamageType> DT)
{
    if(SeasonalEventIsValid())
    {
        SeasonalEvent.OnZedKilled(MonsterClass, Difficulty, DT);
    }
}

final simulated function SeasonalEventStats_OnBossDied()
{
    if(SeasonalEventIsValid())
    {
        SeasonalEvent.OnBossDied();
    }
}

// Export UKFOnlineStatsWrite::execCacheDailyEventProgress(FFrame&, void* const)
native final function CacheDailyEventProgress(int Value);

// Export UKFOnlineStatsWrite::execAddTrackedDamage(FFrame&, void* const)
native final function AddTrackedDamage(int Amount, class<DamageType> DamageType);

// Export UKFOnlineStatsWrite::execAddTrackedVsDamage(FFrame&, void* const)
native final function AddTrackedVsDamage(int Amount, class<KFPawn> DamagerClass);

// Export UKFOnlineStatsWrite::execAddTrackedXP(FFrame&, void* const)
private native final function AddTrackedXP(class<KFPerk> PerkClass, int XPGain);

// Export UKFOnlineStatsWrite::execAddTrackedMapCompletion(FFrame&, void* const)
private native final function AddTrackedMapCompletion(string MapName, byte Difficulty);

// Export UKFOnlineStatsWrite::execAddTrackedRoundEnd(FFrame&, void* const)
private native final function AddTrackedRoundEnd(byte WinningTeam);

// Export UKFOnlineStatsWrite::execGetDailyEventStruct(FFrame&, void* const)
native final function DailyEventInformation GetDailyEventStruct(int Index);

// Export UKFOnlineStatsWrite::execIsDailyObjectiveComplete(FFrame&, void* const)
native final function bool IsDailyObjectiveComplete(int Index);

// Export UKFOnlineStatsWrite::execGetCurrentDailyValue(FFrame&, void* const)
native final function int GetCurrentDailyValue(int Index);

// Export UKFOnlineStatsWrite::execGetMaxDailyValue(FFrame&, void* const)
native final function int GetMaxDailyValue(int Index);

// Export UKFOnlineStatsWrite::execGetDailyEventReward(FFrame&, void* const)
native static final function int GetDailyEventReward();

// Export UKFOnlineStatsWrite::execGetWeeklyEventReward(FFrame&, void* const)
native static final function int GetWeeklyEventReward();

// Export UKFOnlineStatsWrite::execGetTotalDoshCount(FFrame&, void* const)
native final function int GetTotalDoshCount();

// Export UKFOnlineStatsWrite::execGetLastSeenDoshCount(FFrame&, void* const)
native final function int GetLastSeenDoshCount();

// Export UKFOnlineStatsWrite::execGetUnseenDoshCount(FFrame&, void* const)
native final function int GetUnseenDoshCount();

// Export UKFOnlineStatsWrite::execMarkDoshVaultSeen(FFrame&, void* const)
native final function MarkDoshVaultSeen();

// Export UKFOnlineStatsWrite::execGetDoshVaultTierValue(FFrame&, void* const)
native static final function int GetDoshVaultTierValue();

// Export UKFOnlineStatsWrite::execGetPreStigeValueDoshRewardValue(FFrame&, void* const)
native static final function int GetPreStigeValueDoshRewardValue();

// Export UKFOnlineStatsWrite::execCheckUnlockDoshVaultReward(FFrame&, void* const)
native final function CheckUnlockDoshVaultReward();

// Export UKFOnlineStatsWrite::execCheckHasViewedDoshVault(FFrame&, void* const)
native final function CheckHasViewedDoshVault();

// Export UKFOnlineStatsWrite::execVerifyDoshVaultCrates(FFrame&, void* const)
native final function VerifyDoshVaultCrates();

defaultproperties
{
    XPTable[0]=795
    XPTable[1]=940
    XPTable[2]=1112
    XPTable[3]=1315
    XPTable[4]=1556
    XPTable[5]=1841
    XPTable[6]=2178
    XPTable[7]=2576
    XPTable[8]=3047
    XPTable[9]=3604
    XPTable[10]=4263
    XPTable[11]=5043
    XPTable[12]=5965
    XPTable[13]=7056
    XPTable[14]=8347
    XPTable[15]=9874
    XPTable[16]=11680
    XPTable[17]=13816
    XPTable[18]=16343
    XPTable[19]=19332
    XPTable[20]=22868
    XPTable[21]=27051
    XPTable[22]=31999
    XPTable[23]=37852
    XPTable[24]=44775
    DailyEvents(0)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_KnifeDamage,ObjectiveClasses=(KFWeap_Edged_Knife,KFDT_Slashing_Knife,KFDT_Slashing_Knife_Berserker,KFDT_Slashing_Knife_Medic,KFDT_Slashing_Knife_SWAT,KFDT_Slashing_KnifeHeavy,KFDT_Slashing_KnifeHeavy_Berserker,KFDT_Slashing_KnifeHeavy_Medic,KFDT_Slashing_KnifeHeavy_SWAT,KFDT_Piercing_KnifeStab,KFDT_Piercing_KnifeStab_Berserker,KFDT_Piercing_KnifeStab_FieldMedic,KFDT_Piercing_KnifeStab_SWAT,KFDT_Slashing_Knife_Survivalist,KFDT_Piercing_KnifeStab_Survivalist,KFDT_Slashing_KnifeHeavy_Survivalist),CompletionAmount=2500)
    DailyEvents(1)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_9mm,KFDT_Ballistic_9mm,KFDT_Bludgeon_9mm),CompletionAmount=4000)
    DailyEvents(2)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_MP7,KFDT_Ballistic_MP7,KFDT_Bludgeon_MP7),CompletionAmount=5000)
    DailyEvents(3)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_MP5RAS,KFDT_Ballistic_MP5RAS,KFDT_Bludgeon_MP5RAS),CompletionAmount=7000)
    DailyEvents(4)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_Thompson,KFDT_Ballistic_Thompson,KFDT_Bludgeon_Thompson),CompletionAmount=7000)
    DailyEvents(5)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_HRG_Nailgun,KFDT_Ballistic_HRGNailgun,KFDT_Bludgeon_HRGNailgun),CompletionAmount=10000)
    DailyEvents(6)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_P90,KFDT_Ballistic_P90,KFDT_Bludgeon_P90),CompletionAmount=10000)
    DailyEvents(7)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_Kriss,KFDT_Ballistic_Kriss,KFDT_Bludgeon_Kriss),CompletionAmount=10000)
    DailyEvents(8)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_HK_UMP,KFDT_Ballistic_HK_UMP,KFDT_Bludgeon_HK_UMP),CompletionAmount=10000)
    DailyEvents(9)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_AR15,KFDT_Ballistic_AR15,KFDT_Bludgeon_AR15),CompletionAmount=5000)
    DailyEvents(10)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_Bullpup,KFDT_Ballistic_Bullpup,KFDT_Bludgeon_Bullpup),CompletionAmount=7000)
    DailyEvents(11)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_AK12,KFDT_Ballistic_AK12,KFDT_Bludgeon_AK12),CompletionAmount=10000)
    DailyEvents(12)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_SCAR,KFDT_Ballistic_SCAR,KFDT_Bludgeon_SCAR),CompletionAmount=10000)
    DailyEvents(13)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_MKB42,KFDT_Ballistic_MKB42,KFDT_Bludgeon_MKB42),CompletionAmount=10000)
    DailyEvents(14)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_LMG_Stoner63A,KFDT_Ballistic_Stoner63A,KFDT_Bludgeon_Stoner63A),CompletionAmount=10000)
    DailyEvents(15)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_MB500,KFDT_Ballistic_MB500,KFDT_Bludgeon_MB500),CompletionAmount=5000)
    DailyEvents(16)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_DoubleBarrel,KFDT_Ballistic_DBShotgun,KFDT_Bludgeon_DBShotgun),CompletionAmount=7000)
    DailyEvents(17)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_HRG_Revolver_Buckshot,KFDT_Ballistic_HRGBuckshot,KFDT_Bludgeon_HRGBuckshot),CompletionAmount=10000)
    DailyEvents(18)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_HZ12,KFDT_Ballistic_HZ12,KFDT_Bludgeon_HZ12),CompletionAmount=10000)
    DailyEvents(19)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_M4,KFDT_Ballistic_M4Shotgun,KFDT_Bludgeon_M4Shotgun),CompletionAmount=10000)
    DailyEvents(20)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_AA12,KFDT_Ballistic_AA12Shotgun,KFDT_Bludgeon_AA12Shotgun),CompletionAmount=10000)
    DailyEvents(21)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_ElephantGun,KFDT_Ballistic_ElephantGun,KFDT_Bludgeon_ElephantGun),CompletionAmount=10000)
    DailyEvents(22)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_Medic,KFDT_Ballistic_Pistol_Medic,KFDT_Bludgeon_Pistol_Medic),CompletionAmount=5000)
    DailyEvents(23)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_Medic,KFDT_Ballistic_SMG_Medic,KFDT_Bludgeon_SMG_Medic),CompletionAmount=7000)
    DailyEvents(24)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_Medic,KFDT_Ballistic_Shotgun_Medic,KFDT_Bludgeon_Shotgun_Medic),CompletionAmount=9000)
    DailyEvents(25)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_HRG_Healthrower,KFDT_Toxic_HRGHealthrower,KFDT_Bludgeon_HRGHealthrower),CompletionAmount=9000)
    DailyEvents(26)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_Hemogoblin,KFDT_Ballistic_Hemogoblin,KFDT_Bludgeon_Hemogoblin),CompletionAmount=9000)
    DailyEvents(27)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_Medic,KFDT_Ballistic_Assault_Medic,KFDT_Bludgeon_Assault_Medic),CompletionAmount=9000)
    DailyEvents(28)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_HRGIncision,KFDT_Ballistic_HRGIncisionHurt,KFDT_Ballistic_HRGIncisionHeal,KFDT_Bludgeon_HRGIncision),CompletionAmount=5000)
    DailyEvents(29)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_MedicRifleGrenadeLauncher,KFDT_Ballistic_MedicRifleGrenadeLauncher,KFDT_Bludgeon_MedicRifleGrenadeLauncher,KFDT_Toxic_MedicGrenadeLauncher,KFDT_Ballistic_MedicRifleGrenadeLauncherImpact),CompletionAmount=10000)
    DailyEvents(30)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_GrenadeLauncher_HX25,KFDT_ExplosiveSubmunition_HX25,KFDT_Ballistic_HX25Impact,KFDT_Ballistic_HX25SubmunitionImpact,KFDT_Bludgeon_HX25),CompletionAmount=5000)
    DailyEvents(31)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Thrown_C4,KFDT_Explosive_C4,KFDT_Bludgeon_C4),CompletionAmount=2500)
    DailyEvents(32)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_GrenadeLauncher_M79,KFDT_Ballistic_M79Impact,KFDT_Explosive_M79,KFDT_Bludgeon_M79),CompletionAmount=7000)
    DailyEvents(33)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_RocketLauncher_RPG7,KFDT_Ballistic_RPG7Impact,KFDT_Explosive_RPG7,KFDT_Explosive_RPG7BackBlast,KFDT_Bludgeon_RPG7),CompletionAmount=7500)
    DailyEvents(34)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_M16M203,KFDT_Ballistic_M16M203,KFDT_Bludgeon_M16M203,KFDT_Ballistic_M203Impact,KFDT_Explosive_M16M203),CompletionAmount=9000)
    DailyEvents(35)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_RocketLauncher_SealSqueal,KFDT_Bludgeon_SealSqueal,KFDT_Explosive_SealSqueal,KFDT_Ballistic_SealSquealImpact),CompletionAmount=7500)
    DailyEvents(36)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_RocketLauncher_Seeker6,KFDT_Explosive_Seeker6,KFDT_Bludgeon_Seeker6,KFDT_Ballistic_Seeker6Impact),CompletionAmount=7500)
    DailyEvents(37)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_GrenadeLauncher_M32,KFDT_Bludgeon_M32,KFDT_Explosive_M32,KFDT_Ballistic_M32Impact),CompletionAmount=10000)
    DailyEvents(38)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Flame_CaulkBurn,KFDT_Bludgeon_CaulkBurn,KFDT_Fire_CaulkBurn,KFDT_Fire_Ground_CaulkNBurn),CompletionAmount=5000)
    DailyEvents(39)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_Flare,KFDT_Bludgeon_FlareGun,KFDT_Fire_FlareGun,KFDT_Fire_FlareGun_Dual,KFDT_Fire_FlareGunDoT),CompletionAmount=7000)
    DailyEvents(40)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_DragonsBreath,KFDT_Ballistic_DragonsBreath,KFDT_Bludgeon_DragonsBreath,KFDT_Fire_DragonsBreathDoT),CompletionAmount=7000)
    DailyEvents(41)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_SMG_Mac10,KFDT_Bludgeon_Mac10,KFDT_Fire_Mac10,KFDT_Fire_Mac10DoT),CompletionAmount=9000)
    DailyEvents(42)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Flame_Flamethrower,KFDT_Bludgeon_Flamethrower,KFDT_Fire_FlameThrower,KFDT_Fire_Ground_FlameThrower),CompletionAmount=9000)
    DailyEvents(43)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_HRGIncendiaryRifle,KFDT_Bludgeon_HRGIncendiaryRifle,KFDT_Ballistic_HRGIncendiaryRifle,KFDT_Explosive_HRGIncendiaryRifle,KFDT_Ballistic_HRGIncendiaryRifleGrenadeImpact,KFDT_Fire_HRGIncendiaryRifleBulletDoT,KFDT_Fire_HRGIncendiaryRifleGrenadeDoT,KFDT_Fire_Ground_HRGIncendiaryRifle),CompletionAmount=9000)
    DailyEvents(44)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Beam_Microwave,KFDT_Bludgeon_MicrowaveGun,KFDT_Fire_Ground_MicrowaveGun,KFDT_Microwave,KFDT_Microwave_Beam,KFDT_Microwave_Blast),CompletionAmount=10000)
    DailyEvents(45)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_HuskCannon,KFDT_Bludgeon_HuskCannon,KFDT_Explosive_HuskCannon,KFDT_HuskCannonDot,KFDT_Explosive_HuskCannonImpact),CompletionAmount=10000)
    DailyEvents(46)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_Microwave,KFDT_Ballistic_MicrowaveRifle,KFDT_Fire_MicrowaveRifleDoT,KFDT_Bludgeon_MicrowaveRifle),CompletionAmount=10000)
    DailyEvents(47)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Blunt_Crovel,KFDT_Bludgeon_Crovel,KFDT_Bludgeon_CrovelBash,KFDT_Slashing_Crovel),CompletionAmount=5000)
    DailyEvents(48)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Shotgun_Nailgun,KFDT_Ballistic_NailShotgun,KFDT_Bludgeon_NailShotgun),CompletionAmount=7000)
    DailyEvents(49)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Edged_Katana,KFDT_Slashing_Katana,KFDT_Piercing_KatanaStab,KFDT_Slashing_KatanaHeavy),CompletionAmount=7000)
    DailyEvents(50)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Edged_FireAxe,KFDT_Bludgeon_FireAxeBash,KFDT_Slashing_FireAxe,KFDT_Slashing_FireAxeHeavy),CompletionAmount=7000)
    DailyEvents(51)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Blunt_Pulverizer,KFDT_Bludgeon_Pulverizer,KFDT_Bludgeon_PulverizerBash,KFDT_Bludgeon_PulverizerHeavy,KFDT_Explosive_Pulverizer),CompletionAmount=10000)
    DailyEvents(52)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Blunt_MedicBat,KFDT_Bludgeon_MedicBatBash,KFDT_Bludgeon_MedicBatHeavy,KFDT_Bludgeon_MedicBatLight,KFDT_Toxic_MedicBatGas,KFDT_Toxic_MedicBatDoT),CompletionAmount=10000)
    DailyEvents(53)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Eviscerator,KFDT_Slashing_Eviscerator,KFDT_Slashing_EvisceratorProj),CompletionAmount=10000)
    DailyEvents(54)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Blunt_MaceAndShield,KFDT_Bludgeon_MaceAndShield,KFDT_Bludgeon_MaceAndShield_Bash,KFDT_Bludgeon_MaceAndShield_MaceHeavy,KFDT_Bludgeon_MaceAndShield_ShieldHeavy,KFDT_Bludgeon_MaceAndShield_ShieldLight),CompletionAmount=10000)
    DailyEvents(55)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Blunt_PowerGloves,KFDT_Bludgeon_PowerGloves,KFDT_Bludgeon_PowerGlovesBash,KFDT_Bludgeon_PowerGlovesHeavy),CompletionAmount=10000)
    DailyEvents(56)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Edged_AbominationAxe,KFDT_Slashing_AbominationAxe,KFDT_Piercing_AbominationAxeStab,KFDT_Slashing_AbominationAxeHeavy),CompletionAmount=10000)
    DailyEvents(57)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Revolver_Rem1858,KFDT_Bludgeon_Rem1858,KFDT_Ballistic_Rem1858,KFDT_Ballistic_Rem1858_Dual),CompletionAmount=5000)
    DailyEvents(58)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_Colt1911,KFDT_Bludgeon_Colt1911,KFDT_Ballistic_Colt1911),CompletionAmount=7000)
    DailyEvents(59)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_HRGWinterbite,KFDT_Bludgeon_HRGWinterbite,KFDT_Freeze_HRGWinterbiteImpact,KFDT_Explosive_HRGWinterbite),CompletionAmount=7000)
    DailyEvents(60)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_Deagle,KFDT_Bludgeon_Deagle,KFDT_Ballistic_Deagle),CompletionAmount=10000)
    DailyEvents(61)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Revolver_SW500,KFDT_Bludgeon_SW500,KFDT_Ballistic_SW500,KFDT_Ballistic_SW500_Dual),CompletionAmount=10000)
    DailyEvents(62)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Pistol_AF2011,KFDT_Bludgeon_AF2011,KFDT_Ballistic_AF2011),CompletionAmount=10000)
    DailyEvents(63)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_Winchester1894,KFDT_Bludgeon_Winchester,KFDT_Ballistic_Winchester),CompletionAmount=5000)
    DailyEvents(64)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Bow_Crossbow,KFDT_Bludgeon_Crossbow,KFDT_Piercing_Crossbow),CompletionAmount=7000)
    DailyEvents(65)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_M14EBR,KFDT_Bludgeon_M14EBR,KFDT_Ballistic_M14EBR),CompletionAmount=9000)
    DailyEvents(66)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_RailGun,KFDT_Bludgeon_RailGun,KFDT_Ballistic_RailGun),CompletionAmount=5000)
    DailyEvents(67)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_CenterfireMB464,KFDT_Bludgeon_CenterfireMB464,KFDT_Ballistic_CenterfireMB464),CompletionAmount=7000)
    DailyEvents(68)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Rifle_M99,KFDT_Bludgeon_M99,KFDT_Ballistic_M99),CompletionAmount=5000)
    DailyEvents(69)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_FNFal,KFDT_Ballistic_FNFal,KFDT_Bludgeon_FNFal),CompletionAmount=10000)
    DailyEvents(70)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_Ice_FreezeThrower,KFDT_Bludgeon_Freezethrower,KFDT_Freeze_FreezeThrower,KFDT_Freeze_FreezeThrower_IceShards,KFDT_Freeze_Ground_FreezeThrower),CompletionAmount=7000)
    DailyEvents(71)=(ObjectiveType=eDailyObjectiveType.DOT_WeaponDamage,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFWeap_AssaultRifle_LazerCutter,KFDT_Ballistic_LazerCutter,KFDT_LazerCutter_Beam,KFDT_Bludgeon_LazerCutter),CompletionAmount=10000)
    DailyEvents(72)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedClot_Alpha),CompletionAmount=20)
    DailyEvents(73)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedClot_AlphaKing),CompletionAmount=5)
    DailyEvents(74)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedClot_Cyst),CompletionAmount=30)
    DailyEvents(75)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedClot_Slasher),CompletionAmount=25)
    DailyEvents(76)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedCrawler),CompletionAmount=30)
    DailyEvents(77)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedCrawlerKing),CompletionAmount=5)
    DailyEvents(78)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedStalker),CompletionAmount=10)
    DailyEvents(79)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedBloat),CompletionAmount=5)
    DailyEvents(80)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedSiren),CompletionAmount=5)
    DailyEvents(81)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedHusk),CompletionAmount=3)
    DailyEvents(82)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedGorefast),CompletionAmount=20)
    DailyEvents(83)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedGorefastDualBlade),CompletionAmount=8)
    DailyEvents(84)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedScrake),CompletionAmount=1)
    DailyEvents(85)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedFleshpound),CompletionAmount=1)
    DailyEvents(86)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedFleshpoundMini),CompletionAmount=2)
    DailyEvents(87)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedDAR_EMP),CompletionAmount=5)
    DailyEvents(88)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedDAR_Laser),CompletionAmount=5)
    DailyEvents(89)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillZeds,ObjectiveClasses=(KFPawn_ZedDAR_Rocket),CompletionAmount=5)
    DailyEvents(90)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_KillBoss,ObjectiveClasses=none,CompletionAmount=1)
    DailyEvents(91)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Berserker),CompletionAmount=1500)
    DailyEvents(92)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Commando),CompletionAmount=1500)
    DailyEvents(93)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Demolitionist),CompletionAmount=1500)
    DailyEvents(94)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_FieldMedic),CompletionAmount=1500)
    DailyEvents(95)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Firebug),CompletionAmount=1500)
    DailyEvents(96)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Gunslinger),CompletionAmount=1500)
    DailyEvents(97)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Sharpshooter),CompletionAmount=1500)
    DailyEvents(98)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Support),CompletionAmount=1500)
    DailyEvents(99)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_Survivalist),CompletionAmount=1500)
    DailyEvents(100)=(ObjectiveType=eDailyObjectiveType.DOT_PerkXP,SecondaryType=eDailyObjectiveSecondaryType.DOST_PlayPerk,ObjectiveClasses=(KFPerk_SWAT),CompletionAmount=1500)
    DailyEvents(101)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BURNINGPARIS),CompletionAmount=1)
    DailyEvents(102)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BURNINGPARIS),CompletionAmount=2)
    DailyEvents(103)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BURNINGPARIS),CompletionAmount=3)
    DailyEvents(104)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-OUTPOST),CompletionAmount=1)
    DailyEvents(105)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-OUTPOST),CompletionAmount=2)
    DailyEvents(106)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-OUTPOST),CompletionAmount=3)
    DailyEvents(107)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BIOTICSLAB),CompletionAmount=1)
    DailyEvents(108)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BIOTICSLAB),CompletionAmount=2)
    DailyEvents(109)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BIOTICSLAB),CompletionAmount=3)
    DailyEvents(110)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-VOLTERMANOR),CompletionAmount=1)
    DailyEvents(111)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-VOLTERMANOR),CompletionAmount=2)
    DailyEvents(112)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-VOLTERMANOR),CompletionAmount=3)
    DailyEvents(113)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-EVACUATIONPOINT),CompletionAmount=1)
    DailyEvents(114)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-EVACUATIONPOINT),CompletionAmount=2)
    DailyEvents(115)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-EVACUATIONPOINT),CompletionAmount=3)
    DailyEvents(116)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-CATACOMBS),CompletionAmount=1)
    DailyEvents(117)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-CATACOMBS),CompletionAmount=2)
    DailyEvents(118)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-CATACOMBS),CompletionAmount=3)
    DailyEvents(119)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BLACKFOREST),CompletionAmount=1)
    DailyEvents(120)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BLACKFOREST),CompletionAmount=2)
    DailyEvents(121)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BLACKFOREST),CompletionAmount=3)
    DailyEvents(122)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-FARMHOUSE),CompletionAmount=1)
    DailyEvents(123)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-FARMHOUSE),CompletionAmount=2)
    DailyEvents(124)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-FARMHOUSE),CompletionAmount=3)
    DailyEvents(125)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-PRISON),CompletionAmount=1)
    DailyEvents(126)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-PRISON),CompletionAmount=2)
    DailyEvents(127)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-PRISON),CompletionAmount=3)
    DailyEvents(128)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-CONTAINMENTSTATION),CompletionAmount=1)
    DailyEvents(129)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-CONTAINMENTSTATION),CompletionAmount=2)
    DailyEvents(130)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-CONTAINMENTSTATION),CompletionAmount=3)
    DailyEvents(131)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-HOSTILEGROUNDS),CompletionAmount=1)
    DailyEvents(132)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-HOSTILEGROUNDS),CompletionAmount=2)
    DailyEvents(133)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-HOSTILEGROUNDS),CompletionAmount=3)
    DailyEvents(134)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-INFERNALREALM),CompletionAmount=1)
    DailyEvents(135)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-INFERNALREALM),CompletionAmount=2)
    DailyEvents(136)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-INFERNALREALM),CompletionAmount=3)
    DailyEvents(137)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-ZEDLANDING),CompletionAmount=1)
    DailyEvents(138)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-ZEDLANDING),CompletionAmount=2)
    DailyEvents(139)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-ZEDLANDING),CompletionAmount=3)
    DailyEvents(140)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-THEDESCENT),CompletionAmount=1)
    DailyEvents(141)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-THEDESCENT),CompletionAmount=2)
    DailyEvents(142)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-THEDESCENT),CompletionAmount=3)
    DailyEvents(143)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-NUKED),CompletionAmount=1)
    DailyEvents(144)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-NUKED),CompletionAmount=2)
    DailyEvents(145)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-NUKED),CompletionAmount=3)
    DailyEvents(146)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-TRAGICKINGDOM),CompletionAmount=1)
    DailyEvents(147)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-TRAGICKINGDOM),CompletionAmount=2)
    DailyEvents(148)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-TRAGICKINGDOM),CompletionAmount=3)
    DailyEvents(149)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-NIGHTMARE),CompletionAmount=1)
    DailyEvents(150)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-NIGHTMARE),CompletionAmount=2)
    DailyEvents(151)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-NIGHTMARE),CompletionAmount=3)
    DailyEvents(152)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-KRAMPUSLAIR),CompletionAmount=1)
    DailyEvents(153)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-KRAMPUSLAIR),CompletionAmount=2)
    DailyEvents(154)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-KRAMPUSLAIR),CompletionAmount=3)
    DailyEvents(155)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-POWERCORE_HOLDOUT),CompletionAmount=1)
    DailyEvents(156)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-POWERCORE_HOLDOUT),CompletionAmount=2)
    DailyEvents(157)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-POWERCORE_HOLDOUT),CompletionAmount=3)
    DailyEvents(158)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-AIRSHIP),CompletionAmount=1)
    DailyEvents(159)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-AIRSHIP),CompletionAmount=2)
    DailyEvents(160)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-AIRSHIP),CompletionAmount=3)
    DailyEvents(161)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-LOCKDOWN),CompletionAmount=1)
    DailyEvents(162)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-LOCKDOWN),CompletionAmount=2)
    DailyEvents(163)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-LOCKDOWN),CompletionAmount=3)
    DailyEvents(164)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-MONSTERBALL),CompletionAmount=1)
    DailyEvents(165)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-MONSTERBALL),CompletionAmount=2)
    DailyEvents(166)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-MONSTERBALL),CompletionAmount=3)
    DailyEvents(167)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SHOPPINGSPREE),CompletionAmount=1)
    DailyEvents(168)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SHOPPINGSPREE),CompletionAmount=2)
    DailyEvents(169)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SHOPPINGSPREE),CompletionAmount=3)
    DailyEvents(170)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SANTASWORKSHOP),CompletionAmount=1)
    DailyEvents(171)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SANTASWORKSHOP),CompletionAmount=2)
    DailyEvents(172)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SANTASWORKSHOP),CompletionAmount=3)
    DailyEvents(173)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SPILLWAY),CompletionAmount=1)
    DailyEvents(174)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SPILLWAY),CompletionAmount=2)
    DailyEvents(175)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SPILLWAY),CompletionAmount=3)
    DailyEvents(176)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-STEAMFORTRESS),CompletionAmount=1)
    DailyEvents(177)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-STEAMFORTRESS),CompletionAmount=2)
    DailyEvents(178)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-STEAMFORTRESS),CompletionAmount=3)
    DailyEvents(179)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-ASHWOODASYLUM),CompletionAmount=1)
    DailyEvents(180)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-ASHWOODASYLUM),CompletionAmount=2)
    DailyEvents(181)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-ASHWOODASYLUM),CompletionAmount=3)
    DailyEvents(182)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SANITARIUM),CompletionAmount=1)
    DailyEvents(183)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SANITARIUM),CompletionAmount=2)
    DailyEvents(184)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-SANITARIUM),CompletionAmount=3)
    DailyEvents(185)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BIOLAPSE),CompletionAmount=1)
    DailyEvents(186)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BIOLAPSE),CompletionAmount=2)
    DailyEvents(187)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_MapCompletion,ObjectiveClasses=(KF-BIOLAPSE),CompletionAmount=3)
    DailyEvents(188)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(chr_briar_archetype),CompletionAmount=1)
    DailyEvents(189)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_MrFoster_archetype),CompletionAmount=1)
    DailyEvents(190)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_Coleman_archetype),CompletionAmount=1)
    DailyEvents(191)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_Alberts_archetype),CompletionAmount=1)
    DailyEvents(192)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_Masterson_archetype),CompletionAmount=1)
    DailyEvents(193)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_Tanaka_Archetype),CompletionAmount=1)
    DailyEvents(194)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_Ana_Archetype),CompletionAmount=1)
    DailyEvents(195)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(chr_rockabilly_archetype),CompletionAmount=1)
    DailyEvents(196)=(ObjectiveType=eDailyObjectiveType.DOT_Maps,SecondaryType=eDailyObjectiveSecondaryType.DOST_CharacterCompletion,ObjectiveClasses=(CHR_DAR_archetype),CompletionAmount=1)
    SeasonalKillsObjectiveThreshold=2500
    Properties=/* Array type was not detected. */
    ViewIds=/* Array type was not detected. */
}