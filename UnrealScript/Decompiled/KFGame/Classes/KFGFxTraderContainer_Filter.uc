/*******************************************************************************
 * KFGFxTraderContainer_Filter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxTraderContainer_Filter extends KFGFxObject_Container within GFxMoviePlayer;

var const localized array<localized string> TabsArray;
var const localized array<localized string> WeaponTypeStrings;
var const localized string OffPerkString;
var array<string> TabIconPaths;
var array<string> WeaponTypePath;

function ClearFilters()
{
    SetString("filterText", "");
    SetBool("filterVisibliity", false);
}

function SetPerkFilterData(byte FilterIndex)
{
    local int I;
    local GFxObject DataProvider, FilterObject;
    local KFPlayerController KFPC;
    local KFPlayerReplicationInfo KFPRI;

    SetBool("filterVisibliity", true);
    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            SetInt("selectedIndex", KFPRI.NetPerkIndex);
            if(FilterIndex < KFPC.PerkList.Length)
            {
                SetString("filterText", KFPC.PerkList[FilterIndex].PerkClass.default.PerkName);                
            }
            else
            {
                SetString("filterText", OffPerkString);
            }
            DataProvider = Outer.CreateArray();
            I = 0;
            J0x1C6:

            if(I < KFPC.PerkList.Length)
            {
                FilterObject = Outer.CreateObject("Object");
                FilterObject.SetString("source", "img://" $ KFPC.PerkList[I].PerkClass.static.GetPerkIconPath());
                DataProvider.SetElementObject(I, FilterObject);
                ++ I;
                goto J0x1C6;
            }
            FilterObject = Outer.CreateObject("Object");
            FilterObject.SetString("source", "img://" $ Class'KFGFxObject_TraderItems'.default.OffPerkIconPath);
            DataProvider.SetElementObject(I, FilterObject);
            SetObject("filterSource", DataProvider);
        }
    }
}

function SetTypeFilterData(byte FilterIndex)
{
    local int I;
    local GFxObject DataProvider, FilterObject;

    SetBool("filterVisibliity", true);
    SetString("filterText", WeaponTypeStrings[FilterIndex]);
    DataProvider = Outer.CreateArray();
    I = 0;
    J0x7D:

    if(I < WeaponTypePath.Length)
    {
        FilterObject = Outer.CreateObject("Object");
        FilterObject.SetString("source", "img://" $ WeaponTypePath[I]);
        DataProvider.SetElementObject(I, FilterObject);
        ++ I;
        goto J0x7D;
    }
    SetObject("filterSource", DataProvider);
}

function SetTabsData()
{
    local int I;
    local GFxObject DataProvider, FilterObject;
    local KFPlayerController KFPC;
    local KFPlayerReplicationInfo KFPRI;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            DataProvider = Outer.CreateArray();
            I = 0;
            J0xB5:

            if(I < TabsArray.Length)
            {
                FilterObject = Outer.CreateObject("Object");
                FilterObject.SetString("label", TabsArray[I]);
                FilterObject.SetString("source", "img://" $ TabIconPaths[I]);
                DataProvider.SetElementObject(I, FilterObject);
                ++ I;
                goto J0xB5;
            }
            SetObject("tabInfo", DataProvider);
        }
    }
}

defaultproperties
{
    TabsArray(0)="PERKS"
    TabsArray(1)="TYPE"
    TabsArray(2)="FAVORITES"
    TabsArray(3)="ALL"
    WeaponTypeStrings(0)="Pistols"
    WeaponTypeStrings(1)="Shotguns"
    WeaponTypeStrings(2)="Rifles"
    WeaponTypeStrings(3)="Projectiles"
    WeaponTypeStrings(4)="Flame Weapons"
    WeaponTypeStrings(5)="Electric Weapons"
    WeaponTypeStrings(6)="Explosives"
    WeaponTypeStrings(7)="Assault Rifles"
    WeaponTypeStrings(8)="Melee Weapons"
    WeaponTypeStrings(9)="SMGs"
    OffPerkString="Off Perk"
    TabIconPaths(0)="UI_TraderMenu_TEX.UI_WeaponSelect_Trader_Perk"
    TabIconPaths(1)="UI_TraderMenu_TEX.UI_WeaponSelect_Trader_Type"
    TabIconPaths(2)="UI_TraderMenu_TEX.UI_WeaponSelect_Trader_Favorites"
    TabIconPaths(3)="UI_TraderMenu_TEX.UI_WeaponSelect_Trader_All"
    WeaponTypePath(0)="UI_WeaponType_TEX.UI_WeaponType_Pistol"
    WeaponTypePath(1)="UI_WeaponType_TEX.UI_WeaponType_Shotgun"
    WeaponTypePath(2)="UI_WeaponType_TEX.UI_WeaponType_Rifle"
    WeaponTypePath(3)="UI_WeaponType_TEX.UI_WeaponType_Projectile"
    WeaponTypePath(4)="UI_WeaponType_TEX.UI_WeaponType_Flame"
    WeaponTypePath(5)="UI_WeaponType_TEX.UI_WeaponType_Electric"
    WeaponTypePath(6)="UI_WeaponType_TEX.UI_WeaponType_Explosive"
    WeaponTypePath(7)="UI_WeaponType_TEX.UI_WeaponType_Assault"
    WeaponTypePath(8)="UI_WeaponType_TEX.UI_WeaponType_Melee"
    WeaponTypePath(9)="UI_WeaponType_TEX.UI_WeaponType_SMG"
}