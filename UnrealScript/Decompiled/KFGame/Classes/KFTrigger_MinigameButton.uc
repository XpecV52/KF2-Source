/*******************************************************************************
 * KFTrigger_MinigameButton generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFTrigger_MinigameButton extends Trigger_PawnsOnly
    native
    hidecategories(Navigation)
    implements(KFInterface_Usable);

/** Whether or not this game is able to be activated. Can be toggled via level generator or left on by default. */
var() bool bActiveGame;
/** Allow deactivation via another button press */
var() bool bDeactivateOnPress;
var bool bInProgress;
var bool bAllowActivation;
/** Amount of time until the minigame is deactivated.  Should be <= ReactivationTime */
var() float DeactivationTime;
/** Amount of time until the minigame can be reactivated */
var() float ReactivationTime;
/** If code was needed, custom actors that we're tied to */
var() array<KFInterface_MinigameActor> MinigameActors;
/** Any linked buttons (used to prevent multi-activation in things like rollercoaster) */
var() array<KFTrigger_MinigameButton> LinkedButtons;
/** Amount of delay between button press and activation of the game */
var() float ActivationDelay;
var Pawn LastActivatingUser;
/** Sound to play upon activation */
var() AkEvent ActivationSoundEvent;

simulated function bool GetIsUsable(Pawn User)
{
    return ReadyToActivate();
}

simulated function bool ReadyToActivate()
{
    return ((bAllowActivation && (bActiveGame && !bInProgress) || bInProgress && bDeactivateOnPress) && ActorsAllowActivation()) && LinkedButtonsAllowActivation();
}

simulated function int GetInteractionIndex(Pawn User)
{
    return 8;
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    super(Trigger).Touch(Other, OtherComp, HitLocation, HitNormal);
    Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
}

event UnTouch(Actor Other)
{
    super(Actor).UnTouch(Other);
    Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
}

function bool UsedBy(Pawn User)
{
    local KFSeqEvent_MinigameActivated ActivationEvent;
    local int I;

    if(IsTimerActive('ActivateGame'))
    {
        return false;
    }
    LastActivatingUser = User;
    if((ActivationDelay > float(0)) && !bInProgress && bDeactivateOnPress)
    {
        SetTimer(ActivationDelay, false, 'ActivateGame');
        I = 0;
        J0x7F:

        if(I < GeneratedEvents.Length)
        {
            ActivationEvent = KFSeqEvent_MinigameActivated(GeneratedEvents[I]);
            if(ActivationEvent != none)
            {
                ActivationEvent.NotifyDelayedActivation(LastActivatingUser, self);
            }
            ++ I;
            goto J0x7F;
        }        
    }
    else
    {
        ActivateGame();
    }
    I = 0;
    J0x11B:

    if(I < GeneratedEvents.Length)
    {
        ActivationEvent = KFSeqEvent_MinigameActivated(GeneratedEvents[I]);
        if(ActivationEvent != none)
        {
            ActivationEvent.NotifyStartup(LastActivatingUser, self);
        }
        ++ I;
        goto J0x11B;
    }
    return true;
}

function ActivateGame()
{
    local KFSeqEvent_MinigameActivated ActivationEvent;
    local int I;
    local KFInterface_MinigameActor MinigameActor;

    if(ReadyToActivate())
    {
        if(bActiveGame && !bInProgress)
        {
            I = 0;
            J0x36:

            if(I < GeneratedEvents.Length)
            {
                ActivationEvent = KFSeqEvent_MinigameActivated(GeneratedEvents[I]);
                if(ActivationEvent != none)
                {
                    ActivationEvent.NotifyActivation(LastActivatingUser, self);
                }
                ++ I;
                goto J0x36;
            }
            bInProgress = true;
            bAllowActivation = false;
            if(DeactivationTime > 0)
            {
                SetTimer(DeactivationTime, false, 'DeActivate');
            }
            if(MinigameActors.Length > 0)
            {
                foreach MinigameActors(MinigameActor,)
                {
                    MinigameActor.Activated(self);                    
                }                
            }
            SetTimer(ReactivationTime, false, 'AllowReactivation');
            PlaySoundBase(ActivationSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);            
        }
        else
        {
            if(bInProgress && bDeactivateOnPress)
            {
                DeActivate();
            }
        }
    }
}

function AllowReactivation()
{
    bAllowActivation = true;
    BroadcastInteractionMessages();
}

function BroadcastInteractionMessages()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < Touching.Length)
    {
        Class'KFPlayerController'.static.UpdateInteractionMessages(Touching[I]);
        ++ I;
        goto J0x0B;
    }
}

function bool ActorsAllowActivation()
{
    local KFInterface_MinigameActor MinigameActor;

    if(MinigameActors.Length > 0)
    {
        foreach MinigameActors(MinigameActor,)
        {
            if(!MinigameActor.CanBeActivated(self))
            {                
                return false;
            }            
        }        
    }
    return true;
}

function bool LinkedButtonsAllowActivation()
{
    local KFTrigger_MinigameButton Button;

    foreach LinkedButtons(Button,)
    {
        if(Button.bInProgress || Button.IsTimerActive('ActivateGame'))
        {            
            return false;
        }        
    }    
    return true;
}

function DeActivate()
{
    local KFInterface_MinigameActor MinigameActor;
    local KFSeqEvent_MinigameActivated ActivationEvent;
    local int I;

    if(ReactivationTime <= DeactivationTime)
    {
        AllowReactivation();
        ClearTimer('AllowReactivation');
    }
    ClearTimer('DeActivate');
    bInProgress = false;
    bAllowActivation = false;
    SetTimer(ReactivationTime, false, 'AllowReactivation');
    I = 0;
    J0x83:

    if(I < GeneratedEvents.Length)
    {
        ActivationEvent = KFSeqEvent_MinigameActivated(GeneratedEvents[I]);
        if(ActivationEvent != none)
        {
            ActivationEvent.NotifyDeactivation(self, self);
        }
        ++ I;
        goto J0x83;
    }
    if(MinigameActors.Length > 0)
    {
        foreach MinigameActors(MinigameActor,)
        {
            MinigameActor.Deactivated();            
        }        
    }
}

function SetMinigameActive()
{
    if(!bActiveGame)
    {
        bActiveGame = true;
        MinigameStateUpdated();
    }
}

function SetMinigameInactive()
{
    if(bActiveGame)
    {
        bActiveGame = false;
        DeActivate();
        MinigameStateUpdated();
    }
}

function MinigameStateUpdated()
{
    local KFSeqEvent_MinigameStateChanged StateChangeEvent;
    local int I;

    I = 0;
    J0x0B:

    if(I < GeneratedEvents.Length)
    {
        StateChangeEvent = KFSeqEvent_MinigameStateChanged(GeneratedEvents[I]);
        if(StateChangeEvent != none)
        {
            StateChangeEvent.StateChanged(none, self, bActiveGame);
        }
        ++ I;
        goto J0x0B;
    }
}

defaultproperties
{
    bAllowActivation=true
    ReactivationTime=5
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTrigger_MinigameButton.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFTrigger_MinigameButton.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTrigger_MinigameButton.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTrigger_MinigameButton.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    SupportedEvents=/* Array type was not detected. */
}