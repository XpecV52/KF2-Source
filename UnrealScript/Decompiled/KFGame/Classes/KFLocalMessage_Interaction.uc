/*******************************************************************************
 * KFLocalMessage_Interaction generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFLocalMessage_Interaction extends KFLocalMessage;

enum EInteractionMessageType
{
    IMT_None,
    IMT_AcceptObjective,
    IMT_GamepadWeaponSelectHint,
    IMT_UseTrader,
    IMT_UseDoor,
    IMT_ReceiveAmmo,
    IMT_ReceiveGrenades,
    IMT_HealSelfWarning,
    IMT_ClotGrabWarning,
    IMT_MAX
};

var const localized string UseTraderMessage;
var const localized string UseDoorMessage;
var const localized string AcceptObjectiveMessage;
var const localized string ReceiveAmmoMessage;
var const localized string ReceiveGrenadesMessage;
var const localized string HealSelfWarning;
var const localized string HealSelfGamepadWarning;
var const localized string PressToBashWarning;
var const localized string GamepadWeaponSelectHint;
var const string USE_COMMAND;
var const string HEAL_COMMAND;
var const string HEAL_COMMAND_CONTROLLER;
var const string BASH_COMMAND;
var const string WEAPON_SELECT_CONTROLLER;

static function ClientReceive(PlayerController P, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject)
{
    local string MessageString;
    local KFGFxMoviePlayer_HUD GFxHud;

    if(KFGFxHudWrapper(P.myHUD) != none)
    {
        GFxHud = KFGFxHudWrapper(P.myHUD).HudMovie;
        if(GFxHud != none)
        {
            MessageString = GetString(Switch, RelatedPRI_1 == P.PlayerReplicationInfo, RelatedPRI_1, RelatedPRI_2, OptionalObject);
            GFxHud.DisplayInteractionMessage(MessageString, Switch, GetKeyBind(P, Switch), GetMessageDuration(Switch));
        }
    }
}

static function float GetMessageDuration(int Switch)
{
    switch(Switch)
    {
        case 2:
            return 2;
        default:
            return 0;
            break;
    }
}

static function string GetKeyBind(PlayerController P, optional int Switch)
{
    local KFPlayerInput KFInput;
    local KeyBind BoundKey;
    local string KeyString;

    KFInput = KFPlayerInput(P.PlayerInput);
    if(KFInput == none)
    {
        return "";
    }
    switch(Switch)
    {
        case 3:
        case 4:
        case 1:
        case 5:
        case 6:
            KFInput.GetKeyBindFromCommand(BoundKey, default.USE_COMMAND, false);
            KeyString = KFInput.GetBindDisplayName(BoundKey);
            break;
        case 7:
            if(KFInput.bUsingGamepad)
            {
                KFInput.GetKeyBindFromCommand(BoundKey, default.HEAL_COMMAND_CONTROLLER, false);                
            }
            else
            {
                KFInput.GetKeyBindFromCommand(BoundKey, default.HEAL_COMMAND, false);
            }
            KeyString = KFInput.GetBindDisplayName(BoundKey);
            break;
        case 8:
            KFInput.GetKeyBindFromCommand(BoundKey, default.BASH_COMMAND, false);
            KeyString = KFInput.GetBindDisplayName(BoundKey);
            break;
        case 2:
            KFInput.GetKeyBindFromCommand(BoundKey, default.WEAPON_SELECT_CONTROLLER, false);
            KeyString = KFInput.GetBindDisplayName(BoundKey);
            break;
        default:
            break;
    }
    return KeyString;
}

static function string GetString(optional int Switch, optional bool bPRI1HUD, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject)
{
    local PlayerInput Input;

    switch(Switch)
    {
        case 3:
            return default.UseTraderMessage;
        case 4:
            return default.UseDoorMessage;
        case 1:
            return default.AcceptObjectiveMessage;
        case 5:
            return default.ReceiveAmmoMessage;
        case 6:
            return default.ReceiveGrenadesMessage;
        case 7:
            Input = Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController().PlayerInput;
            return (((Input != none) && Input.bUsingGamepad) ? default.HealSelfGamepadWarning : default.HealSelfWarning);
        case 8:
            return default.PressToBashWarning;
        case 2:
            return default.GamepadWeaponSelectHint;
        default:
            return "";
            break;
    }
}

static function float GetPos(int Switch, HUD myHUD)
{
    return 0.8;
}

static function string GetHexColor(int Switch)
{
    return default.InteractionColor;
}

defaultproperties
{
    UseTraderMessage="<%x%> USE TRADER"
    UseDoorMessage="<%x%> Open/Close     (HOLD) <%x%> equip welder"
    AcceptObjectiveMessage="<%x%> accept objective"
    ReceiveAmmoMessage="<%x%> receive ammo"
    ReceiveGrenadesMessage="<%x%> receive grenades"
    HealSelfWarning="<%x%> heal self."
    HealSelfGamepadWarning="(HOLD) <%x%> heal self"
    PressToBashWarning="<%x%> bash"
    GamepadWeaponSelectHint="(HOLD) <%x%> weapon select"
    USE_COMMAND="GBA_Use"
    HEAL_COMMAND="GBA_QuickHeal"
    HEAL_COMMAND_CONTROLLER="GBA_Reload_Gamepad"
    BASH_COMMAND="GBA_TertiaryFire"
    WEAPON_SELECT_CONTROLLER="GBA_WeaponSelect_Gamepad"
    bIsUnique=true
    bIsConsoleMessage=false
    bBeep=true
    Lifetime=5
}