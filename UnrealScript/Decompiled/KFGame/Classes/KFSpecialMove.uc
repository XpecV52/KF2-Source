/*******************************************************************************
 * KFSpecialMove generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSpecialMove extends GameSpecialMove
    abstract
    native(SpecialMoves);

const FLAG_SpecialMoveButtonPressed = 253;
const FLAG_SpecialMoveButtonReleased = 254;

var KFPawn KFPOwner;
var KFPlayerController PCOwner;
var KFAIController AIOwner;
var transient Object AISpecialOwner;
var transient KFPawn.ESpecialMove SMIndex;
var AnimNodeSlot ActiveSlotNode;
var bool bOverridePawnSpeedModifier;
var bool bAllowHitReactions;
var bool bAllowMomentumPush;
var bool bCanOnlyWanderAtEnd;
var bool bAllowThirdPersonWeaponAnims;
var bool bUseCustomRotationRate;
var bool bDisablesWeaponFiring;
var bool bOnlyInteractionPawnCanDamageMe;
var bool bCanModifyInteractionPawn;
var bool bPendingStopFire;
var bool bUseCustomThirdPersonViewOffset;
var bool bRestoredCameraDefaults;
var const bool bDisableHeadTracking;
var const bool bDisableAI;
var bool bDisableMovement;
var bool bMovementDisabled;
var const bool bLockPawnRotation;
var bool bPawnRotationLocked;
var bool bDisableLook;
var bool bDisableWeaponInteraction;
var bool bDisableAIAttackRangeChecks;
var bool bDisableSteering;
var const bool bDisableTurnInPlace;
var const bool bDisablePhysics;
var const bool bServerOnlyPhysics;
var bool bAllowFireAnims;
var Rotator CustomRotationRate;
var ViewOffsetData CustomThirdPersonViewOffset;
var float ViewOffsetInterpTime;
var float CustomCameraFOV;
var float CameraFOVTransitionTime;
var float AITimeout;
var const float CustomTurnInPlaceAnimRate;
var AICommand_PushedBySM AICommand;
var class<AICommand_PushedBySM> DefaultAICommandClass;

// Export UKFSpecialMove::execIsPawnPathClear(FFrame&, void* const)
native static function bool IsPawnPathClear(Actor TraceInstigator, Pawn TraceToPawn, Vector TraceEnd, Vector TraceStart, optional Vector TraceExtent, optional bool bIgnorePawns, optional bool bTraceComplex);

static function byte PackFlagsBase(KFPawn P);

function bool NotifyBump(Actor Other, Vector HitNormal);

function InteractionPawnUpdated();

function SpecialMoveButtonRetriggered();

function SpecialMoveButtonReleased();

protected function bool InternalCanDoSpecialMove()
{
    return PawnOwner.Physics != 10;
}

function InitSpecialMove(Pawn inPawn, name InHandle)
{
    PawnOwner = inPawn;
    KFPOwner = KFPawn(inPawn);
    if(PawnOwner.Controller != none)
    {
        PCOwner = KFPlayerController(PawnOwner.Controller);
        if(PCOwner == none)
        {
            AIOwner = KFAIController(PawnOwner.Controller);
        }
    }
    bPendingStopFire = false;
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    local AICommand AIOwnerActiveCommand;
    local KFWeapon KFW;

    if((PCOwner != none) && KFPOwner.Weapon != none)
    {
        KFW = KFWeapon(KFPOwner.Weapon);
        if(KFW != none)
        {
            KFW.SetIronSights(false);
        }
    }
    SMIndex = KFPOwner.SpecialMove;
    if(AIOwner != none)
    {
        if((DefaultAICommandClass != none) && AIOwner.MyKFPawn != none)
        {
            AIOwnerActiveCommand == AICommand(AIOwner.GetActiveCommand());
            if((AIOwnerActiveCommand == none) || AIOwnerActiveCommand.AllowPushOfDefaultCommandForSpecialMove(KFPOwner.SpecialMove))
            {
                AICommand = DefaultAICommandClass.static.PushSpecialMoveCommand(AIOwner);
            }
        }
        AIOwner.NotifySpecialMoveStarted(self);
    }
    if(PCOwner != none)
    {
        if(bDisableLook)
        {
            PCOwner.IgnoreLookInput(true);
        }
        if((bUseCustomThirdPersonViewOffset && PCOwner.PlayerCamera != none) && PCOwner.PlayerCamera.CameraStyle == 'ThirdPerson')
        {
            KFThirdPersonCamera(KFPlayerCamera(PCOwner.PlayerCamera).ThirdPersonCam).SetViewOffset(CustomThirdPersonViewOffset, true, ViewOffsetInterpTime);
        }
        if(CustomCameraFOV > 0)
        {
            PCOwner.HandleTransitionFOV(CustomCameraFOV, CameraFOVTransitionTime);
        }
        bRestoredCameraDefaults = false;
    }
    if((bDisableWeaponInteraction && KFPOwner.Weapon != none) && KFWeapon(KFPOwner.Weapon) != none)
    {
        KFWeapon(KFPOwner.Weapon).SetSimplePutDown(true);
    }
    if(bDisableTurnInPlace)
    {
        KFPOwner.bDisableTurnInPlace = true;
    }
    if(bDisableMovement)
    {
        SetMovementLock(true);
    }
    if(bLockPawnRotation)
    {
        SetLockPawnRotation(true);
    }
    if(bDisablePhysics)
    {
        PawnOwner.ZeroMovementVariables();
        if((PawnOwner.Role == ROLE_Authority) || PawnOwner.IsLocallyControlled())
        {
            PawnOwner.SetPhysics(0);
        }
    }
    if(bUseCustomRotationRate)
    {
        PawnOwner.RotationRate = CustomRotationRate;
    }
    if(CustomTurnInPlaceAnimRate > 0)
    {
        KFPOwner.TurnInPlaceAnimRate = CustomTurnInPlaceAnimRate;
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    bPendingStopFire = false;
    PawnOwner.ClearTimer('AbortSpecialMove', self);
    if(((AIOwner != none) && DefaultAICommandClass != none) && AICommand != none)
    {
        if(AIOwner.GetActiveCommand() == AICommand)
        {
            AICommand.Status = 'Success';
            AIOwner.PopCommand(AICommand);
        }
        AICommand = none;
    }
    if(PCOwner != none)
    {
        if(bDisableLook)
        {
            PCOwner.IgnoreLookInput(false);
        }
        RestoreCameraDefaults();
    }
    if(KFPOwner != none)
    {
        KFPOwner.NotifySpecialMoveEnded(self, SMIndex);
        if(bUseCustomRotationRate)
        {
            KFPOwner.RotationRate = KFPOwner.default.RotationRate;
        }
        if(KFPOwner.TurnInPlaceAnimRate != KFPOwner.default.TurnInPlaceAnimRate)
        {
            KFPOwner.TurnInPlaceAnimRate = KFPOwner.default.TurnInPlaceAnimRate;
        }
        if(bDisableTurnInPlace)
        {
            KFPOwner.bDisableTurnInPlace = KFPOwner.default.bDisableTurnInPlace;
        }
        if((bDisableWeaponInteraction && KFPOwner.Weapon != none) && KFWeapon(KFPOwner.Weapon) != none)
        {
            KFWeapon(KFPOwner.Weapon).SetSimplePutDown(false);
        }
        if(bCanOnlyWanderAtEnd && KFPOwner != none)
        {
            if((AIOwner != none) && KFPOwner.IsHeadless())
            {
                AIOwner.DoHeadlessWander();                
            }
            else
            {
                if(KFPOwner.ShouldBeWandering())
                {
                    KFPOwner.CausePanicWander();
                }
            }
        }
    }
    if(bDisablePhysics && (PawnOwner.Role == ROLE_Authority) || PawnOwner.IsLocallyControlled())
    {
        PawnOwner.SetPhysics(2);
    }
    if(bMovementDisabled)
    {
        SetMovementLock(false);
    }
    if(AIOwner != none)
    {
        AIOwner.NotifySpecialMoveEnded(self);
    }
    AISpecialOwner = none;
    if(bPawnRotationLocked)
    {
        SetLockPawnRotation(false);
    }
    if(ActiveSlotNode != none)
    {
        ActiveSlotNode.SetActorAnimEndNotification(false);
        ActiveSlotNode = none;
    }
}

function RestoreCameraDefaults()
{
    if(bRestoredCameraDefaults || PCOwner == none)
    {
        return;
    }
    if((bUseCustomThirdPersonViewOffset && PCOwner.PlayerCamera != none) && PCOwner.PlayerCamera.CameraStyle == 'ThirdPerson')
    {
        if(KFPawn_Monster(KFPOwner) != none)
        {
            KFThirdPersonCamera(KFPlayerCamera(PCOwner.PlayerCamera).ThirdPersonCam).SetViewOffset(KFPawn_Monster(KFPOwner).ThirdPersonViewOffset, true, ViewOffsetInterpTime);
        }
    }
    if(CustomCameraFOV > 0)
    {
        PCOwner.HandleTransitionFOV(PCOwner.DefaultFOV, CameraFOVTransitionTime);
    }
    bRestoredCameraDefaults = true;
}

final function SetMovementLock(bool bEnable)
{
    if(bMovementDisabled != bEnable)
    {
        bMovementDisabled = bEnable;
        if(PCOwner != none)
        {
            PCOwner.IgnoreMoveInput(bEnable);
            if(PCOwner.PlayerInput != none)
            {
                PCOwner.PlayerInput.aForward = 0;
                PCOwner.PlayerInput.aStrafe = 0;
                PCOwner.PlayerInput.aUp = 0;
            }            
        }
        else
        {
            if(AIOwner != none)
            {
                AIOwner.bPreparingMove = bEnable;
            }
        }
        if(bEnable)
        {
            PawnOwner.Acceleration = vect(0, 0, 0);
        }
    }
}

function Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    if(((bMovementDisabled && KFPOwner != none) && KFPOwner.Role == ROLE_Authority) && KFPOwner.Physics == 1)
    {
        KFPOwner.Velocity.X = 0;
        KFPOwner.Velocity.Y = 0;
        KFPOwner.Acceleration = vect(0, 0, 0);
    }
}

final function SetLockPawnRotation(bool bLock)
{
    if(bPawnRotationLocked != bLock)
    {
        bPawnRotationLocked = bLock;
        if(!bLock)
        {
        }
    }
}

function ProcessViewRotation(float DeltaTime, out Rotator out_ViewRotation, out Rotator out_DeltaRot);

function CameraAnimInst PlayCameraAnim(Pawn PawnToPlay, CameraAnim InCameraAnim, optional float Rate, optional float Scale, optional float BlendInTime, optional float BlendOutTime, optional bool bLoop, optional bool bRandomStartTime, optional float Duration, optional bool bSingleInstance, optional bool bSkipSpaceCheck)
{
    local KFPlayerController KFPC;

    Rate = 1;
    Scale = 1;                            
    KFPC = KFPlayerController(PawnToPlay.Controller);
    if((((KFPC == none) || !PawnToPlay.IsLocallyControlled()) || KFPC.PlayerCamera == none) || InCameraAnim == none)
    {
        return none;
    }
    if(!bSkipSpaceCheck && !KFPC.CameraAnimHasEnoughSpace(InCameraAnim, Scale))
    {
        LogInternal("PlayCameraAnim failed CameraAnimHasEnoughSpace:" @ string(KFPC.CameraAnimHasEnoughSpace(InCameraAnim, Scale)));
        return none;
    }
    if((PawnOwner != none) && PawnOwner.WorldInfo.GRI.bMatchIsOver)
    {
        return none;
    }
    return KFPC.PlayerCamera.PlayCameraAnim(InCameraAnim, Rate, Scale, BlendInTime, BlendOutTime, bLoop, bRandomStartTime, Duration, bSingleInstance);
}

simulated function float PlaySpecialMoveAnim(name AnimName, KFPawn.EAnimSlotStance AnimStance, optional float BlendInTime, optional float BlendOutTime, optional float Rate, optional bool bLooping)
{
    local float Duration;

    BlendInTime = 0.2;
    BlendOutTime = 0.2;
    Rate = 1;    
    if(KFPOwner.bLogCustomAnim)
    {
        LogInternal((((("PlaySpecialMoveAnim '" $ string(AnimName)) $ "' on") @ string(KFPOwner)) @ " SM=") $ string(self));
    }
    Duration = KFPOwner.PlayBodyAnim(AnimName, AnimStance, Rate, BlendInTime, BlendOutTime, bLooping);
    if((Duration <= float(0)) && KFPOwner.IsDoingSpecialMove())
    {
        WarnInternal((((("Failed to play" @ string(AnimName)) @ "on special move") @ string(self)) @ "on Pawn") @ string(PawnOwner));
        PawnOwner.SetTimer(0.25, false, 'AbortSpecialMove', self);
        return 0;
    }
    if(!bLooping)
    {
        ActiveSlotNode = KFPOwner.BodyStanceNodes[AnimStance];
        ActiveSlotNode.SetActorAnimEndNotification(true);
    }
    return Duration;
}

function AbortSpecialMove()
{
    KFPOwner.EndSpecialMove();
}

function AnimEndNotify(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
    KFPOwner.EndSpecialMove();
}

function AbortedByAICommand();

function NotifyOwnerTakeHit(class<KFDamageType> DamageType, Vector HitLoc, Vector HitDir, Controller InstigatedBy);

function NotifyHitReactionInterrupt();

function bool CanInterruptWithParry();

function OnGoreMeshSwap();

function OnEMPDisrupted()
{
    if((KFPOwner != none) && KFPOwner.IsHumanControlled())
    {
        KFPOwner.EndSpecialMove();
    }
}

event ModifyInteractionPawn(out KFPawn OtherPawn);

defaultproperties
{
    bDisableAIAttackRangeChecks=true
    bDisableSteering=true
    CameraFOVTransitionTime=1
    Handle=KFSpecialMove
}