/*******************************************************************************
 * KFGFxOptionsMenu_GameSettings generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxOptionsMenu_GameSettings extends KFGFxObject_Menu within GFxMoviePlayer;

var const localized string SectionNameString;
var const localized string GameSettingsString;
var const localized string FOVString;
var const localized string FriendlyHudScaleString;
var const localized string GoreString;
var const localized string ShowCrosshairString;
var const localized string WiderString;
var const localized string NormalString;
var const localized string ClassicWeaponSelectString;
var const localized array<localized string> GoreOptionStrings;
var float FOVMinValue;
var float FOVMaxValue;
var float FOVCurrentValue;
var float FriendlyHudScaleMinValue;
var float FriendlyHudScaleMaxValue;
var const byte SHOW_NO_GORE_LEVEL;

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    LocalizeText();
    InitValues();
}

function LocalizeText()
{
    local GFxObject LocalizedObject, GoreOptions;
    local byte I;

    LocalizedObject = Outer.CreateObject("Object");
    GoreOptions = Outer.CreateArray();
    I = 0;
    J0x68:

    if(I < GoreOptionStrings.Length)
    {
        GoreOptions.SetElementString(I, GoreOptionStrings[I]);
        ++ I;
        goto J0x68;
    }
    LocalizedObject.SetString("sectionName", SectionNameString);
    LocalizedObject.SetString("header", GameSettingsString);
    LocalizedObject.SetString("fov", FOVString);
    LocalizedObject.SetString("friendlyHud", FriendlyHudScaleString);
    LocalizedObject.SetString("gore", GoreString);
    LocalizedObject.SetString("crosshair", ShowCrosshairString);
    LocalizedObject.SetString("classicWeaponSelect", ClassicWeaponSelectString);
    LocalizedObject.SetObject("goreOptions", GoreOptions);
    LocalizedObject.SetString("wider", WiderString);
    LocalizedObject.SetString("normal", NormalString);
    LocalizedObject.SetString("close", Class'KFCommon_LocalizedStrings'.default.BackString);
    SetObject("localizedText", LocalizedObject);
}

function InitValues()
{
    local GFxObject DataObject;

    SetFOVMinMax(FOVMinValue, FOVMaxValue);
    SetFriendlyHudMinMax(FriendlyHudScaleMinValue, FriendlyHudScaleMaxValue);
    DataObject = Outer.CreateObject("Object");
    DataObject.SetFloat("fov", Class'KFGameEngine'.default.FOVOptionsPercentageValue);
    DataObject.SetFloat("gore", float(Class'GameInfo'.default.GoreLevel));
    DataObject.SetFloat("friendlyHud", GetFriendlyHudScale());
    DataObject.SetBool("crosshair", Class'KFGameEngine'.static.IsCrosshairEnabled());
    DataObject.SetBool("classicWeaponSelect", Class'KFPlayerInput'.default.bQuickWeaponSelect);
    SetObject("dataValues", DataObject);
}

function float GetFriendlyHudScale()
{
    local KFPlayerController KFPC;
    local KFHUDBase KFHud;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        KFHud = KFHUDBase(KFPC.myHUD);
        if(KFHud != none)
        {
            return KFHud.FriendlyHudScale;            
        }
        else
        {
            return Class'KFHUDBase'.default.FriendlyHudScale;
        }
    }
    return 1;
}

function SetFOVMinMax(float MinVol, float MaxVol)
{
    ActionScriptVoid("setfovRange");
}

function SetFriendlyHudMinMax(float MinVol, float MaxVol)
{
    ActionScriptVoid("setFriendlyHudRange");
}

function Callback_CloseMenu()
{
    Manager.OpenMenu(5);
}

function Callback_ToggleCrosshair(bool bShow)
{
    local KFPlayerController KFPC;
    local KFHUDBase KFHud;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        KFHud = KFHUDBase(KFPC.myHUD);
        if(KFHud != none)
        {
            KFHud.bDrawCrosshair = bShow;
        }
    }
    Class'KFGameEngine'.static.SetCrosshairEnabled(bShow);
}

function Callback_FOVChanged(float NewFOVPercentage)
{
    local PlayerController PC;
    local KFGameEngine KFGE;

    KFGE = KFGameEngine(Class'Engine'.static.GetEngine());
    KFGE.FOVOptionsPercentageValue = NewFOVPercentage;
    KFGE.SaveConfig();
    Class'KFGameEngine'.default.FOVOptionsPercentageValue = NewFOVPercentage;
    Class'KFGameEngine'.static.StaticSaveConfig();
    PC = Outer.GetPC();
    if(PC != none)
    {
        PC.PlayerCamera.SetFOV(PC.PlayerCamera.DefaultFOV * NewFOVPercentage);
        PC.PlayerCamera.UpdateCamera(0);
    }
}

function Callback_FriendlyHudChanged(float NewFriendlyHudScale)
{
    local KFPlayerController KFPC;
    local KFHUDBase KFHud;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        KFHud = KFHUDBase(KFPC.myHUD);
        if(KFHud != none)
        {
            KFHud.FriendlyHudScale = NewFriendlyHudScale;
            KFHud.SaveConfig();            
        }
        else
        {
            Class'KFHUDBase'.default.FriendlyHudScale = NewFriendlyHudScale;
            Class'KFHUDBase'.static.StaticSaveConfig();
        }
    }
}

function Callback_WeaponSelectChanged(bool bActive)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bQuickWeaponSelect = bActive;
    KFPI.SaveConfig();
}

function Callback_GoreChanged(byte NewGoreLevel)
{
    local KFGameInfo KFGI;

    if(Outer.GetPC().WorldInfo.NetMode == NM_Standalone)
    {
        KFGI = KFGameInfo(Outer.GetPC().WorldInfo.Game);
        if(KFGI != none)
        {
            KFGI.GoreLevel = NewGoreLevel;
            KFGI.SaveConfig();
        }        
    }
    else
    {
        Class'GameInfo'.default.GoreLevel = NewGoreLevel;
        Class'GameInfo'.static.StaticSaveConfig();
    }
}

defaultproperties
{
    SectionNameString="OPTIONS"
    GameSettingsString="GAME SETTINGS"
    FOVString="FOV"
    FriendlyHudScaleString="Friendly HUD Scale"
    GoreString="Gore Intensity"
    ShowCrosshairString="Show Crosshair"
    WiderString="Wider"
    NormalString="Normal"
    ClassicWeaponSelectString="Weapon Quick Select"
    GoreOptionStrings(0)="No Gore"
    GoreOptionStrings(1)="Low Gore"
    GoreOptionStrings(2)="Gory"
    FOVMinValue=1
    FOVMaxValue=1.25
    FriendlyHudScaleMinValue=0.25
    FriendlyHudScaleMaxValue=1
}