/*******************************************************************************
 * KFPlayerController generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPlayerController extends GamePlayerController
    native(Controller)
    nativereplication
    config(Game)
    hidecategories(Navigation);

const KFMAX_Perks = 10;
const VIEWID_KFGameStats = 1;
const STATID_None = 0;
const STATID_Cmdo_Progress = 1;
const STATID_Cmdo_Build = 2;
const STATID_Bsrk_Progress = 10;
const STATID_Bsrk_Build = 11;
const STATID_Sup_Progress = 20;
const STATID_Sup_Build = 21;
const STATID_Sup_WeldPoints = 22;
const STATID_Fire_Progress = 30;
const STATID_Fire_Build = 31;
const STATID_Medic_Progress = 40;
const STATID_Medic_Build = 41;
const STATID_Medic_HealPoints = 42;
const STATID_Shrp_Progress = 50;
const STATID_Shrp_Build = 51;
const STATID_Demo_Progress = 60;
const STATID_Demo_Build = 61;
const STATID_Surv_Progress = 70;
const STATID_Surv_Build = 71;
const STATID_Guns_Progress = 80;
const STATID_Guns_Build = 81;
const STATID_SWAT_Progress = 90;
const STATID_SWAT_Build = 91;
const STATID_Kills = 200;
const STATID_StalkerKills = 201;
const STATID_CrawlerKills = 202;
const STATID_FleshpoundKills = 203;
const STATID_SpecialEventProgress = 300;
const STATID_WeeklyEventProgress = 301;
const STATID_DailyEventInfo = 302;
const STATID_DailyEventIDs = 303;
const STATID_DailyEventStats1 = 304;
const STATID_DailyEventStats2 = 305;
const STATID_SpecialEventKills_DEPRECATED = 306;
const STATID_SeasonalEventStats1 = 307;
const STATID_SeasonalEventStats2 = 308;
const STATID_SeasonalEventStats3 = 309;
const STATID_SeasonalEventStats4 = 310;
const STATID_SeasonalEventStats5 = 311;
const STATID_DoshVaultTotal = 400;
const STATID_LastViewedDoshVaultTotal = 401;
const STATID_DoshVaultProgress = 402;
const STATID_DoshVaultRecovered = 403;
const STATID_AchievementPlaceholder = 500;
const STATID_AnalyticsPlaceholder = 800;
const STATID_PersonalBest_KnifeKills = 2000;
const STATID_PersonalBest_PistolKills = 2001;
const STATID_PersonalBest_HeadShots = 2002;
const STATID_PersonalBest_Healing = 2003;
const STATID_PersonalBest_Kills = 2004;
const STATID_PersonalBest_Assists = 2005;
const STATID_PersonalBest_LargeZedKill = 2006;
const STATID_PersonalBest_Dosh = 2007;
const STATID_MatchWins = 3000;
const STATID_DingoAchievementStart = 4000;
const STATID_ACHIEVE_MrPerky5 = 4001;
const STATID_ACHIEVE_MrPerky10 = 4002;
const STATID_ACHIEVE_MrPerky15 = 4003;
const STATID_ACHIEVE_MrPerky20 = 4004;
const STATID_ACHIEVE_MrPerky25 = 4005;
const STATID_ACHIEVE_HardWins = 4015;
const STATID_ACHIEVE_SuicidalWins = 4016;
const STATID_ACHIEVE_HellWins = 4017;
const STATID_ACHIEVE_VSZedWins = 4009;
const STATID_ACHIEVE_VSHumanWins = 4010;
const STATID_ACHIEVE_HoldOut = 4011;
const STATID_ACHIEVE_DieVolter = 4012;
const STATID_ACHIEVE_FleshPoundKill = 4013;
const STATID_ACHIEVE_ShrikeKill = 4014;
const STATID_ACHIEVE_SirenKill = 4018;
const STATID_ACHIEVE_Benefactor = 4019;
const STATID_ACHIEVE_HealTeam = 4020;
const STATID_ACHIEVE_QuickOnTheTrigger = 4033;
const STATID_ACHIEVE_CollectCatacolmbs = 4021;
const STATID_ACHIEVE_BioticsCollectibles = 4022;
const STATID_ACHIEVE_EvacsCollectibles = 4023;
const STATID_ACHIEVE_OutpostCollectibles = 4024;
const STATID_ACHIEVE_PrisonCollectibles = 4025;
const STATID_ACHIEVE_ManorCollectibles = 4026;
const STATID_ACHIEVE_ParisCollectibles = 4027;
const STATID_ACHIEVE_FarmhouseCollectibles = 4028;
const STATID_ACHIEVE_BlackForestCollectibles = 4029;
const STATID_ACHIEVE_ContainmentStationCollectibles = 4030;
const STATID_ACHIEVE_InfernalRealmCollectibles = 4031;
const STATID_ACHIEVE_HostileGroundsCollectibles = 4032;
const STATID_ACHIEVE_ZedLandingCollectibles = 4035;
const STATID_ACHIEVE_DescentCollectibles = 4036;
const STATID_ACHIEVE_NukedCollectibles = 4037;
const STATID_ACHIEVE_TragicKingdomCollectibles = 4038;
const STATID_ACHIEVE_NightmareCollectibles = 4039;
const STATID_ACHIEVE_KrampusCollectibles = 4040;
const STATID_ACHIEVE_ArenaCollectibles = 4041;
const STATID_ACHIEVE_PowercoreCollectibles = 4042;
const STATID_ACHIEVE_AirshipCollectibles = 4043;
const STATID_ACHIEVE_LockdownCollectibles = 4044;
const STATID_ACHIEVE_MonsterBallCollectibles = 4045;
const STATID_ACHIEVE_MonsterBallSecretRoom = 4046;
const STATID_ACHIEVE_SantasWorkshopCollectibles = 4047;
const STATID_ACHIEVE_ShoppingSpreeCollectibles = 4048;
const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;
const MapObjectiveIndex = 4;
const MAX_AIM_CORRECTION_SIZE = 35.f;

enum ETextChatChannel
{
    ETCC_ALL,
    ETCC_TEAM,
    ETCC_MAX
};

enum EVoiceChannel
{
    EVC_ALL,
    EVC_TEAM,
    EVC_MAX
};

enum EAnalogMovementSpeed
{
    AMOVESPEED,
    AMOVESPEED_1,
    AMOVESPEED_2,
    AMOVESPEED_3,
    AMOVESPEED_MAX
};

enum KFSpectateModes
{
    SMODE_PawnFreeCam,
    SMODE_PawnThirdPerson,
    SMODE_PawnFirstPerson,
    SMODE_Roaming,
    SMODE_MAX
};

enum ETrackingRangeMode
{
    ETR_Custom,
    ETR_10Meters,
    ETR_25Meters,
    ETR_50Meters,
    ETR_100Meters,
    ETR_250Meters,
    ETR_MAX
};

enum ETrackingMode
{
    ETM_All,
    ETM_AllButTargeting,
    ETM_PawnsOnly,
    ETM_PawnsAndTargetingOnly,
    ETM_SpawnsOnly,
    ETM_FailedSpawnsOnly,
    ETM_HumansAndSpawnsOnly,
    ETM_PickupsOnly,
    ETM_MAX
};

enum EGameConductorDebugMode
{
    EGCDM_OverallRankAndSkill,
    EGCDM_Skill,
    EGCDM_OverallAccuracy,
    EGCDM_LifeSpan,
    EGCDM_ZedSpawning,
    EGCDM_GameplayAdjustments,
    EGCDM_Status,
    EGCDM_MAX
};

struct native PlayerStats
{
    var int PrimaryXP;
    var int SecondaryXP;

    structdefaultproperties
    {
        PrimaryXP=0
        SecondaryXP=0
    }
};

struct native PerkInfo
{
    var class<KFPerk> PerkClass;
    var byte PerkLevel;
    var byte PrestigeLevel;
    var KFPerk PerkArchetype;

    structdefaultproperties
    {
        PerkClass=none
        PerkLevel=0
        PrestigeLevel=0
        PerkArchetype=none
    }
};

struct native PlayerSteamAvatar
{
    var Texture2D Avatar;
    var UniqueNetId NetId;

    structdefaultproperties
    {
        Avatar=none
        NetId=(Uid=none)
    }
};

struct native PlayerAvatarPS4
{
    var string AvatarURL;
    var string PlayerName;
    var KFHTTPImageDownloader ImageDownLoader;

    structdefaultproperties
    {
        AvatarURL=""
        PlayerName=""
        ImageDownLoader=none
    }
};

struct native sPlayerZedSpawnInfo
{
    var class<KFPawn_Monster> PendingZedPawnClass;
    var Vector PendingZedSpawnLocation;
    var float LastSpawnedTime;

    structdefaultproperties
    {
        PendingZedPawnClass=none
        PendingZedSpawnLocation=(X=0,Y=0,Z=0)
        LastSpawnedTime=0
    }
};

struct native sSavedViewTargetInfo
{
    var Actor SavedViewTarget;
    var name SavedCameraMode;
    var Rotator SavedRotation;

    structdefaultproperties
    {
        SavedViewTarget=none
        SavedCameraMode=None
        SavedRotation=(Pitch=0,Yaw=0,Roll=0)
    }
};

struct native ObjectiveAnnouncementInfo
{
    /** the default announcement sound to play (can be None) */
    var() SoundNodeWave AnnouncementSound;
    /** text displayed onscreen for this announcement */
    var() const localized string AnnouncementText;

    structdefaultproperties
    {
        AnnouncementSound=none
        AnnouncementText=""
    }
};

struct native PostWaveReplicationInfo
{
    var Vector VectData1;
    var Vector VectData2;
    var byte LargeZedKills;
    var bool bDiedDuringWave;
    var bool bBestTeammate;
    var bool bKilledMostZeds;
    var bool bEarnedMostDosh;
    var bool bAllSurvivedLastWave;
    var bool bSomeSurvivedLastWave;
    var bool bOneSurvivedLastWave;
    var bool bKilledFleshpoundLastWave;
    var bool bKilledScrakeLastWave;
    var bool bOpeningTrader;
    var class<KFPawn_Monster> ClassKilledByLastWave;
    var byte RepCount;

    structdefaultproperties
    {
        VectData1=(X=0,Y=0,Z=0)
        VectData2=(X=0,Y=0,Z=0)
        LargeZedKills=0
        bDiedDuringWave=false
        bBestTeammate=false
        bKilledMostZeds=false
        bEarnedMostDosh=false
        bAllSurvivedLastWave=false
        bSomeSurvivedLastWave=false
        bOneSurvivedLastWave=false
        bKilledFleshpoundLastWave=false
        bKilledScrakeLastWave=false
        bOpeningTrader=false
        ClassKilledByLastWave=none
        RepCount=0
    }
};

var KFPlayerController.ETextChatChannel CurrentTextChatChannel;
var KFPlayerController.EVoiceChannel CurrentVoiceChannel;
var byte SavedPerkIndex;
var transient KFPlayerController.KFSpectateModes CurrentSpectateMode;
var transient KFPlayerController.ETrackingRangeMode CurrentTrackerRangeMode;
var transient KFPlayerController.ETrackingMode CurrentTrackingMode;
var transient KFPlayerController.EGameConductorDebugMode CurrentGameConductorDebugMode;
var array<PlayerSteamAvatar> AvatarList;
var array<PlayerAvatarPS4> AvatarListPS4;
var array<PerkInfo> PerkList;
var repnotify KFPerk CurrentPerk;
var class<KFPerk> ServPendingPerkClass;
var int ServPendingPerkBuild;
var int ServPendingPerkLevel;
var int ServPendingPerkPrestigeLevel;
var bool bWaitingForClientPerkData;
var private const bool bPerkStatsLoaded;
var bool bAcuteHearing;
var bool bUsePhysicsRotation;
var bool bIsAchievementPlayer;
var config bool bHideTraderPaths;
var transient bool bClientTraderMenuOpen;
var protected bool bPlayerUsedUpdatePerk;
var bool bDownloadingContent;
var bool bNoEarRingingSound;
var bool bNightVisionActive;
var bool bPerkEffectIsActive;
var bool bGrabEffectIsActive;
var transient bool bPlayingLowHealthSFX;
var bool bCachedSeeZedTimePawn;
var bool bRecursingZedTimeVisibility;
var bool bShowKillTicker;
var bool bDisableAutoUpgrade;
var bool bHideBossHealthBar;
var bool bHideRemotePlayerHeadshotEffects;
var bool bDOFEnabled;
var bool bGamePlayDOFActive;
var bool bIronSightsDOFActive;
var bool bReflectionsEnabled;
var bool bBlurEnabled;
var bool bProcessingGameInvite;
var bool bLoggingInForOnlinePlay;
var bool bOnlinePrivilegeCheckPending;
var protected config bool bDebugTargetAdhesion;
var(AimAssist) protected bool bDebugAutoTarget;
/** Don't use the countdown time, just keep looking at the ForceLookAtPawn */
var() protected bool bLockToForceLookAtPawn;
/** User preference (e.g. clot grab) */
var() bool bSkipNonCriticalForceLookAt;
var bool bDebugPartialZedTime;
var bool bForcePartialZedTime;
/** If true the tracking map is a top down view, otherwise its a side view */
var(ZedMap) bool bTrackingMapTopView;
var transient bool bNoGoActive;
var class<KFPerk> MonsterPerkClass;
var const name MusicMessageType;
var const int EarnedDosh;
var transient sPlayerZedSpawnInfo PlayerZedSpawnInfo;
var KFPawn_Human UsablePawn;
var protected float UnmodifiedFOV;
var protected transient int BenefactorDosh;
var private const int BenefactorDoshReq;
var PostProcessSettings PostProcessModifier;
var float NextAdminCmdTime;
var float RefreshObjectiveUITime;
var int ShotsFired;
var int ShotsHit;
var int ShotsHitHeadshot;
var KFGFxMoviePlayer_Manager MyGFxManager;
var KFGFxMoviePlayer_HUD myGfxHUD;
var KFGFxMoviePlayer_PostRoundMenu MyGFxPostRoundMenu;
var class<KFGFxMoviePlayer_PostRoundMenu> PostRoundMenuClass;
var class<KFAutoPurchaseHelper> PurchaseHelperClass;
var KFAutoPurchaseHelper PurchaseHelper;
var float NextSpectatorDelay;
var transient KFPawn_Customization LocalCustomizationPawn;
var string DefaultAvatarPath;
var name MixerRallyBoneNames[2];
var string MixerCurrentDefaultScene;
var class<KFLEDEffectsManager> LEDEffectsManagerClass;
var KFLEDEffectsManager LEDEffectsManager;
var AkEvent ZedTimeEnterSound;
var AkEvent ZedTimeExitSound;
var AkEvent ZedTimePartialEnterSound;
var AkEvent ZedTimePartialExitSound;
var float LastTimeDilation;
var AkEvent PauseWwiseEvent;
var AkEvent ResumeWwiseEvent;
var AkEvent EarsRingingPlayEvent;
var AkEvent EarsRingingStopEvent;
var AkEvent LowHealthStartEvent;
var AkEvent LowHealthStopEvent;
var export editinline AkComponent StingerAkComponent;
var AkEvent ResetFiltersEvent;
var AkEvent FlashlightOnEvent;
var AkEvent FlashlightOffEvent;
var AkEvent NightVisionOnEvent;
var AkEvent NightVisionOffEvent;
var AkEvent AllMapCollectiblesFoundEvent;
var MaterialEffect GameplayPostProcessEffects;
var name GameplayPostProcessEffectName;
var MaterialInstanceConstant GameplayPostProcessEffectMIC;
var name EffectPainParamName;
var name EffectLowHealthParamName;
var name EffectZedTimeParamName;
var name EffectNightVisionParamName;
var name EffectSirenScreamParamName;
var name EffectBloatsPukeParamName;
var name EffectHealParamName;
var name EffectPerkParamName;
var name EffectFlashBangParamName;
var transient float PainEffectDuration;
var transient float PainEffectTimeRemaining;
var transient float HealEffectDuration;
var transient float HealEffectTimeRemaining;
var transient float SonicScreamEffectDuration;
var transient float SirenScreamEffectTimeRemaining;
var transient float BloatPukeEffectDuration;
var transient float BloatPukeEffectTimeRemaining;
var transient float FlashBangEffectDuration;
var transient float FlashBangEffectTimeRemaining;
var const int LowHealthThreshold;
var transient float TargetZEDTimeEffectIntensity;
var transient float CurrentZEDTimeEffectIntensity;
var transient float ZEDTimeEffectInterpTimeRemaining;
var const float PartialZEDTimeEffectIntensity;
var transient float ExplosionEarRingDuration;
var transient float ExplosionEarRingTimeRemaining;
var transient float ExplosionEarRingEffectIntensity;
var transient float ExplosionEarRingDelay;
var float CachedZedTimeVisibilityTime;
var float ZedTimeSightCounter;
var() export editinline PointLightComponent AmplificationLightTemplate;
var export editinline transient PointLightComponent AmplificationLight;
var private transient float PauseMoveInputTimeLeft;
/** @name Night Vision */
var() export editinline PointLightComponent NVGLightTemplate;
var export editinline transient PointLightComponent NVGLight;
var(DOF) float DOFFocalRange;
var(DOF) float DOFFocalAperture;
/** How quickly for the focus distance to adjust to what the player is currently looking at. This is not directly comparable to time, but the calculation is as BlendRate*Time */
var(DOF) float DOFFocusBlendRate;
var float DOFFocusDepth;
/** What max focus depth we'll use. If this is too far, when the focus trace fails (like tracing against the skybox) we end up blurring the whole screen. So this caps the max distance so this doesn't happen */
var(DOF) float DOFMaxFocusDepth;
/** Maximum angle (in degrees) to an enemy for calculating focal distance */
var(DOF) float DOFStaticFocusDepth;
var(DOF) editconst float DOFMaxEnemyAngle;
var float DOF_GP_LerpControl;
var float DOF_IS_LerpControl;
var float DOF_NVG_BlendInSpeed;
var float DOF_NVG_BlendOutSpeed;
var float CIN_ImageGrainScale;
/** Postprocess parameters when Night Vision is enabled */
var(NVG_Post) float NVG_FocusBlendRate;
var(NVG_Post) float NVG_ImageGrainScale;
/** [World] Fixed focal distance for NVG */
var(NVG_Post) float NVG_DOF_FocalDistance;
/** [World] World-unit radius around the focal point that is unblurred. */
var(NVG_Post) float NVG_DOF_SharpRadius;
/** [World] World-unit focal radius that defines how far away from the focal plane ( +/- sharp radius ) the maximum far/near blur radius is reached. */
var(NVG_Post) float NVG_DOF_FocalRadius;
/** [World] Minimum blur size. */
var(NVG_Post) float NVG_DOF_MinBlurSize;
/** [World] Maximum blur size for near-field (objects closer than focal point). */
var(NVG_Post) float NVG_DOF_MaxNearBlurSize;
/** [World] Maximum blur size for far-field (objects more distance than focal point). */
var(NVG_Post) float NVG_DOF_MaxFarBlurSize;
/** < 1 faster than linear transition */
var(NVG_Post) float NVG_DOF_ExpFalloff;
/** Cinematic mode DOF overrides */
var(Cinematic_DOF) float DOF_Cinematic_BlendInSpeed;
var(Cinematic_DOF) float DOF_Cinematic_BlendOutSpeed;
var(Cinematic_DOF) float DOF_Cinematic_FocalDistance;
var(Cinematic_DOF) float DOF_Cinematic_SharpRadius;
var(Cinematic_DOF) float DOF_Cinematic_FocalRadius;
var(Cinematic_DOF) float DOF_Cinematic_MinBlurSize;
var(Cinematic_DOF) float DOF_Cinematic_MaxNearBlurSize;
var(Cinematic_DOF) float DOF_Cinematic_MaxFarBlurSize;
var(Cinematic_DOF) float DOF_Cinematic_ExpFalloff;
/** Gameplay DOF overrides */
var(GP_DOF) float DOF_GP_BlendInSpeed;
var(GP_DOF) float DOF_GP_BlendOutSpeed;
var(GP_DOF) float DOF_GP_FocalDistance;
var(GP_DOF) float DOF_GP_SharpRadius;
var(GP_DOF) float DOF_GP_FocalRadius;
var(GP_DOF) float DOF_GP_MinBlurSize;
var(GP_DOF) float DOF_GP_MaxNearBlurSize;
var(GP_DOF) float DOF_GP_MaxFarBlurSize;
var(GP_DOF) float DOF_GP_ExpFalloff;
var float BlurStrength;
var float BlurBlendInSpeed;
var float BlurBlendOutSpeed;
var float BlurLerpControl;
var private KFOnlineStatsRead StatsRead;
var private KFOnlineStatsWrite StatsWrite;
var array<PlayerNameIdPair> RecentlyMetPlayers;
var delegate<LoginCompleteCallback> OnLoginComplete;
var OnlineGameSettings PendingGameSessionCreateGameSettings;
var repnotify PostWaveReplicationInfo PWRI;
var EphemeralMatchStats MatchStats;
var class<EphemeralMatchStats> MatchStatsClass;
var transient float LastUpdateSpectatorActiveTime;
var transient float UpdateSpectatorActiveInterval;
var transient int TargetViewRotationPitch;
var transient int TargetViewRotationYaw;
var transient sSavedViewTargetInfo SavedViewTargetInfo;
/** Interp curve to scale autotarget scoring for different ranges */
var(AimAssist) InterpCurveFloat ScoreTargetDistanceCurve;
/** Aim correction */
var(AimAssist) float MaxAimCorrectionDistance;
/** How long to force us to look at a pawn */
var() protected float ForceLookAtPawnTime;
/** Pawn we're being forced to look at */
var() protected KFPawn ForceLookAtPawn;
/** Position to draw the tracking map */
var(ZedMap) float TrackerXPosition;
/** Position to draw the tracking map */
var(ZedMap) float TrackerYPosition;
/** Scale to draw the tracking map at */
var(ZedMap) float TrackingMapScale;
/** Position to draw the tracking map */
var(ZedMap) float TrackerSpawnVolumeSizeX;
/** Position to draw the tracking map */
var(ZedMap) float TrackerSpawnVolumeSizeY;
/** Distance range for the tracking map */
var(ZedMap) float TrackingMapRange;
var int DebugLastSeenDoshVaultValue;
var int DebugCurrentDoshVaultValue;
var int DebugCurrentDoshVaultTier;
var int BeginningRoundVaultAmount;
var transient float NoGoStartTime;
var delegate<LoginCompleteCallback> __LoginCompleteCallback__Delegate;

replication
{
     if(bNetDirty)
        CurrentPerk, PWRI;

     if(Role == ROLE_Authority)
        TargetViewRotationPitch, TargetViewRotationYaw;
}

// Export UKFPlayerController::execSetHardwarePhysicsEnabled(FFrame&, void* const)
native function SetHardwarePhysicsEnabled(bool bEnabled);

// Export UKFPlayerController::execSyncInventoryProperties(FFrame&, void* const)
native function SyncInventoryProperties();

// Export UKFPlayerController::execAddVStat(FFrame&, void* const)
native function AddVStat(int Amount);

// Export UKFPlayerController::execResetVStat(FFrame&, void* const)
native function ResetVStat();

// Export UKFPlayerController::execCheckPerkLevelAchievements(FFrame&, void* const)
native function CheckPerkLevelAchievements();

// Export UKFPlayerController::execIsKeyboardAvailable(FFrame&, void* const)
native simulated function bool IsKeyboardAvailable();

// Export UKFPlayerController::execIsMouseAvailable(FFrame&, void* const)
native simulated function bool IsMouseAvailable();

// Export UKFPlayerController::execGetTargetAdhesionFrictionTarget(FFrame&, void* const)
native function Pawn GetTargetAdhesionFrictionTarget(float MaxDistance, const out Vector CamLoc, const out Rotator CamRot, const InterpCurveFloat TargetingAngle, optional bool bAutoAimTarget);

// Export UKFPlayerController::execCheckBulletWhip(FFrame&, void* const)
native function CheckBulletWhip(AkEvent BulletWhip, Vector FireLocation, Vector FireDir, Vector HitLocation, Actor ShootActor);

// Export UKFPlayerController::execGetPerk(FFrame&, void* const)
native final simulated function KFPerk GetPerk();

// Export UKFPlayerController::execPerformPrestigeReset(FFrame&, void* const)
native final function PerformPrestigeReset(class<KFPerk> PSGPerkClass);

// Export UKFPlayerController::execPushPlayerStats(FFrame&, void* const)
private reliable server native final event PushPlayerStats(PlayerStats Stats);

// Export UKFPlayerController::execShowPreClientTravelMovie(FFrame&, void* const)
private native final function ShowPreClientTravelMovie(string URLString);

simulated event PostBeginPlay()
{
    super(PlayerController).PostBeginPlay();
    PostAkEvent(ResetFiltersEvent);
    UpdateSeasonalState();
    MatchStats = new (self) MatchStatsClass;
    ClearDownloadInfo();
    InitMixerDelegates();
    InitLEDManager();
    InitDiscord();
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        OnlineSub.AddOnReadOnlineAvatarCompleteDelegate(OnAvatarReceived);
        OnlineSub.AddOnReadOnlineAvatarByNameCompleteDelegate(OnAvatarURLPS4Received);
    }
}

function SpawnDefaultHUD()
{
    super(PlayerController).SpawnDefaultHUD();
    if(KFGFxHudWrapper(myHUD) != none)
    {
        if((myGfxHUD == none) || (myGfxHUD.Class != KFGFxHudWrapper(myHUD).GetHUDClass()) && !Class'WorldInfo'.static.IsMenuLevel())
        {
            KFGFxHudWrapper(myHUD).CreateHUDMovie();
        }
    }
}

reliable client simulated function ClientSetHUD(class<HUD> newHUDType)
{
    super(PlayerController).ClientSetHUD(newHUDType);
    if(KFGFxHudWrapper(myHUD) != none)
    {
        if((myGfxHUD == none) || myGfxHUD.Class != KFGFxHudWrapper(myHUD).GetHUDClass())
        {
            KFGFxHudWrapper(myHUD).CreateHUDMovie();
        }
    }
}

simulated function CheckSpecialEventID()
{
    if(Class'KFGameEngine'.static.GetSeasonalEventID() >= 0)
    {
        StatsWrite.UpdateSpecialEventState();        
    }
    else
    {
        SetTimer(RefreshObjectiveUITime, false, 'CheckSpecialEventID');
    }
}

simulated function CheckWeeklyEventID()
{
    if(Class'KFGameEngine'.static.GetWeeklyEventIndex() >= 0)
    {
        StatsWrite.UpdateWeeklyEventState();        
    }
    else
    {
        SetTimer(RefreshObjectiveUITime, false, 'CheckWeeklyEventID');
    }
}

simulated event UpdateSeasonalState()
{
    SetState('Event', GetSeasonalStateName());
}

function ClearDownloadInfo()
{
    local KFGameViewportClient GVC;

    GVC = KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport);
    if(GVC != none)
    {
        GVC.ClearDownloadInfo();
    }
}

reliable server event AddV(int Amount)
{
    LogInternal("adding dosh: " @ string(Amount));
    AddVStat(Amount);
}

reliable server event PushV()
{
    LogInternal("pushing dosh");
    if((WorldInfo.GRI != none) && WorldInfo.GRI.GameClass.static.AllowAnalyticsLogging())
    {
        WorldInfo.TWLogEvent("pc_dosh_earned", PlayerReplicationInfo, "#" $ string(EarnedDosh));
    }
    ResetVStat();
}

simulated event name GetSeasonalStateName()
{
    switch(Class'KFGameEngine'.static.GetSeasonalEventID() % 10)
    {
        case 2:
            return 'Summer_Sideshow';
        case 3:
            return 'Fall';
        case 4:
            return 'Winter';
        case 1:
        default:
            return 'No_Event';
            break;
    }
    return 'No_Event';
}

simulated event ReplicatedEvent(name VarName)
{
    super(Controller).ReplicatedEvent(VarName);
    if(VarName == 'PlayerReplicationInfo')
    {
        Class'KFHeadShotEffectList'.static.RefreshCachedHeadShotEffectId();
    }
    if(VarName == 'Pawn')
    {
        ToggleHealthEffects(Pawn != none);
    }
    if(VarName == 'PWRI')
    {
        SubmitPostWaveStats();
    }
    if(VarName == 'CurrentPerk')
    {
        RecievedNewPerkClass();
    }
}

simulated event ReceivedPlayer()
{
    local UIDataStore_OnlinePlayerData PlayerDataDS;
    local int I;
    local KFGameEngine KFEngine;

    KFEngine = KFGameEngine(Class'Engine'.static.GetEngine());
    super(PlayerController).ReceivedPlayer();
    if(IsLocalPlayerController())
    {
        if(((!Class'WorldInfo'.static.IsMenuLevel() && Class'WorldInfo'.static.IsConsoleBuild()) && !OnlineSub.IsGameOwned()) && !OnlineSub.IsFreeTrialPeriodActive())
        {
            LogInternal("Trail Check: Calling Disconnect KFPlayerController ReceivedPlayer");            
            ConsoleCommand("Disconnect");
        }
        if(OnlineSub.PlayerInterface.GetProfileSettings(byte(LocalPlayer(Player).ControllerId)) != none)
        {
            OnReadProfileSettingsComplete(byte(LocalPlayer(Player).ControllerId), true);            
        }
        else
        {
            if(!WorldInfo.IsConsoleBuild(9) || KFEngine.CheckSkipLobby())
            {
                PlayerDataDS = UIDataStore_OnlinePlayerData(Class'UIInteraction'.static.GetDataStoreClient().FindDataStore('OnlinePlayerData', LocalPlayer(Player)));
                if(PlayerDataDS != none)
                {
                    OnlineSub.PlayerInterface.AddReadProfileSettingsCompleteDelegate(byte(LocalPlayer(Player).ControllerId), OnReadProfileSettingsComplete);
                    OnlineSub.PlayerInterface.ReadProfileSettings(byte(LocalPlayer(Player).ControllerId), OnlineProfileSettings(PlayerDataDS.ProfileProvider.Profile));
                }
            }
        }
        if(WorldInfo.NetMode == NM_Client)
        {
            I = KFEngine.LastURL.Op.Length - 1;
            J0x40D:

            if(I >= 0)
            {
                if(((InStr(KFEngine.LastURL.Op[I], "Difficulty=", false, true) != -1) || InStr(KFEngine.LastURL.Op[I], "Game=", false, true) != -1) || InStr(KFEngine.LastURL.Op[I], "GameLength=", false, true) != -1)
                {
                    KFEngine.LastURL.Op.Remove(I, 1;
                }
                -- I;
                goto J0x40D;
            }
        }
    }
    if((Role == ROLE_Authority) && IsLocalController())
    {
        PlayerReplicationInfo.ClientInitialize(self);
    }
    HandleConsoleSessions();
}

reliable server function AskForPawn()
{
    local KFPawn P;

    P = KFPawn(Pawn);
    if(P != none)
    {
        P.ForceOpenActorChannel();
    }
    super(PlayerController).AskForPawn();
}

simulated function ReceivedGameClass(class<GameInfo> GameClass)
{
    local LocalPlayer LP;

    super(PlayerController).ReceivedGameClass(GameClass);
    LP = LocalPlayer(Player);
    if(LP != none)
    {
        LP.RemoveAllPostProcessingChains();
        LP.InsertPostProcessingChain(LP.Outer.GetWorldPostProcessChain(), -1, true);
        InitGameplayPostProcessFX();
    }
}

event Possess(Pawn aPawn, bool bVehicleTransition)
{
    local KFPlayerReplicationInfo KFPRI;

    if((aPawn != none) && aPawn.IsAliveAndWell())
    {
        bIsAchievementPlayer = true;
    }
    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    if((KFPRI != none) && KFPawn_Customization(aPawn) == none)
    {
        KFPRI.bHasSpawnedIn = true;
        KFPRI.bNetDirty = true;
    }
    ClientMatchStarted();
    super(PlayerController).Possess(aPawn, bVehicleTransition);
}

reliable client simulated function ClientRestart(Pawn NewPawn)
{
    super(PlayerController).ClientRestart(NewPawn);
    if(NewPawn == none)
    {
        return;
    }
    if(((LocalCustomizationPawn != none) && NewPawn != LocalCustomizationPawn) && !LocalCustomizationPawn.bPendingDelete)
    {
        LocalCustomizationPawn.Destroy();
        LocalCustomizationPawn = none;
    }
    UsablePawn = KFPawn_Human(NewPawn);
    FixFOV();
    SetRTPCValue('GRENADEFX', 0, true);
    MyGFxManager.CloseMenus(true);
    if((myGfxHUD != none) && myGfxHUD.SpectatorInfoWidget != none)
    {
        myGfxHUD.SpectatorInfoWidget.SetVisible(!PlayerReplicationInfo.bOnlySpectator);
    }
    if(WorldInfo.MyGoreEffectManager != none)
    {
        KFGoreManager(WorldInfo.MyGoreEffectManager).ResetPersistantGore(true);
    }
    EnableDepthOfField(false);
    if((NewPawn != none) && NewPawn.IsAliveAndWell())
    {
        bIsAchievementPlayer = true;
    }
    NewPawn.MovementSpeedModifier = 1;
    if(KFGFxHudWrapper(myHUD) != none)
    {
        if((myGfxHUD == none) || myGfxHUD.Class != KFGFxHudWrapper(myHUD).GetHUDClass())
        {
            KFGFxHudWrapper(myHUD).CreateHUDMovie(true);
        }
    }
    if(myGfxHUD != none)
    {
        myGfxHUD.ReceivePawn(KFPawn(Pawn));
    }
}

function ActivatePlayerDiedSequenceEvents()
{
    local Sequence GameSeq;
    local array<SequenceObject> AllSeqEvents;
    local array<int> ActivateIndices;
    local int I;
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    GameSeq = WorldInfo.GetGameSequence();
    if((GameSeq != none) && KFGI != none)
    {
        GameSeq.FindSeqObjectsByClass(Class'KFSeqEvent_PlayerDied', true, AllSeqEvents);
        if(KFGI.GetLivingPlayerCount() > 0)
        {
            ActivateIndices[0] = 0;            
        }
        else
        {
            ActivateIndices[0] = 1;
        }
        I = 0;
        J0xF9:

        if(I < AllSeqEvents.Length)
        {
            KFSeqEvent_PlayerDied(AllSeqEvents[I]).CheckActivate(WorldInfo, none, false, ActivateIndices);
            ++ I;
            goto J0xF9;
        }
    }
}

function PawnDied(Pawn inPawn)
{
    if(inPawn == Pawn)
    {
        if(KFPawn_Customization(inPawn) != none)
        {
            if(!Pawn.bDeleteMe && !Pawn.bPendingDelete)
            {
                Pawn.UnPossessed();
            }
            Pawn = none;
            if(MyGFxManager != none)
            {
                MyGFxManager.CloseMenus();
            }
            return;            
        }
        else
        {
            ActivatePlayerDiedSequenceEvents();
        }
    }
    super(PlayerController).PawnDied(inPawn);
}

exec function ListConsoleEvents();

function SpawnReconnectedPlayer()
{
    if(WorldInfo.NetMode == NM_Client)
    {
        return;
    }
    WorldInfo.Game.RestartPlayer(self);
}

function bool CanRestartPlayer()
{
    return ((((PlayerReplicationInfo != none) && !PlayerReplicationInfo.bOnlySpectator) && IsReadyToPlay()) && HasClientLoadedCurrentWorld()) && PendingSwapConnection == none;
}

function bool IsReadyToPlay()
{
    return ((WorldInfo.Game != none) ? KFGameInfo(WorldInfo.Game).IsPlayerReady(KFPlayerReplicationInfo(PlayerReplicationInfo)) : PlayerReplicationInfo.bReadyToPlay);
}

function bool CanViewCinematics()
{
    return PlayerReplicationInfo.bOnlySpectator || IsReadyToPlay();
}

function ResetPlayerMovementInput()
{
    if(!bCinematicMode)
    {
        super(PlayerController).ResetPlayerMovementInput();
    }
}

event InitInputSystem()
{
    super(PlayerController).InitInputSystem();
    if(WorldInfo.IsConsoleBuild())
    {
        CurrentVoiceChannel = 1;
    }
    if((WorldInfo.NetMode == NM_ListenServer) || WorldInfo.NetMode == NM_Client)
    {
        if(OnlineSub != none)
        {
            OnlineSub.RegisterLocalTalker(byte(LocalPlayer(Player).ControllerId));            
        }
        else
        {
            if(NotEqual_InterfaceInterface(VoiceInterface, (none)))
            {
                VoiceInterface.RegisterLocalTalker(byte(LocalPlayer(Player).ControllerId));
            }
        }
        ServerNotifyRegisteredAsLocalTalker();
    }
    if(WorldInfo.IsConsoleBuild(9))
    {
        SetTimer(2, false, 'CheckForConnectedControllers');
    }
    RegisterTalkerDelegate();
}

function CreateCustomizationPawn()
{
    local KFGameInfo KFGI;
    local NavigationPoint BestStart;

    KFGI = KFGameInfo(WorldInfo.Game);
    if((KFGI == none) || (KFGI.bRestartLevel && WorldInfo.NetMode != NM_DedicatedServer) && WorldInfo.NetMode != NM_ListenServer)
    {
        WarnInternal("bRestartLevel && !server, abort from RestartPlayer" @ string(WorldInfo.NetMode));
        return;
    }
    BestStart = GetBestCustomizationStart(KFGI);
    if(Pawn == none)
    {
        Pawn = KFGI.SpawnCustomizationPawn(BestStart);
    }
    if(KFPawn_Customization(Pawn) != none)
    {
        KFPawn_Customization(Pawn).InitializeCustomizationPawn(self, BestStart);
    }
}

function NavigationPoint GetBestCustomizationStart(KFGameInfo KFGI)
{
    local NavigationPoint BestStartSpot;

    BestStartSpot = KFGI.FindCustomizationStart(self);
    if(BestStartSpot == none)
    {
        BestStartSpot = KFGI.FindPlayerStart(self, 0);
        WarnInternal("No customization points have been found, using PlayerStart instead");
        if(BestStartSpot == none)
        {
            WarnInternal("Player start not found, failed to restart player");
            return none;
        }
    }
    return BestStartSpot;
}

function SpawnMidGameCustomizationPawn()
{
    local class<KFGameInfo> KFGameClass;
    local NavigationPoint BestCP;
    local KFCustomizationPoint CP;
    local PlayerStart PS;
    local Rotator StartRotation;
    local KFPawn_Customization CustomizationPawn;

    KFGameClass = class<KFGameInfo>(WorldInfo.GRI.GameClass);
    if(KFGameClass == none)
    {
        return;
    }
    foreach AllActors(Class'KFCustomizationPoint', CP)
    {
        if(KFGameClass.static.CheckSpawnProximity(CP, self, GetTeamNum(), true))
        {
            BestCP = CP;
            break;
        }        
    }    
    if(BestCP == none)
    {
        BestCP = CP;
        if(BestCP == none)
        {
            foreach AllActors(Class'PlayerStart', PS)
            {
                if(KFGameClass.static.CheckSpawnProximity(CP, self, GetTeamNum(), true))
                {
                    BestCP = PS;
                    break;
                }                
            }            
        }
        if(BestCP == none)
        {
            BestCP = PS;
        }
    }
    StartRotation.Yaw = BestCP.Rotation.Yaw;
    CustomizationPawn = Spawn(KFGameClass.default.CustomizationPawnClass,,, BestCP.Location, StartRotation,, true);
    if(CustomizationPawn != none)
    {
        SavedViewTargetInfo.SavedViewTarget = ViewTarget;
        SavedViewTargetInfo.SavedCameraMode = PlayerCamera.CameraStyle;
        SavedViewTargetInfo.SavedRotation = Rotation;
        ClientSetCameraFade(true, MakeColor(0, 0, 0, 255), vect2d(1, 0), 0.5, true);
        CustomizationPawn.RemoteRole = ROLE_None;
        Pawn = CustomizationPawn;
        CustomizationPawn.InitializeCustomizationPawn(self, BestCP);
        LocalCustomizationPawn = CustomizationPawn;        
    }
    else
    {
        SavedViewTargetInfo.SavedViewTarget = none;
    }
}

function ReturnToViewTarget()
{
    local bool bNeedsNewViewTarget;

    if(LocalCustomizationPawn != none)
    {
        if(ViewTarget == LocalCustomizationPawn)
        {
            bNeedsNewViewTarget = true;
        }
        if(Pawn == LocalCustomizationPawn)
        {
            UnPossess();
            bNeedsNewViewTarget = true;
        }
        if((LocalCustomizationPawn != none) && !LocalCustomizationPawn.bPendingDelete)
        {
            LocalCustomizationPawn.Destroy();
            LocalCustomizationPawn = none;
        }
    }
    if((bNeedsNewViewTarget && WorldInfo.GRI.bMatchHasBegun) && IsSpectating())
    {
        ClientSetCameraFade(true, MakeColor(0, 0, 0, 255), vect2d(1, 0), 0.75, true);
        if((SavedViewTargetInfo.SavedViewTarget != none) && !SavedViewTargetInfo.SavedViewTarget.bPendingDelete)
        {
            SetViewTarget(SavedViewTargetInfo.SavedViewTarget);
            SetCameraMode(SavedViewTargetInfo.SavedCameraMode);
            SetRotation(SavedViewTargetInfo.SavedRotation);            
        }
        else
        {
            ServerViewNextPlayer();
        }
    }
    SavedViewTargetInfo.SavedViewTarget = none;
}

function RegisterOnlineDelegates()
{
    super(PlayerController).RegisterOnlineDelegates();
    KFGameEngine(Class'GameEngine'.static.GetEngine()).RegisterOnlineDelegates();
}

function ShowBestRegionSelectedPopup(int RegionIndex)
{
    local string LocRegionName;

    LocRegionName = PlayfabInter.GetLocalizedRegionName(RegionIndex);
}

exec function TestRegionQuery()
{
    OnlineSub.StartRegionPingAndSelectDefaultRegion(ShowBestRegionSelectedPopup);
}

function OnReadProfileSettingsComplete(byte LocalUserNum, bool bWasSuccessful)
{
    local KFProfileSettings Profile;
    local KFPlayerInput KFInput;
    local KFGameInfo KFGI;
    local KFGameEngine KFEngine;
    local KFPlayerReplicationInfo KFPRI;
    local string MatchmakingRegion;
    local KFGoreManager GoreMgr;
    local UniqueNetId LobbyId, Zero;

    Profile = KFProfileSettings(OnlineSub.PlayerInterface.GetProfileSettings(LocalUserNum));
    if(Profile != none)
    {
        SavedPerkIndex = byte(Profile.GetProfileInt(105));
        bSkipNonCriticalForceLookAt = Profile.GetProfileBool(161);
        bShowKillTicker = Profile.GetProfileBool(123);
        bNoEarRingingSound = Profile.GetProfileBool(162);
        bHideBossHealthBar = Profile.GetProfileBool(158);
        bDisableAutoUpgrade = Profile.GetProfileBool(167);
        bHideRemotePlayerHeadshotEffects = Profile.GetProfileBool(170);
        KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.SelectCharacter(Profile.GetProfileInt(111), true);
        }
        KFInput = KFPlayerInput(PlayerInput);
        if(KFInput != none)
        {
            KFInput.bQuickWeaponSelect = Profile.GetProfileBool(100);
            KFInput.bInvertController = Profile.GetProfileBool(131);
            KFInput.bAutoTargetEnabled = Profile.GetProfileBool(132);
            KFInput.bForceFeedbackEnabled = Profile.GetProfileBool(103);
            KFInput.bTargetAdhesionEnabled = Profile.GetProfileBool(139);
            KFInput.bTargetFrictionEnabled = Profile.GetProfileBool(140);
            KFInput.GamepadSensitivityScale = Profile.GetProfileFloat(133);
            KFInput.GamepadZoomedSensitivityScale = Profile.GetProfileFloat(135);
            KFInput.SetGamepadLayout(Profile.GetProfileInt(101));
            KFInput.ReInitializeControlsUI();
        }
        KFGI = KFGameInfo(WorldInfo.Game);
        if(KFGI != none)
        {
            KFGI.GoreLevel = Profile.GetProfileInt(107);
        }
        KFEngine = KFGameEngine(Class'Engine'.static.GetEngine());
        if(KFEngine != none)
        {
            KFEngine.VOIPVolumeMultiplier = Profile.GetProfileFloat(164);
            KFEngine.MusicVolumeMultiplier = Profile.GetProfileFloat(114);
            KFEngine.SFxVolumeMultiplier = Profile.GetProfileFloat(115);
            KFEngine.DialogVolumeMultiplier = Profile.GetProfileFloat(113);
            KFEngine.MasterVolumeMultiplier = Profile.GetProfileFloat(112);
            KFEngine.bMusicVocalsEnabled = Profile.GetProfileBool(118);
            KFEngine.bShowWelderInInv = Profile.GetProfileBool(160);
            KFEngine.bUseAltAimOnDual = Profile.GetProfileBool(157);
            KFEngine.bAntiMotionSickness = Profile.GetProfileBool(159);
            KFEngine.bMinimalChatter = Profile.GetProfileBool(119);
            KFEngine.SafeFrameScale = Profile.GetProfileFloat(168);
            KFEngine.bEnableNative4k = Profile.GetProfileBool(169);
            if(KFEngine.SafeFrameScale == 0)
            {
                KFEngine.SafeFrameScale = 1;
            }
            SetUIScale(KFEngine.SafeFrameScale);
            if(Class'WorldInfo'.static.IsConsoleBuild())
            {
                Class'KFGameEngine'.static.SetCrosshairEnabled(Profile.GetProfileBool(163));                
            }
            else
            {
                Class'KFGameEngine'.static.SetCrosshairEnabled(Profile.GetProfileBool(121));
            }
            KFEngine.GammaMultiplier = Profile.GetProfileFloat(117);
            KFEngine.SetGamma(KFEngine.GammaMultiplier);
            KFEngine.SetNative4k(KFEngine.bEnableNative4k);
            KFEngine.PadVolumeMultiplier = ((Profile.GetProfileBool(155)) ? 100 : 0);
            KFEngine.InitAudioOptions();
            KFEngine.InitGamma();
            if(PlayfabInter != none)
            {
                MatchmakingRegion = Profile.GetProfileString(156);
                if((MatchmakingRegion == "") && WorldInfo.IsConsoleBuild(8))
                {
                    OnlineSub.StartRegionPingAndSelectDefaultRegion(None);
                    MatchmakingRegion = Class'PlayfabInterface'.default.CurrRegionName;
                }
                PlayfabInter.CurrRegionName = MatchmakingRegion;
            }
        }
        if(KFHUDBase(myHUD) != none)
        {
            KFHUDBase(myHUD).FriendlyHudScale = Profile.GetProfileFloat(125);
        }
        if(MyGFxManager != none)
        {
            MyGFxManager.OnProfileSettingsRead();
        }
        GoreMgr = KFGoreManager(Class'WorldInfo'.static.GetWorldInfo().MyGoreEffectManager);
        if(GoreMgr != none)
        {
            GoreMgr.DesiredGoreLevel = Profile.GetProfileInt(107);
        }
    }
    if(OnlineSub.GetLobbyInterface().GetLobbyFromCommandline(LobbyId))
    {
        OnlineSub.GetLobbyInterface().LobbyInvite(LobbyId, Zero, true);
    }
    Class'KFEmoteList'.static.RefreshCachedEmoteId();
    Class'KFHeadShotEffectList'.static.RefreshCachedHeadShotEffectId();
}

simulated function HandleConnectionStatusChange(Engine.OnlineSubsystem.EOnlineServerConnectionStatus ConnectionStatus)
{
    if(WorldInfo.IsConsoleBuild())
    {
        if(ConnectionStatus != 1)
        {
            HandleNetworkError(true);            
        }
        else
        {
            HandleReconnected();
        }
    }
}

simulated function HandleLoginStatusChange(bool bLoggedIn)
{
    if(WorldInfo.IsConsoleBuild())
    {
        if(!bLoggedIn)
        {
            HandleNetworkError(false);            
        }
        else
        {
            HandleReconnected();
        }
    }
}

simulated function HandleNetworkError(bool bConnectionLost)
{
    local KFGameViewportClient GVC;
    local string ErrorMessage;

    GVC = KFGameViewportClient(MyGFxManager.GetGameViewportClient());
    if(GVC.bSeenIIS)
    {
        OnlineSub.GameInterface.DestroyOnlineGame('Game');
        if(WorldInfo.GetMapName(true) != "KFMainMenu")
        {
            if(WorldInfo.NetMode != NM_Standalone)
            {
                if(bConnectionLost)
                {
                    GVC.bNeedDisconnectMessage = true;                    
                }
                else
                {
                    GVC.bNeedSignoutMessage = true;
                }                
                ConsoleCommand("open KFMainMenu");
            }            
        }
        else
        {
            if((MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.GetStartMenuState() == 1)
            {
                if(bConnectionLost)
                {
                    ErrorMessage = Localize("Notifications", ((Class'WorldInfo'.static.IsConsoleBuild(9)) ? "ConnectionLostMessageLive" : "ConnectionLostMessage"), "KFGameConsole");                    
                }
                else
                {
                    ErrorMessage = Localize("Notifications", ((Class'WorldInfo'.static.IsConsoleBuild(8)) ? "PSNSignoutMessage" : "LoggedOutMessage"), "KFGameConsole");
                }
                MyGFxManager.SetStartMenuState(MyGFxManager.GetStartMenuState());
                MyGFxManager.StartMenu.ApproveMatchMakingLeave();
                MyGFxManager.OpenMenu(0);
                MyGFxManager.DelayedOpenPopup(2, 5, Localize("Notifications", "ConnectionLostTitle", "KFGameConsole"), ErrorMessage, Class'KFCommon_LocalizedStrings'.default.OKString);
            }
            if(((MyGFxManager != none) && MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.FindGameContainer != none)
            {
                MyGFxManager.StartMenu.FindGameContainer.SetWhatsNewItems();
            }
        }
        if(MyGFxManager != none)
        {
            MyGFxManager.UpdateMenuBar();
        }
    }
}

simulated function HandleReconnected()
{
    if(MyGFxManager != none)
    {
        MyGFxManager.UpdateMenuBar();
        if((MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.FindGameContainer != none)
        {
            MyGFxManager.StartMenu.FindGameContainer.SetWhatsNewItems();
        }
    }
}

function HandleConsoleSessions()
{
    local UniqueNetId NullId;
    local KFGameReplicationInfo GRI;

    if(WorldInfo.IsConsoleDedicatedServer() && !WorldInfo.IsE3Build())
    {
        LogInternal("SESSIONS - ReceivedPlayer");
        if(KFGameEngine(Class'Engine'.static.GetEngine()).ConsoleGameSessionGuid == "")
        {
            LogInternal("SESSIONS - Still need a session");
            GRI = KFGameReplicationInfo(WorldInfo.GRI);
            if(GRI.ConsoleGameSessionHost == NullId)
            {
                LogInternal("SESSIONS - Make one!");
                GRI.ConsoleGameSessionHost = PlayerReplicationInfo.UniqueId;
                ClientCreateGameSession(PlayfabInter.GetCachedLobbyId(), GameEngine(Class'Engine'.static.GetEngine()).bPrivateServer, WorldInfo.Game.MaxPlayers);                
            }
            else
            {
                LogInternal(("SESSIONS - Wait for" @ Class'OnlineSubsystem'.static.UniqueNetIdToString(GRI.ConsoleGameSessionHost)) @ "to make one");
                GRI.ConsoleGameSessionPendingPlayers.AddItem(PlayerReplicationInfo.UniqueId;
            }
        }
    }
}

reliable client simulated function ClientCreateGameSession(string LobbyId, bool bPrivate, int MaxPlayers)
{
    local OnlineGameSettings GameSettings, OldGameSettings;
    local string RemoteAddressString, SessionGuid;

    LogInternal("SESSIONS - ClientCreateGameSession" @ LobbyId);
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
    {
        GameSettings = new Class'KFOnlineGameSettings';
        OnlineSub.GameInterface.GetGameServerRemoteAddress(RemoteAddressString);
        GameSettings.JoinString = RemoteAddressString;
        GameSettings.LobbyId = LobbyId;
        GameSettings.bRequiresPassword = bPrivate;
        GameSettings.NumPublicConnections = MaxPlayers;
        GameSettings.SessionTemplateName = "KF2GameSessionTemplate";
        PendingGameSessionCreateGameSettings = GameSettings;
        if(OnlineSub.IsInSession('Game'))
        {
            OldGameSettings = OnlineSub.GameInterface.GetGameSettings('Game');
            if((WorldInfo.IsConsoleBuild(9) && OldGameSettings.SessionTemplateName == GameSettings.SessionTemplateName) && bPrivate)
            {
                OnlineSub.GameInterface.ReadSessionGuidBySessionName('Game', SessionGuid);
                ServerGameSessionCreated(SessionGuid);                
            }
            else
            {
                if(WorldInfo.IsConsoleBuild(8) && OldGameSettings.LobbyId == GameSettings.LobbyId)
                {
                    OnlineSub.GameInterface.ReadSessionGuidBySessionName('Game', SessionGuid);
                    ServerGameSessionCreated(SessionGuid);                    
                }
                else
                {
                    OnlineSub.GameInterface.AddDestroyOnlineGameCompleteDelegate(OnOldSessionDestroyedForNewGameSessionCreate);
                    OnlineSub.GameInterface.DestroyOnlineGame('Game');
                }
            }            
        }
        else
        {
            TryCreateGameSessionNow();
        }
    }
}

private final simulated function OnOldSessionDestroyedForNewGameSessionCreate(name SessionName, bool bWasSuccessful)
{
    OnlineSub.GameInterface.ClearDestroyOnlineGameCompleteDelegate(OnOldSessionDestroyedForNewGameSessionCreate);
    TryCreateGameSessionNow();
}

private final simulated function TryCreateGameSessionNow()
{
    OnlineSub.GameInterface.AddCreateOnlineGameCompleteDelegate(OnGameSessionCreateComplete);
    if(!OnlineSub.GameInterface.CreateOnlineGame(byte(LocalPlayer(Player).ControllerId), 'Game', PendingGameSessionCreateGameSettings))
    {
        LogInternal("Failed to create online game");
        OnlineSub.GameInterface.ClearCreateOnlineGameCompleteDelegate(OnGameSessionCreateComplete);
    }
    PendingGameSessionCreateGameSettings = none;
}

simulated function OnGameSessionCreateComplete(name SessionName, bool bWasSuccessful)
{
    local string SessionGuid;

    LogInternal("SESSIONS - OnGameSessionCreateComplete:" @ string(bWasSuccessful));
    if(!bWasSuccessful)
    {
        ServerGameSessionFailed();
        return;
    }
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    OnlineSub.GameInterface.ClearCreateOnlineGameCompleteDelegate(OnGameSessionCreateComplete);
    OnlineSub.GameInterface.ReadSessionGuidBySessionName('Game', SessionGuid);
    LogInternal("SESSIONS - SessionGuid:" @ SessionGuid);
    ServerGameSessionCreated(SessionGuid);
    if(OnlineSub.GameInterface.GetPendingMembersToInvite().Length > 0)
    {
        OnCreateGameSessionForPlayTogetherComplete(SessionGuid, bWasSuccessful);
    }
}

reliable server function ServerGameSessionCreated(string SessionGuid)
{
    LogInternal("SESSIONS - ServerGameSessionCreated:" @ SessionGuid);
    KFGameEngine(Class'Engine'.static.GetEngine()).ConsoleGameSessionGuid = SessionGuid;
    KFGameReplicationInfo(WorldInfo.GRI).ConsoleGameSessionGuid = SessionGuid;
}

reliable server function ServerGameSessionFailed()
{
    local KFPlayerController Controller;
    local UniqueNetId NullId;
    local KFGameReplicationInfo GRI;

    LogInternal("SESSIONS - ServerGameSessionFailed");
    GRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(GRI.ConsoleGameSessionPendingPlayers.Length > 0)
    {
        GRI.ConsoleGameSessionHost = GRI.ConsoleGameSessionPendingPlayers[0];
        GRI.ConsoleGameSessionPendingPlayers.Remove(0, 1;
        foreach WorldInfo.AllControllers(Class'KFPlayerController', Controller)
        {
            if(Controller.PlayerReplicationInfo.UniqueId == GRI.ConsoleGameSessionHost)
            {
                Controller.ClientCreateGameSession(PlayfabInter.GetCachedLobbyId(), GameEngine(Class'Engine'.static.GetEngine()).bPrivateServer, WorldInfo.Game.MaxPlayers);
                break;
            }            
        }                
    }
    else
    {
        LogInternal("Everyone failed to make a game session");
        GRI.ConsoleGameSessionHost = NullId;
    }
}

simulated function TryJoinGameSession()
{
    local OnlineGameSettings GS;

    LogInternal("SESSIONS - TryJoinGameSession");
    if(KFGameReplicationInfo(WorldInfo.GRI).ConsoleGameSessionGuid == "")
    {
        LogInternal("  - Bad session guid. returning");
        return;
    }
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
    {
        GS = OnlineSub.GameInterface.GetGameSettings('Game');
        if(GS == none)
        {
            JoinGameSessionNow();            
        }
        else
        {
            if(GS.SessionGuid != KFGameReplicationInfo(WorldInfo.GRI).ConsoleGameSessionGuid)
            {
                LogInternal("need to clean up old session before joining new one");
                OnlineSub.GameInterface.AddDestroyOnlineGameCompleteDelegate(OnOldSessionDestroyedForNewGameSessionJoin);
                OnlineSub.GameInterface.DestroyOnlineGame('Game');
            }
        }
    }
}

private final simulated function OnOldSessionDestroyedForNewGameSessionJoin(name SessionName, bool bWasSuccessful)
{
    OnlineSub.GameInterface.ClearDestroyOnlineGameCompleteDelegate(OnOldSessionDestroyedForNewGameSessionJoin);
    JoinGameSessionNow();
}

simulated function JoinGameSessionNow()
{
    local OnlineGameSearch NewGameSearch;
    local byte LocalPlayerNum;

    LocalPlayerNum = byte(LocalPlayer(Player).ControllerId);
    NewGameSearch = new Class'OnlineGameSearch';
    OnlineSub.GameInterface.BindSessionGuidToSearch(LocalPlayerNum, NewGameSearch, KFGameReplicationInfo(WorldInfo.GRI).ConsoleGameSessionGuid);
    OnlineSub.GameInterface.AddJoinOnlineGameCompleteDelegate(OnJoinGameSessionComplete);
    if(!OnlineSub.GameInterface.JoinOnlineGame(LocalPlayerNum, 'Game', NewGameSearch.Results[0]))
    {
        LogInternal("SESSIONS - Failed to join game");
    }
}

simulated function OnJoinGameSessionComplete(name SessionName, bool bWasSuccessful)
{
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    LogInternal("SESSIONS - OnJoinGameSessionComplete:" @ string(bWasSuccessful));
    OnlineSub.GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameSessionComplete);
}

simulated function ResetMusicStateForTravel()
{
    PlaySoundBase(AkEvent'Set_State_Music_Reset', true);
}

event PreClientTravel(string PendingURL, Engine.Actor.ETravelType TravelType, bool bIsSeamlessTravel)
{
    ResetMusicStateForTravel();
    super(PlayerController).PreClientTravel(PendingURL, TravelType, bIsSeamlessTravel);
    if((TravelType == 2) && !bIsSeamlessTravel)
    {
        ShowPreClientTravelMovie(PendingURL);
    }
    DestroyOnlineGame();
}

function OnGameInviteAccepted(const out OnlineGameSearchResult InviteResult, Engine.OnlineSubsystem.OnGameInviteAcceptedResult ResultReason)
{
    local KFGameViewportClient Viewport;

    LogInternal("SESSIONS - OnGameInviteAccepted");
    if(!Class'GameEngine'.static.IsGameFullyInstalled())
    {
        NotifyInviteFailed("PlayGoBusy");
        return;
    }
    CachedInviteResult = InviteResult;
    if(CachedInviteResult.GameSettings != none)
    {
        Viewport = KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport);
        if(WorldInfo.IsConsoleBuild(9) && CachedInviteResult.GameSettings.NumOpenPublicConnections <= 0)
        {
            NotifyInviteFailed();
            return;
        }
        if(WorldInfo.IsConsoleBuild(9) && CachedInviteResult.GameSettings.OwningPlayerId != LocalPlayer(Player).GetUniqueNetId())
        {
            if(WorldInfo.bIsMenuLevel)
            {
                if(Viewport.bSeenIIS)
                {
                    KFGameEngine(Class'Engine'.static.GetEngine()).PerformLogout();
                }
                OnlineSub.ManuallyActivateUser(CachedInviteResult.GameSettings.OwningPlayerId);                
            }
            else
            {
                KFGameEngine(Class'Engine'.static.GetEngine()).GameSettingsForPendingInvite = CachedInviteResult.GameSettings;
                KFGameEngine(Class'Engine'.static.GetEngine()).PerformLogout();
                return;
            }
        }
        if(Viewport.bSeenIIS)
        {
            StartLogin(OnLoginForGameInviteComplete, true);            
        }
        else
        {
            TryAutoLoginForInvite();
        }        
    }
    else
    {
        if(ResultReason == 3)
        {
            NotifyInviteFailed();            
        }
        else
        {
            NotifyInviteFailed();
        }
    }
}

function TryAutoLoginForInvite()
{
    local KFGFxMenu_IIS IISMenu;

    IISMenu = KFGFxMenu_IIS(MyGFxManager.CurrentMenu);
    if(IISMenu != none)
    {
        IISMenu.AttemptAutoLogin(OnLoginForGameInviteComplete);        
    }
    else
    {
        SetTimer(1, false, 'TryAutoLoginForInvite', self);
    }
}

function OnLoginForGameInviteComplete()
{
    LogInternal("SESSIONS - OnLoginForGameInviteComplete");
    if(((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none))) && NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
    {
        if(OnlineSub.PlayerInterface.GetLoginStatus(byte(LocalPlayer(Player).ControllerId)) == 2)
        {
            bProcessingGameInvite = true;
            if(OnlineSub.IsInSession('Game'))
            {
                OnlineSub.GameInterface.AddDestroyOnlineGameCompleteDelegate(OnGameDestroyedForInviteComplete);
                OnlineSub.GameInterface.DestroyOnlineGame('Game');                
            }
            else
            {
                OnGameDestroyedForInviteComplete('Game', true);
            }            
        }
        else
        {
            NotifyInviteFailed();
        }
    }
}

function OnGameDestroyedForInviteComplete(name SessionName, bool bWasSuccessful)
{
    LogInternal("SESSIONS - OnGameDestroyedForInviteComplete");
    OnlineSub.GameInterface.ClearDestroyOnlineGameCompleteDelegate(OnGameDestroyedForInviteComplete);
    if(!bWasSuccessful)
    {
        LogInternal("SESSIONS - DestroyOnlineGame for invite failed");
    }
    OnlineSub.GameInterface.AddJoinOnlineGameCompleteDelegate(OnSessionJoinComplete);
    if(!OnlineSub.GameInterface.JoinOnlineGame(byte(LocalPlayer(Player).ControllerId), 'Game', CachedInviteResult))
    {
        OnlineSub.GameInterface.ClearJoinOnlineGameCompleteDelegate(OnSessionJoinComplete);
        NotifyInviteFailed();
    }
}

function OnSessionJoinComplete(name SessionName, bool bWasSuccessful)
{
    local OnlineGameSettings GameSettings;
    local bool bGameSession, bPartySession;

    GameSettings = OnlineSub.GameInterface.GetGameSettings(SessionName);
    if(!bWasSuccessful)
    {
        NotifyInviteFailed();
        return;
    }
    if(Class'WorldInfo'.static.IsConsoleBuild(9))
    {
        bGameSession = GameSettings.SessionTemplateName ~= "KF2GameSessionTemplate";
        bPartySession = GameSettings.SessionTemplateName ~= "KF2PartySessionTemplate";        
    }
    else
    {
        bGameSession = SessionName == 'Game';
        bPartySession = SessionName == 'Party';
    }
    if(bGameSession)
    {
        LogInternal(("SESSIONS - OnSessionJoinComplete" @ GameSettings.LobbyId) @ GameSettings.JoinString);
        JoinPlayfabServer(bWasSuccessful, GameSettings.JoinString);        
    }
    else
    {
        if(bPartySession)
        {
            if(!WorldInfo.bIsMenuLevel)
            {                
                ConsoleCommand("open KFMainMenu");
            }            
        }
        else
        {
            WarnInternal((("Unknown session joined" @ string(SessionName)) @ "and template name") @ GameSettings.SessionTemplateName);
        }
    }
}

function JoinPlayfabServer(bool bWasSuccessful, string ServerIP)
{
    local string OpenCommand;

    LogInternal((("SESSIONS - OnQueryAdditionalServerInfoForInviteComplete with success" @ string(bWasSuccessful)) @ "and server IP") @ ServerIP);
    if(!bWasSuccessful || ServerIP == "")
    {
        NotifyInviteFailed();        
    }
    else
    {
        OpenCommand = "open" @ ServerIP;        
        OpenCommand $= ("?PlayfabPlayerId=" $ PlayfabInter.CachedPlayfabId);        
        OpenCommand $= "?bJoinViaInvite";
        LogInternal("Going to connect with URL:" @ OpenCommand);        
        ConsoleCommand(OpenCommand);
    }
}

function NotifyInviteFailed(optional string LocKey)
{
    LocKey = "UnableToJoinInvite";
    bProcessingGameInvite = false;
    super(PlayerController).NotifyInviteFailed();
    LogInternal(((("NotifyInviteFailed:" @ LocKey) $ "Title") @ LocKey) $ "Message");
    MyGFxManager.DelayedOpenPopup(2, 0, Localize("Notifications", LocKey $ "Title", "KFGameConsole"), Localize("Notifications", LocKey $ "Message", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
}

function OnPlayTogetherStarted()
{
    local KFGameViewportClient Viewport;

    LogInternal("PLAY - OnPlayTogetherStarted");
    Viewport = KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport);
    if(Viewport.bSeenIIS)
    {
        if(Class'WorldInfo'.static.IsConsoleBuild() && !OnlineSub.IsGameOwned())
        {
            if(OnlineSub.CanCheckFreeTrialState() && !OnlineSub.IsFreeTrialPeriodActive())
            {
                Class'KFGFxMoviePlayer_Manager'.static.HandleFreeTrialError(2);
                return;
            }
            if(!OnlineSub.CanCheckFreeTrialState())
            {
                Class'KFGFxMoviePlayer_Manager'.static.HandleFreeTrialError(1);
                return;
            }
        }
        StartLogin(OnLoginForPlayTogetherComplete, true);        
    }
    else
    {
        TryAutoLoginForPlayTogether();
    }
}

function TryAutoLoginForPlayTogether()
{
    local KFGFxMenu_IIS IISMenu;

    IISMenu = KFGFxMenu_IIS(MyGFxManager.CurrentMenu);
    if(IISMenu != none)
    {
        IISMenu.AttemptAutoLogin(OnLoginForPlayTogetherComplete);        
    }
    else
    {
        SetTimer(1, false, 'TryAutoLoginForPlayTogether', self);
    }
}

function OnLoginForPlayTogetherComplete()
{
    LogInternal("PLAY - OnLoginForPlayTogetherComplete");
    if(!Class'GameEngine'.static.IsGameFullyInstalled())
    {
        NotifyPlayTogetherFailed();
        return;
    }
    if(((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none))) && NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
    {
        if(OnlineSub.PlayerInterface.GetLoginStatus(byte(LocalPlayer(Player).ControllerId)) == 2)
        {
            bProcessingGameInvite = true;
            if(OnlineSub.IsInSession('Game'))
            {
                OnlineSub.GameInterface.AddDestroyOnlineGameCompleteDelegate(OnGameDestroyedForPlayTogetherComplete);
                OnlineSub.GameInterface.DestroyOnlineGame('Game');                
            }
            else
            {
                OnGameDestroyedForPlayTogetherComplete('Game', true);
            }            
        }
        else
        {
            NotifyPlayTogetherFailed();
        }
    }
}

function OnGameDestroyedForPlayTogetherComplete(name SessionName, bool bWasSuccessful)
{
    local KFGameViewportClient GVC;

    GVC = KFGameViewportClient(MyGFxManager.GetGameViewportClient());
    LogInternal("PLAY - OnGameDestroyedForPlayTogetherComplete");
    OnlineSub.GameInterface.ClearDestroyOnlineGameCompleteDelegate(OnGameDestroyedForPlayTogetherComplete);
    if(!bWasSuccessful)
    {
        LogInternal("PLAY - DestroyOnlineGame for PlayTogether failed");
    }
    if(WorldInfo.IsMenuLevel())
    {
        LogInternal("PLAY - Session created, sending invites!" @ string(bWasSuccessful));
        TryMainMenuPlayTogether();        
    }
    else
    {
        GVC.bHandlePlayTogether = true;        
        ConsoleCommand("open KFMainMenu");
    }
}

function TryMainMenuPlayTogether()
{
    local string InviteMessage;

    if((MyGFxManager != none) && MyGFxManager.StartMenu != none)
    {
        MyGFxManager.OnlineLobby.MakeLobby(6, 2);
        InviteMessage = Localize("Notifications", "InviteMessage", "KFGameConsole");
        MyGFxManager.OnlineLobby.SendInviteToUsers(OnlineSub.GameInterface.GetPendingMembersToInvite(), InviteMessage);
        OnlineSub.GameInterface.ResetPendingMembersToInvite();        
    }
    else
    {
        SetTimer(0.5, false, 'TryMainMenuPlayTogether', self);
    }
}

function OnCreateGameSessionForPlayTogetherComplete(string SessionGuid, bool bWasSuccessful)
{
    local string InviteMessage;

    LogInternal("PLAY - Session created, sending invites!" @ string(bWasSuccessful));
    if(!bWasSuccessful)
    {
        NotifyPlayTogetherFailed();
        return;
    }
    MyGFxManager.UnloadCurrentPopup();
    InviteMessage = Localize("Notifications", "InviteMessage", "KFGameConsole");
    OnlineSub.PlayerInterface.SendGameInviteToUsers(SessionGuid, 'Game', OnlineSub.GameInterface.GetPendingMembersToInvite(), InviteMessage);
    OnlineSub.GameInterface.ResetPendingMembersToInvite();
}

function NotifyPlayTogetherFailed(optional string LocKey)
{
    LocKey = "UnableToPlayTogether";
    bProcessingGameInvite = false;
    LogInternal(((("NotifyPlayTogetherFailed:" @ LocKey) $ "Title") @ LocKey) $ "Message");
    MyGFxManager.UnloadCurrentPopup();
    MyGFxManager.DelayedOpenPopup(2, 0, Localize("Notifications", LocKey $ "Title", "KFGameConsole"), Localize("Notifications", LocKey $ "Message", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
}

function int GetPreStigeValueDoshRewardValue()
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetPreStigeValueDoshRewardValue();
    }
    return -1;
}

function float GetDoshVaultTierValue()
{
    if(StatsWrite != none)
    {
        return float(StatsWrite.super(KFPlayerController).GetDoshVaultTierValue());
    }
    return -1;
}

function int GetTotalDoshCount()
{
    if(DebugCurrentDoshVaultValue != -1)
    {
        LogInternal("DEBUG GetTotalDoshCount:" @ string(DebugCurrentDoshVaultValue));
        return DebugCurrentDoshVaultValue;
    }
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetTotalDoshCount();
    }
    return -1;
}

function int GetLastSeenDoshCount()
{
    if(DebugLastSeenDoshVaultValue != -1)
    {
        return DebugLastSeenDoshVaultValue;
    }
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetLastSeenDoshCount();
    }
    return -1;
}

function int GetUnseenDoshCount()
{
    if(DebugLastSeenDoshVaultValue != -1)
    {
        return DebugCurrentDoshVaultValue - DebugLastSeenDoshVaultValue;
    }
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetUnseenDoshCount();
    }
    return -1;
}

function CheckUnlockDoshVaultReward()
{
    if(StatsWrite != none)
    {
        StatsWrite.super(KFPlayerController).CheckUnlockDoshVaultReward();
    }
}

function MarkDoshVaultSeen()
{
    if(StatsWrite != none)
    {
        StatsWrite.super(KFPlayerController).MarkDoshVaultSeen();
    }
}

function VerifyDoshVaultCrates()
{
    if(StatsWrite != none)
    {
        StatsWrite.super(KFPlayerController).VerifyDoshVaultCrates();
    }
}

function CheckHasViewedDoshVault()
{
    if(StatsWrite != none)
    {
        StatsWrite.super(KFPlayerController).CheckHasViewedDoshVault();
    }
}

function AddShotsFired(int AddedShots)
{
    ShotsFired += AddedShots;
}

function AddShotsHit(int AddedHits)
{
    ShotsHit += AddedHits;
}

function AddHeadHit(int AddedHits)
{
    ShotsHitHeadshot += AddedHits;
}

function RegisterTalkerDelegate()
{
    if((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.VoiceInterface, (none)))
    {
        OnlineSub.VoiceInterface.AddPlayerTalkingDelegate(OnPlayerTalking);
    }
}

function OnPlayerTalking(UniqueNetId TalkingPlayer, bool bIsTalking)
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    if(KFPRI != none)
    {
        if(KFPRI.UniqueId == TalkingPlayer)
        {
            KFPRI.VOIPStatusChanged(KFPRI, bIsTalking);
            if(bIsTalking)
            {
                if((CurrentVoiceChannel == 0) && WorldInfo.IsConsoleBuild() || !Class'KFPlayerInput'.default.bRequiresPushToTalk)
                {
                    CurrentVoiceChannel = 1;
                }
                if(CurrentVoiceChannel == 0)
                {
                    KFPRI.ServerNotifyStartVoip();                    
                }
                else
                {
                    KFPRI.ServerNotifyStartTeamVoip();
                }                
            }
            else
            {
                KFPRI.ServerNotifyStopVOIP();
            }
        }
    }
}

reliable client simulated function ClientStartNetworkedVoice()
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    if(KFPRI != none)
    {
        if((CurrentVoiceChannel == 0) && WorldInfo.IsConsoleBuild() || !Class'KFPlayerInput'.default.bRequiresPushToTalk)
        {
            CurrentVoiceChannel = 1;
        }
        if(!WorldInfo.IsConsoleBuild())
        {
            KFPRI.VOIPStatusChanged(PlayerReplicationInfo, true);
            if(CurrentVoiceChannel == 0)
            {
                KFPRI.VOIPStatus = 1;
                KFPRI.ServerNotifyStartVoip();                
            }
            else
            {
                KFPRI.VOIPStatus = 2;
                KFPRI.ServerNotifyStartTeamVoip();
            }
        }
    }
    super(PlayerController).ClientStartNetworkedVoice();
}

reliable client simulated function ClientStopNetworkedVoice()
{
    local KFPlayerReplicationInfo KFPRI;

    super(PlayerController).ClientStopNetworkedVoice();
    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    if(KFPRI != none)
    {
        KFPRI.VOIPStatus = 0;
        KFPRI.VOIPStatusChanged(PlayerReplicationInfo, false);
        KFPRI.ServerNotifyStopVOIP();
    }
}

reliable server function ServerNotifyRegisteredAsLocalTalker()
{
    KFPlayerReplicationInfo(PlayerReplicationInfo).bVOIPRegisteredWithOSS = true;
}

function SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons)
{
    super(PlayerController).SetCinematicMode(bInCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning, bAffectsButtons);
    ClientSetIgnoreButtons(bAffectsButtons);
}

reliable client simulated function ClientSetIgnoreButtons(bool bAffectsButtons)
{
    local KFGFxHudWrapper GFxHUDWrapper;

    if(bAffectsButtons && MyGFxManager != none)
    {
        MyGFxManager.CloseMenus();
    }
    GFxHUDWrapper = KFGFxHudWrapper(myHUD);
    if((GFxHUDWrapper != none) && GFxHUDWrapper.HudMovie != none)
    {
        if(bAffectsButtons)
        {
            GFxHUDWrapper.HudMovie.HudChatBox.ClearAndCloseChat();
        }
        GFxHUDWrapper.HudMovie.EatMyInput(bAffectsButtons);
    }
}

simulated function bool IsForceFeedbackAllowed()
{
    local KFPlayerInput KFInput;

    KFInput = KFPlayerInput(PlayerInput);
    return ((KFInput != none) && KFInput.bForceFeedbackEnabled) && super(PlayerController).IsForceFeedbackAllowed();
}

// Export UKFPlayerController::execClientInitializePerks(FFrame&, void* const)
native final function ClientInitializePerks();

// Export UKFPlayerController::execResetPerkStatsLoaded(FFrame&, void* const)
native final function ResetPerkStatsLoaded();

// Export UKFPlayerController::execLoadAllPerkLevels(FFrame&, void* const)
private native final function LoadAllPerkLevels();

// Export UKFPlayerController::execReadStatsTimeout(FFrame&, void* const)
private native final function ReadStatsTimeout();

// Export UKFPlayerController::execGetLevel(FFrame&, void* const)
native final function byte GetLevel();

// Export UKFPlayerController::execSetActivePerkLevel(FFrame&, void* const)
private native final simulated function SetActivePerkLevel(byte NewLevel);

// Export UKFPlayerController::execServerSetLevel(FFrame&, void* const)
private reliable server native final event ServerSetLevel(class<KFPerk> PerkClass, byte NewLevel);

// Export UKFPlayerController::execClientSetLevelCheat(FFrame&, void* const)
private reliable server native final event ClientSetLevelCheat(byte NewLevel);

// Export UKFPlayerController::execServerSetPrestigeLevel(FFrame&, void* const)
private reliable server native final event ServerSetPrestigeLevel(class<KFPerk> PerkClass, byte NewLevel);

// Export UKFPlayerController::execSetActivePerkPrestigeLevel(FFrame&, void* const)
private native final simulated function SetActivePerkPrestigeLevel(byte NewLevel);

// Export UKFPlayerController::execClientSetPrestigeLevelCheat(FFrame&, void* const)
private reliable server native final event ClientSetPrestigeLevelCheat(byte NewLevel);

// Export UKFPlayerController::execGetPerkPrestigeXPMultiplier(FFrame&, void* const)
native final function float GetPerkPrestigeXPMultiplier(class<KFPerk> PerkClass);

// Export UKFPlayerController::execGetPerkPrestigeNextXPMultiplier(FFrame&, void* const)
native final function float GetPerkPrestigeNextXPMultiplier(class<KFPerk> PerkClass);

// Export UKFPlayerController::execRequestPerkChange(FFrame&, void* const)
native final event RequestPerkChange(byte NewPerkIndex);

// Export UKFPlayerController::execServerSetPendingPerkUpdate(FFrame&, void* const)
private reliable server native final event ServerSetPendingPerkUpdate(byte NewPerkIndex, int NewPerkBuild, byte NewLevel, byte NewPerkPrestigeLevel, optional bool bClientUpdate)
{
    bClientUpdate = false;                            
}

// Export UKFPlayerController::execServerSetSavedPerkIndex(FFrame&, void* const)
private reliable server native final event ServerSetSavedPerkIndex(byte NewSavedPerkIndex);

// Export UKFPlayerController::execServerSelectPerk(FFrame&, void* const)
protected reliable server native final event ServerSelectPerk(byte NewPerkIndex, byte NewLevel, byte NewPrestigeLevel, optional bool bForce)
{
    bForce = false;                        
}

// Export UKFPlayerController::execCanUpdatePerkInfo(FFrame&, void* const)
native final function bool CanUpdatePerkInfo();

// Export UKFPlayerController::execWasPerkUpdatedThisRound(FFrame&, void* const)
native final event bool WasPerkUpdatedThisRound();

// Export UKFPlayerController::execApplyPendingPerks(FFrame&, void* const)
native final function ApplyPendingPerks();

static function string GetPerkName(int Index)
{
    return default.PerkList[Index].PerkClass.default.PerkName;
}

unreliable server function ServerCallOutPawnCloaking(KFPawn_Monster CloakedPawn)
{
    if(CloakedPawn != none)
    {
        CloakedPawn.CallOutCloaking(self);
    }
}

simulated event UpdatePerkLevelMenu(class<KFPerk> PerkClass)
{
    local KFGFxMenu_Perks PerkMenu;

    if(MyGFxManager != none)
    {
        PerkMenu = KFGFxMenu_Perks(MyGFxManager.CurrentMenu);
        if(PerkMenu != none)
        {
            PerkMenu.UpdateContainers(PerkClass);
        }
    }
}

function WaitForPerkAndRespawn()
{
    SetTimer(0.01, false, 'Timer_CheckForValidPerk');
    bWaitingForClientPerkData = true;
}

function Timer_CheckForValidPerk()
{
    local KFPerk MyPerk;

    MyPerk = GetPerk();
    if((MyPerk != none) && MyPerk.bInitialized)
    {
        if(CanRestartPlayer())
        {
            WorldInfo.Game.RestartPlayer(self);
        }
        bWaitingForClientPerkData = false;
        return;
    }
    SetTimer(0.01, false, 'Timer_CheckForValidPerk');
}

event SetHaveUpdatePerk(bool bUsedUpdate)
{
    if(KFGameReplicationInfo(WorldInfo.GRI).bMatchHasBegun)
    {
        bPlayerUsedUpdatePerk = bUsedUpdate;
    }
}

event NotifyPendingPerkChanges()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((KFGRI != none) && KFGRI.OpenedTrader != none)
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage_Game', 19, PlayerReplicationInfo);
    }
}

event NotifyPerkUpdated()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((KFGRI != none) && KFGRI.OpenedTrader != none)
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage_Game', 20, PlayerReplicationInfo);
    }
}

function NotifyXPGain(class<KFPerk> PerkClass, int Amount, int BonusXP)
{
    if(((((PerkClass != none) && PerkClass == GetPerk().GetPerkClass()) && myGfxHUD != none) && myGfxHUD.PlayerStatusContainer != none) && IsLocalController())
    {
        myGfxHUD.PlayerStatusContainer.UpdateXP(Amount, 0, false, PerkClass);
    }
    KFGameReplicationInfo(WorldInfo.GRI).PrimaryXPAccumulator += Amount;
    if(((self != none) && self.MatchStats != none) && PerkClass != none)
    {
        self.MatchStats.RecordPerkXPGain(PerkClass, Amount, BonusXP);
    }
}

function NotifyLevelUp(class<KFPerk> PerkClass, byte PerkLevel, byte NewPrestigeLevel)
{
    local bool bTierUnlocked;

    if((PerkClass != none) && IsLocalController())
    {
        if(((PerkLevel % 5) == 0) && PerkLevel != 0)
        {
            bTierUnlocked = true;
            Class'KFPerk'.static.SaveTierUnlockToConfig(PerkClass, 1, PerkLevel);
            Class'KFLocalMessage_Priority'.static.ClientReceive(self, 10);
            OnlineSub.PlayerInterfaceEx.PostActivityFeedPerkLevelUp(string(PerkClass.Name), PerkLevel);            
        }
        else
        {
            bTierUnlocked = false;
            Class'KFLocalMessage_Priority'.static.ClientReceive(self, 9);
        }
        myGfxHUD.LevelUpNotificationWidget.ShowLevelUpNotification(PerkClass, PerkLevel, bTierUnlocked);
        PerkList[GetPerkIndexFromClass(PerkClass)].PerkLevel = PerkLevel;
        PerkList[GetPerkIndexFromClass(PerkClass)].PrestigeLevel = NewPrestigeLevel;
        if(CurrentPerk.Class == PerkClass)
        {
            SetActivePerkLevel(PerkLevel);
            if(bTierUnlocked)
            {
                PostTierUnlock(PerkClass);
            }
        }
        UpdatePerkLevelMenu(PerkClass);
        ClientWriteAndFlushStats();
    }
    if(Role == ROLE_Authority)
    {
        if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
        {
            KFGameInfo(WorldInfo.Game).DialogManager.PlayLevelUpDialog(self);
        }        
    }
    else
    {
        ServerPlayLevelUpDialog();
    }
}

function PostTierUnlock(class<KFPerk> PerkClass)
{
    local int PerkBuild;
    local byte SelectedSkillsHolder[5];

    PerkBuild = GetPerkBuildByPerkClass(PerkClass);
    GetPerk().GetUnpackedSkillsArray(PerkClass, PerkBuild, SelectedSkillsHolder);
    CurrentPerk.UpdatePerkBuild(SelectedSkillsHolder, PerkClass);
}

event int GetPerkIndexFromClass(class<KFPerk> InPerkClass)
{
    return PerkList.Find('PerkClass', InPerkClass;
}

function PlayRMEffect(AkEvent RhythmMethodSound, name RhytmMethodRTPCName, int Level)
{
    SetRTPCValue(RhytmMethodRTPCName, float(Level), true);
    PlayAkEvent(RhythmMethodSound);
}

function RecievedNewPerkClass()
{
    if((MyGFxManager != none) && MyGFxManager.TraderMenu != none)
    {
        MyGFxManager.TraderMenu.UpdatePlayerInfo();
    }
}

// Export UKFPlayerController::execSetViewTarget(FFrame&, void* const)
native function SetViewTarget(Actor NewViewTarget, optional ViewTargetTransitionParams TransitionParams);

// Export UKFPlayerController::execChooseRandomCameraAnim(FFrame&, void* const)
native final simulated function int ChooseRandomCameraAnim(const out array<CameraAnim> Anims, optional float Scale, optional bool bDoNotRandomize)
{
    Scale = 1;                        
}

// Export UKFPlayerController::execCameraAnimHasEnoughSpace(FFrame&, void* const)
native final simulated function bool CameraAnimHasEnoughSpace(CameraAnim Anim, optional float Scale)
{
    Scale = 1;                
}

// Export UKFPlayerController::execUpdateDOF(FFrame&, void* const)
native final function UpdateDOF(float DeltaTime);

// Export UKFPlayerController::execUpdateDOFGamePlayLerpControl(FFrame&, void* const)
native final function UpdateDOFGamePlayLerpControl(float DeltaTime);

// Export UKFPlayerController::execUpdateDOFIronSightsLerpControl(FFrame&, void* const)
native final function UpdateDOFIronSightsLerpControl(float DeltaTime);

// Export UKFPlayerController::execUpdateFullscreenBlur(FFrame&, void* const)
native final function UpdateFullscreenBlur(float DeltaTime);

exec function PrintOutPrestigeInfo()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < PerkList.Length)
    {
        LogInternal(("Perk info:" @ string(PerkList[I].PerkLevel)) @ string(PerkList[I].PrestigeLevel));
        ++ I;
        goto J0x0B;
    }
}

exec function ShowTestDownloadNotification(string ItemName, float PercentComplete)
{
    if((MyGFxManager != none) && MyGFxManager.PartyWidget != none)
    {
        MyGFxManager.PartyWidget.ShowDownLoadNotification(ItemName, PercentComplete);
    }
}

exec function ToggleScreenShotMode()
{
    myHUD.ToggleHUD();
    if((Pawn != none) && KFWeapon(Pawn.Weapon) != none)
    {
        KFWeapon(Pawn.Weapon).bForceHidden = !myHUD.bShowHUD;
    }
}

simulated function HandleTransitionFOVAspectAdjusted(float NewFOV, float TransitionTime)
{
    local float AdjustedFOV;

    if((PlayerCamera != none) && KFPlayerCamera(PlayerCamera) != none)
    {
        AdjustedFOV = CalcFOVForAspectRatio(NewFOV, myHUD.SizeX, myHUD.SizeY, UnmodifiedFOV);
        KFPlayerCamera(PlayerCamera).TransitionFOV(AdjustedFOV, TransitionTime);
        KFPlayerCamera(PlayerCamera).SetUnmodifiedFOV(UnmodifiedFOV);
    }
}

simulated function HandleTransitionFOV(float NewFOV, float TransitionTime)
{
    if((PlayerCamera != none) && KFPlayerCamera(PlayerCamera) != none)
    {
        KFPlayerCamera(PlayerCamera).TransitionFOV(NewFOV, TransitionTime);
    }
}

simulated function NotifyResolutionChanged(float NewSizeX, float NewSizeY)
{
    local float AspectRatio, NewFOV, UsedPlayerIronSightFOV;
    local KFWeapon KFWeap;

    AspectRatio = NewSizeX / NewSizeY;
    NewFOV = CalcFOVForAspectRatio(PlayerCamera.default.DefaultFOV, NewSizeX, NewSizeY, UnmodifiedFOV);
    if(AspectRatio >= 1.77)
    {        
    }
    else
    {
        if(AspectRatio >= 1.7)
        {            
        }
    }
    DefaultFOV = NewFOV;
    PlayerCamera.DefaultFOV = NewFOV;
    if((Pawn != none) && KFInventoryManager(Pawn.InvManager) != none)
    {
        KFInventoryManager(Pawn.InvManager).InitFOV(NewSizeX, NewSizeY, DefaultFOV);
    }
    if((PlayerCamera != none) && KFPlayerCamera(PlayerCamera) != none)
    {
        if(Pawn != none)
        {
            KFWeap = KFWeapon(Pawn.Weapon);
        }
        if((KFWeap != none) && KFWeap.bUsingSights)
        {
            UsedPlayerIronSightFOV = KFWeap.PlayerIronSightFOV;
            KFPlayerCamera(PlayerCamera).TransitionFOV(UsedPlayerIronSightFOV, 0);            
        }
        else
        {
            KFPlayerCamera(PlayerCamera).TransitionFOV(DefaultFOV, 0);
        }
        KFPlayerCamera(PlayerCamera).SetUnmodifiedFOV(UnmodifiedFOV);
    }
}

static function float CalcFOVForAspectRatio(float OriginalFOV, float SizeX, float SizeY, out float OutUnmodifiedFOV)
{
    local float AspectRatio, OriginalAspectRatio, NewFOV;

    if(SizeY > float(0))
    {
        if(Class'WorldInfo'.static.IsNeoCheckerboardRendering())
        {
            AspectRatio = (0.5 * SizeX) / SizeY;
            OriginalAspectRatio = 16 / float(9);
            NewFOV = (Atan2(Tan((OriginalFOV * 3.141593) / 360) * (AspectRatio / OriginalAspectRatio), 1) * 360) / 3.141593;
            AspectRatio = SizeX / SizeY;
            OutUnmodifiedFOV = (Atan2(Tan((OriginalFOV * 3.141593) / 360) * (AspectRatio / OriginalAspectRatio), 1) * 360) / 3.141593;            
        }
        else
        {
            AspectRatio = SizeX / SizeY;
            OriginalAspectRatio = 16 / float(9);
            NewFOV = (Atan2(Tan((OriginalFOV * 3.141593) / 360) * (AspectRatio / OriginalAspectRatio), 1) * 360) / 3.141593;
            OutUnmodifiedFOV = NewFOV;
        }
    }
    if(NewFOV == float(0))
    {
        LogInternal((((("*** BAD FOV CALC DETECTED ***" @ string(GetFuncName())) @ "SizeX=") $ string(SizeX)) @ "SizeY=") $ string(SizeY));
    }
    return NewFOV;
}

function FixFOV()
{
    if(myHUD != none)
    {
        if(PlayerCamera != none)
        {
            FOVAngle = CalcFOVForAspectRatio(PlayerCamera.default.DefaultFOV, myHUD.SizeX, myHUD.SizeY, UnmodifiedFOV);
            DesiredFOV = FOVAngle;
            DefaultFOV = FOVAngle;            
        }
        else
        {
            FOVAngle = CalcFOVForAspectRatio(default.DefaultFOV, myHUD.SizeX, myHUD.SizeY, UnmodifiedFOV);
            DesiredFOV = FOVAngle;
            DefaultFOV = FOVAngle;
        }        
    }
    else
    {
        FOVAngle = PlayerCamera.default.DefaultFOV;
        DesiredFOV = PlayerCamera.default.DefaultFOV;
        DefaultFOV = PlayerCamera.default.DefaultFOV;
    }
    if((myHUD != none) && KFPlayerCamera(PlayerCamera) != none)
    {
        KFPlayerCamera(PlayerCamera).TransitionFOV(DefaultFOV, 0);
        KFPlayerCamera(PlayerCamera).SetUnmodifiedFOV(UnmodifiedFOV);
    }
}

function ResetFOV()
{
    super(PlayerController).ResetFOV();
    if(KFPlayerCamera(PlayerCamera) != none)
    {
        KFPlayerCamera(PlayerCamera).TransitionFOV(PlayerCamera.DefaultFOV, 0);
    }
}

exec function FOV(float F);

reliable client simulated function ClientSetCameraMode(name NewCamMode)
{
    local KFPawn KFP;
    local KFInterface_MonsterBoss KFBoss;

    KFP = KFPawn(ViewTarget);
    if(KFP != none)
    {
        KFP.SetMeshVisibility(NewCamMode != 'FirstPerson');
        KFP.bEnableAimOffset = NewCamMode != 'Fixed';
    }
    if(NewCamMode == 'Boss')
    {
        KFBoss = GetBoss();
        SetNightVision(false);
        if(ViewTarget != KFBoss.GetMonsterPawn())
        {
            SetViewTarget(KFBoss.GetMonsterPawn());
        }
        if(myGfxHUD != none)
        {
            myGfxHUD.ShowVoiceComms(false);
        }
        ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 0);        
    }
    else
    {
        HideBossNamePlate();
        if(NewCamMode == 'FreeCam')
        {
            if((PlayerCamera != none) && PlayerCamera.CameraStyle != NewCamMode)
            {
                MoveToAdjustedFreeCamPosition();
            }            
        }
        else
        {
            if((NewCamMode == 'FirstPerson') && !PlayerReplicationInfo.bIsSpectator)
            {
                if((Pawn != none) && ViewTarget != Pawn)
                {
                    SetViewTarget(Pawn);
                }
            }
        }
        if(((IsSpectating()) && ViewTarget != none) && (ViewTarget != Pawn) || (KFPawn_Customization(Pawn) == none) && !Pawn.IsAliveAndWell())
        {
            NotifyChangeSpectateViewTarget();
        }
    }
    if((myGfxHUD != none) && myGfxHUD.SpectatorInfoWidget != none)
    {
        if((NewCamMode == 'FirstPerson') && ViewTarget == self)
        {
            myGfxHUD.SpectatorInfoWidget.SetSpectatedKFPRI(none);
        }
    }
    if(PlayerCamera != none)
    {
        PlayerCamera.CameraStyle = NewCamMode;
    }
}

function bool IsBossCameraMode()
{
    if((PlayerCamera != none) && PlayerCamera.CameraStyle == 'Boss')
    {
        return true;
    }
    return false;
}

function bool IsEmoteCameraMode()
{
    if((PlayerCamera != none) && PlayerCamera.CameraStyle == 'Emote')
    {
        return true;
    }
    return false;
}

function KFInterface_MonsterBoss GetBoss()
{
    local KFPawn_Monster KFBoss;

    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFBoss)
    {
        if(NotEqual_InterfaceInterface(KFInterface_MonsterBoss(KFBoss), (none)))
        {            
            return KFInterface_MonsterBoss(KFBoss);
        }        
    }    
    return none;
}

function SetCameraMode(name NewCamMode)
{
    if((PlayerCamera != none) && PlayerCamera.CameraStyle != NewCamMode)
    {
        if(NewCamMode == 'FreeCam')
        {
            MoveToAdjustedFreeCamPosition();
        }
        if(WorldInfo.Role == ROLE_Authority)
        {
            ClientSetCameraMode(NewCamMode);
        }
        PlayerCamera.CameraStyle = NewCamMode;
    }
}

function MoveToAdjustedFreeCamPosition()
{
    local Vector Loc, pos, HitLocation, HitNormal;
    local Rotator Rot;

    Loc = Location;
    Loc += (PlayerCamera.FreeCamOffset >> Rotation);
    Rot = PlayerCamera.CameraCache.POV.Rotation;
    Rot.Roll = 0;
    pos = Loc + (vector(Rot) * PlayerCamera.FreeCamDistance);
    Trace(HitLocation, HitNormal, pos, Loc, false, vect(12, 12, 12));
    SetLocation(((IsZero(HitLocation)) ? pos : HitLocation));
    SetRotation(Rot);
}

simulated function bool LandingShake()
{
    return true;
}

function ProcessViewRotation(float DeltaTime, out Rotator out_ViewRotation, Rotator DeltaRot)
{
    if((Pawn != none) && KFWeapon(Pawn.Weapon) != none)
    {
        KFWeapon(Pawn.Weapon).WeaponProcessViewRotation(self, DeltaTime, DeltaRot);
    }
    super(PlayerController).ProcessViewRotation(DeltaTime, out_ViewRotation, DeltaRot);
}

simulated function SetBossCamera(KFInterface_MonsterBoss Boss)
{
    if(NotEqual_InterfaceInterface(Boss, (none)) && Boss.GetMonsterPawn().HitFxInfo.bObliterated)
    {
        SetLocation(Boss.GetMonsterPawn().Location);
    }
    SetViewTarget(Boss.GetMonsterPawn());
    if((Role == ROLE_Authority) && !IsLocalPlayerController())
    {
        PlayerCamera.CameraStyle = 'Boss';        
    }
    else
    {
        ClientSetCameraMode('Boss');
    }
}

event ResetCameraMode()
{
    if((PlayerCamera != none) && PlayerCamera.CameraStyle != 'Boss')
    {
        super(PlayerController).ResetCameraMode();
    }
}

simulated function EnableDepthOfField(bool bEnableDOF, optional float StaticDOFDistance, optional float Aperture)
{
    DOFStaticFocusDepth = StaticDOFDistance;
    DOFFocalAperture = Aperture;
    bDOFEnabled = bEnableDOF;
}

unreliable client simulated function ClientEnableDepthOfField(bool bEnableDOF, optional float StaticDOFDistance, optional float Aperture, optional float FocusBlendRate)
{
    EnableDepthOfField(bEnableDOF, StaticDOFDistance, Aperture);
    DOFFocusBlendRate = FocusBlendRate;
}

unreliable client simulated function ClientCustomDepthOfField(bool bEnableDOF, optional float FocalDistance, optional float FocalRadius, optional float SharpRadius, optional float MinBlurSize, optional float MaxNearBlurSize, optional float MaxFarBlurSize, optional float ExpFalloff, optional float BlendInSpeed, optional float BlendOutSpeed)
{
    FocalDistance = 1200;
    FocalRadius = 1200;
    SharpRadius = 1000;
    MinBlurSize = 0;
    MaxNearBlurSize = 4;
    MaxFarBlurSize = 3;
    ExpFalloff = 1;
    BlendInSpeed = 1;
    BlendOutSpeed = 1;
    bGamePlayDOFActive = bEnableDOF;
    DOF_GP_FocalDistance = FocalDistance;
    DOF_GP_FocalRadius = FocalRadius;
    DOF_GP_SharpRadius = SharpRadius;
    DOF_GP_MinBlurSize = MinBlurSize;
    DOF_GP_MaxNearBlurSize = MaxNearBlurSize;
    DOF_GP_MaxFarBlurSize = MaxFarBlurSize;
    DOF_GP_ExpFalloff = ExpFalloff;
    DOF_GP_BlendInSpeed = BlendInSpeed;
    DOF_GP_BlendOutSpeed = BlendOutSpeed;
}

simulated function EnableBlur(bool bEnableBlur, float BlurAmount, float InSpeed, float OutSpeed)
{
    bBlurEnabled = bEnableBlur;
    if(bBlurEnabled)
    {
        BlurStrength = BlurAmount;
    }
    BlurBlendInSpeed = InSpeed;
    BlurBlendOutSpeed = OutSpeed;
}

simulated function EnableIronSights(bool bEnableIronSights)
{
    bIronSightsDOFActive = bEnableIronSights;
}

simulated function EnableReflections(bool bEnabled)
{
    bReflectionsEnabled = bEnabled;
}

exec function Camera(name NewMode)
{
    if((StatsWrite != none) && StatsWrite.HasCheated())
    {
        super(PlayerController).Camera(NewMode);
    }
}

exec function ResetCustomizationCamera()
{
    if(KFPlayerCamera(PlayerCamera) != none)
    {
        KFPlayerCamera(PlayerCamera).CustomizationCam.bInitialize = false;
        KFPlayerCamera(PlayerCamera).CustomizationCam.SetBodyView(0);
    }
}

unreliable client simulated function ClientPlayCameraShake(CameraShake Shake, optional float Scale, optional bool bTryForceFeedback, optional Engine.Camera.ECameraAnimPlaySpace PlaySpace, optional Rotator UserPlaySpaceRot)
{
    Scale = 1;    
    PlaySpace = 0;    
    if(bTryForceFeedback)
    {
        DoForceFeedbackForScreenShake(Shake, Scale);
    }
    if(PlayerCamera != none)
    {
        PlayerCamera.PlayCameraShake(Shake, Scale, PlaySpace, UserPlaySpaceRot);
    }
}

protected simulated function DoForceFeedbackForScreenShake(CameraShake ShakeData, float Scale)
{
    local KFCameraShake KFCS;
    local int ShakeIdx, ShakeLevel;
    local float RotMag, LocMag, FOVMag;

    if(Scale == 0)
    {
        return;
    }
    if((ShakeData.bSingleInstance && PlayerCamera != none) && PlayerCamera.CameraShakeCamMod != none)
    {
        ShakeIdx = PlayerCamera.CameraShakeCamMod.ActiveShakes.Find('SourceShakeName', ShakeData.Name;
        if(((ShakeIdx != -1) && !PlayerCamera.CameraShakeCamMod.ActiveShakes[ShakeIdx].bBlendingOut) && PlayerCamera.CameraShakeCamMod.ActiveShakes[ShakeIdx].OscillatorTimeRemaining > 0)
        {
            return;
        }
    }
    KFCS = KFCameraShake(ShakeData);
    if((KFCS == none) || KFCS.FFWaveform == none)
    {
        if(ShakeData != none)
        {
            RotMag = ShakeData.GetRotOscillationMagnitude() * Scale;
            if(RotMag > 40)
            {
                ShakeLevel = 2;                
            }
            else
            {
                if(RotMag > 20)
                {
                    ShakeLevel = 1;
                }
            }
            if(ShakeLevel < 2)
            {
                LocMag = ShakeData.GetLocOscillationMagnitude() * Scale;
                if(LocMag > 10)
                {
                    ShakeLevel = 2;                    
                }
                else
                {
                    if(LocMag > 5)
                    {
                        ShakeLevel = 1;
                    }
                }
                FOVMag = ShakeData.FOVOscillation.Amplitude * Scale;
                if(ShakeLevel < 2)
                {
                    if(FOVMag > 5)
                    {
                        ShakeLevel = 2;                        
                    }
                    else
                    {
                        if(FOVMag > 2)
                        {
                            ShakeLevel = 1;
                        }
                    }
                }
            }
            if(ShakeLevel == 2)
            {
                if(ShakeData.OscillationDuration <= 0.5)
                {
                    ClientPlayForceFeedbackWaveform(Class'KFGameWaveforms'.default.CameraShakeBigVeryShort);                    
                }
                else
                {
                    if(ShakeData.OscillationDuration <= float(1))
                    {
                        ClientPlayForceFeedbackWaveform(Class'KFGameWaveforms'.default.CameraShakeBigShort);                        
                    }
                    else
                    {
                        ClientPlayForceFeedbackWaveform(Class'KFGameWaveforms'.default.CameraShakeBigLong);
                    }
                }                
            }
            else
            {
                if(ShakeLevel == 1)
                {
                    if(ShakeData.OscillationDuration <= 0.5)
                    {
                        ClientPlayForceFeedbackWaveform(Class'KFGameWaveforms'.default.CameraShakeMediumVeryShort);                        
                    }
                    else
                    {
                        if(ShakeData.OscillationDuration <= float(1))
                        {
                            ClientPlayForceFeedbackWaveform(Class'KFGameWaveforms'.default.CameraShakeMediumShort);                            
                        }
                        else
                        {
                            ClientPlayForceFeedbackWaveform(Class'KFGameWaveforms'.default.CameraShakeMediumLong);
                        }
                    }
                }
            }
        }        
    }
    else
    {
        ClientPlayForceFeedbackWaveform(KFCameraShake(ShakeData).FFWaveform);
    }
}

function bool AdminCmdOk()
{
    if((WorldInfo.NetMode == NM_ListenServer) && LocalPlayer(Player) != none)
    {
        return true;
    }
    if(WorldInfo.TimeSeconds < NextAdminCmdTime)
    {
        return false;
    }
    NextAdminCmdTime = WorldInfo.TimeSeconds + 5;
    return true;
}

exec function AdminLogin(string Password)
{
    if((Password != "") && AdminCmdOk())
    {
        ServerAdminLogin(Password);
    }
}

private reliable server final function ServerAdminLogin(string Password)
{
    if((WorldInfo.Game.AccessControl != none) && AdminCmdOk())
    {
        if(WorldInfo.Game.AccessControl.AdminLogin(self, Password))
        {
            WorldInfo.Game.AccessControl.AdminEntered(self);
        }
    }
}

exec function AdminLogout()
{
    if(AdminCmdOk())
    {
        ServerAdminLogOut();
    }
}

private reliable server final function ServerAdminLogOut()
{
    if(WorldInfo.Game.AccessControl != none)
    {
        if(WorldInfo.Game.AccessControl.AdminLogout(self))
        {
            WorldInfo.Game.AccessControl.AdminExited(self);
        }
    }
}

exec function Admin(string CommandLine)
{
    if(PlayerReplicationInfo.bAdmin)
    {
        ServerAdmin(CommandLine);
    }
}

exec function Kick(string S)
{
    if(!PlayerReplicationInfo.bAdmin)
    {
        LogInternal("Must be admin to kick player");
        return;
    }
    ServerKick(S);
}

exec function KickBan(string S)
{
    if(!PlayerReplicationInfo.bAdmin)
    {
        LogInternal("Must be admin to KickBan player");
        return;
    }
    ServerKickBan(S);
}

reliable server function ServerKickBan(string S)
{
    WorldInfo.Game.KickBan(S);
}

reliable server function ServerKick(string S)
{
    WorldInfo.Game.Kick(S);
}

private reliable server final function ServerAdmin(string CommandLine)
{
    local string Result;

    if(PlayerReplicationInfo.bAdmin)
    {
        Result = ConsoleCommand(CommandLine);
        if(Result != "")
        {
            ClientMessage(Result);
        }
    }
}

reliable client simulated event ClientWasKicked()
{
    if(IsPrimaryPlayer())
    {
        ClientSetProgressMessage(4, Class'KFLocalMessage'.default.KickedFromServerString, Localize("Errors", "ConnectionFailed_Title", "Engine"));        
        ConsoleCommand("DISCONNECT TWFORCED");
    }
}

// Export UKFPlayerController::execPickAimAtTarget(FFrame&, void* const)
private native final function Pawn PickAimAtTarget(out float bestAim, out float bestDist, Vector FireDir, Vector projStart, float MaxRange, optional bool bTargetTeammates)
{
    bTargetTeammates = false;                                
}

final simulated function Pawn GetPickedAimAtTarget(out float bestAim, out float bestDist, Vector FireDir, Vector projStart, float MaxRange, optional bool bTargetTeammates)
{
    bTargetTeammates = false;
    return PickAimAtTarget(bestAim, bestDist, FireDir, projStart, MaxRange, bTargetTeammates);
}

exec function SwitchToBestWeapon(optional bool bForceNewWeapon)
{
    if(((Pawn != none) && Pawn.Weapon != none) && KFWeapon(Pawn.Weapon) != none)
    {
        if(!KFWeapon(Pawn.Weapon).CanSwitchWeapons())
        {
            return;
        }
    }
    super(Controller).SwitchToBestWeapon(bForceNewWeapon);
}

function Rotator GetAdjustedAimFor(Weapon W, Vector StartFireLoc)
{
    local Vector FireDir, HitLocation, HitNormal;
    local Actor BestTarget, HitActor;
    local float bestAim, bestDist;
    local bool bNoAimCorrection, bInstantHit;
    local Rotator BaseAimRot;

    bInstantHit = (W == none) || W.bInstantHit;
    BaseAimRot = ((Pawn != none) ? Pawn.GetBaseAimRotation() : Rotation);
    if(W != none)
    {
        BaseAimRot += WeaponBufferRotation;
    }
    if((Role < ROLE_Authority) && !AimingHelp(bInstantHit))
    {
        return BaseAimRot;
    }
    FireDir = vector(BaseAimRot);
    HitActor = Trace(HitLocation, HitNormal, StartFireLoc + (W.GetTraceRange() * FireDir), StartFireLoc, true);
    if((HitActor != none) && HitActor.bProjTarget)
    {
        BestTarget = HitActor;
        bNoAimCorrection = true;
        bestDist = VSize(BestTarget.Location - Pawn.Location);        
    }
    else
    {
        bestAim = 0.9;
        if(AimingHelp(bInstantHit))
        {
            bestAim = AimHelpDot(bInstantHit);            
        }
        else
        {
            if(bInstantHit)
            {
                bestAim = 1;
            }
        }
        BestTarget = PickAimAtTarget(bestAim, bestDist, FireDir, StartFireLoc, W.WeaponRange);
        if(BestTarget == none)
        {
            return BaseAimRot;
        }
    }
    ShotTarget = Pawn(BestTarget);
    if(!AimingHelp(bInstantHit))
    {
        return BaseAimRot;
    }
    if(!bNoAimCorrection && W != none)
    {
        ProcessAimCorrection(ShotTarget, KFWeapon(W), StartFireLoc, BaseAimRot);
    }
    return BaseAimRot;
}

function ProcessAimCorrection(Pawn Target, KFWeapon W, Vector StartLoc, out Rotator AimRot)
{
    local Vector AimLoc, TargetLoc, HeadLoc;
    local Vector2D Offset;
    local float Distance, AimCorrection;
    local KFPawn KFP;

    if((W == none) || W.AimCorrectionSize <= float(0))
    {
        return;
    }
    HeadLoc = Target.Mesh.GetBoneLocation('head');
    Distance = VSize(HeadLoc - StartLoc);
    if(IsZero(HeadLoc) || Distance > MaxAimCorrectionDistance)
    {
        return;
    }
    AimLoc = StartLoc + (vector(AimRot) * Distance);
    TargetLoc = HeadLoc;
    TargetLoc.Z = AimLoc.Z;
    Offset.X = PointDistToLine(AimLoc, TargetLoc - StartLoc, StartLoc);
    TargetLoc = HeadLoc;
    TargetLoc.X = AimLoc.X;
    TargetLoc.Y = AimLoc.Y;
    Offset.Y = PointDistToLine(AimLoc, TargetLoc - StartLoc, StartLoc);
    AimCorrection = FMin(W.AimCorrectionSize, 35);
    if(self.WorldInfo.TimeDilation < 1)
    {
        AimCorrection *= 0.5;
    }
    if((Offset.X <= AimCorrection) && Offset.Y <= AimCorrection)
    {
        KFP = KFPawn(Target);
        if((KFP != none) && KFP.IsHeadless())
        {
            return;
        }
        AimRot = rotator(HeadLoc - StartLoc);
    }
}

reliable server function ServerThrowOtherWeapon(Weapon W)
{
    if(((W != none) && W.Instigator == Pawn) && W.CanThrow())
    {
        Pawn.TossInventory(W);
    }
}

event TriggerWeaponContentLoad(class<KFWeapon> WeaponClass)
{
    ClientTriggerWeaponContentLoad(WeaponClass);
}

reliable client simulated function ClientTriggerWeaponContentLoad(class<KFWeapon> WeaponClass)
{
    if(WeaponClass != none)
    {
        WeaponClass.static.TriggerAsyncContentLoad(WeaponClass);
    }
}

simulated event OnWeaponAsyncContentLoaded(class<KFWeapon> WeaponClass)
{
    local KFPawn_Human KFPH;
    local KFDroppedPickup KFDP;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(WeaponClass == KFPH.WeaponClassForAttachmentTemplate)
        {
            KFPH.SetWeaponAttachmentFromWeaponClass(WeaponClass);
        }        
    }    
    foreach WorldInfo.AllActors(Class'KFDroppedPickup', KFDP)
    {
        if((WeaponClass == KFDP.InventoryClass) && KFDP.MyMeshComp == none)
        {
            KFDP.SetPickupMesh(WeaponClass.default.DroppedPickupMesh);
        }        
    }    
}

function HandleWalking()
{
    local bool bShouldSprint;

    if(Pawn != none)
    {
        if(Pawn.Weapon != none)
        {
            Pawn.SetWalking(Pawn.Weapon.ShouldOwnerWalk());            
        }
        else
        {
            Pawn.SetWalking(false);
        }
        bShouldSprint = (bRun != 0) && !IsZero(Pawn.Acceleration);
        if(bShouldSprint)
        {
            bDuck = 0;
        }
        KFPawn(Pawn).SetSprinting(bShouldSprint);
    }
}

function CheckJumpOrDuck()
{
    if(Pawn == none)
    {
        return;
    }
    if(bPressedJump)
    {
        Pawn.DoJump(bUpdating);
    }
    if((Pawn.Physics != 2) && Pawn.bCanCrouch)
    {
        Pawn.ShouldCrouch((bDuck != 0) && bRun == 0);
    }
}

function PauseMoveInput(optional float PauseTime)
{
    PauseTime = 0.5;
    if(((IsLocalPlayerController()) && PauseTime > 0) && PauseMoveInputTimeLeft == 0)
    {
        IgnoreMoveInput(true);
        PauseMoveInputTimeLeft = PauseTime;
    }
}

function TickPauseMoveInput(float DeltaTime)
{
    local float RealDeltaTime;

    if(PauseMoveInputTimeLeft > 0)
    {
        RealDeltaTime = DeltaTime / WorldInfo.TimeDilation;
        PauseMoveInputTimeLeft -= RealDeltaTime;
        if(PauseMoveInputTimeLeft <= float(0))
        {
            IgnoreMoveInput(false);
            PauseMoveInputTimeLeft = 0;
        }
    }
}

unreliable server function ServerMove(float TimeStamp, Vector InAccel, Vector ClientLoc, byte MoveFlags, byte ClientRoll, int View, optional int FreeAimRot)
{
    local Rotator NewFreeAimRot;
    local int FreeAimPitch, FreeAimYaw;

    if((Pawn != none) && Pawn.Weapon != none)
    {
        FreeAimPitch = FreeAimRot & 65535;
        FreeAimYaw = FreeAimRot >> 16;
        NewFreeAimRot.Pitch = FreeAimPitch;
        NewFreeAimRot.Yaw = FreeAimYaw;
        WeaponBufferRotation = NewFreeAimRot;
    }
    super(PlayerController).ServerMove(TimeStamp, InAccel, ClientLoc, MoveFlags, ClientRoll, View, FreeAimRot);
}

unreliable server function DualServerMove(float TimeStamp0, Vector InAccel0, byte PendingFlags, int View0, float TimeStamp, Vector InAccel, Vector ClientLoc, byte NewFlags, byte ClientRoll, int View, optional int FreeAimRot0, optional int FreeAimRot)
{
    ServerMove(TimeStamp0, InAccel0, vect(1, 2, 3), PendingFlags, ClientRoll, View0, FreeAimRot0);
    ServerMove(TimeStamp, InAccel, ClientLoc, NewFlags, ClientRoll, View, FreeAimRot);
}

function CallServerMove(SavedMove NewMove, Vector ClientLoc, byte ClientRoll, int View, SavedMove OldMove)
{
    local Vector BuildAccel;
    local byte OldAccelX, OldAccelY, OldAccelZ;
    local int FreeAimRot;

    FreeAimRot = ((WeaponBufferRotation.Yaw & 65535) << 16) + (WeaponBufferRotation.Pitch & 65535);
    if(OldMove != none)
    {
        BuildAccel = (0.05 * OldMove.Acceleration) + vect(0.5, 0.5, 0.5);
        OldAccelX = byte(CompressAccel(int(BuildAccel.X)));
        OldAccelY = byte(CompressAccel(int(BuildAccel.Y)));
        OldAccelZ = byte(CompressAccel(int(BuildAccel.Z)));
        OldServerMove(OldMove.TimeStamp, OldAccelX, OldAccelY, OldAccelZ, OldMove.CompressedFlags());
    }
    if(PendingMove != none)
    {
        DualServerMove(PendingMove.TimeStamp, PendingMove.Acceleration * float(10), PendingMove.CompressedFlags(), ((PendingMove.Rotation.Yaw & 65535) << 16) + (PendingMove.Rotation.Pitch & 65535), NewMove.TimeStamp, NewMove.Acceleration * float(10), ClientLoc, NewMove.CompressedFlags(), ClientRoll, View, ((PendingMove.WeaponBufferRotation.Yaw & 65535) << 16) + (PendingMove.WeaponBufferRotation.Pitch & 65535), FreeAimRot);        
    }
    else
    {
        ServerMove(NewMove.TimeStamp, NewMove.Acceleration * float(10), ClientLoc, NewMove.CompressedFlags(), ClientRoll, View, FreeAimRot);
    }
    if((PlayerCamera != none) && PlayerCamera.bUseClientSideCameraUpdates)
    {
        PlayerCamera.bShouldSendClientSideCameraUpdate = true;
    }
}

function float GetServerMoveDeltaTime(float TimeStamp)
{
    MaxResponseTime = default.MaxResponseTime * WorldInfo.TimeDilation;
    return super(PlayerController).GetServerMoveDeltaTime(TimeStamp);
}

function SetForceLookAtPawn(KFPawn P)
{
    if(IsLocalController())
    {
        if(P == none)
        {
            ForceLookAtPawn = none;
            bLockToForceLookAtPawn = false;            
        }
        else
        {
            ForceLookAtPawn = P;
            bLockToForceLookAtPawn = true;
        }
    }
}

function ModifyUpdateRotation(float DeltaTime, out Rotator DeltaRot)
{
    local KFPlayerInput KFInput;

    KFInput = KFPlayerInput(PlayerInput);
    if(((Pawn != none) && ForceLookAtPawn != none) && (ForceLookAtPawnTime >= float(0)) || bLockToForceLookAtPawn)
    {
        if(!bLockToForceLookAtPawn)
        {
            ForceLookAtPawnTime -= DeltaTime;
        }
        KFInput.ApplyForceLookAtPawn(DeltaTime, DeltaRot.Yaw, DeltaRot.Pitch);
        if(!bLockToForceLookAtPawn && ForceLookAtPawnTime <= float(0))
        {
            ForceLookAtPawn = none;
        }        
    }
    else
    {
        if(((Pawn != none) && KFInput.CurrentAutoTarget != none) && KFInput.AutoTargetTimeLeft >= float(0))
        {
            KFInput.ApplyAutoTarget(DeltaTime, KFWeapon(Pawn.Weapon), DeltaRot.Yaw, DeltaRot.Pitch);            
        }
        else
        {
            if((KFInput.IsAimAssistAdhesionEnabled() && Pawn != none) && (PlayerInput.aForward != float(0)) || PlayerInput.aStrafe != float(0))
            {
                KFInput.ApplyTargetAdhesion(DeltaTime, KFWeapon(Pawn.Weapon), DeltaRot.Yaw, DeltaRot.Pitch);
            }
        }
    }
}

simulated function StartAutoTargeting()
{
    local KFPlayerInput KFInput;

    if(!IsLocalController())
    {
        return;
    }
    if(!PlayerInput.bUsingGamepad)
    {
        return;
    }
    KFInput = KFPlayerInput(PlayerInput);
    KFInput.InitAutoTarget();
}

function bool AimingHelp(bool bInstantHit)
{
    if((((PlayerInput != none) && PlayerInput.bUsingGamepad) && MaxAimCorrectionDistance > 0) && IsLocalController())
    {
        return true;
    }
    return false;
}

static simulated function KFInterface_Usable GetCurrentUsableActor(Pawn P, optional bool bUseOnFind)
{
    local KFInterface_Usable UsableActor;
    local Actor A, BestActor;
    local KFInterface_Usable BestUsableActor;
    local int InteractionIndex, BestInteractionIndex;

    bUseOnFind = false;
    BestInteractionIndex = -1;
    if(P != none)
    {
        foreach P.TouchingActors(Class'Actor', A)
        {
            UsableActor = KFInterface_Usable(A);
            if(NotEqual_InterfaceInterface(UsableActor, (none)) && UsableActor.GetIsUsable(P))
            {
                InteractionIndex = UsableActor.GetInteractionIndex(P);
                if(InteractionIndex > BestInteractionIndex)
                {
                    BestInteractionIndex = InteractionIndex;
                    BestUsableActor = UsableActor;
                    BestActor = A;
                }
            }            
        }        
        if(NotEqual_InterfaceInterface(BestUsableActor, (none)))
        {
            if(bUseOnFind)
            {
                BestActor.UsedBy(P);
            }
            return BestUsableActor;
        }
    }
    return none;
}

function bool TriggerInteracted()
{
    if(super(PlayerController).TriggerInteracted())
    {
        return true;
    }
    if(Pawn != none)
    {
        GetCurrentUsableActor(Pawn, true);
    }
    return false;
}

function GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, out array<Trigger> out_useList)
{
    local int Idx;
    local Vector CameraLoc, CameraDir;
    local Rotator CameraRot;
    local Trigger checkTrigger;
    local SeqEvent_Used UseSeq;
    local float aimEpsilon;

    if(Pawn == none)
    {
        return;
    }
    foreach Pawn.CollidingActors(Class'Trigger', checkTrigger, interactDistanceToCheck)
    {
        Idx = 0;
        J0x56:

        if(Idx < checkTrigger.GeneratedEvents.Length)
        {
            UseSeq = SeqEvent_Used(checkTrigger.GeneratedEvents[Idx]);
            if(UseSeq == none)
            {                
            }
            else
            {
                if(IsZero(CameraDir))
                {
                    GetPlayerViewPoint(CameraLoc, CameraRot);
                    CameraDir = vector(CameraRot);
                }
                aimEpsilon = ((UseSeq.bAimToInteract) ? 0.98 : minDot);
                if((((!bUsuableOnly || checkTrigger.GeneratedEvents[Idx].CheckActivate(checkTrigger, Pawn, true)) && VSizeSq(Pawn.Location - checkTrigger.Location) <= Square(UseSeq.InteractDistance)) && (Normal(checkTrigger.Location - CameraLoc) Dot CameraDir) >= aimEpsilon) && !UseSeq.bUseLineCheck || FastTrace(checkTrigger.Location, CameraLoc))
                {
                    out_useList[out_useList.Length] = checkTrigger;
                    Idx = checkTrigger.GeneratedEvents.Length;
                }
            }
            ++ Idx;
            goto J0x56;
        }        
    }    
}

reliable client simulated event ReceiveLocalizedMessage(class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject)
{
    local string TempMessage;

    if((WorldInfo.NetMode == NM_DedicatedServer) || WorldInfo.GRI == none)
    {
        return;
    }
    if((Message == Class'KFLocalMessage_Game') && myGfxHUD != none)
    {
        TempMessage = Class'KFLocalMessage_Game'.static.GetString(Switch, true, RelatedPRI_1, RelatedPRI_2, OptionalObject);
        if(TempMessage != "")
        {
            myGfxHUD.ShowNonCriticalMessage(TempMessage);
            if((Switch == 27) || Switch == 28)
            {
                if(Switch == 28)
                {
                    if((RelatedPRI_2.GetTeamNum() == 255) && RelatedPRI_2.UniqueId == PlayerReplicationInfo.UniqueId)
                    {
                        Class'KFMusicStingerHelper'.static.PlayZedPlayerSuicideStinger(self);
                    }
                    if((RelatedPRI_2.GetTeamNum() == Class'KFTeamInfo_Human'.default.TeamIndex) && RelatedPRI_2.GetTeamNum() == PlayerReplicationInfo.GetTeamNum())
                    {
                        if(RelatedPRI_2.UniqueId == PlayerReplicationInfo.UniqueId)
                        {
                            ReceiveLocalizedMessage(Class'KFLocalMessage_Priority', 11, RelatedPRI_1, RelatedPRI_2, OptionalObject);                            
                        }
                        else
                        {
                            Class'KFMusicStingerHelper'.static.PlayTeammateDeathStinger(self);
                        }
                    }                    
                }
                else
                {
                    if(Switch == 27)
                    {
                        if((RelatedPRI_2.GetTeamNum() == Class'KFTeamInfo_Human'.default.TeamIndex) && RelatedPRI_2.GetTeamNum() == PlayerReplicationInfo.GetTeamNum())
                        {
                            if(RelatedPRI_2.UniqueId == PlayerReplicationInfo.UniqueId)
                            {
                                ReceiveLocalizedMessage(Class'KFLocalMessage_Priority', 11, RelatedPRI_1, RelatedPRI_2, OptionalObject);                                
                            }
                            else
                            {
                                Class'KFMusicStingerHelper'.static.PlayTeammateDeathStinger(self);
                            }
                        }
                    }
                }
                myGfxHUD.ShowKillMessage(RelatedPRI_1, RelatedPRI_2, true, OptionalObject);
            }
        }
        if((Switch == 3) || Switch == 22)
        {
            PlayAkEvent(Class'KFPerk_Support'.static.GetReceivedAmmoSound());            
        }
        else
        {
            if(Switch == 4)
            {
                PlayAkEvent(Class'KFPerk_Support'.static.GetReceivedArmorSound());                
            }
            else
            {
                if(Switch == 5)
                {
                    PlayAkEvent(Class'KFPerk_Support'.static.GetReceivedAmmoAndArmorSound());
                }
            }
        }        
    }
    else
    {
        if((Message == Class'KFLocalMessage_PlayerKills') && myGfxHUD != none)
        {
            if((Switch == 0) || bShowKillTicker && Switch == 1)
            {
                if(Switch == 0)
                {
                    if(RelatedPRI_2.GetTeamNum() == Class'KFTeamInfo_Human'.default.TeamIndex)
                    {
                        if(RelatedPRI_1.GetTeamNum() == 255)
                        {
                            Class'KFMusicStingerHelper'.static.PlayZedKillHumanStinger(self);                            
                        }
                        else
                        {
                            if(RelatedPRI_2.GetTeamNum() == PlayerReplicationInfo.GetTeamNum())
                            {
                                if(RelatedPRI_2.UniqueId == PlayerReplicationInfo.UniqueId)
                                {
                                    Class'KFMusicStingerHelper'.static.PlayPlayerDiedStinger(self);                                    
                                }
                                else
                                {
                                    Class'KFMusicStingerHelper'.static.PlayTeammateDeathStinger(self);
                                }
                            }
                        }                        
                    }
                    else
                    {
                        if(RelatedPRI_2.UniqueId == PlayerReplicationInfo.UniqueId)
                        {
                            Class'KFMusicStingerHelper'.static.PlayZedPlayerKilledStinger(self);
                        }
                    }
                }
                myGfxHUD.ShowKillMessage(RelatedPRI_1, RelatedPRI_2, false, OptionalObject);
            }            
        }
        else
        {
            super(PlayerController).ReceiveLocalizedMessage(Message, Switch, RelatedPRI_1, RelatedPRI_2, OptionalObject);
        }
    }
}

function SetPendingInteractionMessage()
{
    SetTimer(0.01, false, 'UpdatePendingInteractionMessage');
}

function UpdatePendingInteractionMessage()
{
    if(Pawn != none)
    {
        UpdateInteractionMessages(Pawn);
    }
}

static function UpdateInteractionMessages(Actor InteractingActor)
{
    local KFInterface_Usable UsableActor;
    local Pawn P;
    local PlayerController PC;

    P = Pawn(InteractingActor);
    if(P != none)
    {
        PC = PlayerController(P.Controller);
        if((PC != none) && PC.Role == ROLE_Authority)
        {
            UsableActor = GetCurrentUsableActor(P);
            if(NotEqual_InterfaceInterface(UsableActor, (none)))
            {
                PC.SetTimer(1, true, 'CheckCurrentUsableActor', PC);
                PC.ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', UsableActor.GetInteractionIndex(P), none, none, bool(UsableActor));                
            }
            else
            {
                PC.ClearTimer('CheckCurrentUsableActor', PC);
                PC.ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 0);
            }
        }
    }
}

function CheckCurrentUsableActor()
{
    local KFInterface_Usable UsableActor;

    UsableActor = GetCurrentUsableActor(Pawn);
    if(NotEqual_InterfaceInterface(UsableActor, (none)))
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', UsableActor.GetInteractionIndex(Pawn));        
    }
    else
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 0);
        ClearTimer('CheckCurrentUsableActor');
    }
}

simulated function PlayScreenHitFX(class<KFDamageType> KFDT, bool bShowPainEffect)
{
    PlayScreenEffects(KFDT);
    PlayScreenMaterialEffects(KFDT, bShowPainEffect);
}

simulated function PlayScreenEffects(class<KFDamageType> KFDT)
{
    local class<EmitterCameraLensEffectBase> LensEffectTemplate;
    local KFPerk MyKFPerk;

    MyKFPerk = GetPerk();
    if(((Pawn != none) && Pawn.IsFirstPerson()) && MyKFPerk != none)
    {
        if((GetEffectTimeRemaining(KFDT)) <= float(0))
        {
            LensEffectTemplate = MyKFPerk.GetPerkLensEffect(KFDT);
            if(LensEffectTemplate != none)
            {
                ClientSpawnCameraLensEffect(LensEffectTemplate);
            }
        }
    }
}

simulated function PlayScreenMaterialEffects(class<KFDamageType> KFDT, bool bShowPainEffect)
{
    if(bShowPainEffect)
    {
        PainEffectTimeRemaining = PainEffectDuration;
    }
    if(KFDT.default.ScreenMaterialName != 'None')
    {
        switch(KFDT.default.ScreenMaterialName)
        {
            case EffectSirenScreamParamName:
                if((LEDEffectsManager != none) && SirenScreamEffectTimeRemaining == float(0))
                {
                    LEDEffectsManager.PlayEffectSiren(default.SonicScreamEffectDuration);
                }
                SirenScreamEffectTimeRemaining = default.SonicScreamEffectDuration;
                CheckForReducedSirenScreamEffect();
                break;
            case EffectBloatsPukeParamName:
                if((LEDEffectsManager != none) && BloatPukeEffectTimeRemaining == float(0))
                {
                    LEDEffectsManager.PlayEffectPuke(default.BloatPukeEffectDuration);
                }
                BloatPukeEffectTimeRemaining = default.BloatPukeEffectDuration;
                break;
            case EffectHealParamName:
                if((LEDEffectsManager != none) && HealEffectTimeRemaining == float(0))
                {
                    LEDEffectsManager.PlayEffectHeal(default.HealEffectDuration);
                }
                HealEffectTimeRemaining = default.HealEffectDuration;
                break;
            case EffectFlashBangParamName:
                if((LEDEffectsManager != none) && FlashBangEffectDuration == float(0))
                {
                    LEDEffectsManager.PlayEffectFlashbang(default.FlashBangEffectDuration);
                }
                FlashBangEffectTimeRemaining = default.FlashBangEffectDuration;
                break;
            default:
                break;
        }
    }
    else
    {
    }
}

simulated function CheckForReducedSirenScreamEffect()
{
    local KFPerk MyPerk;

    MyPerk = GetPerk();
    if((MyPerk != none) && GameplayPostProcessEffectMIC != none)
    {
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectSirenScreamParamName, MyPerk.GetSirenScreamStrength());
    }
}

simulated function float GetEffectTimeRemaining(class<KFDamageType> KFDT)
{
    switch(KFDT.default.ScreenMaterialName)
    {
        case EffectSirenScreamParamName:
            return SirenScreamEffectTimeRemaining;
            break;
        case EffectBloatsPukeParamName:
            return BloatPukeEffectTimeRemaining;
            break;
        case EffectFlashBangParamName:
            return FlashBangEffectTimeRemaining;
            break;
        default:
            break;
    }
    return 0;
}

event PlayerTick(float DeltaTime)
{
    super(PlayerController).PlayerTick(DeltaTime);
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        UpdateLowHealthEffect(DeltaTime);
        UpdateZEDTimeEffects(DeltaTime);
        UpdateDOF(DeltaTime);
        UpdateFullscreenBlur(DeltaTime);
        if(ExplosionEarRingTimeRemaining > float(0))
        {
            UpdateEarRingEffect(DeltaTime);
        }
        if(PainEffectTimeRemaining > float(0))
        {
            UpdateScreenEffect(DeltaTime, EffectPainParamName, PainEffectTimeRemaining, default.PainEffectDuration);
        }
        if(HealEffectTimeRemaining > float(0))
        {
            UpdateScreenEffect(DeltaTime, EffectHealParamName, HealEffectTimeRemaining, default.HealEffectDuration);
        }
        if(SirenScreamEffectTimeRemaining > float(0))
        {
            UpdateScreenEffect(DeltaTime, EffectSirenScreamParamName, SirenScreamEffectTimeRemaining, default.SonicScreamEffectDuration);
        }
        if(BloatPukeEffectTimeRemaining > float(0))
        {
            UpdateScreenEffect(DeltaTime, EffectBloatsPukeParamName, BloatPukeEffectTimeRemaining, default.BloatPukeEffectDuration);
        }
        if(FlashBangEffectTimeRemaining > float(0))
        {
            UpdateScreenEffect(DeltaTime, EffectFlashBangParamName, FlashBangEffectTimeRemaining, default.FlashBangEffectDuration);
        }
        if(GameplayPostProcessEffects != none)
        {
            GameplayPostProcessEffects.bShowInGame = ShouldDisplayGameplayPostProcessFX();
        }
    }
    if(PauseMoveInputTimeLeft > 0)
    {
        TickPauseMoveInput(DeltaTime);
    }
}

function SetGrabEffect(bool bValue, optional bool bPlayerZed, optional bool bSkipMessage)
{
    bGrabEffectIsActive = bValue;
    if(!bSkipMessage && bGrabEffectIsActive)
    {
        if(bPlayerZed)
        {
            ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 14);            
        }
        else
        {
            ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 13);
        }        
    }
    else
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 0);
    }
    if(GameplayPostProcessEffectMIC != none)
    {
        if(bGrabEffectIsActive)
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue('Effect_Grabbed', 1);            
        }
        else
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue('Effect_Grabbed', 0);
        }
    }
}

function SetGrabEffectEMP(bool bActive, optional bool bPlayerZed, optional bool bSkipMessage)
{
    local class<EmitterCameraLensEffectBase> LensEffectTemplate;

    if(!bSkipMessage && bActive)
    {
        LensEffectTemplate = Class'KFCameraLensEmit_EMP';
        if(LensEffectTemplate != none)
        {
            ClientSpawnCameraLensEffect(LensEffectTemplate);
        }
        ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 15);        
    }
    else
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 0);
    }
}

function SetPerkEffect(bool bValue)
{
    bPerkEffectIsActive = bValue;
    if(GameplayPostProcessEffectMIC != none)
    {
        if(bPerkEffectIsActive)
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectPerkParamName, 1);            
        }
        else
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectPerkParamName, 0);
        }
    }
}

function InitGameplayPostProcessFX()
{
    local MaterialInstanceConstant GameplayPPMIC;

    if(LocalPlayer(Player) != none)
    {
        GameplayPostProcessEffects = MaterialEffect(LocalPlayer(Player).PlayerPostProcess.FindPostProcessEffect(GameplayPostProcessEffectName));
        if(GameplayPostProcessEffects == none)
        {
            WarnInternal("[GameplayFX] Could not cache gameplay post process effect. Gameplay post-processing will be disabled");
        }
        GameplayPPMIC = MaterialInstanceConstant(GameplayPostProcessEffects.Material);
        if(GameplayPPMIC != none)
        {
            GameplayPostProcessEffectMIC = new Class'MaterialInstanceConstant';
            GameplayPostProcessEffectMIC.SetParent(GameplayPPMIC);
            GameplayPostProcessEffects.Material = GameplayPostProcessEffectMIC;            
        }
        else
        {
            WarnInternal("[GameplayFX] Could not find MIC in gameplay post process effect. Gameplay post-processing will be disabled");
        }
        ResetGameplayPostProcessFX();
    }
}

function ResetGameplayPostProcessFX()
{
    if(GameplayPostProcessEffectMIC != none)
    {
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectPainParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectLowHealthParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectZedTimeParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectNightVisionParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectSirenScreamParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectBloatsPukeParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectHealParamName, 0);
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectPerkParamName, 0);
    }
    if(GameplayPostProcessEffects != none)
    {
        GameplayPostProcessEffects.bShowInGame = false;
    }
    bNightVisionActive = false;
    bGamePlayDOFActive = false;
    bPerkEffectIsActive = false;
}

function bool ShouldDisplayGameplayPostProcessFX()
{
    return ((((((((bPerkEffectIsActive || bGrabEffectIsActive) || PainEffectTimeRemaining > 0) || (Pawn != none) && Pawn.Health <= default.LowHealthThreshold) || HealEffectTimeRemaining > 0) || CurrentZEDTimeEffectIntensity > 0) || bNightVisionActive) || SirenScreamEffectTimeRemaining > 0) || BloatPukeEffectTimeRemaining > 0) || FlashBangEffectTimeRemaining > 0;
}

function UpdateScreenEffect(float DeltaTime, name EffectName, out float TimeRemaining, float Duration)
{
    local float Intensity;

    if(TimeRemaining > 0)
    {
        if(TimeRemaining > DeltaTime)
        {
            TimeRemaining -= DeltaTime;
            Intensity = FClamp(TimeRemaining / Duration, 0, 1);            
        }
        else
        {
            TimeRemaining = 0;
            Intensity = 0;
        }
        if(GameplayPostProcessEffectMIC != none)
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectName, Intensity);
        }
    }
}

function SetZedTimeEffectIntensity(float TargetWeight, optional float BlendTime)
{
    BlendTime = 0.5;
    TargetZEDTimeEffectIntensity = TargetWeight;
    ZEDTimeEffectInterpTimeRemaining = BlendTime;
}

function UpdateZEDTimeEffects(float DeltaTime)
{
    local KFPawn KFP;
    local float BlendDelta, ZedTimeAudioModifier, RealDeltaTime, OldZEDTimeEffectIntensity;
    local MaterialInstanceConstant WorldMIC;

    if(TargetZEDTimeEffectIntensity == PartialZEDTimeEffectIntensity)
    {
        KFP = KFPawn(Pawn);
        if((KFP != none) && !KFP.bUnaffectedByZedTime)
        {
            ClientEnterZedTime(false);
        }
    }
    if(WorldInfo.TimeDilation != LastTimeDilation)
    {
        ZedTimeAudioModifier = float(Max(int((float(1) - WorldInfo.TimeDilation) * float(100)), 0));
        SetRTPCValue('ZEDTime_Modifier', ZedTimeAudioModifier, true);
        LastTimeDilation = WorldInfo.TimeDilation;
    }
    OldZEDTimeEffectIntensity = CurrentZEDTimeEffectIntensity;
    if(ZEDTimeEffectInterpTimeRemaining > float(0))
    {
        RealDeltaTime = DeltaTime / WorldInfo.TimeDilation;
        BlendDelta = TargetZEDTimeEffectIntensity - CurrentZEDTimeEffectIntensity;
        CurrentZEDTimeEffectIntensity += ((BlendDelta / ZEDTimeEffectInterpTimeRemaining) * RealDeltaTime);
        ZEDTimeEffectInterpTimeRemaining -= RealDeltaTime;        
    }
    else
    {
        ZEDTimeEffectInterpTimeRemaining = 0;
        CurrentZEDTimeEffectIntensity = TargetZEDTimeEffectIntensity;
    }
    if(OldZEDTimeEffectIntensity != CurrentZEDTimeEffectIntensity)
    {
        if(GameplayPostProcessEffectMIC != none)
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectZedTimeParamName, CurrentZEDTimeEffectIntensity);
        }
        foreach WorldInfo.ZedTimeMICs(WorldMIC,)
        {
            WorldMIC.SetScalarParameterValue(EffectZedTimeParamName, CurrentZEDTimeEffectIntensity);            
        }        
    }
}

simulated function PlayEarRingEffect(float Intensity)
{
    ExplosionEarRingDuration = 10;
    if(ExplosionEarRingTimeRemaining <= 1)
    {
        ExplosionEarRingTimeRemaining = ExplosionEarRingDuration * Intensity;
        ExplosionEarRingDelay = 0.5;
        if(!bNoEarRingingSound && EarsRingingPlayEvent != none)
        {
            PlaySoundBase(EarsRingingPlayEvent, true);
        }
    }
}

simulated function UpdateEarRingEffect(float DeltaTime)
{
    if(ExplosionEarRingDelay > 0)
    {
        ExplosionEarRingEffectIntensity = (1 - (ExplosionEarRingDelay / 0.5)) * 100;
        ExplosionEarRingDelay -= DeltaTime;
        SetRTPCValue('GRENADEFX', ExplosionEarRingEffectIntensity, true);
        return;
    }
    if(ExplosionEarRingTimeRemaining > float(0))
    {
        ExplosionEarRingEffectIntensity = (ExplosionEarRingTimeRemaining / ExplosionEarRingDuration) * 100;
        ExplosionEarRingTimeRemaining -= DeltaTime;
        if(((ExplosionEarRingTimeRemaining <= float(0)) || Pawn == none) || Pawn.Health <= 0)
        {
            ExplosionEarRingTimeRemaining = 0;
            ExplosionEarRingEffectIntensity = 0;
            if(EarsRingingStopEvent != none)
            {
                PlaySoundBase(EarsRingingStopEvent, true);
            }
        }
        SetRTPCValue('GRENADEFX', ExplosionEarRingEffectIntensity, true);
    }
}

function UpdateLowHealthEffect(float DeltaTime)
{
    local bool bLowHealth;

    if(Pawn != none)
    {
        bLowHealth = (Pawn.Health > 0) && Pawn.Health <= default.LowHealthThreshold;
        if(GameplayPostProcessEffectMIC != none)
        {
            GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectLowHealthParamName, ((bLowHealth) ? 1 : 0));
        }
        if(bLowHealth)
        {
            if(!bPlayingLowHealthSFX)
            {
                PostAkEvent(LowHealthStartEvent);
                bPlayingLowHealthSFX = true;
                if(LEDEffectsManager != none)
                {
                    LEDEffectsManager.PlayEffectLowHealth();
                }
            }            
        }
        else
        {
            if(bPlayingLowHealthSFX)
            {
                PostAkEvent(LowHealthStopEvent);
                bPlayingLowHealthSFX = false;
                if(LEDEffectsManager != none)
                {
                    LEDEffectsManager.LedRestoreLighting();
                }
            }
        }
        SetRTPCValue('Health', float(Pawn.Health), true);
    }
}

function ToggleHealthEffects(bool bEnableFX)
{
    if(!bEnableFX)
    {
        if(bPlayingLowHealthSFX)
        {
            PostAkEvent(LowHealthStopEvent);
            bPlayingLowHealthSFX = false;
        }
        SetRTPCValue('Health', 100, true);
    }
}

simulated function SetAmplificationLightEnabled(bool bEnabled)
{
    if(bEnabled)
    {
        if(AmplificationLight != none)
        {
            AmplificationLight.DetachFromAny();
            AmplificationLight = none;
        }
        if(AmplificationLightTemplate != none)
        {
            AmplificationLight = new (self) Class'PointLightComponent' (AmplificationLightTemplate);
        }
        if(AmplificationLight != none)
        {
            Pawn.AttachComponent(AmplificationLight);
        }        
    }
    else
    {
        if(AmplificationLight != none)
        {
            AmplificationLight.DetachFromAny();
            AmplificationLight = none;
        }
    }
}

simulated function SetNightVision(bool bEnabled)
{
    if(GameplayPostProcessEffectMIC != none)
    {
        bNightVisionActive = bEnabled;
        GameplayPostProcessEffectMIC.SetScalarParameterValue(EffectNightVisionParamName, ((bNightVisionActive) ? 1 : 0));
        if(bEnabled)
        {
            bGamePlayDOFActive = true;
            DOF_GP_BlendInSpeed = DOF_NVG_BlendInSpeed;
            DOF_GP_BlendOutSpeed = DOF_NVG_BlendOutSpeed;
            DOF_GP_FocalDistance = NVG_DOF_FocalDistance;
            DOF_GP_SharpRadius = NVG_DOF_SharpRadius;
            DOF_GP_FocalRadius = NVG_DOF_FocalRadius;
            DOF_GP_MinBlurSize = NVG_DOF_MinBlurSize;
            DOF_GP_MaxNearBlurSize = NVG_DOF_MaxNearBlurSize;
            DOF_GP_MaxFarBlurSize = NVG_DOF_MaxFarBlurSize;
            DOF_GP_ExpFalloff = NVG_DOF_ExpFalloff;            
        }
        else
        {
            bGamePlayDOFActive = false;
        }
    }
    if(Pawn != none)
    {
        if((NVGLight == none) && NVGLightTemplate != none)
        {
            NVGLight = new (self) Class'PointLightComponent' (NVGLightTemplate);
        }
        if(bEnabled)
        {
            Pawn.AttachComponent(NVGLight);
            NVGLight.SetEnabled(bEnabled);            
        }
        else
        {
            Pawn.DetachComponent(NVGLight);
            NVGLight.SetEnabled(bEnabled);
        }
    }
}

reliable client simulated function ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
    bCinematicMode = bInCinematicMode;
    if(bCinematicMode)
    {
        bGamePlayDOFActive = true;
        DOF_GP_BlendInSpeed = DOF_Cinematic_BlendInSpeed;
        DOF_GP_BlendOutSpeed = DOF_Cinematic_BlendOutSpeed;
        DOF_GP_FocalDistance = DOF_Cinematic_FocalDistance;
        DOF_GP_SharpRadius = DOF_Cinematic_SharpRadius;
        DOF_GP_FocalRadius = DOF_Cinematic_FocalRadius;
        DOF_GP_MinBlurSize = DOF_Cinematic_MinBlurSize;
        DOF_GP_MaxNearBlurSize = DOF_Cinematic_MaxNearBlurSize;
        DOF_GP_MaxFarBlurSize = DOF_Cinematic_MaxFarBlurSize;
        DOF_GP_ExpFalloff = DOF_Cinematic_ExpFalloff;        
    }
    else
    {
        bGamePlayDOFActive = false;
    }
    if((myHUD != none) && bAffectsHUD)
    {
        myHUD.bShowHUD = !bCinematicMode;
    }
    if(bAffectsMovement)
    {
        IgnoreMoveInput(bCinematicMode);
    }
    if(bAffectsTurning)
    {
        IgnoreLookInput(bCinematicMode);
    }
}

// Export UKFPlayerController::execCanSeeZedTimePawn(FFrame&, void* const)
native function bool CanSeeZedTimePawn(bool bZedTimeStart, optional int RecursionCount);

// Export UKFPlayerController::execStartPartialZedTimeSightCounter(FFrame&, void* const)
native function StartPartialZedTimeSightCounter();

event NotifyPartialZedTimeExited();

function bool IsAffectedByZedTime()
{
    if(bForcePartialZedTime)
    {
        return false;
    }
    return CanSeeZedTimePawn(true);
}

function EnterZedTime()
{
    local KFPawn KFP;
    local KFPerk MyPerk;
    local bool bPartialZedTime;

    MyPerk = GetPerk();
    if(MyPerk != none)
    {
        MyPerk.NotifyZedTimeStarted();
    }
    KFP = KFPawn(Pawn);
    if(KFP != none)
    {
        KFP.bUnaffectedByZedTime = !IsAffectedByZedTime();
        bPartialZedTime = KFP.bUnaffectedByZedTime;
        if(bPartialZedTime)
        {
            StartPartialZedTimeSightCounter();
        }
    }
    ClientEnterZedTime(bPartialZedTime);
}

function FadeOutZedTime()
{
    local KFPerk MyPerk;

    MyPerk = GetPerk();
    if(MyPerk != none)
    {
        MyPerk.NotifyZedTimeEnded();
    }
    ClientFadeOutZedTime();
}

function CompleteZedTime()
{
    ClientCompleteZedTime();
}

reliable client simulated function ClientCompleteZedTime()
{
    SetZedTimeEffectIntensity(0, 0);
}

reliable client simulated function ClientEnterZedTime(bool bPartialOnly)
{
    if(bPartialOnly)
    {
        PlaySoundBase(ZedTimePartialEnterSound, true);
        SetZedTimeEffectIntensity(PartialZEDTimeEffectIntensity);        
    }
    else
    {
        PlaySoundBase(ZedTimeEnterSound, true);
        SetZedTimeEffectIntensity(1);
    }
    if(LEDEffectsManager != none)
    {
        LEDEffectsManager.PlayEffectZedTime();
    }
}

reliable client simulated function ClientFadeOutZedTime()
{
    local KFPawn KFP;
    local bool bIsPartialZedTime;

    KFP = KFPawn(Pawn);
    if((KFP != none) && KFP.bUnaffectedByZedTime)
    {
        bIsPartialZedTime = true;
    }
    PlaySoundBase(((bIsPartialZedTime) ? ZedTimePartialExitSound : ZedTimeExitSound), true);
    SetZedTimeEffectIntensity(0);
    if(LEDEffectsManager != none)
    {
        LEDEffectsManager.ClearEffectZedTime();
    }
}

function ServerNotifyTeamChanged();

function ClientRecieveNewTeam();

function SetGFxHUD(KFGFxMoviePlayer_HUD NewGFxHud)
{
    myGfxHUD = NewGFxHud;
    if(WorldInfo.IsConsoleBuild(9))
    {
        SetUIScale(KFGameEngine(Class'Engine'.static.GetEngine()).SafeFrameScale);
    }
}

function ShowBossNameplate(KFInterface_MonsterBoss KFBoss, optional string PlayerName)
{
    if(myGfxHUD != none)
    {
        myGfxHUD.ShowBossNameplate(KFBoss.GetMonsterPawn().GetLocalizedName() $ PlayerName, KFBoss.GetRandomBossCaption());
    }
}

function HideBossNamePlate()
{
    if(myGfxHUD != none)
    {
        myGfxHUD.HideBossNamePlate();
    }
}

reliable client simulated function ClientOnBossDied()
{
    if(myGfxHUD != none)
    {
        myGfxHUD.bossHealthBar.BossPawn = none;
        myGfxHUD.bossHealthBar.RemoveArmorUI();
    }
    HideBossNamePlate();
    if(StatsWrite != none)
    {
        StatsWrite.SeasonalEventStats_OnBossDied();
    }
}

reliable client simulated function ClientSetFrontEnd(class<KFGFxMoviePlayer_Manager> FrontEndClass, optional bool bSkipMenus)
{
    local LocalPlayer LP;

    if(MyGFxManager == none)
    {
        MyGFxManager = new (self) FrontEndClass;
        LP = LocalPlayer(Player);
        if(LP != none)
        {
            MyGFxManager.Init(LP);
            MyGFxManager.LaunchMenus(bSkipMenus);
            if((OnlineSub.PlayerInterface.GetLoginStatus(byte(LP.ControllerId)) > 0) && !OnlineSub.SystemInterface.IsControllerConnected(LP.ControllerId))
            {
                LogInternal("Controller Disconnected");
                OnControllerChanged(LP.ControllerId, false, false);
            }
        }
        if(WorldInfo.IsConsoleBuild(9))
        {
            SetUIScale(KFGameEngine(Class'Engine'.static.GetEngine()).SafeFrameScale);            
        }
        else
        {
            MyGFxManager.OnProfileSettingsRead();
        }
    }
}

reliable server function SkipLobby()
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        KFGI.LobbyCountdownComplete();
    }
}

function NotifyUnsuccessfulSearch()
{
    if(MyGFxManager != none)
    {
        MyGFxManager.NotifyUnsuccessfulSearch();
    }
}

function OnLobbyStatusChanged(bool bInLobby)
{
    if(MyGFxManager != none)
    {
        MyGFxManager.OnLobbyStatusChanged(bInLobby);
    }
}

function string GetSteamAvatar(UniqueNetId NetId)
{
    local string AvatarPath;
    local int I;
    local bool bFoundAvatar;
    local PlayerSteamAvatar CurrentAvatar;

    AvatarPath = "";
    I = 0;
    J0x17:

    if(I < AvatarList.Length)
    {
        if(AvatarList[I].NetId == NetId)
        {
            bFoundAvatar = true;
            if(AvatarList[I].Avatar != none)
            {
                AvatarPath = (string(AvatarList[I].Avatar.GetPackageName()) $ ".") $ string(AvatarList[I].Avatar.Name);
            }
        }
        ++ I;
        goto J0x17;
    }
    if(!bFoundAvatar)
    {
        CurrentAvatar.NetId = NetId;
        AvatarList.AddItem(CurrentAvatar;
        if(OnlineSub != none)
        {
            OnlineSub.ReadOnlineAvatar(NetId, 64);
        }
    }
    return AvatarPath;
}

function OnAvatarReceived(const UniqueNetId NetId, Texture2D Avatar)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < AvatarList.Length)
    {
        if(AvatarList[I].NetId == NetId)
        {
            AvatarList[I].Avatar = Avatar;
            return;
        }
        ++ I;
        goto J0x0C;
    }
}

function string GetPS4Avatar(const string InPlayerName)
{
    local string AvatarPath;
    local int I;
    local bool bFoundAvatar;
    local PlayerAvatarPS4 CurrentAvatar;

    AvatarPath = "";
    if(InPlayerName == "")
    {
        WarnInternal("Attempted to get PS4 avatar for player with no name");
    }
    I = 0;
    J0x5E:

    if(I < AvatarListPS4.Length)
    {
        if(AvatarListPS4[I].PlayerName == InPlayerName)
        {
            bFoundAvatar = true;
            if((AvatarListPS4[I].ImageDownLoader != none) && AvatarListPS4[I].ImageDownLoader.TheTexture != none)
            {
                AvatarPath = (string(AvatarListPS4[I].ImageDownLoader.TheTexture.GetPackageName()) $ ".") $ string(AvatarListPS4[I].ImageDownLoader.TheTexture.Name);
            }
        }
        ++ I;
        goto J0x5E;
    }
    if(!bFoundAvatar && !WorldInfo.IsE3Build())
    {
        CurrentAvatar.PlayerName = InPlayerName;
        AvatarListPS4.AddItem(CurrentAvatar;
        if(OnlineSub != none)
        {
            OnlineSub.ReadOnlineAvatarByName(InPlayerName, 64);
        }
    }
    return AvatarPath;
}

function OnAvatarURLPS4Received(const string ForPlayerName, const string AvatarURL)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < AvatarListPS4.Length)
    {
        if(AvatarListPS4[I].PlayerName == ForPlayerName)
        {
            if(AvatarURL != "")
            {
                AvatarListPS4[I].AvatarURL = AvatarURL;
                AvatarListPS4[I].ImageDownLoader = new Class'KFHTTPImageDownloader';
                AvatarListPS4[I].ImageDownLoader.DownloadImageFromURL(AvatarURL, OnPS4AvatarDownloadComplete);                
            }
            return;
        }
        ++ I;
        goto J0x0C;
    }
}

function OnPS4AvatarDownloadComplete(bool bWasSuccessful)
{
    local int I;

    I = AvatarListPS4.Length - 1;
    J0x17:

    if(I >= 0)
    {
        if((AvatarListPS4[I].ImageDownLoader != none) && AvatarListPS4[I].AvatarURL == AvatarListPS4[I].ImageDownLoader.ImageURL)
        {
            if(bWasSuccessful)
            {
                if(((myGfxHUD != none) && myGfxHUD.GfxScoreBoardPlayer != none) && myGfxHUD.GfxScoreBoardPlayer.ScoreboardWidget != none)
                {
                    myGfxHUD.GfxScoreBoardPlayer.ScoreboardWidget.ForceUpdateNextFrame();
                }
                if(MyGFxManager != none)
                {
                    MyGFxManager.ForceUpdateNextFrame();
                }                
            }
            else
            {
                LogInternal("avatar download fail");
                AvatarListPS4[I].ImageDownLoader = new Class'KFHTTPImageDownloader';
                AvatarListPS4[I].ImageDownLoader.DownloadImageFromURL(AvatarListPS4[I].AvatarURL, OnPS4AvatarDownloadComplete);
            }
        }
        -- I;
        goto J0x17;
    }
}

unreliable server function ServerSay(string msg)
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(!KFGI.bDisablePublicTextChat || PlayerReplicationInfo.bAdmin)
    {
        super(PlayerController).ServerSay(msg);
    }
}

unreliable server function ServerTeamSay(string msg)
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(WorldInfo.GRI.bMatchIsOver && !KFGI.bDisablePublicTextChat)
    {
        ServerSay(msg);        
    }
    else
    {
        super(PlayerController).ServerTeamSay(msg);
    }
}

reliable client simulated event TeamMessage(PlayerReplicationInfo PRI, coerce string S, name Type, optional float MsgLifeTime)
{
    local string ChatMessage;

    if(PRI == none)
    {
        return;
    }
    if(((PRI.Team != none) && Type == 'TeamSay') && PRI.Team.TeamIndex != PlayerReplicationInfo.Team.TeamIndex)
    {
        return;
    }
    ChatMessage = (((GetChatChannel(Type, PRI)) @ PRI.PlayerName) $ ": ") $ S;
    if((MyGFxManager != none) && Type != MusicMessageType)
    {
        if(Class'WorldInfo'.static.IsMenuLevel())
        {
            ChatMessage = S;
        }
        if((MyGFxManager.PartyWidget != none) && !MyGFxManager.PartyWidget.ReceiveMessage(ChatMessage))
        {
            return;
        }
        if(MyGFxManager.PostGameMenu != none)
        {
            MyGFxManager.PostGameMenu.ReceiveMessage(ChatMessage);
        }
    }
    if(myGfxHUD != none)
    {
        if(Type == MusicMessageType)
        {
            myGfxHUD.MusicNotification.ShowSongInfo(S);            
        }
        else
        {
            if((Type != 'Event') && Type != 'None')
            {
                RecieveChatMessage(PRI, ChatMessage, Type, MsgLifeTime);                
            }
            else
            {
                if((myGfxHUD.HudChatBox != none) && Len(S) > 0)
                {
                    if((InStr(S, Class'KFGFxWidget_BaseParty'.default.PerkPrefix) == -1) && InStr(S, Class'KFGFxWidget_BaseParty'.default.SearchingPrefix) == -1)
                    {
                        myGfxHUD.HudChatBox.AddChatMessage(Class'KFLocalMessage'.default.SystemString @ S, Class'KFLocalMessage'.default.EventColor);
                    }
                }
            }
        }
    }
}

function string GetChatChannel(name Type, PlayerReplicationInfo PRI)
{
    if(!PRI.bOnlySpectator)
    {
        if(Type == 'TeamSay')
        {
            return ("<" $ Class'KFCommon_LocalizedStrings'.default.TeamString) $ ">";            
        }
        else
        {
            return ("<" $ Class'KFCommon_LocalizedStrings'.default.AllString) $ ">";
        }        
    }
    else
    {
        return ("<" $ Class'KFCommon_LocalizedStrings'.default.SpectatorString) $ ">";
    }
}

function RecieveChatMessage(PlayerReplicationInfo PRI, string ChatMessage, name Type, optional float MsgLifeTime)
{
    if(myGfxHUD.HudChatBox != none)
    {
        if(PRI.bOnlySpectator)
        {
            ChatMessage = Class'KFCommon_LocalizedStrings'.default.SpectatorString @ ChatMessage;
        }
        if(PRI.bAdmin)
        {
            ChatMessage = Class'KFLocalMessage'.default.AdminString $ ChatMessage;
            myGfxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.PriorityColor);            
        }
        else
        {
            myGfxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.SayColor);
        }
    }
}

function OpenChatBox()
{
    local KFGFxHudWrapper GFxHUDWrapper;

    GFxHUDWrapper = KFGFxHudWrapper(myHUD);
    if((GFxHUDWrapper != none) && GFxHUDWrapper.HudMovie != none)
    {
        GFxHUDWrapper.HudMovie.OpenChatBox();
    }
}

exec function Talk()
{
    CurrentTextChatChannel = 0;
    OpenChatBox();
}

exec function TeamTalk()
{
    CurrentTextChatChannel = 1;
    OpenChatBox();
}

reliable client simulated function ClientSetCountdown(bool bFinalCountdown, byte CountdownTime, optional NavigationPoint PredictedSpawn)
{
    if(bFinalCountdown && PredictedSpawn != none)
    {
        ClientAddTextureStreamingLoc(PredictedSpawn.Location, 0, false);
    }
    if((MyGFxManager != none) && MyGFxManager.PartyWidget != none)
    {
        MyGFxManager.PartyWidget.StartCountdown(CountdownTime, bFinalCountdown);        
    }
    else
    {
        KFGameReplicationInfo(WorldInfo.GRI).RemainingTime = CountdownTime;
    }
}

reliable client simulated function ClientResetCountdown()
{
    if((MyGFxManager != none) && MyGFxManager.PartyWidget != none)
    {
        MyGFxManager.PartyWidget.StopCountdown();
    }
}

reliable client simulated function ClientSetOnlineStatus()
{
    if(OnlineSub != none)
    {
        OnlineSub.PlayerInterface.SetOnlineStatus(byte(LocalPlayer(Player).ControllerId), WorldInfo.GetMapName(true), true);
    }
}

exec function StartFire(optional byte FireModeNum)
{
    local KFInventoryManager KFIM;

    if(bCinematicMode)
    {
        return;
    }
    if(!KFPlayerInput(PlayerInput).bQuickWeaponSelect)
    {
        if(((myGfxHUD != none) && myGfxHUD.WeaponSelectWidget != none) && myGfxHUD.WeaponSelectWidget.bChangingWeapons)
        {
            KFIM = KFInventoryManager(Pawn.InvManager);
            KFIM.SetCurrentWeapon(KFIM.PendingWeapon);
            myGfxHUD.WeaponSelectWidget.FadeOut();
            return;
        }
    }
    if(((myGfxHUD != none) && myGfxHUD.VoiceCommsWidget != none) && myGfxHUD.VoiceCommsWidget.bActive)
    {
        return;
    }
    if(KFPlayerInput(PlayerInput).bGamePadWeaponSelectOpen && myGfxHUD.WeaponSelectWidget != none)
    {
        myGfxHUD.WeaponSelectWidget.SetWeaponSwitchStayOpen(false);
        KFPlayerInput(PlayerInput).bGamePadWeaponSelectOpen = false;
    }
    super(PlayerController).StartFire(FireModeNum);
}

exec function StartAltFire(optional byte FireModeNum)
{
    if(!KFPlayerInput(PlayerInput).bQuickWeaponSelect)
    {
        if(KFPlayerInput(PlayerInput).bGamePadWeaponSelectOpen)
        {
            return;
        }
    }
    super(PlayerController).StartAltFire(FireModeNum);
}

simulated function KFAutoPurchaseHelper GetPurchaseHelper(optional bool bInitialize)
{
    bInitialize = false;
    if(PurchaseHelper == none)
    {
        PurchaseHelper = new (self) PurchaseHelperClass;
        bInitialize = true;
    }
    if(bInitialize)
    {
        PurchaseHelper.Initialize();
    }
    return PurchaseHelper;
}

function DoAutoPurchase()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(((KFGRI != none) && KFGRI.GameClass.Name == 'KFGameInfo_Tutorial') || bDisableAutoUpgrade)
    {
        OpenTraderMenu();
        return;
    }
    ServerSetEnablePurchases(true);
    GetPurchaseHelper().DoAutoPurchase();
    ServerSetEnablePurchases(false);
}

reliable server function ServerSetEnablePurchases(bool bEnalbe)
{
    local KFInventoryManager KFIM;

    if((Role == ROLE_Authority) && Pawn != none)
    {
        KFIM = KFInventoryManager(Pawn.InvManager);
        KFIM.bServerTraderMenuOpen = bEnalbe;
    }
    bClientTraderMenuOpen = bEnalbe;
}

function OpenTraderMenu(optional bool bForce)
{
    local KFInventoryManager KFIM;

    bForce = false;
    SyncInventoryProperties();
    if((Role == ROLE_Authority) && Pawn != none)
    {
        KFIM = KFInventoryManager(Pawn.InvManager);
        if((KFIM != none) && !KFIM.bServerTraderMenuOpen)
        {
            KFIM.bServerTraderMenuOpen = true;
            ClientOpenTraderMenu(bForce);
        }
    }
}

reliable client simulated function ClientOpenTraderMenu(optional bool bForce)
{
    bForce = false;
    if(((Role < ROLE_Authority) && !KFGameReplicationInfo(WorldInfo.GRI).bTraderIsOpen) && !bForce)
    {
        return;
    }
    SyncInventoryProperties();
    if(MyGFxManager != none)
    {
        MyGFxManager.OpenMenu(15, false);
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayOpenTraderMenuDialog(self);
        }
    }
}

function CloseTraderMenu()
{
    if(MyGFxManager != none)
    {
        MyGFxManager.CloseTraderMenu();
    }
    if(MyGFxManager != none)
    {
        MyGFxManager.CloseTraderMenu();
    }
}

simulated function NotifyTraderDoshChanged()
{
    local KFGFxMenu_Trader TraderMenu;

    if(MyGFxManager != none)
    {
        TraderMenu = KFGFxMenu_Trader(MyGFxManager.CurrentMenu);
        if(TraderMenu != none)
        {
            GetPurchaseHelper().NotifyDoshChanged();
        }
    }
}

reliable client simulated function ClientOpenRoundSummary()
{
    if(!PlayerReplicationInfo.bReadyToPlay)
    {
        return;
    }
    if(MyGFxManager != none)
    {
        MyGFxManager.CloseMenus();
        MyGFxManager.SetHUDVisiblity(false);
    }
    if((PostRoundMenuClass == none) || MyGFxPostRoundMenu != none)
    {
        return;
    }
    MyGFxPostRoundMenu = new PostRoundMenuClass;
    MyGFxPostRoundMenu.Init(Class'Engine'.static.GetEngine().GamePlayers[MyGFxPostRoundMenu.LocalPlayerOwnerIndex]);
}

function ClosePostRoundSummary()
{
    SyncInventoryProperties();
    if(MyGFxPostRoundMenu != none)
    {
        MyGFxPostRoundMenu.Close(true);
        MyGFxPostRoundMenu = none;
        PlayerInput.ResetInput();
        if(MyGFxManager != none)
        {
            MyGFxManager.CloseMenus(true);
        }
    }
}

reliable client simulated function ClientShowPostGameMenu(optional bool bShowMenu)
{
    bShowMenu = true;
    ClosePostRoundSummary();
    if(!bShowMenu)
    {
        ClosePostGameMenu();        
    }
    else
    {
        if(MyGFxManager != none)
        {
            MyGFxManager.bPostGameState = true;
            MyGFxManager.bCanCloseMenu = false;
            MyGFxManager.OpenMenu(14, false);
            myHUD.bShowHUD = false;
        }
    }
}

function ClosePostGameMenu()
{
    if(MyGFxManager != none)
    {
        MyGFxManager.bPostGameState = false;
        MyGFxManager.bCanCloseMenu = true;
        MyGFxManager.ClosePostGameMenu();
        myHUD.bShowHUD = true;
    }
}

function UpdateRhythmCounterWidget(int Count, int Max)
{
    if(myGfxHUD != none)
    {
        myGfxHUD.UpdateRhythmCounterWidget(Count, Max);
    }
}

simulated function SetObjectiveUIActive(bool bActive)
{
    if(((myGfxHUD != none) && myGfxHUD.WaveInfoWidget != none) && myGfxHUD.WaveInfoWidget.ObjectiveContainer != none)
    {
        myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetActive(bActive);
    }
}

function UpdateObjectiveUIProgress(float Progress)
{
    if(((myGfxHUD != none) && myGfxHUD.WaveInfoWidget != none) && myGfxHUD.WaveInfoWidget.ObjectiveContainer != none)
    {
        myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetCurrentProgress(Progress);
    }
}

function SetObjeciveUIIcon(string IconPath)
{
    if(((myGfxHUD != none) && myGfxHUD.WaveInfoWidget != none) && myGfxHUD.WaveInfoWidget.ObjectiveContainer != none)
    {
        myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetCurrentIcon(IconPath);
    }
}

// Export UKFPlayerController::execGetPooledAkComponent(FFrame&, void* const)
native function AkComponent GetPooledAkComponent(optional Actor SourceActor);

unreliable client simulated event WwiseClientHearSound(AkEvent ASound, Actor SourceActor, Vector SourceLocation, bool bStopWhenOwnerDestroyed, optional bool bIsOccluded)
{
    local int I;
    local name EnvironmentName;
    local bool bFollowSourceActor;

    bFollowSourceActor = (SourceActor != none) && IsZero(SourceLocation);
    if(bFollowSourceActor && ASound.bForceHearSoundLocational)
    {
        bFollowSourceActor = false;
        SourceLocation = SourceActor.Location;
    }
    if(ASound.bUseEnvironmentReverbSwitchGroup)
    {
        if(bFollowSourceActor && WorldInfo != none)
        {
            EnvironmentName = WorldInfo.GetAkEnvironmentName(SourceActor.Location);            
        }
        else
        {
            if(WorldInfo != none)
            {
                EnvironmentName = WorldInfo.GetAkEnvironmentName(SourceLocation);
            }
        }
        I = 0;
        J0x164:

        if(I < ASound.CustomSwitches.Length)
        {
            if(ASound.CustomSwitches[0].SwitchGroupName == 'Environment_Reverb')
            {
                ASound.CustomSwitches[I].SwitchName = EnvironmentName;
                goto J0x228;
            }
            ++ I;
            goto J0x164;
        }
        J0x228:

        if(I >= ASound.CustomSwitches.Length)
        {
            ASound.CustomSwitches.Insert(0, 1;
            ASound.CustomSwitches[0].SwitchGroupName = 'Environment_Reverb';
            ASound.CustomSwitches[0].SwitchName = EnvironmentName;
        }
    }
    if(bFollowSourceActor)
    {
        SourceActor.PostAkEvent(ASound, bIsOccluded, !(SourceActor == self) || SourceActor == Pawn, bStopWhenOwnerDestroyed);        
    }
    else
    {
        PostAkEventAtLocation(ASound, SourceLocation, bIsOccluded);
    }
}

unreliable client simulated event ClientHearSoundAdvanced(AkEvent ASound, Actor SourceActor, Vector SourceLocation, byte CompressedSourcePitch, byte CompressedSourceYaw, byte RapidFireEnabled, bool bStopWhenOwnerDestroyed, optional bool bIsOccluded)
{
    local Rotator SoundRotation;

    SoundRotation.Pitch = 256 * CompressedSourcePitch;
    SoundRotation.Yaw = 256 * CompressedSourceYaw;
    ProcessAdvancedHearSound(ASound, SourceActor, SourceLocation, SoundRotation, RapidFireEnabled, bStopWhenOwnerDestroyed, bIsOccluded);
}

unreliable client simulated event ClientHearSoundAdvancedRelevant(AkEvent ASound, Actor SourceActor, Vector SourceLocation, byte RapidFireEnabled, bool bStopWhenOwnerDestroyed, optional bool bIsOccluded)
{
    local Rotator SoundRotation;

    SoundRotation = SourceActor.GetAKRotation();
    ProcessAdvancedHearSound(ASound, SourceActor, SourceLocation, SoundRotation, RapidFireEnabled, bStopWhenOwnerDestroyed, bIsOccluded);
}

simulated function ProcessAdvancedHearSound(AkEvent ASound, Actor SourceActor, Vector SourceLocation, Rotator SourceRotation, byte RapidFireEnabled, bool bStopWhenOwnerDestroyed, optional bool bIsOccluded)
{
    local int I;

    if((RapidFireEnabled != 0) && !IsZero(SourceLocation))
    {
        I = 0;
        J0x33:

        if(I < ASound.CustomRTPCs.Length)
        {
            if(ASound.CustomRTPCs[0].RTPCName == 'ZEDTime_CommandoPerk')
            {
                ASound.CustomRTPCs[I].RTPCValue = 100;
                goto J0xF3;
            }
            ++ I;
            goto J0x33;
        }
        J0xF3:

        if(I >= ASound.CustomRTPCs.Length)
        {
            ASound.CustomRTPCs.Insert(0, 1;
            ASound.CustomRTPCs[0].RTPCName = 'ZEDTime_CommandoPerk';
            ASound.CustomRTPCs[0].RTPCValue = 100;
        }
    }
    WwiseClientHearSound(ASound, SourceActor, SourceLocation, bStopWhenOwnerDestroyed, bIsOccluded);
    if((SourceActor != none) && IsZero(SourceLocation))
    {
        SourceLocation = SourceActor.Location;
    }
    HearEchoes(ASound, SourceLocation, SourceRotation);
}

simulated function HearEchoes(AkEvent ASound, Vector SourceLocation, Rotator SourceRotation)
{
    local float EchoDistance;
    local ReverbVolume EchoVolume;
    local Vector ViewLocation;
    local Rotator ViewRotation;
    local float ViewDist;

    Class'KFReverbVolume'.static.CalculateEchoVolumeAndDistance(WorldInfo, SourceLocation, EchoVolume, EchoDistance);
    GetPlayerViewPoint(ViewLocation, ViewRotation);
    ViewDist = VSizeSq(ViewLocation - SourceLocation);
    if((EchoDistance == float(0)) || ViewDist < (EchoDistance * EchoDistance))
    {
        SourceRotation.Pitch = 0;
        PlayDirectionalEcho(ASound.EchoFront, EchoVolume, SourceLocation, EchoDistance, vect(1, 0, 0) >> SourceRotation);
        PlayDirectionalEcho(ASound.EchoLeft, EchoVolume, SourceLocation, EchoDistance, vect(0, -1, 0) >> SourceRotation);
        PlayDirectionalEcho(ASound.EchoRight, EchoVolume, SourceLocation, EchoDistance, vect(0, 1, 0) >> SourceRotation);
        PlayDirectionalEcho(ASound.EchoRear, EchoVolume, SourceLocation, EchoDistance, vect(-1, 0, 0) >> SourceRotation);        
    }
    else
    {
        PlayEcho(ASound.EchoMono, SourceLocation, FMin((EchoDistance / 34029) * 2, 5));
    }
}

function PlayDirectionalEcho(AkEvent EchoSound, ReverbVolume EchoVolume, Vector SourceLocation, float EchoDistance, Vector EchoDirection)
{
    local Vector EchoLocation;
    local float EchoDelay;

    Class'KFReverbVolume'.static.CalculateEchoLocationAndDelay(EchoVolume, SourceLocation, EchoDirection, EchoDistance, EchoLocation, EchoDelay);
    PlayEcho(EchoSound, EchoLocation, EchoDelay);
}

function PlayEcho(AkEvent EchoSound, Vector EchoLocation, float EchoDelay)
{
    if(EchoSound != none)
    {
        EchoSound.SetCustomRTPC('EchoDistance', EchoDelay);
        PlaySoundBase(EchoSound, true, true, false, EchoLocation, true);
    }
}

function PauseWwiseForAllPlayers(bool bPause)
{
    local KFPlayerController PC;

    foreach WorldInfo.AllControllers(Class'KFPlayerController', PC)
    {
        PC.ClientPauseWwise(bPause);        
    }    
}

reliable client simulated function ClientPauseWwise(bool bPause)
{
    if(bPause)
    {
        PostAkEvent(PauseWwiseEvent);        
    }
    else
    {
        PostAkEvent(ResumeWwiseEvent);
    }
}

function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate)
{
    local bool bWasPaused, bIsPaused;

    CanUnpauseDelegate = CanUnpause;
    if((bPause && !KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport).bSeenIIS) && WorldInfo.IsConsoleBuild())
    {
        return false;
    }
    bWasPaused = IsPaused();
    bIsPaused = super(PlayerController).SetPause(bPause, CanUnpauseDelegate);
    if(bWasPaused != bIsPaused)
    {
        PauseWwiseForAllPlayers(!bWasPaused && bIsPaused);
    }
    return bIsPaused;
}

function OnExternalUIChanged(bool bIsOpening)
{
    bIsExternalUIOpen = bIsOpening;
    if((WorldInfo.NetMode == NM_Standalone) && MyGFxManager.bMenusOpen)
    {
        return;
    }
    SetPause(bIsOpening, CanUnpauseExternalUI);
}

reliable server function ServerPause()
{
    if(WorldInfo.Game.AllowPausing(self))
    {
        if(!IsPaused())
        {
            SetPause(true);            
        }
        else
        {
            SetPause(false);
        }
    }
}

function bool PerformedUseAction()
{
    if(WorldInfo.NetMode != NM_Standalone)
    {
        return super(PlayerController).PerformedUseAction();
    }
    if(Pawn == none)
    {
        return true;
    }
    if(Role < ROLE_Authority)
    {
        return false;
    }
    if(Vehicle(Pawn) != none)
    {
        return Vehicle(Pawn).DriverLeave(false);
    }
    if(FindVehicleToDrive())
    {
        return true;
    }
    return TriggerInteracted();
}

exec function changeSafeFrame(float frameScale)
{
    local Vector2D ViewportSize;
    local GameViewportClient GVC;

    GVC = ((MyGFxManager != none) ? MyGFxManager.GetGameViewportClient() : ((myGfxHUD != none) ? myGfxHUD.GetGameViewportClient() : none));
    if(GVC == none)
    {
        return;
    }
    GVC.GetViewportSize(ViewportSize);
    if(MyGFxManager != none)
    {
        MyGFxManager.UpdateViewportSize(int((ViewportSize.X - (ViewportSize.X * frameScale)) / float(2)), int((ViewportSize.Y - (ViewportSize.Y * frameScale)) / float(2)), int(ViewportSize.X * frameScale), int(ViewportSize.Y * frameScale));
    }
    if(myGfxHUD != none)
    {
        myGfxHUD.UpdateRatio(frameScale);
    }
}

function SetUIScale(float fScale)
{
    local LocalPlayer LocalPlayer;

    LocalPlayer = LocalPlayer(Player);
    if((LocalPlayer != none) && KFGameViewportClient(LocalPlayer.ViewportClient) != none)
    {
        changeSafeFrame(fScale);
    }
}

function GetSeasonalEventStatInfo(int StatIdx, out int CurrentValue, out int MaxValue)
{
    CurrentValue = StatsWrite.GetSeasonalEventStatValue(StatIdx);
    MaxValue = StatsWrite.GetSeasonalEventStatMaxValue(StatIdx);
}

simulated event CompletedDaily(int Index)
{
    if(((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController()) && !StatsWrite.IsDailyObjectiveComplete(Index))
    {
        if((myGfxHUD != none) && myGfxHUD.LevelUpNotificationWidget != none)
        {
            myGfxHUD.LevelUpNotificationWidget.FinishedDailyEvent(Index);
        }
        if(((MyGFxManager != none) && MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.MissionObjectiveContainer != none)
        {
            MyGFxManager.StartMenu.MissionObjectiveContainer.Refresh();
        }
    }
}

function DailyEventInformation GetDailyObjective(int Index)
{
    local DailyEventInformation DefaultObject;

    if(StatsWrite != none)
    {
        return StatsWrite.GetDailyEventStruct(Index);
    }
    return DefaultObject;
}

function int GetCurrentDailyValue(int Index)
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetCurrentDailyValue(Index);
    }
    return -1;
}

function int GetMaxDailyValue(int Index)
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetMaxDailyValue(Index);
    }
    return -1;
}

function bool IsDailyObjectiveComplete(int Index)
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).IsDailyObjectiveComplete(Index);
    }
    LogInternal("Stats write is none.  Cannont read daily data");
    return false;
}

function bool IsWeeklyEventComplete()
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).IsWeeklyEventComplete();
    }
    LogInternal("Stats write is none.  Cannont read weekly data");
    return false;
}

function bool IsEventObjectiveComplete(int Index)
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).IsEventObjectiveComplete(Index);
    }
    LogInternal("Stats write is none.  Cannont read event data");
    return false;
}

function int GetSpecialEventRewardValue()
{
    if(StatsWrite != none)
    {
        return StatsWrite.super(KFPlayerController).GetSpecialEventRewardValue();
    }
    return 0;
}

// Export UKFPlayerController::execGetPerkXP(FFrame&, void* const)
native function int GetPerkXP(class<KFPerk> PerkClass);

// Export UKFPlayerController::execGetPerkBuildByPerkClass(FFrame&, void* const)
native function int GetPerkBuildByPerkClass(class<KFPerk> PerkClass);

// Export UKFPlayerController::execGiveXP(FFrame&, void* const)
native exec function GiveXP(int XP);

// Export UKFPlayerController::execLogPerkBuilds(FFrame&, void* const)
native exec function LogPerkBuilds();

simulated event InitializeStats()
{
    local class<KFOnlineStatsRead> StatsReadClass;
    local class<KFOnlineStatsWrite> StatsWriteClass;

    if((StatsRead == none) && WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(WorldInfo.IsConsoleBuild(9))
        {
            StatsReadClass = Class'KFOnlineStatsReadDingo';
            StatsWriteClass = Class'KFOnlineStatsWriteDingo';            
        }
        else
        {
            StatsReadClass = Class'KFOnlineStatsRead';
            StatsWriteClass = Class'KFOnlineStatsWrite';
        }
        StatsWrite = new (self) StatsWriteClass;
        StatsRead = new (self) StatsReadClass;
        StatsWrite.MyKFPC = self;
        StatsRead.OwningUniqueID = ((WorldInfo.IsConsoleBuild()) ? LocalPlayer(Player).GetUniqueNetId() : PlayerReplicationInfo.UniqueId);
        StatsRead.LinkedWriteObject = StatsWrite;
        if((!WorldInfo.IsConsoleBuild(9) || KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport).bSeenIIS) || Class'KFGameEngine'.static.CheckSkipLobby())
        {
            ReadStats();
        }
    }
}

simulated function LogStatValue(int StatId)
{
    if(StatsWrite != none)
    {
        StatsWrite.LogStatValue(StatId);
    }
}

simulated function SetStatsReadOwningPlayerId(UniqueNetId InUniqueId)
{
    StatsRead.OwningUniqueID = InUniqueId;
}

simulated function ReadStats()
{
    local array<UniqueNetId> Players;

    if(StatsRead.bLogStatsRead)
    {
        LogInternal((((("ReadStats called! OnlineSub=" $ string(OnlineSub)) @ "StatsRead.UserStatsReceivedState=") $ string(StatsRead.UserStatsReceivedState)) @ "StatsRead.OwningUniqueID=") $ Class'OnlineSubsystem'.static.UniqueNetIdToString(StatsRead.OwningUniqueID));
    }
    if(KFGameEngine(Class'Engine'.static.GetEngine()).LocalLoginStatus == 1)
    {
        OnStatsInitialized(false);        
    }
    else
    {
        if((OnlineSub != none) && StatsRead.UserStatsReceivedState != 2)
        {
            OnlineSub.StatsInterface.AddReadOnlineStatsCompleteDelegate(OnStatsInitialized);
            Players[0] = StatsRead.OwningUniqueID;
            OnlineSub.StatsInterface.ReadOnlineStats(byte(LocalPlayer(Player).ControllerId), Players, StatsRead);            
        }
        else
        {
            if(OnlineSub == none)
            {
                WarnInternal("KFPlayerController.ReadStats: No online subsystem present.");
                OnStatsInitialized(false);
            }
        }
    }
}

simulated function OnStatsInitialized(bool bWasSuccessful)
{
    local int I;
    local KFGameEngine KFEngine;

    if(OnlineSub != none)
    {
        OnlineSub.StatsInterface.ClearReadOnlineStatsCompleteDelegate(OnStatsInitialized);
    }
    KFEngine = KFGameEngine(Class'Engine'.static.GetEngine());
    if(((!bWasSuccessful && WorldInfo.IsConsoleBuild(9)) && KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport).bSeenIIS) && KFEngine.CachedStatRows.Length > 0)
    {
        bWasSuccessful = true;
        StatsRead.Rows = KFEngine.CachedStatRows;        
    }
    else
    {
        if(bWasSuccessful && WorldInfo.IsConsoleBuild(9))
        {
            KFEngine.CachedStatRows = StatsRead.Rows;            
        }
        else
        {
            if(!bWasSuccessful)
            {
                if(StatsWrite == none)
                {
                    LogInternal(string(GetFuncName()) $ ": Something has gone wrong, we have no stats write object.");                    
                }
                else
                {
                    StatsWrite.NotifyReadFailure();
                }
            }
        }
    }
    if(bWasSuccessful && StatsWrite != none)
    {
        StatsWrite.NotifyReadSucceeded();
    }
    StatsRead.OnStatsInitialized(bWasSuccessful);
    StatsWrite.OnStatsInitialized(bWasSuccessful);
    CheckSpecialEventID();
    CheckWeeklyEventID();
    if(MyGFxManager != none)
    {
        MyGFxManager.StatsInitialized();
    }
    LoadAllPerkLevels();
    ClientInitializePerks();
    if((MyGFxManager != none) && MyGFxManager.PerksMenu != none)
    {
        MyGFxManager.PerksMenu.UpdateContainers(PerkList[SavedPerkIndex].PerkClass);
    }
    I = 0;
    J0x409:

    if(I < PerkList.Length)
    {
        if(((self != none) && self.MatchStats != none) && PerkList[I].PerkClass != none)
        {
            self.MatchStats.RecordPerkXPGain(PerkList[I].PerkClass, 0, 0);
        }
        ++ I;
        goto J0x409;
    }
}

reliable client simulated event ClientWriteAndFlushStats()
{
    if((WorldInfo.NetMode == NM_DedicatedServer) || KFGameEngine(Class'Engine'.static.GetEngine()).LocalLoginStatus != 2)
    {
        return;
    }
    if((((((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.StatsInterface, (none))) && StatsWrite != none) && !StatsWrite.HasCheated()) && !StatsWrite.HasReadFailure()) && StatsWrite.HasReadStats())
    {
        if(StatsWrite.bLogStatsWrite)
        {
            LogInternal(string(GetFuncName()) @ "Writing and flushing stats to steam!");
        }
        OnlineSub.StatsInterface.WriteOnlineStats('Game', PlayerReplicationInfo.UniqueId, StatsWrite);
        OnlineSub.StatsInterface.FlushOnlineStats('Game');        
    }
    else
    {
        if(StatsWrite == none)
        {
            if(StatsWrite.bLogStatsWrite)
            {
                LogInternal(string(GetFuncName()) @ "Not writing and flushing stats to steam because StatsWrite is null.");
            }
        }
    }
}

function bool HasReadStats()
{
    return (StatsWrite != none) && StatsWrite.super(KFPlayerController).HasReadStats();
}

reliable client simulated function ClientWonGame(string MapName, byte Difficulty, byte GameLength, byte bCoop)
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController())
    {
        StatsWrite.OnGameWon(MapName, Difficulty, GameLength, bCoop, GetPerk().Class);
    }
}

reliable client simulated function ClientRoundEnded(byte WinningTeam)
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController())
    {
        StatsWrite.OnRoundEnd(WinningTeam);
    }
}

reliable client simulated function ClientGameOver(string MapName, byte Difficulty, byte GameLength, byte bCoop, byte FinalWaveNum)
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController())
    {
        StatsWrite.OnGameEnd(MapName, Difficulty, GameLength, FinalWaveNum, bCoop, GetPerk().Class);
    }
}

final function FinishedSpecialEvent(int EventIndex, int ObjectiveIndex)
{
    if(StatsWrite.SeasonalEventIsValid())
    {
        ClientFinishedSpecialEvent(EventIndex, ObjectiveIndex);
    }
}

reliable client final simulated event ClientFinishedSpecialEvent(int EventIndex, int ObjectiveIndex)
{
    if((((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController()) && StatsWrite.SeasonalEventIsValid()) && !StatsWrite.IsEventObjectiveComplete(ObjectiveIndex))
    {
        StatsWrite.UpdateSpecialEvent(EventIndex, ObjectiveIndex);
        if(((myGfxHUD != none) && myGfxHUD.LevelUpNotificationWidget != none) && (Class'KFGameEngine'.static.GetSeasonalEventID() % 10) == EventIndex)
        {
            myGfxHUD.LevelUpNotificationWidget.FinishedSpecialEvent(EventIndex, ObjectiveIndex);
        }
        if(((MyGFxManager != none) && MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.MissionObjectiveContainer != none)
        {
            MyGFxManager.StartMenu.MissionObjectiveContainer.Refresh();
        }
    }
}

simulated function bool SeasonalEventIsValid()
{
    return (StatsWrite != none) && StatsWrite.super(KFPlayerController).SeasonalEventIsValid();
}

// Export UKFPlayerController::execIsValidWeeklySurvivalMatch(FFrame&, void* const)
native function bool IsValidWeeklySurvivalMatch();

final function CompletedWeeklySurvival()
{
    if(IsValidWeeklySurvivalMatch())
    {
        ClientCompletedWeeklySurvival();
    }
}

reliable client final simulated function ClientCompletedWeeklySurvival()
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController())
    {
        StatsWrite.WeeklyEventComplete();
    }
}

reliable client final simulated function ClientMapObjectiveCompleted(float XPValue)
{
    StatsWrite.MapObjectiveCompleted();
    ClientAddPlayerXP(int(XPValue), GetPerk().Class, true);
    OnPlayerXPAdded(int(XPValue), GetPerk().Class);
}

final simulated function SeasonalEventStats_OnMapObjectiveDeactivated(Actor ObjectiveInterfaceActor)
{
    StatsWrite.super(KFPlayerController).SeasonalEventStats_OnMapObjectiveDeactivated(ObjectiveInterfaceActor);
}

reliable client simulated event ClientUnlockAchievement(int AchievementIndex, optional bool bAlwaysUnlock)
{
    bAlwaysUnlock = false;
    if((((((WorldInfo.NetMode != NM_DedicatedServer) && IsLocalPlayerController()) && bIsAchievementPlayer || bAlwaysUnlock) && !PlayerReplicationInfo.bOnlySpectator) && !StatsWrite.HasCheated()) && !StatsWrite.IsAchievementUnlocked(AchievementIndex))
    {
        if(WorldInfo.IsConsoleBuild(9))
        {
            LogInternal("PS4: Client unlock achievement: " @ string(AchievementIndex));
            StatsWrite.UnlockDingoAchievement(AchievementIndex);
            OnlineSub.StatsInterface.WriteOnlineStats('Game', PlayerReplicationInfo.UniqueId, StatsWrite);
        }
        if(OnlineSub.PlayerInterface.UnlockAchievement(byte(LocalPlayer(Player).ControllerId), AchievementIndex))
        {
            StatsWrite.OnUnlockAchievement(AchievementIndex);
        }
    }
}

event int GetXPDeltaForPerkClass(class<KFPerk> PerkClass)
{
    local int I;

    if(MatchStats == none)
    {
        return 0;
    }
    I = 0;
    J0x1C:

    if(I < MatchStats.PerkXPList.Length)
    {
        if(PerkClass == MatchStats.PerkXPList[I].PerkClass)
        {
            return MatchStats.PerkXPList[I].XPDelta;
        }
        ++ I;
        goto J0x1C;
    }
    return 0;
}

function float GetPerkLevelProgressPercentage(class<KFPerk> PerkClass, optional out int CurrentLevelEXP, optional out int NextLevelEXP)
{
    local int NextEXP, CurrentEXP;
    local float EXPPercent;
    local byte PerkLevel;

    PerkLevel = GetPerkLevelFromPerkList(PerkClass);
    CurrentEXP = GetPerkXP(PerkClass);
    if(PerkLevel < 25)
    {
        NextEXP = Class'KFOnlineStatsWrite'.static.GetXPNeededAt(PerkLevel);
        EXPPercent = float(CurrentEXP) / float(NextEXP);        
    }
    else
    {
        EXPPercent = 1;
    }
    CurrentLevelEXP = CurrentEXP;
    NextLevelEXP = NextEXP;
    return EXPPercent * float(100);
}

event byte GetPerkPrestigeLevelFromPerkList(class<KFPerk> PerkClass)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < PerkList.Length)
    {
        if(PerkList[I].PerkClass == PerkClass)
        {
            return PerkList[I].PrestigeLevel;
        }
        ++ I;
        goto J0x0B;
    }
    return 0;
}

event byte GetPerkLevelFromPerkList(class<KFPerk> PerkClass)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < PerkList.Length)
    {
        if(PerkList[I].PerkClass == PerkClass)
        {
            return PerkList[I].PerkLevel;
        }
        ++ I;
        goto J0x0B;
    }
    return 0;
}

function AddZedKill(class<KFPawn_Monster> MonsterClass, byte Difficulty, class<DamageType> DT)
{
    ClientAddZedKill(MonsterClass, Difficulty, DT);
}

// Export UKFPlayerController::execClientAddZedKill(FFrame&, void* const)
private reliable client native final simulated function ClientAddZedKill(class<KFPawn_Monster> MonsterClass, byte Difficulty, class<DamageType> DT);

function AddNonZedKill(class<Pawn> KilledClass, byte Difficulty)
{
    ClientAddNonZedKill(KilledClass, Difficulty);
}

// Export UKFPlayerController::execClientAddNonZedKill(FFrame&, void* const)
private reliable client native final simulated function ClientAddNonZedKill(class<Pawn> KilledClass, byte Difficulty);

function AddZedAssist(class<KFPawn_Monster> MonsterClass)
{
    ClientAddZedAssist(MonsterClass);
}

// Export UKFPlayerController::execClientAddZedAssist(FFrame&, void* const)
private reliable client native final simulated function ClientAddZedAssist(class<KFPawn_Monster> MonsterClass);

function AddZedHeadshot(byte Difficulty, class<DamageType> DT)
{
    ClientAddZedHeadshot(Difficulty, DT);
}

// Export UKFPlayerController::execClientAddZedHeadshot(FFrame&, void* const)
private reliable client native final simulated function ClientAddZedHeadshot(byte Difficulty, class<DamageType> DT);

// Export UKFPlayerController::execClientAddPlayerXP(FFrame&, void* const)
private reliable client native final simulated event ClientAddPlayerXP(int XP, class<KFPerk> PerkClass, optional bool bApplyPrestigeBonus)
{
    bApplyPrestigeBonus = false;                    
}

event OnPlayerXPAdded(int XP, class<KFPerk> PerkClass);

function AddSmallRadiusKill(byte Difficulty)
{
    ClientAddSmallRadiusKill(Difficulty);
}

// Export UKFPlayerController::execClientAddSmallRadiusKill(FFrame&, void* const)
private reliable client native final simulated function ClientAddSmallRadiusKill(byte Difficulty);

function AddWeldPoints(int PointsWelded)
{
    ClientAddWeldPoints(PointsWelded);
}

// Export UKFPlayerController::execClientAddWeldPoints(FFrame&, void* const)
private reliable client native final simulated function ClientAddWeldPoints(int PointsWelded);

function DoorRepaired()
{
    ClientDoorRepaired();
}

// Export UKFPlayerController::execClientDoorRepaired(FFrame&, void* const)
private reliable client native final simulated function ClientDoorRepaired();

function AddHealPoints(int PointsHealed)
{
    ClientAddHealPoints(PointsHealed);
}

// Export UKFPlayerController::execClientAddHealPoints(FFrame&, void* const)
private reliable client native final simulated function ClientAddHealPoints(int PointsHealed);

function AddTrackedDamage(int Amount, class<DamageType> DamageType, class<Pawn> DamagerClass, class<Pawn> VictimClass)
{
    ClientAddTrackedDamage(Amount, DamageType);
}

// Export UKFPlayerController::execClientAddTrackedDamage(FFrame&, void* const)
private reliable client native final simulated function ClientAddTrackedDamage(int Amount, class<DamageType> DamageType);

function AddTrackedVsDamage(int Amount, class<Pawn> DamagerClass)
{
    ClientAddTrackedVsDamage(Amount, DamagerClass);
}

// Export UKFPlayerController::execClientAddTrackedVsDamage(FFrame&, void* const)
private reliable client native final simulated function ClientAddTrackedVsDamage(int Amount, class<Pawn> DamagerClass);

exec function ResetStats(string ConfirmSteamNickInQuotes, optional bool bResetAchievements)
{
    bResetAchievements = false;
    if(IsLocalPlayerController())
    {
        if(ConfirmSteamNickInQuotes != PlayerReplicationInfo.PlayerName)
        {
            LocalPlayer(Player).ViewportClient.ViewportConsole.OutputText("Failed - Confirm using your Steam nickname (Case sensitive)");
            return;
        }
        if(OnlineSub.ResetStats(bResetAchievements))
        {
            LocalPlayer(Player).ViewportClient.ViewportConsole.OutputText("Reset was successful");            
        }
        else
        {
            WarnInternal("Reset Stats Failed!");
        }
    }
}

// Export UKFPlayerController::execGetBenefactorDoshReq(FFrame&, void* const)
protected native function int GetBenefactorDoshReq();

final exec function LogStats()
{
    if(StatsWrite != none)
    {
        StatsWrite.LogStats();
    }
}

exec function EnableCheats()
{
    if(!PlayerReplicationInfo.bAdmin && WorldInfo.NetMode != NM_Standalone)
    {
        ReceiveLocalizedMessage(Class'KFLocalMessage', 2, PlayerReplicationInfo);
        return;
    }
    ServerEnableCheats();
}

private reliable server final function ServerEnableCheats()
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        AddCheats(true);
        ClientNotifyCheats();
        BroadcastLocalizedMessage(Class'KFLocalMessage', 3, PlayerReplicationInfo);
        KFGI.SetGameUnranked(true);
        KFGI.UpdateGameSettings();
    }
}

private reliable client final simulated function ClientNotifyCheats()
{
    if(StatsWrite != none)
    {
        StatsWrite.NotifyCheats();
    }
}

reliable client simulated event OnMapCollectibleFound(PlayerReplicationInfo FinderPRI, int CollectibleID)
{
    local string CollectibleFoundMsg;
    local KFMapInfo KFMI;

    KFMI = KFMapInfo(WorldInfo.GetMapInfo());
    CollectibleFoundMsg = Localize("KFMapInfo", "FoundCollectibleString", "KFGame");
    CollectibleFoundMsg = Repl(CollectibleFoundMsg, "%x%", FinderPRI.PlayerName);
    CollectibleFoundMsg = Repl(CollectibleFoundMsg, "%y%", string(KFMI.CollectiblesToFind - CollectibleID));
    myGfxHUD.ShowNonCriticalMessage(CollectibleFoundMsg);
    if(StatsWrite != none)
    {
        StatsWrite.SeasonalEventStats_OnMapCollectibleFound(FinderPRI, CollectibleID);
    }
}

reliable client simulated event OnAllMapCollectiblesFound(string MapName)
{
    myGfxHUD.ShowNonCriticalMessage(Localize("KFMapInfo", "FoundAllCollectiblesString", "KFGame"));
    PostAkEvent(AllMapCollectiblesFoundEvent);
    if(StatsWrite != none)
    {
        StatsWrite.CheckCollectibleAchievement(MapName);
    }
}

reliable client final simulated event OnEndlessWaveComplete(int CurrentWave)
{
    if(StatsWrite != none)
    {
        StatsWrite.CheckEndWaveObjective(CurrentWave);
    }
}

// Export UKFPlayerController::execUpdateBenefactor(FFrame&, void* const)
native final function UpdateBenefactor(int DoshAmount);

// Export UKFPlayerController::execUnlockHoldOut(FFrame&, void* const)
native final function UnlockHoldOut();

// Export UKFPlayerController::execLogOutBugItAIGoToLogFile(FFrame&, void* const)
native function LogOutBugItAIGoToLogFile(const string InScreenShotDesc, const string InGoString, const string InLocString);

simulated function DisplayDebug(HUD HUD, out float out_YL, out float out_YPos)
{
    local KFGameReplicationInfo KFGRI;
    local KFAIController KFAIC;

    super(PlayerController).DisplayDebug(HUD, out_YL, out_YPos);
    if(HUD.ShouldDisplayDebug('Memory'))
    {
        DrawDebugMemory(HUD.Canvas, out_YL, out_YPos);
    }
    if(HUD.ShouldDisplayDebug('Difficulty'))
    {
        DrawDebugDifficulty(HUD.Canvas, out_YL, out_YPos);
    }
    if(HUD.ShouldDisplayDebug('SpawnWaves'))
    {
        DrawDebugSpawning(HUD.Canvas);
    }
    if(HUD.ShouldDisplayDebug('Map'))
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI.bTrackingMapEnabled)
        {
            DrawDebugMap(HUD.Canvas);
        }
    }
    if(HUD.ShouldDisplayDebug('DoorGraph'))
    {
    }
    if(HUD.ShouldDisplayDebug('GRI'))
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            KFGRI.DisplayDebug(HUD, out_YL, out_YPos);
        }
    }
    if(HUD.ShouldDisplayDebug('Time'))
    {
        HUD.Canvas.SetDrawColor(0, 255, 0);
        HUD.Canvas.DrawText((("TIME: WorldInfo.TimeDilation: " $ string(WorldInfo.TimeDilation)) $ " CustomTimeDilation: ") $ string(CustomTimeDilation));
        out_YPos += out_YL;
        HUD.Canvas.SetPos(4, out_YPos);
    }
    if(HUD.ShouldDisplayDebug('FireAttacks'))
    {
        foreach WorldInfo.AllControllers(Class'KFAIController', KFAIC)
        {
            KFAIC.DrawFireAttackDebug();            
        }        
    }
    if(KFPlayerInput(PlayerInput) != none)
    {
        KFPlayerInput(PlayerInput).DisplayDebug(HUD, out_YL, out_YPos);
    }
    if(HUD.ShouldDisplayDebug('Conductor'))
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI.bGameConductorGraphingEnabled)
        {
            DrawDebugConductor(HUD.Canvas);
        }
    }
}

function DrawDebugMemory(Canvas Canvas, out float out_YL, out float out_YPos)
{
    local int I, ClassCount;
    local float ClassSize, ResourceSize;
    local array< Class > MemoryArray;

    MemoryArray.AddItem(Class'KFWeapon';
    MemoryArray.AddItem(Class'KFWeaponAttachment';
    MemoryArray.AddItem(Class'KFPawn_Human';
    MemoryArray.AddItem(Class'KFPawn_Monster';
    MemoryArray.AddItem(Class'Projectile';
    Canvas.SetDrawColor(0, 255, 0);
    Canvas.SetPos(4, out_YPos);
    Canvas.DrawText("---------- KFPlayerController: Memory ----------");
    out_YPos += out_YL;
    I = 0;
    J0x136:

    if(I < MemoryArray.Length)
    {
        ClassCount = 0;
        ClassSize = 0;
        ResourceSize = 0;
        (((I % 2) == 0) ? Canvas.SetDrawColor(0, 255, 0) : Canvas.SetDrawColor(180, 255, 0));
        Class'KFGameEngine'.static.GetClassCountAndSize(ClassCount, ClassSize, ResourceSize, MemoryArray[I]);
        Canvas.SetPos(4, out_YPos);
        Canvas.DrawText(string(MemoryArray[I].Name) $ ":");
        Canvas.SetPos(154, out_YPos);
        Canvas.DrawText("# Objects = " $ string(ClassCount));
        Canvas.SetPos(254, out_YPos);
        Canvas.DrawText(("Class Size = " $ string(ClassSize)) $ "KB");
        Canvas.SetPos(404, out_YPos);
        Canvas.DrawText(("True Resource Size = " $ string(ResourceSize)) $ "MB");
        out_YPos += out_YL;
        ++ I;
        goto J0x136;
    }
}

function DrawDebugDifficulty(Canvas Canvas, out float out_YL, out float out_YPos)
{
    local KFGameInfo KFGI;
    local byte NumLivingPlayers, NumPlayers;

    KFGI = KFGameInfo(WorldInfo.Game);
    if((KFGI != none) && KFGI.DifficultyInfo != none)
    {
        NumLivingPlayers = byte(KFGI.GetLivingPlayerCount());
        NumPlayers = byte(KFGI.GetNumPlayers());
        Canvas.SetDrawColor(0, 255, 255);
        Canvas.SetPos(4, out_YPos);
        Canvas.DrawText("---------- KFPlayerController: Difficulty ----------");
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, ("Current Difficulty: (" $ string(KFGI.GameDifficulty)) @ ")");
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Global Health Mod: " @ string(KFGI.DifficultyInfo.GetGlobalHealthMod()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Ground Speed Mod: " @ string(KFGI.DifficultyInfo.GetAIGroundSpeedMod()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, "Difficulty Wave Count Mod: " @ string(KFGI.DifficultyInfo.GetDifficultyMaxAIModifier()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Dosh Per Kill Mod: " @ string(KFGI.DifficultyInfo.GetKillCashModifier()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, "Starting Dosh: " @ string(KFGI.DifficultyInfo.GetAdjustedStartingCash()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Respawn Dosh: " @ string(KFGI.DifficultyInfo.GetAdjustedRespawnCash()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, "Active Ammo Pickups Mod: " @ string(KFGI.DifficultyInfo.GetAmmoPickupModifier()));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Active Weapon Pickups Mod: " @ string(KFGI.DifficultyInfo.GetItemPickupModifier()));
        Canvas.SetDrawColor(0, 255, 255);
        Canvas.DrawText("---------- NumPlayer Modifiers ----------");
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, "Num Living Players: " @ string(NumLivingPlayers));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Hidden AI Movement Speed Mod: " @ string(KFGI.DifficultyInfo.GetAIHiddenSpeedModifier(NumLivingPlayers)));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, "Num Players Wave Count Mod: " @ string(KFGI.DifficultyInfo.GetPlayerNumMaxAIModifier(NumPlayers)));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, true, "Ammo Pickups Respawn Time: " @ string(KFGI.DifficultyInfo.GetAmmoPickupInterval(NumLivingPlayers)));
        DrawNextDebugLine(Canvas, out_YL, out_YPos, false, "Weapon Pickups Respawn Time: " @ string(KFGI.DifficultyInfo.GetWeaponPickupInterval(NumLivingPlayers)));
    }
}

function DrawNextDebugLine(out Canvas Canvas, out float out_YL, out float out_YPos, bool bAlternate, string DebugString, optional float XPos)
{
    ((!bAlternate) ? Canvas.SetDrawColor(0, 255, 0) : Canvas.SetDrawColor(180, 255, 0));
    out_YPos += out_YL;
    if(XPos != float(0))
    {
        Canvas.SetPos(XPos, out_YPos);
    }
    Canvas.DrawText(DebugString);
}

function DrawDebugSpawning(out Canvas Canvas)
{
    local float Buffer, XPos, YPos, BackgroundScale, MarkerScale, BackgroundWidth,
	    BackgroundHeight, HalfMarkerWidth, HalfMarkerHeight, CompleteCycle;

    local byte NumCycles;
    local KFGameReplicationInfo KFGRI;
    local Texture2D SineTex, MarkerTex;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(KFGRI == none)
    {
        return;
    }
    SineTex = Texture2D'AbsSine_TEX';
    MarkerTex = Texture2D'SineWaveMarker_TEX';
    BackgroundScale = 0.5;
    MarkerScale = 0.75 * BackgroundScale;
    BackgroundWidth = float(SineTex.SizeX) * BackgroundScale;
    BackgroundHeight = float(SineTex.SizeY) * BackgroundScale;
    HalfMarkerWidth = (float(MarkerTex.SizeX) * MarkerScale) / float(2);
    HalfMarkerHeight = (float(MarkerTex.SizeY) * MarkerScale) / float(2);
    Buffer = 8;
    XPos = (Canvas.ClipX - (float(SineTex.SizeX) * BackgroundScale)) - Buffer;
    YPos = Buffer;
    NumCycles = 1;
    CompleteCycle = 6.28 / KFGRI.CurrentSineWavFreq;
    DrawNextSpawnTimeInfo(Canvas, XPos, BackgroundHeight, Buffer * float(2));
    Canvas.SetPos(XPos, YPos);
    Canvas.SetDrawColor(255, 255, 255);
    Canvas.DrawTexture(SineTex, BackgroundScale);
    XPos += ((((KFGRI.CurrentTotalWavesActiveTime / CompleteCycle) % float(NumCycles)) * BackgroundWidth) - HalfMarkerWidth);
    YPos += ((KFGRI.CurrentSineMod * BackgroundHeight) - HalfMarkerHeight);
    Canvas.SetPos(XPos, YPos);
    Canvas.DrawTexture(MarkerTex, MarkerScale);
}

function DrawDebugMap(out Canvas Canvas);

simulated function DrawMapElement(Canvas Canvas, float ScreenScale, float AdjustedMapSize, Vector2D CenterLocation, Vector MapHolderLocation, Vector ElementLocation, class<KFPawn> ElementClass, Color IconColor, bool bUsingSuperSpeed, bool bDrawHeightArrows, optional bool BBox, optional Vector EnemyLocation, optional bool bFailed);

function DrawDebugConductor(out Canvas Canvas);

function DrawNextSpawnTimeInfo(out Canvas Canvas, float XPos, float YPos, float Buffer)
{
    local KFMapInfo KFMI;
    local float MapSpawnTime;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(KFGRI != none)
    {
        KFMI = KFMapInfo(WorldInfo.GetMapInfo());
        MapSpawnTime = ((KFMI != none) ? KFMI.WaveSpawnPeriod : Class'KFMapInfo'.default.WaveSpawnPeriod);
        DrawNextDebugLine(Canvas, Buffer, YPos, false, "(Y Axis) Zed Spawning Intensity " @ string(float(1) - KFGRI.CurrentSineMod), XPos);
        DrawNextDebugLine(Canvas, Buffer, YPos, true, "Base Map Spawn Time: " @ string(MapSpawnTime), XPos);
        DrawNextDebugLine(Canvas, Buffer, YPos, false, "Length and Num Players Modifier: " @ string(KFGRI.CurrentNextSpawnTimeMod), XPos);
        if(KFGRI.CurrentMaxMonsters <= KFGRI.CurrentAIAliveCount)
        {
            DrawNextDebugLine(Canvas, Buffer, YPos, false, "Max Monsters Reached", XPos);            
        }
        else
        {
            if(KFGRI.bCurrentSMFinishedSpawning)
            {
                DrawNextDebugLine(Canvas, Buffer, YPos, false, "All zeds are in game", XPos);                
            }
            else
            {
                DrawNextDebugLine(Canvas, Buffer, YPos, false, "Time until next spawn: " @ string(KFGRI.CurrentTimeTilNextSpawn), XPos);
                DrawNextDebugLine(Canvas, Buffer, YPos, false, "Current spawn delay: " @ string(KFGRI.CurrentNextSpawnTime), XPos);
            }
        }
        DrawNextDebugLine(Canvas, Buffer, YPos, true, ((string(KFGRI.CurrentAIAliveCount) @ "/") @ string(KFGRI.CurrentMaxMonsters)) @ "Zeds In Game", XPos);
    }
}

event Destroyed()
{
    local KFProjectile KFProj;

    if(StingerAkComponent != none)
    {
        StingerAkComponent.StopEvents();
    }
    SetRTPCValue('Health', 100, true);
    PostAkEvent(LowHealthStopEvent);
    bPlayingLowHealthSFX = false;
    foreach DynamicActors(Class'KFProjectile', KFProj)
    {
        if(KFProj.InstigatorController == self)
        {
            KFProj.OnInstigatorControllerLeft();
        }        
    }    
    if((LocalCustomizationPawn != none) && !LocalCustomizationPawn.bPendingDelete)
    {
        LocalCustomizationPawn.Destroy();
    }
    if(OnlineSub != none)
    {
        OnlineSub.ClearAllReadOnlineAvatarByNameCompleteDelegates();
        OnlineSub.ClearAllReadOnlineAvatarCompleteDelegates();
    }
    ClearMixerDelegates();
    ClearDiscord();
    ClientMatchEnded();
    super(PlayerController).Destroyed();
}

event Exit()
{
    if(LEDEffectsManager != none)
    {
        LEDEffectsManager.LedStopEffects();
    }
}

function StartSpectate(optional name SpectateType)
{
    if(Role == ROLE_Authority)
    {
        if(IsLocalPlayerController())
        {
            ClientGotoState('Spectating');            
        }
        else
        {
            GotoState('Spectating');
            ClientGotoState('Spectating');
        }
    }
}

simulated function NextSpectateMode();

unreliable server function ServerSetSpectatorActive();

function MoveToValidSpectatorLocation()
{
    local PlayerStart PS;
    local Vector CameraLocation;

    foreach AllActors(Class'PlayerStart', PS)
    {
        CameraLocation = PS.Location + (vect(0, 0, 1) * (PS.CylinderComponent.CollisionHeight * 2));
        SetLocation(CameraLocation);
        ServerSetSpectatorLocation(CameraLocation);
        SetRotation(rot(-1024, 0, 0));
        break;        
    }    
}

function NotifyChangeSpectateViewTarget()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPawn KFP;

    if((WorldInfo.GRI == none) || float(WorldInfo.GRI.ElapsedTime) < 2)
    {
        return;
    }
    if(ViewTarget == LocalCustomizationPawn)
    {
        return;
    }
    if((LocalCustomizationPawn != none) && !LocalCustomizationPawn.bPendingDelete)
    {
        if(((MyGFxManager != none) && MyGFxManager.CurrentMenu != none) && MyGFxManager.CurrentMenu == MyGFxManager.GearMenu)
        {
            MyGFxManager.CloseMenus();
        }
        LocalCustomizationPawn.Destroy();
    }
    if((myGfxHUD != none) && myGfxHUD.SpectatorInfoWidget != none)
    {
        KFP = KFPawn(ViewTarget);
        if(KFP != none)
        {
            if((KFP == Pawn) && Pawn.IsAliveAndWell())
            {
                return;
            }
            if(KFP.PlayerReplicationInfo != none)
            {
                KFPRI = KFPlayerReplicationInfo(KFP.PlayerReplicationInfo);                
            }
            else
            {
                KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
            }            
        }
        else
        {
            if(ViewTarget == self)
            {
                KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
            }
        }
        if(KFPRI != none)
        {
            myGfxHUD.SpectatorInfoWidget.SetSpectatedKFPRI(KFPRI);
        }
    }
}

reliable client simulated event ClientSetViewTarget(Actor A, optional ViewTargetTransitionParams TransitionParams)
{
    local Vector ViewLocation;
    local Rotator ViewRotation;

    if(IsSpectating())
    {
        GetPlayerViewPoint(ViewLocation, ViewRotation);
        SetLocation(ViewLocation);
        ViewRotation.Roll = 0;
        SetRotation(ViewRotation);
        ServerSetSpectatorLocation(Location);
    }
    super(PlayerController).ClientSetViewTarget(A, TransitionParams);
    if((IsSpectating()) && ViewTarget != none)
    {
        NotifyChangeSpectateViewTarget();
    }
}

unreliable server function ServerNextSpectateMode()
{
    local KFPawn HumanViewTarget;

    if(!IsSpectating())
    {
        return;
    }
    if(CurrentSpectateMode != 3)
    {
        HumanViewTarget = KFPawn(ViewTarget);
        if((HumanViewTarget == none) || !HumanViewTarget.IsAliveAndWell())
        {
            SpectateRoaming();
            return;
        }
    }
    switch(CurrentSpectateMode)
    {
        case 0:
            SpectatePlayer(1);
            break;
        case 1:
            SpectatePlayer(2);
            break;
        case 2:
            SpectateRoaming();
            break;
        case 3:
            SpectatePlayer(0);
            break;
        default:
            break;
    }
}

function SpectatePlayer(KFPlayerController.KFSpectateModes Mode)
{
    if((PlayerCamera != none) && PlayerCamera.CameraStyle == 'Boss')
    {
        return;
    }
    CurrentSpectateMode = Mode;
    if(KFPawn_Human(ViewTarget) == none)
    {
        TryViewNextPlayer();
        if(KFPawn(ViewTarget) == none)
        {
            if(ViewTarget != self)
            {
                SpectateRoaming();
            }
            return;
        }
    }
    switch(Mode)
    {
        case 0:
            SetCameraMode('FreeCam');
            break;
        case 1:
            SetCameraMode('ThirdPerson');
            break;
        case 2:
            SetCameraMode('FirstPerson');
            break;
        default:
            break;
    }
}

reliable server function SpectateRoaming()
{
    CurrentSpectateMode = 3;
    ServerViewSelf();
    if(ViewTarget == self)
    {
        SetCameraMode('FirstPerson');
    }
}

unreliable server function ServerViewSelf(optional ViewTargetTransitionParams TransitionParams)
{
    if(IsSpectating())
    {
        SetViewTarget(self, TransitionParams);
        ClientSetViewTarget(self, TransitionParams);
        if((PlayerCamera != none) && PlayerCamera.CameraStyle != 'FirstPerson')
        {
            ResetCameraMode();
        }
    }
}

reliable server function TryViewNextPlayer()
{
    local KFPawn KFPTarget;

    KFPTarget = KFPawn(ViewTarget);
    if((KFPTarget == none) || KFPTarget.IsAliveAndWell())
    {
        ServerViewNextPlayer();
    }
}

unreliable server function ServerViewNextPlayer()
{
    if(IsSpectating())
    {
        switch(CurrentSpectateMode)
        {
            case 0:
            case 1:
            case 2:
            case 3:
                if((ViewTarget == self) && CurrentSpectateMode != 0)
                {
                    CurrentSpectateMode = 0;
                    SetCameraMode('FreeCam');
                }
                ViewAPlayer(1);
                break;
            default:
                break;
        }
    }
    else
    {
    }
}

unreliable server function ServerViewPrevPlayer()
{
    if(IsSpectating())
    {
        switch(CurrentSpectateMode)
        {
            case 0:
            case 1:
            case 2:
            case 3:
                if(ViewTarget == self)
                {
                    CurrentSpectateMode = 0;
                    SetCameraMode('FreeCam');
                }
                ViewAPlayer(-1);
                break;
            default:
                break;
        }
    }
    else
    {
    }
}

function SubmitPostWaveStats(optional bool bOpeningTrader)
{
    MatchStats.RecordWaveInfo();
    if(Role == ROLE_Authority)
    {
        PWRI.bOpeningTrader = bOpeningTrader;
        ++ PWRI.RepCount;
    }
    if(IsLocalPlayerController())
    {
        ClientWriteAndFlushStats();
        if(PWRI.bOpeningTrader)
        {
            if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
            {
                KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayBeginTraderTimeDialog(self);
            }
        }
    }
}

function SavePersonalBest(EphemeralMatchStats.EPersonalBests PersonalBestID, int Value)
{
    StatsWrite.SavePersonalBest(PersonalBestID, Value);
}

function int GetPersonalBest(EphemeralMatchStats.EPersonalBests PersonalBestID)
{
    return StatsWrite.GetPersonalBest(PersonalBestID);
}

reliable client simulated function ClientReceiveAwardInfo(byte AwardID, PlayerReplicationInfo PRI, int Value)
{
    MatchStats.ReceiveAwardInfo(AwardID, PRI, Value);
    if((PRI != none) && PRI == PlayerReplicationInfo)
    {
        OnlineSub.PlayerInterfaceEx.PostActivityFeedTeamAward(MatchStats.TeamAwardList[AwardID].TitleIdentifier);
    }
}

reliable client simulated function ReceiveTopWeapons(TopWeaponReplicationInfo TopWeapons)
{
    MatchStats.UnpackTopWeapons(TopWeapons);
}

unreliable client simulated event ClientHearDialog(Actor DialogSpeaker, AkEvent DialogEvent, byte bCanBeMinimized)
{
    local KFPawn KFP;
    local KFGameEngine KFEngine;

    KFEngine = KFGameEngine(Class'KFGameEngine'.static.GetEngine());
    if((bCanBeMinimized == 1) && KFEngine.bMinimalChatter)
    {
        return;
    }
    KFP = KFPawn(DialogSpeaker);
    if(KFP != none)
    {
        KFP.PlayDialogEvent(DialogEvent);
    }
}

function NotifyKilled(Controller Killer, Controller Killed, Pawn KilledPawn, class<DamageType> DamageType)
{
    local KFPawn_Monster MonsterPawn;

    super(Controller).NotifyKilled(Killer, Killed, KilledPawn, DamageType);
    MonsterPawn = KFPawn_Monster(KilledPawn);
    if(((self == Killer) && self != Killed) && MonsterPawn != none)
    {
        if(!PWRI.bKilledFleshpoundLastWave && MonsterPawn.IsA('KFPawn_ZedFleshpound'))
        {
            PWRI.bKilledFleshpoundLastWave = true;            
        }
        else
        {
            if(!PWRI.bKilledScrakeLastWave && MonsterPawn.IsA('KFPawn_ZedScrake'))
            {
                PWRI.bKilledScrakeLastWave = true;
            }
        }
        ++ MatchStats.ZedsKilledLastWave;
        CheckForZedOnDeathAchievements(MonsterPawn);        
    }
    else
    {
        if(self == Killed)
        {
            PWRI.bDiedDuringWave = true;
            if((Killer != none) && Killer.Pawn != none)
            {
                PWRI.ClassKilledByLastWave = class<KFPawn_Monster>(Killer.Pawn.Class);
            }
            ReceiveLocalizedMessage(Class'KFLocalMessage_Interaction', 0);
            SetLocation(KilledPawn.Location + (vect(0, 0, 1) * (KilledPawn.GetCollisionRadius() * 2)));
        }
    }
}

// Export UKFPlayerController::execCheckForZedOnDeathAchievements(FFrame&, void* const)
protected native function CheckForZedOnDeathAchievements(KFPawn_Monster MonsterPawn);

function PlayTraderDialog(int DialogEventID, optional bool bInterrupt)
{
    bInterrupt = false;
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayDialog(DialogEventID, self, bInterrupt);
    }
}

reliable client simulated function ClientPlayTraderDialog(int DialogEventID, optional bool bInterrupt)
{
    bInterrupt = false;
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayDialog(DialogEventID, self, bInterrupt);
    }
}

simulated function PlayTraderSelectItemDialog(bool bTooExpensive, bool bTooHeavy)
{
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlaySelectItemDialog(self, bTooExpensive, bTooHeavy);
    }
}

unreliable server function ServerPlayLevelUpDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayLevelUpDialog(self);
    }
}

unreliable server function ServerPlayVoiceCommsDialog(int CommsIndex)
{
    BroadcastLocalizedMessage(Class'KFLocalMessage_VoiceComms', CommsIndex, PlayerReplicationInfo);
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayVoiceCommandDialog(KFPawn(Pawn), CommsIndex);
    }
}

exec function PlayVoiceCommsDialog(int CommsIndex)
{
    ServerPlayVoiceCommsDialog(CommsIndex);
}

function PlayTraderEndlessWaveStartDialog(int SpecialWaveEventId, int NormalWaveEventId)
{
    local int DialogEventID;
    local KFTraderDialogManager TDM;

    DialogEventID = NormalWaveEventId;
    if(SpecialWaveEventId != -1)
    {
        TDM = KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager;
        if(TDM != none)
        {
            if(TDM.TraderVoiceGroupClass.default.DialogEvents[SpecialWaveEventId].AudioCue != none)
            {
                DialogEventID = TDM.TraderVoiceGroupClass.default.DialogEvents[SpecialWaveEventId].EventID;
            }
        }
    }
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayDialog(DialogEventID, self);
    }
}

reliable client simulated function ClientPlayTraderEndlessWaveStartDialog(int SpecialWaveEventId, int NormalWaveEventId)
{
    PlayTraderEndlessWaveStartDialog(SpecialWaveEventId, NormalWaveEventId);
}

exec function DoEmote()
{
    local KFPawn MyPawn;
    local byte SMFlags;

    MyPawn = KFPawn(Pawn);
    if(((((MyPawn != none) && !bCinematicMode) && !MyPawn.IsDoingSpecialMove()) && Class'KFEmoteList'.static.GetEquippedEmoteId() != -1) && MyPawn.CanDoSpecialMove(35))
    {
        SMFlags = MyPawn.SpecialMoveHandler.SpecialMoveClasses[35].static.PackFlagsBase(MyPawn);
        MyPawn.DoSpecialMove(35, true,, SMFlags);
        if((Role < ROLE_Authority) && MyPawn.IsDoingSpecialMove(35))
        {
            MyPawn.ServerDoSpecialMove(35, true,, SMFlags);
        }
    }
    if((IsLocalController()) && LEDEffectsManager != none)
    {
        LEDEffectsManager.PlayEmoteEffect();
    }
}

exec function ItemExchangeTimeOut()
{
    if((MyGFxManager != none) && MyGFxManager.InventoryMenu != none)
    {
        MyGFxManager.InventoryMenu.OnItemExhangeTimeOut();
    }
}

function ForceDisconnect()
{
    if(CanDisconnect())
    {
        ClearDownloadInfo();        
        ConsoleCommand("DISCONNECT");        
    }
    else
    {
        LogInternal("Could not disconnect");
    }
}

function bool CanDisconnect()
{
    local string TargetMapName, CurrentMovieString;

    GetCurrentMovie(CurrentMovieString);
    TargetMapName = KFGameEngine(Class'Engine'.static.GetEngine()).TransitionDescription;
    if((TargetMapName == "KFMainMenu") || TargetMapName == "")
    {
        LogInternal("Returning false - Attempting to go to main menu when on main menu");
        return false;        
    }
    else
    {
        if(WorldInfo.bIsMenuLevel && !bDownloadingContent)
        {
            LogInternal("returning false, in menu level and not downloading content");
            return false;            
        }
        else
        {
            if(CurrentMovieString == "")
            {
                LogInternal("returning false, no movie playing.  This means you are loaded in.");
                return false;
            }
        }
    }
    return true;
}

reliable client simulated event bool ShowConnectionProgressPopup(Engine.PlayerController.EProgressMessageType ProgressType, string ProgressTitle, string ProgressDescription, optional bool SuppressPasswordRetry)
{
    local KFGameEngine KFGEngine;
    local KFGameViewportClient KFGVPC;
    local string CachedTitle, CachedMessage;

    SuppressPasswordRetry = false;
    if(MyGFxManager == none)
    {
        return false;
    }
    KFGVPC = KFGameViewportClient(LocalPlayer(Player).ViewportClient);
    if((KFGVPC != none) && KFGVPC.ErrorTitle != "")
    {
        KFGVPC.GetErrorMessage(CachedTitle, CachedMessage);        
    }
    else
    {
        CachedTitle = ProgressTitle;
        CachedMessage = ProgressDescription;
    }
    switch(ProgressType)
    {
        case 4:
        case 5:
            DestroyOnlineGame();
            KFGEngine = KFGameEngine(Class'KFGameEngine'.static.GetEngine());
            if(KFGEngine != none)
            {
                switch(KFGEngine.LastConnectionError)
                {
                    case 2:
                    case 3:
                        if(SuppressPasswordRetry)
                        {
                            MyGFxManager.DelayedOpenPopup(2, 0, CachedTitle, CachedMessage, Class'KFCommon_LocalizedStrings'.default.OKString);
                            KFGEngine.LastConnectionError = 0;                            
                        }
                        else
                        {
                            MyGFxManager.DelayedOpenPopup(4, 0, CachedMessage, "", Class'KFCommon_LocalizedStrings'.default.ConfirmString, Class'KFCommon_LocalizedStrings'.default.CancelString, OnAttemptPassword);
                            KFGEngine.LastConnectionError = 0;
                        }
                        return true;
                    default:
                        MyGFxManager.DelayedOpenPopup(2, 0, CachedTitle, CachedMessage, Class'KFCommon_LocalizedStrings'.default.OKString);
                        KFGEngine.LastConnectionError = 0;
                        return true;
                        break;
                }
            }
            break;
        case 2:
            MyGFxManager.DelayedOpenPopup(0, 0, CachedTitle, CachedMessage, "", "", None, None, Class'KFCommon_LocalizedStrings'.default.CancelString);
            return true;
        case 3:
            bDownloadingContent = true;
            if((MyGFxManager != none) && MyGFxManager.PartyWidget != none)
            {
                MyGFxManager.PartyWidget.ShowDownLoadNotification(CachedTitle, float(CachedMessage));
            }
            return true;
            break;
        default:
            break;
    }
    return false;
}

event bool NotifyDisconnect(string Command)
{
    ResetMusicStateForTravel();
    ClientWriteAndFlushStats();
    DestroyOnlineGame();
    return super(PlayerController).NotifyDisconnect(Command);
}

event DestroyOnlineGame()
{
    OnlineSub.PlayerInterfaceEx.RecordPlayersRecentlyMet(byte(LocalPlayer(Player).ControllerId), RecentlyMetPlayers, string(PlayerReplicationInfo.SessionName));
    RecentlyMetPlayers.Length = 0;
    OnlineSub.GameInterface.DestroyOnlineGame(PlayerReplicationInfo.SessionName);
}

function OnAttemptPassword()
{
    local string URL, Password;
    local KFGameViewportClient Viewport;

    Password = KFGFxPopup_InputPrompt(MyGFxManager.CurrentPopup).PlayerInputString;
    Viewport = KFGameViewportClient(LocalPlayer(Player).ViewportClient);
    URL = (("Open" @ Viewport.LastConnectionAttemptAddress) $ "?Password=") $ Password;    
    ConsoleCommand(URL);
}

function ClearOnlineDelegates()
{
    if(OnlineSub != none)
    {
        OnlineSub.GameInterface.ClearOnlineDelegates();
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            OnlineSub.PlayerInterface.ClearReadProfileSettingsCompleteDelegate(byte(LocalPlayer(Player).ControllerId), OnReadProfileSettingsComplete);
        }
        OnlineSub.StatsInterface.ClearReadOnlineStatsCompleteDelegate(OnStatsInitialized);
    }
    super(PlayerController).ClearOnlineDelegates();
}

exec function RequestSwitchTeam();

exec function SwitchTeam();

// Export UKFPlayerController::execSetNoGoActive(FFrame&, void* const)
protected native function SetNoGoActive(bool bNewActive, float Delay);

protected reliable server event ServerSetNoGoActive(bool bNewActive, float Delay)
{
    bNoGoActive = bNewActive;
    if(bNoGoActive)
    {
        SetTimer(Delay, false, 'MotivatePlayerToMove');        
    }
    else
    {
        ClearTimer('MotivatePlayerToMove');
    }
}

protected function MotivatePlayerToMove()
{
    if((Pawn != none) && bNoGoActive)
    {
        Pawn.TakeDamage(Pawn.HealthMax / 10, self, Pawn.Location, vect(0, 0, 0), Class'KFVersusNoGoVolume'.static.GetNoGoDTClass());        
    }
    else
    {
        bNoGoActive = false;
        ClearTimer('MotivatePlayerToMove');
    }
    SetTimer(Class'KFVersusNoGoVolume'.static.GetNoGoHurtInterval(), true, 'MotivatePlayerToMove');
}

exec function GCF()
{
    if(MyGFxManager != none)
    {
        MyGFxManager.currentFocus();
    }
}

function OnControllerChanged(int ControllerId, bool bIsConnected, bool bPauseGame)
{
    local LocalPlayer LP;

    LP = LocalPlayer(Player);
    if((((((!Class'Engine'.static.GetEngine().GameViewport.bNeedsNewGamepadPairingForControllerDisconnect && !Class'Engine'.static.GetEngine().GameViewport.bNeedsNewGamepadPairingForNewProfile) && WorldInfo.IsConsoleBuild()) && LP != none) && LP.ControllerId == ControllerId) && !bIsConnected) && HasActiveUserEstablished())
    {
        if(!MyGFxManager.bMenusOpen)
        {
            MyGFxManager.ToggleMenus();
        }
        if(WorldInfo.IsConsoleBuild(9))
        {
            Class'Engine'.static.GetEngine().GameViewport.bNeedsNewGamepadPairingForControllerDisconnect = true;
        }
        ShowControllerDisconnectedDialog();
        if(WorldInfo.Game != none)
        {
            WorldInfo.Game.NotifyControllerDisconnected();
        }
        if(MyGFxManager.ScreenSizeMovie != none)
        {
            MyGFxManager.ScreenSizeMovie.NotifyControllerDisconnected();
        }
    }
    super(PlayerController).OnControllerChanged(ControllerId, bIsConnected, bPauseGame);
}

simulated function ShowControllerDisconnectedDialog()
{
    local string DisconnectMessage;

    if(WorldInfo.IsConsoleBuild(9))
    {
        DisconnectMessage = "ControllerDisconnectedXB1";        
    }
    else
    {
        DisconnectMessage = "ControllerDisconnectedPS4Message";
    }
    if(HasActiveUserEstablished())
    {
        MyGFxManager.DelayedOpenPopup(0, 7, Localize("Notifications", "ControllerDisconnectedTitle", "KFGameConsole"), Localize("Notifications", DisconnectMessage, "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString, "", OnControllerDisconnectDialogDismissed);
    }
}

simulated function OnControllerDisconnectDialogDismissed()
{
    if(WorldInfo.Game != none)
    {
        WorldInfo.Game.NotifyControllerReconnected();
    }
    if(MyGFxManager.ScreenSizeMovie != none)
    {
        MyGFxManager.ScreenSizeMovie.NotifyControllerReconnected();
    }
}

simulated function CheckForConnectedControllers()
{
    local bool bHasAnyControllersConnected;
    local int I;

    if(Class'Engine'.static.GetEngine().GameViewport.bNeedsNewGamepadPairingForNewProfile)
    {
        I = 0;
        J0x58:

        if(I < 24)
        {
            bHasAnyControllersConnected = bHasAnyControllersConnected || OnlineSub.SystemInterface.IsControllerConnected(I);
            ++ I;
            goto J0x58;
        }
        if(!bHasAnyControllersConnected)
        {
            ShowControllerDisconnectedDialog();
        }        
    }
    else
    {
        if(!OnlineSub.SystemInterface.IsControllerConnected(LocalPlayer(Player).ControllerId))
        {
            ShowControllerDisconnectedDialog();
        }
    }
}

simulated function bool HasActiveUserEstablished()
{
    return KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport).bSeenIIS || ((MyGFxManager != none) && MyGFxManager.IISMenu != none) && MyGFxManager.IISMenu.bLoggingIn;
}

function OnLoginCompleted(bool bSuccess)
{
    if(__LoginCompleteCallback__Delegate != none && bSuccess)
    {
        LoginCompleteCallback();        
    }
    else
    {
        if(KFGFxMenu_IIS(MyGFxManager.CurrentMenu) != none)
        {
            KFGFxMenu_IIS(MyGFxManager.CurrentMenu).NotifyLoginFailed();
        }
    }
    if(bSuccess)
    {
        ClientSetOnlineStatus();        
    }
    else
    {
        if(MyGFxManager != none)
        {
            MyGFxManager.OnLoginFailed();
        }
    }
    __LoginCompleteCallback__Delegate = None;
    bLoggingInForOnlinePlay = false;
}

delegate LoginCompleteCallback();

function StartLogin(delegate<LoginCompleteCallback> InDel, optional bool bInLoggingInForOnlinePlay)
{
    if(__LoginCompleteCallback__Delegate != none)
    {
        LogInternal("Skipping login procsss since there's already a delegate set. This means it should already be in progress");
        return;
    }
    __LoginCompleteCallback__Delegate = InDel;
    bLoggingInForOnlinePlay = bInLoggingInForOnlinePlay;
    if(WorldInfo.IsConsoleBuild(9))
    {
        OnlineSub.PlayerInterface.Login(byte(LocalPlayer(Player).ControllerId), "", "");
        OnOSSLoginComplete(byte(LocalPlayer(Player).ControllerId), true, OnlineSub.SystemInterface.GetCurrentConnectionStatus());        
    }
    else
    {
        if(OnlineSub.PlayerInterface.GetLoginStatus(byte(LocalPlayer(Player).ControllerId)) == 0)
        {
            OnlineSub.PlayerInterface.AddLoginCompleteDelegate(byte(LocalPlayer(Player).ControllerId), OnOSSLoginComplete);
            OnlineSub.PlayerInterface.Login(byte(LocalPlayer(Player).ControllerId), "", "");            
        }
        else
        {
            if(bLoggingInForOnlinePlay)
            {
                CheckPrivilegesForMultiplayer();
            }
        }
    }
}

function OnOSSLoginComplete(byte LocalUserNum, bool bWasSuccessful, Engine.OnlineSubsystem.EOnlineServerConnectionStatus ErrorCode)
{
    OnlineSub.PlayerInterface.ClearLoginCompleteDelegate(LocalUserNum, OnOSSLoginComplete);
    PlayerReplicationInfo.PlayerName = LocalPlayer(Player).GetNickname();
    PlayerReplicationInfo.UniqueId = LocalPlayer(Player).GetUniqueNetId();
    if(ErrorCode == 1)
    {
        if(WorldInfo.IsConsoleBuild(8))
        {            
            GetPS4Avatar(PlayerReplicationInfo.PlayerName);            
        }
        else
        {            
            GetSteamAvatar(PlayerReplicationInfo.UniqueId);
        }
        if((PlayfabInter != none) && PlayfabInter.CachedPlayfabId == "")
        {
            if(OnlineSub.Patcher != none)
            {
                OnlineSub.Patcher.DownloadFiles();
            }
            PlayfabInter.AddOnLoginCompleteDelegate(OnPlayfabLoginComplete);
            PlayfabInter.Login(PlayerReplicationInfo.PlayerName);            
        }
        else
        {
            if(bLoggingInForOnlinePlay)
            {
                CheckPrivilegesForMultiplayer();                
            }
            else
            {
                OnLoginCompleted(true);
            }
        }
        if(((MyGFxManager != none) && MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.FindGameContainer != none)
        {
            MyGFxManager.StartMenu.FindGameContainer.SetWhatsNewItems();
        }        
    }
    else
    {
        if((ErrorCode == 11) || ErrorCode == 12)
        {
            if(bLoggingInForOnlinePlay)
            {
                OnLoginCompleted(false);
                OnlineSub.PlayerInterface.ShowLoginUI(byte(LocalPlayer(Player).ControllerId));                
            }
            else
            {
                OnLoginCompleted(true);
                MyGFxManager.DelayedOpenPopup(0, 0, Localize("KFGFxMenu_IIS", "NoOnlinePlay", "KFGameConsole"), Localize("KFGFxMenu_IIS", ((ErrorCode == 11) ? "NotLoggedInOnlinePSN" : "LiveRequiredMessage"), "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
            }            
        }
        else
        {
            if(ErrorCode == 3)
            {
                OnLoginCompleted(!bLoggingInForOnlinePlay);
                MyGFxManager.DelayedOpenPopup(2, 0, Localize("Notifications", "NotConnectedTitle", "KFGameConsole"), Localize("Notifications", ((bLoggingInForOnlinePlay) ? "NotConnectedMessage" : "NotConnectedForOnlinePlay"), "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);                
            }
            else
            {
                if(ErrorCode == 10)
                {
                    OnLoginCompleted(!bLoggingInForOnlinePlay);
                    if(!MyGFxManager.bMenusOpen)
                    {
                        MyGFxManager.ToggleMenus();
                    }
                    MyGFxManager.DelayedOpenPopup(0, 0, Localize("KFGFxMenu_IIS", "NoOnlinePlay", "KFGameConsole"), Localize("KFGFxMenu_IIS", "TooYoung", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);                    
                }
                else
                {
                    if(ErrorCode == 5)
                    {
                        OnLoginCompleted(!bLoggingInForOnlinePlay);
                        if(!MyGFxManager.bMenusOpen)
                        {
                            MyGFxManager.ToggleMenus();
                        }
                        MyGFxManager.DelayedOpenPopup(0, 0, Localize("KFGFxMenu_IIS", "NoOnlinePlay", "KFGameConsole"), Localize("KFGFxMenu_IIS", "PatchAvailable", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);                        
                    }
                    else
                    {
                        if(ErrorCode != 1)
                        {
                            OnLoginCompleted(false);
                        }
                    }
                }
            }
        }
    }
}

singular function CheckPrivilegesForMultiplayer()
{
    local Engine.OnlineSubsystem.EFeaturePrivilegeLevel HintPrivLevel;

    if(Class'KFGameEngine'.static.IsFreeConsolePlayOver())
    {
        MyGFxManager.DelayedOpenPopup(0, 0, "", Class'KFCommon_LocalizedStrings'.default.FreeConsolePlayOverString, Class'KFCommon_LocalizedStrings'.default.BuyGameString, Class'KFCommon_LocalizedStrings'.default.OKString, OnBuyGamePressed);
        OnLoginCompleted(false);
        return;
    }
    if((WorldInfo.IsConsoleBuild(9) && bLoggingInForOnlinePlay) && OnlineSub.SystemInterface.GetCurrentConnectionStatus() != 1)
    {
        MyGFxManager.DelayedOpenPopup(2, 6, Localize("Notifications", "MultiplayerNotAllowed_Title", "KFGameConsole"), Localize("Notifications", "NotConnectedForOnlinePlayXB1", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
        OnLoginCompleted(false);
        return;
    }
    bOnlinePrivilegeCheckPending = true;
    OnlineSub.PlayerInterface.AddPrivilegeLevelCheckedDelegate(OnCanPlayOnlineCheckForMatchmakingComplete);
    OnlineSub.PlayerInterface.CanPlayOnline(byte(LocalPlayer(Player).ControllerId), HintPrivLevel, true);
}

function OnBuyGamePressed()
{
    if(Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        OnlineSub.OpenGameStorePage();
    }
}

function OnCanPlayOnlineCheckForMatchmakingComplete(byte LocalUserNum, Engine.OnlineSubsystem.EFeaturePrivilege Privilege, Engine.OnlineSubsystem.EFeaturePrivilegeLevel PrivilegeLevel, bool bDiffersFromHint)
{
    if(Privilege == 0)
    {
        bOnlinePrivilegeCheckPending = false;
        OnlineSub.PlayerInterface.ClearPrivilegeLevelCheckedDelegate(OnCanPlayOnlineCheckForMatchmakingComplete);
        if(PrivilegeLevel == 2)
        {
            OnLoginCompleted(true);            
        }
        else
        {
            if(Class'WorldInfo'.static.IsConsoleBuild(9))
            {
                MyGFxManager.DelayedOpenPopup(2, 6, Localize("Notifications", "MultiplayerNotAllowed_Title", "KFGameConsole"), Localize("Notifications", "MultiplayerNotAllowed_MessageLive", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);                
            }
            else
            {
                OnlineSub.PlayerInterfaceEx.UpsellPremiumOnlineService();
            }
            OnLoginCompleted(false);
        }
    }
}

function OnPlayfabLoginComplete(bool bWasSuccessful, string SessionTicket, string PlayfabId)
{
    PlayfabInter.ClearOnLoginCompleteDelegate(OnPlayfabLoginComplete);
    PlayerReplicationInfo.PlayfabPlayerId = PlayfabId;
    KFGameEngine(Class'Engine'.static.GetEngine()).ReadPFStoreData();
    PlayfabInter.AddTitleDataReadCompleteDelegate(OnClientTitleDataRead);
    PlayfabInter.ReadTitleData();
    if(WorldInfo.IsConsoleBuild(9))
    {
        PlayfabInter.ExecuteCloudScript("ClaimXboxExclusives", none);
    }
}

function OnClientTitleDataRead()
{
    PlayfabInter.ClearTitleDataReadCompleteDelegate(OnClientTitleDataRead);
    if(bLoggingInForOnlinePlay)
    {
        CheckPrivilegesForMultiplayer();        
    }
    else
    {
        OnLoginCompleted(true);
    }
}

simulated function PerformLogout()
{
    ClientWriteAndFlushStats();
    StatsRead = none;
    StatsWrite = none;
    InitializeStats();
    ClearDownloadInfo();
    if(WorldInfo.bIsMenuLevel)
    {
        if((MyGFxManager.StartMenu != none) && MyGFxManager.StartMenu.GetStartMenuState() == 1)
        {
            MyGFxManager.StartMenu.ApproveMatchMakingLeave();
        }
        MyGFxManager.Close();
        MyGFxManager = none;
        __LoginCompleteCallback__Delegate = None;
        KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport).bSeenIIS = false;
        KFGameViewportClient(Class'Engine'.static.GetEngine().GameViewport).bAllowInputFromMultipleControllers = true;
        ClientSetFrontEnd(KFGameInfo(WorldInfo.Game).KFGFxManagerClass);        
    }
    else
    {        
        ConsoleCommand("open KFMainMenu");
    }
}

reliable client simulated function ClientMatchStarted()
{
    local bool bTriggerGroups;

    bTriggerGroups = ((MixerCurrentDefaultScene != "SelectSide") ? true : false);
    MixerCurrentDefaultScene = "SelectSide";
    if(bTriggerGroups)
    {
        MixerMoveUsersToDefaultGroup();
    }
    BeginningRoundVaultAmount = GetTotalDoshCount();
}

reliable client simulated function ClientMatchEnded()
{
    MixerCurrentDefaultScene = "default";
    MixerMoveUsersToDefaultGroup();
}

protected simulated function MixerStartupComplete()
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    MixerCurrentDefaultScene = (((KFPRI != none) && KFPRI.bHasSpawnedIn) ? "SelectSide" : "default");
    SetTimer(1, false, 'MixerMoveUsersToDefaultGroup');
}

final simulated function GetCurrentDefaultMixerScene(out string DefaultSceneName)
{
    DefaultSceneName = MixerCurrentDefaultScene;
}

protected final simulated function MixerMoveUsersToDefaultGroup()
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        Mixer.MoveAllUsersToGroup(MixerCurrentDefaultScene);
    }
}

final simulated function InitializeMixer()
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        Mixer.StartInteractiveSession(byte(LocalPlayer(Player).ControllerId));
    }
}

final simulated function ShutdownMixer()
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        if(Class'MixerIntegration'.static.IsMixerInteractionEnabled())
        {
            Mixer.StopInteractiveSession();
        }
    }
}

final simulated function InitMixerDelegates()
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        Mixer.__MixerStartupComplete__Delegate = MixerStartupComplete;
        Mixer.__HandleMixerButtonEvent__Delegate = HandleMixerButtonEvent;
        Mixer.__GetGroupBuildList__Delegate = GetGroupList;
        Mixer.__GetIntendedDefaultScene__Delegate = GetCurrentDefaultMixerScene;
    }
}

final simulated function ClearMixerDelegates()
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        Mixer.__MixerStartupComplete__Delegate = None;
        Mixer.__HandleMixerButtonEvent__Delegate = None;
        Mixer.__GetGroupBuildList__Delegate = None;
        Mixer.__GetIntendedDefaultScene__Delegate = None;
    }
}

final simulated event UpdateMixer()
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        Mixer.TickMixer();
    }
}

final simulated function GetGroupList(out array<string> GroupsToBuild)
{
    GroupsToBuild.AddItem("SelectSide";
    GroupsToBuild.AddItem("Helpers";
    GroupsToBuild.AddItem("Hurters";
    GroupsToBuild.AddItem("VersusZed";
}

final simulated function TestMixerCall(string Button, out array<string> MetaKeys, out array<string> MetaProps)
{
    HandleMixerButtonEvent(Button, "", "UserTest", MetaKeys, MetaProps);
}

private final simulated function HandleMixerButtonEvent(string ControlId, string TransactionId, string UserName, out array<string> MetaKeys, out array<string> MetaProps)
{
    local int AmountValue, CooldownValue, Idx;
    local string StringMetadata;

    if((((ControlId == "HelpButton") || ControlId == "HurtButton") || ControlId == "BackButton") || ControlId == "BackButtonHurt")
    {
        MixerMoveUserToGroup(ControlId, UserName);
        return;
    }
    if(IsPaused())
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
        return;
    }
    if(MetaKeys.Length != MetaProps.Length)
    {
        LogInternal("*** Key/Prop pairs mismatch in Mixer button event.  This should never occur.");
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
        return;
    }
    Idx = 0;
    J0x164:

    if(Idx < MetaKeys.Length)
    {
        if(MetaKeys[Idx] ~= "Amount")
        {
            AmountValue = int(MetaProps[Idx]);            
        }
        else
        {
            if(MetaKeys[Idx] ~= "Type")
            {
                StringMetadata = MetaProps[Idx];                
            }
            else
            {
                if(MetaKeys[Idx] ~= "Cooldown")
                {
                    CooldownValue = int(MetaProps[Idx]) * 1000;
                }
            }
        }
        ++ Idx;
        goto J0x164;
    }
    switch(ControlId)
    {
        case "AmmoButton":
            MixerGiveAmmo(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "ArmorButton":
            MixerGiveArmor(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "DoshButton":
            MixerGiveDosh(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "GrenadeButton":
            MixerGiveGrenades(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "HealButton":
        case "HealButtonVs":
            MixerHealUser(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "ZedTimeButton":
            MixerCauseZedTime(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "EnrageButton":
        case "EnrageButtonVs":
            MixerEnrageZeds(ControlId, TransactionId, AmountValue, CooldownValue, UserName);
            break;
        case "PukeButton":
            MixerPukeUser(ControlId, TransactionId, float(AmountValue), CooldownValue, UserName);
            break;
        case "FleshpoundButton":
        case "FleshpoundButtonVs":
        case "ScrakeButton":
        case "ScrakeButtonVs":
        case "MiniFPButton":
        case "MiniFPButtonVs":
            MixerSpawnZed(ControlId, TransactionId, StringMetadata, AmountValue, CooldownValue, UserName);
            break;
        case "ClientTest":
            MixerClientTest(ControlId, TransactionId);
            break;
        case "ServerTest":
            MixerServerTest(ControlId, TransactionId);
            break;
        default:
            break;
    }
}

private final simulated function MixerClientTest(string ControlId, string TransactionId)
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        LogInternal("*** Mixer: This is a totally valid action on the client!");
        Mixer.SendMixerEventResult(ControlId, TransactionId, 1, 5000);
    }
}

private reliable server final function MixerServerTest(string ControlId, string TransactionId)
{
    local int Random;

    Random = Rand(2);
    if(Random == 0)
    {
        LogInternal("*** Mixer: Server decided the action failed!");
        MixerServerCallback(ControlId, TransactionId, 0, 5000);        
    }
    else
    {
        if(Random == 1)
        {
            LogInternal("*** Mixer: Server decided the action was valid!");
            MixerServerCallback(ControlId, TransactionId, 1, 5000);
        }
    }
}

private reliable client final simulated function MixerServerCallback(string ControlId, string TransactionId, int Result, int Cooldown, optional string UserName)
{
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        Mixer.SendMixerEventResult(ControlId, TransactionId, Result, Cooldown);
        if((Result == 1) && myGfxHUD != none)
        {
            switch(ControlId)
            {
                case "AmmoButton":
                    PlayAkEvent(Class'KFPerk_Support'.static.GetReceivedAmmoSound());
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerGaveAmmoString);
                    break;
                case "ArmorButton":
                    PlayAkEvent(Class'KFPerk_Support'.static.GetReceivedArmorSound());
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerGaveArmorString);
                    break;
                case "DoshButton":
                    Pawn.PlaySoundBase(AkEvent'Play_UI_Pickup_Dosh');
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerGaveDoshString);
                    break;
                case "GrenadeButton":
                    PlayAkEvent(Class'KFPerk_Support'.static.GetReceivedAmmoSound());
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerGaveGrenadeString);
                    break;
                case "HealButton":
                case "HealButtonVs":
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerGaveHealthString);
                    break;
                case "ZedTimeButton":
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerZedTimeString);
                    break;
                case "EnrageButton":
                case "EnrageButtonVs":
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerRageZedsString);
                    break;
                case "FleshpoundButton":
                case "FleshpoundButtonVs":
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerSpawnedFPString);
                    break;
                case "ScrakeButton":
                case "ScrakeButtonVs":
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerSpawnedScrakeString);
                    break;
                case "MiniFPButton":
                case "MiniFPButtonVs":
                    myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerSpawnedMiniFPString);
                    break;
                default:
                    break;
            }
        }
        else
        {
        }/* !MISMATCHING REMOVE, tried If got Type:Else Position:0x562! */
    }/* !MISMATCHING REMOVE, tried Else got Type:If Position:0x02A! */
}

private reliable server final function MixerGiveAmmo(string ControlId, string TransactionId, int Amount, int Cooldown, optional string UserName)
{
    local KFInventoryManager KFIM;

    KFIM = KFInventoryManager(Pawn.InvManager);
    if((KFIM != none) && KFIM.GiveWeaponsAmmo(false))
    {
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private reliable server final function MixerGiveArmor(string ControlId, string TransactionId, int Amount, int Cooldown, string UserName)
{
    local KFInventoryManager KFIM;

    KFIM = KFInventoryManager(Pawn.InvManager);
    if((KFIM != none) && KFIM.AddArmor(Amount))
    {
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private reliable server final function MixerGiveDosh(string ControlId, string TransactionId, int Amount, int Cooldown, string UserName)
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(Pawn);
    KFPRI = KFPlayerReplicationInfo(Pawn.PlayerReplicationInfo);
    if((KFPH != none) && KFPRI != none)
    {
        KFPRI.AddDosh(Amount);
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private reliable server final function MixerGiveGrenades(string ControlId, string TransactionId, int Amount, int Cooldown, string UserName)
{
    local KFInventoryManager KFIM;
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(Pawn);
    KFIM = KFInventoryManager(Pawn.InvManager);
    if(((KFPH != none) && KFIM != none) && KFIM.AddGrenades(Amount))
    {
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private reliable server final function MixerHealUser(string ControlId, string TransactionId, int Amount, int Cooldown, string UserName)
{
    local KFPawn KFP;

    KFP = KFPawn(Pawn);
    if((KFP != none) && KFP.Health < KFP.HealthMax)
    {
        KFP.HealDamage(Amount, self, Class'KFDT_Healing', false, false);
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private reliable server final function MixerCauseZedTime(string ControlId, string TransactionId, int Amount, int Cooldown, string UserName)
{
    local KFGameInfo KFGI;
    local KFGameReplicationInfo KFGRI;

    KFGI = KFGameInfo(WorldInfo.Game);
    KFGRI = KFGameReplicationInfo(WorldInfo.Game.GameReplicationInfo);
    if(((KFGI != none) && KFGRI != none) && !KFGRI.bTraderIsOpen)
    {
        bForcePartialZedTime = true;
        KFGI.DramaticEvent(100, float(Amount));
        bForcePartialZedTime = default.bForcePartialZedTime;
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private reliable server final function MixerEnrageZeds(string ControlId, string TransactionId, int Radius, int Cooldown, string UserName)
{
    local int RalliedCount;
    local KFPawn_Monster KFPM;
    local KFPawn KFPOwner;

    RalliedCount = 0;
    KFPOwner = KFPawn(Pawn);
    if(KFPOwner != none)
    {
        foreach KFPOwner.WorldInfo.GRI.VisibleCollidingActors(Class'KFPawn_Monster', KFPM, float(Radius), Pawn.Location)
        {
            if(KFPM.Rally(KFPOwner, ParticleSystem'FX_ClotA_Rage_01', 'Root', vect(0, 0, 2), ParticleSystem'FX_Player_Zed_Buff_01', MixerRallyBoneNames, vect(0, 0, 0)))
            {
                ++ RalliedCount;
            }            
        }        
    }
    if(RalliedCount > 0)
    {
        MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);        
    }
    else
    {
        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
    }
}

private final simulated function MixerPukeUser(string ControlId, string TransactionId, float PukeLength, int Cooldown, string UserName)
{
    local MixerIntegration Mixer;
    local bool bRestartPuke;

    bRestartPuke = BloatPukeEffectTimeRemaining <= 0;
    BloatPukeEffectTimeRemaining = float(Max(int(BloatPukeEffectTimeRemaining), int(PukeLength)));
    if(bRestartPuke)
    {
        ClientSpawnCameraLensEffect(Class'KFCameraLensEmit_Puke');
    }
    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        PlayAkEvent(AkEvent'Impact_Puke_Damage');
        myGfxHUD.ShowNonCriticalMessage(UserName $ Class'KFCommon_LocalizedStrings'.default.MixerPukeString);
        Mixer.SendMixerEventResult(ControlId, TransactionId, 1, Cooldown);
    }
}

private reliable server final function MixerSpawnZed(string ControlId, string TransactionId, string ZedClass, int Amount, int Cooldown, string UserName)
{
    local class<KFPawn_Monster> SpawnClass;
    local array< class<KFPawn_Monster> > AIToSpawn;
    local KFGameInfo KFGI;
    local int SpawnCount, I;
    local KFPawn_Monster BossCheck;
    local bool bFoundBoss;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        if(KFGI.MyKFGRI.IsBossWave())
        {
            bFoundBoss = false;
            foreach WorldInfo.AllPawns(Class'KFPawn_Monster', BossCheck)
            {
                if(BossCheck.IsABoss())
                {
                    bFoundBoss = true;
                    if(NotEqual_InterfaceInterface(KFInterface_MonsterBoss(BossCheck), (none)) && KFInterface_MonsterBoss(BossCheck).UseAnimatedBossCamera())
                    {
                        MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);                        
                        return;
                    }
                }                
            }            
            if(!bFoundBoss)
            {
                MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
                return;
            }
        }
        SpawnClass = class<KFPawn_Monster>(DynamicLoadObject("KFGameContent." $ ZedClass, Class'Class'));
        if(SpawnClass != none)
        {
            I = 0;
            J0x1FE:

            if(I < Amount)
            {
                AIToSpawn.AddItem(SpawnClass;
                ++ I;
                goto J0x1FE;
            }
            SpawnCount = KFGI.SpawnManager.SpawnSquad(AIToSpawn);
            if(SpawnCount > 0)
            {
                KFGameReplicationInfo(KFGI.GameReplicationInfo).AIRemaining += SpawnCount;
                MixerServerCallback(ControlId, TransactionId, 1, Cooldown, UserName);
                return;
            }
        }
    }
    MixerServerCallback(ControlId, TransactionId, 0, 0, UserName);
}

private final simulated function MixerMoveUserToGroup(string ControlId, string UserName)
{
    local string GroupName;
    local MixerIntegration Mixer;

    Mixer = Class'PlatformInterfaceBase'.static.GetMixerIntegration();
    if(Mixer != none)
    {
        GroupName = "";
        switch(ControlId)
        {
            case "HelpButton":
                GroupName = "Helpers";
                break;
            case "HurtButton":
                GroupName = "Hurters";
                break;
            case "BackButton":
            case "BackButtonHurt":
                GroupName = "SelectSide";
                break;
            default:
                break;
        }
        if(GroupName != "")
        {
            Mixer.MoveUserToGroup(UserName, GroupName);
        }
    }
}

simulated function InitLEDManager()
{
    if(!WorldInfo.IsConsoleBuild() && LEDEffectsManager == none)
    {
        if((Role == ROLE_Authority) && WorldInfo.NetMode != NM_DedicatedServer)
        {
            LEDEffectsManager = new (self) LEDEffectsManagerClass;
            LEDEffectsManager.InitLEDEffects();
        }
        ClientInitLEDManager();
    }
}

reliable client simulated function ClientInitLEDManager()
{
    if(Role != ROLE_Authority)
    {
        LEDEffectsManager = new (self) LEDEffectsManagerClass;
        LEDEffectsManager.InitLEDEffects();
    }
}

final simulated event UpdateAlienFX()
{
    local AlienFXLEDInterface AlienFXLED;

    AlienFXLED = Class'PlatformInterfaceBase'.static.GetAlienFXIntegration();
    if(AlienFXLED != none)
    {
        AlienFXLED.UpdateAlienFX();
    }
}

unreliable client simulated event ClientSpawnCameraLensEffect(class<EmitterCameraLensEffectBase> LensEffectEmitterClass)
{
    super(PlayerController).ClientSpawnCameraLensEffect(LensEffectEmitterClass);
    if((IsLocalController()) && LEDEffectsManager != none)
    {
        switch(LensEffectEmitterClass)
        {
            case Class'KFCameraLensEmit_Puke_Light':
                LEDEffectsManager.PlayEffectGas();
                break;
            case Class'KFCameraLensEmit_Fire':
                LEDEffectsManager.PlayEffectFire();
                break;
            default:
                break;
        }
    }
    else
    {
    }
}

simulated function InitDiscord()
{
    local DiscordRPCIntegration Discord;

    Discord = Class'PlatformInterfaceBase'.static.GetDiscordRPCIntegration();
    if(Discord != none)
    {
        Discord.__JoinLobby__Delegate = JoinDiscordLobby;
        UpdateDiscordRichPresence();
        SetTimer(5, true, 'UpdateDiscordRichPresence');
    }
}

simulated function ClearDiscord()
{
    local DiscordRPCIntegration Discord;

    Discord = Class'PlatformInterfaceBase'.static.GetDiscordRPCIntegration();
    if(Discord != none)
    {
        Discord.__JoinLobby__Delegate = None;
    }
}

simulated function JoinDiscordLobby(QWord qLobbyId)
{
    local KFOnlineLobbySteamworks SteamworksLobby;
    local UniqueNetId LobbyId;

    if(OnlineSub != none)
    {
        SteamworksLobby = KFOnlineLobbySteamworks(OnlineSub.GetLobbyInterface());
        if(SteamworksLobby != none)
        {
            LobbyId.Uid = qLobbyId;
            SteamworksLobby.OnLobbyInvite(LobbyId, LobbyId, true);
        }
    }
}

simulated event UpdateDiscord()
{
    local DiscordRPCIntegration Discord;

    Discord = Class'PlatformInterfaceBase'.static.GetDiscordRPCIntegration();
    if(Discord != none)
    {
        Discord.TickDiscord();
    }
}

simulated function UpdateDiscordRichPresence()
{
    if(WorldInfo.bIsMenuLevel)
    {
        CreateDiscordMenuPresence();        
    }
    else
    {
        CreateDiscordGamePresence();
    }
}

simulated function CreateDiscordMenuPresence()
{
    local string PresenceString;
    local QWord LobbyId;
    local int CurrentPlayers, MaxPlayers;
    local KFOnlineLobbySteamworks SteamworksLobby;
    local DiscordRPCIntegration Discord;

    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        return;
    }
    Discord = Class'PlatformInterfaceBase'.static.GetDiscordRPCIntegration();
    PresenceString = Class'KFCommon_LocalizedStrings'.default.DiscordMenuPresenceString;
    if((Discord != none) && Discord.bDiscordReady)
    {
        if(OnlineSub != none)
        {
            SteamworksLobby = KFOnlineLobbySteamworks(OnlineSub.GetLobbyInterface());
            if(((SteamworksLobby != none) && SteamworksLobby.ActiveLobbies.Length >= 1) && SteamworksLobby.CurrentLobbyId != SteamworksLobby.ZeroUniqueId)
            {
                LobbyId = SteamworksLobby.CurrentLobbyId.Uid;
                MaxPlayers = 6;
                CurrentPlayers = SteamworksLobby.ActiveLobbies[0].Members.Length;
                PresenceString = Class'KFCommon_LocalizedStrings'.default.DiscordPartyPresenceString;
            }
        }
        Discord.CreateMenuPresence(PresenceString, LobbyId, CurrentPlayers, MaxPlayers);
    }
}

simulated function CreateDiscordGamePresence()
{
    local string PresenceString, DetailsString;
    local KFGameReplicationInfo GRI;
    local DiscordRPCIntegration Discord;

    Discord = Class'PlatformInterfaceBase'.static.GetDiscordRPCIntegration();
    if((Discord != none) && Discord.bDiscordReady)
    {
        GRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(GRI != none)
        {
            DetailsString = ((GRI.GameClass != none) ? GRI.GameClass.default.GameName : "");
            PresenceString = ((WorldInfo.NetMode != NM_Standalone) ? Class'KFCommon_LocalizedStrings'.default.DiscordNetworkMatchString : Class'KFCommon_LocalizedStrings'.default.DiscordSoloMatchString);
            if(GRI.WaveNum == 0)
            {
                DetailsString = DetailsString $ Class'KFCommon_LocalizedStrings'.default.DiscordMatchLobbyString;                
            }
            else
            {
                if(GRI.bTraderIsOpen)
                {
                    DetailsString = DetailsString $ Class'KFCommon_LocalizedStrings'.default.DiscordTraderTimeString;                    
                }
                else
                {
                    if(GRI.IsBossWave())
                    {
                        DetailsString = DetailsString $ Class'KFCommon_LocalizedStrings'.default.DiscordBossWaveString;                        
                    }
                    else
                    {
                        DetailsString = (((DetailsString $ Class'KFCommon_LocalizedStrings'.default.DiscordWaveString) $ string(GRI.WaveNum)) $ "/") $ string(GRI.WaveMax - 1);
                    }
                }
            }
            Discord.CreateGamePresence(PresenceString, DetailsString, WorldInfo.GetMapName(), GRI.GetNumPlayers(), ((WorldInfo.NetMode != NM_Standalone) ? GRI.MaxHumanCount : 1));
        }
    }
}

state PlayerWalking
{
    ignores SeePlayer, HearNoise, Bump;

    function ProcessMove(float DeltaTime, Vector newAccel, Engine.Actor.EDoubleClickDir DoubleClickMove, Rotator DeltaRot)
    {
        local float MinMoveScale, MaxMoveScale;
        local InterpCurveFloat MoveSensitivityCurve;

        super.ProcessMove(DeltaTime, newAccel, DoubleClickMove, DeltaRot);
        MoveSensitivityCurve = Class'KFPlayerInput'.default.MoveSensitivityScaleCurve;
        MinMoveScale = MoveSensitivityCurve.Points[0].OutVal;
        MaxMoveScale = MoveSensitivityCurve.Points[MoveSensitivityCurve.Points.Length - 1].OutVal;
        Pawn.MovementSpeedModifier = Lerp(MaxMoveScale, MinMoveScale, float(DoubleClickMove) / float(4));
    }

    function EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        if(Pawn != none)
        {
            Pawn.MovementSpeedModifier = 1;
        }
    }
    stop;    
}

state Dead
{
    ignores ClientPlayForceFeedbackWaveform;

    event BeginState(name PreviousStateName)
    {
        local KFPawn KFP;
        local KFPlayerInput KFPI;

        super.BeginState(PreviousStateName);
        if(PlayerCamera.CameraStyle == 'ZedSuicide')
        {
            SetTimer(6, false, 'StartSpectate');            
        }
        else
        {
            SetTimer(5, false, 'StartSpectate');
        }
        ResetGameplayPostProcessFX();
        KFP = KFPawn(ViewTarget);
        if((KFP != none) && UsingFirstPersonCamera())
        {
            KFP.Mesh.SetOwnerNoSee(true);
            KFP.Mesh.CastShadow = false;
            KFP.SetThirdPersonAttachmentVisibility(false);
            KFP.SetFirstPersonVisibility(false);
        }
        if(CurrentPerk != none)
        {
            CurrentPerk.PlayerDied();
        }
        KFPI = KFPlayerInput(PlayerInput);
        if(KFPI != none)
        {
            KFPI.HideVoiceComms();
        }
        if(MyGFxManager != none)
        {
            MyGFxManager.CloseMenus();
        }
        if(myGfxHUD != none)
        {
            myGfxHUD.PawnDied();
        }
    }

    exec function StartFire(optional byte FireModeNum)
    {
        StartSpectate();
    }

    function SetViewTarget(Actor NewViewTarget, optional ViewTargetTransitionParams TransitionParams)
    {
        if(((PlayerCamera.CameraStyle == 'Boss') && KFPawn_Monster(NewViewTarget) != none) && KFPawn_Monster(NewViewTarget).IsABoss())
        {
            super(PlayerController).SetViewTarget(NewViewTarget, TransitionParams);
        }
    }

    event EndState(name NextStateName)
    {
        local KFPawn KFP;

        super.EndState(NextStateName);
        ClearTimer('StartSpectate');
        KFP = KFPawn(ViewTarget);
        if(KFP != none)
        {
            KFP.Mesh.CastShadow = KFP.Mesh.default.CastShadow;
        }
        NotifyChangeSpectateViewTarget();
    }

    event ResetCameraMode()
    {
        if(((Role == ROLE_Authority) && Pawn != none) && !Pawn.bPlayedDeath)
        {
            global.ResetCameraMode();
        }
    }
    stop;    
}

state BaseSpectating
{
    ignores ClientPlayForceFeedbackWaveform, ClientPlayCameraShake;
    stop;    
}

auto state PlayerWaiting
{
    ignores SeePlayer, HearNoise, NotifyBump, TakeDamage, PhysicsVolumeChange, NextWeapon, 
	    PrevWeapon, SwitchToBestWeapon, ClientPlayForceFeedbackWaveform, ClientPlayCameraShake;
    stop;    
}

state WaitingForPawn
{
    ignores SeePlayer, HearNoise, KilledBy, ClientPlayForceFeedbackWaveform, ClientPlayCameraShake;
    stop;    
}

state Spectating
{
    ignores ClientPlayForceFeedbackWaveform, ClientPlayCameraShake, StartFire;

    event BeginState(name PreviousStateName)
    {
        local KFGFxHudWrapper GFxHUDWrapper;
        local KFPlayerReplicationInfo KFPRI;

        SetTimer(NextSpectatorDelay, false, 'SpectateNextPlayer');
        GFxHUDWrapper = KFGFxHudWrapper(myHUD);
        if(GFxHUDWrapper != none)
        {
            GFxHUDWrapper.CreateHUDMovie();
        }
        if((Pawn != none) && KFPawn_Customization(Pawn) != none)
        {
            if(WorldInfo.NetMode != NM_Client)
            {
                Pawn.Destroy();
            }
        }
        super.BeginState(PreviousStateName);
        if((IsLocalPlayerController()) && !bIsAchievementPlayer)
        {
            MoveToValidSpectatorLocation();
        }
        if(WorldInfo.NetMode != NM_Client)
        {
            if((((ViewTarget == none) || ViewTarget == self) || ViewTarget.bDeleteMe) || (Pawn(ViewTarget) != none) && !Pawn(ViewTarget).IsAliveAndWell())
            {
                ServerViewNextPlayer();
            }
            if(ViewTarget == self)
            {
                if(CurrentSpectateMode != 3)
                {
                    CurrentSpectateMode = 0;
                    SetCameraMode('FreeCam');
                }                
            }
            else
            {
                SpectatePlayer(0);
            }
        }
        if(myGfxHUD != none)
        {
            myGfxHUD.SetHUDSpectating(true);
        }
        NotifyChangeSpectateViewTarget();
        if(WorldInfo.NetMode == NM_Standalone)
        {
            ToggleHealthEffects(false);
        }
        KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.PlayerHealth = 0;
            KFPRI.PlayerHealthPercent = 0;
            KFPRI.bNetDirty = true;
        }
        if(MyGFxManager != none)
        {
            MyGFxManager.NotifySpectateStateChanged(true);
        }
    }

    exec function SpectateNextPlayer()
    {
        ClearTimer('SpectateNextPlayer');
        ServerViewNextPlayer();
        NotifyChangeSpectateViewTarget();
    }

    exec function SpectatePreviousPlayer()
    {
        ClearTimer('SpectateNextPlayer');
        ServerViewPrevPlayer();
        NotifyChangeSpectateViewTarget();
    }

    exec function SpectateChangeCamMode()
    {
        ServerNextSpectateMode();
        NotifyChangeSpectateViewTarget();
    }

    event EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        if(myGfxHUD != none)
        {
            myGfxHUD.SetHUDSpectating(false);
        }
        if(MyGFxManager != none)
        {
            MyGFxManager.NotifySpectateStateChanged(false);
        }
    }

    function PlayerMove(float DeltaTime)
    {
        local Vector X, Y, Z;
        local Rotator OldRotation;

        OldRotation = Rotation;
        GetAxes(Rotation, X, Y, Z);
        Acceleration = ((PlayerInput.aForward * X) + (PlayerInput.aStrafe * Y)) + (PlayerInput.aUp * vect(0, 0, 1));
        UpdateRotation(DeltaTime);
        if(Role < ROLE_Authority)
        {
            ReplicateMove(DeltaTime, Acceleration, 0, rot(0, 0, 0));
            if((!IsZero(Acceleration) || OldRotation != Rotation) && (WorldInfo.TimeSeconds - LastUpdateSpectatorActiveTime) > UpdateSpectatorActiveInterval)
            {
                LastUpdateSpectatorActiveTime = WorldInfo.TimeSeconds;
                ServerSetSpectatorActive();
            }            
        }
        else
        {
            ProcessMove(DeltaTime, Acceleration, 0, rot(0, 0, 0));
        }
    }

    unreliable server function ServerSetSpectatorActive()
    {
        LastActiveTime = WorldInfo.TimeSeconds;
    }

    function SetViewTarget(Actor NewViewTarget, optional ViewTargetTransitionParams TransitionParams)
    {
        if(NewViewTarget != ViewTarget)
        {
            NotifyChangeSpectateViewTarget();
        }
        global.SetViewTarget(NewViewTarget, TransitionParams);
    }
    stop;    
}

defaultproperties
{
    PerkList(0)=(PerkClass=Class'KFPerk_Berserker',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(1)=(PerkClass=Class'KFPerk_Commando',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(2)=(PerkClass=Class'KFPerk_Support',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(3)=(PerkClass=Class'KFPerk_FieldMedic',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(4)=(PerkClass=Class'KFPerk_Demolitionist',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(5)=(PerkClass=Class'KFPerk_Firebug',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(6)=(PerkClass=Class'KFPerk_Gunslinger',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(7)=(PerkClass=Class'KFPerk_Sharpshooter',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(8)=(PerkClass=Class'KFPerk_SWAT',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    PerkList(9)=(PerkClass=Class'KFPerk_Survivalist',PerkLevel=0,PrestigeLevel=0,PerkArchetype=none)
    ServPendingPerkBuild=-1
    ServPendingPerkLevel=-1
    bReflectionsEnabled=true
    bTrackingMapTopView=true
    MusicMessageType=Music
    BenefactorDoshReq=1000
    RefreshObjectiveUITime=1
    PurchaseHelperClass=Class'KFAutoPurchaseHelper'
    NextSpectatorDelay=2
    DefaultAvatarPath="UI_World_TEX.KF2Icon_Default"
    MixerRallyBoneNames[0]=necksocket
    MixerRallyBoneNames[1]=necksocket
    MixerCurrentDefaultScene="default"
    LEDEffectsManagerClass=Class'KFLEDEffectsManager'
    ZedTimeEnterSound=AkEvent'WW_GLO_Runtime.Set_ZEDTime_On'
    ZedTimeExitSound=AkEvent'WW_GLO_Runtime.Set_ZEDTime_Off'
    ZedTimePartialEnterSound=AkEvent'WW_GLO_Runtime.Set_ZEDTime_Partial_On'
    ZedTimePartialExitSound=AkEvent'WW_GLO_Runtime.Set_ZEDTime_Partial_Off'
    PauseWwiseEvent=AkEvent'WW_GLO_Runtime.Pause_All'
    ResumeWwiseEvent=AkEvent'WW_GLO_Runtime.Resume_All'
    LowHealthStartEvent=AkEvent'WW_UI_PlayerCharacter.Play_UI_Low_Health_LP'
    LowHealthStopEvent=AkEvent'WW_UI_PlayerCharacter.Stop_UI_Low_Health_LP'
    begin object name=AkComponent class=AkComponent
        BoneName=Root
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPlayerController.AkComponent'
    StingerAkComponent=AkComponent
    ResetFiltersEvent=AkEvent'WW_UI_PlayerCharacter.Reset_LowPass_Filters'
    FlashlightOnEvent=AkEvent'WW_UI_PlayerCharacter.Play_WEP_Flashlight_TurnOn'
    FlashlightOffEvent=AkEvent'WW_UI_PlayerCharacter.Play_WEP_Flashlight_TurnOff'
    NightVisionOnEvent=AkEvent'WW_UI_PlayerCharacter.Play_WEP_Nightvision_TurnOn'
    NightVisionOffEvent=AkEvent'WW_UI_PlayerCharacter.Play_WEP_Nightvision_TurnOff'
    AllMapCollectiblesFoundEvent=AkEvent'WW_UI_PlayerCharacter.Play_UI_Collectible_CollectAll'
    GameplayPostProcessEffectName=GameplayEffect
    EffectPainParamName=Effect_Pain
    EffectLowHealthParamName=Effect_LowHealth
    EffectZedTimeParamName=Effect_ZEDTIME
    EffectNightVisionParamName=Effect_NightVision
    EffectSirenScreamParamName=Effect_Siren
    EffectBloatsPukeParamName=Effect_Puke
    EffectHealParamName=Effect_Heal
    EffectPerkParamName=Effect_PerkSkill
    EffectFlashBangParamName=Effect_FlashBang
    PainEffectDuration=0.5
    HealEffectDuration=1
    SonicScreamEffectDuration=6
    BloatPukeEffectDuration=2
    FlashBangEffectDuration=3
    LowHealthThreshold=50
    CurrentZEDTimeEffectIntensity=-1
    PartialZEDTimeEffectIntensity=0.35
    begin object name=AmplificationLightTemplate class=PointLightComponent
        Radius=200
        bAIIgnoreLuminosity=true
        Brightness=0.02
        CastShadows=false
        CastStaticShadows=false
        bDisableSpecular=true
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPlayerController.AmplificationLightTemplate'
    AmplificationLightTemplate=AmplificationLightTemplate
    begin object name=NVGLightTemplate class=PointLightComponent
        Radius=800
        bAIIgnoreLuminosity=true
        Brightness=0.05
        bEnabled=false
        CastShadows=false
        CastStaticShadows=false
        bDisableSpecular=true
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPlayerController.NVGLightTemplate'
    NVGLightTemplate=NVGLightTemplate
    DOFFocalRange=0.25
    DOFFocalAperture=0.2
    DOFFocusBlendRate=2
    DOFMaxFocusDepth=5000
    DOFMaxEnemyAngle=15
    DOF_NVG_BlendInSpeed=4
    DOF_NVG_BlendOutSpeed=10
    CIN_ImageGrainScale=5
    NVG_FocusBlendRate=3
    NVG_ImageGrainScale=6
    NVG_DOF_FocalDistance=1200
    NVG_DOF_SharpRadius=1000
    NVG_DOF_FocalRadius=1200
    NVG_DOF_MaxNearBlurSize=4
    NVG_DOF_MaxFarBlurSize=3
    NVG_DOF_ExpFalloff=1
    DOF_Cinematic_BlendInSpeed=50
    DOF_Cinematic_BlendOutSpeed=10
    DOF_Cinematic_FocalDistance=300
    DOF_Cinematic_SharpRadius=200
    DOF_Cinematic_FocalRadius=300
    DOF_Cinematic_MaxFarBlurSize=4
    DOF_Cinematic_ExpFalloff=1
    BlurBlendInSpeed=1
    BlurBlendOutSpeed=1
    MatchStatsClass=Class'EphemeralMatchStats'
    UpdateSpectatorActiveInterval=1
    ScoreTargetDistanceCurve=(Points=/* Array type was not detected. */,InVal=0,OutVal=0.3,ArriveTangent=0,LeaveTangent=0,InterpMode=EInterpCurveMode.CIM_Linear)
    MaxAimCorrectionDistance=10000
    TrackerXPosition=0.67
    TrackerYPosition=0.025
    TrackingMapScale=1
    TrackerSpawnVolumeSizeX=15
    TrackerSpawnVolumeSizeY=13
    TrackingMapRange=5000
    DebugLastSeenDoshVaultValue=-1
    DebugCurrentDoshVaultValue=-1
    DebugCurrentDoshVaultTier=-1
    BeginningRoundVaultAmount=-1
    CameraClass=Class'KFPlayerCamera'
    bCheckSoundOcclusion=true
    DesiredFOV=90
    DefaultFOV=90
    CheatClass=Class'KFCheatManager'
    InputClass=Class'KFPlayerInput'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerController.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    ForceFeedbackManagerClassName="WinDrv.XnaForceFeedbackManager"
    bSkipExtraLOSChecks=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerController.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=AkComponent class=AkComponent
        BoneName=Root
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPlayerController.AkComponent'
    Components(1)=AkComponent
    bAlwaysTick=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerController.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}