/*******************************************************************************
 * KFAffliction_Shrink generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAffliction_Shrink extends KFAfflictionAdvanced;

var() float ScaleOnMaxEffect;
var() float EffectAppliedByStack;
var() float MaxEffectDamageValue;
var() float ApplyEffectVel;
var() float RemoveEffectVel;
var() float StackDamageModifier;
var() byte MaxEffect;
var transient float CurrentEffect;
var transient float CurrentEffectApplied;
var transient KFPlayerController Instigator;
var transient bool bIsTinyTerrorMode;
var transient bool AlreadyCached;
var transient float CachedBodyScaleChangePerSecond;
var transient float CachedBodyScale;

function Init(KFPawn P, KFAfflictionManager.EAfflictionType Type, KFPerk InstigatorPerk)
{
    local KFGameReplicationInfo KFGRI;

    super.Init(P, Type, InstigatorPerk);
    if(InstigatorPerk != none)
    {
        Instigator = InstigatorPerk.OwnerPC;
    }
    if(AlreadyCached == false)
    {
        AlreadyCached = true;
        CachedBodyScaleChangePerSecond = P.BodyScaleChangePerSecond;
        CachedBodyScale = P.Mesh.Scale;
    }
    KFGRI = KFGameReplicationInfo(P.WorldInfo.GRI);
    if((KFGRI != none) && KFGRI.bIsWeeklyMode)
    {
        bIsTinyTerrorMode = KFGRI.CurrentWeeklyIndex == 2;
    }
}

function Activate(optional class<KFDamageType> DamageType)
{
    local float StackModifier;

    DamageType = none;
    if(bIsTinyTerrorMode)
    {
        return;
    }
    if(CurrentEffect < float(MaxEffect))
    {
        super.Activate();
        StackModifier = 1;
        if(KFPawn_Monster(PawnOwner) != none)
        {
            StackModifier = KFPawn_Monster(PawnOwner).ShrinkEffectModifier;
        }
        if(StackModifier >= 1)
        {
            PawnOwner.BodyScaleChangePerSecond = CachedBodyScaleChangePerSecond * StackModifier;
            PawnOwner.bNetDirty = true;
        }
        CurrentEffect += (EffectAppliedByStack * StackModifier);
    }
    if(CurrentEffectApplied >= float(MaxEffect))
    {
        CurrentEffectApplied = float(MaxEffect);
        KillOwner();
    }
}

event Tick(float DeltaTime)
{
    if(PawnOwner.bPlayedDeath)
    {
        CurrentStrength = 0;
        DeActivate();
        return;
    }
    if(CurrentEffectApplied != CurrentEffect)
    {
        if(CurrentEffectApplied < CurrentEffect)
        {
            CurrentEffectApplied = FMin(CurrentEffectApplied + ((DeltaTime * ApplyEffectVel) * KFPawn_Monster(PawnOwner).ShrinkEffectModifier), CurrentEffect);            
        }
        else
        {
            CurrentEffectApplied = CurrentEffectApplied - (DeltaTime * RemoveEffectVel);
        }
        CurrentEffectApplied = FMax(CurrentEffectApplied, 0);
        CurrentEffectApplied = FMin(CurrentEffectApplied, float(MaxEffect));
        PawnOwner.IntendedBodyScale = CachedBodyScale - ((CurrentEffectApplied / float(MaxEffect)) * (1 - ScaleOnMaxEffect));
    }
    if(CurrentStrength <= 0)
    {
        CurrentEffect = 0;
        CurrentStrength = 0.1;
        if(CurrentEffectApplied <= 0)
        {
            CurrentStrength = 0;
            PawnOwner.BodyScaleChangePerSecond = CachedBodyScaleChangePerSecond;
            PawnOwner.bNetDirty = true;
            DeActivate();
        }
    }
}

function float GetDamageTakenModifier()
{
    return MaxEffectDamageValue * (CurrentEffect / float(MaxEffect));
}

function KillOwner()
{
    local KFPawn_Monster KFPM;

    KFPM = KFPawn_Monster(PawnOwner);
    if(KFPM == none)
    {
        return;
    }
    KFPM.BodyScaleChangePerSecond = CachedBodyScaleChangePerSecond;
    KFPM.bNetDirty = true;
    if(!KFPM.bCanBeKilledByShrinking)
    {
        return;
    }
    KFPM.bUseExplosiveDeath = true;
    KFPM.TakeDamage(9999, Instigator, KFPM.Location, vect(0, 0, 0), Class'KFDT_ShrinkDeath',, Instigator.Pawn.Weapon);
}

defaultproperties
{
    ScaleOnMaxEffect=0.5
    EffectAppliedByStack=1
    MaxEffectDamageValue=1
    ApplyEffectVel=100
    RemoveEffectVel=0.25
    MaxEffect=10
    DissipationRate=10
    bNeedsTick=true
}