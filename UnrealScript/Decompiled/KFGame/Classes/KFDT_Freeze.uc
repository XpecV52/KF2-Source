/*******************************************************************************
 * KFDT_Freeze generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDT_Freeze extends KFDamageType
    abstract;

var protected ParticleSystem FrozenShatterTemplate;
var protected AkBaseSoundObject ShatterSound;

static function int GetKillerDialogID()
{
    return 88;
}

static function int GetDamagerDialogID()
{
    return 103;
}

static function PlayShatter(KFPawn P, optional bool bSkipParticles, optional bool bMaterialOnly, optional Vector RBLinearVelocity)
{
    local KFPawn_Monster Zed;
    local KFGoreManager GoreManager;
    local float IceScalar;
    local int MICIndex, I;

    IceScalar = 1;
    if(!bMaterialOnly)
    {
        Zed = KFPawn_Monster(P);
        if((Zed != none) && !Zed.bUseDamageInflation)
        {
            Zed.RepBleedInflateMatParam = 0;
            GoreManager = KFGoreManager(P.WorldInfo.MyGoreEffectManager);
            if((GoreManager != none) && GoreManager.AllowMutilation())
            {
                if((Zed.bReinitPhysAssetOnDeath && Zed.CharacterArch != none) && Zed.CharacterArch.PhysAsset != none)
                {
                    Zed.bReinitPhysAssetOnDeath = false;
                    Zed.Mesh.SetPhysicsAsset(Zed.CharacterArch.PhysAsset,, true);
                }
                if(!Zed.bIsGoreMesh)
                {
                    Zed.SwitchToGoreMesh();
                }
                Zed.ForceBreakAllConstraints();                
            }
            else
            {
                IceScalar = 0.4;
            }
            if(!IsZero(RBLinearVelocity))
            {
                P.Mesh.SetRBLinearVelocity(RBLinearVelocity, true);
            }
        }
        if(!bSkipParticles)
        {
            P.WorldInfo.MyEmitterPool.SpawnEmitter(default.FrozenShatterTemplate, P.Location, rotator(vect(0, 0, 1)));
            P.PlaySoundBase(default.ShatterSound, true,,, P.Location);
        }
    }
    MICIndex = 0;
    if(P.GetCharacterInfo() != none)
    {
        MICIndex = P.GetCharacterInfo().GoreFXMICIdx;
    }
    if(P.CharacterMICs.Length > MICIndex)
    {
        P.CharacterMICs[MICIndex].SetScalarParameterValue('Scalar_Ice', IceScalar);
    }
    I = 0;
    J0x4AF:

    if(I < 3)
    {
        if(P.ThirdPersonAttachments[I] != none)
        {
            ApplyFreeze(P.ThirdPersonAttachments[I], IceScalar);
        }
        ++ I;
        goto J0x4AF;
    }
    if(KFPawn_Monster(P) != none)
    {
        I = 0;
        J0x559:

        if(I < KFPawn_Monster(P).StaticAttachList.Length)
        {
            if(KFPawn_Monster(P).StaticAttachList[I] != none)
            {
                ApplyFreeze(KFPawn_Monster(P).StaticAttachList[I], IceScalar);
            }
            ++ I;
            goto J0x559;
        }
    }
}

static function ApplyFreeze(MeshComponent MeshToFreeze, float IceScalar)
{
    local int I;
    local MaterialInstanceConstant MIC;

    if(MeshToFreeze == none)
    {
        return;
    }
    I = 0;
    J0x1C:

    if(I < MeshToFreeze.Materials.Length)
    {
        MIC = MaterialInstanceConstant(MeshToFreeze.GetMaterial(I));
        if(MIC != none)
        {
            MIC.SetScalarParameterValue('Scalar_Ice', IceScalar);
        }
        ++ I;
        goto J0x1C;
    }
}

defaultproperties
{
    FrozenShatterTemplate=ParticleSystem'WEP_Freeze_Grenade_EMIT.FX_Freeze_Grenade_Death'
    ShatterSound=AkEvent'WW_WEP_Freeze_Grenade.Play_Freeze_Grenade_Shatter'
    EffectGroup=EEffectDamageGroup.FXG_Freeze
    FreezePower=2.5
}