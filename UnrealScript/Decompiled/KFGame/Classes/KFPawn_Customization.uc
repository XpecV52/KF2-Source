/*******************************************************************************
 * KFPawn_Customization generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_Customization extends KFPawn_Human
    native(Pawn)
    config(Game)
    hidecategories(Navigation);

struct native sReplicatedMovementData
{
    var Vector NewLocation;
    var Rotator NewRotation;

    structdefaultproperties
    {
        NewLocation=(X=0,Y=0,Z=0)
        NewRotation=(Pitch=0,Yaw=0,Roll=0)
    }
};

var repnotify sReplicatedMovementData ReplicatedMovementData;
var repnotify bool bServerHidden;
var bool bLocalHidden;
var bool bUsingCustomizationPoint;
var AnimSet MaleCustomizationAnimSet;
var AnimSet FemaleCustomizationAnimSet;

replication
{
     if(bNetInitial || bNetDirty)
        ReplicatedMovementData, bServerHidden;
}

// Export UKFPawn_Customization::execUpdateCustomizationPawnVisibility(FFrame&, void* const)
native function UpdateCustomizationPawnVisibility();

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'ReplicatedMovementData')
    {
        OnMovementDataUpdated();        
    }
    else
    {
        if(VarName == 'bServerHidden')
        {
            SetHidden(bServerHidden || bLocalHidden);
            UpdateCustomizationPawnVisibility();            
        }
        else
        {
            super.ReplicatedEvent(VarName);
        }
    }
}

function SetUpdatedMovementData(Vector NewLoc, Rotator NewRot)
{
    ReplicatedMovementData.NewLocation = NewLoc;
    ReplicatedMovementData.NewRotation = NewRot;
    OnMovementDataUpdated();
    bForceNetUpdate = true;
}

simulated function OnMovementDataUpdated()
{
    SetLocation(ReplicatedMovementData.NewLocation);
    SetRotation(ReplicatedMovementData.NewRotation);
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        UpdateCustomizationPawnVisibility();
    }
}

function SetServerHidden(bool bNewHidden)
{
    bServerHidden = bNewHidden;
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        SetHidden(bServerHidden || bLocalHidden);
        UpdateCustomizationPawnVisibility();
    }
    bForceNetUpdate = true;
}

function ClientSetRotation(Rotator NewRotation);

simulated function FaceRotation(Rotator NewRotation, float DeltaTime);

simulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)
{
    super.PostInitAnimTree(SkelComp);
    if(IKFootLeft != none)
    {
        IKFootLeft.SetSkelControlActive(false);
    }
    if(IKFootRight != none)
    {
        IKFootRight.SetSkelControlActive(false);
    }
}

simulated function SetCharacterAnimationInfo()
{
    local KFCharacterInfo_Human CharInfoHuman;

    super(KFPawn).SetCharacterAnimationInfo();
    CharInfoHuman = KFCharacterInfo_Human(GetCharacterInfo());
    if((CharInfoHuman != none) && CharInfoHuman.bIsFemale)
    {
        Mesh.AnimSets.AddItem(FemaleCustomizationAnimSet;        
    }
    else
    {
        Mesh.AnimSets.AddItem(MaleCustomizationAnimSet;
    }
    Mesh.UpdateAnimations();
    PlayRandomIdleAnimation(true);
}

function AttachWeaponByItemDefinition(int ItemDefinition)
{
    local class<KFWeaponDefinition> WeaponDef;
    local int ItemIndex;
    local KFWeaponAttachment WeaponPreview;

    ItemIndex = Class'KFWeaponSkinList'.default.Skins.Find('Id', ItemDefinition;
    if(ItemIndex == -1)
    {
        LogInternal("Could not find item" @ string(ItemDefinition));
        return;
    }
    WeaponDef = Class'KFWeaponSkinList'.default.Skins[ItemIndex].WeaponDef;
    if(WeaponDef == none)
    {
        LogInternal("Weapon def NONE for : " @ string(ItemDefinition));
        return;
    }
    WeaponPreview = KFWeaponAttachment(DynamicLoadObject(WeaponDef.default.AttachmentArchtypePath, Class'KFWeaponAttachment'));
    WeaponAttachmentTemplate = WeaponPreview;
    WeaponAttachmentChanged();
    WeaponAttachment.SetWeaponSkin(ItemDefinition);
}

simulated function PlayRandomIdleAnimation(optional bool bNewCharacter)
{
    local byte AnimIndex;
    local name AnimName;
    local AnimSet AnimSet;
    local float BlendInTime;

    AnimSet = Mesh.AnimSets[Mesh.AnimSets.Length - 1];
    AnimIndex = byte(Rand(AnimSet.Sequences.Length));
    AnimName = AnimSet.Sequences[AnimIndex].SequenceName;
    BlendInTime = ((bNewCharacter) ? 0 : 0.4);
    BodyStanceNodes[0].SetActorAnimEndNotification(false);
    BodyStanceNodes[0].PlayCustomAnim(AnimName, 1, BlendInTime, 0.4, false, true);
    BodyStanceNodes[0].SetActorAnimEndNotification(true);
}

simulated function PlayEmoteAnimation(optional bool bNewCharacter)
{
    local name AnimName;
    local float BlendInTime;

    AnimName = Class'KFEmoteList'.static.GetUnlockedEmote(Class'KFEmoteList'.static.GetEquippedEmoteId());
    BlendInTime = ((bNewCharacter) ? 0 : 0.4);
    BodyStanceNodes[0].SetActorAnimEndNotification(false);
    BodyStanceNodes[0].PlayCustomAnim(AnimName, 1, BlendInTime, 0.4, false, true);
    BodyStanceNodes[0].SetActorAnimEndNotification(true);
}

simulated event OnAnimEnd(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
    PlayRandomIdleAnimation();
}

simulated function NotifyTeamChanged()
{
    if((PlayerReplicationInfo != none) && CharacterArch == none)
    {
        SetCharacterArch(GetCharacterInfo());
    }
}

function bool MoveToCustomizationPoint()
{
    local NavigationPoint BestStartSpot;
    local KFGameInfo KFGI;
    local PlayerController PC;

    KFGI = KFGameInfo(WorldInfo.Game);
    PC = PlayerController(Controller);
    if(PC != none)
    {
        BestStartSpot = KFGI.FindCustomizationStart(PC);
        if(BestStartSpot == none)
        {
            return false;
        }
        SetUpdatedMovementData(BestStartSpot.Location, BestStartSpot.Rotation);
        KFPlayerCamera(PC.PlayerCamera).CustomizationCam.bInitialize = false;
        bUsingCustomizationPoint = true;
        return true;
    }
    return false;
}

event TakeDamage(int Damage, Controller InstigatedBy, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)
{
    return;
}

function InitializeCustomizationPawn(PlayerController NewController, NavigationPoint BestStartSpot)
{
    if(Controller != none)
    {
        Controller.UnPossess();
    }
    PossessedBy(NewController, false);
    NewController.SetViewTarget(self);
    NewController.SetCameraMode('Customization');
    bUsingCustomizationPoint = KFCustomizationPoint(BestStartSpot) != none;
    SetUpdatedMovementData(BestStartSpot.Location, BestStartSpot.Rotation);
}

function Reset();

defaultproperties
{
    MaleCustomizationAnimSet=AnimSet'CHR_BaseMale_ANIM.CS_Male'
    FemaleCustomizationAnimSet=AnimSet'CHR_BaseFemale_ANIM.CS_Female'
    begin object name=FlashLight class=KFFlashlightAttachment
        begin object name=FlashLightTemplate class=SpotLightComponent
            LightGuid=(A=0,B=0,C=0,D=0) // Ka v oh
            LightmapGuid=(A=0,B=0,C=0,D=0) // Ka v oh
        object end
        // Reference: SpotLightComponent'Default__KFPawn_Customization.FlashLight.FlashLightTemplate'
        LightTemplate=FlashLightTemplate
        begin object name=LightConeComp class=StaticMeshComponent
            ReplacementPrimitive=none
        object end
        // Reference: StaticMeshComponent'Default__KFPawn_Customization.FlashLight.LightConeComp'
        LightConeMeshComp=LightConeComp
    object end
    // Reference: KFFlashlightAttachment'Default__KFPawn_Customization.FlashLight'
    FlashLightTemplate=FlashLight
    TraderDialogAkComponent=AkComponent'Default__KFPawn_Customization.TraderDialogAkSoundComponent'
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_Customization.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    bEnableAimOffset=false
    bDisableTurnInPlace=true
    bDisableMeshRotationSmoothing=true
    AfflictionHandler=KFAfflictionManager'Default__KFPawn_Customization.Afflictions'
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_Customization.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    SpecialMoveHandler=KFSpecialMoveHandler'Default__KFPawn_Customization.SpecialMoveHandler'
    AmbientAkComponent=AkComponent'Default__KFPawn_Customization.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_Customization.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_Customization.WeaponAmbientEchoHandler'
    FootstepAkComponent=AkComponent'Default__KFPawn_Customization.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_Customization.DialogAkSoundComponent'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
        Translation=(X=0,Y=0,Z=-89)
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_Customization.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_Customization.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_Customization.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_Customization.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_Customization.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
        Translation=(X=0,Y=0,Z=-89)
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_Customization.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_Customization.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_Customization.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_Customization.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_Customization.DialogAkSoundComponent'
    Components(8)=AkComponent'Default__KFPawn_Customization.TraderDialogAkSoundComponent'
    Physics=EPhysics.PHYS_Walking
    bReplicateMovement=false
    bSkipActorPropertyReplication=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_Customization.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}