/*******************************************************************************
 * KFDT_Explosive generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDT_Explosive extends KFDamageType
    abstract;

static simulated function float GetBloodScale(float HitZoneDamageScale, bool bIsDismemberingHit, bool bWasObliterated)
{
    return default.BloodScale * ((bIsDismemberingHit || bWasObliterated) ? 2 : 1);
}

static simulated function AddBloodSpread(KFPawn_Monster inPawn, Vector HitDirection, out array<Vector> HitSpread, bool bIsDismeberingHit, bool bWasObliterated)
{
    local float PolarAngle, AzimuthAngle, RandomizedPolarAngle, RandomizedAzimuthAngle;
    local Vector SampleDir;

    PolarAngle = 3.141593 / 2;
    J0x16:

    if(PolarAngle > float(0))
    {
        AzimuthAngle = 0;
        J0x36:

        if(AzimuthAngle < ((float(2) * 3.141593) - 0.01))
        {
            RandomizedPolarAngle = PolarAngle + (0.26 - RandRange(0, 0.52));
            RandomizedAzimuthAngle = AzimuthAngle + (0.26 - RandRange(0, 0.52));
            SampleDir.X = Sin(RandomizedPolarAngle) * Cos(RandomizedAzimuthAngle);
            SampleDir.Y = Sin(RandomizedPolarAngle) * Sin(RandomizedAzimuthAngle);
            SampleDir.Z = Cos(RandomizedPolarAngle);
            HitSpread.AddItem(SampleDir;
            AzimuthAngle += (3.141593 / 4);
            goto J0x36;
        }
        PolarAngle -= (3.141593 / 4);
        goto J0x16;
    }
    HitSpread.AddItem(vect(0, 0, 1);
    if(bWasObliterated)
    {
        AzimuthAngle = 0;
        J0x1C8:

        if(AzimuthAngle < ((float(2) * 3.141593) - 0.01))
        {
            RandomizedPolarAngle = (0.8 * 3.141593) + (0.26 - RandRange(0, 0.52));
            RandomizedAzimuthAngle = AzimuthAngle + (0.26 - RandRange(0, 0.52));
            SampleDir.X = Sin(RandomizedPolarAngle) * Cos(RandomizedAzimuthAngle);
            SampleDir.Y = Sin(RandomizedPolarAngle) * Sin(RandomizedAzimuthAngle);
            SampleDir.Z = Cos(RandomizedPolarAngle);
            HitSpread.AddItem(SampleDir;
            AzimuthAngle += (3.141593 / 2);
            goto J0x1C8;
        }
        HitSpread.AddItem(vect(0, 0, -1);
    }
}

static function int GetKillerDialogID()
{
    return 84;
}

static simulated function GetBoneToDismember(KFPawn_Monster inPawn, Vector HitDirection, name InHitZoneName, out name OutBoneName)
{
    local KFCharacterInfo_Monster MonsterInfo;

    MonsterInfo = inPawn.GetCharacterMonsterInfo();
    if(MonsterInfo != none)
    {
        if(InHitZoneName == 'chest')
        {
            OutBoneName = ((Rand(2) == 0) ? MonsterInfo.SpecialMeleeDismemberment.LeftShoulderBoneName : MonsterInfo.SpecialMeleeDismemberment.RightShoulderBoneName);
        }
    }
}

defaultproperties
{
    bShouldSpawnBloodSplat=true
    bCanGib=true
    bCanObliterate=true
    GoreDamageGroup=EGoreDamageGroup.DGT_Explosive
    KnockdownPower=39
    StumblePower=59
    ObliterationHealthThreshold=-80
    ObliterationDamageThreshold=160
    bExtraMomentumZ=true
    KDamageImpulse=0
    KDeathUpKick=250
    RadialDamageImpulse=1500
}