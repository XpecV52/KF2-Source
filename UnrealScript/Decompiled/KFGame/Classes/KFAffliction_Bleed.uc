/*******************************************************************************
 * KFAffliction_Bleed generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAffliction_Bleed extends KFAfflictionAdvanced;

enum DeflateState
{
    EDS_None,
    EDS_Inflate,
    EDS_Deflate,
    EDS_MAX
};

var const float DeflateThreshold;
var const float IncapModifier;
var const float DamageModifier;
var const float SpeedModifier;
var const float AttackSpeedModifier;
var float PrevStrength;
var const float MaxDeflate;
var float CurDeflate;
var KFAffliction_Bleed.DeflateState CurrentDeflateState;
var const float DeflateChangeRate;

function float GetKnockdownModifier()
{
    if(CurrentStrength > DeflateThreshold)
    {
        return IncapModifier;
    }
    return 0;
}

function float GetStumbleModifier()
{
    if(CurrentStrength > DeflateThreshold)
    {
        return IncapModifier;
    }
    return 0;
}

function float GetStunModifier()
{
    if(CurrentStrength > DeflateThreshold)
    {
        return IncapModifier;
    }
    return 0;
}

function float GetDamageModifier()
{
    if(CurrentStrength > DeflateThreshold)
    {
        return DamageModifier;
    }
    return 0;
}

function float GetSpeedModifier()
{
    if(CurrentStrength > DeflateThreshold)
    {
        return SpeedModifier;
    }
    return 1;
}

function float GetAttackSpeedModifier()
{
    if(CurrentStrength > DeflateThreshold)
    {
        return AttackSpeedModifier;
    }
    return 1;
}

function Accrue(float InPower)
{
    super(KFAfflictionBase).Accrue(InPower);
    if(PawnOwner != none)
    {
        PawnOwner.SetAfflictionSpeedModifier();
        PawnOwner.SetAttackSpeedModifier();
    }
}

function Tick(float DeltaTime)
{
    super(KFAfflictionBase).Tick(DeltaTime);
    if(((PawnOwner != none) && CurrentStrength < DeflateThreshold) && PrevStrength > DeflateThreshold)
    {
        PawnOwner.SetAfflictionSpeedModifier();
        PawnOwner.SetAttackSpeedModifier();
    }
    UpdateDeflateMaterialParam(DeltaTime);
    PrevStrength = CurrentStrength;
}

protected function UpdateDeflateMaterialParam(float DeltaTime)
{
    MonsterOwner.UpdateBleedIncapFX();
    if(!MonsterOwner.IsAliveAndWell())
    {
        return;
    }
    switch(CurrentDeflateState)
    {
        case 0:
            CheckStateChange();
            return;
        case 1:
            CalcInflate(DeltaTime);
            break;
        case 2:
            CalcDeflate(DeltaTime);
            break;
        default:
            break;
    }
    MonsterOwner.RepBleedInflateMatParam = FloatToByte(CurDeflate);
    if(MonsterOwner.WorldInfo.NetMode != NM_DedicatedServer)
    {
        SetMaterialParameter(CurDeflate);
    }
}

protected function CheckStateChange()
{
    if(PrevStrength == CurrentStrength)
    {
        return;
    }
    if((PrevStrength > CurrentStrength) && CurrentStrength < DeflateThreshold)
    {
        CurrentDeflateState = 1;
    }
    if((PrevStrength < CurrentStrength) && CurrentStrength > DeflateThreshold)
    {
        CurrentDeflateState = 2;
    }
}

protected function CalcInflate(float DeltaTime)
{
    CurDeflate -= (DeflateChangeRate * DeltaTime);
    if(CurDeflate < float(0))
    {
        CurDeflate = 0;
        CurrentDeflateState = 0;
    }
}

protected function CalcDeflate(float DeltaTime)
{
    CurDeflate += (DeflateChangeRate * DeltaTime);
    if(CurDeflate > MaxDeflate)
    {
        CurDeflate = MaxDeflate;
        CurrentDeflateState = 0;
    }
}

function SetMaterialParameter(float ParamValue)
{
    local MaterialInstanceConstant MIC;
    local float InflateParam, DesatParam;

    if((PawnOwner.WorldInfo.NetMode != NM_DedicatedServer) && MonsterOwner != none)
    {
        InflateParam = MonsterOwner.GetCurrentInflation() * 2;
        DesatParam = FClamp(Abs(ParamValue / MaxDeflate), 0, 1);
        MonsterOwner.UpdateVisualInflation(InflateParam);
        foreach MonsterOwner.CharacterMICs(MIC,)
        {
            MIC.SetScalarParameterValue('Scalar_SkinDesat', DesatParam);            
        }        
    }
}

defaultproperties
{
    DeflateThreshold=65
    IncapModifier=0.3
    DamageModifier=-0.3
    SpeedModifier=0.7
    AttackSpeedModifier=0.8
    MaxDeflate=1
    DeflateChangeRate=0.75
    bNeedsTick=true
}