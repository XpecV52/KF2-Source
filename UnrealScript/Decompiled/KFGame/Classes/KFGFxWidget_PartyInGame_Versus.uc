/*******************************************************************************
 * KFGFxWidget_PartyInGame_Versus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxWidget_PartyInGame_Versus extends KFGFxWidget_PartyInGame within GFxMoviePlayer;

var const localized string SwitchTeamsString;
var const localized string balanceWarningString;
var GFxObject SwitchTeamsButton;
var Texture2D ZedIConTexture;
var KFGameReplicationInfo KFGRI;
var delegate<SortPlayers> __SortPlayers__Delegate;

function InitializeWidget()
{
    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    SwitchTeamsButton = GetObject("switchTeamsButton");
    super.InitializeWidget();
}

function LocalizeText()
{
    super.LocalizeText();
    SwitchTeamsButton.SetString("label", SwitchTeamsString);
}

function OneSecondLoop()
{
    super.OneSecondLoop();
    SetInt("myTeam", Outer.GetPC().PlayerReplicationInfo.GetTeamNum());
    UpdateTeams();
    UpdateBalanceWarning();
}

function UpdateBalanceWarning()
{
    if(KFGRI == none)
    {
        return;
    }
    if(KFGRI.AreTeamsOutOfBalanced())
    {
        SetString("balanceWarning", balanceWarningString);        
    }
    else
    {
        SetString("balanceWarning", "");
    }
}

function UpdateTeams()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < PlayerSlots)
    {
        if(MemberSlots[I].PRI != none)
        {
            MemberSlots[I].MemberSlotObject.SetInt("team", MemberSlots[I].PRI.GetTeamNum());
        }
        ++ I;
        goto J0x0B;
    }
}

function GetKFPRIArray(out array<KFPlayerReplicationInfo> KFPRIArray)
{
    super.GetKFPRIArray(KFPRIArray);
    if(KFPRIArray.Length > 0)
    {
        KFPRIArray.Sort(SortPlayers;
    }
}

delegate int SortPlayers(KFPlayerReplicationInfo A, KFPlayerReplicationInfo B)
{
    return ((A.GetTeamNum() > B.GetTeamNum()) ? -1 : 0);
}

function RefreshSlot(int SlotIndex, KFPlayerReplicationInfo KFPRI)
{
    local string PlayerName;
    local UniqueNetId AdminId, PlayerID;
    local bool bIsLeader, bIsMyPlayer;
    local string PerkIconPath;
    local class<KFPerk> CurrentPerkClass;
    local byte CurrentPerkLevel, CurrentTeamIndex;

    CurrentTeamIndex = KFPRI.GetTeamNum();
    PlayerID = KFPRI.UniqueId;
    OnlineLobby.GetLobbyAdmin(OnlineLobby.GetCurrentLobbyId(), AdminId);
    bIsLeader = PlayerID == AdminId;
    bIsMyPlayer = Outer.GetPC().PlayerReplicationInfo.UniqueId == PlayerID;
    UpdatePlayerReady(SlotIndex, KFPRI.bReadyToPlay && !KFGRI.bMatchHasBegun);
    if(KFPRI.Team == none)
    {
        return;
    }
    CurrentPerkClass = KFPRI.CurrentPerkClass;
    if(CurrentTeamIndex == 255)
    {
        PerkIconPath = "img://" $ PathName(ZedIConTexture);
        MemberSlots[SlotIndex].PerkClass = Class'KFPerk_Monster';
        UpdatePerk(SlotIndex, "", "", PerkIconPath);        
    }
    else
    {
        CurrentPerkLevel = KFPRI.GetActivePerkLevel();
        if(((CurrentPerkClass != none) && CurrentPerkClass != Class'KFPerk_Monster') && (MemberSlots[SlotIndex].PerkClass != CurrentPerkClass) || MemberSlots[SlotIndex].PerkLevel != CurrentPerkLevel)
        {
            MemberSlots[SlotIndex].PerkClass = CurrentPerkClass;
            MemberSlots[SlotIndex].PerkLevel = CurrentPerkLevel;
            PerkIconPath = "img://" $ CurrentPerkClass.static.GetPerkIconPath();
            UpdatePerk(SlotIndex, "", string(CurrentPerkLevel), PerkIconPath);
        }
    }
    MemberSlots[SlotIndex].bIsSlotTaken = true;
    MemberSlots[SlotIndex].PlayerUID = PlayerID;
    if((MemberSlots[SlotIndex].PRI == none) || KFPRI.UniqueId != MemberSlots[SlotIndex].PRI.UniqueId)
    {
        MemberSlots[SlotIndex].PRI = KFPRI;
        CreatePlayerOptions(KFPRI.UniqueId, SlotIndex);
        SlotChanged(SlotIndex, true, bIsMyPlayer, bIsLeader);
    }
    MemberSlots[SlotIndex].MemberSlotObject.SetString("profileImageSource", KFPC.GetSteamAvatar(KFPRI.UniqueId));
    PlayerName = KFPRI.PlayerName;
    UpdatePlayerName(SlotIndex, PlayerName);
}

defaultproperties
{
    SwitchTeamsString="Switch Teams"
    balanceWarningString="WARNING: Teams will be auto-balanced"
    ZedIConTexture=Texture2D'UI_Widgets.MenuBarWidget_SWF_IF'
    PlayerSlots=12
}