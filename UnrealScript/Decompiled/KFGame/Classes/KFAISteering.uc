/*******************************************************************************
 * KFAISteering generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAISteering extends Object
    native(AI);

enum ESteeringFlags
{
    STEERING_Default,
    STEERING_Separate,
    STEERING_MAX
};

var transient KFAIController AIController;
var transient KFPawn AIPawn;
var int SteeringFlags;
var const float UnrealAccelMaxForce;
var Vector UnrealAccel;
var const float SeparateMaxForce;
var const float DefaultSeparationDistance;
var array< class<Actor> > SeparationExcludeClasses;
var array< class<Actor> > SeparationClasses;
var array<float> SeparationDistance;

// Export UKFAISteering::execInitialize(FFrame&, void* const)
native function Initialize(Actor Owner);

// Export UKFAISteering::execAddFlag(FFrame&, void* const)
native function AddFlag(KFAISteering.ESteeringFlags Flag);

// Export UKFAISteering::execClearFlag(FFrame&, void* const)
native function ClearFlag(KFAISteering.ESteeringFlags Flag);

// Export UKFAISteering::execClearAllFlags(FFrame&, void* const)
native function ClearAllFlags();

// Export UKFAISteering::execOn(FFrame&, void* const)
native function bool On(KFAISteering.ESteeringFlags Flag);

// Export UKFAISteering::execGetAccelRate(FFrame&, void* const)
native function float GetAccelRate();

// Export UKFAISteering::execGetGroundSpeed(FFrame&, void* const)
native function float GetGroundSpeed();

// Export UKFAISteering::execOnOwnerDestroy(FFrame&, void* const)
native function OnOwnerDestroy();

// Export UKFAISteering::execCalculateAcceleration(FFrame&, void* const)
native function Vector CalculateAcceleration();

// Export UKFAISteering::execAccumulateForce(FFrame&, void* const)
native function bool AccumulateForce(out Vector TotalAccel, Vector ForceToAdd);

// Export UKFAISteering::execEnableDefaultAcceleration(FFrame&, void* const)
native function EnableDefaultAcceleration();

// Export UKFAISteering::execDisableDefaultAcceleration(FFrame&, void* const)
native function DisableDefaultAcceleration();

// Export UKFAISteering::execUnrealAccelSet(FFrame&, void* const)
native function UnrealAccelSet(Vector NewUnrealAccel);

// Export UKFAISteering::execUnrealAccelGetForce(FFrame&, void* const)
native function Vector UnrealAccelGetForce();

// Export UKFAISteering::execSeparationGetForce(FFrame&, void* const)
native function Vector SeparationGetForce();

// Export UKFAISteering::execSeparationOn(FFrame&, void* const)
native function SeparationOn(optional class<Actor> SeparateFrom, optional float DistanceToSeparate);

// Export UKFAISteering::execSeparationOff(FFrame&, void* const)
native function SeparationOff(optional class<Actor> RemoveSeparateFrom);

// Export UKFAISteering::execSeparateExclude(FFrame&, void* const)
native function SeparateExclude(optional class<Actor> ExcludeClass);

// Export UKFAISteering::execSeparateStopExclude(FFrame&, void* const)
native function SeparateStopExclude(optional class<Actor> ExcludeClass);

// Export UKFAISteering::execIsSeparationClass(FFrame&, void* const)
native function bool IsSeparationClass(class<Actor> SeparationClass, out float DistanceToSeparate);

// Export UKFAISteering::execIsClassExcluded(FFrame&, void* const)
native function bool IsClassExcluded(class<Actor> ExcludeClass);

defaultproperties
{
    UnrealAccelMaxForce=1
    SeparateMaxForce=0.75
    DefaultSeparationDistance=128
}