/*******************************************************************************
 * AICommand_PushedBySM generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AICommand_PushedBySM extends AICommand_SpecialMove within KFAIController;

var bool bAllowMeleeCombatDecisions;

static function AICommand_PushedBySM PushSpecialMoveCommand(KFAIController AI)
{
    local AICommand_PushedBySM Cmd;

    if((AI != none) && AI.MyKFPawn != none)
    {
        Cmd = new (AI) default.Class;
        if(Cmd != none)
        {
            Cmd.SpecialMove = AI.MyKFPawn.SpecialMove;
            Cmd.TimeOutDelaySeconds = AI.MyKFPawn.SpecialMoves[AI.MyKFPawn.SpecialMove].AITimeout;
            AI.PushCommand(Cmd);
            return Cmd;
        }
    }
    return none;
}

event string GetDumpString()
{
    return (super(GameAICommand).GetDumpString() @ "SpecialMove") @ string(SpecialMove);
}

function bool AllowTransitionTo(class<GameAICommand> AttemptCommand)
{
    return false;
}

function Pushed()
{
    super.Pushed();
    Outer.AILog_Internal(("Waiting for SM" @ string(SpecialMove)) @ "to finish.", 'Command_PushedBySM');
    GotoState('WaitForMove');
}

function Popped()
{
    Outer.ClearTimer('SpecialMoveTimeout', self);
    super.Popped();
}

function SpecialMoveTimeout()
{
    return;
    Outer.AILog_Internal(string(self) $ " Special move timed out", 'Command_PushedBySM');
    if(Outer.MyKFPawn.SpecialMove == SpecialMove)
    {
        Outer.MyKFPawn.EndSpecialMove();
    }
    Status = 'Failure';
    Outer.AbortCommand(self);
}

state WaitForMove extends DebugState
{
    function bool IsSpecialMoveComplete()
    {
        if((!Outer.bPreparingMove || Outer.MyKFPawn == none) || Outer.MyKFPawn.SpecialMove != SpecialMove)
        {
            return true;
        }
        return false;
    }
Begin:

    Outer.SetTimer(TimeOutDelaySeconds, false, 'SpecialMoveTimeout', self);
    J0x2C:

    Outer.Sleep(0.1);
    if(!(IsSpecialMoveComplete()))
        goto J0x2C;
    Outer.AILog_Internal(((((("bPreparingMove:" @ string(Outer.bPreparingMove)) @ "MyKFPawn:") @ string(Outer.MyKFPawn)) @ "SpecialMove:") @ string(Outer.MyKFPawn.SpecialMove)) @ string(SpecialMove), 'Command_PushedBySM');
    Status = 'Success';
    Outer.PopCommand(self);
    stop;                    
}
