/*******************************************************************************
 * KFCharacterInfo_Monster generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFCharacterInfo_Monster extends KFCharacterInfoBase
    native(Pawn)
    hidecategories(Object);

struct native DoorSoundFx
{
    var() AkEvent Metal;
    var() AkEvent Wood;

    structdefaultproperties
    {
        Metal=none
        Wood=none
    }
};

struct native ZedDifficultySettings
{
    /** The individual health modifier for this zed type */
    var() float HealthMod;
    /** The individual head health modifier for this zed type */
    var() float HeadHealthMod;
    /** The chance that a zed can use sprinting at a specific difficulty */
    var() float SprintChance;
    /** The chance that a zed will start sprinting when damaged */
    var() float DamagedSprintChance;
    /** A per zed damage mod configurable by difficulty */
    var() float DamageMod;
    /** A per zed damage mod configurable by difficulty when playing solo/offline */
    var() float SoloDamageMod;

    structdefaultproperties
    {
        HealthMod=1
        HeadHealthMod=1
        SprintChance=0
        DamagedSprintChance=0
        DamageMod=1
        SoloDamageMod=1
    }
};

struct native MeleeSpecialDismembermentInfo
{
    /** Settings for special melee dismeberment such as being able to split a character in half */
    var() bool bAllowHorizontalSplit;
    /** Settings for special melee dismeberment such as being able to split a character in half */
    var() name SpineBoneName<EditCondition=bAllowHorizontalSplit>;
    /** Settings for special melee dismeberment such as being able to split a character in half */
    var() bool bAllowVerticalSplit;
    /** Settings for special melee dismeberment such as being able to split a character in half */
    var() name LeftShoulderBoneName<EditCondition=bAllowVerticalSplit>;
    /** Settings for special melee dismeberment such as being able to split a character in half */
    var() name RightShoulderBoneName<EditCondition=bAllowVerticalSplit>;

    structdefaultproperties
    {
        bAllowHorizontalSplit=false
        SpineBoneName=None
        bAllowVerticalSplit=false
        LeftShoulderBoneName=None
        RightShoulderBoneName=None
    }
};

/** Character mesh to use */
var(ThirdPerson) SkeletalMesh CharacterMesh<DisplayName=Body Mesh>;
var(Versus) array<MaterialInterface> PlayerControlledSkins;
var(Versus) array<MaterialInterface> PlayerControlledGoreSkins;
/** Aggressively optimized mesh for the server with minimal bones */
var(Performance) SkeletalMesh ServerMesh;
var(Audio) DoorSoundFx DoorHitSound;
/** ZedDifficultySettings struct for Normal difficulty level */
var(Difficulty) ZedDifficultySettings Normal;
/** ZedDifficultySettings struct for Hard difficulty level */
var(Difficulty) ZedDifficultySettings Hard;
/** ZedDifficultySettings struct for Suicidal difficulty level */
var(Difficulty) ZedDifficultySettings Suicidal;
/** ZedDifficultySettings struct for HellOnEarth difficulty level */
var(Difficulty) ZedDifficultySettings HellOnEarth;
/** Add an additional percentage of body health per player beyond 1 player. */
var(Difficulty) float NumPlayersScale_BodyHealth;
/** Add an additional percentage of head health per player beyond 1 player. */
var(Difficulty) float NumPlayersScale_HeadHealth;
/** Alterantive health scaling for player controlled zeds (versus mode */
var(Versus) float NumPlayersScale_BodyHealth_Versus;
var(Versus) float NumPlayersScale_HeadHealth_Versus;
var MaterialInstance BloodSplatterDecalMaterial;
/** Gore mesh with alternate bone weights */
var(Gore) SkeletalMesh GoreMesh;
/**  
 *Gore settings for bones that can be dismembered.
 *       ALL HITZONE BONES MUST BE INCLUDED EVEN IF THEY CANNOT BE DISMEMBERED
 */
var(Gore) editinline array<editinline KFGoreJointInfo> GoreJointSettings;
/** Gore chunk attachment settings for the mesh */
var(Gore) editinline array<editinline KFGoreChunkAttachmentInfo> GoreChunkAttachments;
/** Giblets to spawn on obliteration */
var(Gore) editinline array<editinline KFGibletInfo> GibletSettings;
/** Use for special melee dismeberment settings such as being able to split a character in half */
var(Gore) MeleeSpecialDismembermentInfo SpecialMeleeDismemberment;
/** Additional particle effect to be spawned for an explosion (if any) */
var(Gore) ParticleSystem ExplosionEffectTemplate<DisplayName=Gib Explosion Template>;
/** Particle effect to be spawned on obliteration */
var(Gore) ParticleSystem ObliterationEffectTemplate<DisplayName=Obliteration Effect Template>;
/** Particle effect to be spawned when knocked down, stunned, etc */
var(Stun) ParticleSystem DazedEffectTemplate<DisplayName=Stunned/Knocked Down Effect Template>;
/**  
 *Use to scale the number of gibs when the character explodes. Values greater than 1
 *       scale up, and values smaller than 0 scale down. Must be greater than 0. This is for
 *       actual grenade (or other explosive) based explosions. It has no effect on explosions
 *       triggered by Explosion Joints
 */
var(Gore) float ExplosionGibScale<DisplayName=Num Gibs Scale|UIMin=0|ClampMin=0|UIMax=10.0|ClampMax=10.0>;
/**  
 *Use to scale the impulse applied to gibs when the character explodes. Values greater than 1
 *       scale up, and values smaller than 0 scale down. Must be greater than 0. This affects both
 *       grenade based explosions and explosions triggered by Explosion Joints
 */
var(Gore) float ExplosionImpulseScale<DisplayName=Gib Impulse Scale|UIMin=0|ClampMin=0|UIMax=20.0|ClampMax=20.0>;

simulated function SetCharacterMeshFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI)
{
    local int I;

    super.SetCharacterMeshFromArch(KFP, KFPRI);
    if(CharacterMesh != none)
    {
        KFP.DetachComponent(KFP.ThirdPersonHeadMeshComponent);
        I = 0;
        J0x74:

        if(I < 3)
        {
            KFP.DetachComponent(KFP.ThirdPersonAttachments[I]);
            ++ I;
            goto J0x74;
        }
        if((KFP.WorldInfo.NetMode == NM_DedicatedServer) && ServerMesh != none)
        {
            KFP.Mesh.SetSkeletalMesh(ServerMesh);            
        }
        else
        {
            KFP.Mesh.SetSkeletalMesh(CharacterMesh);
        }
        KFP.Mesh.SetScale(DefaultMeshScale);
        if(KFP.UsePlayerControlledZedSkin())
        {
            I = 0;
            J0x211:

            if(I < PlayerControlledSkins.Length)
            {
                KFP.Mesh.SetMaterial(I, PlayerControlledSkins[I]);
                ++ I;
                goto J0x211;
            }
        }
    }
    if((KFP.WorldInfo.NetMode != NM_DedicatedServer) && KFP.Mesh != none)
    {
        KFP.CharacterMICs.Length = 0;
        KFP.CharacterMICs[0] = KFP.Mesh.CreateAndSetMaterialInstanceConstant(0);
    }
}

defaultproperties
{
    Normal=(HealthMod=1,HeadHealthMod=1,SprintChance=0,DamagedSprintChance=0,DamageMod=0.5,SoloDamageMod=1)
    Hard=(HealthMod=1,HeadHealthMod=1,SprintChance=0,DamagedSprintChance=0,DamageMod=1,SoloDamageMod=1)
    Suicidal=(HealthMod=1,HeadHealthMod=1,SprintChance=0,DamagedSprintChance=0,DamageMod=1.25,SoloDamageMod=1)
    HellOnEarth=(HealthMod=1,HeadHealthMod=1,SprintChance=0,DamagedSprintChance=0,DamageMod=1.75,SoloDamageMod=1)
    ExplosionGibScale=1
    ExplosionImpulseScale=1
}