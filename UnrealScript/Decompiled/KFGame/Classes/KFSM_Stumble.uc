/*******************************************************************************
 * KFSM_Stumble generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Stumble extends KFSM_PlaySingleAnim;

enum EStubmleAnim
{
    ESA_Body_Forward,
    ESA_Body_Backward,
    ESA_Body_Left,
    ESA_Body_Right,
    ESA_Leg_L_Forward,
    ESA_Leg_L_Backward,
    ESA_Leg_L_Left,
    ESA_Leg_L_Right,
    ESA_Leg_R_Forward,
    ESA_Leg_R_Backward,
    ESA_Leg_R_Left,
    ESA_Leg_R_Right,
    ESA_Parry,
    ESA_MAX
};

static function bool ShouldDoLegStumble(KFPawn P, KFAfflictionManager.EHitZoneBodyPart HitZoneLimb)
{
    if((HitZoneLimb == 4) || HitZoneLimb == 5)
    {
        return VSizeSq(P.Velocity) > 100;
    }
    return false;
}

static function byte PackBodyHitSMFlags(KFPawn P, Vector HitDir)
{
    local KFPawn.EPawnOctant HitRegion;
    local byte Type;

    HitRegion = P.CalcOctagonRegion(P.Rotation, -Normal(HitDir));
    Type = GetStumbleTypeFromRegion(HitRegion);
    return byte(Type + (GetRandomVariant(P, Type) << 4));
}

static function byte PackLegHitSMFlags(KFPawn P, Vector HitDir, bool bLeftLeg)
{
    local KFPawn.EPawnOctant HitRegion;
    local byte Type;

    if(P.Floor.Z < 0.98)
    {
        HitRegion = P.CalcOctagonRegion(P.Rotation, Normal2D(P.Floor));
        Type = GetStumbleTypeFromRegion(HitRegion);        
    }
    else
    {
        HitRegion = P.CalcOctagonRegion(P.Rotation, -Normal(HitDir));
        Type = GetStumbleTypeFromRegion(HitRegion, true);
    }
    if(bLeftLeg)
    {
        Type += byte(4);        
    }
    else
    {
        Type += byte(8);
    }
    return byte(Type + (GetRandomVariant(P, Type) << 4));
}

static function byte PackParrySMFlags(KFPawn P, Vector HitDir)
{
    return byte(12 + (GetRandomVariant(P, 12) << 4));
}

static function byte PackRandomSMFlags(KFPawn P)
{
    local byte Type;

    Type = byte(Rand(13));
    return byte(Type + (GetRandomVariant(P, Type) << 4));
}

static function byte GetRandomVariant(KFPawn P, byte Type)
{
    local int NumVariants;

    NumVariants = P.PawnAnimInfo.StumbleAnims[Type].Anims.Length;
    return byte(Rand(NumVariants));
}

static function byte GetStumbleTypeFromRegion(KFPawn.EPawnOctant HitRegion, optional bool bRandomReverse)
{
    if(bRandomReverse)
    {
        switch(HitRegion)
        {
            case 0:
            case 1:
                return byte(((FRand() > 0.5) ? 0 : 1));
            case 2:
            case 3:
                return byte(((FRand() > 0.5) ? 2 : 3));
            case 4:
            case 5:
            case 6:
            case 7:
                return byte(0 + Rand(4));
            default:
                break;
                break;
        }
    }
    switch(HitRegion)
    {
        case 0:
            return 0;
        case 4:
            return byte(((FRand() > 0.5) ? 0 : 2));
        case 5:
            return byte(((FRand() > 0.5) ? 0 : 3));
        case 1:
            return 1;
        case 6:
            return byte(((FRand() > 0.5) ? 1 : 2));
        case 7:
            return byte(((FRand() > 0.5) ? 1 : 3));
        case 2:
            return 2;
        case 3:
            return 3;
        default:
            return 0;
            break;
    }
}

protected function bool InternalCanDoSpecialMove()
{
    return (!KFPOwner.IsImpaired() || KFPOwner.IsHeadless()) && (PawnOwner.Physics == 1) || ((PawnOwner.Physics == 2) && Abs(PawnOwner.Velocity.Z) < float(250)) && VSize2D(PawnOwner.Velocity) < float(600);
}

function PlayAnimation()
{
    local byte Type, Variant;

    Type = byte(KFPOwner.SpecialMoveFlags & 15);
    Variant = byte(KFPOwner.SpecialMoveFlags >> 4);
    AnimName = KFPOwner.PawnAnimInfo.StumbleAnims[Type].Anims[Variant];
    PlaySpecialMoveAnim(AnimName, 0, BlendInTime, BlendOutTime, 1);
    KFPOwner.SpecialMoveFlags = 255;
    if(KFPOwner.Role == ROLE_Authority)
    {
        bCanBeInterrupted = false;
        KFPOwner.SetTimer(RandRange(0.5, 0.75), false, 'EnableInterrupt', self);
    }
}

function EnableInterrupt()
{
    bCanBeInterrupted = true;
}

function SpecialMoveFlagsUpdated()
{
    PlayAnimation();
}

defaultproperties
{
    bUseRootMotion=true
    BlendOutTime=0.2
    AbortBlendOutTime=0.1
    bCanOnlyWanderAtEnd=true
    bDisablesWeaponFiring=true
    AITimeout=5
    DefaultAICommandClass=Class'AICommand_Stumble'
    Handle=KFSM_Stumble
}