/*******************************************************************************
 * KFGFxTraderContainer_Store generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxTraderContainer_Store extends KFGFxObject_Container within GFxMoviePlayer;

var KFGFxMenu_Trader MyTraderMenu;
var array<STraderItem> SlotsItemList;
var const localized string TraderString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    MyTraderMenu = KFGFxMenu_Trader(NewParentMenu);
    SetString("shopHeaderName", TraderString);
    SetString("cancelPromptName", Class'KFCommon_LocalizedStrings'.default.CancelString);
    Outer.GetPC().SetTimer(0.1, false, 'DelayedRefresh', self);
}

function DelayedRefresh()
{
    MyTraderMenu.RefreshShopItemList(MyTraderMenu.CurrentTab, byte(MyTraderMenu.CurrentFilterIndex));
    SetSelectedIndex(0);
}

function OnTraderReopened();

function SetSelectedIndex(int SelectedIndex)
{
    SetInt("selectedIndex", SelectedIndex);
}

function RefreshWeaponListByPerk(byte FilterIndex, out array<STraderItem> ItemList)
{
    local int I, SlotIndex;
    local GFxObject ItemDataArray;
    local array<STraderItem> FullItemList;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        SlotIndex = 0;
        ItemList.Length = 0;
        ItemDataArray = Outer.CreateArray();
        if(FilterIndex < KFPC.PerkList.Length)
        {
            FullItemList = MyTraderMenu.TraderItems.GetWeaponListByPerk(KFPC.PerkList[FilterIndex].PerkClass);            
        }
        else
        {
            FullItemList = MyTraderMenu.TraderItems.OffPerkItems;
        }
        I = 0;
        J0x176:

        if(I < FullItemList.Length)
        {
            if(IsItemFiltered(FullItemList[I]))
            {
                goto J0x20E;                
            }
            else
            {
                ItemList.AddItem(FullItemList[I];
                SetItemInfo(ItemDataArray, FullItemList[I], SlotIndex);
                ++ SlotIndex;
            }
            J0x20E:

            ++ I;
            goto J0x176;
        }
        SetObject("shopData", ItemDataArray);
    }
}

function RefreshItemsByType(byte FilterIndex, out array<STraderItem> ItemList)
{
    local int I, SlotIndex;
    local GFxObject ItemDataArray;
    local array<STraderItem> FullItemList;

    SlotIndex = 0;
    ItemList.Length = 0;
    ItemDataArray = Outer.CreateArray();
    GetAllWeapons(FullItemList);
    I = 0;
    J0x5E:

    if(I < FullItemList.Length)
    {
        if((IsItemFiltered(FullItemList[I])) || FilterIndex != FullItemList[I].FilterType)
        {
            goto J0x130;            
        }
        else
        {
            ItemList.AddItem(FullItemList[I];
            SetItemInfo(ItemDataArray, FullItemList[I], SlotIndex);
            ++ SlotIndex;
        }
        J0x130:

        ++ I;
        goto J0x5E;
    }
    SetObject("shopData", ItemDataArray);
}

function RefreshFavoriteItems(out array<STraderItem> ItemList)
{
    local int I, SlotIndex;
    local GFxObject ItemDataArray;
    local array<STraderItem> FullItemList;

    SlotIndex = 0;
    ItemList.Length = 0;
    ItemDataArray = Outer.CreateArray();
    GetAllWeapons(FullItemList);
    I = 0;
    J0x5E:

    if(I < FullItemList.Length)
    {
        if((IsItemFiltered(FullItemList[I])) || !MyTraderMenu.GetIsFavorite(FullItemList[I].ClassName))
        {
            goto J0x142;            
        }
        else
        {
            ItemList.AddItem(FullItemList[I];
            SetItemInfo(ItemDataArray, FullItemList[I], SlotIndex);
            ++ SlotIndex;
        }
        J0x142:

        ++ I;
        goto J0x5E;
    }
    SetObject("shopData", ItemDataArray);
}

function RefreshAllItems(out array<STraderItem> ItemList)
{
    local int I, SlotIndex;
    local GFxObject ItemDataArray;
    local array<STraderItem> FullItemList;

    SlotIndex = 0;
    ItemList.Length = 0;
    ItemDataArray = Outer.CreateArray();
    GetAllWeapons(FullItemList);
    I = 0;
    J0x5E:

    if(I < FullItemList.Length)
    {
        if(IsItemFiltered(FullItemList[I]))
        {
            goto J0xF6;            
        }
        else
        {
            ItemList.AddItem(FullItemList[I];
            SetItemInfo(ItemDataArray, FullItemList[I], SlotIndex);
            ++ SlotIndex;
        }
        J0xF6:

        ++ I;
        goto J0x5E;
    }
    SetObject("shopData", ItemDataArray);
}

function GetAllWeapons(out array<STraderItem> FullItemList)
{
    local int I, J;
    local array<STraderItem> PerkItemList;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        I = 0;
        J0x4C:

        if(I < KFPC.PerkList.Length)
        {
            PerkItemList = MyTraderMenu.TraderItems.GetWeaponListByPerk(KFPC.PerkList[I].PerkClass);
            J = 0;
            J0xFD:

            if(J < PerkItemList.Length)
            {
                FullItemList.AddItem(PerkItemList[J];
                ++ J;
                goto J0xFD;
            }
            ++ I;
            goto J0x4C;
        }
        I = 0;
        J0x15C:

        if(I < MyTraderMenu.TraderItems.OffPerkItems.Length)
        {
            FullItemList.AddItem(MyTraderMenu.TraderItems.OffPerkItems[I];
            ++ I;
            goto J0x15C;
        }
    }
}

function SetItemInfo(out GFxObject ItemDataArray, out STraderItem TraderItem, int SlotIndex)
{
    local GFxObject SlotObject;
    local string ItemString, ItemTexPath, IconPath;
    local bool bCanAfford, bCanCarry;
    local int AdjustedBuyPrice;

    SlotObject = Outer.CreateObject("Object");
    ItemString = string(TraderItem.ClassName);
    ItemTexPath = "img://" $ TraderItem.TextureLocation;
    IconPath = "img://" $ TraderItem.PerkIconString;
    SlotObject.SetString("weaponSource", ItemTexPath);
    SlotObject.SetString("perkIconSource", IconPath);
    SlotObject.SetString("weaponName", Localize(ItemString, "ItemName", "KFGameContent"));
    SlotObject.SetString("weaponType", Localize(ItemString, "ItemCategory", "KFGameContent"));
    SlotObject.SetInt("weaponWeight", TraderItem.BlocksRequired);
    AdjustedBuyPrice = MyTraderMenu.GetAdjustedBuyPriceFor(TraderItem);
    SlotObject.SetInt("weaponCost", AdjustedBuyPrice);
    bCanAfford = GetCanAfford(AdjustedBuyPrice);
    bCanCarry = CanCarry(TraderItem.BlocksRequired);
    SlotObject.SetBool("bCanAfford", bCanAfford);
    SlotObject.SetBool("bCanCarry", bCanCarry);
    ItemDataArray.SetElementObject(SlotIndex, SlotObject);
}

function bool IsItemFiltered(const out STraderItem Item)
{
    if(IsItemInInventory(Item.ClassName))
    {
        return true;
    }
    if(IsItemInInventory(Item.DualClassName))
    {
        return true;
    }
    if(!Item.bSellable)
    {
        return true;
    }
    if((Item.SharedUnlockId != 0) && !Class'KFUnlockManager'.static.IsSharedContentUnlocked(Item.SharedUnlockId))
    {
        return true;
    }
    return false;
}

function bool IsItemInInventory(name ItemName)
{
    local int I;
    local name OwnedItemClassName;

    I = 0;
    J0x0B:

    if(I < MyTraderMenu.OwnedItemList.Length)
    {
        OwnedItemClassName = MyTraderMenu.OwnedItemList[I].DefaultItem.ClassName;
        if(OwnedItemClassName == ItemName)
        {
            return true;
        }
        ++ I;
        goto J0x0B;
    }
    return false;
}

function bool GetCanAfford(int BuyPrice)
{
    if(BuyPrice > MyTraderMenu.TotalDosh)
    {
        return false;
    }
    return true;
}

function bool CanCarry(byte BlocksRequired)
{
    if((MyTraderMenu.TotalBlocks + BlocksRequired) > MyTraderMenu.MaxBlocks)
    {
        return false;
    }
    return true;
}

defaultproperties
{
    TraderString="PURCHASE GEAR"
}