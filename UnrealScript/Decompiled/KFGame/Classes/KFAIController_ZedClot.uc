/*******************************************************************************
 * KFAIController_ZedClot generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAIController_ZedClot extends KFAIController_Monster
    abstract
    native(AI)
    config(AI)
    hidecategories(Navigation);

event RunOverWarning(KFPawn IncomingKFP, float IncomingSpeed, Vector IncomingDir)
{
    if(CanEvade())
    {
        DoEvade(GetBestEvadeDir(IncomingKFP.Location, IncomingKFP, true),,, true);
    }
}

function bool ShouldSprint()
{
    if((((MyKFPawn != none) && MyKFPawn.IsAliveAndWell()) && Enemy != none) && Enemy.IsAliveAndWell())
    {
        if(MyKFPawn.bCanSprint || MyKFPawn.bCanSprintWhenDamaged && MyKFPawn.Health < MyKFPawn.HealthMax)
        {
            return true;
        }
    }
    return false;
}

function bool CanDoStrike()
{
    if(CanGrabAttack())
    {
        return false;
    }
    return super.CanDoStrike();
}

event DoGrabAttack(optional Pawn NewEnemy, optional Actor InTarget, optional float InPostSpecialMoveSleepTime)
{
    InPostSpecialMoveSleepTime = 0;
    if((CommandList == none) || AICommand(CommandList).bAllowedToAttack)
    {
        if(NewEnemy != none)
        {
            SetEnemy(NewEnemy);
        }
        ClearMovementInfo(true, "Aborted For GrabAttack");
        AILog_Internal(string(GetFuncName()) $ "() Init AICommand_Attack_Grab", 'InitAICommand');
        Class'AICommand_Attack_Grab'.static.Grab(self, KFPawn(InTarget), InPostSpecialMoveSleepTime);        
    }
    else
    {
        if((CommandList != none) && !AICommand(CommandList).bAllowedToAttack)
        {
            AILog_Internal(((string(GetFuncName()) $ "() not doing grab attack because current command (") $ string(CommandList)) $ ") will not allow it", 'GrabAttack');
        }
    }
}

defaultproperties
{
    bIsProbingMeleeRangeEvents=true
    SprintWithinEnemyRange=(X=600,Y=1200)
}