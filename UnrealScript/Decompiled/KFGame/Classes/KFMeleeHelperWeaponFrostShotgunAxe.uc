/*******************************************************************************
 * KFMeleeHelperWeaponFrostShotgunAxe generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMeleeHelperWeaponFrostShotgunAxe extends KFMeleeHelperWeapon within KFWeapon;

var bool bIcedEnemy;
var ParticleSystem ChargedEffect;
var export editinline ParticleSystemComponent FullyChargedPSC;
var AkEvent oFrozenSound;
var AkEvent oHitSoundAkEvent;

simulated function PawnTakeDamage(ImpactInfo Impact, byte FiringMode, Vector Momentum)
{
    local int InstantDamage;

    bIcedEnemy = false;
    if(Impact.HitActor.IsA('KFPawn_Monster'))
    {
        if(KFPawn_Monster(Impact.HitActor).IsDoingSpecialMove(9))
        {
            bIcedEnemy = true;
        }
    }
    InstantDamage = Outer.GetMeleeDamage(FiringMode, Impact.RayDir);
    Impact.HitActor.TakeDamage(InstantDamage, Outer.Instigator.Controller, Impact.HitLocation, Momentum, GetDamageType(FiringMode), Impact.HitInfo, Outer);
}

simulated function bool IsEnemyIced()
{
    return bIcedEnemy;
}

simulated function BeginMeleeAttack(optional bool bIsChainAttack)
{
    local Pawn P;
    local KFPawn_Monster KFPM;
    local Vector Projection;
    local float MeleeDuration;

    bHasAlreadyHit = false;
    bHitEnemyThisAttack = false;
    if(((Outer.Instigator != none) && Outer.Instigator.Controller != none) && KFPlayerController(Outer.Instigator.Controller) != none)
    {
        KFPlayerController(Outer.Instigator.Controller).AddShotsFired(1);
    }
    bResetChainSequence = false;
    CurrentAttackDir = ((Outer.CurrentFireMode == Outer.6) ? 8 : GetNextAttackDir());
    if(Outer.WorldInfo.NetMode != NM_Client)
    {
        foreach Outer.WorldInfo.AllPawns(Class'Pawn', P)
        {
            if(((P.GetTeamNum() != Outer.Instigator.GetTeamNum()) && P.IsAliveAndWell()) && !P.IsHumanControlled())
            {
                Projection = Outer.Instigator.Location - P.Location;
                if(VSizeSq(Projection) <= Square(MaxHitRange + P.CylinderComponent.CollisionRadius))
                {
                    KFPM = KFPawn_Monster(P);
                    if((KFPM != none) && KFPM.MyKFAIC != none)
                    {
                        KFPM.MyKFAIC.ReceiveMeleeWarning(CurrentAttackDir, Projection, Outer.Instigator);
                    }
                }
            }            
        }        
    }
    MeleeDuration = PlayMeleeAttackAnimation();
    if(MeleeDuration > 0)
    {
        Outer.SetTimer(MeleeDuration + Outer.WorldInfo.DeltaSeconds, false, 'MeleeCheckTimer', self);
        if(bUseMeleeHitTimer && InitialImpactDelay > 0)
        {
            ImpactComplete_ActorTime = -1;
            Outer.SetTimer(InitialImpactDelay, false, 'MeleeImpactTimer', self);
        }        
    }
    else
    {
        WarnInternal("MeleeDuration is zero!!!");
        Outer.SetTimer(0.001, false, 'HandleFinishedFiring');
    }
}

simulated function PlayMeleeHitEffects(Actor Target, Vector HitLocation, Vector HitDirection, optional bool bShakeInstigatorCamera)
{
    bShakeInstigatorCamera = true;
    if(Outer.WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(Outer.Instigator.IsFirstPerson())
        {
            PlayerController(Outer.Instigator.Controller).ClientPlayCameraShake(MeleeImpactCamShake, MeleeImpactCamShakeScale, true, 2, rotator(-HitDirection));
            if(Target.IsA('Pawn'))
            {
                Outer.AddBlood(0.01, 0.1);
                if(KFPawn_Monster(Target).IsDoingSpecialMove(9))
                {
                    if(IsZero(HitDirection) && Outer.Instigator != none)
                    {
                        HitDirection = Normal(Outer.Instigator.Location - HitLocation);
                    }
                    Outer.WorldInfo.MyEmitterPool.SpawnEmitter(ChargedEffect, HitLocation, rotator(HitDirection), Target);
                    Outer.Instigator.PlayAkEvent(oFrozenSound);
                    Outer.Instigator.PlayAkEvent(oHitSoundAkEvent);
                }
            }
        }
        if(!Target.bCanBeDamaged && Target.IsA('Pawn'))
        {
            KFImpactEffectManager(Outer.WorldInfo.MyImpactEffectManager).PlayImpactEffects(HitLocation, Outer.Instigator, HitDirection, WorldImpactEffects);
        }
    }
}

defaultproperties
{
    ChargedEffect=ParticleSystem'WEP_Frost_Shotgun_Axe_EMIT.FX_FrostFang_Melee_ImpactFrozen_01'
    oFrozenSound=AkEvent'WW_WEP_SA_CompoundBow.Play_Arrow_Impact_Cryo'
    oHitSoundAkEvent=AkEvent'WW_WEP_FrostFang.Play_FrostFang_Base_Impact'
    HitboxBoneName=RW_Weapon
    MeleeVictimCamShake=CameraShake'Default__KFMeleeHelperWeaponFrostShotgunAxe.MeleeImpactCamShake0'
}