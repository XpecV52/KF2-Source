/*******************************************************************************
 * KFGameplayPoolManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameplayPoolManager extends Actor
    notplaceable
    hidecategories(Navigation);

enum eProjectilePoolType
{
    PPT_C4,
    PPT_PukeMine,
    PPT_MAX
};

var protected const byte MAX_ACTIVE_C4;
var protected const byte MAX_ACTIVE_PUKE_MINES;
var protected transient array<KFProjectile> ActiveC4;
var protected transient array<KFProjectile> ActivePukeMines;

static function KFGameplayPoolManager GetPoolManager()
{
    return KFGameplayPoolManager(Class'WorldInfo'.static.GetWorldInfo().MyGameplayPoolManager);
}

function AddProjectileToPool(KFProjectile Proj, KFGameplayPoolManager.eProjectilePoolType PoolType)
{
    switch(PoolType)
    {
        case 0:
            AddProjectileToPool_Internal(ActiveC4, Proj, MAX_ACTIVE_C4);
            break;
        case 1:
            AddProjectileToPool_Internal(ActivePukeMines, Proj, MAX_ACTIVE_PUKE_MINES);
            break;
        default:
            break;
    }
}

function RemoveProjectileFromPool(KFProjectile Proj, KFGameplayPoolManager.eProjectilePoolType PoolType)
{
    switch(PoolType)
    {
        case 0:
            RemoveProjectileFromPool_Internal(ActiveC4, Proj);
            break;
        case 1:
            RemoveProjectileFromPool_Internal(ActivePukeMines, Proj);
            break;
        default:
            break;
    }
}

private final function AddProjectileToPool_Internal(out array<KFProjectile> PoolProjectiles, KFProjectile Proj, byte MaxActiveProjectiles)
{
    if(PoolProjectiles.Length == MaxActiveProjectiles)
    {
        if(PoolProjectiles[0] != none)
        {
            PoolProjectiles[0].Detonate();
        }
        PoolProjectiles.Remove(0, 1;
    }
    PoolProjectiles.AddItem(Proj;
}

private final function RemoveProjectileFromPool_Internal(out array<KFProjectile> PoolProjectiles, KFProjectile Proj)
{
    PoolProjectiles.RemoveItem(Proj;
}

event Reset()
{
    ActivePukeMines.Length = 0;
    ActiveC4.Length = 0;
}

defaultproperties
{
    MAX_ACTIVE_C4=24
    MAX_ACTIVE_PUKE_MINES=24
    bTickIsDisabled=true
}