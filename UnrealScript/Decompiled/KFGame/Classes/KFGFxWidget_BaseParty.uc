/*******************************************************************************
 * KFGFxWidget_BaseParty generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxWidget_BaseParty extends KFGFxObject_Container within GFxMoviePlayer;

enum EProfileOption
{
    EAdd_Friend,
    EToggle_Mute,
    EKick_Player,
    EView_Profile,
    EProfileOption_MAX
};

struct SMemberSlot
{
    var bool bIsSlotTaken;
    var bool bIsReady;
    var bool bIsLeader;
    var byte PerkLevel;
    var Texture2D Avatar;
    var class<KFPerk> PerkClass;
    var UniqueNetId PlayerUID;
    var transient GFxObject MemberSlotObject;
    var transient GFxObject PlayerNameTextField;
    var PlayerReplicationInfo PRI;

    structdefaultproperties
    {
        bIsSlotTaken=false
        bIsReady=false
        bIsLeader=false
        PerkLevel=0
        Avatar=none
        PerkClass=none
        PlayerUID=(Uid=none)
        MemberSlotObject=none
        PlayerNameTextField=none
        PRI=none
    }
};

var const localized string ReadyString;
var const localized string LeaveString;
var const localized string DefaultPlayerName;
var const localized string SquadString;
var const localized string SoloString;
var const localized string CreatePartyString;
var const localized string WaitingString;
var const localized string DeployingString;
var const localized string PlayerReadyString;
var const localized string PartyLeaderString;
var const localized string MuteString;
var const localized string UnmuteString;
var const localized string AddFriendString;
var const localized string RemoveFriendString;
var const localized string ViewProfileString;
var const localized string VoteKickString;
var const localized string PartyLeaderSearchingForMatchString;
var const localized string PartyLeaderIsUpdatingMatchOptionsString;
var const localized string PartyLeaderInServerBrowserString;
var const localized string PartyLeaderInOtherMenuString;
var const localized string SearchingForGameString;
var const localized string PartHostLeftString;
var const localized string PartyLeaderChangedString;
var const localized string DownLoadingString;
var const localized string RemainingString;
var array<string> ProfileOptions;
var OnlineSubsystem OnlineSub;
var TWOnlineLobby OnlineLobby;
var bool bInLobby;
var bool bReadyButtonVisible;
var KFPlayerController KFPC;
var KFGFxHUD_ChatBoxWidget PartyChatWidget;
var const string PerkPrefix;
var const string SearchingPrefix;
var const string ServerBrowserOpen;
var const string SearchingForGame;
var const string UpdatingOptions;
var const string InOtherMenu;
var int OccupiedSlots;
var UniqueNetId LastLeaderID;
var KFGFxMoviePlayer_Manager Manager;
var GFxObject ReadyButton;
var GFxObject LeaveButton;
var GFxObject CreatePartyButton;
var GFxObject SquadHeader;
var GFxObject Notification;
var int PlayerSlots;
var const UniqueNetId ZeroUniqueId;
var SMemberSlot MemberSlots[12];

function InitializeWidget()
{
    local int SlotIndex;

    KFPC = KFPlayerController(Outer.GetPC());
    OnlineSub = KFPC.OnlineSub;
    if(OnlineSub != none)
    {
        OnlineLobby = OnlineSub.GetLobbyInterface();
    }
    SlotIndex = 0;
    J0x9D:

    if(SlotIndex < PlayerSlots)
    {
        InitializeMemberSlot(SlotIndex);
        ++ SlotIndex;
        goto J0x9D;
    }
    LeaveButton = GetObject("leaveButton");
    CreatePartyButton = GetObject("createPartyButton");
    ReadyButton = GetObject("readyButton");
    SquadHeader = GetObject("squadHeader");
    InitNotificationUI();
    LocalizeText();
    UpdateInLobby(Manager.IsInLobby());
    RefreshParty();
}

function LocalizeText()
{
    ReadyButton.SetString("label", ReadyString);
    LeaveButton.SetString("label", LeaveString);
    CreatePartyButton.SetString("label", CreatePartyString);
    SetString("deployingString", DeployingString);
    SetString("waitingString", WaitingString);
}

function InitNotificationUI()
{
    Notification = GetObject("Notification");
}

function ShowDownLoadNotification(string ItemName, float PercentComplete, int ItemsRemaining)
{
    local GFxObject NotificationInfoObject;

    if(Notification == none)
    {
        return;
    }
    NotificationInfoObject = Outer.CreateObject("Object");
    NotificationInfoObject.SetString("itemName", ItemName);
    NotificationInfoObject.SetFloat("percent", PercentComplete * float(100));
    NotificationInfoObject.SetInt("queue", ItemsRemaining);
    NotificationInfoObject.SetString("downLoading", DownLoadingString);
    NotificationInfoObject.SetString("remaining", RemainingString);
    Notification.SetObject("notificationInfo", NotificationInfoObject);
}

function SetSearchingText(string Message);

function InitializeMemberSlot(int SlotIndex)
{
    MemberSlots[SlotIndex].MemberSlotObject = GetObject("squadMember" $ string(SlotIndex));
    MemberSlots[SlotIndex].PlayerNameTextField = MemberSlots[SlotIndex].MemberSlotObject.GetObject("playerNameText");
    MemberSlots[SlotIndex].MemberSlotObject.SetString("leaderText", PartyLeaderString);
    if(KFPC != none)
    {
        CreatePerkList(MemberSlots[SlotIndex].MemberSlotObject.GetObject("perksList"));
    }
    EmptySlot(SlotIndex);
}

function bool isUserYourFriend(UniqueNetId PlayerID)
{
    return true;
}

function CreatePlayerOptions(UniqueNetId PlayerID, int SlotIndex)
{
    ProfileOptions.Length = 0;
    if(!IsPlayerAFriend(PlayerID))
    {
        ProfileOptions.AddItem(AddFriendString;        
    }
    else
    {
        ProfileOptions.AddItem(RemoveFriendString;
    }
    if(!Class'WorldInfo'.static.IsMenuLevel())
    {
        if(Outer.GetPC().IsPlayerMuted(PlayerID))
        {
            ProfileOptions.AddItem(UnmuteString;            
        }
        else
        {
            ProfileOptions.AddItem(MuteString;
        }
        ProfileOptions.AddItem(VoteKickString;
    }
    if(PlayerID != Outer.GetPC().PlayerReplicationInfo.UniqueId)
    {
        CreateList(MemberSlots[SlotIndex].MemberSlotObject.GetObject("optionsList"), ProfileOptions, 0);
    }
}

function UpdateInLobby(bool bIsInLobby)
{
    bInLobby = bIsInLobby;
    if(bInLobby)
    {
        if(Class'WorldInfo'.static.IsMenuLevel())
        {
            LeaveButton.SetVisible(true);            
        }
        else
        {
            LeaveButton.SetVisible(false);
        }        
    }
    else
    {
        if(Class'WorldInfo'.static.IsMenuLevel() && Manager.GetMultiplayerMenuActive())
        {
            CreatePartyButton.SetVisible(true);            
        }
        else
        {
            CreatePartyButton.SetVisible(false);
        }
        LeaveButton.SetVisible(false);
    }
    SetBool("bInParty", bIsInLobby);
}

function UpdateSoloSquadText()
{
    if(OccupiedSlots > 1)
    {
        SquadHeader.SetString("text", SquadString);        
    }
    else
    {
        SquadHeader.SetString("text", SoloString);
    }
}

function CreatePerkList(GFxObject ListObject)
{
    local byte I;
    local GFxObject DataProvider, TempObject;

    DataProvider = ListObject.GetObject("dataProvider");
    I = 0;
    J0x44:

    if(I < KFPC.PerkList.Length)
    {
        TempObject = Outer.CreateObject("Object");
        TempObject.SetString("Title", KFPC.PerkList[I].PerkClass.default.PerkName);
        TempObject.SetString("PerkLevel", string(KFPC.PerkList[I].PerkLevel));
        TempObject.SetString("iconSource", "img://" $ KFPC.PerkList[I].PerkClass.static.GetPerkIconPath());
        DataProvider.SetElementObject(I, TempObject);
        ++ I;
        goto J0x44;
    }
}

function CreateList(GFxObject OptionList, array<string> TextArray, byte SelectedIndex)
{
    local byte I;
    local GFxObject DataProvider, ItemSlot;

    DataProvider = OptionList.GetObject("dataProvider");
    I = 0;
    J0x44:

    if(I < TextArray.Length)
    {
        ItemSlot = Outer.CreateObject("Object");
        ItemSlot.SetString("label", TextArray[I]);
        DataProvider.SetElementObject(I, ItemSlot);
        ++ I;
        goto J0x44;
    }
    DataProvider.ActionScriptVoid("invalidate");
}

function ProfileOptionClicked(int OptionIndex, int SlotIndex)
{
    switch(OptionIndex)
    {
        case 1:
            ToggelMuteOnPlayer(SlotIndex);
            break;
        case 3:
            ViewProfile(SlotIndex);
            break;
        case 0:
            AddFriend(SlotIndex);
            break;
        case 2:
            KickPlayer(SlotIndex);
        default:
            break;
    }
}

function bool IsPlayerAFriend(UniqueNetId PlayerID)
{
    local LocalPlayer LocPlayer;

    LocPlayer = LocalPlayer(Outer.GetPC().Player);
    if(LocPlayer == none)
    {
        return false;
    }
    if(OnlineSub == none)
    {
        return false;
    }
    return OnlineSub.IsFriend(byte(LocPlayer.ControllerId), PlayerID);
}

function ToggelMuteOnPlayer(int SlotIndex);

function ViewProfile(int SlotIndex);

function AddFriend(int SlotIndex);

function RemoveFriend(int SlotIndex);

function KickPlayer(int SlotIndex);

function UpdateVOIP(PlayerReplicationInfo PRI, bool bIsTalking);

function RefreshParty()
{
    OccupiedSlots = 0;
    UpdateLock();
}

function StatsInit()
{
    if(MemberSlots[0].MemberSlotObject != none)
    {
        CreatePerkList(MemberSlots[0].MemberSlotObject.GetObject("perksList"));
    }
}

function EmptySlot(int SlotIndex)
{
    MemberSlots[SlotIndex].PlayerUID = ZeroUniqueId;
    MemberSlots[SlotIndex].bIsSlotTaken = false;
    UpdatePlayerName(SlotIndex, DefaultPlayerName $ string(SlotIndex));
    SlotChanged(SlotIndex, false, false, false);
}

function UpdatePlayerName(int SlotIndex, string PlayerName)
{
    MemberSlots[SlotIndex].PlayerNameTextField.SetText(PlayerName);
}

function UpdatePerk(int SlotIndex, string PerkString, string Level, string IconPath)
{
    ActionScriptVoid("updatePerk");
}

function SlotChanged(int SlotIndex, bool bOccupied, bool bIsMyPlayer, bool bIsLeader)
{
    ActionScriptVoid("slotChanged");
}

function SetReadyButtonVisibility(bool bVisible)
{
    SetBool("readyButtonVisible", bVisible);
}

function bool ReceiveMessage(string Message, optional string MessageColor)
{
    local array<string> PlayerInfoStrings;

    ParseStringIntoArray(Message, PlayerInfoStrings, PerkPrefix, true);
    if(InStr(Message, PerkPrefix) != -1)
    {
        UpdatePerks(Repl(Message, PerkPrefix, ""));
        return false;
    }
    if(InStr(Message, SearchingPrefix) != -1)
    {
        UpdateSearching(Repl(Message, SearchingPrefix, ""));
        return false;
    }
    if(PartyChatWidget != none)
    {
        if(MessageColor != "")
        {
            PartyChatWidget.AddChatMessage(Message, MessageColor);            
        }
        else
        {
            PartyChatWidget.AddChatMessage(Message, Class'KFLocalMessage'.default.SayColor);
        }
    }
    return true;
}

function UpdateLock()
{
    local WorldInfo TempWorldInfo;
    local KFGameReplicationInfo KFGRI;

    TempWorldInfo = Class'WorldInfo'.static.GetWorldInfo();
    if((TempWorldInfo != none) && TempWorldInfo.GRI != none)
    {
        KFGRI = KFGameReplicationInfo(TempWorldInfo.GRI);
        if((KFGRI != none) && KFPC != none)
        {
            SetBool("locked", KFGRI.bTraderIsOpen && KFPC.bPlayerUsedUpdatePerk);
        }
    }
}

function UpdatePerks(string Message);

function UpdateSearching(string Message);

function SendSearching();

function StartCountdown(int CountdownTime, bool bFinalCountdown)
{
    ActionScriptVoid("startCountdown");
}

function StopCountdown()
{
    ActionScriptVoid("stopCountdown");
}

defaultproperties
{
    ReadyString="READY UP"
    LeaveString="LEAVE PARTY"
    DefaultPlayerName="Player"
    SquadString="SQUAD"
    SoloString="SOLO"
    CreatePartyString="INVITE FRIENDS"
    WaitingString="WAITING FOR PLAYERS"
    DeployingString="DEPLOYING IN "
    PlayerReadyString="[ READY ]"
    PartyLeaderString="Leader"
    MuteString="Mute Player"
    UnmuteString="Unmute Player"
    AddFriendString="Add Friend"
    RemoveFriendString="Remove Friend"
    ViewProfileString="View Profile"
    VoteKickString="Kick Player"
    PartyLeaderSearchingForMatchString="is searching for a match..."
    PartyLeaderIsUpdatingMatchOptionsString="is setting match options..."
    PartyLeaderInServerBrowserString="is searching the server browser..."
    PartyLeaderInOtherMenuString="is in another menu..."
    SearchingForGameString="Searching for online game..."
    PartHostLeftString="The party host has left"
    PartyLeaderChangedString="is now the new party host."
    DownLoadingString="Downloading:"
    RemainingString="Remaining:"
    bReadyButtonVisible=true
    PerkPrefix="%&1&%"
    SearchingPrefix="%&2&%"
    ServerBrowserOpen="ServerBrowser"
    SearchingForGame="SearchingForGame"
    UpdatingOptions="UpdatingOptions"
    InOtherMenu="InOtherMenu"
    PlayerSlots=6
}