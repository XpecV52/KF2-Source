/*******************************************************************************
 * KFEmit_DirectionalPath generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFEmit_DirectionalPath extends Emitter
    hidecategories(Navigation);

/** The Template to use for this emitter */
var() ParticleSystem EmitterTemplate;
var Vector DestinationFinal;
var Vector DestinationMidPoint;
var Vector DestinationCurrent;
var float LimitDistanceCurrent;
var float LimitDistanceCurrentPowed;
var float LimitDistanceDestinationFinal;
var float LimitDistanceDestinationMidPoint;
var float CurveTurnRateCurrent;
var float CurveTurnRateUntilDestinationFinal;
var float CurveTurnRateUntilDestinationMidPoint;
var float RateTickCheckHasReached;
var Vector LastDir;
var Vector NewDir;
var bool IsEnabled;
var transient bool bInitialized;
var transient bool bReachDestinationFinal;
var transient bool bReachDestinationMidPoint;
/** Acceleration magnitude */
var() float ParticleSpeed;
var float HalfAngleSpawnCone;
var transient float TickCheckHasReachedTime;

simulated function PostBeginPlay()
{
    TickCheckHasReachedTime = RateTickCheckHasReached;
    super.PostBeginPlay();
}

simulated function SetDestination(Vector NewDestinationFinal, Vector NewDestinationMidPoint, float NewLimitDistanceDestinationFinal, float NewLimitDistanceDestinationMidPoint, float NewCurveTurnRateUntilDestinationFinal, float NewCurveTurnRateUntilDestinationMidPoint, float NewHalfAngleSpawnCone)
{
    DestinationFinal = NewDestinationFinal;
    DestinationMidPoint = NewDestinationMidPoint;
    LimitDistanceDestinationFinal = NewLimitDistanceDestinationFinal;
    LimitDistanceDestinationMidPoint = NewLimitDistanceDestinationMidPoint;
    CurveTurnRateUntilDestinationFinal = NewCurveTurnRateUntilDestinationFinal;
    CurveTurnRateUntilDestinationMidPoint = NewCurveTurnRateUntilDestinationMidPoint;
    bReachDestinationFinal = false;
    bReachDestinationMidPoint = false;
    HalfAngleSpawnCone = NewHalfAngleSpawnCone;
    DestinationCurrent = DestinationMidPoint;
    LimitDistanceCurrent = LimitDistanceDestinationMidPoint;
    LimitDistanceCurrentPowed = LimitDistanceCurrent * LimitDistanceCurrent;
    CurveTurnRateCurrent = CurveTurnRateUntilDestinationMidPoint;
    Velocity = VRandCone(Normal(DestinationCurrent - Location), HalfAngleSpawnCone) * ParticleSpeed;
    LastDir = Normal(Velocity);
    SetRotation(rotator(Normal(Velocity)));
    SetPhysics(6);
    bInitialized = true;
}

simulated function UpdateDestination(Vector NewDestinationFinal, optional Vector NewDestinationMidPoint)
{
    DestinationFinal = NewDestinationFinal;
    DestinationMidPoint = NewDestinationMidPoint;
    DestinationCurrent = DestinationFinal;
    if(!bReachDestinationMidPoint)
    {
        DestinationCurrent = DestinationMidPoint;
    }
}

simulated event SetTemplate(ParticleSystem NewTemplate, optional bool bDestroyOnFinish)
{
    super.SetTemplate(NewTemplate, bDestroyOnFinish);
}

simulated function bool HasReachedDestinationFinal()
{
    local bool bCloseEnough;

    bCloseEnough = VSizeSq(Location - DestinationFinal) <= LimitDistanceCurrentPowed;
    return bCloseEnough;
}

simulated function bool HasReachedDestinationMidPoint()
{
    local bool bCloseEnough;

    bCloseEnough = VSizeSq(Location - DestinationMidPoint) <= LimitDistanceCurrentPowed;
    return bCloseEnough;
}

simulated function Tick(float DeltaTime)
{
    if(!bInitialized || IsEnabled == false)
    {
        return;
    }
    TickCheckHasReachedTime -= DeltaTime;
    if(TickCheckHasReachedTime <= float(0))
    {
        TickCheckHasReachedTime = RateTickCheckHasReached;
        if(bReachDestinationMidPoint)
        {
            if(bReachDestinationFinal)
            {
                SetLocation(DestinationFinal);
                return;
            }
            if(HasReachedDestinationFinal())
            {
                bReachDestinationFinal = true;
                SetLocation(DestinationFinal);
                return;
            }            
        }
        else
        {
            if(HasReachedDestinationMidPoint())
            {
                bReachDestinationMidPoint = true;
                DestinationCurrent = DestinationFinal;
                LimitDistanceCurrent = LimitDistanceDestinationFinal;
                LimitDistanceCurrentPowed = LimitDistanceCurrent * LimitDistanceCurrent;
                CurveTurnRateCurrent = CurveTurnRateUntilDestinationFinal;
            }
        }
    }
    NewDir = Normal(DestinationCurrent - Location);
    SetRotation(rotator(LastDir + (CurveTurnRateCurrent * NewDir)));
    Velocity = vector(Rotation) * ParticleSpeed;
    LastDir = vector(Rotation);
}

simulated function DeactivateEmitter()
{
    ParticleSystemComponent.DeactivateSystem();
    IsEnabled = false;
    bReachDestinationFinal = false;
    bReachDestinationMidPoint = false;
    SetTickIsDisabled(true);
    SetHidden(true);
}

simulated function ActivateEmitter()
{
    ParticleSystemComponent.ActivateSystem();
    IsEnabled = true;
    bInitialized = true;
    SetTickIsDisabled(false);
    SetHidden(false);
}

simulated function OnParticleSystemFinished(ParticleSystemComponent FinishedComponent)
{
    return;
}

defaultproperties
{
    LimitDistanceDestinationFinal=5
    LimitDistanceDestinationMidPoint=16
    CurveTurnRateUntilDestinationFinal=0.4
    CurveTurnRateUntilDestinationMidPoint=4
    RateTickCheckHasReached=0.05
    ParticleSpeed=600
    HalfAngleSpawnCone=60
    begin object name=ParticleSystemComponent0 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFEmit_DirectionalPath.ParticleSystemComponent0'
    ParticleSystemComponent=ParticleSystemComponent0
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFEmit_DirectionalPath.Sprite'
    Components(0)=Sprite
    begin object name=ParticleSystemComponent0 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFEmit_DirectionalPath.ParticleSystemComponent0'
    Components(1)=ParticleSystemComponent0
    begin object name=ArrowComponent0 class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFEmit_DirectionalPath.ArrowComponent0'
    Components(2)=ArrowComponent0
    bNoDelete=false
}