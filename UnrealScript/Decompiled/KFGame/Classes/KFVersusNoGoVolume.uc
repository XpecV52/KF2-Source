/*******************************************************************************
 * KFVersusNoGoVolume generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFVersusNoGoVolume extends PostProcessVolume
    native
    hidecategories(Navigation,Object,Movement,Display,Advanced,Collision,Volume,Brush,Attachment);

/** Actors to unhide while in this volume */
var() array<StaticMeshActor> NoGoWallActors;
var transient bool bIsActive;
var transient float LastTouchingCheckTime;
/** Initial delay before we start "motivating" the player to move */
var() float NoGoHurtStartDelay<ClampMin=10.0|ClampMax=120.0>;
var transient class<KFDamageType> NoGoDamageType;
var transient float NoGoHurtInterval;

// Export UKFVersusNoGoVolume::execNotifyNoGoActive(FFrame&, void* const)
private native final function NotifyNoGoActive(bool bNewActive, float HurtStartDelay);

simulated event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    if(!bIsActive && WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(Other.CreationTime == WorldInfo.TimeSeconds)
        {
            if(bDebug)
            {
                LogInternal(string(GetFuncName()) @ "delaying touch test on spawn for a valid controller");
            }
            Other.SetTimer(0.01, false, 'CheckActivate', self);            
        }
        else
        {
            CheckActivate();
        }
    }
}

simulated function CheckActivate()
{
    if(!bIsActive && IsLocalPlayerTouching())
    {
        SetActive(true);
    }
}

simulated function bool IsLocalPlayerTouching()
{
    local Pawn P;
    local PlayerController LocalPC;

    LocalPC = GetALocalPlayerController();
    LastTouchingCheckTime = WorldInfo.TimeSeconds;
    foreach TouchingActors(Class'Pawn', P)
    {
        if((P.Controller != none) && P.Controller == LocalPC)
        {            
            return true;
        }        
    }    
    return false;
}

private final simulated function SetActive(bool bNewActive)
{
    local int I;

    bIsActive = bNewActive;
    I = 0;
    J0x20:

    if(I < NoGoWallActors.Length)
    {
        NoGoWallActors[I].SetHidden(!bIsActive);
        ++ I;
        goto J0x20;
    }
    SetTickIsDisabled(!bIsActive);
    NotifyNoGoActive(bIsActive, NoGoHurtStartDelay);
    if(bDebug)
    {
        LogInternal(((string(GetFuncName()) @ "called with") @ string(bNewActive)) @ string(bTickIsDisabled));
    }
}

simulated event Tick(float DeltaTime)
{
    if((WorldInfo.TimeSeconds - LastTouchingCheckTime) > 0.5)
    {
        if(!IsLocalPlayerTouching())
        {
            SetActive(false);
        }
    }
}

static final function class<KFDamageType> GetNoGoDTClass()
{
    return default.NoGoDamageType;
}

static final function float GetNoGoHurtInterval()
{
    return default.NoGoHurtInterval;
}

defaultproperties
{
    NoGoHurtStartDelay=60
    NoGoDamageType=Class'KFDT_NoGoVolume'
    NoGoHurtInterval=2
    bPawnsOnly=true
    BrushColor=(B=100,G=255,R=100,A=255)
    bColored=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=true
    object end
    // Reference: BrushComponent'Default__KFVersusNoGoVolume.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=true
    object end
    // Reference: BrushComponent'Default__KFVersusNoGoVolume.BrushComponent0'
    Components(0)=BrushComponent0
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bCollideActors=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=true
    object end
    // Reference: BrushComponent'Default__KFVersusNoGoVolume.BrushComponent0'
    CollisionComponent=BrushComponent0
}