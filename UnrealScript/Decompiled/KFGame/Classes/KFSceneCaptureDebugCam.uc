/*******************************************************************************
 * KFSceneCaptureDebugCam generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSceneCaptureDebugCam extends SceneCapture2DActor
    native(Camera)
    hidecategories(Navigation);

const MAXDEBUGWINDOWS = 1;

var Texture2D BlackTexture;
var export editinline SceneCapture2DComponent CaptureComponent;
var Actor FocusActor;
var class<Actor> FocusClass;
var Pawn FocusPawn;
var KFPlayerController PCOwner;
var bool bWatchNPCPathFailures;
var bool bWatchActorSpawn;
var bool bWatchTouch;
var bool bOrbitFocus;
var bool bSetBaseToFocus;
var bool bNoAnimPause;
var bool bOverrideFocus;
var bool bLockFocus;
var bool bTickAnimNodesWhenNotRendered;
var bool bUpdateSkelWhenNotRendered;
var bool bIgnoreControllersWhenNotRendered;
var bool bPauseAnims;
var bool bTextOnly;
var name ActorNameToWatchOnSpawn;
var int ActiveDebugWindows;
var float MinDistFactorForKinematicUpdate;
var string CurrentDebugSceneMessage;
var MaterialInterface DebugViewMaterial;
var MaterialInstanceConstant DebugViewMaterialInstance;
var KFAIController FocusController;
var KFPawn FocusKFPawn;
var Vector LastLocation;

// Export UKFSceneCaptureDebugCam::execCreateDebugTexture(FFrame&, void* const)
native function TextureRenderTarget2D CreateDebugTexture();

// Export UKFSceneCaptureDebugCam::execNativePostRenderFor(FFrame&, void* const)
native simulated function NativePostRenderFor(PlayerController PC, Canvas Canvas, Vector CameraPosition, Vector CameraDir);

// Export UKFSceneCaptureDebugCam::execGetDebugSceneViewPoint(FFrame&, void* const)
native simulated function GetDebugSceneViewPoint(out Vector out_Location, out Rotator out_Rotation);

function bool InitDebugScene(KFPlayerController NewOwner, Actor ActorToWatch, optional string DebugMessage)
{
    local TextureRenderTarget2D TextureTarget;
    local Vector SceneLocation;
    local Rotator SceneRotation;

    PCOwner = NewOwner;
    CurrentDebugSceneMessage = DebugMessage;
    if(FocusActor == ActorToWatch)
    {
        return false;
    }
    FocusActor = ActorToWatch;
    FocusPawn = Pawn(FocusActor);
    FocusKFPawn = KFPawn(FocusActor);
    FocusController = KFAIController(FocusKFPawn.Controller);
    if((FocusPawn != none) && !bTextOnly)
    {
        RestoreFocusPawnMeshProperties();
        FocusPawn = none;
    }
    TextureTarget = CreateDebugTexture();
    SetRotation(ActorToWatch.Rotation);
    if(bSetBaseToFocus)
    {
    }
    CaptureComponent.SetEnabled(true);
    CaptureComponent.SetCaptureParameters(TextureTarget);
    GetDebugSceneViewPoint(SceneLocation, SceneRotation);
    CaptureComponent.SetView(SceneLocation, SceneRotation);
    if(DebugViewMaterialInstance == none)
    {
        DebugViewMaterialInstance = new (self) Class'MaterialInstanceConstant';
    }
    DebugViewMaterialInstance.SetParent(DebugViewMaterial);
    DebugViewMaterialInstance.SetTextureParameterValue('RenderToTextureMap', TextureTarget);
    AttachComponent(CaptureComponent);
    ++ ActiveDebugWindows;
    if((Pawn(ActorToWatch) != none) && !bTextOnly)
    {
        FocusPawn = Pawn(ActorToWatch);
        if(FocusPawn.Mesh != none)
        {
            if(bNoAnimPause)
            {
                CacheAndUpdateFocusPawnMeshProperties();
            }
        }
    }
    return true;
}

event DestroyDebugScene()
{
    CurrentDebugSceneMessage = "";
    -- ActiveDebugWindows;
    if(FocusPawn != none)
    {
        RestoreFocusPawnMeshProperties();
        FocusPawn = none;
    }
    FocusActor = none;
    DebugViewMaterialInstance.SetParent(none);
    DebugViewMaterialInstance = none;
    FocusClass = none;
    PCOwner = none;
    DetachComponent(CaptureComponent);
    CaptureComponent = none;
    Destroy();
}

function ToggleDebugSceneOrbit()
{
    bOrbitFocus = !bOrbitFocus;
}

function MoveToMyPawnLocation()
{
    local Vector CameraLoc;
    local Rotator CameraRot;

    bOverrideFocus = true;
    SetBase(none);
    bOrbitFocus = false;
    PCOwner.GetPlayerViewPoint(CameraLoc, CameraRot);
    SetLocation(CameraLoc);
    SetRotation(CameraRot);
    CaptureComponent.SetView(CameraLoc, CameraRot);
}

function ToggleLockFocus()
{
    bLockFocus = !bLockFocus;
}

function SetDebugSceneViewMode(Engine.SceneCaptureComponent.ESceneCaptureViewMode NewViewMode)
{
    CaptureComponent.ViewMode = NewViewMode;
    DetachComponent(CaptureComponent);
    AttachComponent(CaptureComponent);
}

function PauseDebugSceneUpdate()
{
    CaptureComponent.bEnabled = !CaptureComponent.bEnabled;
}

function CacheAndUpdateFocusPawnMeshProperties()
{
    bTickAnimNodesWhenNotRendered = FocusPawn.Mesh.bTickAnimNodesWhenNotRendered;
    bUpdateSkelWhenNotRendered = FocusPawn.Mesh.bUpdateSkelWhenNotRendered;
    bIgnoreControllersWhenNotRendered = FocusPawn.Mesh.bIgnoreControllersWhenNotRendered;
    MinDistFactorForKinematicUpdate = FocusPawn.Mesh.MinDistFactorForKinematicUpdate;
    bPauseAnims = FocusPawn.Mesh.bPauseAnims;
    FocusPawn.Mesh.bTickAnimNodesWhenNotRendered = true;
    FocusPawn.Mesh.bUpdateSkelWhenNotRendered = true;
    FocusPawn.Mesh.bIgnoreControllersWhenNotRendered = false;
    FocusPawn.Mesh.MinDistFactorForKinematicUpdate = 0;
    FocusPawn.Mesh.bPauseAnims = false;
}

function RestoreFocusPawnMeshProperties()
{
    FocusPawn.Mesh.bTickAnimNodesWhenNotRendered = bTickAnimNodesWhenNotRendered;
    FocusPawn.Mesh.bUpdateSkelWhenNotRendered = bUpdateSkelWhenNotRendered;
    FocusPawn.Mesh.bIgnoreControllersWhenNotRendered = bIgnoreControllersWhenNotRendered;
    FocusPawn.Mesh.MinDistFactorForKinematicUpdate = MinDistFactorForKinematicUpdate;
    FocusPawn.Mesh.bPauseAnims = bPauseAnims;
}

simulated event PostRenderFor(PlayerController PC, Canvas Canvas, Vector CameraPosition, Vector CameraDir)
{
    local float H, W;
    local Vector SceneLocation;
    local Rotator SceneRotation;

    return;
    if((FocusActor == none) && !bOverrideFocus)
    {
        if((PCOwner != none) && PCOwner.CheatManager != none)
        {
            KFCheatManager(PCOwner.CheatManager).DestroyDebugScene();            
        }
        else
        {
            DestroyDebugScene();
        }
        return;
    }
    if(!bTextOnly && bOrbitFocus)
    {
        if(CaptureComponent.bEnabled)
        {
            DetachComponent(CaptureComponent);
            GetDebugSceneViewPoint(SceneLocation, SceneRotation);
            CaptureComponent.SetView(SceneLocation, SceneRotation);
            AttachComponent(CaptureComponent);
        }        
    }
    else
    {
        if(!bOrbitFocus)
        {
            GetDebugSceneViewPoint(SceneLocation, SceneRotation);
            if(SceneLocation != LastLocation)
            {
                DetachComponent(CaptureComponent);
                CaptureComponent.SetView(SceneLocation, SceneRotation);
                AttachComponent(CaptureComponent);
                LastLocation = SceneLocation;
            }
        }
    }
    if(!bTextOnly)
    {
        Canvas.SetPos(Canvas.ClipX * 0.65, Canvas.ClipY * 0.075);
        H = 256 * (Canvas.ClipY / 768);
        W = 256 * (Canvas.ClipY / 768);
        Canvas.DrawTile(BlackTexture, H, W, 0, 0, 32, 32);
        Canvas.DrawColor = MakeColor(255, 255, 255, 255);
        Canvas.SetPos(Canvas.ClipX * 0.65, Canvas.ClipY * 0.075);
        Canvas.DrawMaterialTile(DebugViewMaterialInstance, H, W, 0, 0, 1, 1);
    }
}

defaultproperties
{
    BlackTexture=Texture2D'EngineResources.Black'
    begin object name=SceneCapture2DComponent0 class=SceneCapture2DComponent
        NearPlane=10
        FarPlane=-1
        bUpdateMatrices=false
        ViewMode=ESceneCaptureViewMode.SceneCapView_Unlit
    object end
    // Reference: SceneCapture2DComponent'Default__KFSceneCaptureDebugCam.SceneCapture2DComponent0'
    CaptureComponent=SceneCapture2DComponent0
    bOrbitFocus=true
    bSetBaseToFocus=true
    bNoAnimPause=true
    DebugViewMaterial=Material'ENG_EngineResources_MAT.Debugging.DebugRenderTargetMaterial'
    begin object name=DrawFrust0 class=DrawFrustumComponent
        ReplacementPrimitive=none
    object end
    // Reference: DrawFrustumComponent'Default__KFSceneCaptureDebugCam.DrawFrust0'
    DrawFrustum=DrawFrust0
    begin object name=SceneCapture2DComponent0 class=SceneCapture2DComponent
        NearPlane=10
        FarPlane=-1
        bUpdateMatrices=false
        ViewMode=ESceneCaptureViewMode.SceneCapView_Unlit
    object end
    // Reference: SceneCapture2DComponent'Default__KFSceneCaptureDebugCam.SceneCapture2DComponent0'
    SceneCapture=SceneCapture2DComponent0
    begin object name=SceneCapture2DComponent0 class=SceneCapture2DComponent
        NearPlane=10
        FarPlane=-1
        bUpdateMatrices=false
        ViewMode=ESceneCaptureViewMode.SceneCapView_Unlit
    object end
    // Reference: SceneCapture2DComponent'Default__KFSceneCaptureDebugCam.SceneCapture2DComponent0'
    Components(0)=SceneCapture2DComponent0
    begin object name=CamMesh0 class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFSceneCaptureDebugCam.CamMesh0'
    Components(1)=CamMesh0
    begin object name=DrawFrust0 class=DrawFrustumComponent
        ReplacementPrimitive=none
    object end
    // Reference: DrawFrustumComponent'Default__KFSceneCaptureDebugCam.DrawFrust0'
    Components(2)=DrawFrust0
    bNoDelete=false
    bAlwaysRelevant=true
    bPostRenderIfNotVisible=true
}