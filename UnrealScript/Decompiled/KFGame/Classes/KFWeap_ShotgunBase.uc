/*******************************************************************************
 * KFWeap_ShotgunBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_ShotgunBase extends KFWeapon
    abstract
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var(Weapon) array<byte> NumPellets;
/** Reload open that also inserts one shell, played when gun is empty */
var(Animations) const editconst name ReloadOpenInsertAnim;
var(Animations) const editconst name ReloadOpenInsertEliteAnim;
/** Shoot animation to play when reload is interrupted */
var(Animations) const editconst name FireOneHandAnim;
var(Animations) const editconst name FireOneHandLastAnim;
var transient float LastReloadAbortTime;

simulated function KFProjectile SpawnProjectile(class<KFProjectile> KFProjClass, Vector RealStartLoc, Vector AimDir)
{
    local int I;
    local Rotator AimRot;

    if(CurrentFireMode == 4)
    {
        return super.SpawnProjectile(KFProjClass, RealStartLoc, AimDir);
    }
    AimRot = rotator(AimDir);
    I = 0;
    J0x58:

    if(I < GetNumProjectilesToFire(CurrentFireMode))
    {
        super.SpawnProjectile(KFProjClass, RealStartLoc, vector(AddMultiShotSpread(AimRot)));
        ++ I;
        goto J0x58;
    }
    return none;
}

simulated function byte GetNumProjectilesToFire(byte FireModeNum)
{
    return NumPellets[CurrentFireMode];
}

simulated function Rotator AddSpread(Rotator BaseAim)
{
    return BaseAim;
}

simulated function Rotator AddMultiShotSpread(Rotator BaseAim)
{
    local Vector X, Y, Z;
    local float CurrentSpread, RandY, RandZ;

    CurrentSpread = Spread[CurrentFireMode];
    if(CurrentSpread == float(0))
    {
        return BaseAim;        
    }
    else
    {
        GetAxes(BaseAim, X, Y, Z);
        RandY = FRand() - 0.5;
        RandZ = Sqrt(0.5 - Square(RandY)) * (FRand() - 0.5);
        return rotator((X + ((RandY * CurrentSpread) * Y)) + ((RandZ * CurrentSpread) * Z));
    }
}

simulated function name GetReloadAnimName(bool bTacticalReload)
{
    if(!bReloadFromMagazine && ReloadStatus == 1)
    {
        if(AmmoCount[0] == 0)
        {
            ReloadStatus = GetNextReloadStatus();
            return ((bTacticalReload) ? ReloadOpenInsertEliteAnim : ReloadOpenInsertAnim);
        }
    }
    return super.GetReloadAnimName(bTacticalReload);
}

simulated function name GetWeaponFireAnim(byte FireModeNum)
{
    if(!bReloadFromMagazine && LastReloadAbortTime == WorldInfo.TimeSeconds)
    {
        if(!bUsingSights)
        {
            return ((ShouldPlayFireLast(FireModeNum)) ? FireOneHandLastAnim : FireOneHandAnim);
        }
    }
    return super.GetWeaponFireAnim(FireModeNum);
}

static simulated function float CalculateTraderWeaponStatDamage()
{
    local float BaseDamage, DoTDamage;
    local class<KFDamageType> DamageType;

    BaseDamage = default.InstantHitDamage[0];
    DamageType = class<KFDamageType>(default.InstantHitDamageTypes[0]);
    if((DamageType != none) && DamageType.default.DoT_Type != 0)
    {
        DoTDamage = (DamageType.default.DoT_Duration / DamageType.default.DoT_Interval) * (BaseDamage * DamageType.default.DoT_DamageScale);
    }
    return (BaseDamage * float(default.NumPellets[0])) + DoTDamage;
}

simulated state Reloading
{
    simulated function AbortReload()
    {
        LastReloadAbortTime = WorldInfo.TimeSeconds;
        super.AbortReload();
    }
    stop;    
}

defaultproperties
{
    NumPellets(0)=7
    NumPellets(1)=7
    ReloadOpenInsertAnim=Reload_Open_Shell
    ReloadOpenInsertEliteAnim=Reload_Open_Shell_Elite
    FireOneHandAnim=Shoot_OneHand
    FireOneHandLastAnim=Shoot_OneHand_Last
    EffectiveRange=30
    bHasFireLastAnims=true
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_ShotgunBase.MeleeHelper'
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_ShotgunBase.FirstPersonMesh'
    Mesh=FirstPersonMesh
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_ShotgunBase.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_ShotgunBase.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}