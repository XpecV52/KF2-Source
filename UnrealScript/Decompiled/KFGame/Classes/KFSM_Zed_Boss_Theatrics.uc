/*******************************************************************************
 * KFSM_Zed_Boss_Theatrics generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Zed_Boss_Theatrics extends KFSM_PlaySingleAnim;

enum ETheatricType
{
    THEATRIC_Entrance,
    THEATRIC_Victory,
    THEATRIC_MAX
};

var byte CurrentTheatricType;

protected function bool InternalCanDoSpecialMove()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(AIOwner.WorldInfo.GRI);
    if((KFGRI != none) && !KFGRI.IsFinalWave())
    {
        return false;
    }
    return true;
}

static function byte PackSMFlags(KFPawn P, byte InTauntType)
{
    local byte Variant;
    local KFPawnAnimInfo PAI;

    PAI = P.PawnAnimInfo;
    Variant = 255;
    switch(InTauntType)
    {
        case 0:
            if(PAI.TheatricBossEntranceAnims.Length > 0)
            {
                Variant = byte(Rand(PAI.TheatricBossEntranceAnims.Length));
            }
            break;
        case 1:
            if(PAI.TheatricBossVictoryAnims.Length > 0)
            {
                Variant = byte(Rand(PAI.TheatricBossVictoryAnims.Length));
            }
            break;
        default:
            break;
    }
    if(Variant != 255)
    {
        return byte(InTauntType + (Variant << 4));        
    }
    else
    {
        return 255;
    }
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    local KFPlayerController KFPC;

    super.SpecialMoveStarted(bForced, PrevMove);
    KFPOwner.BodyStanceNodes[0].SetRootBoneAxisOption(0, 0, 0);
    if((AIOwner != none) && AIOwner.Role == ROLE_Authority)
    {
        foreach AIOwner.WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.SetBossCamera(KFPOwner);
            KFPC.SetCinematicMode(true, false, false, true, true, true);            
        }        
        KFPawn_MonsterBoss(KFPOwner).PlayMonologue(CurrentTheatricType);
    }
}

function PlayAnimation()
{
    local byte Variant;

    CurrentTheatricType = byte(KFPOwner.SpecialMoveFlags & 15);
    Variant = byte(KFPOwner.SpecialMoveFlags >> 4);
    switch(CurrentTheatricType)
    {
        case 0:
            AnimName = KFPOwner.PawnAnimInfo.TheatricBossEntranceAnims[Variant];
            break;
        case 1:
            AnimName = KFPOwner.PawnAnimInfo.TheatricBossVictoryAnims[Variant];
            break;
        default:
            AnimName = KFPOwner.PawnAnimInfo.TheatricBossEntranceAnims[Variant];
            break;
            break;
    }
    if(AIOwner != none)
    {
        AIOwner.AILog_Internal((((string(GetFuncName()) $ " ") $ string(self)) $ " chose theatric animation ") $ string(AnimName), 'AIController');
    }
    PlaySpecialMoveAnim(AnimName, AnimStance, BlendInTime, BlendOutTime, 1);
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    local KFPlayerController KFPC;

    if(KFPOwner.BodyStanceNodes[AnimStance].bIsPlayingCustomAnim)
    {
        KFPOwner.StopBodyAnim(AnimStance, 0.2);
    }
    if(AIOwner != none)
    {
        AIOwner.AIZeroMovementVariables();
        if((AIOwner.Role == ROLE_Authority) && CurrentTheatricType == 0)
        {
            foreach AIOwner.WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
            {
                if(KFPC.Pawn != none)
                {
                    KFPC.SetViewTarget(KFPC.Pawn);
                }
                KFPC.ServerCamera('FirstPerson');
                KFPC.SetCinematicMode(false, false, true, true, true, false);                
            }            
        }
    }
    super.SpecialMoveEnded(PrevMove, NextMove);
}

defaultproperties
{
    bDisablesWeaponFiring=true
    bDisableMovement=true
    Handle=KFSM_Zed_Boss_Theatrics
}