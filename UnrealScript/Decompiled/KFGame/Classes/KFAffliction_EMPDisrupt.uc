/*******************************************************************************
 * KFAffliction_EMPDisrupt generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAffliction_EMPDisrupt extends KFAffliction_EMP;

const DISRUPT_THRESHOLD = 25.f;

var protected float DisruptCooldown;
var protected float LastDisruptActivationTime;

function Init(KFPawn P, KFAfflictionManager.EAfflictionType Type, KFPerk InstigatorPerk)
{
    super(KFAfflictionAdvanced).Init(P, Type, InstigatorPerk);
    DisruptCooldown = P.IncapSettings[Type].ChildAfflictionCooldown;
}

function Accrue(float InPower, optional class<KFDamageType> DamageType)
{
    DamageType = none;
    super(KFAfflictionBase).Accrue(InPower);
    if(!PawnOwner.IsTimerActive('Timer_DisruptCooldown', self))
    {
        if(CurrentStrength > 25)
        {
            ActivateDisrupt();
        }
    }
}

function ActivateDisrupt()
{
    SetEMPDisrupted(true);
    PawnOwner.SetTimer(Duration, false, 'DeactivateDisrupt', self);
    PawnOwner.SetTimer(Duration + DisruptCooldown, false, 'Timer_DisruptCooldown', self);
}

function DeactivateDisrupt()
{
    SetEMPDisrupted(false);
}

function Timer_DisruptCooldown();

function SetEMPDisrupted(bool bEnabled)
{
    if(PawnOwner.Role == ROLE_Authority)
    {
        if(PawnOwner.bEmpDisrupted == bEnabled)
        {
            return;
        }
        PawnOwner.bEmpDisrupted = bEnabled;
        if(PawnOwner.IsDoingSpecialMove())
        {
            PawnOwner.SpecialMoves[SpecialMove].OnEMPDisrupted();
        }
        PawnOwner.OnStackingAfflictionChanged(0);
    }
    ToggleEffects(PawnOwner.bEmpDisrupted, PawnOwner.bEmpPanicked);
}
