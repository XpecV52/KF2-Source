/*******************************************************************************
 * Path_AroundDestructibles generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Path_AroundDestructibles extends PathConstraint
    native(Waypoint);

struct native DestructiblesInfo
{
    var KFDestructibleActor KFDA;
    var bool bBumpDamageFromStandardZeds;
    var bool bBumpDamageFromLargeZeds;

    structdefaultproperties
    {
        KFDA=none
        bBumpDamageFromStandardZeds=false
        bBumpDamageFromLargeZeds=false
    }
};

var float LargeNPCCollisionRadius;
var bool bDebug_DrawMyBlockedPathConnections;
var bool bAddCostInsteadOfBlocking;
var bool bAffectLargeNPCs;
var bool bAffectStandardNPCs;
var int AddedCost;
var transient array<DestructiblesInfo> Destructibles;

static function bool AvoidDestructibles(Pawn P, optional bool inAffectLargeNPCs, optional bool inAffectStandardNPCs, optional bool inAddCostInsteadOfBlocking, optional int inAddedCost)
{
    local Path_AroundDestructibles Con;
    local KFDestructibleActor KFDA;

    inAffectLargeNPCs = true;
    inAffectStandardNPCs = true;
    inAddCostInsteadOfBlocking = false;
    inAddedCost = 0;
    if(P != none)
    {
        Con = Path_AroundDestructibles(P.CreatePathConstraint(default.Class));
        if(Con != none)
        {
            Con.bAffectLargeNPCs = inAffectLargeNPCs;
            Con.bAffectStandardNPCs = inAffectStandardNPCs;
            Con.bAddCostInsteadOfBlocking = inAddCostInsteadOfBlocking;
            Con.AddedCost = inAddedCost;
            foreach P.DynamicActors(Class'KFDestructibleActor', KFDA)
            {
                Con.Destructibles.Insert(0, 1;
                Con.Destructibles[0].KFDA = KFDA;
                Con.Destructibles[0].bBumpDamageFromStandardZeds = KFDA.InstaKillFromStandardNPCBumpDamage();
                Con.Destructibles[0].bBumpDamageFromLargeZeds = KFDA.InstaKillFromLargeNPCBumpDamage();                
            }            
            P.AddPathConstraint(Con);
            return true;
        }
    }
    return false;
}

function Recycle()
{
    super.Recycle();
    Destructibles.Length = 0;
}

defaultproperties
{
    LargeNPCCollisionRadius=55
    bAffectLargeNPCs=true
    bAffectStandardNPCs=true
    CacheIdx=6
}