/*******************************************************************************
 * KFGFxWorld_MedicOptics generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxWorld_MedicOptics extends GFxMoviePlayer
    config(UI);

var byte CurrentAmmoCount;
var byte CurrentCharge;
var GFxObject OpticsContainer;
var float MinPercentPerShot;

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'medicOpticsContainer':
            if(OpticsContainer == none)
            {
                OpticsContainer = Widget;
                InitValues();
            }
            break;
        default:
            break;
    }
    return true;
}

function InitValues()
{
    SetShotPercentCost(MinPercentPerShot);
}

simulated function SetPrimaryAmmo(byte NewAmmoCount)
{
    if(OpticsContainer != none)
    {
        OpticsContainer.SetInt("ammoValue", NewAmmoCount);
    }
}

function SetShotPercentCost(float CostPercent)
{
    MinPercentPerShot = CostPercent;
    if(OpticsContainer != none)
    {
        OpticsContainer.SetInt("costPercentPerShot", int(CostPercent));
    }
}

function SetHealerCharge(byte NewCharge)
{
    if(OpticsContainer != none)
    {
        OpticsContainer.SetInt("chargeMeter", NewCharge);
    }
}

function ClearLockOn()
{
    if(OpticsContainer != none)
    {
        OpticsContainer.ActionScriptVoid("clearLock");
    }
}

function StartLockOn()
{
    if(OpticsContainer != none)
    {
        OpticsContainer.ActionScriptVoid("startLockOn");
    }
}

function LockedOn()
{
    if(OpticsContainer != none)
    {
        OpticsContainer.ActionScriptVoid("lockedOn");
    }
}

defaultproperties
{
    MovieInfo=SwfMovie'UI_World.MedicOpticsWorld_SWF'
    RenderTexture=TextureRenderTarget2D'WEP_1P_Optics_TEX.Wep_1stP_Optics_R2T'
}