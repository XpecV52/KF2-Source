/*******************************************************************************
 * KFGFxMenu_Trader generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_Trader extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI)
    config(Game);

enum EItemType
{
    EIT_Weapon,
    EIT_Armor,
    EIT_NonSellable,
    EIT_Grenade,
    EIT_MAX
};

enum TraderList
{
    TL_Shop,
    TL_Player,
    TL_MAX
};

enum TabIndices
{
    TI_Perks,
    TI_Type,
    TI_Favorites,
    TI_All,
    TI_MAX
};

struct native SItemInformation
{
    var bool bIsSecondaryAmmo;
    var int SpareAmmoCount;
    var int MaxSpareAmmo;
    var int MaxSecondaryAmmoCount;
    var int SellPrice;
    var byte MagazineCapacity;
    var byte SecondaryAmmoCount;
    var int AutoFillDosh;
    var int AmmoPricePerMagazine;
    var STraderItem DefaultItem;

    structdefaultproperties
    {
        bIsSecondaryAmmo=false
        SpareAmmoCount=0
        MaxSpareAmmo=0
        MaxSecondaryAmmoCount=0
        SellPrice=0
        MagazineCapacity=0
        SecondaryAmmoCount=0
        AutoFillDosh=0
        AmmoPricePerMagazine=0
        DefaultItem=(WeaponDef=none,ClassName=None,SingleClassName=None,DualClassName=None,AssociatedPerkClass=none,MaxSpareAmmo=0,InitialSpareMags=0,MaxSecondaryAmmoCount=0,MagazineCapacity=0,BlocksRequired=0,SecondaryAmmoImagePath="",TraderFilter=EFilterTypeUI.FT_Pistol,InventoryGroup=0,GroupPriority=0,WeaponStats=none)
    }
};

var array<SItemInformation> OwnedItemList;
var SItemInformation GrenadeItem;
var SItemInformation ArmorItem;
var KFGFxObject_TraderItems TraderItems;
var array<STraderItem> ShopWeaponList;
var KFPlayerController MyKFPC;
var KFPlayerReplicationInfo MyKFPRI;
var KFInventoryManager MyKFIM;
var KFGFxTraderContainer_GameInfo GameInfoContainer;
var KFGFxTraderContainer_Filter FilterContainer;
var KFGFxTraderContainer_Store ShopContainer;
var KFGFxTraderContainer_PlayerInventory PlayerInventoryContainer;
var KFGFxTraderContainer_PlayerInfo PlayerInfoContainer;
var KFGFxTraderContainer_ItemDetails ItemDetails;
var int CurrentFilterIndex;
var int TotalDosh;
var bool bPendingDoshUpdate;
var bool bGenericItemSelected;
var bool bCanBuyOrSellItem;
var int TotalBlocks;
var byte MaxBlocks;
var KFGFxMenu_Trader.TabIndices CurrentTab;
var byte SelectedList;
var byte SelectedItemIndex;
var STraderItem LastDefaultItemInfo;
var SItemInformation LastItemInfo;
var const localized string ExitMenuString;
var int PrevArmor;
var config array<config name> FavoritedItems;
var KFPerk LastPerkClass;

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    MyKFPC = KFPlayerController(Outer.GetPC());
    SetString("exitMenuString", ExitMenuString);
    SetString("exitPromptString", ExitMenuString);
    SetString("backPromptString", Localize("KFGFxWidget_ButtonPrompt", "CancelString", "KFGame"));
}

function OnOpen()
{
    if(MyKFPC == none)
    {
        return;
    }
    if((MyKFPC.Pawn != none) && MyKFPC.PlayerReplicationInfo != none)
    {
        MyKFPRI = KFPlayerReplicationInfo(Outer.GetPC().PlayerReplicationInfo);
        MyKFIM = KFInventoryManager(Outer.GetPC().Pawn.InvManager);
        CurrentTab = 0;
        CurrentFilterIndex = GetPerkIndex();
        if((MyKFPRI != none) && MyKFIM != none)
        {
            InitializeOwnedItemList();
            TotalBlocks = MyKFIM.CurrentCarryBlocks;
            TotalDosh = int(MyKFPRI.Score);
            MaxBlocks = MyKFIM.MaxCarryBlocks;
            CurrentFilterIndex = MyKFPRI.NetPerkIndex;
            UpdatePlayerInfo();            
        }
        else
        {
            MyKFPC.CloseTraderMenu();
        }        
    }
    else
    {
        MyKFPC.CloseTraderMenu();
    }
    RefreshItemComponents();
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.UpdateLock();
    }
    if(ShopContainer != none)
    {
        ShopContainer.OnTraderReopened();
    }
    MyKFPC.bClientTraderMenuOpen = true;
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'GameInfoContainer':
            if(GameInfoContainer == none)
            {
                GameInfoContainer = KFGFxTraderContainer_GameInfo(Widget);
                GameInfoContainer.Initialize(self);
                GameInfoContainer.SetDosh(TotalDosh);
                GameInfoContainer.SetCurrentWeight(TotalBlocks, MaxBlocks);
            }
            break;
        case 'FilterContainer':
            if(FilterContainer == none)
            {
                FilterContainer = KFGFxTraderContainer_Filter(Widget);
                FilterContainer.SetTabsData();
            }
            break;
        case 'ShopContainer':
            if(ShopContainer == none)
            {
                ShopContainer = KFGFxTraderContainer_Store(Widget);
                ShopContainer.Initialize(self);
                CurrentTab = 0;
                CurrentFilterIndex = GetPerkIndex();
                RefreshShopItemList(0, byte(CurrentFilterIndex));
            }
            break;
        case 'PlayerInventoryContainer':
            if(PlayerInventoryContainer == none)
            {
                PlayerInventoryContainer = KFGFxTraderContainer_PlayerInventory(Widget);
                PlayerInventoryContainer.Initialize(self);
                PlayerInventoryContainer.RefreshPlayerInventory();
            }
            break;
        case 'PlayerInfoContainer':
            if(PlayerInfoContainer == none)
            {
                PlayerInfoContainer = KFGFxTraderContainer_PlayerInfo(Widget);
                PlayerInfoContainer.Initialize(self);
            }
            break;
        case 'ItemDetailsContainer':
            if(ItemDetails == none)
            {
                ItemDetails = KFGFxTraderContainer_ItemDetails(Widget);
                ItemDetails.Initialize(self);
            }
            break;
        default:
            break;
    }
    return true;
}

function int GetPerkIndex()
{
    return MyKFPC.PerkList.Find('PerkClass', MyKFPC.CurrentPerk.Class;
}

event OnClose()
{
    MyKFIM.ServerCloseTraderMenu();
    if(MyKFPC.MyGFxHUD.WeaponSelectWidget != none)
    {
        MyKFPC.MyGFxHUD.WeaponSelectWidget.RefreshWeaponSelect();
    }
    OwnedItemList.Length = 0;
    TotalDosh = 0;
    super.OnClose();
    MyKFPC.bClientTraderMenuOpen = false;
}

function AddDosh(int AddedDosh)
{
    TotalDosh = Max(TotalDosh + AddedDosh, 0);
    if(Outer.GetPC().Role < ROLE_Authority)
    {
        bPendingDoshUpdate = true;
        Outer.GetPC().SetTimer(2, false, 'UpdateCurrentDosh', self);
    }
}

simulated function NotifyDoshChanged()
{
    if(bPendingDoshUpdate)
    {
        bPendingDoshUpdate = false;
        if(MyKFPRI.Score != float(TotalDosh))
        {
            return;
        }
    }
    UpdateCurrentDosh();
}

simulated function UpdateCurrentDosh()
{
    TotalDosh = Max(int(MyKFPRI.Score), 0);
    RefreshItemComponents();
    bPendingDoshUpdate = false;
    Outer.GetPC().ClearTimer('UpdateCurrentDosh', self);
}

function AddBlocks(int AddedBlocks)
{
    TotalBlocks = Max(TotalBlocks + AddedBlocks, 0);
}

function OneSecondLoop()
{
    local KFPawn_Human KFP;

    if(GameInfoContainer != none)
    {
        GameInfoContainer.UpdateTraderTimer();
    }
    KFP = KFPawn_Human(MyKFPC.Pawn);
    if((KFP != none) && PrevArmor != KFP.Armor)
    {
        ArmorItem.SpareAmmoCount = KFP.Armor;
        PrevArmor = KFP.Armor;
        RefreshItemComponents();
    }
}

function UpdatePlayerInfo()
{
    if((MyKFPC != none) && PlayerInfoContainer != none)
    {
        PlayerInfoContainer.SetPerkInfo();
        PlayerInfoContainer.SetPerkList();
        if(LastPerkClass != MyKFPC.CurrentPerk)
        {
            LastPerkClass = MyKFPC.CurrentPerk;
            OnPerkChanged(GetPerkIndex());
        }
        RefreshItemComponents();
    }
}

function InitializeOwnedItemList()
{
    local Inventory Inv;
    local KFWeapon KFW;
    local KFPawn_Human KFP;

    OwnedItemList.Length = 0;
    TraderItems = KFGameReplicationInfo(MyKFPC.WorldInfo.GRI).TraderItems;
    KFP = KFPawn_Human(MyKFPC.Pawn);
    if(KFP != none)
    {
        ArmorItem.SpareAmmoCount = KFP.Armor;
        ArmorItem.MaxSpareAmmo = KFP.GetMaxArmor();
        ArmorItem.AmmoPricePerMagazine = int(float(TraderItems.ArmorPrice) * MyKFPC.CurrentPerk.GetArmorDiscountMod());
        ArmorItem.DefaultItem.WeaponDef = TraderItems.ArmorDef;
        GrenadeItem.SpareAmmoCount = MyKFIM.GrenadeCount;
        GrenadeItem.MaxSpareAmmo = KFP.GetPerk().MaxGrenadeCount;
        GrenadeItem.AmmoPricePerMagazine = TraderItems.GrenadePrice;
        GrenadeItem.DefaultItem.WeaponDef = MyKFPC.CurrentPerk.GrenadeWeaponDef;
        GrenadeItem.DefaultItem.AssociatedPerkClass = MyKFPC.CurrentPerk.Class;
        Inv = MyKFIM.InventoryChain;
        J0x39A:

        if(Inv != none)
        {
            KFW = KFWeapon(Inv);
            if(KFW != none)
            {
                SetWeaponInformation(KFW);
            }
            Inv = Inv.Inventory;
            goto J0x39A;
        }
    }
}

function GiveExternalWeapon(KFWeapon KFW)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < OwnedItemList.Length)
    {
        if(OwnedItemList[I].DefaultItem.ClassName == KFW.Class.Name)
        {
            return;
        }
        ++ I;
        goto J0x0B;
    }
    if((TotalBlocks + KFW.InventorySize) > MaxBlocks)
    {
        if(MyKFPC.Pawn != none)
        {
            MyKFPC.Pawn.TossInventory(KFW);
        }        
    }
    else
    {
        AddBlocks(KFW.InventorySize);
        SetWeaponInformation(KFW);
        RefreshItemComponents();
    }
}

function SetWeaponInformation(KFWeapon KFW)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < TraderItems.SaleItems.Length)
    {
        if(KFW.Class.Name == TraderItems.SaleItems[I].ClassName)
        {
            SetWeaponInfo(KFW, TraderItems.SaleItems[I]);
            return;
        }
        ++ I;
        goto J0x0B;
    }
}

function SetWeaponInfo(out KFWeapon KFW, STraderItem DefaultItem)
{
    local SItemInformation WeaponInfo;

    WeaponInfo.SpareAmmoCount = KFW.SpareAmmoCount[0] + KFW.AmmoCount[0];
    WeaponInfo.MaxSpareAmmo = KFW.MaxSpareAmmo[0];
    WeaponInfo.MagazineCapacity = KFW.MagazineCapacity[0];
    WeaponInfo.SecondaryAmmoCount = KFW.AmmoCount[1];
    WeaponInfo.MaxSecondaryAmmoCount = KFW.MagazineCapacity[1];
    WeaponInfo.DefaultItem = DefaultItem;
    WeaponInfo.AmmoPricePerMagazine = DefaultItem.WeaponDef.default.AmmoPricePerMag;
    WeaponInfo.SellPrice = MyKFIM.GetAdjustedSellPriceFor(DefaultItem, KFW);
    AddItemByPriority(WeaponInfo);
    if(DefaultItem.WeaponDef.static.UsesSecondaryAmmo())
    {
        WeaponInfo.bIsSecondaryAmmo = true;
        if(MyKFIM.bLogInventory)
        {
            LogInternal(("SetWeaponInfo: Adding" @ string(DefaultItem.ClassName)) @ "to OwnedItemList");
        }
        OwnedItemList.AddItem(WeaponInfo;
    }
    if(DefaultItem.SingleClassName != 'None')
    {
        RemoveWeaponFromOwnedItemList(,, DefaultItem.SingleClassName, true);
    }
}

function int AddWeaponToOwnedItemList(STraderItem DefaultItem, optional bool bDoNotBuy)
{
    local SItemInformation WeaponInfo;
    local KFPerk CurrentPerk;
    local byte ItemIndex, DefaultMagazineCapacity;
    local int AddedWeaponIndex, OwnedSingleIdx, SingleDualAmmoDiff;
    local bool bShouldMagSizeModifySpareAmmo, bAddingDual;

    CurrentPerk = MyKFPC.CurrentPerk;
    if(MyKFIM.bLogInventory)
    {
        LogInternal("AddWeaponToOwnedItemList: DefaultItem=" $ string(DefaultItem.ClassName));
    }
    WeaponInfo.MagazineCapacity = DefaultItem.MagazineCapacity;
    DefaultMagazineCapacity = WeaponInfo.MagazineCapacity;
    CurrentPerk.ModifyMagSizeAndNumber(none, WeaponInfo.MagazineCapacity, DefaultItem.AssociatedPerkClass);
    bShouldMagSizeModifySpareAmmo = CurrentPerk.ShouldMagSizeModifySpareAmmo(none, DefaultItem.AssociatedPerkClass);
    WeaponInfo.MaxSpareAmmo = DefaultItem.MaxSpareAmmo + ((bShouldMagSizeModifySpareAmmo) ? WeaponInfo.MagazineCapacity : DefaultMagazineCapacity);
    CurrentPerk.ModifyMaxSpareAmmoAmount(none, WeaponInfo.MaxSpareAmmo, DefaultItem);
    WeaponInfo.SpareAmmoCount = DefaultItem.InitialSpareMags * DefaultItem.MagazineCapacity;
    CurrentPerk.ModifySpareAmmoAmount(none, WeaponInfo.SpareAmmoCount, DefaultItem);
    WeaponInfo.SpareAmmoCount += ((bShouldMagSizeModifySpareAmmo) ? WeaponInfo.MagazineCapacity : DefaultMagazineCapacity);
    bAddingDual = DefaultItem.SingleClassName != 'None';
    if(bAddingDual)
    {
        OwnedSingleIdx = 0;
        J0x386:

        if(OwnedSingleIdx < OwnedItemList.Length)
        {
            if(OwnedItemList[OwnedSingleIdx].DefaultItem.ClassName == DefaultItem.SingleClassName)
            {
                SingleDualAmmoDiff = OwnedItemList[OwnedSingleIdx].SpareAmmoCount - WeaponInfo.SpareAmmoCount;
                WeaponInfo.SpareAmmoCount = OwnedItemList[OwnedSingleIdx].SpareAmmoCount;
                goto J0x49A;
            }
            ++ OwnedSingleIdx;
            goto J0x386;
        }
    }
    J0x49A:

    CurrentPerk.MaximizeSpareAmmoAmount(DefaultItem.AssociatedPerkClass, WeaponInfo.SpareAmmoCount, DefaultItem.MaxSpareAmmo + DefaultItem.MagazineCapacity);
    WeaponInfo.SecondaryAmmoCount = byte(DefaultItem.MaxSecondaryAmmoCount);
    CurrentPerk.ModifyMagSizeAndNumber(none, WeaponInfo.SecondaryAmmoCount, DefaultItem.AssociatedPerkClass);
    WeaponInfo.MaxSecondaryAmmoCount = DefaultItem.MaxSecondaryAmmoCount;
    CurrentPerk.ModifyMaxSpareAmmoAmount(none, WeaponInfo.MaxSecondaryAmmoCount, DefaultItem);
    WeaponInfo.AmmoPricePerMagazine = DefaultItem.WeaponDef.default.AmmoPricePerMag;
    WeaponInfo.SellPrice = MyKFIM.GetAdjustedSellPriceFor(DefaultItem);
    WeaponInfo.DefaultItem = DefaultItem;
    AddedWeaponIndex = AddItemByPriority(WeaponInfo);
    if(!bDoNotBuy)
    {
        if(MyKFIM.bLogInventory)
        {
            LogInternal("AddWeaponToOwnedItemList: Calling ServerBuyWeapon on" @ string(DefaultItem.ClassName));
        }
        TraderItems.GetItemIndicesFromArche(ItemIndex, DefaultItem.ClassName);
        MyKFIM.ServerBuyWeapon(ItemIndex);        
    }
    else
    {
        TraderItems.GetItemIndicesFromArche(ItemIndex, DefaultItem.ClassName);
        if(MyKFIM.bLogInventory)
        {
            LogInternal("AddWeaponToOwnedItemList: Calling ServerAddTransactionItem on" @ string(DefaultItem.ClassName));
        }
        MyKFIM.ServerAddTransactionItem(ItemIndex);
        AddBlocks(DefaultItem.BlocksRequired);
    }
    if(bAddingDual)
    {
        AddTransactionAmmo(ItemIndex, SingleDualAmmoDiff, false);
        RemoveWeaponFromOwnedItemList(,, DefaultItem.SingleClassName, true);
    }
    return AddedWeaponIndex;
}

function RemoveWeaponFromOwnedItemList(optional int OwnedListIdx, optional name ClassName, optional bool bDoNotSell)
{
    local SItemInformation ItemInfo;
    local byte ItemIndex;
    local int SingleOwnedIndex;

    OwnedListIdx = -1;        
    if(MyKFIM.bLogInventory)
    {
        LogInternal((((("RemoveWeaponFromOwnedItemList: OwnedListIdx=" $ string(OwnedListIdx)) @ "ClassName=") $ string(ClassName)) @ "bDoNotSell=") $ string(bDoNotSell));
    }
    if((OwnedListIdx == -1) && ClassName != 'None')
    {
        OwnedListIdx = 0;
        J0xDA:

        if(OwnedListIdx < OwnedItemList.Length)
        {
            if(OwnedItemList[OwnedListIdx].DefaultItem.ClassName == ClassName)
            {
                goto J0x14A;
            }
            ++ OwnedListIdx;
            goto J0xDA;
        }
    }
    J0x14A:

    if(MyKFIM.bLogInventory)
    {
        LogInternal("RemoveWeaponFromOwnedItemList: OwnedItemList.length=" $ string(OwnedItemList.Length));
    }
    if(OwnedListIdx >= OwnedItemList.Length)
    {
        return;
    }
    ItemInfo = OwnedItemList[OwnedListIdx];
    if(MyKFIM.bLogInventory)
    {
        LogInternal((((("RemoveWeaponFromOwnedItemList: ItemInfo.ClassName=" $ string(ItemInfo.DefaultItem.ClassName)) @ "ItemInfo.SingleClassName=") $ string(ItemInfo.DefaultItem.SingleClassName)) @ "ItemInfo.DualClassName=") $ string(ItemInfo.DefaultItem.DualClassName));
    }
    if(!bDoNotSell)
    {
        TraderItems.GetItemIndicesFromArche(ItemIndex, ItemInfo.DefaultItem.ClassName);
        if(MyKFIM.bLogInventory)
        {
            LogInternal("RemoveWeaponFromOwnedItemList: Calling ServerSellWeapon on" @ string(ItemInfo.DefaultItem.ClassName));
        }
        MyKFIM.ServerSellWeapon(ItemIndex);        
    }
    else
    {
        TraderItems.GetItemIndicesFromArche(ItemIndex, ItemInfo.DefaultItem.ClassName);
        if(MyKFIM.bLogInventory)
        {
            LogInternal("RemoveWeaponFromOwnedItemList: Calling ServerRemoveTransactionItem on" @ string(ItemInfo.DefaultItem.ClassName));
        }
        MyKFIM.ServerRemoveTransactionItem(ItemIndex);
        AddBlocks(-ItemInfo.DefaultItem.BlocksRequired);
    }
    if(MyKFIM.bLogInventory)
    {
        LogInternal((("RemoveWeaponFromOwnedItemList: OwnedListIdx=" $ string(OwnedListIdx)) @ "OwnedItemList[OwnedListIdx]=") $ string(OwnedItemList[OwnedListIdx].DefaultItem.ClassName));
    }
    if(OwnedItemList[OwnedListIdx].bIsSecondaryAmmo)
    {
        if(MyKFIM.bLogInventory)
        {
            LogInternal(("RemoveWeaponFromOwnedItemList: Removing" @ string(OwnedItemList[OwnedListIdx].DefaultItem.ClassName)) @ "from OwnedItemList");
        }
        OwnedItemList.Remove(OwnedListIdx, 1;
        if((OwnedListIdx - 1) >= 0)
        {
            if(MyKFIM.bLogInventory)
            {
                LogInternal(("RemoveWeaponFromOwnedItemList: Removing" @ string(OwnedItemList[OwnedListIdx - 1].DefaultItem.ClassName)) @ "from OwnedItemList");
            }
            OwnedItemList.Remove(OwnedListIdx - 1, 1;
        }        
    }
    else
    {
        if(OwnedItemList[OwnedListIdx].DefaultItem.WeaponDef.static.UsesSecondaryAmmo())
        {
            if((OwnedListIdx + 1) < OwnedItemList.Length)
            {
                if(MyKFIM.bLogInventory)
                {
                    LogInternal(("RemoveWeaponFromOwnedItemList: Removing" @ string(OwnedItemList[OwnedListIdx + 1].DefaultItem.ClassName)) @ "from OwnedItemList");
                }
                OwnedItemList.Remove(OwnedListIdx + 1, 1;
                if(MyKFIM.bLogInventory)
                {
                    LogInternal(("RemoveWeaponFromOwnedItemList: Removing" @ string(OwnedItemList[OwnedListIdx].DefaultItem.ClassName)) @ "from OwnedItemList");
                }
                OwnedItemList.Remove(OwnedListIdx, 1;
            }            
        }
        else
        {
            if(MyKFIM.bLogInventory)
            {
                LogInternal(("RemoveWeaponFromOwnedItemList: Removing" @ string(OwnedItemList[OwnedListIdx].DefaultItem.ClassName)) @ "from OwnedItemList");
            }
            OwnedItemList.Remove(OwnedListIdx, 1;
        }
    }
    if(MyKFIM.bLogInventory)
    {
        LogInternal("RemoveWeaponFromOwnedItemList: ItemInfo.DefaultItem.SingleClassName=" $ string(ItemInfo.DefaultItem.SingleClassName));
    }
    if(ItemInfo.DefaultItem.SingleClassName != 'None')
    {
        if(TraderItems.GetItemIndicesFromArche(ItemIndex, ItemInfo.DefaultItem.SingleClassName))
        {
            SingleOwnedIndex = AddWeaponToOwnedItemList(TraderItems.SaleItems[ItemIndex], true);
            AddTransactionAmmo(ItemIndex, OwnedItemList[OwnedListIdx].SpareAmmoCount - OwnedItemList[SingleOwnedIndex].SpareAmmoCount, false);
            OwnedItemList[SingleOwnedIndex].SpareAmmoCount = OwnedItemList[OwnedListIdx].SpareAmmoCount;
        }
    }
}

// Export UKFGFxMenu_Trader::execAddTransactionAmmo(FFrame&, void* const)
private native final function AddTransactionAmmo(byte ItemIndex, int Amount, bool bSecondaryAmmo);

function int AddItemByPriority(out SItemInformation WeaponInfo)
{
    local byte I, WeaponGroup, WeaponPriority, BestIndex;

    BestIndex = 0;
    WeaponGroup = WeaponInfo.DefaultItem.InventoryGroup;
    WeaponPriority = byte(WeaponInfo.DefaultItem.GroupPriority);
    I = 0;
    J0x8C:

    if(I < OwnedItemList.Length)
    {
        if(WeaponGroup < OwnedItemList[I].DefaultItem.InventoryGroup)
        {
            BestIndex = I;
            goto J0x2B5;            
        }
        else
        {
            if(WeaponGroup == OwnedItemList[I].DefaultItem.InventoryGroup)
            {
                if(float(WeaponPriority) > OwnedItemList[I].DefaultItem.GroupPriority)
                {
                    BestIndex = I;
                    goto J0x2B5;                    
                }
                else
                {
                    if((float(WeaponPriority) == OwnedItemList[I].DefaultItem.GroupPriority) && MyKFPC.CurrentPerk.Class == WeaponInfo.DefaultItem.AssociatedPerkClass)
                    {
                        BestIndex = I;
                        goto J0x2B5;
                    }
                }                
            }
            else
            {
                BestIndex = byte(I + 1);
            }
        }
        ++ I;
        goto J0x8C;
    }
    J0x2B5:

    if(MyKFIM.bLogInventory)
    {
        LogInternal(("AddItemByPriority: Inserting" @ string(WeaponInfo.DefaultItem.ClassName)) @ "into OwnedItemList");
    }
    OwnedItemList.InsertItem(BestIndex, WeaponInfo;
    if(WeaponInfo.DefaultItem.WeaponDef.static.UsesSecondaryAmmo())
    {
        WeaponInfo.bIsSecondaryAmmo = true;
    }
    return BestIndex;
}

function SetTraderItemDetails(int ItemIndex)
{
    local STraderItem SelectedItem;
    local bool bCanAfford, bCanBuyItem, bCanCarry;

    SelectedList = 0;
    if((ItemDetails != none) && ShopContainer != none)
    {
        if((ShopWeaponList.Length >= 0) && ItemIndex < ShopWeaponList.Length)
        {
            SelectedItemIndex = byte(ItemIndex);
            SelectedItem = ShopWeaponList[ItemIndex];
            bCanAfford = ShopContainer.GetCanAfford(GetAdjustedBuyPriceFor(SelectedItem));
            bCanCarry = ShopContainer.CanCarry(SelectedItem);
            if(!bCanAfford || !bCanCarry)
            {
                bCanBuyItem = false;                
            }
            else
            {
                bCanBuyItem = true;
            }
            ItemDetails.SetShopItemDetails(SelectedItem, GetAdjustedBuyPriceFor(SelectedItem), bCanCarry, bCanBuyItem);
            bCanBuyOrSellItem = bCanBuyItem;            
        }
        else
        {
            ItemDetails.SetVisible(false);
        }
    }
}

function SetPlayerItemDetails(int ItemIndex)
{
    local STraderItem SelectedItem;

    SelectedList = 1;
    if((ItemDetails != none) && ItemIndex < OwnedItemList.Length)
    {
        bGenericItemSelected = false;
        SelectedItemIndex = byte(ItemIndex);
        SelectedItem = OwnedItemList[ItemIndex].DefaultItem;
        ItemDetails.SetPlayerItemDetails(SelectedItem, OwnedItemList[ItemIndex].SellPrice);
        bCanBuyOrSellItem = IsSellable(SelectedItem);
    }
}

function SetGenericItemDetails(out STraderItem DefaultItemInfo, out SItemInformation ItemInfo)
{
    SelectedList = 1;
    if(ItemDetails != none)
    {
        LastItemInfo = ItemInfo;
        LastDefaultItemInfo = DefaultItemInfo;
        bGenericItemSelected = true;
        ItemDetails.SetPlayerItemDetails(DefaultItemInfo, ItemInfo.SellPrice);
        bCanBuyOrSellItem = IsSellable(DefaultItemInfo);
    }
}

function SetNewSelectedIndex(int ListLength)
{
    if(SelectedItemIndex >= ListLength)
    {
        if(SelectedItemIndex != 0)
        {
            -- SelectedItemIndex;
        }
    }
}

function bool IsSellable(const out STraderItem TraderItem)
{
    return (TraderItem.WeaponDef != none) && TraderItem.WeaponDef.default.BuyPrice > 0;
}

function BoughtAmmo(int AmountPurchased, int Price, KFGFxMenu_Trader.EItemType ItemType, optional name ClassName, optional bool bIsSecondaryAmmo)
{
    local byte ItemIndex;

    AddDosh(-Price);
    if(ItemType == 0)
    {
        TraderItems.GetItemIndicesFromArche(ItemIndex, ClassName);
    }
    MyKFIM.BuyAmmo(AmountPurchased, ItemType, ItemIndex, bIsSecondaryAmmo);
}

function OnPerkChanged(int PerkIndex)
{
    if(CurrentTab == 0)
    {
        CurrentFilterIndex = PerkIndex;
        RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
    }
}

function RefreshItemComponents()
{
    if((PlayerInventoryContainer != none) && PlayerInfoContainer != none)
    {
        PlayerInventoryContainer.RefreshPlayerInventory();
        RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
        GameInfoContainer.UpdateGameInfo();
        GameInfoContainer.SetDosh(TotalDosh);
        GameInfoContainer.SetCurrentWeight(TotalBlocks, MaxBlocks);
        if(SelectedList == 0)
        {
            SetTraderItemDetails(SelectedItemIndex);            
        }
        else
        {
            if(bGenericItemSelected)
            {
                SetGenericItemDetails(LastDefaultItemInfo, LastItemInfo);                
            }
            else
            {
                SetPlayerItemDetails(SelectedItemIndex);
            }
        }
    }
}

function RefreshShopItemList(KFGFxMenu_Trader.TabIndices TabIndex, byte FilterIndex)
{
    if((ShopContainer != none) && FilterContainer != none)
    {
        switch(TabIndex)
        {
            case 0:
                ShopContainer.RefreshWeaponListByPerk(FilterIndex, ShopWeaponList);
                FilterContainer.SetPerkFilterData(FilterIndex);
                break;
            case 1:
                ShopContainer.RefreshItemsByType(FilterIndex, ShopWeaponList);
                FilterContainer.SetTypeFilterData(FilterIndex);
                break;
            case 2:
                ShopContainer.RefreshFavoriteItems(ShopWeaponList);
                FilterContainer.ClearFilters();
                break;
            case 3:
                ShopContainer.RefreshAllItems(ShopWeaponList);
                FilterContainer.ClearFilters();
                break;
            default:
                break;
        }
        FilterContainer.SetInt("selectedTab", TabIndex);
        FilterContainer.SetInt("selectedFilter", FilterIndex);
        if(SelectedList == 0)
        {
            if(SelectedItemIndex >= ShopWeaponList.Length)
            {
                SelectedItemIndex = byte(ShopWeaponList.Length - 1);
            }
            SetTraderItemDetails(SelectedItemIndex);
            ShopContainer.SetSelectedIndex(SelectedItemIndex);
        }
    }
}

function bool GetIsFavorite(name ClassName)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < FavoritedItems.Length)
    {
        if(ClassName == FavoritedItems[I])
        {
            return true;
        }
        ++ I;
        goto J0x0C;
    }
    return false;
}

function ToggleFavorite(name ClassName)
{
    local byte I;
    local bool bUnfavoriteItem;

    I = 0;
    J0x0C:

    if(I < FavoritedItems.Length)
    {
        if(ClassName == FavoritedItems[I])
        {
            FavoritedItems.Remove(I, 1;
            bUnfavoriteItem = true;
            goto J0x7D;
        }
        ++ I;
        goto J0x0C;
    }
    J0x7D:

    if(!bUnfavoriteItem)
    {
        FavoritedItems.AddItem(ClassName;
    }
    SaveConfig();
}

simulated function int GetAdjustedBuyPriceFor(const out STraderItem ShopItem)
{
    return MyKFIM.GetAdjustedBuyPriceFor(ShopItem, OwnedItemList);
}

simulated function int GetDisplayedBlocksRequiredFor(const out STraderItem Item)
{
    return MyKFIM.GetDisplayedBlocksRequiredFor(Item);
}

function bool IsInOwnedItemList(name ItemName)
{
    local int I;
    local name OwnedItemClassName;

    I = 0;
    J0x0B:

    if(I < OwnedItemList.Length)
    {
        OwnedItemClassName = OwnedItemList[I].DefaultItem.ClassName;
        if(OwnedItemClassName == 'None')
        {
            WarnInternal("Owned item with Class NAME_None");
            goto J0xBF;            
        }
        else
        {
            if(OwnedItemClassName == ItemName)
            {
                return true;
            }
        }
        J0xBF:

        ++ I;
        goto J0x0B;
    }
    return false;
}

function Callback_BuyOrSellItem()
{
    local STraderItem ShopItem;
    local SItemInformation ItemInfo;
    local bool bCanAfford, bCanCarry;

    if(bCanBuyOrSellItem)
    {
        if(SelectedList == 0)
        {
            ShopItem = ShopWeaponList[SelectedItemIndex];
            AddDosh(-GetAdjustedBuyPriceFor(ShopItem));
            AddBlocks(ShopItem.BlocksRequired);
            if(MyKFIM.bLogInventory)
            {
                LogInternal("Callback_BuyOrSellItem: ShopItem=" $ string(ShopItem.ClassName));
            }
            AddWeaponToOwnedItemList(ShopItem);
            RefreshItemComponents();
            SetNewSelectedIndex(ShopWeaponList.Length);
            SetTraderItemDetails(SelectedItemIndex);
            ShopContainer.ActionScriptVoid("itemBought");            
        }
        else
        {
            if(MyKFIM.bLogInventory)
            {
                LogInternal("Callback_BuyOrSellItem: SelectedItemIndex=" $ string(SelectedItemIndex));
            }
            ItemInfo = OwnedItemList[SelectedItemIndex];
            if(MyKFIM.bLogInventory)
            {
                LogInternal("Callback_BuyOrSellItem: ItemInfo=" $ string(ItemInfo.DefaultItem.ClassName));
            }
            AddDosh(ItemInfo.SellPrice);
            AddBlocks(-ItemInfo.DefaultItem.BlocksRequired);
            RemoveWeaponFromOwnedItemList(SelectedItemIndex);
            RefreshItemComponents();
            SetNewSelectedIndex(OwnedItemList.Length);
            SetPlayerItemDetails(SelectedItemIndex);
            PlayerInventoryContainer.ActionScriptVoid("itemSold");
        }        
    }
    else
    {
        if(SelectedList == 0)
        {
            ShopItem = ShopWeaponList[SelectedItemIndex];
            bCanAfford = ShopContainer.GetCanAfford(GetAdjustedBuyPriceFor(ShopItem));
            bCanCarry = ShopContainer.CanCarry(ShopItem);
            MyKFPC.PlayTraderSelectItemDialog(!bCanAfford, !bCanCarry);
        }
    }
}

function Callback_FavoriteItem()
{
    if(SelectedList == 0)
    {
        ToggleFavorite(ShopWeaponList[SelectedItemIndex].ClassName);
        if(CurrentTab == 2)
        {
            RefreshItemComponents();
            SetNewSelectedIndex(ShopWeaponList.Length);
        }
        SetTraderItemDetails(SelectedItemIndex);        
    }
    else
    {
        ToggleFavorite(OwnedItemList[SelectedItemIndex].DefaultItem.ClassName);
        SetPlayerItemDetails(SelectedItemIndex);
    }
}

function Callback_FilterChanged(int FilterIndex)
{
    CurrentFilterIndex = FilterIndex;
    RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
}

function Callback_TabChanged(int TabIndex)
{
    CurrentTab = byte(TabIndex);
    if((CurrentTab == 0) && MyKFPRI != none)
    {
        CurrentFilterIndex = GetPerkIndex();        
    }
    else
    {
        CurrentFilterIndex = 0;
    }
    RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
}

function Callback_BuyGrenade()
{
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.BuyGrenade(GrenadeItem);
        RefreshItemComponents();
    }
}

function Callback_FillGrenades()
{
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.FillAmmo(GrenadeItem, true);
        RefreshItemComponents();
    }
}

function Callback_FillArmor()
{
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.FillArmor(ArmorItem);
        RefreshItemComponents();
    }
}

function Callback_FillAmmo(int ItemIndex)
{
    local SItemInformation ItemInfo;

    if(PlayerInventoryContainer != none)
    {
        ItemInfo = OwnedItemList[ItemIndex];
        PlayerInventoryContainer.FillAmmo(ItemInfo);
        OwnedItemList[ItemIndex] = ItemInfo;
        RefreshItemComponents();
    }
}

function Callback_BuyMagazine(int ItemIndex)
{
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.BuyMagazine(ItemIndex);
        RefreshItemComponents();
    }
}

function Callback_AutoFill(int ItemIndex)
{
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.StartAutoFill();
    }
}

function Callback_ShopItemSelected(int ItemIndex)
{
    SetTraderItemDetails(ItemIndex);
}

function Callback_PlayerItemSelected(int ItemIndex)
{
    SetPlayerItemDetails(ItemIndex);
}

function Callback_ArmorItemSelected()
{
    SetGenericItemDetails(ArmorItem.DefaultItem, ArmorItem);
}

function Callback_GrenadeItemSelected()
{
    SetGenericItemDetails(GrenadeItem.DefaultItem, GrenadeItem);
}

function Callback_PerkChanged(int PerkIndex)
{
    if(MyKFPRI.NetPerkIndex != PerkIndex)
    {
        MyKFPC.RequestPerkChange(byte(PerkIndex));
        MyKFPC.SetHaveUpdatePerk(true);
    }
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.UpdateLock();
    }
    UpdatePlayerInfo();
    RefreshItemComponents();
}

function Callback_Close()
{
    Manager.CloseMenus();
}

defaultproperties
{
    ExitMenuString="EXIT MENU"
    SubWidgetBindings=/* Array type was not detected. */
}