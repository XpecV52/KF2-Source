/*******************************************************************************
 * KFGFxMenu_Trader generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_Trader extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI);

const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;
const KFID_ToggleToRun = 172;
const KFID_ClassicPlayerInfo = 173;
const KFID_VOIPMicVolumeMultiplier = 174;
const KFID_GamepadDeadzoneScale = 175;
const KFID_GamepadAccelerationJumpScale = 176;
const KFID_HasTabbedToStore = 177;
const KFID_AllowSwapTo9mm = 178;
const KFID_SurvivalStartingWeapIdx = 179;
const KFID_SurvivalStartingGrenIdx = 180;

enum EItemType
{
    EIT_Weapon,
    EIT_Armor,
    EIT_NonSellable,
    EIT_Grenade,
    EIT_MAX
};

enum TraderList
{
    TL_Shop,
    TL_Player,
    TL_MAX
};

enum TabIndices
{
    TI_Perks,
    TI_Type,
    TI_Favorites,
    TI_All,
    TI_MAX
};

struct native SItemInformation
{
    var bool bIsSecondaryAmmo;
    var int SpareAmmoCount;
    var int MaxSpareAmmo;
    var int MaxSecondaryAmmo;
    var int SellPrice;
    var int SecondaryAmmoCount;
    var int MagazineCapacity;
    var int AutoFillDosh;
    var int AmmoPricePerMagazine;
    var STraderItem DefaultItem;
    var int ItemUpgradeLevel;

    structdefaultproperties
    {
        bIsSecondaryAmmo=false
        SpareAmmoCount=0
        MaxSpareAmmo=0
        MaxSecondaryAmmo=0
        SellPrice=0
        SecondaryAmmoCount=0
        MagazineCapacity=0
        AutoFillDosh=0
        AmmoPricePerMagazine=0
        DefaultItem=(WeaponDef=none,ClassName=None,SingleClassName=None,DualClassName=None,AssociatedPerkClasses=none,MaxSpareAmmo=0,SecondaryAmmoImagePath="",GroupPriority=0,WeaponStats=none,WeaponUpgradeWeight=0,WeaponUpgradeWeight[1]=0,WeaponUpgradeWeight[2]=0,WeaponUpgradeWeight[3]=0,WeaponUpgradeWeight[4]=0,WeaponUpgradeWeight[5]=0,WeaponUpgradeDmgMultiplier=0,WeaponUpgradeDmgMultiplier[1]=0,WeaponUpgradeDmgMultiplier[2]=0,WeaponUpgradeDmgMultiplier[3]=0,WeaponUpgradeDmgMultiplier[4]=0,WeaponUpgradeDmgMultiplier[5]=0,InitialSpareMags=0,MagazineCapacity=0,BlocksRequired=0,InitialSecondaryAmmo=0,MaxSecondaryAmmo=0,TraderFilter=EFilterTypeUI.FT_Pistol,AltTraderFilter=EFilterTypeUI.FT_None,InventoryGroup=0,ItemId=-1,bCanBuyAmmo=false)
        ItemUpgradeLevel=0
    }
};

var KFPlayerController MyKFPC;
var KFPlayerReplicationInfo MyKFPRI;
var KFInventoryManager MyKFIM;
var KFGFxTraderContainer_GameInfo GameInfoContainer;
var KFGFxTraderContainer_Filter FilterContainer;
var KFGFxTraderContainer_Store ShopContainer;
var KFGFxTraderContainer_PlayerInventory PlayerInventoryContainer;
var KFGFxTraderContainer_PlayerInfo PlayerInfoContainer;
var KFGFxTraderContainer_ItemDetails ItemDetails;
var KFGFxTraderContainer_ErrorMessage ErrorMessageContainer;
var bool bGenericItemSelected;
var bool bCanBuyOrSellItem;
var STraderItem LastDefaultItemInfo;
var SItemInformation LastItemInfo;
var const localized string ExitMenuString;
var int PrevArmor;
var KFGFxMenu_Trader.TabIndices CurrentTab;
var byte SelectedList;
var byte SelectedItemIndex;
var int CurrentFilterIndex;
var array<name> FavoritedItems;
var KFPerk LastPerkClass;
var array<SItemInformation> OwnedItemList;

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    SetString("exitMenuString", ExitMenuString);
    SetString("exitPromptString", ExitMenuString);
    SetString("backPromptString", Localize("KFGFxWidget_ButtonPrompt", "CancelString", "KFGame"));
    LocalizeText();
}

function OnR3Pressed();

function LocalizeText()
{
    local GFxObject TextObject;

    TextObject = Outer.CreateObject("Object");
    TextObject.SetString("favoriteString", Class'KFGFxTraderContainer_ItemDetails'.default.FavoriteString);
    TextObject.SetString("unFavoriteString", Class'KFGFxTraderContainer_ItemDetails'.default.UnfavoriteString);
    TextObject.SetString("changePerkString", Class'KFGFxTraderContainer_PlayerInventory'.default.ChangePerkString);
    TextObject.SetString("selectString", Class'KFGFxWidget_ButtonPrompt'.default.ConfirmString);
    TextObject.SetString("autoFillString", Class'KFGFxTraderContainer_PlayerInventory'.default.AutoFillString);
    TextObject.SetString("upgradeString", Class'KFGFxTraderContainer_ItemDetails'.default.UpgradeString);
    SetObject("localizeCentralPrompts", TextObject);
}

function OnOpen()
{
    local int I;
    local name WeaponName;

    MyKFPC = KFPlayerController(Outer.GetPC());
    if(MyKFPC == none)
    {
        return;
    }
    MyKFPC.GetPurchaseHelper().Initialize();
    MyKFPRI = KFPlayerReplicationInfo(Outer.GetPC().PlayerReplicationInfo);
    MyKFIM = KFInventoryManager(Outer.GetPC().Pawn.InvManager);
    CurrentTab = 0;
    CurrentFilterIndex = GetPerkIndex();
    FavoritedItems.Remove(0, FavoritedItems.Length;
    I = 0;
    J0x15E:

    if(I < MyKFPC.MyGFxManager.CachedProfile.FavoriteWeapons.Length)
    {
        WeaponName = name(MyKFPC.MyGFxManager.CachedProfile.FavoriteWeapons[I]);
        FavoritedItems.AddItem(WeaponName;
        ++ I;
        goto J0x15E;
    }
    if((MyKFPC.Pawn != none) || MyKFPC.PlayerReplicationInfo != none)
    {
        MyKFPC.CloseTraderMenu();
    }
    RefreshItemComponents(true);
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.UpdateLock();
    }
    if(ShopContainer != none)
    {
        ShopContainer.OnTraderReopened();
    }
    MyKFPC.bClientTraderMenuOpen = true;
    UpdatePlayerInfo();
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'GameInfoContainer':
            if(GameInfoContainer == none)
            {
                GameInfoContainer = KFGFxTraderContainer_GameInfo(Widget);
                GameInfoContainer.Initialize(self);
                GameInfoContainer.SetDosh(MyKFPC.GetPurchaseHelper().TotalDosh);
                GameInfoContainer.SetCurrentWeight(MyKFPC.GetPurchaseHelper().TotalBlocks, MyKFPC.GetPurchaseHelper().MaxBlocks);
            }
            break;
        case 'FilterContainer':
            if(FilterContainer == none)
            {
                FilterContainer = KFGFxTraderContainer_Filter(Widget);
                FilterContainer.SetTabsData();
            }
            break;
        case 'ShopContainer':
            if(ShopContainer == none)
            {
                ShopContainer = KFGFxTraderContainer_Store(Widget);
                ShopContainer.Initialize(self);
                CurrentTab = 0;
                CurrentFilterIndex = GetPerkIndex();
                RefreshShopItemList(0, byte(CurrentFilterIndex));
            }
            break;
        case 'PlayerInventoryContainer':
            if(PlayerInventoryContainer == none)
            {
                PlayerInventoryContainer = KFGFxTraderContainer_PlayerInventory(Widget);
                PlayerInventoryContainer.Initialize(self);
                PlayerInventoryContainer.RefreshPlayerInventory();
            }
            break;
        case 'PlayerInfoContainer':
            if(PlayerInfoContainer == none)
            {
                PlayerInfoContainer = KFGFxTraderContainer_PlayerInfo(Widget);
                PlayerInfoContainer.Initialize(self);
            }
            break;
        case 'ItemDetailsContainer':
            if(ItemDetails == none)
            {
                ItemDetails = KFGFxTraderContainer_ItemDetails(Widget);
                ItemDetails.Initialize(self);
            }
            break;
        case 'ErrorMessage':
            if(ErrorMessageContainer == none)
            {
                ErrorMessageContainer = KFGFxTraderContainer_ErrorMessage(Widget);
                ErrorMessageContainer.Initialize(self);
            }
            break;
        default:
            break;
    }
    return true;
}

function int GetPerkIndex()
{
    return MyKFPC.PerkList.Find('PerkClass', MyKFPC.CurrentPerk.Class;
}

event OnClose()
{
    MyKFIM.ServerCloseTraderMenu();
    if(MyKFPC.myGfxHUD.WeaponSelectWidget != none)
    {
        MyKFPC.myGfxHUD.WeaponSelectWidget.RefreshWeaponSelect();
    }
    OwnedItemList.Length = 0;
    MyKFPC.GetPurchaseHelper().TotalDosh = 0;
    super.OnClose();
    MyKFPC.bClientTraderMenuOpen = false;
}

function OneSecondLoop()
{
    local KFPawn_Human KFP;

    if(GameInfoContainer != none)
    {
        GameInfoContainer.UpdateTraderTimer();
    }
    KFP = KFPawn_Human(MyKFPC.Pawn);
    if((KFP != none) && PrevArmor != KFP.Armor)
    {
        MyKFPC.GetPurchaseHelper().ArmorItem.SpareAmmoCount = KFP.Armor;
        PrevArmor = KFP.Armor;
        RefreshItemComponents();
    }
}

function UpdatePlayerInfo()
{
    if((MyKFPC != none) && PlayerInfoContainer != none)
    {
        PlayerInfoContainer.SetPerkInfo();
        PlayerInfoContainer.SetPerkList();
        if(LastPerkClass != MyKFPC.CurrentPerk)
        {
            LastPerkClass = MyKFPC.CurrentPerk;
            OnPerkChanged(GetPerkIndex());
        }
        RefreshItemComponents();
    }
}

function GiveExternalWeapon(KFWeapon KFW)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < OwnedItemList.Length)
    {
        if(OwnedItemList[I].DefaultItem.ClassName == KFW.Class.Name)
        {
            return;
        }
        ++ I;
        goto J0x0B;
    }
    if((MyKFPC.GetPurchaseHelper().TotalBlocks + KFW.GetModifiedWeightValue()) > MyKFPC.GetPurchaseHelper().MaxBlocks)
    {
        if(MyKFPC.Pawn != none)
        {
            MyKFPC.Pawn.TossInventory(KFW);
        }        
    }
    else
    {
        MyKFPC.GetPurchaseHelper().AddBlocks(KFW.GetModifiedWeightValue());
        MyKFPC.GetPurchaseHelper().SetWeaponInformation(KFW);
        RefreshItemComponents();
    }
}

function SetTraderItemDetails(int ItemIndex)
{
    local STraderItem SelectedItem;
    local bool bCanAfford, bCanBuyItem, bCanCarry;

    SelectedList = 0;
    if((ItemDetails != none) && ShopContainer != none)
    {
        if((MyKFPC.GetPurchaseHelper().TraderItems.SaleItems.Length >= 0) && ItemIndex < MyKFPC.GetPurchaseHelper().TraderItems.SaleItems.Length)
        {
            SelectedItemIndex = byte(ItemIndex);
            SelectedItem = MyKFPC.GetPurchaseHelper().TraderItems.SaleItems[ItemIndex];
            bCanAfford = MyKFPC.GetPurchaseHelper().GetCanAfford(MyKFPC.GetPurchaseHelper().GetAdjustedBuyPriceFor(SelectedItem));
            bCanCarry = MyKFPC.GetPurchaseHelper().CanCarry(SelectedItem);
            if(!bCanAfford || !bCanCarry)
            {
                bCanBuyItem = false;                
            }
            else
            {
                bCanBuyItem = true;
            }
            PurchaseError(!bCanAfford, !bCanCarry);
            ItemDetails.SetShopItemDetails(SelectedItem, MyKFPC.GetPurchaseHelper().GetAdjustedBuyPriceFor(SelectedItem), bCanCarry, bCanBuyItem);
            bCanBuyOrSellItem = bCanBuyItem;            
        }
        else
        {
            ItemDetails.SetVisible(false);
        }
    }
}

function SetPlayerItemDetails(int ItemIndex)
{
    local STraderItem SelectedItem;

    SelectedList = 1;
    if((ItemDetails != none) && ItemIndex < OwnedItemList.Length)
    {
        bGenericItemSelected = false;
        SelectedItemIndex = byte(ItemIndex);
        SelectedItem = OwnedItemList[ItemIndex].DefaultItem;
        ItemDetails.SetPlayerItemDetails(SelectedItem, OwnedItemList[ItemIndex].SellPrice, OwnedItemList[ItemIndex].ItemUpgradeLevel);
        bCanBuyOrSellItem = MyKFPC.GetPurchaseHelper().IsSellable(SelectedItem);
        PurchaseError(false, false);
    }
}

function SetGenericItemDetails(out STraderItem DefaultItemInfo, out SItemInformation ItemInfo)
{
    SelectedList = 1;
    if(ItemDetails != none)
    {
        LastItemInfo = ItemInfo;
        LastDefaultItemInfo = DefaultItemInfo;
        bGenericItemSelected = true;
        ItemDetails.SetPlayerItemDetails(DefaultItemInfo, ItemInfo.SellPrice, -1);
        bCanBuyOrSellItem = MyKFPC.GetPurchaseHelper().IsSellable(DefaultItemInfo);
    }
}

function SetNewSelectedIndex(int ListLength)
{
    if(SelectedItemIndex >= ListLength)
    {
        if(SelectedItemIndex != 0)
        {
            -- SelectedItemIndex;
        }
    }
}

function OnPerkChanged(int PerkIndex)
{
    if(CurrentTab == 0)
    {
        CurrentFilterIndex = PerkIndex;
        RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
    }
}

function RefreshItemComponents(optional bool bInitOwnedItems)
{
    bInitOwnedItems = false;
    if((PlayerInventoryContainer != none) && PlayerInfoContainer != none)
    {
        if(bInitOwnedItems)
        {
            MyKFPC.GetPurchaseHelper().InitializeOwnedItemList();
        }
        OwnedItemList = MyKFPC.GetPurchaseHelper().OwnedItemList;
        PlayerInventoryContainer.RefreshPlayerInventory();
        RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
        GameInfoContainer.UpdateGameInfo();
        GameInfoContainer.SetDosh(MyKFPC.GetPurchaseHelper().TotalDosh);
        GameInfoContainer.SetCurrentWeight(MyKFPC.GetPurchaseHelper().TotalBlocks, MyKFPC.GetPurchaseHelper().MaxBlocks);
        if(SelectedList == 0)
        {
            SetTraderItemDetails(SelectedItemIndex);            
        }
        else
        {
            if(bGenericItemSelected)
            {
                SetGenericItemDetails(LastDefaultItemInfo, LastItemInfo);                
            }
            else
            {
                SetPlayerItemDetails(SelectedItemIndex);
            }
        }
    }
}

function RefreshShopItemList(KFGFxMenu_Trader.TabIndices TabIndex, byte FilterIndex)
{
    if((ShopContainer != none) && FilterContainer != none)
    {
        switch(TabIndex)
        {
            case 0:
                ShopContainer.RefreshWeaponListByPerk(FilterIndex, MyKFPC.GetPurchaseHelper().TraderItems.SaleItems);
                FilterContainer.SetPerkFilterData(FilterIndex);
                break;
            case 1:
                ShopContainer.RefreshItemsByType(FilterIndex, MyKFPC.GetPurchaseHelper().TraderItems.SaleItems);
                FilterContainer.SetTypeFilterData(FilterIndex);
                break;
            case 2:
                ShopContainer.RefreshFavoriteItems(MyKFPC.GetPurchaseHelper().TraderItems.SaleItems);
                FilterContainer.ClearFilters();
                break;
            case 3:
                ShopContainer.RefreshAllItems(MyKFPC.GetPurchaseHelper().TraderItems.SaleItems);
                FilterContainer.ClearFilters();
                break;
            default:
                break;
        }
        FilterContainer.SetInt("selectedTab", TabIndex);
        FilterContainer.SetInt("selectedFilter", FilterIndex);
        if(SelectedList == 0)
        {
            if(SelectedItemIndex >= MyKFPC.GetPurchaseHelper().TraderItems.SaleItems.Length)
            {
                SelectedItemIndex = byte(MyKFPC.GetPurchaseHelper().TraderItems.SaleItems.Length - 1);
            }
            SetTraderItemDetails(SelectedItemIndex);
            ShopContainer.SetSelectedIndex(SelectedItemIndex);
        }
    }
}

function bool GetIsFavorite(name ClassName)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < FavoritedItems.Length)
    {
        if(ClassName == FavoritedItems[I])
        {
            return true;
        }
        ++ I;
        goto J0x0C;
    }
    return false;
}

function ToggleFavorite(name ClassName)
{
    local byte I;
    local bool bUnfavoriteItem;

    I = 0;
    J0x0C:

    if(I < FavoritedItems.Length)
    {
        if(ClassName == FavoritedItems[I])
        {
            FavoritedItems.Remove(I, 1;
            bUnfavoriteItem = true;
            Manager.CachedProfile.UnFavoriteWeapon(ClassName);
            goto J0xBA;
        }
        ++ I;
        goto J0x0C;
    }
    J0xBA:

    if(!bUnfavoriteItem)
    {
        FavoritedItems.AddItem(ClassName;
        Manager.CachedProfile.FavoriteWeapon(ClassName);
    }
    SaveConfig();
}

simulated function int GetDisplayedBlocksRequiredFor(const out STraderItem Item, optional int OverrideLevelValue)
{
    OverrideLevelValue = -1;
    return MyKFIM.GetDisplayedBlocksRequiredFor(Item, OverrideLevelValue);
}

simulated function PurchaseError(bool bCannotAfford, bool bCannotCarry)
{
    if(ErrorMessageContainer != none)
    {
        if(bCannotAfford)
        {
            ErrorMessageContainer.SetWarningMessage(ErrorMessageContainer.CannotAffordString);            
        }
        else
        {
            if(bCannotCarry)
            {
                ErrorMessageContainer.SetWarningMessage(ErrorMessageContainer.CannotCarryString);                
            }
            else
            {
                ErrorMessageContainer.SetWarningMessage("");
            }
        }
    }
}

function Callback_BuyOrSellItem()
{
    local STraderItem ShopItem;
    local SItemInformation ItemInfo;

    if(bCanBuyOrSellItem)
    {
        if(SelectedList == 0)
        {
            ShopItem = MyKFPC.GetPurchaseHelper().TraderItems.SaleItems[SelectedItemIndex];
            MyKFPC.GetPurchaseHelper().PurchaseWeapon(ShopItem);
            SetNewSelectedIndex(MyKFPC.GetPurchaseHelper().TraderItems.SaleItems.Length);
            SetTraderItemDetails(SelectedItemIndex);
            ShopContainer.ActionScriptVoid("itemBought");            
        }
        else
        {
            if(MyKFIM.bLogInventory)
            {
                LogInternal("Callback_BuyOrSellItem: SelectedItemIndex=" $ string(SelectedItemIndex));
            }
            ItemInfo = OwnedItemList[SelectedItemIndex];
            if(MyKFIM.bLogInventory)
            {
                LogInternal("Callback_BuyOrSellItem: ItemInfo=" $ string(ItemInfo.DefaultItem.ClassName));
            }
            MyKFPC.GetPurchaseHelper().SellWeapon(ItemInfo, SelectedItemIndex);
            SetNewSelectedIndex(OwnedItemList.Length);
            SetPlayerItemDetails(SelectedItemIndex);
            PlayerInventoryContainer.ActionScriptVoid("itemSold");
        }        
    }
    else
    {
        if(SelectedList == 0)
        {
            ShopItem = MyKFPC.GetPurchaseHelper().TraderItems.SaleItems[SelectedItemIndex];
            MyKFPC.PlayTraderSelectItemDialog(!MyKFPC.GetPurchaseHelper().GetCanAfford(MyKFPC.GetPurchaseHelper().GetAdjustedBuyPriceFor(ShopItem)), !MyKFPC.GetPurchaseHelper().CanCarry(ShopItem));
        }
    }
    RefreshItemComponents();
}

function Callback_FavoriteItem()
{
    if(SelectedList == 0)
    {
        ToggleFavorite(MyKFPC.GetPurchaseHelper().TraderItems.SaleItems[SelectedItemIndex].ClassName);
        if(CurrentTab == 2)
        {
            SetNewSelectedIndex(MyKFPC.GetPurchaseHelper().TraderItems.SaleItems.Length);
        }
        SetTraderItemDetails(SelectedItemIndex);        
    }
    else
    {
        ToggleFavorite(OwnedItemList[SelectedItemIndex].DefaultItem.ClassName);
        SetPlayerItemDetails(SelectedItemIndex);
    }
    RefreshItemComponents();
}

function Callback_FilterChanged(int FilterIndex)
{
    CurrentFilterIndex = FilterIndex;
    RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
}

function Callback_TabChanged(int TabIndex)
{
    CurrentTab = byte(TabIndex);
    if((CurrentTab == 0) && MyKFPRI != none)
    {
        CurrentFilterIndex = GetPerkIndex();        
    }
    else
    {
        CurrentFilterIndex = 0;
    }
    RefreshShopItemList(CurrentTab, byte(CurrentFilterIndex));
}

function Callback_UpgradeItem()
{
    local SItemInformation ItemInfo;
    local KFAutoPurchaseHelper PurchaseHelper;

    if(SelectedList == 1)
    {
        PurchaseHelper = MyKFPC.GetPurchaseHelper();
        if(PurchaseHelper.UpgradeWeapon(SelectedItemIndex))
        {
            ItemInfo = PurchaseHelper.OwnedItemList[SelectedItemIndex];
            ++ PurchaseHelper.OwnedItemList[SelectedItemIndex].ItemUpgradeLevel;
            PurchaseHelper.OwnedItemList[SelectedItemIndex].SellPrice = PurchaseHelper.GetAdjustedSellPriceFor(ItemInfo.DefaultItem);
            RefreshItemComponents();
            ShopContainer.ActionScriptVoid("itemBought");
            Class'KFMusicStingerHelper'.static.PlayWeaponUpgradeStinger(MyKFPC);
        }
    }
}

function Callback_BuyGrenade()
{
    if(PlayerInventoryContainer != none)
    {
        MyKFPC.GetPurchaseHelper().BuyGrenade();
        RefreshItemComponents();
    }
}

function Callback_FillGrenades()
{
    if(PlayerInventoryContainer != none)
    {
        MyKFPC.GetPurchaseHelper().FillAmmo(MyKFPC.GetPurchaseHelper().GrenadeItem, true);
        RefreshItemComponents();
    }
}

function Callback_BuyArmor()
{
    if(PlayerInventoryContainer != none)
    {
        MyKFPC.GetPurchaseHelper().BuyArmorMag();
        RefreshItemComponents();
    }
}

function Callback_FillArmor()
{
    if(PlayerInventoryContainer != none)
    {
        MyKFPC.GetPurchaseHelper().FillArmor();
        RefreshItemComponents();
    }
}

function Callback_FillAmmo(int ItemIndex)
{
    local SItemInformation ItemInfo;

    ItemInfo = OwnedItemList[ItemIndex];
    MyKFPC.GetPurchaseHelper().FillAmmo(ItemInfo);
    MyKFPC.GetPurchaseHelper().OwnedItemList[ItemIndex] = ItemInfo;
    RefreshItemComponents();
}

function Callback_BuyMagazine(int ItemIndex)
{
    MyKFPC.GetPurchaseHelper().BuyMagazine(ItemIndex);
    RefreshItemComponents();
}

function Callback_AutoFill(int ItemIndex)
{
    MyKFPC.GetPurchaseHelper().StartAutoFill();
    RefreshItemComponents();
}

function Callback_ShopItemSelected(int ItemIndex)
{
    SetTraderItemDetails(ItemIndex);
}

function Callback_PlayerItemSelected(int ItemIndex)
{
    SetPlayerItemDetails(ItemIndex);
}

function Callback_ArmorItemSelected()
{
    SetGenericItemDetails(MyKFPC.GetPurchaseHelper().ArmorItem.DefaultItem, MyKFPC.GetPurchaseHelper().ArmorItem);
}

function Callback_GrenadeItemSelected()
{
    SetGenericItemDetails(MyKFPC.GetPurchaseHelper().GrenadeItem.DefaultItem, MyKFPC.GetPurchaseHelper().GrenadeItem);
}

function Callback_PerkChanged(int PerkIndex)
{
    if(MyKFPRI.NetPerkIndex != PerkIndex)
    {
        MyKFPC.RequestPerkChange(byte(PerkIndex));
        if(MyKFPC.CanUpdatePerkInfo())
        {
            MyKFPC.SetHaveUpdatePerk(true);
            MyKFPC.GetPurchaseHelper().Initialize(false);
            RefreshItemComponents();
        }
        Manager.CachedProfile.SetProfileSettingValueInt(105, PerkIndex);
    }
    if(PlayerInventoryContainer != none)
    {
        PlayerInventoryContainer.UpdateLock();
    }
    UpdatePlayerInfo();
    RefreshItemComponents();
}

function Callback_Close()
{
    Manager.CloseMenus();
}

defaultproperties
{
    LastDefaultItemInfo=(WeaponDef=none,ClassName=None,SingleClassName=None,DualClassName=None,AssociatedPerkClasses=none,MaxSpareAmmo=0,SecondaryAmmoImagePath="",GroupPriority=0,WeaponStats=none,WeaponUpgradeWeight=0,WeaponUpgradeWeight[1]=0,WeaponUpgradeWeight[2]=0,WeaponUpgradeWeight[3]=0,WeaponUpgradeWeight[4]=0,WeaponUpgradeWeight[5]=0,WeaponUpgradeDmgMultiplier=0,WeaponUpgradeDmgMultiplier[1]=0,WeaponUpgradeDmgMultiplier[2]=0,WeaponUpgradeDmgMultiplier[3]=0,WeaponUpgradeDmgMultiplier[4]=0,WeaponUpgradeDmgMultiplier[5]=0,InitialSpareMags=0,MagazineCapacity=0,BlocksRequired=0,InitialSecondaryAmmo=0,MaxSecondaryAmmo=0,TraderFilter=EFilterTypeUI.FT_Pistol,AltTraderFilter=EFilterTypeUI.FT_None,InventoryGroup=0,ItemId=-1,bCanBuyAmmo=false)
    LastItemInfo=(bIsSecondaryAmmo=false,SpareAmmoCount=0,MaxSpareAmmo=0,MaxSecondaryAmmo=0,SellPrice=0,SecondaryAmmoCount=0,MagazineCapacity=0,AutoFillDosh=0,AmmoPricePerMagazine=0,DefaultItem=(WeaponDef=none,ClassName=None,SingleClassName=None,DualClassName=None,AssociatedPerkClasses=none,MaxSpareAmmo=0,SecondaryAmmoImagePath="",GroupPriority=0,WeaponStats=none,WeaponUpgradeWeight=0,WeaponUpgradeWeight[1]=0,WeaponUpgradeWeight[2]=0,WeaponUpgradeWeight[3]=0,WeaponUpgradeWeight[4]=0,WeaponUpgradeWeight[5]=0,WeaponUpgradeDmgMultiplier=0,WeaponUpgradeDmgMultiplier[1]=0,WeaponUpgradeDmgMultiplier[2]=0,WeaponUpgradeDmgMultiplier[3]=0,WeaponUpgradeDmgMultiplier[4]=0,WeaponUpgradeDmgMultiplier[5]=0,InitialSpareMags=0,MagazineCapacity=0,BlocksRequired=0,InitialSecondaryAmmo=0,MaxSecondaryAmmo=0,TraderFilter=EFilterTypeUI.FT_Pistol,AltTraderFilter=EFilterTypeUI.FT_None,InventoryGroup=0,ItemId=-1,bCanBuyAmmo=false),ItemUpgradeLevel=0)
    ExitMenuString="EXIT MENU"
    SubWidgetBindings=/* Array type was not detected. */
}