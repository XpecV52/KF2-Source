/*******************************************************************************
 * KFGFxServerBrowser_ServerList generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxServerBrowser_ServerList extends KFGFxObject_Container within GFxMoviePlayer
    native(UI)
    config(UI);

enum EQueryCompletionAction
{
    QUERYACTION_None,
    QUERYACTION_Default,
    QUERYACTION_CloseScene,
    QUERYACTION_JoinServer,
    QUERYACTION_RefreshAll,
    QUERYACTION_MAX
};

enum ESearch_Tab
{
    TAB_ALL,
    TAB_FAVORITES,
    TAB_FRIENDS,
    TAB_HISTORY,
    TAB_LAN,
    TAB_MAX
};

struct native ExtraServerInfo
{
    var bool ServerHeardBackFrom;
    var bool GameRunning;
    var bool RequestDispatched;
    var int StartTimer;
    var float Ping;
    var int Survivors;
    var int SurvivorsAvgLevel;
    var int ZedPlayers;

    structdefaultproperties
    {
        ServerHeardBackFrom=false
        GameRunning=false
        RequestDispatched=false
        StartTimer=0
        Ping=0
        Survivors=0
        SurvivorsAvgLevel=0
        ZedPlayers=0
    }
};

var transient KFDataStore_OnlineGameSearch SearchDataStore;
var private transient string ServerPassword;
var private transient bool bJoinAsSpectator;
var private transient bool bQueryDialogShowing;
var private transient bool bIssuedInitialQuery;
var protected const transient name SearchDSName;
var transient OnlineSubsystem OnlineSub;
var transient OnlineGameInterface GameInterface;
var array<GFxObject> GFxServerObjects;
var private GFxObject DataProvider;
var int FakePlayerIndex;
var int SelectedServerIndex;
var const localized string LeaveServerBrowserString;
var const localized string DetailsString;
var const localized string SpectateString;
var KFGFxMenu_ServerBrowser ServerMenu;
var transient int FilteredCount;
var globalconfig int MaxSearchResults;
var int lastServerCount;
var private transient KFGFxServerBrowser_ServerList.EQueryCompletionAction QueryCompletionAction;
var private transient KFGFxServerBrowser_ServerList.ESearch_Tab ECurrentSearchTab;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    local DataStoreClient DSClient;

    super.Initialize(NewParentMenu);
    ServerMenu = KFGFxMenu_ServerBrowser(NewParentMenu);
    LocalizeText();
    DSClient = Class'UIInteraction'.static.GetDataStoreClient();
    if(DSClient != none)
    {
        SearchDataStore = KFDataStore_OnlineGameSearch(DSClient.FindDataStore(SearchDSName));
    }
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    GameInterface = OnlineSub.GameInterface;
}

function OnViewActivated()
{
    ValidateServerType();
    if(!bIssuedInitialQuery)
    {
        bIssuedInitialQuery = true;
        RefreshServerList(FakePlayerIndex);
    }
    UpdateListDataProvider();
}

function SortServerResultsRequest(int ButtonIndex, int SortOrder)
{
    local KFOnlineGameSearch LatestGameSearch;

    LatestGameSearch = KFOnlineGameSearch(SearchDataStore.GetActiveGameSearch());
    if(LatestGameSearch == none)
    {
        return;
    }
    LatestGameSearch.SortResults(byte(ButtonIndex), byte(SortOrder));
    UpdateListDataProvider();
}

function ValidateServerType()
{
    local int PlayerIndex, PlayerControllerId;
    local LocalPlayer LP;

    LP = LocalPlayer(Outer.GetPC().Player);
    PlayerIndex = Class'UIInteraction'.static.GetPlayerIndex(LP.ControllerId);
    PlayerControllerId = Class'UIInteraction'.static.GetPlayerControllerId(PlayerIndex);
    if(!Class'UIInteraction'.static.IsLoggedIn(PlayerControllerId, true))
    {
        LogInternal("MUST BE LOGGED IN TO GET SEARCH RESULTS");
    }
}

function ChangeSearchType(Engine.OnlineGameInterface.ESteamMatchmakingType SearchType, optional bool bPreventNewSearch)
{
    GameInterface.SetMatchmakingTypeMode(SearchType);
    if(!bPreventNewSearch)
    {
        RefreshServerList(FakePlayerIndex);
    }
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("players", ServerMenu.PlayersString);
    LocalizedObject.SetString("name", ServerMenu.NameString);
    LocalizedObject.SetString("mode", ServerMenu.GameModeString);
    LocalizedObject.SetString("difficulty", ServerMenu.DifficultyString);
    LocalizedObject.SetString("map", ServerMenu.MapString);
    LocalizedObject.SetString("filters", ServerMenu.FiltersString);
    LocalizedObject.SetString("search", ServerMenu.SearchString);
    LocalizedObject.SetString("refresh", ServerMenu.RefreshString);
    LocalizedObject.SetString("gamesFound", ServerMenu.GamesFoundString);
    LocalizedObject.SetString("back", LeaveServerBrowserString);
    LocalizedObject.SetString("details", DetailsString);
    LocalizedObject.SetString("spectate", SpectateString);
    LocalizedObject.SetString("join", ServerMenu.JoinString);
    SetObject("localizedText", LocalizedObject);
}

function OnRefeshClick()
{
    RefreshServerList(FakePlayerIndex);
}

function ClearGFXServerList()
{
    local GFxObject TempArray;

    TempArray = Outer.CreateArray();
    SetObject("dataProvider", TempArray);
}

function RefreshServerList(int InPlayerIndex)
{
    local KFOnlineGameSearch GameSearch;

    if(SearchDataStore == none)
    {
        LogInternal("Can't refresh server list without a Search DS!");
        return;
    }
    ClearGFXServerList();
    CancelQuery(4);
    GameSearch = KFOnlineGameSearch(SearchDataStore.GetCurrentGameSearch());
    if(ServerMenu.FiltersContainer.bLimitServerResults)
    {
        GameSearch.MaxSearchResults = Max(MaxSearchResults, 1);        
    }
    else
    {
        GameSearch.MaxSearchResults = 2147483647;
    }
}

function BuildServerFilters(KFGFxServerBrowser_Filters Filters, OnlineGameSearch Search)
{
    local string GametagSearch, MapName;
    local int Mode, Difficulty, Length;

    Search.ClearServerFilters();
    Search.AddServerFilter("version_match", string(Class'KFGameEngine'.static.GetKFGameVersion()));
    Search.TestAddServerFilter(Filters.bNotFull, "notfull");
    Search.TestAddServerFilter(Filters.bNotEmpty, "hasplayers");
    if(!Class'WorldInfo'.static.IsConsoleBuild())
    {
        Search.TestAddServerFilter(Filters.bDedicated, "dedicated");
        Search.TestAddServerFilter(Filters.bVAC_Secure, "secure");
    }
    MapName = Filters.GetSelectedMap();
    if(MapName != "")
    {
        Search.AddServerFilter("map", MapName);
    }
    if(Filters.bInProgress && !Filters.bInLobby)
    {
        Search.TestAddBoolGametagFilter(GametagSearch, Filters.bInProgress, 'bInProgress', 1);        
    }
    else
    {
        if(Filters.bInLobby)
        {
            Search.TestAddBoolGametagFilter(GametagSearch, Filters.bInLobby, 'bInProgress', 0);
        }
    }
    if(!Class'WorldInfo'.static.IsConsoleBuild())
    {
        Search.TestAddBoolGametagFilter(GametagSearch, Filters.bNoPassword, 'bRequiresPassword', 0);
    }
    Mode = Filters.SavedGameModeIndex;
    if((Mode >= 0) && Mode < 255)
    {
        Search.AddGametagFilter(GametagSearch, 'Mode', string(Mode));
    }
    Difficulty = Filters.GetSelectedDifficulty();
    if(Difficulty >= 0)
    {
        Search.AddGametagFilter(GametagSearch, 'Difficulty', string(Difficulty));
    }
    Length = Filters.GetSelectedGameLength();
    if(Length >= 0)
    {
        Search.AddGametagFilter(GametagSearch, 'NumWaves', string(Length));
    }
    if(Filters.bCustom && !Class'WorldInfo'.static.IsConsoleBuild())
    {
        Search.TestAddBoolGametagFilter(GametagSearch, Filters.bCustom, 'bCustom', 0);
    }
    if(Len(GametagSearch) > 0)
    {
        Search.AddServerFilter("gametagsand", GametagSearch);
    }
    if(Search.MasterServerSearchKeys.Length > 1)
    {
        Search.AddServerFilter("and", string(Search.MasterServerSearchKeys.Length), 0);
    }
}

function SubmitServerListQuery(int PlayerIndex)
{
    BuildServerFilters(ServerMenu.FiltersContainer, SearchDataStore.GetCurrentGameSearch());
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        Class'GameEngine'.static.GetPlayfabInterface().AddFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);        
    }
    else
    {
        GameInterface.AddFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);
    }
    if(!SearchDataStore.SubmitGameSearch(byte(Class'UIInteraction'.static.GetPlayerControllerId(PlayerIndex)), false))
    {
        if(Class'WorldInfo'.static.IsConsoleBuild())
        {
            Class'GameEngine'.static.GetPlayfabInterface().ClearFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);            
        }
        else
        {
            GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);
        }
        SetRefreshingIndicator(false);        
    }
    else
    {
        FilteredCount = 0;
        DataProvider = Outer.CreateArray();
        SetRefreshingIndicator(true);
    }
}

// Export UKFGFxServerBrowser_ServerList::execFilterEntry(FFrame&, void* const)
native function bool FilterEntry(OnlineGameSearch Search, KFGFxServerBrowser_Filters Filter, int Entry);

function OnFindOnlineGamesCompleteDelegate(bool bWasSuccessful)
{
    local bool bSearchCompleted;
    local OnlineGameSearch Search;

    Search = SearchDataStore.GetActiveGameSearch();
    bSearchCompleted = (Search == none) || Search.Results.Length == lastServerCount;
    if(!bSearchCompleted)
    {
        if((Search.Results.Length > 0) && !ServerMenu.ApplyFilters || !FilterEntry(Search, ServerMenu.FiltersContainer, Search.Results.Length - 1))
        {
            Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.01, false, 'UpdateListDataProvider', self);
        }
        lastServerCount = Search.Results.Length;        
    }
    else
    {
        LogInternal("OnFindOnlineGamesCompleteDelegate complete!");
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);
        OnFindOnlineGamesComplete(bWasSuccessful);
        lastServerCount = -1;
    }
}

function OnClose()
{
    LogInternal("KFGFxServerBrowser_ServerList::OnClose called.");
    CancelQuery(2);
    ChangeSearchType(2, true);
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        Class'GameEngine'.static.GetPlayfabInterface().ClearFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);
        Class'GameEngine'.static.GetPlayfabInterface().ClearQueryServerInfoCompleteDelegate(OnQueryAdditionalServerInfoComplete);        
    }
    else
    {
        GameInterface.ClearFindOnlineGamesCompleteDelegate(OnFindOnlineGamesCompleteDelegate);
        GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
        GameInterface.ClearCancelFindOnlineGamesCompleteDelegate(OnCancelSearchComplete);
        GameInterface.ClearGetPlayerListCompleteDelegate(OnGetPlayerListComplete);
    }
}

function OnGetPlayerListComplete(OnlineGameSettings Settings, bool Success)
{
    local int I;

    if(SearchDataStore.GetCurrentGameSearch().Results[SelectedServerIndex].GameSettings != Settings)
    {
        LogInternal("KFGFxServerBrowser_ServerList.OnGetPlayerListComplete got player list for unselected server", 'DevOnline');
        return;
    }
    GameInterface.ClearGetPlayerListCompleteDelegate(OnGetPlayerListComplete);
    if(Success)
    {
        ServerMenu.ServerDetailsContainer.UpdatePlayerList(Settings);
        LogInternal("***Server Browser got player list:");
        I = 0;
        J0x176:

        if(I < Settings.PlayersInGame.Length)
        {
            LogInternal((string(I + 1) $ ":") @ Settings.PlayersInGame[I].PlayerName);
            ++ I;
            goto J0x176;
        }
        LogInternal("***End of player list");        
    }
    else
    {
        LogInternal("***Server didn't respond with player list!");
    }
}

function OnFindOnlineGamesComplete(bool bWasSuccessful)
{
    SetRefreshingIndicator(false);
    if(QueryCompletionAction != 0)
    {
        OnCancelSearchComplete(true);
    }
}

function CancelQuery(optional KFGFxServerBrowser_ServerList.EQueryCompletionAction DesiredCancelAction)
{
    DesiredCancelAction = 1;
    if(QueryCompletionAction == 0)
    {
        QueryCompletionAction = DesiredCancelAction;
        if(SearchDataStore.GetActiveGameSearch() != none)
        {
            if(Class'WorldInfo'.static.IsConsoleBuild())
            {
                Class'GameEngine'.static.GetPlayfabInterface().CancelGameSearch();
                OnCancelSearchComplete(true);                
            }
            else
            {
                GameInterface.AddCancelFindOnlineGamesCompleteDelegate(OnCancelSearchComplete);
                GameInterface.CancelFindOnlineGames();
            }            
        }
        else
        {
            if((SearchDataStore.GetCurrentGameSearch().Results.Length > 0) || QueryCompletionAction == 4)
            {
                OnCancelSearchComplete(true);                
            }
            else
            {
                QueryCompletionAction = 0;
            }
        }        
    }
    else
    {
        LogInternal("Could not cancel query because query cancel already in progress:" @ string(GetEnum(Enum'EQueryCompletionAction', QueryCompletionAction)));
    }
}

function OnCancelSearchComplete(bool bWasSuccessful)
{
    local KFGFxServerBrowser_ServerList.EQueryCompletionAction CurrentAction;

    GameInterface.ClearCancelFindOnlineGamesCompleteDelegate(OnCancelSearchComplete);
    CurrentAction = QueryCompletionAction;
    QueryCompletionAction = 0;
    SetRefreshingIndicator(false);
    switch(CurrentAction)
    {
        case 2:
            ClearSearchResults();
            break;
        case 3:
            JoinServer(SelectedServerIndex);
            break;
        case 4:
            ClearSearchResults();
            Outer.GetPC().SetTimer(0.25, false, 'DelayedRefresh', self);
            break;
        default:
            break;
            break;
    }
}

function DelayedRefresh()
{
    SubmitServerListQuery(FakePlayerIndex);
}

function JoinServer(optional int SearchResultIndex, optional string WithPassword, optional bool JoinAsSpectator)
{
    local KFOnlineGameSettings ServerSettings;
    local OnlineGameSearchResult SearchResult;

    SearchResultIndex = -1;
    WithPassword = "";
    JoinAsSpectator = false;
    if((SearchResultIndex >= 0) && SearchResultIndex < SearchDataStore.GetCurrentGameSearch().Results.Length)
    {
        SearchResult = SearchDataStore.GetCurrentGameSearch().Results[SearchResultIndex];        
    }
    else
    {
        return;
    }
    SelectedServerIndex = SearchResultIndex;
    ServerSettings = KFOnlineGameSettings(SearchResult.GameSettings);
    if(ServerSettings == none)
    {
        return;
    }
    ServerPassword = WithPassword;
    bJoinAsSpectator = JoinAsSpectator;
    ProcessJoin(SearchResult);
}

private final function ProcessJoin(OnlineGameSearchResult SearchResult)
{
    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        if(SearchResult.GameSettings != none)
        {
            if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
            {
                Class'GameEngine'.static.GetPlayfabInterface().AddQueryServerInfoCompleteDelegate(OnQueryAdditionalServerInfoComplete);
                Class'GameEngine'.static.GetPlayfabInterface().QueryServerInfo(SearchResult.GameSettings.LobbyId);                
            }
            else
            {
                GameInterface.AddJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
                if(OnlineGameInterfaceImpl(bool(GameInterface)).GetGameSearch() != none)
                {
                    LogInternal("Already have an online game session when trying to join an online game. Destroying it.", 'DevOnline');
                    GameInterface.DestroyOnlineGame('Game');
                }
                GameInterface.JoinOnlineGame(0, 'Game', SearchResult);
            }            
        }
        else
        {
            OnJoinGameComplete('Game', false);
        }        
    }
    else
    {
        ServerPassword = "";
        bJoinAsSpectator = false;
    }
}

function OnJoinGameComplete(name SessionName, bool bSuccessful)
{
    local string URL;

    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        if(bSuccessful)
        {
            if(GameInterface.GetResolvedConnectString(SessionName, URL))
            {
                KFGameViewportClient(LocalPlayer(Outer.GetPC().Player).ViewportClient).LastConnectionAttemptAddress = URL;
                LogInternal("- Join Game Successful, Traveling: " $ URL);
                JoinGameURL();
            }
        }
        GameInterface.ClearJoinOnlineGameCompleteDelegate(OnJoinGameComplete);
    }
    if(!bSuccessful)
    {
        if(GetServerDetails(SelectedServerIndex).bRequiresPassword)
        {
            ServerMenu.ShowPasswordPopUp();
        }
    }
    ServerPassword = "";
}

function OnQueryAdditionalServerInfoComplete(bool bWasSuccessful, string LobbyId, string ServerIP, int ServerPort, string ServerTicket)
{
    local string OpenCommand;

    LogInternal((((((("OnQueryAdditionalServerInfoComplete with success" @ string(bWasSuccessful)) @ "and lobbyID") @ LobbyId) @ "and server IP") @ ServerIP) @ "and port") @ string(ServerPort));
    Class'GameEngine'.static.GetPlayfabInterface().ClearQueryServerInfoCompleteDelegate(OnQueryAdditionalServerInfoComplete);
    if(!bWasSuccessful || ServerIP == "")
    {
        WarnInternal("Failed to connect to server for some reason");        
    }
    else
    {
        OpenCommand = (("open" @ ServerIP) $ ":") $ string(ServerPort);        
        OpenCommand $= ("?AuthTicket=" $ ServerTicket);        
        OpenCommand $= ("?PlayfabPlayerId=" $ Class'GameEngine'.static.GetPlayfabInterface().CachedPlayfabId);
        if(bJoinAsSpectator)
        {            
            OpenCommand $= "?SpectatorOnly=1";
        }
        KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
        LogInternal("Going to connect with URL:" @ OpenCommand);
        Outer.ConsoleCommand(OpenCommand);
    }
}

function bool OnHandshakeComplete(bool bSuccess, string Error, out int SuppressPasswordRetry)
{
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = None;
    if(bSuccess)
    {
        OnlineSub.GetLobbyInterface().LobbyJoinServer(KFGameViewportClient(LocalPlayer(Outer.GetPC().Player).ViewportClient).LastConnectionAttemptAddress);
    }
    SuppressPasswordRetry = 1;
    LogInternal(("*******OnHandshakeComplete" @ string(bSuccess)) @ Error);
    ScriptTrace();
    return false;
}

// Export UKFGFxServerBrowser_ServerList::execServerConnect(FFrame&, void* const)
private native final function ServerConnect(string URL);

function JoinGameURL()
{
    local string URL;

    URL = BuildJoinURL();
    KFGameEngine(Class'Engine'.static.GetEngine()).OnHandshakeComplete = OnHandshakeComplete;
    ServerConnect(URL);
    ServerPassword = "";
}

function string BuildJoinURL()
{
    local string ConnectURL;

    ConnectURL = KFGameViewportClient(LocalPlayer(Outer.GetPC().Player).ViewportClient).LastConnectionAttemptAddress;
    if(ServerPassword != "")
    {        
        ConnectURL $= ("?Password=" $ ServerPassword);
        OnlineSub.GetLobbyInterface().SetServerPassword(ServerPassword);        
    }
    else
    {
        OnlineSub.GetLobbyInterface().SetServerPassword("");
    }
    if(bJoinAsSpectator)
    {        
        ConnectURL $= "?SpectatorOnly=1";
    }    
    ConnectURL $= OnlineSub.GetLobbyInterface().GetLobbyURLString();
    return ConnectURL;
}

function string BuildJoinFiltersRequestURL()
{
    local string FiltersURL;
    local int GameDifficulty;

    GameDifficulty = ServerMenu.FiltersContainer.GetSelectedDifficulty();
    if(ServerMenu.FiltersContainer.SavedGameModeIndex >= 0)
    {        
        FiltersURL $= ("?Game=" $ Class'KFGameInfo'.static.GetGameModeClassFromNum(ServerMenu.FiltersContainer.SavedGameModeIndex));
    }
    if(GameDifficulty >= 0)
    {        
        FiltersURL $= ("?Difficulty=" $ string(GameDifficulty));
    }
    if(ServerMenu.FiltersContainer.SavedLengthIndex >= 0)
    {        
        FiltersURL $= ("?GameLength=" $ string(ServerMenu.FiltersContainer.SavedLengthIndex));
    }
    return FiltersURL;
}

function OnRefreshServerDetails()
{
    local KFOnlineGameSearch GameSearch;

    GameSearch = KFOnlineGameSearch(SearchDataStore.GetCurrentGameSearch());
    if(GameSearch != none)
    {
        LogInternal("Refeshing Server: " @ GameSearch.Results[SelectedServerIndex].GameSettings.OwningPlayerName);
    }
}

function ClearSearchResults()
{
    if(SearchDataStore != none)
    {
        SearchDataStore.ClearAllSearchResults();
    }
}

function KFOnlineGameSettings GetServerDetails(int ServerIndex)
{
    local KFOnlineGameSearch GameSearch;
    local KFOnlineGameSettings KFOGS;

    GameSearch = KFOnlineGameSearch(SearchDataStore.GetCurrentGameSearch());
    if(GameSearch != none)
    {
        KFOGS = KFOnlineGameSettings(GameSearch.Results[ServerIndex].GameSettings);
    }
    return KFOGS;
}

function SetRefreshingIndicator(bool bRefreshing)
{
    SetBool("refreshing", bRefreshing);
}

function OnServerSelected(int ServerIndex)
{
    local bool Success;

    SelectedServerIndex = ServerIndex;
    LogInternal("***Attempting to get player list for server" @ string(SelectedServerIndex));
    GameInterface.AddGetPlayerListCompleteDelegate(OnGetPlayerListComplete);
    Success = SearchDataStore.FindServerPlayerList(SelectedServerIndex);
    if(!Success)
    {
        LogInternal("***Failed to get player list for server" @ string(SelectedServerIndex));
        GameInterface.ClearGetPlayerListCompleteDelegate(OnGetPlayerListComplete);
    }
}

function UpdateListDataProvider()
{
    local int I, NewServerCount;
    local GFxObject TempObj;
    local KFOnlineGameSearch LatestGameSearch;
    local int Ping;
    local KFOnlineGameSettings TempOnlineGamesSettings;

    LatestGameSearch = KFOnlineGameSearch(SearchDataStore.GetActiveGameSearch());
    if((LatestGameSearch != none) && DataProvider != none)
    {
        I = 0;
        J0x5D:

        if(I < LatestGameSearch.Results.Length)
        {
            if((LatestGameSearch.Results[I].GameSettings.GfxID == -1) || LatestGameSearch.Results[I].GameSettings.GfxID >= GFxServerObjects.Length)
            {
                if(NewServerCount > 10)
                {
                    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.01, false, 'UpdateListDataProvider', self);
                    goto J0x941;
                }
                TempOnlineGamesSettings = KFOnlineGameSettings(LatestGameSearch.Results[I].GameSettings);
                TempObj = Outer.CreateObject("Object");
                TempObj.SetString("serverName", TempOnlineGamesSettings.OwningPlayerName);
                TempObj.SetFloat("playerCount", float((TempOnlineGamesSettings.NumPublicConnections - TempOnlineGamesSettings.NumOpenPublicConnections) - TempOnlineGamesSettings.NumSpectators));
                TempObj.SetFloat("maxPlayerCount", float(TempOnlineGamesSettings.NumPublicConnections));
                TempObj.SetFloat("waveCount", float(TempOnlineGamesSettings.CurrentWave));
                TempObj.SetFloat("maxWaveCount", float(TempOnlineGamesSettings.NumWaves));
                TempObj.SetFloat("zedCount", float(TempOnlineGamesSettings.ZedCount));
                TempObj.SetFloat("maxZedCount", float(TempOnlineGamesSettings.MaxZedCount));
                TempObj.SetBool("vacEnable", TempOnlineGamesSettings.bAntiCheatProtected);
                TempObj.SetBool("mutators", TempOnlineGamesSettings.bMutators);
                TempObj.SetBool("bRanked", TempOnlineGamesSettings.bUsesStats);
                TempObj.SetBool("bCustom", TempOnlineGamesSettings.bCustom);
                Ping = TempOnlineGamesSettings.PingInMs;
                TempObj.SetString("ping", ((Ping < 0) ? "-" : string(Ping)));
                TempObj.SetString("difficulty", Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(TempOnlineGamesSettings.Difficulty)));
                TempObj.SetString("mode", Class'KFCommon_LocalizedStrings'.static.GetGameModeString(TempOnlineGamesSettings.Mode));
                TempObj.SetString("map", TempOnlineGamesSettings.MapName);
                TempObj.SetBool("locked", TempOnlineGamesSettings.bRequiresPassword);
                TempObj.SetString("gameStatus", string(TempOnlineGamesSettings.GameState));
                GFxServerObjects.AddItem(TempObj;
                TempOnlineGamesSettings.GfxID = GFxServerObjects.Length - 1;
                ++ NewServerCount;
            }
            if(LatestGameSearch.Results[I].GameSettings.ElementIdx != I)
            {
                DataProvider.SetElementObject(I, GFxServerObjects[LatestGameSearch.Results[I].GameSettings.GfxID]);
                LatestGameSearch.Results[I].GameSettings.ElementIdx = I;
            }
            ++ I;
            goto J0x5D;
        }
        J0x941:

        SetObject("dataProvider", DataProvider);
    }
}

function bool IsSelectedServerFavorited(int ServerSearchIndex)
{
    return GameInterface.IsSearchResultInFavoritesList(ServerSearchIndex);
}

function bool SetSelectedServerFavorited(bool bFavorited)
{
    if(bFavorited)
    {
        return GameInterface.AddSearchResultToFavorites(SelectedServerIndex);        
    }
    else
    {
        return GameInterface.RemoveSearchResultFromFavorites(SelectedServerIndex);
    }
}

defaultproperties
{
    SearchDSName=KFGameSearch
    SelectedServerIndex=-1
    LeaveServerBrowserString="LEAVE SERVER BROWSER"
    DetailsString="SERVER DETAILS"
    SpectateString="SPECTATE"
    MaxSearchResults=1000
    lastServerCount=-1
}