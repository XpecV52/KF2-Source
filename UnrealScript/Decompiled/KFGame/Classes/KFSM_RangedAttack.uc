/*******************************************************************************
 * KFSM_RangedAttack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_RangedAttack extends KFSM_PlaySingleAnim
    abstract;

var array<name> AnimNames;
var array<Vector> FireOffsets;
var protected transient Vector FireOffset;

static function byte PackFlagsBase(KFPawn P)
{
    return byte(Rand(default.AnimNames.Length));
}

protected function bool InternalCanDoSpecialMove()
{
    if(KFPOwner.IsHumanControlled())
    {
        return KFPOwner.IsCombatCapable();
    }
    if(((AIOwner == none) || AIOwner.MyKFPawn == none) || AIOwner.Enemy == none)
    {
        return false;
    }
    if(!KFPOwner.IsCombatCapable())
    {
        return false;
    }
    if(!AIOwner.DirectProjectileFireBehavior.IsThereClearDirectFireAttackLaneFromGivenLoc(PawnOwner.Location, AIOwner.Enemy))
    {
        return false;
    }
    return super(KFSpecialMove).InternalCanDoSpecialMove();
}

function Vector GetFireOffset()
{
    return FireOffset;
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    SetLockPawnRotation(false);
    if(AIOwner != none)
    {
        AIOwner.AIZeroMovementVariables();
    }
}

function PlayAnimation()
{
    local int AnimNum;

    AnimNum = Clamp(KFPOwner.SpecialMoveFlags, 0, AnimNames.Length);
    AnimName = AnimNames[AnimNum];
    FireOffset = FireOffsets[AnimNum];
    super.PlayAnimation();
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    super.SpecialMoveEnded(PrevMove, NextMove);
    SetLockPawnRotation(false);
}

defaultproperties
{
    bCanBeInterrupted=true
    bDisableMovement=true
    bDisableSteering=false
}