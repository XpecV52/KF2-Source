/*******************************************************************************
 * KFGFxMenu_Gear generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_Gear extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI);

enum ECustomizationOption
{
    CO_Character,
    CO_Head,
    CO_Body,
    CO_Attachment,
    CO_MAX
};

var KFGFxObject_Container CustomizationComponent;
var KFPlayerReplicationInfo MyKFPRI;
var KFGFxGearContainer_PerksSelection PerkSelectionContainer;
var const string HeadMeshKey;
var const string HeadSkinKey;
var const string HeadFunctionKey;
var const string BodyMeshKey;
var const string BodySkinKey;
var const string BodyFunctionKey;
var const string AttachmentKey;
var const string AttachmentSkinKey;
var const string AttachmentFunctionKey;
var const string KFCharacterInfoString;
var KFCharacterInfo_Human CurrentCharInfo;
var string CharInfoPath;
var const localized string GearHeaderString;
var const localized string CharacterString;
var const localized string BioString;
var const localized string HeadString;
var const localized string BodyString;
var const localized string AttachmentsString;
var const localized string SkinsString;
var const localized string BackString;
var const localized string NoneString;
var const localized string WeaponsString;
var const localized string WeaponsInfoString;
var KFGFxObject_TraderItems TraderItems;
var array< class<KFWeaponDefinition> > CurrentWearponDefList;
var const int ControllerRotationRate;
var const float ControllerRotationThreshold;
var int CurrentPerkIndex;
var string ClearImagePath;

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    MyKFPRI = KFPlayerReplicationInfo(Outer.GetPC().PlayerReplicationInfo);
    LocalizeText();
    UpdateCharacterList();
    UpdateGear();
    TraderItems = KFGameReplicationInfo(KFPlayerController(Outer.GetPC()).WorldInfo.GRI).TraderItems;
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'PerkSelectionContainer':
            if(PerkSelectionContainer == none)
            {
                PerkSelectionContainer = KFGFxGearContainer_PerksSelection(Widget);
                PerkSelectionContainer.Initialize(self);
            }
            break;
        default:
            break;
    }
    return true;
}

function OnOpen()
{
    local PlayerController PC;

    PC = Outer.GetPC();
    if(PC == none)
    {
        return;
    }
    Outer.GetGameViewportClient().__HandleInputAxis__Delegate = OnAxisModified;
    if(Class'WorldInfo'.static.IsMenuLevel())
    {
        Manager.ManagerObject.SetBool("backgroundVisible", false);        
    }
    else
    {
        if(PC.PlayerReplicationInfo.bReadyToPlay && PC.WorldInfo.GRI.bMatchHasBegun)
        {
            SetBool("characterButtonEnabled", false);
            return;
        }
    }
    UpdateCharacterList();
    UpdateGear();
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("header", GearHeaderString);
    LocalizedObject.SetString("listButton", BackString);
    LocalizedObject.SetString("bioStringText", BioString);
    LocalizedObject.SetString("charactersString", CharacterString);
    LocalizedObject.SetString("headsString", HeadString);
    LocalizedObject.SetString("bodiesString", BodyString);
    LocalizedObject.SetString("skinsString", SkinsString);
    LocalizedObject.SetString("attachmentsString", AttachmentsString);
    LocalizedObject.SetString("weapons", WeaponsString);
    LocalizedObject.SetString("weaponsInfo", WeaponsInfoString);
    SetObject("localizeText", LocalizedObject);
}

function UpdateWeaponList()
{
    local int I, ItemIndex;
    local GFxObject DataProvider, SlotObject;
    local string TexturePath;
    local KFPlayerController KFPC;
    local array<STraderItem> FullItemList;

    KFPC = KFPlayerController(Outer.GetPC());
    if((KFPC == none) || TraderItems == none)
    {
        return;
    }
    ItemIndex = 0;
    DataProvider = Outer.CreateArray();
    FullItemList = TraderItems.SaleItems;
    CurrentWearponDefList.Length = 0;
    I = 0;
    J0xC7:

    if(I < FullItemList.Length)
    {
        if((FullItemList[I].AssociatedPerkClass == none) || (CurrentPerkIndex < KFPC.PerkList.Length) && FullItemList[I].AssociatedPerkClass == KFPC.PerkList[CurrentPerkIndex].PerkClass)
        {
            SlotObject = Outer.CreateObject("Object");
            SlotObject.SetInt("ItemIndex", I);
            SlotObject.SetString("label", FullItemList[I].WeaponDef.static.GetItemName());
            TexturePath = "img://" $ FullItemList[I].WeaponDef.static.GetImagePath();
            SlotObject.SetString("source", TexturePath);
            SlotObject.SetBool("enabled", Class'KFWeaponSkinList'.default.Skins.Find('WeaponDef', FullItemList[I].WeaponDef != -1);
            UpdateWeaponVariants(FullItemList[I].WeaponDef, SlotObject);
            DataProvider.SetElementObject(ItemIndex, SlotObject);
            ++ ItemIndex;
            CurrentWearponDefList.AddItem(FullItemList[I].WeaponDef;
        }
        ++ I;
        goto J0xC7;
    }
    SetObject("weaponArray", DataProvider);
    KFPC = KFPlayerController(Outer.GetPC());
    KFPC.SaveConfig();
}

function UpdateWeaponVariants(class<KFWeaponDefinition> WeaponDef, out GFxObject MeshObject)
{
    local int I, ItemIndex;
    local GFxObject DataProvider, SlotObject;

    ItemIndex = 0;
    DataProvider = Outer.CreateArray();
    SlotObject = Outer.CreateObject("Object");
    SlotObject.SetString("label", NoneString);
    SlotObject.SetString("source", "img://" $ ClearImagePath);
    SlotObject.SetBool("enabled", true);
    DataProvider.SetElementObject(ItemIndex, SlotObject);
    ++ ItemIndex;
    I = 0;
    J0x142:

    if(I < Class'KFWeaponSkinList'.default.Skins.Length)
    {
        if(Class'KFWeaponSkinList'.default.Skins[I].WeaponDef == WeaponDef)
        {
            SlotObject = Outer.CreateObject("Object");
            SlotObject.SetInt("ItemIndex", I);
            SlotObject.SetString("label", Class'KFWeaponSkinList'.default.Skins[I].MIC_3P);
            SlotObject.SetBool("enabled", Class'KFUnlockManager'.static.GetWeaponSkinAvailable(Class'KFWeaponSkinList'.default.Skins[I].Id));
            SlotObject.SetInt("definition", Class'KFWeaponSkinList'.default.Skins[I].Id);
            DataProvider.SetElementObject(ItemIndex, SlotObject);
            ++ ItemIndex;
        }
        ++ I;
        goto J0x142;
    }
    MeshObject.SetObject("skinInfo", DataProvider);
}

function UpdateCharacterList()
{
    local byte I, ItemIndex;
    local GFxObject DataProvider, SlotObject;
    local string TexturePath;
    local KFPlayerController KFPC;

    ItemIndex = 0;
    DataProvider = Outer.CreateArray();
    I = 0;
    J0x41:

    if(I < MyKFPRI.CharacterArchetypes.Length)
    {
        if(Class'KFUnlockManager'.static.GetAvailable((MyKFPRI.CharacterArchetypes[I])))
        {
            SlotObject = Outer.CreateObject("Object");
            SlotObject.SetInt("ItemIndex", I);
            SlotObject.SetString("label", Localize(string(MyKFPRI.CharacterArchetypes[I].Name), "CharacterName", KFCharacterInfoString));
            TexturePath = "img://" $ PathName(MyKFPRI.CharacterArchetypes[I].DefaultHeadPortrait);
            SlotObject.SetBool("enabled", true);
            SlotObject.SetString("source", TexturePath);
            DataProvider.SetElementObject(ItemIndex, SlotObject);
            ++ ItemIndex;            
        }
        else
        {
            LogInternal(string(MyKFPRI.CharacterArchetypes[I]) @ "is not purchased.");
        }
        ++ I;
        goto J0x41;
    }
    SetObject("characterArray", DataProvider);
    KFPC = KFPlayerController(Outer.GetPC());
    KFPC.SaveConfig();
}

function UpdateGear()
{
    CurrentCharInfo = MyKFPRI.CharacterArchetypes[MyKFPRI.RepCustomizationInfo.CharacterIndex];
    CharInfoPath = string(CurrentCharInfo.Name);
    UpdateMeshList(BodyMeshKey, BodySkinKey, CurrentCharInfo.BodyVariants, "bodyArray");
    UpdateMeshList(HeadMeshKey, HeadSkinKey, CurrentCharInfo.HeadVariants, "headsArray");
    UpdateAttachmentsList(CurrentCharInfo.CosmeticVariants);
    SetCurrentCharacterButtons();
}

function UpdateMeshList(string OutfitKey, string SkinKey, array<OutfitVariants> Outfits, string DataArrayString)
{
    local byte I, ItemIndex;
    local GFxObject DataProvider, SlotObject;
    local string TexturePath;
    local OutfitVariants Outfit;
    local SkinVariant FirstSkin;

    ItemIndex = 0;
    DataProvider = Outer.CreateArray();
    I = 0;
    J0x41:

    if(I < Outfits.Length)
    {
        Outfit = Outfits[I];
        if(Class'KFUnlockManager'.static.GetAvailableOutfit(Outfit))
        {
            SlotObject = Outer.CreateObject("Object");
            SlotObject.SetInt("ItemIndex", I);
            SlotObject.SetString("label", Localize(CharInfoPath, OutfitKey $ string(I), KFCharacterInfoString));
            SlotObject.SetBool("enabled", true);
            FirstSkin = UpdateVariants(OutfitKey, SkinKey, Outfit.SkinVariations, I, SlotObject);
            TexturePath = "img://" $ PathName(FirstSkin.UITexture);
            SlotObject.SetString("source", TexturePath);
            DataProvider.SetElementObject(ItemIndex, SlotObject);
            ++ ItemIndex;            
        }
        else
        {
            LogInternal(("Outfit" @ Outfit.MeshName) @ "is not purchased.");
        }
        ++ I;
        goto J0x41;
    }
    SetObject(DataArrayString, DataProvider);
}

function UpdateAttachmentsList(array<AttachmentVariants> Attachments)
{
    local byte I, ItemIndex;
    local GFxObject DataProvider, SlotObject;
    local string TexturePath;
    local AttachmentVariants Variant;
    local Pawn MyPawn;
    local SkinVariant FirstSkin;

    ItemIndex = 0;
    DataProvider = Outer.CreateArray();
    MyPawn = Outer.GetPC().Pawn;
    SlotObject = Outer.CreateObject("Object");
    SlotObject.SetString("label", NoneString);
    SlotObject.SetString("source", "img://" $ ClearImagePath);
    SlotObject.SetBool("enabled", true);
    DataProvider.SetElementObject(ItemIndex, SlotObject);
    ++ ItemIndex;
    I = 0;
    J0x184:

    if(I < Attachments.Length)
    {
        Variant = Attachments[I];
        if(CurrentCharInfo.IsAttachmentAvailable(Variant, MyPawn))
        {
            SlotObject = Outer.CreateObject("Object");
            SlotObject.SetInt("ItemIndex", I);
            FirstSkin = UpdateVariants(AttachmentKey, AttachmentSkinKey, Variant.AttachmentItem.SkinVariations, I, SlotObject);
            SlotObject.SetString("label", Localize(CharInfoPath, AttachmentKey $ string(I), KFCharacterInfoString));
            SlotObject.SetBool("enabled", true);
            TexturePath = "img://" $ PathName(FirstSkin.UITexture);
            SlotObject.SetString("source", TexturePath);
            DataProvider.SetElementObject(ItemIndex, SlotObject);
            ++ ItemIndex;
        }
        ++ I;
        goto J0x184;
    }
    SetObject("attachmentsArray", DataProvider);
}

function SkinVariant UpdateVariants(string OutfitKey, string KeyName, out array<SkinVariant> SkinVariations, int OutfitIndex, out GFxObject MeshObject)
{
    local byte I, ItemIndex;
    local GFxObject DataProvider, SlotObject;
    local SkinVariant Skin, FirstSkin;
    local string SectionPath, TexturePath;
    local bool bFoundFirst;

    ItemIndex = 0;
    DataProvider = Outer.CreateArray();
    SectionPath = ((CharInfoPath $ ".") $ OutfitKey) $ string(OutfitIndex);
    I = 0;
    J0x71:

    if(I < SkinVariations.Length)
    {
        Skin = SkinVariations[I];
        if(Class'KFUnlockManager'.static.GetAvailableSkin(Skin))
        {
            if(!bFoundFirst)
            {
                FirstSkin = Skin;
                bFoundFirst = true;
            }
            SlotObject = Outer.CreateObject("Object");
            SlotObject.SetInt("ItemIndex", I);
            SlotObject.SetString("label", Localize(SectionPath, KeyName $ string(I), KFCharacterInfoString));
            TexturePath = "img://" $ PathName(Skin.UITexture);
            SlotObject.SetBool("enabled", true);
            SlotObject.SetString("source", TexturePath);
            DataProvider.SetElementObject(ItemIndex, SlotObject);
            ++ ItemIndex;            
        }
        else
        {
            LogInternal(("Skin" @ string(Skin.UITexture.Name)) @ "is not purchased.");
        }
        ++ I;
        goto J0x71;
    }
    MeshObject.SetObject("skinInfo", DataProvider);
    return FirstSkin;
}

function SetCurrentCharacterButtons()
{
    local GFxObject DataObject;

    DataObject = Outer.CreateObject("Object");
    DataObject.SetString("selectedCharacter", Localize(CharInfoPath, "CharacterName", KFCharacterInfoString));
    DataObject.SetString("characterBio", Localize(CharInfoPath, "Description", KFCharacterInfoString));
    DataObject.SetInt("selectedCharacterIndex", MyKFPRI.RepCustomizationInfo.CharacterIndex);
    SetObject("selectedCharacter", DataObject);
    SetGearButtons(MyKFPRI.RepCustomizationInfo.HeadMeshIndex, MyKFPRI.RepCustomizationInfo.HeadSkinIndex, HeadMeshKey, HeadSkinKey, HeadFunctionKey);
    SetGearButtons(MyKFPRI.RepCustomizationInfo.BodyMeshIndex, MyKFPRI.RepCustomizationInfo.BodySkinIndex, BodyMeshKey, BodySkinKey, BodyFunctionKey);
    SetAttachmentButtons(AttachmentKey, AttachmentFunctionKey);
}

function SetGearButtons(byte MeshIndex, byte SkinIndex, string MeshKey, string SkinKey, string sectionFunctionName)
{
    local string SectionPath, CurrentMesh, SkinName, MeshName;
    local GFxObject DataObject;
    local KFPlayerController KFPC;

    DataObject = Outer.CreateObject("Object");
    if(MeshIndex == 255)
    {
        DataObject.SetString(sectionFunctionName, NoneString);        
    }
    else
    {
        CurrentMesh = MeshKey $ string(MeshIndex);
        SectionPath = (CharInfoPath $ ".") $ CurrentMesh;
        SkinName = Localize(SectionPath, SkinKey $ string(SkinIndex), KFCharacterInfoString);
        MeshName = Localize(CharInfoPath, CurrentMesh, KFCharacterInfoString);
        DataObject.SetString(sectionFunctionName, (MeshName @ "
") @ SkinName);
    }
    DataObject.SetInt(sectionFunctionName $ "Index", MeshIndex);
    DataObject.SetInt(sectionFunctionName $ "SkinIndex", SkinIndex);
    SetObject(sectionFunctionName, DataObject);
    KFPC = KFPlayerController(Outer.GetPC());
    KFPC.SaveConfig();
}

function SetAttachmentButtons(string AttachmentMeshKey, string sectionFunctionName)
{
    local string CurrentMesh, FinishedString;
    local GFxObject DataObject;
    local byte I, AttachmentIndex;
    local KFPlayerController KFPC;

    DataObject = Outer.CreateObject("Object");
    I = 0;
    J0x3F:

    if(I < 3)
    {
        AttachmentIndex = MyKFPRI.RepCustomizationInfo.AttachmentMeshIndices[I];
        if(AttachmentIndex == 255)
        {            
            FinishedString $= ("----" $ "
");            
        }
        else
        {
            CurrentMesh = AttachmentMeshKey $ string(AttachmentIndex);            
            FinishedString $= ((Localize(CharInfoPath, CurrentMesh, KFCharacterInfoString)) $ "
");
        }
        ++ I;
        goto J0x3F;
    }
    DataObject.SetString(sectionFunctionName, FinishedString);
    SetObject(sectionFunctionName, DataObject);
    KFPC = KFPlayerController(Outer.GetPC());
    KFPC.SaveConfig();
}

event OnClose()
{
    local PlayerController PC;

    super.OnClose();
    Outer.GetGameViewportClient().__HandleInputAxis__Delegate = None;
    if(Class'WorldInfo'.static.IsMenuLevel())
    {
        Manager.ManagerObject.SetBool("backgroundVisible", true);
    }
    PC = Outer.GetPC();
    if((((PC != none) && PC.WorldInfo.GRI.bMatchHasBegun) && PC.Pawn != none) && !PC.Pawn.IsA('KFPawn_Customization'))
    {
        PC.ServerCamera('FirstPerson');
    }
}

event bool OnAxisModified(int ControllerId, name Key, float Delta, float DeltaTime, bool bGamepad)
{
    if(Outer.GetPC().PlayerInput.bUsingGamepad)
    {
        if((Key == 'XboxTypeS_RightX') && Abs(Delta) > ControllerRotationThreshold)
        {
            Callback_RotateCamera(int(Delta * float(ControllerRotationRate)));
        }
    }
    return false;
}

function Callback_RotateCamera(int RotationDirection)
{
    local KFPlayerCamera PlayerCamera;

    PlayerCamera = KFPlayerCamera(Outer.GetPC().PlayerCamera);
    if(PlayerCamera != none)
    {
        PlayerCamera.CustomizationCam.RotatedCamera(RotationDirection);
    }
}

function Callback_EndRotateCamera()
{
    local KFPlayerCamera PlayerCamera;

    PlayerCamera = KFPlayerCamera(Outer.GetPC().PlayerCamera);
    if(PlayerCamera != none)
    {
        PlayerCamera.CustomizationCam.StartFadeRotation();
    }
}

function Callback_Weapon(int ItemIndex, int SkinIndex)
{
    local KFPawn_Customization KFP;

    KFP = KFPawn_Customization(Outer.GetPC().Pawn);
    if(KFP != none)
    {
    }
}

function Callback_BodyCamera()
{
    if(KFPlayerCamera(Outer.GetPC().PlayerCamera) != none)
    {
        KFPlayerCamera(Outer.GetPC().PlayerCamera).CustomizationCam.SetBodyView(0);
    }
}

function Callback_HeadCamera()
{
    if(KFPlayerCamera(Outer.GetPC().PlayerCamera) != none)
    {
        KFPlayerCamera(Outer.GetPC().PlayerCamera).CustomizationCam.SetBodyView(1);
    }
}

private final function Callback_Character(byte Index)
{
    local Pawn P;

    P = Outer.GetPC().Pawn;
    if(P != none)
    {
        if(KFPawn_Customization(P) != none)
        {
            SelectCharacter(P, Index);
        }
    }
    UpdateGear();
}

private final function Callback_Head(byte MeshIndex, byte SkinIndex)
{
    local Pawn P;
    local KFPawn KFP;

    P = Outer.GetPC().Pawn;
    if(P != none)
    {
        KFP = KFPawn(P);
        if(KFP != none)
        {
            SelectCustomizationOption(KFP, 1, MeshIndex, SkinIndex);
        }
    }
    SetGearButtons(MeshIndex, SkinIndex, HeadMeshKey, HeadSkinKey, HeadFunctionKey);
}

private final function Callback_Body(byte MeshIndex, byte SkinIndex)
{
    local Pawn P;
    local KFPawn KFP;

    P = Outer.GetPC().Pawn;
    if(P != none)
    {
        KFP = KFPawn(P);
        if(KFP != none)
        {
            SelectCustomizationOption(KFP, 2, MeshIndex, SkinIndex);
            UpdateAttachmentsList(CurrentCharInfo.CosmeticVariants);
            SetAttachmentButtons(AttachmentKey, AttachmentFunctionKey);
        }
    }
    SetGearButtons(MeshIndex, SkinIndex, BodyMeshKey, BodySkinKey, BodyFunctionKey);
}

private final function Callback_Attachment(byte MeshIndex, byte SkinIndex)
{
    local Pawn P;
    local KFPawn KFP;
    local KFPlayerReplicationInfo KFPRI;
    local int SlotIndex;

    P = Outer.GetPC().Pawn;
    if(P != none)
    {
        KFP = KFPawn(P);
        KFPRI = KFPlayerReplicationInfo(P.PlayerReplicationInfo);
        if((KFP != none) && KFPRI != none)
        {
            CurrentCharInfo.DetachConflictingAttachments(MeshIndex, KFP, KFPRI);
            SlotIndex = CurrentCharInfo.GetAttachmentSlotIndex(MeshIndex, KFP);
            SelectCustomizationOption(KFP, 3, MeshIndex, SkinIndex, SlotIndex);
        }
    }
    SetAttachmentButtons(AttachmentKey, AttachmentFunctionKey);
}

// Export UKFGFxMenu_Gear::execSelectCharacter(FFrame&, void* const)
private native final function SelectCharacter(Pawn P, byte CharacterIndex);

// Export UKFGFxMenu_Gear::execSelectCustomizationOption(FFrame&, void* const)
private native final function SelectCustomizationOption(Pawn P, KFGFxMenu_Gear.ECustomizationOption CustomizationOption, byte MeshIndex, byte SkinIndex, optional int AttachmentIndex);

defaultproperties
{
    HeadMeshKey="HeadMesh"
    HeadSkinKey="HeadSkin"
    HeadFunctionKey="selectedHead"
    BodyMeshKey="BodyMesh"
    BodySkinKey="BodySkin"
    BodyFunctionKey="selectedBody"
    AttachmentKey="Attachment"
    AttachmentSkinKey="AttachmentSkin"
    AttachmentFunctionKey="selectedAttachment"
    KFCharacterInfoString="KFCharacterInfo"
    GearHeaderString="CUSTOMIZE GEAR"
    CharacterString="CHARACTER"
    BioString="BIO"
    HeadString="HEAD"
    BodyString="BODY"
    AttachmentsString="ACCESSORIES"
    SkinsString="SKINS"
    BackString="BACK"
    NoneString="NONE"
    WeaponsString="Weapons"
    WeaponsInfoString="Customize"
    ControllerRotationRate=15
    ControllerRotationThreshold=0.25
    CurrentPerkIndex=-1
    ClearImagePath="CHR_Shared_TEX.NoItem_Selection"
    SubWidgetBindings=/* Array type was not detected. */
}