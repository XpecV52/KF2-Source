/*******************************************************************************
 * KFCharacterInfoBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFCharacterInfoBase extends Object
    abstract;

/** Mesh scaling */
var(ThirdPerson) float DefaultMeshScale;
/** When not in a team game, this is the color to use for glowy bits. */
var(ThirdPerson) LinearColor NonTeamEmissiveColor;
/** When not in a team game, this is the color to tint character at a distance. */
var(ThirdPerson) LinearColor NonTeamTintColor;
/** Animation tree to use for a character in this 'family' */
var(Anim) AnimTree AnimTreeTemplate;
/** Animation sets to use for a character in this 'family' */
var(Anim) array<AnimSet> AnimSets;
/** This pawn's anim info class based on character info */
var(Anim) KFPawnAnimInfo AnimArchetype;
/** Physics Asset to use */
var(Physics) PhysicsAsset PhysAsset;
var(Effects) KFPawnSoundGroup SoundGroupArch;
/** var(Effects) class<KFVoiceInfo>                 VoiceClass;var(Effects) class< KFPawnVoiceGroup >    VoiceGroupArch; */
var(Effects) string VoiceGroupArchName;
/** Skin Type definition for impact effects */
var(Effects) array<KFSkinTypeEffects> ImpactSkins;
/**  
 *This is the bone from which the the trace for the blood pool effect will originate. The trace is done
 *       vertically downwards. If not specified, the root bone (index 0) will be used as blood pool origin
 */
var(Gore) name BloodPoolOriginBoneName;

simulated function SetCharacterFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetCharacterMeshFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetBodyMesh(byte CurrentOutfitIndex, KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetBodySkin(byte CurrentSkinIndex, KFPawn KFP, KFPlayerReplicationInfo KFPRI);

simulated function SetBodyMeshAndSkin(byte CurrentBodyMeshIndex, byte CurrentBodySkinIndex, KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetHeadMeshAndSkin(byte CurrentHeadMeshIndex, byte CurrentHeadSkinIndex, KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetAttachmentMeshAndSkin(byte CurrentAttachmentMeshIndex, byte CurrentAttachmentSkinIndex, KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function ClearAllAttachments(KFPawn KFP, KFPlayerReplicationInfo KFPRI);

function SetArmsMeshAndSkin(byte CurrentBodyMeshIndex, byte CurrentBodySkinIndex, KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetFirstPersonArmsFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

defaultproperties
{
    DefaultMeshScale=1
    NonTeamEmissiveColor=(R=10,G=0.2,B=0.2,A=1)
    NonTeamTintColor=(R=4,G=2,B=0.5,A=1)
    AnimArchetype=KFPawnAnimInfo'ZED_Clot_Anim.AlphaClot_AnimGroup'
    SoundGroupArch=KFPawnSoundGroup'FX_Pawn_Sounds_ARCH.DefaultPawnSounds'
    ImpactSkins(0)=KFSkinTypeEffects'FX_Impacts_ARCH.SkinTypes.Flesh'
    ImpactSkins(1)=KFSkinTypeEffects'FX_Impacts_ARCH.SkinTypes.Skull'
}