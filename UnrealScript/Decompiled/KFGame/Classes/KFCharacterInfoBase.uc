/*******************************************************************************
 * KFCharacterInfoBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFCharacterInfoBase extends Object
    abstract
    native(Pawn);

/** Mesh scaling */
var(ThirdPerson) float DefaultMeshScale;
/** Animation tree to use for a character in this 'family' */
var(ThirdPerson) AnimTree AnimTreeTemplate;
/** Animation sets to use for a character in this 'family' */
var(ThirdPerson) array<AnimSet> AnimSets;
/** This pawn's anim info class based on character info */
var(ThirdPerson) KFPawnAnimInfo AnimArchetype;
/** Physics Asset to use */
var(ThirdPerson) PhysicsAsset PhysAsset;
var(Effects) KFPawnSoundGroup SoundGroupArch;
/** var(Effects) class<KFVoiceInfo>                 VoiceClass;var(Effects) class< KFPawnVoiceGroup >    VoiceGroupArch; */
var(Effects) string VoiceGroupArchName;
/** Skin Type definition for impact effects */
var(Effects) array<KFSkinTypeEffects> ImpactSkins;
/**  
 *This is the bone from which the the trace for the blood pool effect will originate. The trace is done
 *       vertically downwards. If not specified, the root bone (index 0) will be used as blood pool origin
 */
var(Gore) name BloodPoolOriginBoneName;
/** Character MICs index to use for gameplay effects */
var(Effects) int GoreFXMICIdx;
/**  
 *Character Portrait
 *************************************************************************
 */
var(Portrait) Texture DefaultHeadPortrait;
var(Portrait) array<Texture> DefaultTeamHeadPortrait;

function Texture GetCharPortrait()
{
    return DefaultHeadPortrait;
}

simulated function SetCharacterFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI)
{
    if(KFPRI == none)
    {
        return;
    }
    KFPRI.CharPortrait = GetCharPortrait();
    KFPRI.bNetDirty = true;
}

simulated function SetCharacterMeshFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetBodyMesh(byte CurrentOutfitIndex, KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

simulated function SetBodySkin(byte CurrentSkinIndex, KFPawn KFP, KFPlayerReplicationInfo KFPRI);

function SetFirstPersonArmsFromArch(KFPawn KFP, optional KFPlayerReplicationInfo KFPRI);

static function int GetWeaponAnimSetIdx()
{
    return default.AnimSets.Length;
}

function SetCharacterAnimFromArch(KFPawn Pawn)
{
    Pawn.Mesh.AnimSets = AnimSets;
    if(Pawn.Mesh.AnimTreeTemplate != AnimTreeTemplate)
    {
        Pawn.Mesh.SetAnimTreeTemplate(AnimTreeTemplate);
    }
}

defaultproperties
{
    DefaultMeshScale=1
    AnimArchetype=KFPawnAnimInfo'ZED_Clot_Anim.AlphaClot_AnimGroup'
    SoundGroupArch=KFPawnSoundGroup'FX_Pawn_Sounds_ARCH.DefaultPawnSounds'
    ImpactSkins(0)=KFSkinTypeEffects'FX_Impacts_ARCH.SkinTypes.Flesh'
    ImpactSkins(1)=KFSkinTypeEffects'FX_Impacts_ARCH.SkinTypes.Skull'
}