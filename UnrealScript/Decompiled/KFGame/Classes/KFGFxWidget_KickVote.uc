/*******************************************************************************
 * KFGFxWidget_KickVote generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxWidget_KickVote extends GFxObject within GFxMoviePlayer;

enum EVoteType
{
    VT_NONE,
    VT_KICK,
    VT_SKIP_TRADER,
    VT_PAUSE_GAME,
    VT_RESUME_GAME,
    VT_MAX
};

var const localized string VoteKickString;
var const localized string VoteSkipTraderString;
var const localized string VoteSkipTraderDetailString;
var const localized string VotePauseGameString;
var const localized string VotePauseGameDetailString;
var const localized string VoteResumeGameString;
var const localized string VoteResumeGameDetailString;
var bool bIsVoteActive;
var bool bShowChoicesOnTimerUpdate;
var const string GBA_VoteYes;
var const string GBA_VoteNo;
var GFxObject KickVoteData;
var KFGFxWidget_KickVote.EVoteType CurrentActiveVote;

function InitializeHUD();

function LocalizeText(KFGFxWidget_KickVote.EVoteType Type)
{
    local GFxObject TempObject;
    local KFPlayerInput KFInput;
    local KeyBind TempKeyBind;

    TempObject = Outer.CreateObject("Object");
    KFInput = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFInput.GetKeyBindFromCommand(TempKeyBind, GBA_VoteYes);
    TempObject.SetString("yesKey", string(TempKeyBind.Name));
    KFInput.GetKeyBindFromCommand(TempKeyBind, GBA_VoteNo);
    TempObject.SetString("noKey", string(TempKeyBind.Name));
    TempObject.SetString("yes", Class'KFCommon_LocalizedStrings'.default.YesString);
    TempObject.SetString("no", Class'KFCommon_LocalizedStrings'.default.NoString);
    TempObject.SetString("voteKick", GetVoteString(Type));
    SetObject("localizedText", TempObject);
}

function ResetVote()
{
    bShowChoicesOnTimerUpdate = false;
    ActionScriptVoid("onYesReleased");
    ActionScriptVoid("onNoReleased");
}

function ShowVote(PlayerReplicationInfo PRI, byte VoteDuration, bool bShowChoices, KFGFxWidget_KickVote.EVoteType Type)
{
    if(PRI != none)
    {
        LocalizeText(Type);
        bIsVoteActive = true;
        CurrentActiveVote = Type;
        SendVoteToAS3(PRI.PlayerName, VoteDuration, bShowChoices);        
    }
    else
    {
        bIsVoteActive = false;
        CurrentActiveVote = 0;
    }
}

function SendVoteToAS3(string PlayerName, byte VoteDuration, bool bShowChoices)
{
    if(KickVoteData == none)
    {
        KickVoteData = Outer.CreateObject("Object");
    }
    KickVoteData.SetString("playerName", GetVotePlayerDataString(PlayerName, CurrentActiveVote));
    KickVoteData.SetInt("voteDuration", VoteDuration);
    KickVoteData.SetBool("bShowChoices", bShowChoices);
    bShowChoicesOnTimerUpdate = bShowChoices;
    SetObject("kickVoteData", KickVoteData);
    UpdateUsingGamePad(Outer.GetPC().PlayerInput.bUsingGamepad);
}

function UpdateVoteDuration(byte VoteDuration)
{
    if(KickVoteData != none)
    {
        KickVoteData.SetInt("voteDuration", VoteDuration);
        KickVoteData.SetBool("bShowChoices", bShowChoicesOnTimerUpdate);
        SetObject("kickVoteData", KickVoteData);
        UpdateUsingGamePad(Outer.GetPC().PlayerInput.bUsingGamepad);
    }
}

function UpdateUsingGamePad(bool bIsUsingGamepad)
{
    SetBool("bUsingGamepad", bIsUsingGamepad);
    if(!bIsUsingGamepad)
    {
        LocalizeText(CurrentActiveVote);
    }
}

function UpdateVoteCount(byte YesVotes, byte NoVotes)
{
    ActionScriptVoid("updateKickVoteCount");
}

function VoteClosed()
{
    bIsVoteActive = false;
    SetVisible(false);
}

function OnYesPressed()
{
    if(bIsVoteActive)
    {
        ActionScriptVoid("onYesPressed");
    }
}

function OnYesReleased()
{
    if(bIsVoteActive)
    {
        ActionScriptVoid("onYesReleased");
    }
}

function OnNoPressed()
{
    if(bIsVoteActive)
    {
        ActionScriptVoid("onNoPressed");
    }
}

function OnNoReleased()
{
    if(bIsVoteActive)
    {
        ActionScriptVoid("onNoReleased");
    }
}

function string GetVoteString(KFGFxWidget_KickVote.EVoteType Type)
{
    switch(Type)
    {
        case 1:
            return VoteKickString;
        case 2:
            return VoteSkipTraderString;
        case 3:
            return VotePauseGameString;
        case 4:
            return VoteResumeGameString;
        case 0:
            LogInternal("None vote type");
            return VoteKickString;
        default:
            LogInternal("Unkown vote type");
            return VoteKickString;
            break;
    }
}

function string GetVotePlayerDataString(string PlayerName, KFGFxWidget_KickVote.EVoteType Type)
{
    switch(Type)
    {
        case 2:
            return PlayerName @ VoteSkipTraderDetailString;
        case 3:
            return PlayerName @ VotePauseGameDetailString;
        case 4:
            return PlayerName @ VoteResumeGameDetailString;
        case 1:
            return PlayerName;
        case 0:
            LogInternal("None vote type");
            return PlayerName;
        default:
            LogInternal("Unkown vote type");
            return PlayerName;
            break;
    }
}

defaultproperties
{
    VoteKickString="Kick Player?"
    VoteSkipTraderString="Skip Trader?"
    VoteSkipTraderDetailString="wants to skip the countdown"
    VotePauseGameString="Pause Game?"
    VotePauseGameDetailString="wants to pause the game"
    VoteResumeGameString="Resume Game?"
    VoteResumeGameDetailString="wants to resume the game"
    GBA_VoteYes="GBA_VoteYes"
    GBA_VoteNo="GBA_VoteNo"
}