/*******************************************************************************
 * KFGameReplicationInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameReplicationInfo extends GameReplicationInfo
    native(ReplicationInfo)
    nativereplication
    config(Game)
    hidecategories(Navigation,Movement,Collision);

struct native PreGameServerAdInfo
{
    var string BannerLink;
    var string ServerMOTD;
    var string WebsiteLink;
    var string ClanMotto;

    structdefaultproperties
    {
        BannerLink=""
        ServerMOTD=""
        WebsiteLink=""
        ClanMotto=""
    }
};

struct native SpawnVolumeInfo
{
    var Vector VolumeLocation;
    var float UsedTime;
    var bool bPortalSpawn;
    var byte VolumeAge;

    structdefaultproperties
    {
        VolumeLocation=(X=0,Y=0,Z=0)
        UsedTime=0
        bPortalSpawn=false
        VolumeAge=0
    }
};

struct native ZedInfo
{
    var Vector ZedLocation;
    var KFPawn_Monster Zed;
    var class<KFPawn_Monster> ZedClass;
    var Vector LastTeleportLocation;
    var bool bUsingSuperSpeed;
    var Vector EnemyLocation;
    var KFPawn Enemy;

    structdefaultproperties
    {
        ZedLocation=(X=0,Y=0,Z=0)
        Zed=none
        ZedClass=none
        LastTeleportLocation=(X=0,Y=0,Z=0)
        bUsingSuperSpeed=false
        EnemyLocation=(X=0,Y=0,Z=0)
        Enemy=none
    }
};

struct native HumanInfo
{
    var Vector HumanLocation;
    var KFPawn Human;
    var class<KFPawn> HumanClass;

    structdefaultproperties
    {
        HumanLocation=(X=0,Y=0,Z=0)
        Human=none
        HumanClass=none
    }
};

struct native PickupInfo
{
    var Vector PickupLocation;
    var int PickupType;

    structdefaultproperties
    {
        PickupLocation=(X=0,Y=0,Z=0)
        PickupType=0
    }
};

var repnotify PreGameServerAdInfo ServerAdInfo;
var int PrimaryXPAccumulator;
var int SecondaryXPAccumulator;
var KFTraderTrigger NextTrader;
var KFTraderTrigger OpenedTrader;
var Volume TraderVolume;
var byte TraderVolumeCheckType;
var repnotify byte MusicTrackRepCount;
var repnotify byte RepKickVotes;
var byte WaveMax;
var repnotify byte WaveNum;
var repnotify byte GameLength;
var byte GameDifficulty;
var byte GameDifficultyModifier;
var byte MaxPerkLevel;
var repnotify byte BossIndex;
var private const byte GameSharedUnlocks;
var byte CurrentGameConductorStatus;
var byte MusicIntensity;
var int DebugingNextTraderIndex;
var string TraderItemsPath;
var transient KFGFxObject_TraderItems TraderItems;
var bool bAllowGrenadePurchase;
var repnotify bool bTraderIsOpen;
var repnotify bool bWaveIsActive;
var repnotify bool bWaveStarted;
var private const bool bIsUnrankedGame;
var bool bMatchVictory;
var bool bTradersEnabled;
var bool bWaveIsEndless;
var bool bEndlessMode;
var bool bObjectiveMode;
var bool bCustom;
var bool bCurrentSMFinishedSpawning;
var bool bDebugSpawnManager;
var bool bTrackingMapEnabled;
var bool bHidePawnIcons;
var bool bGameConductorGraphingEnabled;
var bool bVersusGame;
var bool bAllowSwitchTeam;
var bool NextObjectiveIsEndless;
var bool bForceNextObjective;
var KFTraderDialogManager TraderDialogManager;
var class<KFTraderDialogManager> TraderDialogManagerClass;
var class<KFTraderVoiceGroupBase> TraderVoiceGroupClass;
var int AIRemaining;
var int WaveTotalAICount;
var repnotify string ConsoleGameSessionGuid;
var UniqueNetId ConsoleGameSessionHost;
var array<UniqueNetId> ConsoleGameSessionPendingPlayers;
var float GameAmmoCostScale;
var KFCharacterInfo_Monster CachedBossArch;
var float CurrentSineMod;
var float CurrentNextSpawnTime;
var float CurrentSineWavFreq;
var float CurrentNextSpawnTimeMod;
var int CurrentAIAliveCount;
var int CurrentMaxMonsters;
var float CurrentTimeTilNextSpawn;
var float CurrentTotalWavesActiveTime;
var KFVoteCollector VoteCollector;
var class<KFVoteCollector> VoteCollectorClass;
var SpawnVolumeInfo SpawnVolumeInfos[16];
var int LastSpawnVolumeIndex;
var SpawnVolumeInfo FailedSpawnInfos[8];
var int LastFailedSpawnIndex;
var ZedInfo ZedInfos[32];
var float UpdateZedInfoInterval;
var HumanInfo HumanInfos[6];
var float UpdateHumanInfoInterval;
var int MaxHumanCount;
var PickupInfo PickupInfos[20];
var float UpdatePickupInfoInterval;
var float PlayerAccuracyTracker[10];
var float PlayerHeadshotAccuracyTracker[10];
var float AggregatePlayerSkillTracker[10];
var float TotalZedLifeSpanAverageTracker[10];
var float CurrentWaveZedLifeSpanAverageTracker[10];
var float RecentZedLifeSpanAverageTracker[10];
var float PlayersHealthStatusTracker[10];
var float PlayersAmmoStatusTracker[10];
var float AggregatePlayersStatusTracker[10];
var float CurrentParZedLifeSpan;
var float OverallRankAndSkillModifierTracker[10];
var float ZedMovementSpeedModifierTracker[10];
var float ZedSpawnRateModifierTracker[10];
var float ZedSpawnRateTracker[10];
var float VersusZedHealthMod;
var float VersusZedDamageMod;
var array<KFDoorActor> DoorList;
var repnotify Actor CurrentObjective;
var KFInterface_MapObjective ObjectiveInterface;
var repnotify Actor PreviousObjective;
var repnotify Actor NextObjective;
var repnotify int PreviousObjectiveResult;
var repnotify int PreviousObjectiveXPResult;
var repnotify int PreviousObjectiveVoshResult;
var int ObjectiveDelay;
var export editinline AkComponent MusicComp;
var KFMusicTrackInfo CurrentMusicTrackInfo;
var repnotify KFMusicTrackInfo ReplicatedMusicTrackInfo;
var private float SteamHeartbeatAccumulator;

replication
{
     if(bNetDirty)
        AIRemaining, BossIndex, 
        ConsoleGameSessionGuid, CurrentObjective, 
        GameDifficulty, GameDifficultyModifier, 
        GameSharedUnlocks, MaxHumanCount, 
        MusicIntensity, MusicTrackRepCount, 
        NextObjective, NextTrader, 
        PreviousObjective, PreviousObjectiveResult, 
        PreviousObjectiveVoshResult, PreviousObjectiveXPResult, 
        ReplicatedMusicTrackInfo, TraderVolume, 
        TraderVolumeCheckType, WaveNum, 
        WaveTotalAICount, bHidePawnIcons, 
        bIsUnrankedGame, bTraderIsOpen, 
        bWaveIsActive, bWaveIsEndless, 
        bWaveStarted;

     if(bNetInitial)
        GameAmmoCostScale, GameLength, 
        MaxPerkLevel, TraderItems, 
        WaveMax, bAllowGrenadePurchase, 
        bCustom, bTradersEnabled, 
        bVersusGame;

     if(bNetInitial && Role == ROLE_Authority)
        ServerAdInfo;

     if(bDebugSpawnManager && bNetDirty)
        CurrentAIAliveCount, CurrentMaxMonsters, 
        CurrentNextSpawnTime, CurrentNextSpawnTimeMod, 
        CurrentSineMod, CurrentSineWavFreq, 
        CurrentTimeTilNextSpawn, CurrentTotalWavesActiveTime, 
        bCurrentSMFinishedSpawning;

     if(bNetDirty)
        bTrackingMapEnabled;

     if(bTrackingMapEnabled && bNetDirty)
        FailedSpawnInfos, HumanInfos, 
        PickupInfos, SpawnVolumeInfos, 
        ZedInfos;

     if((bNetDirty && VoteCollector != none) && VoteCollector.bIsVoteInProgress)
        RepKickVotes;

     if(bNetDirty)
        bGameConductorGraphingEnabled;

     if(bGameConductorGraphingEnabled && bNetDirty)
        AggregatePlayerSkillTracker, AggregatePlayersStatusTracker, 
        CurrentGameConductorStatus, CurrentParZedLifeSpan, 
        CurrentWaveZedLifeSpanAverageTracker, OverallRankAndSkillModifierTracker, 
        PlayerAccuracyTracker, PlayerHeadshotAccuracyTracker, 
        PlayersAmmoStatusTracker, PlayersHealthStatusTracker, 
        RecentZedLifeSpanAverageTracker, TotalZedLifeSpanAverageTracker, 
        ZedMovementSpeedModifierTracker, ZedSpawnRateModifierTracker, 
        ZedSpawnRateTracker;

     if((bGameConductorGraphingEnabled && bNetDirty) && bVersusGame)
        VersusZedDamageMod, VersusZedHealthMod;
}

// Export UKFGameReplicationInfo::execSendSteamHeartbeat(FFrame&, void* const)
native function SendSteamHeartbeat();

// Export UKFGameReplicationInfo::execSendSteamRequestItemDrop(FFrame&, void* const)
native function SendSteamRequestItemDrop();

// Export UKFGameReplicationInfo::execEndOfWave(FFrame&, void* const)
private native final function EndOfWave();

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'bTraderIsOpen')
    {
        if(bTraderIsOpen)
        {
            OpenTrader();            
        }
        else
        {
            CloseTrader();
        }        
    }
    else
    {
        if(VarName == 'bWaveIsActive')
        {
            if(!bWaveIsActive)
            {
                FadeOutLingeringExplosions();
                EndOfWave();
            }            
        }
        else
        {
            if(VarName == 'bWaveStarted')
            {
                if(bWaveStarted)
                {
                    NotifyWaveStart();                    
                }
                else
                {
                    NotifyWaveEnded();
                }                
            }
            else
            {
                if(VarName == 'ReplicatedMusicTrackInfo')
                {
                    ForceNewMusicTrack(ReplicatedMusicTrackInfo);                    
                }
                else
                {
                    if(VarName == 'MusicTrackRepCount')
                    {
                        if(!bWaveIsActive || !IsBossWave())
                        {
                            PlayNewMusicTrack(true);
                        }                        
                    }
                    else
                    {
                        if(VarName == 'bIsUnrankedGame')
                        {
                            if(bIsUnrankedGame)
                            {
                                WarnInternal(string(GetFuncName()) @ "Game is UNRANKED!");
                            }                            
                        }
                        else
                        {
                            if(VarName == 'RepKickVotes')
                            {
                                VoteCollector.UnPackVotes();                                
                            }
                            else
                            {
                                if(VarName == 'ServerAdInfo')
                                {
                                    ShowPreGameServerWelcomeScreen();                                    
                                }
                                else
                                {
                                    if(VarName == 'WaveNum')
                                    {
                                        UpdateHUDWaveCount();
                                        TriggerClientWaveStartEvents();                                        
                                    }
                                    else
                                    {
                                        if(VarName == 'ConsoleGameSessionGuid')
                                        {
                                            KFPlayerController(GetALocalPlayerController()).TryJoinGameSession();                                            
                                        }
                                        else
                                        {
                                            if(VarName == 'CurrentObjective')
                                            {
                                                if(CurrentObjective != none)
                                                {
                                                    ObjectiveInterface = KFInterface_MapObjective(CurrentObjective);
                                                    ObjectiveInterface.ActivateObjective();                                                    
                                                }
                                                else
                                                {
                                                    if(GetALocalPlayerController() != none)
                                                    {
                                                        KFPlayerController(GetALocalPlayerController()).SeasonalEventStats_OnMapObjectiveDeactivated(Actor(bool(ObjectiveInterface)));
                                                    }
                                                    ObjectiveInterface.DeactivateObjective();
                                                    ObjectiveInterface = none;
                                                }                                                
                                            }
                                            else
                                            {
                                                if(VarName == 'BossIndex')
                                                {
                                                    CacheSelectedBoss(BossIndex);                                                    
                                                }
                                                else
                                                {
                                                    if(VarName == 'NextObjective')
                                                    {
                                                        if(NextObjective != none)
                                                        {
                                                            KFInterface_MapObjective(NextObjective).NotifyObjectiveSelected();
                                                        }                                                        
                                                    }
                                                    else
                                                    {
                                                        if(VarName == 'GameLength')
                                                        {
                                                            ReceivedGameLength();                                                            
                                                        }
                                                        else
                                                        {
                                                            super.ReplicatedEvent(VarName);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

simulated event PostBeginPlay()
{
    local KFDoorActor door;

    VoteCollector = new (self) VoteCollectorClass;
    super.PostBeginPlay();
    ConsoleGameSessionGuid = KFGameEngine(Class'Engine'.static.GetEngine()).ConsoleGameSessionGuid;
    foreach DynamicActors(Class'KFDoorActor', door)
    {
        DoorList.AddItem(door;        
    }    
    if((WorldInfo.NetMode != NM_DedicatedServer) && TraderDialogManagerClass != none)
    {
        TraderDialogManager = Spawn(TraderDialogManagerClass);
    }
    SetTimer(1, true);
    TraderItems = KFGFxObject_TraderItems(DynamicLoadObject(TraderItemsPath, Class'KFGFxObject_TraderItems'));
}

simulated function ReceivedGameLength()
{
    ActivateLevelLoadedEvents();
}

simulated function ActivateLevelLoadedEvents()
{
    local Sequence GameSeq;
    local array<SequenceObject> AllSeqEvents;
    local array<int> ActivateIndices;
    local int I;

    GameSeq = WorldInfo.GetGameSequence();
    if(GameSeq != none)
    {
        GameSeq.FindSeqObjectsByClass(Class'KFSeqEvent_LevelLoaded', true, AllSeqEvents);
        ActivateIndices = GetKFSeqEventLevelLoadedIndices();
        if(ActivateIndices.Length == 0)
        {
            return;
        }
        I = 0;
        J0x9B:

        if(I < AllSeqEvents.Length)
        {
            if(KFSeqEvent_LevelLoaded(AllSeqEvents[I]).bWaitingForGRI)
            {
                SeqEvent_LevelLoaded(AllSeqEvents[I]).CheckActivate(WorldInfo, none, false, ActivateIndices);
                KFSeqEvent_LevelLoaded(AllSeqEvents[I]).bWaitingForGRI = false;
            }
            ++ I;
            goto J0x9B;
        }
    }
}

simulated function array<int> GetKFSeqEventLevelLoadedIndices()
{
    local array<int> ActivateIndices;

    switch(GameLength)
    {
        case 0:
            ActivateIndices[0] = 3;
            break;
        case 1:
            ActivateIndices[0] = 4;
            break;
        case 2:
            ActivateIndices[0] = 5;
            break;
        default:
            break;
    }
    return ActivateIndices;
}

simulated function ReceivedGameClass()
{
    local class<KFGameInfo> KFGameClass;
    local KFMapInfo KFMI;
    local class<KFTraderVoiceGroupBase> MapVoiceGroupClass;

    KFGameClass = class<KFGameInfo>(GameClass);
    if(KFGameClass != none)
    {
        KFGameClass.static.PreloadGlobalContentClasses();
        if(TraderDialogManager != none)
        {
            TraderDialogManager.TraderVoiceGroupClass = KFGameClass.default.TraderVoiceGroupClass;
            KFMI = KFMapInfo(WorldInfo.GetMapInfo());
            if(KFMI != none)
            {
                if(bEndlessMode)
                {
                    if(KFMI.TraderVoiceGroupClassPath_Endless != "")
                    {
                        MapVoiceGroupClass = class<KFTraderVoiceGroupBase>(DynamicLoadObject(KFMI.TraderVoiceGroupClassPath_Endless, Class'Class'));
                    }                    
                }
                else
                {
                    if(bObjectiveMode)
                    {
                        if(KFMI.TraderVoiceGroupClassPath_Objective != "")
                        {
                            MapVoiceGroupClass = class<KFTraderVoiceGroupBase>(DynamicLoadObject(KFMI.TraderVoiceGroupClassPath_Objective, Class'Class'));
                        }                        
                    }
                    else
                    {
                        if(KFMI.TraderVoiceGroupClassPath != "")
                        {
                            MapVoiceGroupClass = class<KFTraderVoiceGroupBase>(DynamicLoadObject(KFMI.TraderVoiceGroupClassPath, Class'Class'));
                        }
                    }
                }
            }
            if(MapVoiceGroupClass != none)
            {
                TraderDialogManager.TraderVoiceGroupClass = MapVoiceGroupClass;
            }
        }
        if(KFGameClass.static.ShouldPlayMusicAtStart() && MusicComp == none)
        {
            PlayNewMusicTrack(false, true);
        }
    }
    DebugingNextTraderIndex = -1;
    super.ReceivedGameClass();
}

simulated function CacheSelectedBoss(int NewBossIndex)
{
    local class<KFGameInfo> KFGameClass;
    local class<KFPawn_Monster> KFMonsterClass;

    BossIndex = byte(NewBossIndex);
    KFGameClass = class<KFGameInfo>(GameClass);
    if(KFGameClass != none)
    {
        KFMonsterClass = KFGameClass.static.GetSpecificBossClass(BossIndex, KFMapInfo(WorldInfo.GetMapInfo()));
        if(KFMonsterClass != none)
        {
            SetCachedBossArchetype(KFMonsterClass.default.MonsterArchPath);
        }
    }
}

// Export UKFGameReplicationInfo::execSetCachedBossArchetype(FFrame&, void* const)
native function SetCachedBossArchetype(string MonsterArchPath);

simulated function UpdateHUDWaveCount()
{
    local KFPlayerController KFPC;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        KFPC = KFPlayerController(GetALocalPlayerController());
        if((KFPC != none) && KFPC.myGfxHUD != none)
        {
            KFPC.myGfxHUD.UpdateWaveCount();
        }
    }
}

simulated function NotifyWaveEnded()
{
    local PlayerReplicationInfo PRI;
    local KFPlayerReplicationInfo KFPRI;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(WorldInfo.MyGoreEffectManager != none)
        {
            KFGoreManager(WorldInfo.MyGoreEffectManager).ResetPersistantGore(false);
        }
    }
    bWaveStarted = false;
    bForceNetUpdate = true;
    foreach PRIArray(PRI,)
    {
        KFPRI = KFPlayerReplicationInfo(PRI);
        if(KFPRI != none)
        {
            KFPRI.NotifyWaveEnded();
        }        
    }    
}

simulated function NotifyWaveStart()
{
    local PlayerReplicationInfo PRI;
    local KFPlayerReplicationInfo KFPRI;

    bWaveStarted = true;
    bForceNetUpdate = true;
    foreach PRIArray(PRI,)
    {
        KFPRI = KFPlayerReplicationInfo(PRI);
        if(KFPRI != none)
        {
            KFPRI.NotifyWaveStart();
        }        
    }    
}

simulated function EndGame()
{
    bMatchHasBegun = false;
    bMatchIsOver = true;
    Class'KFGameEngine'.static.RefreshOnlineGameData();
}

reliable client simulated exec function ShowPreGameServerWelcomeScreen()
{
    local KFPlayerController KFPC;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        return;
    }
    KFPC = KFPlayerController(GetALocalPlayerController());
    if((KFPC != none) && KFPC.MyGFxManager != none)
    {
        KFPC.MyGFxManager.ShowWelcomeScreen();
    }
}

simulated function GetKFPRIArray(out array<KFPlayerReplicationInfo> KFPRIArray, optional bool bGetSpectators)
{
    local int I, Num;

    KFPRIArray.Remove(0, KFPRIArray.Length;
    I = 0;
    J0x22:

    if(I < PRIArray.Length)
    {
        if(((PRIArray[I] != none) && KFPlayerReplicationInfo(PRIArray[I]) != none) && bGetSpectators || !PRIArray[I].bOnlySpectator)
        {
            KFPRIArray[++ Num] = KFPlayerReplicationInfo(PRIArray[I]);
        }
        ++ I;
        goto J0x22;
    }
}

simulated function FadeOutLingeringExplosions()
{
    local KFExplosionActorLingering LingeringExplosion;

    foreach DynamicActors(Class'KFExplosionActorLingering', LingeringExplosion)
    {
        LingeringExplosion.FadeOut();        
    }    
}

function StartScavengeTime(int Time)
{
    RemainingTime = Time;
    RemainingMinute = Time;
    bStopCountDown = false;
}

simulated function OpenTrader(optional int Time)
{
    local KFPlayerController KFPC;
    local array<int> OutputLinksToActivate;
    local array<SequenceObject> AllTraderOpenedEvents;
    local KFSeqEvent_TraderOpened TraderOpenedEvt;
    local Sequence GameSeq;
    local int I;

    if(OpenedTrader != none)
    {
        return;
    }
    if((Time > 0) && Role == ROLE_Authority)
    {
        bStopCountDown = false;
        RemainingTime = Time;
        RemainingMinute = Time;
    }
    OpenedTrader = NextTrader;
    if(OpenedTrader != none)
    {
        OpenedTrader.OpenTrader();
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayOpenTraderDialog(WaveNum, WaveMax, GetALocalPlayerController());
        }
        KFPC = KFPlayerController(GetALocalPlayerController());
        if(KFPC != none)
        {
            if(KFPC.MyGFxManager != none)
            {
                KFPC.MyGFxManager.OnTraderTimeStart();
            }
            if(KFPC.myGfxHUD != none)
            {
                KFPC.myGfxHUD.UpdateWaveCount();
            }
        }
    }
    if(WorldInfo.NetMode == NM_Client)
    {
        GameSeq = WorldInfo.GetGameSequence();
        if(GameSeq != none)
        {
            GameSeq.FindSeqObjectsByClass(Class'KFSeqEvent_TraderOpened', true, AllTraderOpenedEvents);
            I = 0;
            J0x332:

            if(I < AllTraderOpenedEvents.Length)
            {
                TraderOpenedEvt = KFSeqEvent_TraderOpened(AllTraderOpenedEvents[I]);
                if((TraderOpenedEvt != none) && TraderOpenedEvt.bClientSideOnly)
                {
                    TraderOpenedEvt.Reset();
                    TraderOpenedEvt.SetWaveNum(WaveNum, WaveMax);
                    if((IsFinalWave()) && TraderOpenedEvt.OutputLinks.Length > 1)
                    {
                        OutputLinksToActivate.AddItem(1;                        
                    }
                    else
                    {
                        OutputLinksToActivate.AddItem(0;
                    }
                    TraderOpenedEvt.CheckActivate(self, self,, OutputLinksToActivate);
                }
                ++ I;
                goto J0x332;
            }
        }
    }
}

simulated function OpenTraderNext(optional int Time)
{
    local KFGameInfo KFGameInfo;

    KFGameInfo = KFGameInfo(WorldInfo.Game);
    if(KFGameInfo == none)
    {
        return;
    }
    if((Time > 0) && Role == ROLE_Authority)
    {
        bStopCountDown = false;
        RemainingTime = Time;
        RemainingMinute = Time;
    }
    if(KFGameInfo.ScriptedTrader != none)
    {
        NextTrader = KFGameInfo.ScriptedTrader;
        KFGameInfo.ScriptedTrader = none;        
    }
    else
    {
        if(KFGameInfo.TraderList.Length > 0)
        {
            if((DebugingNextTraderIndex == -1) && OpenedTrader != none)
            {
                KFGameInfo.TraderList.AddItem(OpenedTrader;
            }
            if((DebugingNextTraderIndex + 1) >= KFGameInfo.TraderList.Length)
            {
                DebugingNextTraderIndex = -1;
            }
            DebugingNextTraderIndex = DebugingNextTraderIndex + 1;
            NextTrader = KFGameInfo.TraderList[DebugingNextTraderIndex];
        }
    }
    OpenedTrader = NextTrader;
    OpenedTrader.OpenTrader();
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayOpenTraderDialog(WaveNum, WaveMax, GetALocalPlayerController());
    }
}

simulated function CloseTrader()
{
    local KFPlayerController KFPC;
    local PlayerController LocalPC;
    local KFSeqEvent_TraderClosed TraderClosedEvt;
    local array<SequenceObject> AllTraderClosedEvents;
    local Sequence GameSeq;
    local int I;

    LocalPC = GetALocalPlayerController();
    if(OpenedTrader != none)
    {
        bStopCountDown = true;
        OpenedTrader.CloseTrader();
        OpenedTrader = none;
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayCloseTraderDialog(LocalPC);
        }
        if(WorldInfo.NetMode == NM_Client)
        {
            GameSeq = WorldInfo.GetGameSequence();
            if(GameSeq != none)
            {
                GameSeq.FindSeqObjectsByClass(Class'KFSeqEvent_TraderClosed', true, AllTraderClosedEvents);
                I = 0;
                J0x1EE:

                if(I < AllTraderClosedEvents.Length)
                {
                    TraderClosedEvt = KFSeqEvent_TraderClosed(AllTraderClosedEvents[I]);
                    if((TraderClosedEvt != none) && TraderClosedEvt.bClientSideOnly)
                    {
                        TraderClosedEvt.Reset();
                        TraderClosedEvt.SetWaveNum(WaveNum, WaveMax);
                        TraderClosedEvt.CheckActivate(self, self);
                    }
                    ++ I;
                    goto J0x1EE;
                }
            }
        }
    }
    KFPC = KFPlayerController(LocalPC);
    if(KFPC != none)
    {
        KFPC.SetHaveUpdatePerk(false);
    }
}

simulated function int GetTraderTimeRemaining()
{
    return Max(0, RemainingTime);
}

simulated function TriggerClientWaveStartEvents()
{
    local array<SequenceObject> AllWaveStartEvents;
    local array<int> OutputLinksToActivate;
    local KFSeqEvent_WaveStart WaveStartEvt;
    local Sequence GameSeq;
    local int I;

    if(WorldInfo.NetMode == NM_Client)
    {
        GameSeq = WorldInfo.GetGameSequence();
        if(GameSeq != none)
        {
            GameSeq.FindSeqObjectsByClass(Class'KFSeqEvent_WaveStart', true, AllWaveStartEvents);
            I = 0;
            J0x9E:

            if(I < AllWaveStartEvents.Length)
            {
                WaveStartEvt = KFSeqEvent_WaveStart(AllWaveStartEvents[I]);
                if((WaveStartEvt != none) && WaveStartEvt.bClientSideOnly)
                {
                    WaveStartEvt.Reset();
                    WaveStartEvt.SetWaveNum(WaveNum, WaveMax);
                    if((IsBossWave()) && WaveStartEvt.OutputLinks.Length > 1)
                    {
                        OutputLinksToActivate.AddItem(1;                        
                    }
                    else
                    {
                        OutputLinksToActivate.AddItem(0;
                    }
                    WaveStartEvt.CheckActivate(self, self,, OutputLinksToActivate);
                }
                ++ I;
                goto J0x9E;
            }
        }
    }
}

function float GetHeartbeatAccumulatorAmount()
{
    return SteamHeartbeatAccumulator;
}

simulated function OnOpenAfterActionReport(optional float Time)
{
    if((Time > float(0)) && Role == ROLE_Authority)
    {
        bStopCountDown = false;
        RemainingTime = int(Time);
        RemainingMinute = int(Time);
    }
}

simulated function ProcessChanceDrop()
{
    SendSteamHeartbeat();
    SendSteamRequestItemDrop();
}

simulated event SendPlayfabGameTimeUpdate(optional bool bGameEnd)
{
    local JsonObject Parms;

    Parms = new Class'JsonObject';
    Parms.SetIntValue("UpdateTime", int(SteamHeartbeatAccumulator));
    Parms.SetBoolValue("bGameEnd", bGameEnd);
    Class'GameEngine'.static.GetPlayfabInterface().ExecuteCloudScript("UpdatePlayRewards", Parms);
}

simulated function int GetNextMapTimeRemaining()
{
    return Max(0, RemainingTime);
}

function SetWaveActive(bool bWaveActive, optional byte NewMusicIntensity)
{
    MusicIntensity = NewMusicIntensity;
    bTraderIsOpen = (!bWaveActive && bMatchHasBegun) && bTradersEnabled;
    bWaveIsActive = bWaveActive;
    bForceNetUpdate = true;
    ++ MusicTrackRepCount;
    if(!(IsBossWaveNext()) && bWaveActive && WorldInfo.NetMode != NM_DedicatedServer)
    {
        PlayNewMusicTrack(true);
    }
}

simulated function bool IsFinalWave()
{
    return WaveNum == (WaveMax - 1);
}

simulated function bool IsBossWave()
{
    return WaveNum == WaveMax;
}

simulated function bool IsInfiniteWave()
{
    return true;
}

simulated function bool IsBossWaveNext()
{
    return WaveNum == (WaveMax - 1);
}

simulated function bool IsSpecialWave(out int ModIndex)
{
    return false;
}

simulated function bool IsWeeklyWave(out int ModIndex)
{
    return false;
}

simulated function bool IsEndlessWave()
{
    return bWaveIsEndless;
}

simulated event Timer()
{
    local KFGameInfo MyKFGameInfo;

    if((WorldInfo.Game == none) || WorldInfo.Game.MatchIsInProgress())
    {
        ++ ElapsedTime;
    }
    if((Role == ROLE_Authority) && bDebugSpawnManager)
    {
        MyKFGameInfo = KFGameInfo(WorldInfo.Game);
        if(MyKFGameInfo != none)
        {
            CurrentAIAliveCount = KFGameInfo(WorldInfo.Game).AIAliveCount;
            if(MyKFGameInfo.SpawnManager != none)
            {
                bCurrentSMFinishedSpawning = MyKFGameInfo.SpawnManager.IsFinishedSpawning();
                CurrentMaxMonsters = MyKFGameInfo.SpawnManager.GetMaxMonsters();
                CurrentTimeTilNextSpawn = MyKFGameInfo.SpawnManager.TimeUntilNextSpawn;
                CurrentTotalWavesActiveTime = MyKFGameInfo.SpawnManager.TotalWavesActiveTime;
                CurrentSineMod = MyKFGameInfo.SpawnManager.GetSineMod();                
            }
            else
            {
                bCurrentSMFinishedSpawning = true;
                CurrentMaxMonsters = 0;
                CurrentTimeTilNextSpawn = 0;
                CurrentTotalWavesActiveTime = 0;
            }
        }
    }
    if(WorldInfo.NetMode == NM_Client)
    {
        if(RemainingMinute != 0)
        {
            RemainingTime = RemainingMinute;
            RemainingMinute = 0;
        }
    }
    if((RemainingTime > 0) && !bStopCountDown)
    {
        -- RemainingTime;
        if(WorldInfo.NetMode != NM_Client)
        {
            if((RemainingTime % 5) == 0)
            {
                RemainingMinute = RemainingTime;
            }
        }
    }
    if(((WorldInfo.NetMode != NM_DedicatedServer) && OpenedTrader != none) && RemainingTime > 0)
    {
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayTraderTickDialog(RemainingTime, GetALocalPlayerController(), WorldInfo);
        }
    }
    if(bPendingMusicTrackChange)
    {
        bPendingMusicTrackChange = false;
        PlayNewMusicTrack();        
    }
    else
    {
        if((MusicComp != none) && !MusicComp.IsPlaying())
        {
            PlayNewMusicTrack();
        }
    }
}

simulated function RemovePRI(PlayerReplicationInfo PRI)
{
    local UniqueNetId NullId;

    super.RemovePRI(PRI);
    if(WorldInfo.IsConsoleDedicatedServer())
    {
        if(PRIArray.Length == 0)
        {
            ConsoleGameSessionGuid = "";
            ConsoleGameSessionHost = NullId;
        }
    }
    if(!bMatchHasBegun)
    {
        UpdateSharedUnlocks();
    }
}

// Export UKFGameReplicationInfo::execUpdateSharedUnlocks(FFrame&, void* const)
native simulated function UpdateSharedUnlocks();

simulated event bool CanChangePerks()
{
    return bTraderIsOpen;
}

simulated function DisplayDebug(HUD HUD, out float YL, out float YPos)
{
    local int TotalClots, NumSlashers, NumUnders, NumAlphas;
    local KFPawn_Monster KFPM;
    local Canvas Canvas;

    Canvas = HUD.Canvas;
    super(Actor).DisplayDebug(HUD, YL, YPos);
    if(HUD.ShouldDisplayDebug('GameState'))
    {
        Canvas.SetPos(4, YPos);
        Canvas.DrawText("---------- KFGameInfo GameState Info ----------");
        YPos += YL;
        foreach DynamicActors(Class'KFPawn_Monster', KFPM)
        {
            if(KFPM.IsAliveAndWell())
            {
                if(KFPM.IsA('KFPawn_ZedClot_Slasher'))
                {
                    ++ TotalClots;
                    ++ NumSlashers;
                    continue;
                }
                if(KFPM.IsA('KFPawn_ZedClot_Alpha'))
                {
                    ++ TotalClots;
                    ++ NumAlphas;
                    continue;
                }
                if(KFPM.IsA('KFPawn_ZedClot_Cyst'))
                {
                    ++ TotalClots;
                    ++ NumUnders;
                }
            }            
        }        
        if(TotalClots > 0)
        {
            Canvas.DrawText((((((("TotalClots:" @ string(TotalClots)) @ ", Alpha%:") @ string((float(NumAlphas) / float(TotalClots)) * float(100))) @ ", Slasher%:") @ string((float(NumSlashers) / float(TotalClots)) * float(100))) @ ", UnderDev%:") @ string((float(NumUnders) / float(TotalClots)) * float(100)), false);
            YPos += YL;
            Canvas.SetPos(4, YPos);            
        }
        else
        {
            Canvas.DrawText("TotalClots: 0", false);
            YPos += YL;
            Canvas.SetPos(4, YPos);
        }
        Canvas.DrawText((("CurrentSineMod:" @ string(CurrentSineMod)) @ ", CurrentNextSpawnTime:") @ string(CurrentNextSpawnTime), false);
        YPos += YL;
        Canvas.SetPos(4, YPos);
    }
    if(HUD.ShouldDisplayDebug('GameSpeed'))
    {
        Canvas.SetPos(4, YPos);
        Canvas.DrawText("---------- GameSpeed Info ----------");
        YPos += YL;
        Canvas.DrawText("GameSpeed:" @ string(WorldInfo.TimeDilation));
        YPos += YL;
        Canvas.SetPos(4, YPos);
    }
}

simulated function int GetNumPlayers()
{
    local array<KFPlayerReplicationInfo> PRIs;

    GetKFPRIArray(PRIs);
    return PRIs.Length;
}

simulated function int GetNumPlayersAlive()
{
    local int I, NumPlayersAlive;
    local array<KFPlayerReplicationInfo> PRIs;

    GetKFPRIArray(PRIs);
    I = 0;
    J0x1F:

    if(I < PRIs.Length)
    {
        if(PRIs[I].PlayerHealth > 0)
        {
            ++ NumPlayersAlive;
        }
        ++ I;
        goto J0x1F;
    }
    return NumPlayersAlive;
}

simulated function bool AnyPlayersAlive()
{
    return (GetNumPlayersAlive()) > 0;
}

function AddRecentSpawnVolume(Vector VolumeLocation, optional bool bPortalSpawn)
{
    ++ LastSpawnVolumeIndex;
    if(LastSpawnVolumeIndex > (16 - 1))
    {
        LastSpawnVolumeIndex = 0;
    }
    SpawnVolumeInfos[LastSpawnVolumeIndex].VolumeLocation = VolumeLocation;
    SpawnVolumeInfos[LastSpawnVolumeIndex].UsedTime = WorldInfo.TimeSeconds;
    SpawnVolumeInfos[LastSpawnVolumeIndex].bPortalSpawn = bPortalSpawn;
    SpawnVolumeInfos[LastSpawnVolumeIndex].VolumeAge = 255;
    bNetDirty = true;
}

function AddFailedSpawn(Vector SpawnLocation, optional bool bPortalSpawn)
{
    ++ LastFailedSpawnIndex;
    if(LastFailedSpawnIndex > (8 - 1))
    {
        LastFailedSpawnIndex = 0;
    }
    FailedSpawnInfos[LastFailedSpawnIndex].VolumeLocation = SpawnLocation;
    FailedSpawnInfos[LastFailedSpawnIndex].UsedTime = WorldInfo.TimeSeconds;
    FailedSpawnInfos[LastFailedSpawnIndex].bPortalSpawn = bPortalSpawn;
    bNetDirty = true;
}

event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
}

function UpdatePickupList()
{
    local int I, J;
    local KFGameInfo KFGameInfo;

    KFGameInfo = KFGameInfo(WorldInfo.Game);
    if(KFGameInfo == none)
    {
        return;
    }
    I = 0;
    J = 0;
    J0x58:

    if(J < KFGameInfo.AllPickupFactories.Length)
    {
        if(I < 20)
        {
            if((KFGameInfo.AllPickupFactories[J] != none) && !KFGameInfo.AllPickupFactories[J].bPickupHidden)
            {
                PickupInfos[I].PickupLocation = KFGameInfo.AllPickupFactories[J].Location;
                if(KFGameInfo.AllPickupFactories[J].CurrentPickupIsAmmo())
                {
                    PickupInfos[I].PickupType = 0;                    
                }
                else
                {
                    if(KFGameInfo.AllPickupFactories[J].CurrentPickupIsWeapon())
                    {
                        PickupInfos[I].PickupType = 1;                        
                    }
                    else
                    {
                        if(KFGameInfo.AllPickupFactories[J].CurrentPickupIsArmor())
                        {
                            PickupInfos[I].PickupType = 2;                            
                        }
                        else
                        {
                            PickupInfos[I].PickupType = -1;
                        }
                    }
                }
                bNetDirty = true;
                ++ I;
            }
        }
        ++ J;
        goto J0x58;
    }
    I = I;
    J0x315:

    if(I < 20)
    {
        PickupInfos[I].PickupLocation = vect(0, 0, 0);
        PickupInfos[I].PickupType = -1;
        bNetDirty = true;
        ++ I;
        goto J0x315;
    }
}

function UpdateSpawnVolumes()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < 16)
    {
        if(!IsZero(SpawnVolumeInfos[I].VolumeLocation))
        {
            if(SpawnVolumeInfos[I].bPortalSpawn && (WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime) > 5)
            {
                SpawnVolumeInfos[I].VolumeLocation = vect(0, 0, 0);
                bNetDirty = true;                
            }
            else
            {
                if((WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime) > 30)
                {
                    SpawnVolumeInfos[I].VolumeLocation = vect(0, 0, 0);
                    bNetDirty = true;                    
                }
                else
                {
                    if(SpawnVolumeInfos[I].bPortalSpawn)
                    {
                        SpawnVolumeInfos[I].VolumeAge = byte(((float(5) - (WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime)) / float(5)) * float(255));                        
                    }
                    else
                    {
                        SpawnVolumeInfos[I].VolumeAge = byte(((float(30) - (WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime)) / float(30)) * float(255));
                    }
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
    I = 0;
    J0x2E3:

    if(I < 8)
    {
        if(!IsZero(FailedSpawnInfos[I].VolumeLocation))
        {
            if((WorldInfo.TimeSeconds - FailedSpawnInfos[I].UsedTime) > 10)
            {
                FailedSpawnInfos[I].VolumeLocation = vect(0, 0, 0);
                bNetDirty = true;
            }
        }
        ++ I;
        goto J0x2E3;
    }
}

function UpdateZedList()
{
    local KFPawn_Monster KFPM;
    local int I;
    local bool bFoundZed;

    I = 0;
    J0x0B:

    if(I < 32)
    {
        if(((ZedInfos[I].Zed == none) && !IsZero(ZedInfos[I].ZedLocation)) || (ZedInfos[I].Zed != none) && !ZedInfos[I].Zed.IsAliveAndWell())
        {
            ZedInfos[I].ZedLocation = vect(0, 0, 0);
            ZedInfos[I].Zed = none;
            ZedInfos[I].ZedClass = none;
            ZedInfos[I].bUsingSuperSpeed = false;
            ZedInfos[I].Enemy = none;
            ZedInfos[I].EnemyLocation = vect(0, 0, 0);
            ZedInfos[I].LastTeleportLocation = vect(0, 0, 0);
            bNetDirty = true;
        }
        ++ I;
        goto J0x0B;
    }
    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFPM)
    {
        if(KFPM.IsAliveAndWell())
        {
            bFoundZed = false;
            I = 0;
            J0x2AE:

            if(I < 32)
            {
                if(ZedInfos[I].Zed == KFPM)
                {
                    ZedInfos[I].ZedLocation = KFPM.Location;
                    ZedInfos[I].bUsingSuperSpeed = KFPM.bUseHiddenSpeed;
                    if(((KFPM.Controller != none) && KFAIController(KFPM.Controller) != none) && (WorldInfo.TimeSeconds - KFAIController(KFPM.Controller).LastTeleportTime) < 5)
                    {
                        ZedInfos[I].LastTeleportLocation = KFAIController(KFPM.Controller).LastTeleportLocation;                        
                    }
                    else
                    {
                        ZedInfos[I].LastTeleportLocation = vect(0, 0, 0);
                    }
                    if((KFPM.Controller != none) && KFPM.Controller.Enemy != none)
                    {
                        ZedInfos[I].Enemy = KFPawn(KFPM.Controller.Enemy);
                        ZedInfos[I].EnemyLocation = KFPM.Controller.Enemy.Location;                        
                    }
                    else
                    {
                        ZedInfos[I].Enemy = none;
                        ZedInfos[I].EnemyLocation = vect(0, 0, 0);
                    }
                    bFoundZed = true;
                    bNetDirty = true;
                    goto J0x68C;
                }
                ++ I;
                goto J0x2AE;
            }
            J0x68C:

            if(!bFoundZed)
            {
                I = 0;
                J0x6A6:

                if(I < 32)
                {
                    if(ZedInfos[I].Zed == none)
                    {
                        ZedInfos[I].ZedLocation = KFPM.Location;
                        ZedInfos[I].Zed = KFPM;
                        ZedInfos[I].ZedClass = KFPM.Class;
                        ZedInfos[I].bUsingSuperSpeed = KFPM.bUseHiddenSpeed;
                        if((KFPM.Controller != none) && KFPM.Controller.Enemy != none)
                        {
                            ZedInfos[I].Enemy = KFPawn(KFPM.Controller.Enemy);
                            ZedInfos[I].EnemyLocation = KFPM.Controller.Enemy.Location;                            
                        }
                        else
                        {
                            ZedInfos[I].Enemy = none;
                            ZedInfos[I].EnemyLocation = vect(0, 0, 0);
                        }
                        if(((KFPM.Controller != none) && KFAIController(KFPM.Controller) != none) && (WorldInfo.TimeSeconds - KFAIController(KFPM.Controller).LastTeleportTime) < 5)
                        {
                            ZedInfos[I].LastTeleportLocation = KFAIController(KFPM.Controller).LastTeleportLocation;                            
                        }
                        else
                        {
                            ZedInfos[I].LastTeleportLocation = vect(0, 0, 0);
                        }
                        bNetDirty = true;
                        continue;
                    }
                    ++ I;
                    goto J0x6A6;
                }
            }
        }        
    }    
}

function UpdateHumanList()
{
    local KFPawn_Human KFPH;
    local int I;
    local bool bFoundHuman;

    I = 0;
    J0x0B:

    if(I < 6)
    {
        if(((HumanInfos[I].Human == none) && !IsZero(HumanInfos[I].HumanLocation)) || (HumanInfos[I].Human != none) && !HumanInfos[I].Human.IsAliveAndWell())
        {
            HumanInfos[I].HumanLocation = vect(0, 0, 0);
            HumanInfos[I].Human = none;
            HumanInfos[I].HumanClass = none;
            bNetDirty = true;
        }
        ++ I;
        goto J0x0B;
    }
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.IsAliveAndWell())
        {
            bFoundHuman = false;
            I = 0;
            J0x1F5:

            if(I < 6)
            {
                if(HumanInfos[I].Human == KFPH)
                {
                    HumanInfos[I].HumanLocation = KFPH.Location;
                    bFoundHuman = true;
                    bNetDirty = true;
                    goto J0x2A7;
                }
                ++ I;
                goto J0x1F5;
            }
            J0x2A7:

            if(!bFoundHuman)
            {
                I = 0;
                J0x2C1:

                if(I < 6)
                {
                    if(HumanInfos[I].Human == none)
                    {
                        HumanInfos[I].HumanLocation = KFPH.Location;
                        HumanInfos[I].Human = KFPH;
                        HumanInfos[I].HumanClass = KFPH.Class;
                        bNetDirty = true;
                        continue;
                    }
                    ++ I;
                    goto J0x2C1;
                }
            }
        }        
    }    
}

// Export UKFGameReplicationInfo::execUpdateMusicTrack(FFrame&, void* const)
native function UpdateMusicTrack(KFMusicTrackInfo NextMusicTrackInfo, bool bPlayStandardTrack);

simulated function PlayNewMusicTrack(optional bool bGameStateChanged, optional bool bForceAmbient)
{
    local KFMapInfo KFMI;
    local class<KFGameInfo> KFGameClass;
    local KFMusicTrackInfo NextMusicTrackInfo;
    local bool bLoop, bPlayActionTrack;

    if(Class'KFGameEngine'.static.CheckNoMusic())
    {
        return;
    }
    KFGameClass = class<KFGameInfo>(GameClass);
    if(KFGameClass == none)
    {
        return;
    }
    bPlayActionTrack = !bForceAmbient && KFGameClass.static.ShouldPlayActionMusicTrack(self);
    if(bGameStateChanged)
    {
        if(bPlayActionTrack)
        {
            if(KFGameClass.default.ActionMusicDelay > float(0))
            {
                SetTimer(KFGameClass.default.ActionMusicDelay, false, 'PlayNewMusicTrack');
                return;
            }
        }        
    }
    else
    {
        if(CurrentMusicTrackInfo != none)
        {
            bLoop = CurrentMusicTrackInfo.bLoop;
        }
    }
    if(bLoop || !bEndlessMode && IsBossWave())
    {
        NextMusicTrackInfo = CurrentMusicTrackInfo;        
    }
    else
    {
        KFMI = KFMapInfo(WorldInfo.GetMapInfo());
        if(KFMI != none)
        {
            NextMusicTrackInfo = KFMI.GetNextMusicTrackByGameIntensity(bPlayActionTrack, MusicIntensity);            
        }
        else
        {
            NextMusicTrackInfo = Class'KFMapInfo'.static.StaticGetRandomTrack(bPlayActionTrack);
        }
    }
    UpdateMusicTrack(NextMusicTrackInfo, KFGameEngine(Class'Engine'.static.GetEngine()).bMusicVocalsEnabled);
}

simulated function ForceNewMusicTrack(KFMusicTrackInfo ForcedTrackInfo)
{
    if(Role == ROLE_Authority)
    {
        ReplicatedMusicTrackInfo = ForcedTrackInfo;
    }
    UpdateMusicTrack(ForcedTrackInfo, KFGameEngine(Class'Engine'.static.GetEngine()).bMusicVocalsEnabled);
}

function ServerStartVoteKick(PlayerReplicationInfo PRI_Kickee, PlayerReplicationInfo PRI_Kicker)
{
    if(VoteCollector != none)
    {
        VoteCollector.ServerStartVoteKick(PRI_Kickee, PRI_Kicker);
    }
}

reliable server function RecieveVoteKick(PlayerReplicationInfo PRI, bool bKick)
{
    if(VoteCollector != none)
    {
        VoteCollector.RecieveVoteKick(PRI, bKick);
    }
}

reliable server function ReceiveVoteMap(PlayerReplicationInfo PRI, int MapIndex)
{
    if(VoteCollector != none)
    {
        VoteCollector.ReceiveVoteMap(PRI, MapIndex);
    }
}

private final event NotifyGameUnranked()
{
    if(WorldInfo.Game != none)
    {
        WorldInfo.Game.UpdateGameSettings();
    }
}

function int GetCurrentRoundNumber();

simulated function bool AreTeamsOutOfBalanced();

simulated event bool IsStatsSessionValid()
{
    return true;
}

function ChooseNextObjective(int NextWaveNum)
{
    local KFMapInfo KFMI;

    NextObjective = none;
    NextObjectiveIsEndless = false;
    KFMI = KFMapInfo(WorldInfo.GetMapInfo());
    if((KFMI != none) && NextWaveNum != WaveMax)
    {
        if(KFMI.bUsePresetObjectives && NextWaveNum <= (GetPresetObjectiveLength(KFMI)))
        {
            ChooseNextPresetObjective(KFMI, NextWaveNum);
            return;
        }
        if(KFMI.bUseRandomObjectives)
        {
            ChooseNextRandomObjective(KFMI, NextWaveNum);
            return;
        }
    }
}

function bool ChooseNextPresetObjective(KFMapInfo KFMI, int NextWaveNum)
{
    local array<KFInterface_MapObjective> PossibleObjectives;
    local bool bUseEndlessSpawning;

    if(KFMI == none)
    {
        return false;
    }
    switch(GameLength)
    {
        case 0:
            if(KFMI.PresetWaveObjectives.ShortObjectives[NextWaveNum - 1].PossibleObjectives.Length > 0)
            {
                PossibleObjectives = KFMI.PresetWaveObjectives.ShortObjectives[NextWaveNum - 1].PossibleObjectives;
                bUseEndlessSpawning = KFMI.PresetWaveObjectives.ShortObjectives[NextWaveNum - 1].bUseEndlessSpawning;
            }
            break;
        case 1:
            if(KFMI.PresetWaveObjectives.MediumObjectives[NextWaveNum - 1].PossibleObjectives.Length > 0)
            {
                PossibleObjectives = KFMI.PresetWaveObjectives.MediumObjectives[NextWaveNum - 1].PossibleObjectives;
                bUseEndlessSpawning = KFMI.PresetWaveObjectives.MediumObjectives[NextWaveNum - 1].bUseEndlessSpawning;
            }
            break;
        case 2:
            if(KFMI.PresetWaveObjectives.LongObjectives[NextWaveNum - 1].PossibleObjectives.Length > 0)
            {
                PossibleObjectives = KFMI.PresetWaveObjectives.LongObjectives[NextWaveNum - 1].PossibleObjectives;
                bUseEndlessSpawning = KFMI.PresetWaveObjectives.LongObjectives[NextWaveNum - 1].bUseEndlessSpawning;
            }
            break;
        default:
            break;
            break;
    }
    return (SetNextObjective(PossibleObjectives, bUseEndlessSpawning)) != -1;
}

function int GetPresetObjectiveLength(KFMapInfo KFMI)
{
    if(KFMI == none)
    {
        return 0;
    }
    switch(GameLength)
    {
        case 0:
            return 5;
        case 1:
            return 8;
        case 2:
            return 11;
        default:
            return 0;
            break;
    }
}

function bool ChooseNextRandomObjective(KFMapInfo KFMI, int NextWaveNum)
{
    local int Idx;

    Idx = -1;
    if((KFMI.RandomWaveObjectives.Length > 0) && KFMI.RandomObjectiveWavesToDisable.Find(NextWaveNum == -1)
    {
        if(KFMI.CurrentAvailableRandomWaveObjectives.Length == 0)
        {
            KFMI.CurrentAvailableRandomWaveObjectives = KFMI.RandomWaveObjectives;
        }
        Idx = SetNextObjective(KFMI.CurrentAvailableRandomWaveObjectives);
        if(Idx >= 0)
        {
            KFMI.CurrentAvailableRandomWaveObjectives.Remove(Idx, 1;
        }
    }
    return Idx != -1;
}

function int SetNextObjective(array<KFInterface_MapObjective> PossibleObjectives, optional bool bUseEndlessSpawning, optional bool bActivateImmediately)
{
    local int RandID;
    local float DieRoll, PctChanceToActivate;

    bUseEndlessSpawning = false;
    bActivateImmediately = false;
    DieRoll = FRand();
    J0x16:

    if(PossibleObjectives.Length > 0)
    {
        RandID = Rand(PossibleObjectives.Length);
        PctChanceToActivate = PossibleObjectives[RandID].GetActivationPctChance();
        if(bForceNextObjective || (PossibleObjectives[RandID].CanActivateObjective() && PreviousObjective != bool(PossibleObjectives[RandID])) && (PctChanceToActivate >= 1) || DieRoll <= PctChanceToActivate)
        {
            if(bActivateImmediately)
            {
                ActivateObjective(PossibleObjectives[RandID], bUseEndlessSpawning);                
            }
            else
            {
                NextObjective = Actor(bool(PossibleObjectives[RandID]));
                NextObjectiveIsEndless = bUseEndlessSpawning;
                KFInterface_MapObjective(NextObjective).NotifyObjectiveSelected();
            }
            return RandID;
        }
        PossibleObjectives.Remove(RandID, 1;
        goto J0x16;
    }
    return -1;
}

function bool StartNextObjective()
{
    if(NextObjective != none)
    {
        ActivateObjective((NextObjective), NextObjectiveIsEndless);
        return true;
    }
    return false;
}

function ActivateObjective(KFInterface_MapObjective NewObjective, optional bool bUseEndlessSpawning)
{
    local KFGameInfo KFGI;

    bUseEndlessSpawning = false;
    if(NotEqual_InterfaceInterface(NewObjective, (none)))
    {
        CurrentObjective = Actor(bool(NewObjective));
        ClearPreviousObjective();
        ObjectiveInterface = NewObjective;
        if(ObjectiveDelay > 0)
        {
            SetTimer(float(ObjectiveDelay),, 'Timer_ActivateObjective');            
        }
        else
        {
            Timer_ActivateObjective();
        }
        if((Role == ROLE_Authority) && bUseEndlessSpawning)
        {
            KFGI = KFGameInfo(WorldInfo.Game);
            if((KFGI != none) && KFGI.SpawnManager != none)
            {
                KFGI.SpawnManager.bTemporarilyEndless = true;
                bWaveIsEndless = true;
            }
        }
    }
}

function DeactivateObjective()
{
    local KFGameInfo KFGI;
    local KFPawn_Monster KFPM;

    if(CurrentObjective != none)
    {
        PreviousObjective = CurrentObjective;
        PreviousObjectiveResult = ObjectiveInterface.GetDoshReward();
        PreviousObjectiveVoshResult = ObjectiveInterface.GetVoshReward();
        PreviousObjectiveXPResult = ObjectiveInterface.GetXPReward();
        if(GetALocalPlayerController() != none)
        {
            KFPlayerController(GetALocalPlayerController()).SeasonalEventStats_OnMapObjectiveDeactivated(Actor(bool(ObjectiveInterface)));
        }
        ObjectiveInterface.DeactivateObjective();
        CurrentObjective = none;
        ObjectiveInterface = none;
        if(Role == ROLE_Authority)
        {
            KFGI = KFGameInfo(WorldInfo.Game);
            if(((KFGI != none) && KFGI.SpawnManager != none) && KFGI.SpawnManager.bTemporarilyEndless)
            {
                KFGI.SpawnManager.bTemporarilyEndless = false;
                bWaveIsEndless = false;
                KFGI.SpawnManager.ActiveSpawner.PendingSpawns.Length = 0;
                AIRemaining = KFGI.SpawnManager.GetAIAliveCount() + Max(0, KFGI.SpawnManager.WaveTotalAI - KFGI.NumAISpawnsQueued);
                if(float(AIRemaining) <= Class'KFGameInfo'.static.GetNumAlwaysRelevantZeds())
                {
                    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFPM)
                    {
                        KFPM.CheckShouldAlwaysBeRelevant();                        
                    }                    
                }
                KFGI.OnEndlessSpawningObjectiveDeactivated();
            }
        }
    }
    ChooseNextObjective(WaveNum + 1);
}

function ClearPreviousObjective()
{
    PreviousObjective = none;
    PreviousObjectiveResult = -1;
    PreviousObjectiveVoshResult = -1;
    PreviousObjectiveXPResult = -1;
}

function Timer_ActivateObjective()
{
    if(NotEqual_InterfaceInterface(ObjectiveInterface, (none)))
    {
        ObjectiveInterface.ActivateObjective();
    }
}

function float GetMapObjectiveSpawnRateMod()
{
    if(NotEqual_InterfaceInterface(ObjectiveInterface, (none)))
    {
        return ObjectiveInterface.GetSpawnRateMod();
    }
    return 1;
}

simulated event byte GetModifiedGameDifficulty()
{
    return byte(GameDifficulty + GameDifficultyModifier);
}

simulated event SetModifiedGameDifficulty(byte NewDifficultyMod)
{
    GameDifficultyModifier = NewDifficultyMod;
    bNetDirty = true;
}

simulated function bool ShouldSetBossCamOnBossSpawn()
{
    return true;
}

simulated function bool ShouldSetBossCamOnBossDeath()
{
    return true;
}

simulated function int GetFinalWaveNum()
{
    return WaveMax - 1;
}

simulated function bool IsObjectiveMode()
{
    return false;
}

defaultproperties
{
    WaveMax=255
    MaxPerkLevel=4
    BossIndex=255
    TraderItemsPath="GP_Trader_ARCH.DefaultTraderItems"
    bAllowGrenadePurchase=true
    bTradersEnabled=true
    TraderDialogManagerClass=Class'KFTraderDialogManager'
    GameAmmoCostScale=1
    VoteCollectorClass=Class'KFVoteCollector'
    UpdateZedInfoInterval=0.5
    UpdateHumanInfoInterval=0.5
    UpdatePickupInfoInterval=1
    PreviousObjectiveResult=-1
    PreviousObjectiveXPResult=-1
    PreviousObjectiveVoshResult=-1
}