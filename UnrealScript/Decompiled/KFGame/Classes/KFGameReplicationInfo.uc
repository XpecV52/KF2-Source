/*******************************************************************************
 * KFGameReplicationInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameReplicationInfo extends GameReplicationInfo
    native(ReplicationInfo)
    nativereplication
    config(Game)
    hidecategories(Navigation,Movement,Collision);

struct native PreGameServerAdInfo
{
    var string BannerLink;
    var string ServerMOTD;
    var string WebsiteLink;

    structdefaultproperties
    {
        BannerLink=""
        ServerMOTD=""
        WebsiteLink=""
    }
};

struct native SpawnVolumeInfo
{
    var Vector VolumeLocation;
    var float UsedTime;
    var bool bPortalSpawn;
    var byte VolumeAge;

    structdefaultproperties
    {
        VolumeLocation=(X=0,Y=0,Z=0)
        UsedTime=0
        bPortalSpawn=false
        VolumeAge=0
    }
};

struct native ZedInfo
{
    var Vector ZedLocation;
    var KFPawn_Monster Zed;
    var class<KFPawn_Monster> ZedClass;
    var Vector LastTeleportLocation;
    var bool bUsingSuperSpeed;
    var Vector EnemyLocation;
    var KFPawn Enemy;

    structdefaultproperties
    {
        ZedLocation=(X=0,Y=0,Z=0)
        Zed=none
        ZedClass=none
        LastTeleportLocation=(X=0,Y=0,Z=0)
        bUsingSuperSpeed=false
        EnemyLocation=(X=0,Y=0,Z=0)
        Enemy=none
    }
};

struct native HumanInfo
{
    var Vector HumanLocation;
    var KFPawn Human;
    var class<KFPawn> HumanClass;

    structdefaultproperties
    {
        HumanLocation=(X=0,Y=0,Z=0)
        Human=none
        HumanClass=none
    }
};

struct native PickupInfo
{
    var Vector PickupLocation;
    var int PickupType;

    structdefaultproperties
    {
        PickupLocation=(X=0,Y=0,Z=0)
        PickupType=0
    }
};

var repnotify PreGameServerAdInfo ServerAdInfo;
var KFTraderTrigger NextTrader;
var KFTraderTrigger OpenedTrader;
var int DebugingNextTraderIndex;
var KFGFxObject_TraderItems TraderItems;
var KFTraderDialogManager TraderDialogManager;
var class<KFTraderDialogManager> TraderDialogManagerClass;
var class<KFTraderVoiceGroupBase> TraderVoiceGroupClass;
var repnotify bool bTraderIsOpen;
var private const bool bIsUnrankedGame;
var bool bMatchVictory;
var bool bCustom;
var bool bCurrentSMFinishedSpawning;
var bool bDebugSpawnManager;
var bool bTrackingMapEnabled;
var bool bGameConductorGraphingEnabled;
var bool bVersusGame;
var bool bAllowSwitchTeam;
var private bool bLeadershipAvailable;
var repnotify byte MusicTrackRepCount;
var repnotify byte RepKickVotes;
var byte WaveMax;
var repnotify byte WaveNum;
var byte GameLength;
var byte GameDifficulty;
var private const byte GameSharedUnlocks;
var byte CurrentGameConductorStatus;
var byte MusicIntensity;
var int AIRemaining;
var int WaveTotalAICount;
var float CurrentSineMod;
var float CurrentNextSpawnTime;
var float CurrentSineWavFreq;
var float CurrentNextSpawnTimeMod;
var int CurrentAIAliveCount;
var int CurrentMaxMonsters;
var float CurrentTimeTilNextSpawn;
var float CurrentTotalWavesActiveTime;
var KFVoteCollector VoteCollector;
var class<KFVoteCollector> VoteCollectorClass;
var SpawnVolumeInfo SpawnVolumeInfos[16];
var int LastSpawnVolumeIndex;
var SpawnVolumeInfo FailedSpawnInfos[8];
var int LastFailedSpawnIndex;
var ZedInfo ZedInfos[32];
var float UpdateZedInfoInterval;
var HumanInfo HumanInfos[6];
var float UpdateHumanInfoInterval;
var PickupInfo PickupInfos[20];
var float UpdatePickupInfoInterval;
var float PlayerAccuracyTracker[10];
var float PlayerHeadshotAccuracyTracker[10];
var float AggregatePlayerSkillTracker[10];
var float TotalZedLifeSpanAverageTracker[10];
var float CurrentWaveZedLifeSpanAverageTracker[10];
var float RecentZedLifeSpanAverageTracker[10];
var float PlayersHealthStatusTracker[10];
var float PlayersAmmoStatusTracker[10];
var float AggregatePlayersStatusTracker[10];
var float CurrentParZedLifeSpan;
var float OverallRankAndSkillModifierTracker[10];
var float ZedMovementSpeedModifierTracker[10];
var float ZedSpawnRateModifierTracker[10];
var float ZedSpawnRateTracker[10];
var float VersusZedHealthMod;
var float VersusZedDamageMod;
var array<KFDoorActor> DoorList;
var KFObjective CurrentObjective;
var export editinline AkComponent MusicComp;
var KFMusicTrackInfo CurrentMusicTrackInfo;
var repnotify KFMusicTrackInfo ReplicatedMusicTrackInfo;
var private float SteamHeartbeatAccumulator;

replication
{
     if(bNetDirty)
        AIRemaining, CurrentObjective, 
        GameSharedUnlocks, MusicIntensity, 
        MusicTrackRepCount, NextTrader, 
        ReplicatedMusicTrackInfo, WaveNum, 
        WaveTotalAICount, bIsUnrankedGame, 
        bLeadershipAvailable, bTraderIsOpen;

     if(bNetInitial)
        GameDifficulty, GameLength, 
        WaveMax, bCustom, 
        bVersusGame;

     if(bNetInitial && Role == ROLE_Authority)
        ServerAdInfo;

     if(bDebugSpawnManager && bNetDirty)
        CurrentAIAliveCount, CurrentMaxMonsters, 
        CurrentNextSpawnTime, CurrentNextSpawnTimeMod, 
        CurrentSineMod, CurrentSineWavFreq, 
        CurrentTimeTilNextSpawn, CurrentTotalWavesActiveTime, 
        bCurrentSMFinishedSpawning;

     if(bNetDirty)
        bTrackingMapEnabled;

     if(bTrackingMapEnabled && bNetDirty)
        FailedSpawnInfos, HumanInfos, 
        PickupInfos, SpawnVolumeInfos, 
        ZedInfos;

     if((VoteCollector != none) && VoteCollector.bIsVoteInProgress)
        RepKickVotes;

     if(bNetDirty)
        bGameConductorGraphingEnabled;

     if(bGameConductorGraphingEnabled && bNetDirty)
        AggregatePlayerSkillTracker, AggregatePlayersStatusTracker, 
        CurrentGameConductorStatus, CurrentParZedLifeSpan, 
        CurrentWaveZedLifeSpanAverageTracker, OverallRankAndSkillModifierTracker, 
        PlayerAccuracyTracker, PlayerHeadshotAccuracyTracker, 
        PlayersAmmoStatusTracker, PlayersHealthStatusTracker, 
        RecentZedLifeSpanAverageTracker, TotalZedLifeSpanAverageTracker, 
        ZedMovementSpeedModifierTracker, ZedSpawnRateModifierTracker, 
        ZedSpawnRateTracker;

     if((bGameConductorGraphingEnabled && bNetDirty) && bVersusGame)
        VersusZedDamageMod, VersusZedHealthMod;
}

// Export UKFGameReplicationInfo::execSendSteamHeartbeat(FFrame&, void* const)
native function SendSteamHeartbeat();

// Export UKFGameReplicationInfo::execSendSteamRequestItemDrop(FFrame&, void* const)
native function SendSteamRequestItemDrop();

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'bTraderIsOpen')
    {
        if(bTraderIsOpen)
        {
            NotifyWaveEnded();
            OpenTrader();            
        }
        else
        {
            CloseTrader();
        }        
    }
    else
    {
        if(VarName == 'ReplicatedMusicTrackInfo')
        {
            ForceNewMusicTrack(ReplicatedMusicTrackInfo);            
        }
        else
        {
            if(VarName == 'MusicTrackRepCount')
            {
                if(!IsFinalWave())
                {
                    PlayNewMusicTrack(true);
                }                
            }
            else
            {
                if(VarName == 'bIsUnrankedGame')
                {
                    if(bIsUnrankedGame)
                    {
                        WarnInternal(string(GetFuncName()) @ "Game is UNRANKED!");
                    }                    
                }
                else
                {
                    if(VarName == 'RepKickVotes')
                    {
                        VoteCollector.UnPackVotes();                        
                    }
                    else
                    {
                        if(VarName == 'ServerAdInfo')
                        {
                            ShowPreGameServerWelcomeScreen();                            
                        }
                        else
                        {
                            if(VarName == 'WaveNum')
                            {
                                UpdateHUDWaveCount();                                
                            }
                            else
                            {
                                super.ReplicatedEvent(VarName);
                            }
                        }
                    }
                }
            }
        }
    }
}

simulated event PostBeginPlay()
{
    local KFDoorActor door;

    VoteCollector = new (self) VoteCollectorClass;
    super.PostBeginPlay();
    foreach DynamicActors(Class'KFDoorActor', door)
    {
        DoorList.AddItem(door;        
    }    
    if((WorldInfo.NetMode != NM_DedicatedServer) && TraderDialogManagerClass != none)
    {
        TraderDialogManager = Spawn(TraderDialogManagerClass);
    }
    SetTimer(1, true);
}

simulated function ReceivedGameClass()
{
    local class<KFGameInfo> KFGameClass;

    KFGameClass = class<KFGameInfo>(GameClass);
    if(KFGameClass != none)
    {
        KFGameClass.static.PreloadContentClasses(self);
        if(TraderDialogManager != none)
        {
            TraderDialogManager.TraderVoiceGroupClass = KFGameClass.default.TraderVoiceGroupClass;
        }
        if(KFGameClass.static.ShouldPlayMusicAtStart() && MusicComp == none)
        {
            PlayNewMusicTrack(false, true);
        }
    }
    DebugingNextTraderIndex = -1;
    super.ReceivedGameClass();
}

simulated function UpdateHUDWaveCount()
{
    local KFPlayerController KFPC;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        KFPC = KFPlayerController(GetALocalPlayerController());
        if((KFPC != none) && KFPC.MyGFxHUD != none)
        {
            KFPC.MyGFxHUD.UpdateWaveCount();
        }
    }
}

simulated function NotifyWaveEnded()
{
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(WorldInfo.MyGoreEffectManager != none)
        {
            KFGoreManager(WorldInfo.MyGoreEffectManager).ResetPersistantGore(false);
        }
    }
    if((CurrentObjective != none) && !CurrentObjective.bIsCoopObjective)
    {
        CurrentObjective.FailObjective(3);
    }
}

reliable client simulated exec function ShowPreGameServerWelcomeScreen()
{
    local KFPlayerController KFPC;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        return;
    }
    KFPC = KFPlayerController(GetALocalPlayerController());
    if((KFPC != none) && KFPC.MyGFxManager != none)
    {
        KFPC.MyGFxManager.ShowWelcomeScreen();
    }
}

simulated function GetKFPRIArray(out array<KFPlayerReplicationInfo> KFPRIArray, optional bool bGetSpectators)
{
    local int I, Num;

    KFPRIArray.Remove(0, KFPRIArray.Length;
    I = 0;
    J0x22:

    if(I < PRIArray.Length)
    {
        if(((PRIArray[I] != none) && KFPlayerReplicationInfo(PRIArray[I]) != none) && bGetSpectators || !PRIArray[I].bOnlySpectator)
        {
            KFPRIArray[++ Num] = KFPlayerReplicationInfo(PRIArray[I]);
        }
        ++ I;
        goto J0x22;
    }
}

simulated function OpenTrader(optional int Time)
{
    local KFPlayerController KFPC;

    if(OpenedTrader != none)
    {
        return;
    }
    if((Time > 0) && Role == ROLE_Authority)
    {
        bStopCountDown = false;
        RemainingTime = Time;
        RemainingMinute = Time;
    }
    OpenedTrader = NextTrader;
    if(OpenedTrader != none)
    {
        OpenedTrader.OpenTrader();
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayOpenTraderDialog(WaveNum, WaveMax, GetALocalPlayerController());
        }
        KFPC = KFPlayerController(GetALocalPlayerController());
        if(KFPC != none)
        {
            if(KFPC.MyGFxManager != none)
            {
                KFPC.MyGFxManager.OnTraderTimeStart();
            }
            if(KFPC.MyGFxHUD != none)
            {
                KFPC.MyGFxHUD.UpdateWaveCount();
            }
        }
    }
}

simulated function OpenTraderNext(optional int Time)
{
    local KFGameInfo KFGameInfo;

    KFGameInfo = KFGameInfo(WorldInfo.Game);
    if(KFGameInfo == none)
    {
        return;
    }
    if((Time > 0) && Role == ROLE_Authority)
    {
        bStopCountDown = false;
        RemainingTime = Time;
        RemainingMinute = Time;
    }
    if(KFGameInfo.TraderList.Length > 0)
    {
        if((DebugingNextTraderIndex == -1) && OpenedTrader != none)
        {
            KFGameInfo.TraderList.AddItem(OpenedTrader;
        }
        if((DebugingNextTraderIndex + 1) >= KFGameInfo.TraderList.Length)
        {
            DebugingNextTraderIndex = -1;
        }
        DebugingNextTraderIndex = DebugingNextTraderIndex + 1;
        NextTrader = KFGameInfo.TraderList[DebugingNextTraderIndex];
    }
    OpenedTrader = NextTrader;
    OpenedTrader.OpenTrader();
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayOpenTraderDialog(WaveNum, WaveMax, GetALocalPlayerController());
    }
}

simulated function CloseTrader()
{
    local KFPlayerController KFPC;
    local PlayerController LocalPC;

    LocalPC = GetALocalPlayerController();
    if(OpenedTrader != none)
    {
        bStopCountDown = true;
        OpenedTrader.CloseTrader();
        OpenedTrader = none;
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayCloseTraderDialog(LocalPC);
        }
    }
    KFPC = KFPlayerController(LocalPC);
    if(KFPC != none)
    {
        KFPC.SetHaveUpdatePerk(false);
    }
}

simulated function int GetTraderTimeRemaining()
{
    return Max(0, RemainingTime);
}

simulated function OnOpenAfterActionReport(optional float Time)
{
    if((Time > float(0)) && Role == ROLE_Authority)
    {
        bStopCountDown = false;
        RemainingTime = int(Time);
        RemainingMinute = int(Time);
    }
}

simulated function ProcessChanceDrop()
{
    SendSteamHeartbeat();
    SendSteamRequestItemDrop();
}

simulated function int GetNextMapTimeRemaining()
{
    return Max(0, RemainingTime);
}

function SetWaveActive(bool bWaveActive, optional byte NewMusicIntensity)
{
    CheckGlobalPerkSkills(bWaveActive);
    MusicIntensity = NewMusicIntensity;
    bTraderIsOpen = !bWaveActive && bMatchHasBegun;
    bForceNetUpdate = true;
    ++ MusicTrackRepCount;
    if(!IsFinalWave() && WorldInfo.NetMode != NM_DedicatedServer)
    {
        PlayNewMusicTrack(true);
    }
}

simulated function bool IsFinalWave()
{
    return WaveNum == WaveMax;
}

simulated event Timer()
{
    local KFGameInfo MyKFGameInfo;

    if((WorldInfo.Game == none) || WorldInfo.Game.MatchIsInProgress())
    {
        ++ ElapsedTime;
    }
    if((Role == ROLE_Authority) && bDebugSpawnManager)
    {
        MyKFGameInfo = KFGameInfo(WorldInfo.Game);
        if(MyKFGameInfo != none)
        {
            CurrentAIAliveCount = KFGameInfo(WorldInfo.Game).AIAliveCount;
            if(MyKFGameInfo.SpawnManager != none)
            {
                bCurrentSMFinishedSpawning = MyKFGameInfo.SpawnManager.IsFinishedSpawning();
                CurrentMaxMonsters = MyKFGameInfo.SpawnManager.GetMaxMonsters();
                CurrentTimeTilNextSpawn = MyKFGameInfo.SpawnManager.TimeUntilNextSpawn;
                CurrentTotalWavesActiveTime = MyKFGameInfo.SpawnManager.TotalWavesActiveTime;
                CurrentSineMod = MyKFGameInfo.SpawnManager.GetSineMod();                
            }
            else
            {
                bCurrentSMFinishedSpawning = true;
                CurrentMaxMonsters = 0;
                CurrentTimeTilNextSpawn = 0;
                CurrentTotalWavesActiveTime = 0;
            }
        }
    }
    if(WorldInfo.NetMode == NM_Client)
    {
        if(RemainingMinute != 0)
        {
            RemainingTime = RemainingMinute;
            RemainingMinute = 0;
        }
    }
    if((RemainingTime > 0) && !bStopCountDown)
    {
        -- RemainingTime;
        if(WorldInfo.NetMode != NM_Client)
        {
            if((RemainingTime % 5) == 0)
            {
                RemainingMinute = RemainingTime;
            }
        }
    }
    if(((WorldInfo.NetMode != NM_DedicatedServer) && OpenedTrader != none) && RemainingTime > 0)
    {
        if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
        {
            KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.PlayTraderTickDialog(RemainingTime, GetALocalPlayerController(), WorldInfo);
        }
    }
    if(bPendingMusicTrackChange)
    {
        bPendingMusicTrackChange = false;
        PlayNewMusicTrack();        
    }
    else
    {
        if((MusicComp != none) && !MusicComp.IsPlaying())
        {
            PlayNewMusicTrack();
        }
    }
}

function CheckGlobalPerkSkills(bool bWaveActive)
{
    bLeadershipAvailable = ((bWaveActive) ? CheckForLeaderShipSkill() : false);
}

function bool CheckForLeaderShipSkill()
{
    local KFPawn_Human KFPH;
    local KFPerk_Commando KFPeC;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.IsAliveAndWell())
        {
            KFPeC = KFPerk_Commando(KFPH.GetPerk());
            if(KFPeC != none)
            {
                if(KFPeC.IsLeadershipActive())
                {                    
                    return true;
                }
            }
        }        
    }    
    return false;
}

simulated function bool IsLeadershipActive()
{
    return bLeadershipAvailable;
}

simulated function DisplayDebug(HUD HUD, out float YL, out float YPos)
{
    local int TotalClots, NumSlashers, NumUnders, NumAlphas;
    local KFPawn_Monster KFPM;
    local Canvas Canvas;

    Canvas = HUD.Canvas;
    super(Actor).DisplayDebug(HUD, YL, YPos);
    if(HUD.ShouldDisplayDebug('GameState'))
    {
        Canvas.SetPos(4, YPos);
        Canvas.DrawText("---------- KFGameInfo GameState Info ----------");
        YPos += YL;
        foreach DynamicActors(Class'KFPawn_Monster', KFPM)
        {
            if(KFPM.IsAliveAndWell())
            {
                if(KFPM.IsA('KFPawn_ZedClot_Slasher'))
                {
                    ++ TotalClots;
                    ++ NumSlashers;
                    continue;
                }
                if(KFPM.IsA('KFPawn_ZedClot_Alpha'))
                {
                    ++ TotalClots;
                    ++ NumAlphas;
                    continue;
                }
                if(KFPM.IsA('KFPawn_ZedClot_Cyst'))
                {
                    ++ TotalClots;
                    ++ NumUnders;
                }
            }            
        }        
        if(TotalClots > 0)
        {
            Canvas.DrawText((((((("TotalClots:" @ string(TotalClots)) @ ", Alpha%:") @ string((float(NumAlphas) / float(TotalClots)) * float(100))) @ ", Slasher%:") @ string((float(NumSlashers) / float(TotalClots)) * float(100))) @ ", UnderDev%:") @ string((float(NumUnders) / float(TotalClots)) * float(100)), false);
            YPos += YL;
            Canvas.SetPos(4, YPos);            
        }
        else
        {
            Canvas.DrawText("TotalClots: 0", false);
            YPos += YL;
            Canvas.SetPos(4, YPos);
        }
        Canvas.DrawText((("CurrentSineMod:" @ string(CurrentSineMod)) @ ", CurrentNextSpawnTime:") @ string(CurrentNextSpawnTime), false);
        YPos += YL;
        Canvas.SetPos(4, YPos);
    }
    if(HUD.ShouldDisplayDebug('GameSpeed'))
    {
        Canvas.SetPos(4, YPos);
        Canvas.DrawText("---------- GameSpeed Info ----------");
        YPos += YL;
        Canvas.DrawText("GameSpeed:" @ string(WorldInfo.TimeDilation));
        YPos += YL;
        Canvas.SetPos(4, YPos);
    }
}

simulated function int GetNumPlayersAlive()
{
    local int I, NumPlayersAlive;
    local array<KFPlayerReplicationInfo> PRIs;

    GetKFPRIArray(PRIs);
    I = 0;
    J0x1F:

    if(I < PRIs.Length)
    {
        if(PRIs[I].PlayerHealth > 0)
        {
            ++ NumPlayersAlive;
        }
        ++ I;
        goto J0x1F;
    }
    return NumPlayersAlive;
}

simulated function bool AnyPlayersAlive()
{
    return (GetNumPlayersAlive()) > 0;
}

function AddRecentSpawnVolume(Vector VolumeLocation, optional bool bPortalSpawn)
{
    ++ LastSpawnVolumeIndex;
    if(LastSpawnVolumeIndex > (16 - 1))
    {
        LastSpawnVolumeIndex = 0;
    }
    SpawnVolumeInfos[LastSpawnVolumeIndex].VolumeLocation = VolumeLocation;
    SpawnVolumeInfos[LastSpawnVolumeIndex].UsedTime = WorldInfo.TimeSeconds;
    SpawnVolumeInfos[LastSpawnVolumeIndex].bPortalSpawn = bPortalSpawn;
    SpawnVolumeInfos[LastSpawnVolumeIndex].VolumeAge = 255;
    bNetDirty = true;
}

function AddFailedSpawn(Vector SpawnLocation, optional bool bPortalSpawn)
{
    ++ LastFailedSpawnIndex;
    if(LastFailedSpawnIndex > (8 - 1))
    {
        LastFailedSpawnIndex = 0;
    }
    FailedSpawnInfos[LastFailedSpawnIndex].VolumeLocation = SpawnLocation;
    FailedSpawnInfos[LastFailedSpawnIndex].UsedTime = WorldInfo.TimeSeconds;
    FailedSpawnInfos[LastFailedSpawnIndex].bPortalSpawn = bPortalSpawn;
    bNetDirty = true;
}

event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
}

function UpdatePickupList()
{
    local int I, J;
    local KFGameInfo KFGameInfo;

    KFGameInfo = KFGameInfo(WorldInfo.Game);
    if(KFGameInfo == none)
    {
        return;
    }
    I = 0;
    J = 0;
    J0x58:

    if(J < KFGameInfo.AllPickupFactories.Length)
    {
        if(I < 20)
        {
            if((KFGameInfo.AllPickupFactories[J] != none) && !KFGameInfo.AllPickupFactories[J].bPickupHidden)
            {
                PickupInfos[I].PickupLocation = KFGameInfo.AllPickupFactories[J].Location;
                if(KFGameInfo.AllPickupFactories[J].CurrentPickupIsAmmo())
                {
                    PickupInfos[I].PickupType = 0;                    
                }
                else
                {
                    if(KFGameInfo.AllPickupFactories[J].CurrentPickupIsWeapon())
                    {
                        PickupInfos[I].PickupType = 1;                        
                    }
                    else
                    {
                        if(KFGameInfo.AllPickupFactories[J].CurrentPickupIsArmor())
                        {
                            PickupInfos[I].PickupType = 2;                            
                        }
                        else
                        {
                            PickupInfos[I].PickupType = -1;
                        }
                    }
                }
                bNetDirty = true;
                ++ I;
            }
        }
        ++ J;
        goto J0x58;
    }
    I = I;
    J0x315:

    if(I < 20)
    {
        PickupInfos[I].PickupLocation = vect(0, 0, 0);
        PickupInfos[I].PickupType = -1;
        bNetDirty = true;
        ++ I;
        goto J0x315;
    }
}

function UpdateSpawnVolumes()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < 16)
    {
        if(!IsZero(SpawnVolumeInfos[I].VolumeLocation))
        {
            if(SpawnVolumeInfos[I].bPortalSpawn && (WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime) > 5)
            {
                SpawnVolumeInfos[I].VolumeLocation = vect(0, 0, 0);
                bNetDirty = true;                
            }
            else
            {
                if((WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime) > 30)
                {
                    SpawnVolumeInfos[I].VolumeLocation = vect(0, 0, 0);
                    bNetDirty = true;                    
                }
                else
                {
                    if(SpawnVolumeInfos[I].bPortalSpawn)
                    {
                        SpawnVolumeInfos[I].VolumeAge = byte(((float(5) - (WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime)) / float(5)) * float(255));                        
                    }
                    else
                    {
                        SpawnVolumeInfos[I].VolumeAge = byte(((float(30) - (WorldInfo.TimeSeconds - SpawnVolumeInfos[I].UsedTime)) / float(30)) * float(255));
                    }
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
    I = 0;
    J0x2E3:

    if(I < 8)
    {
        if(!IsZero(FailedSpawnInfos[I].VolumeLocation))
        {
            if((WorldInfo.TimeSeconds - FailedSpawnInfos[I].UsedTime) > 10)
            {
                FailedSpawnInfos[I].VolumeLocation = vect(0, 0, 0);
                bNetDirty = true;
            }
        }
        ++ I;
        goto J0x2E3;
    }
}

function UpdateZedList()
{
    local KFPawn_Monster KFPM;
    local int I;
    local bool bFoundZed;

    I = 0;
    J0x0B:

    if(I < 32)
    {
        if(((ZedInfos[I].Zed == none) && !IsZero(ZedInfos[I].ZedLocation)) || (ZedInfos[I].Zed != none) && !ZedInfos[I].Zed.IsAliveAndWell())
        {
            ZedInfos[I].ZedLocation = vect(0, 0, 0);
            ZedInfos[I].Zed = none;
            ZedInfos[I].ZedClass = none;
            ZedInfos[I].bUsingSuperSpeed = false;
            ZedInfos[I].Enemy = none;
            ZedInfos[I].EnemyLocation = vect(0, 0, 0);
            ZedInfos[I].LastTeleportLocation = vect(0, 0, 0);
            bNetDirty = true;
        }
        ++ I;
        goto J0x0B;
    }
    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFPM)
    {
        if(KFPM.IsAliveAndWell())
        {
            bFoundZed = false;
            I = 0;
            J0x2AE:

            if(I < 32)
            {
                if(ZedInfos[I].Zed == KFPM)
                {
                    ZedInfos[I].ZedLocation = KFPM.Location;
                    ZedInfos[I].bUsingSuperSpeed = KFPM.bUseHiddenSpeed;
                    if(((KFPM.Controller != none) && KFAIController(KFPM.Controller) != none) && (WorldInfo.TimeSeconds - KFAIController(KFPM.Controller).LastTeleportTime) < 5)
                    {
                        ZedInfos[I].LastTeleportLocation = KFAIController(KFPM.Controller).LastTeleportLocation;                        
                    }
                    else
                    {
                        ZedInfos[I].LastTeleportLocation = vect(0, 0, 0);
                    }
                    if((KFPM.Controller != none) && KFPM.Controller.Enemy != none)
                    {
                        ZedInfos[I].Enemy = KFPawn(KFPM.Controller.Enemy);
                        ZedInfos[I].EnemyLocation = KFPM.Controller.Enemy.Location;                        
                    }
                    else
                    {
                        ZedInfos[I].Enemy = none;
                        ZedInfos[I].EnemyLocation = vect(0, 0, 0);
                    }
                    bFoundZed = true;
                    bNetDirty = true;
                    goto J0x68C;
                }
                ++ I;
                goto J0x2AE;
            }
            J0x68C:

            if(!bFoundZed)
            {
                I = 0;
                J0x6A6:

                if(I < 32)
                {
                    if(ZedInfos[I].Zed == none)
                    {
                        ZedInfos[I].ZedLocation = KFPM.Location;
                        ZedInfos[I].Zed = KFPM;
                        ZedInfos[I].ZedClass = KFPM.Class;
                        ZedInfos[I].bUsingSuperSpeed = KFPM.bUseHiddenSpeed;
                        if((KFPM.Controller != none) && KFPM.Controller.Enemy != none)
                        {
                            ZedInfos[I].Enemy = KFPawn(KFPM.Controller.Enemy);
                            ZedInfos[I].EnemyLocation = KFPM.Controller.Enemy.Location;                            
                        }
                        else
                        {
                            ZedInfos[I].Enemy = none;
                            ZedInfos[I].EnemyLocation = vect(0, 0, 0);
                        }
                        if(((KFPM.Controller != none) && KFAIController(KFPM.Controller) != none) && (WorldInfo.TimeSeconds - KFAIController(KFPM.Controller).LastTeleportTime) < 5)
                        {
                            ZedInfos[I].LastTeleportLocation = KFAIController(KFPM.Controller).LastTeleportLocation;                            
                        }
                        else
                        {
                            ZedInfos[I].LastTeleportLocation = vect(0, 0, 0);
                        }
                        bNetDirty = true;
                        continue;
                    }
                    ++ I;
                    goto J0x6A6;
                }
            }
        }        
    }    
}

function UpdateHumanList()
{
    local KFPawn_Human KFPH;
    local int I;
    local bool bFoundHuman;

    I = 0;
    J0x0B:

    if(I < 6)
    {
        if(((HumanInfos[I].Human == none) && !IsZero(HumanInfos[I].HumanLocation)) || (HumanInfos[I].Human != none) && !HumanInfos[I].Human.IsAliveAndWell())
        {
            HumanInfos[I].HumanLocation = vect(0, 0, 0);
            HumanInfos[I].Human = none;
            HumanInfos[I].HumanClass = none;
            bNetDirty = true;
        }
        ++ I;
        goto J0x0B;
    }
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.IsAliveAndWell())
        {
            bFoundHuman = false;
            I = 0;
            J0x1F5:

            if(I < 6)
            {
                if(HumanInfos[I].Human == KFPH)
                {
                    HumanInfos[I].HumanLocation = KFPH.Location;
                    bFoundHuman = true;
                    bNetDirty = true;
                    goto J0x2A7;
                }
                ++ I;
                goto J0x1F5;
            }
            J0x2A7:

            if(!bFoundHuman)
            {
                I = 0;
                J0x2C1:

                if(I < 6)
                {
                    if(HumanInfos[I].Human == none)
                    {
                        HumanInfos[I].HumanLocation = KFPH.Location;
                        HumanInfos[I].Human = KFPH;
                        HumanInfos[I].HumanClass = KFPH.Class;
                        bNetDirty = true;
                        continue;
                    }
                    ++ I;
                    goto J0x2C1;
                }
            }
        }        
    }    
}

// Export UKFGameReplicationInfo::execUpdateMusicTrack(FFrame&, void* const)
native function UpdateMusicTrack(KFMusicTrackInfo NextMusicTrackInfo, bool bPlayStandardTrack);

simulated function PlayNewMusicTrack(optional bool bGameStateChanged, optional bool bForceAmbient)
{
    local KFMapInfo KFMI;
    local class<KFGameInfo> KFGameClass;
    local KFMusicTrackInfo NextMusicTrackInfo;
    local bool bLoop, bPlayActionTrack;

    if(Class'KFGameEngine'.static.CheckNoMusic())
    {
        return;
    }
    KFGameClass = class<KFGameInfo>(GameClass);
    if(KFGameClass == none)
    {
        return;
    }
    bPlayActionTrack = !bForceAmbient && KFGameClass.static.ShouldPlayActionMusicTrack(self);
    if(bGameStateChanged)
    {
        if(bPlayActionTrack)
        {
            if(KFGameClass.default.ActionMusicDelay > float(0))
            {
                SetTimer(KFGameClass.default.ActionMusicDelay, false, 'PlayNewMusicTrack');
                return;
            }
        }        
    }
    else
    {
        if(CurrentMusicTrackInfo != none)
        {
            bLoop = CurrentMusicTrackInfo.bLoop;
        }
    }
    if(bLoop || IsFinalWave())
    {
        NextMusicTrackInfo = CurrentMusicTrackInfo;        
    }
    else
    {
        KFMI = KFMapInfo(WorldInfo.GetMapInfo());
        if(KFMI != none)
        {
            NextMusicTrackInfo = KFMI.GetNextMusicTrackByGameIntensity(bPlayActionTrack, MusicIntensity);            
        }
        else
        {
            NextMusicTrackInfo = Class'KFMapInfo'.static.StaticGetRandomTrack(bPlayActionTrack);
        }
    }
    UpdateMusicTrack(NextMusicTrackInfo, Class'KFGameEngine'.default.bMusicVocalsEnabled);
}

simulated function ForceNewMusicTrack(KFMusicTrackInfo ForcedTrackInfo)
{
    if(Role == ROLE_Authority)
    {
        ReplicatedMusicTrackInfo = ForcedTrackInfo;
    }
    UpdateMusicTrack(ForcedTrackInfo, Class'KFGameEngine'.default.bMusicVocalsEnabled);
}

function ServerStartVoteKick(PlayerReplicationInfo PRI_Kickee, PlayerReplicationInfo PRI_Kicker)
{
    if(VoteCollector != none)
    {
        VoteCollector.ServerStartVoteKick(PRI_Kickee, PRI_Kicker);
    }
}

reliable server function RecieveVoteKick(PlayerReplicationInfo PRI, bool bKick)
{
    if(VoteCollector != none)
    {
        VoteCollector.RecieveVoteKick(PRI, bKick);
    }
}

reliable server function ReceiveVoteMap(PlayerReplicationInfo PRI, int MapIndex)
{
    if(VoteCollector != none)
    {
        VoteCollector.ReceiveVoteMap(PRI, MapIndex);
    }
}

private final event NotifyGameUnranked()
{
    if(WorldInfo.Game != none)
    {
        WorldInfo.Game.UpdateGameSettings();
    }
}

simulated function bool AreTeamsOutOfBalanced();

defaultproperties
{
    TraderItems=KFGFxObject_TraderItems'GP_Trader_ARCH.DefaultTraderItems'
    TraderDialogManagerClass=Class'KFTraderDialogManager'
    WaveMax=255
    VoteCollectorClass=Class'KFVoteCollector'
    UpdateZedInfoInterval=0.5
    UpdateHumanInfoInterval=0.5
    UpdatePickupInfoInterval=1
}