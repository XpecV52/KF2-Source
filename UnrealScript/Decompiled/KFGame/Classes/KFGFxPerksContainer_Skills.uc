/*******************************************************************************
 * KFGFxPerksContainer_Skills generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxPerksContainer_Skills extends KFGFxPerksContainer within GFxMoviePlayer;

var const int MAX_SLOTS;
var const localized string ConfigureSkillsString;
var const localized string BackButtonString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super(KFGFxObject_Container).Initialize(NewParentMenu);
    LocalizeContainer();
}

function LocalizeContainer()
{
    GetObject("confirmButton").SetString("label", BackButtonString);
    GetObject("titleTextfield").SetString("text", ConfigureSkillsString);
}

function UpdateSkills(class<KFPerk> PerkClass, const out byte SelectedSkills[5])
{
    local KFPlayerController KFPC;
    local bool bShouldUnlock;
    local byte I, J, UnlockLevel;
    local GFxObject DataProvider, TempObj;
    local int PerkLevel;

    KFPC = KFPlayerController(Outer.GetPC());
    DataProvider = Outer.CreateArray();
    I = 0;
    J0x67:

    if(I < 5)
    {
        TempObj = Outer.CreateObject("Object");
        TempObj.SetString("label", PerkClass.default.SkillCatagories[I]);
        UnlockLevel = byte(5 + (5 * I));
        TempObj.SetString("unlockLevel", LevelString @ string(UnlockLevel));
        PerkLevel = KFPC.GetPerkLevelFromPerkList(PerkClass);
        bShouldUnlock = UnlockLevel <= PerkLevel;
        TempObj.SetBool("bUnlocked", bShouldUnlock);
        TempObj.SetInt("selectedSkill", SelectedSkills[I]);
        J = 0;
        J0x23D:

        if(J < MAX_SLOTS)
        {
            TempObj.SetObject("skill" $ string(J), GetSkillObject(I, J, bShouldUnlock, PerkClass));
            ++ J;
            goto J0x23D;
        }
        DataProvider.SetElementObject(I, TempObj);
        ++ I;
        goto J0x67;
    }
    SetObject("skillList", DataProvider);
}

function UpdateTierUnlockState(class<KFPerk> PerkClass)
{
    local byte bTierUnlocked;
    local int PerkLevel;
    local KFPlayerController KFPC;

    if(PerkClass == none)
    {
        return;
    }
    KFPC = KFPlayerController(Outer.GetPC());
    PerkLevel = KFPC.GetPerkLevelFromPerkList(PerkClass);
    Class'KFPerk'.static.LoadTierUnlockFromConfig(PerkClass, bTierUnlocked, PerkLevel);
    if(bool(bTierUnlocked))
    {
        Class'KFPerk'.static.SaveTierUnlockToConfig(PerkClass, 0, PerkLevel);
    }
}

function GFxObject GetSkillObject(byte TierIndex, byte SkillIndex, bool bShouldUnlock, class<KFPerk> PerkClass)
{
    local GFxObject SkillObject;
    local string SkillName, SkillDescription, IconPath;
    local int PerkSkillIndex;
    local array<PerkSkill> PerkSkillArr;

    PerkSkillArr = PerkClass.default.PerkSkills;
    PerkSkillIndex = (TierIndex * 2) + SkillIndex;
    if(PerkSkillIndex < PerkClass.default.PerkSkills.Length)
    {
        SkillObject = Outer.CreateObject("Object");
        SkillName = Localize(string(PerkClass.Name), PerkSkillArr[PerkSkillIndex].Name, "KFGame");
        SkillObject.SetString("label", SkillName);
        SkillDescription = Localize(string(PerkClass.Name), PerkSkillArr[PerkSkillIndex].Name $ "Description", "KFGame");
        SkillObject.SetString("description", SkillDescription);
        if(bShouldUnlock)
        {
            IconPath = PerkSkillArr[PerkSkillIndex].IconPath;            
        }
        else
        {
            IconPath = KFGFxMenu_Perks(ParentMenu).LockIconPath;
        }
    }
    if(IconPath == "")
    {
        IconPath = PerkClass.static.GetPerkIconPath();
    }
    SkillObject.SetString("iconSource", "img://" $ IconPath);
    return SkillObject;
}

defaultproperties
{
    MAX_SLOTS=2
    ConfigureSkillsString="CONFIGURE SKILLS"
    BackButtonString="<< BACK"
}