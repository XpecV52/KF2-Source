/*******************************************************************************
 * KFGFxHUD_WaveInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_WaveInfo extends GFxObject within GFxMoviePlayer;

const ENDLESS_WAVE_ID = -2;

var KFGameReplicationInfo KFGRI;
var int LastWaveMax;
var int LastZEDCount;
var int LastWave;
var int LastTraderTimeRemaining;
var KFPlayerController KFPC;
var const localized string WaveString;
var const localized string BossWaveString;
var const localized string FinalWaveString;
var KFGFxHUD_ObjectiveConatiner ObjectiveContainer;

function InitializeHUD()
{
    SetString("waveText", WaveString);
    SetString("bossText", BossWaveString);
    SetString("finalText", FinalWaveString);
    UpdateWaveCount();
    KFPC = KFPlayerController(Outer.GetPC());
}

function TickHud(float DeltaTime)
{
    if(KFGRI == none)
    {
        KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);        
    }
    else
    {
        if(KFGRI.bWaveIsActive && !KFGRI.bWaveStarted)
        {
            SetString("waitingForWaveStart", "-----");            
        }
        else
        {
            if(!KFGRI.bWaveIsActive)
            {
                UpdateTraderTimeRemaining();                
            }
            else
            {
                UpdateZEDCount();
            }
        }
    }
    if(ObjectiveContainer != none)
    {
        ObjectiveContainer.TickHud(DeltaTime);
    }
}

function UpdateWaveCount()
{
    local int CurrentWaveMax, CurrentWave;

    if(KFGRI == none)
    {
        KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    }
    if(KFGRI == none)
    {
        return;
    }
    if(KFGRI.bIsWeeklyMode && KFGRI.CurrentWeeklyIndex == 16)
    {
        CurrentWave = KFGRI.GunGameWavesCurrent;
        CurrentWaveMax = KFGRI.GetFinalWaveNum();
        if(KFGRI.bWaveGunGameIsFinal)
        {
            CurrentWave = CurrentWaveMax + 1;            
        }
        else
        {
            CurrentWaveMax = -1;
        }
        SetInt("maxGunGameWave", CurrentWaveMax);
        SetInt("currentGunGameWave", CurrentWave);
        LastWaveMax = CurrentWaveMax;
        LastWave = CurrentWave;        
    }
    else
    {
        CurrentWave = KFGRI.WaveNum;
        CurrentWaveMax = KFGRI.GetFinalWaveNum();
        if(LastWaveMax != CurrentWaveMax)
        {
            SetInt("maxWaves", ((KFGRI.default.bEndlessMode) ? -1 : CurrentWaveMax));
            LastWaveMax = CurrentWaveMax;
        }
        if(CurrentWave != LastWave)
        {
            SetInt("currentWave", CurrentWave);
            LastWave = CurrentWave;
        }
    }
}

function UpdateZEDCount()
{
    local int CurrentZEDCount;

    if(KFGRI == none)
    {
        return;
    }
    if(KFGRI.IsBossWave())
    {
        SetInt("remainingZEDs", -1);
        LastZEDCount = -1;
        return;        
    }
    else
    {
        if(KFGRI.IsEndlessWave())
        {
            SetInt("remainingZEDs", -2);
            LastZEDCount = -1;
            return;
        }
    }
    CurrentZEDCount = KFGRI.AIRemaining;
    if(LastZEDCount != CurrentZEDCount)
    {
        SetInt("remainingZEDs", CurrentZEDCount);
        LastZEDCount = CurrentZEDCount;
    }
}

function UpdateTraderTimeRemaining()
{
    local int CurrentTraderTimeRemaining;

    if(KFGRI == none)
    {
        return;
    }
    CurrentTraderTimeRemaining = KFGRI.GetTraderTimeRemaining();
    if(LastTraderTimeRemaining != CurrentTraderTimeRemaining)
    {
        SetInt("remainingTraderTime", CurrentTraderTimeRemaining);
        LastTraderTimeRemaining = CurrentTraderTimeRemaining;
        if((LastTraderTimeRemaining < 10) && LastTraderTimeRemaining >= 0)
        {
            if((KFPC != none) && KFPC.myGfxHUD != none)
            {
                KFPC.myGfxHUD.PlaySoundFromTheme('TraderTime_Countdown', 'UI');
            }
        }
    }
}

defaultproperties
{
    WaveString="WAVE"
    BossWaveString="BOSS"
    FinalWaveString="FINAL"
}