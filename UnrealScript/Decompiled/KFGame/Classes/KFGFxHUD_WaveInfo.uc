/*******************************************************************************
 * KFGFxHUD_WaveInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_WaveInfo extends GFxObject within GFxMoviePlayer;

var KFGameReplicationInfo KFGRI;
var int LastWaveMax;
var int LastZEDCount;
var int LastWave;
var int LastTraderTimeRemaining;
var const localized string WaveString;
var const localized string BossWaveString;
var const localized string FinalWaveString;

function InitializeHUD()
{
    SetString("waveText", WaveString);
    SetString("bossText", BossWaveString);
    SetString("finalText", FinalWaveString);
    UpdateWaveCount();
}

function TickHud(float DeltaTime)
{
    if(KFGRI == none)
    {
        KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);        
    }
    else
    {
        if(KFGRI.bTraderIsOpen)
        {
            UpdateTraderTimeRemaining();            
        }
        else
        {
            UpdateZEDCount();
        }
    }
}

function UpdateWaveCount()
{
    local int CurrentWaveMax, CurrentWave;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI == none)
    {
        return;
    }
    CurrentWaveMax = KFGRI.WaveMax - 1;
    if(LastWaveMax != CurrentWaveMax)
    {
        SetInt("maxWaves", CurrentWaveMax);
        LastWaveMax = CurrentWaveMax;
    }
    CurrentWave = KFGRI.WaveNum + 1;
    if(CurrentWave != LastWave)
    {
        SetInt("currentWave", CurrentWave);
        LastWave = CurrentWave;
    }
}

function UpdateZEDCount()
{
    local int CurrentZEDCount;

    if(KFGRI == none)
    {
        return;
    }
    if(KFGRI.IsFinalWave())
    {
        SetInt("remainingZEDs", -1);
        return;
    }
    CurrentZEDCount = KFGRI.AIRemaining;
    if(LastZEDCount != CurrentZEDCount)
    {
        SetInt("remainingZEDs", CurrentZEDCount);
        LastZEDCount = CurrentZEDCount;
    }
}

function UpdateTraderTimeRemaining()
{
    local int CurrentTraderTimeRemaining;

    if(KFGRI == none)
    {
        return;
    }
    CurrentTraderTimeRemaining = KFGRI.GetTraderTimeRemaining();
    if(LastTraderTimeRemaining != CurrentTraderTimeRemaining)
    {
        SetInt("remainingTraderTime", CurrentTraderTimeRemaining);
        LastTraderTimeRemaining = CurrentTraderTimeRemaining;
    }
}

defaultproperties
{
    WaveString="WAVE"
    BossWaveString="BOSS"
    FinalWaveString="FINAL"
}