/*******************************************************************************
 * KFPawnSoundGroup generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawnSoundGroup extends Object;

struct FootstepSoundInfo
{
    /** Footstep sounds */
    var() Engine.PhysicalMaterialPropertyBase.EMaterialTypes MaterialType;
    /** Footstep sounds */
    var() AkBaseSoundObject Sound;

    structdefaultproperties
    {
        MaterialType=EMaterialTypes.EMT_None
        Sound=none
    }
};

struct ImpactSoundCoolDownInfo
{
    var KFAfflictionManager.EHitZoneBodyPart Limb;
    var name BoneName;
    var float LastImpactSoundTime;

    structdefaultproperties
    {
        Limb=EHitZoneBodyPart.BP_Torso
        BoneName=None
        LastImpactSoundTime=0
    }
};

/** footstep sound effect to play per material type */
var(Footsteps) array<FootstepSoundInfo> FootstepSounds;
/** default footstep sound used when a given material type is not found in the list */
var(Footsteps) AkBaseSoundObject DefaultFootstepSound;
/** sprinting/charging footstep sound effect to play per material type */
var(Footsteps) array<FootstepSoundInfo> SprintingFootstepSounds;
/** default sprinting/charging footstep sound used when a given material type is not found in the list */
var(Footsteps) AkBaseSoundObject DefaultSprintingFootstepSound;
/** "hand-step" sound effect to play per material type */
var(Footsteps) array<FootstepSoundInfo> HandstepSounds;
/** default hand-step sound used when a given material type is not found in the list */
var(Footsteps) AkBaseSoundObject DefaultHandstepSound;
/** Jumping sounds */
var(Jumping) array<FootstepSoundInfo> JumpingSounds;
var(Jumping) AkBaseSoundObject DefaultJumpingSound;
var(Landing) array<FootstepSoundInfo> LandingSounds;
var(Landing) AkBaseSoundObject DefaultLandingSound;
var(Landing) AkBaseSoundObject FallingDamageLandSound;
/** Damage / Pain */
var(Misc) AkBaseSoundObject PainSound;
var(Misc) AkBaseSoundObject DyingSound;
var(Misc) AkBaseSoundObject MouthlessDyingSound;
var(Misc) AkBaseSoundObject BleedoutDyingSound;
var(Misc) AkBaseSoundObject GibSound;
var(Misc) AkBaseSoundObject GaspSound;
var(Misc) AkBaseSoundObject EntranceSound;
var(Gore) AkBaseSoundObject DismembermentSound;
var(Gore) AkBaseSoundObject BloodSpraySound;
var(Gore) AkBaseSoundObject DismemberedPartImpactSound;
var(Gore) AkBaseSoundObject VisceraImpactSound;
var(Gore) AkBaseSoundObject HeadPopSound;
var(Gore) AkBaseSoundObject RagdollImpactSound;
var(Gore) AkBaseSoundObject CleaveSound;
var(Gore) AkBaseSoundObject ObliterationSound;
var array<ImpactSoundCoolDownInfo> ImpactSoundCoolDowns;

function PlayJumpSound(Pawn P)
{
    if(DefaultJumpingSound != none)
    {
        P.PlaySoundBase(DefaultJumpingSound, false, true);
    }
}

function PlayLandSound(Pawn P)
{
    if(DefaultLandingSound != none)
    {
        P.PlaySoundBase(DefaultLandingSound, false, true);
    }
}

function PlayFallingDamageLandSound(Pawn P)
{
    if(FallingDamageLandSound != none)
    {
        P.PlaySoundBase(FallingDamageLandSound, false, true);
    }
}

function PlayPainSound(Pawn P)
{
    if(PainSound != none)
    {
        P.PlaySoundBase(PainSound, true);
    }
}

function PlayDyingSound(Pawn P)
{
    if(DyingSound != none)
    {
        P.PlaySoundBase(DyingSound, true);
    }
}

function PlayMouthlessDyingSound(Pawn P)
{
    if(MouthlessDyingSound != none)
    {
        P.PlaySoundBase(MouthlessDyingSound, true);
    }
}

function PlayBleedoutDyingSound(Pawn P)
{
    if(BleedoutDyingSound != none)
    {
        P.PlaySoundBase(BleedoutDyingSound, true);
    }
}

function PlayGibSound(Pawn P)
{
    if(GibSound != none)
    {
        P.PlaySoundBase(GibSound, true);
    }
}

function PlayGaspSound(Pawn P)
{
    if(GaspSound != none)
    {
        P.PlaySoundBase(GaspSound, true);
    }
}

function PlayEntranceSound(Pawn P)
{
    if(EntranceSound != none)
    {
        P.PlaySoundBase(EntranceSound);
    }
}

function AkBaseSoundObject GetFootstepSound(int FootDown, Engine.PhysicalMaterialPropertyBase.EMaterialTypes MaterialType)
{
    local int I;

    if(FootDown < 2)
    {
        I = FootstepSounds.Find('MaterialType', MaterialType;
        return ((I == -1) ? DefaultFootstepSound : FootstepSounds[I].Sound);        
    }
    else
    {
        if(FootDown < 4)
        {
            I = HandstepSounds.Find('MaterialType', MaterialType;
            return ((I == -1) ? DefaultHandstepSound : HandstepSounds[I].Sound);            
        }
        else
        {
            return DefaultFootstepSound;
        }
    }
}

function AkBaseSoundObject GetSprintingFootstepSound(int FootDown, Engine.PhysicalMaterialPropertyBase.EMaterialTypes MaterialType)
{
    local int I;

    if(FootDown < 2)
    {
        I = SprintingFootstepSounds.Find('MaterialType', MaterialType;
        return ((I == -1) ? DefaultSprintingFootstepSound : SprintingFootstepSounds[I].Sound);        
    }
    else
    {
        return DefaultSprintingFootstepSound;
    }
}

function AkBaseSoundObject GetJumpSound(Engine.PhysicalMaterialPropertyBase.EMaterialTypes MaterialType)
{
    local int I;

    I = default.JumpingSounds.Find('MaterialType', MaterialType;
    return ((I == -1) ? DefaultJumpingSound : JumpingSounds[I].Sound);
}

function AkBaseSoundObject GetLandSound(Engine.PhysicalMaterialPropertyBase.EMaterialTypes MaterialType)
{
    local int I;

    I = default.LandingSounds.Find('MaterialType', MaterialType;
    return ((I == -1) ? DefaultLandingSound : LandingSounds[I].Sound);
}

function PlayDismembermentSounds(Pawn P, Vector DismembermentLoc)
{
    if(DismembermentSound != none)
    {
        P.PlaySoundBase(DismembermentSound, true,,, DismembermentLoc);
    }
    if(BloodSpraySound != none)
    {
        P.PlaySoundBase(BloodSpraySound, true);
    }
}

function PlayRigidBodyCollisionSound(Pawn P, Vector ImpactLoc)
{
    local name CollidingBoneName;
    local int HitZoneIndex, ImpactLimbIndex;

    CollidingBoneName = P.Mesh.FindClosestBone(ImpactLoc);
    HitZoneIndex = KFPawn(P).HitZones.Find('BoneName', CollidingBoneName;
    if(HitZoneIndex != -1)
    {
        ImpactLimbIndex = ImpactSoundCoolDowns.Find('BoneName', CollidingBoneName;
        if(ImpactLimbIndex == -1)
        {
            ImpactLimbIndex = ImpactSoundCoolDowns.Add(1;
            ImpactSoundCoolDowns[ImpactLimbIndex].BoneName = CollidingBoneName;
            ImpactSoundCoolDowns[ImpactLimbIndex].LastImpactSoundTime = P.WorldInfo.TimeSeconds;
            if(DismemberedPartImpactSound != none)
            {
                P.PlaySoundBase(DismemberedPartImpactSound, true,,, ImpactLoc);
            }            
        }
        else
        {
            if((P.WorldInfo.TimeSeconds - ImpactSoundCoolDowns[ImpactLimbIndex].LastImpactSoundTime) > 0.5)
            {
                ImpactSoundCoolDowns[ImpactLimbIndex].LastImpactSoundTime = P.WorldInfo.TimeSeconds;
                if(DismemberedPartImpactSound != none)
                {
                    P.PlaySoundBase(DismemberedPartImpactSound, true,,, ImpactLoc);
                }
            }
        }
    }
}

simulated function PlayGibletCollisionSound(KFGiblet Gib, Vector ImpactLoc)
{
    Gib.PlaySoundBase(DismemberedPartImpactSound, true,,, ImpactLoc);
}

function PlayHeadPopSounds(Pawn P, Vector SoundLoc)
{
    if(HeadPopSound != none)
    {
        P.PlaySoundBase(HeadPopSound, true,,, SoundLoc);
    }
    PlayBloodSpraySound(P);
}

function PlayCleaveSound(Pawn P, Vector SoundLoc)
{
    if(CleaveSound != none)
    {
        P.PlaySoundBase(CleaveSound, true,,, SoundLoc);
    }
    PlayBloodSpraySound(P);
}

function bool ShouldPlayCleaveSound(name DismemberBoneName)
{
    return ((DismemberBoneName == 'Spine1') || DismemberBoneName == 'LeftShoulder') || DismemberBoneName == 'RightShoulder';
}

function PlayObliterationSound(Pawn P)
{
    if(ObliterationSound != none)
    {
        P.PlaySoundBase(ObliterationSound, true,,, P.Location);
    }
}

function PlayBloodSpraySound(Pawn P)
{
    if(BloodSpraySound != none)
    {
        P.PlaySoundBase(BloodSpraySound, true);
    }
}

defaultproperties
{
    FootstepSounds(0)=(MaterialType=EMaterialTypes.EMT_None,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt')
    FootstepSounds(1)=(MaterialType=EMaterialTypes.EMT_Rock,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Brick')
    FootstepSounds(2)=(MaterialType=EMaterialTypes.EMT_Dust,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt')
    FootstepSounds(3)=(MaterialType=EMaterialTypes.EMT_Mud,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Mud')
    FootstepSounds(4)=(MaterialType=EMaterialTypes.EMT_Grass,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Grass')
    FootstepSounds(5)=(MaterialType=EMaterialTypes.EMT_Water,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Water')
    FootstepSounds(6)=(MaterialType=EMaterialTypes.EMT_WaterShallow,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Water')
    FootstepSounds(7)=(MaterialType=EMaterialTypes.EMT_Snow,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Snow')
    FootstepSounds(8)=(MaterialType=EMaterialTypes.EMT_Ice,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Snow')
    FootstepSounds(9)=(MaterialType=EMaterialTypes.EMT_Concrete,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Stone')
    FootstepSounds(10)=(MaterialType=EMaterialTypes.EMT_Gravel,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Stone')
    FootstepSounds(11)=(MaterialType=EMaterialTypes.EMT_Rubber,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Flesh')
    FootstepSounds(12)=(MaterialType=EMaterialTypes.EMT_Asphalt,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Brick')
    DefaultFootstepSound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt'
    DefaultSprintingFootstepSound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt'
    DefaultHandstepSound=AkEvent'WW_ZED_Crawler.Play_ZED_Crawler_Sfx_Footstep'
    JumpingSounds(0)=(MaterialType=EMaterialTypes.EMT_None,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt')
    JumpingSounds(1)=(MaterialType=EMaterialTypes.EMT_Rock,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Brick')
    JumpingSounds(2)=(MaterialType=EMaterialTypes.EMT_Dust,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt')
    JumpingSounds(3)=(MaterialType=EMaterialTypes.EMT_Mud,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Mud')
    JumpingSounds(4)=(MaterialType=EMaterialTypes.EMT_Grass,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Grass')
    JumpingSounds(5)=(MaterialType=EMaterialTypes.EMT_Water,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Water')
    JumpingSounds(6)=(MaterialType=EMaterialTypes.EMT_WaterShallow,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Water')
    JumpingSounds(7)=(MaterialType=EMaterialTypes.EMT_Snow,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Snow')
    JumpingSounds(8)=(MaterialType=EMaterialTypes.EMT_Ice,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Snow')
    JumpingSounds(9)=(MaterialType=EMaterialTypes.EMT_Concrete,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Stone')
    JumpingSounds(10)=(MaterialType=EMaterialTypes.EMT_Gravel,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Stone')
    JumpingSounds(11)=(MaterialType=EMaterialTypes.EMT_Rubber,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Flesh')
    JumpingSounds(12)=(MaterialType=EMaterialTypes.EMT_Asphalt,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Brick')
    DefaultJumpingSound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt'
    LandingSounds(0)=(MaterialType=EMaterialTypes.EMT_None,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt')
    LandingSounds(1)=(MaterialType=EMaterialTypes.EMT_Rock,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Brick')
    LandingSounds(2)=(MaterialType=EMaterialTypes.EMT_Dust,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt')
    LandingSounds(3)=(MaterialType=EMaterialTypes.EMT_Mud,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Mud')
    LandingSounds(4)=(MaterialType=EMaterialTypes.EMT_Grass,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Grass')
    LandingSounds(5)=(MaterialType=EMaterialTypes.EMT_Water,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Water')
    LandingSounds(6)=(MaterialType=EMaterialTypes.EMT_WaterShallow,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Water')
    LandingSounds(7)=(MaterialType=EMaterialTypes.EMT_Snow,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Snow')
    LandingSounds(8)=(MaterialType=EMaterialTypes.EMT_Ice,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Snow')
    LandingSounds(9)=(MaterialType=EMaterialTypes.EMT_Concrete,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Stone')
    LandingSounds(10)=(MaterialType=EMaterialTypes.EMT_Gravel,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Stone')
    LandingSounds(11)=(MaterialType=EMaterialTypes.EMT_Rubber,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Flesh')
    LandingSounds(12)=(MaterialType=EMaterialTypes.EMT_Asphalt,Sound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Brick')
    DefaultLandingSound=AkEvent'WW_MVT_Footstep.Play_Boot_Walk_Dirt'
    DyingSound=AkEvent'WW_ZED_Clot_Alpha.ZED_Clot_Alpha_SFX_Death'
    MouthlessDyingSound=AkEvent'WW_ZED_Clot_Alpha.ZED_Clot_Alpha_SFX_Death_Headless'
    BleedoutDyingSound=AkEvent'WW_ZED_Clot_Alpha.ZED_Clot_Alpha_SFX_Bleeding'
    GibSound=AkEvent'WW_ZED_Clot_Alpha.ZED_Clot_Alpha_SFX_Melee_Impact'
    DismembermentSound=AkEvent'WW_ZED_Gore.Gore_Dismemberment_Hit'
    BloodSpraySound=AkEvent'WW_ZED_Gore.Gore_Blood_Spray'
    DismemberedPartImpactSound=AkEvent'WW_ZED_Gore.Gore_Body_Part_Solid_Impact'
    VisceraImpactSound=AkEvent'WW_ZED_Gore.Gore_Body_Part_Squish_Impact'
    HeadPopSound=AkEvent'WW_ZED_Gore.Gore_Head_Explode'
    RagdollImpactSound=AkEvent'WW_ZED_Gore.Gore_Body_Full_Impact'
    CleaveSound=AkEvent'WW_ZED_Gore.Gore_Blood_Guts_Heavy'
}