/*******************************************************************************
 * KFUsableTrigger generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFUsableTrigger extends Trigger_PawnsOnly
    hidecategories(Navigation)
    implements(KFInterface_Usable);

var bool bActive;
var int TriggeredCount;
/** The type of interaction message that appears when standing in the trigger */
var() KFLocalMessage_Interaction.EInteractionMessageType InteractionType;
/** The number of times this trigger can be used before being deactivated */
var() int MaxTriggeredCount<ClampMin=0>;
/** Objects that can receive a notification when this trigger is used */
var() array<KFInterface_UsableTriggerTarget> Targets;

replication
{
     if(bNetDirty)
        bActive;
}

simulated function bool GetIsUsable(Pawn User)
{
    return bActive;
}

function int GetInteractionIndex(Pawn User)
{
    return InteractionType;
}

simulated event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    super(Trigger).Touch(Other, OtherComp, HitLocation, HitNormal);
    if(Role == ROLE_Authority)
    {
        Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
    }
}

simulated event UnTouch(Actor Other)
{
    super(Actor).UnTouch(Other);
    if(Role == ROLE_Authority)
    {
        Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
    }
}

function bool UsedBy(Pawn User)
{
    local KFInterface_UsableTriggerTarget Target;

    if((MaxTriggeredCount == 0) || TriggeredCount < MaxTriggeredCount)
    {
        foreach Targets(Target,)
        {
            Target.TriggerTarget(self, User);            
        }        
        if(++ TriggeredCount == MaxTriggeredCount)
        {
            bActive = false;
        }
        return true;
    }
    return false;
}

function AddTriggerHook(KFInterface_UsableTriggerTarget Target)
{
    Targets.AddItem(Target;
}

defaultproperties
{
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFUsableTrigger.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFUsableTrigger.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFUsableTrigger.CollisionCylinder'
    Components(1)=CollisionCylinder
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bAlwaysRelevant=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFUsableTrigger.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}