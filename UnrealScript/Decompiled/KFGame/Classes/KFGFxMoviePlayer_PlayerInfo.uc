/*******************************************************************************
 * KFGFxMoviePlayer_PlayerInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMoviePlayer_PlayerInfo extends GFxMoviePlayer
    config(UI);

var KFPawn_Human MyKFPH;
var KFPlayerReplicationInfo MyKFPRI;
var GFxObject PartyMemberHudMC;
var GFxObject PlayerName;
var GFxObject IconMC;
var GFxObject Icon;
var GFxObject ArmorMeter;
var GFxObject HealthMeter;
var int LastPerkIndex;
var float LastHealthPct;
var int LastArmor;
var string LastPlayerName;
var bool bVisible;
var Vector2D MovieSize;
var Vector ScreenPosition;

function Init(optional LocalPlayer LocPlay)
{
    super.Init(LocPlay);
    SetViewScaleMode(0);
    SetAlignment(5);
    LastPerkIndex = -1;
    LastHealthPct = -1;
    LastArmor = -1;
    LastPlayerName = "";
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'partyMemberHud':
            if(PartyMemberHudMC == none)
            {
                PartyMemberHudMC = Widget;
                PartyMemberHudMC.SetVisible(false);
                PlayerName = PartyMemberHudMC.GetObject("txtName");
            }
            break;
        case 'iconSection':
            if(IconMC == none)
            {
                IconMC = Widget;
                Icon = IconMC.GetObject("icon");
            }
            break;
        case 'armorMeterMC':
            if(ArmorMeter == none)
            {
                ArmorMeter = Widget;
            }
            break;
        case 'healthMeterMC':
            if(HealthMeter == none)
            {
                HealthMeter = Widget;
            }
            break;
        default:
            break;
    }
    return true;
}

function TickHud(float DeltaTime)
{
    if(bVisible)
    {
        if(MyKFPRI == none)
        {
            MyKFPRI = KFPlayerReplicationInfo(MyKFPH.PlayerReplicationInfo);
        }
        PartyMemberHudMC.SetPosition(ScreenPosition.X - ((GetMovieWitdth()) / float(2)), ScreenPosition.Y - ((GetMovieHeight()) / float(2)));
        UpdatePerk();
        UpdateHealth();
        UpdateArmor();
        UpdatePlayerName();
    }
}

function SetVisible(bool bNewVisible)
{
    if(bVisible != bNewVisible)
    {
        PartyMemberHudMC.super(KFGFxMoviePlayer_PlayerInfo).SetVisible(bNewVisible);
        bVisible = bNewVisible;
    }
}

function float GetMovieWitdth()
{
    return MovieSize.X;
}

function float GetMovieHeight()
{
    return MovieSize.Y;
}

function UpdatePerk()
{
    if(MyKFPRI != none)
    {
        Icon.SetString("source", "img://" $ MyKFPRI.CurrentPerkClass.static.GetPerkIconPath());
    }
}

function UpdateHealth()
{
    local float HealthPct;

    if(MyKFPH == none)
    {
        LastHealthPct = 0;
        IconMC.GotoAndStopI(100);
        HealthMeter.GotoAndStopI(100);
        return;
    }
    HealthPct = (100 / float(MyKFPH.HealthMax)) * float(MyKFPH.Health);
    if(LastHealthPct != HealthPct)
    {
        LastHealthPct = HealthPct;
        IconMC.GotoAndStopI(Max(int(float(100) - LastHealthPct), 1));
        HealthMeter.GotoAndStopI(Min(int(LastHealthPct), 100));
    }
}

function UpdateArmor()
{
    if(MyKFPH == none)
    {
        LastArmor = 0;
        ArmorMeter.GotoAndStopI(100);        
    }
    else
    {
        if(LastArmor != MyKFPH.Armor)
        {
            LastArmor = MyKFPH.Armor;
            ArmorMeter.GotoAndStopI(Min(LastArmor, 100));
        }
    }
}

function UpdatePlayerName()
{
    if(MyKFPRI == none)
    {
        LastPlayerName = "";
        PlayerName.SetText("");        
    }
    else
    {
        if(LastPlayerName != MyKFPRI.PlayerName)
        {
            LastPlayerName = MyKFPRI.PlayerName;
            PlayerName.SetText(MyKFPRI.PlayerName);
        }
    }
}

function SetPlayerPawn(KFPawn_Human KFPH)
{
    MyKFPH = KFPH;
    MyKFPRI = KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo);
}

function Callback_MovieSize(int MovieWith, int MovieHeight)
{
    MovieSize.X = float(MovieWith);
    MovieSize.Y = float(MovieHeight);
}

defaultproperties
{
    bDisplayWithHudOff=false
    bAllowInput=false
    bAllowFocus=false
    bAutoPlay=true
    Priority=0
}