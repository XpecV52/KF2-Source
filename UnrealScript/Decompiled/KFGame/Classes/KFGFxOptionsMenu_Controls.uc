/*******************************************************************************
 * KFGFxOptionsMenu_Controls generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxOptionsMenu_Controls extends KFGFxObject_Menu within GFxMoviePlayer;

var KFGFxControlsContainer_Keybinding KeybindingsContainer;
var KFGFxControlsContainer_Input InputContainer;
var KFGFxControlsContainer_ControllerPresets ControllerPresetsContainer;
var const float MinControllerLookSensitivity;
var const float MaxControllerLookSensitivity;
var const float MinControllerZoomLookSensitivity;
var const float MaxControllerZoomLookSensitivity;
var const float MinMouseLookSensitivity;
var const float MaxMouseLookSensitivity;
var const float MinMouseLookZoomSensitivity;
var const float MaxMouseLookZoomSensitivity;
var const localized array<localized string> TabStrings;
var const localized string HeaderText;

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    LocalizeText();
}

function LocalizeText()
{
    local byte I;
    local GFxObject DataProvider, DataObject, LocalizedObject;

    DataProvider = Outer.CreateArray();
    I = 0;
    J0x35:

    if(I < TabStrings.Length)
    {
        DataObject = Outer.CreateObject("Object");
        DataObject.SetString("label", TabStrings[I]);
        DataProvider.SetElementObject(I, DataObject);
        ++ I;
        goto J0x35;
    }
    SetObject("tabStrings", DataProvider);
    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("header", HeaderText);
    LocalizedObject.SetString("close", Class'KFCommon_LocalizedStrings'.default.BackString);
    SetObject("localizedText", LocalizedObject);
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'KeybindingsContainer':
            if(KeybindingsContainer == none)
            {
                KeybindingsContainer = KFGFxControlsContainer_Keybinding(Widget);
                KeybindingsContainer.Initialize(self);
            }
            break;
        case 'ControllerPresetsContainer':
            if(ControllerPresetsContainer == none)
            {
                ControllerPresetsContainer = KFGFxControlsContainer_ControllerPresets(Widget);
                ControllerPresetsContainer.Initialize(self);
            }
            break;
        case 'InputContainer':
            if(InputContainer == none)
            {
                InputContainer = KFGFxControlsContainer_Input(Widget);
                InputContainer.Initialize(self);
            }
            break;
        default:
            break;
    }
    return true;
}

function OnOpen()
{
    if(KeybindingsContainer != none)
    {
        KeybindingsContainer.UpdateAllBindings();
    }
}

event OnClose()
{
    if(KeybindingsContainer != none)
    {
        KeybindingsContainer.ClearInputOnContainer();
    }
    SaveConfigValues();
}

function SaveConfigValues()
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.SaveConfig();
}

event bool FilterButtonInput(int ControllerId, name ButtonName, Core.Object.EInputEvent InputEvent)
{
    if(KeybindingsContainer != none)
    {
        KeybindingsContainer.BindKey(ButtonName, InputEvent);
    }
    return super.FilterButtonInput(ControllerId, ButtonName, InputEvent);
}

function Callback_ControllerSensitivity(float NewSensitivity)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.GamepadSensitivityScale = NewSensitivity / float(100);
}

function Callback_ControllerZoomSensitivity(float NewSensitivity)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.GamepadZoomedSensitivityScale = NewSensitivity / float(100);
}

function Callback_ControllerInvertChanged(bool bInvertController)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bInvertController = bInvertController;
}

function Callback_MouseSensitivity(float NewSensitivity)
{
    Outer.GetPC().PlayerInput.SetSensitivity(NewSensitivity);
}

function Callback_MouseZoomSensitivity(float NewSensitivity)
{
    KFPlayerInput(Outer.GetPC().PlayerInput).SetZoomedSensitivity(NewSensitivity / float(100));
}

function Callback_InvertChanged(bool bInvertMouse)
{
    Outer.GetPC().PlayerInput.bInvertMouse = bInvertMouse;
}

function Callback_MouseSmoothingChanged(bool NewValue)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bEnableMouseSmoothing = NewValue;
}

function Callback_AimAssistZoomLockOnChanged(bool NewValue)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bAutoTargetEnabled = NewValue;
}

function Callback_AimAssistRotationChanged(bool NewValue)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bTargetAdhesionEnabled = NewValue;
}

function Callback_AimAssistSlowDownChanged(bool NewValue)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bTargetFrictionEnabled = NewValue;
}

function Callback_ForceFeedbackChanged(bool NewValue)
{
    local KFPlayerInput KFPI;

    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    KFPI.bForceFeedbackEnabled = NewValue;
}

function Callback_ChangeBind(string ChangedCommand, byte SelectedSection)
{
    if(KeybindingsContainer != none)
    {
        KeybindingsContainer.ChangeBind(ChangedCommand, SelectedSection);
    }
}

function Callback_ResetControls()
{
    if(KeybindingsContainer != none)
    {
        KeybindingsContainer.ResetControls();
    }
}

function Callback_AcceptBind()
{
    if(KeybindingsContainer != none)
    {
        KeybindingsContainer.AcceptBind();
    }
}

function Callback_CloseMenu()
{
    Manager.OpenMenu(5);
}

defaultproperties
{
    MinControllerLookSensitivity=0.4
    MaxControllerLookSensitivity=1.2
    MinControllerZoomLookSensitivity=0.3
    MaxControllerZoomLookSensitivity=1
    MinMouseLookSensitivity=0.1
    MaxMouseLookSensitivity=0.7
    MinMouseLookZoomSensitivity=0.2
    MaxMouseLookZoomSensitivity=1
    TabStrings(0)="INPUT"
    TabStrings(1)="KEY BINDINGS"
    TabStrings(2)="CONTROLLERS"
    HeaderText="CONTROLS OPTIONS"
    SubWidgetBindings=/* Array type was not detected. */
}