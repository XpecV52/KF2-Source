/*******************************************************************************
 * KFGameplayEventsWriter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameplayEventsWriter extends GameplayEventsWriter
    native(Analytics)
    config(GameStats);

const GAMEEVENT_ZED_DIED = 1010;
const GAMEEVENT_ZED_SPAWNED = 1011;
const GAMEEVENT_SPAWNVOLUME_RATING = 2002;
const GAMEEVENT_SPAWNVOLUME_PLAYERS = 2003;
const GAMEEVENT_SPAWNVOLUME_BESTRATING = 2004;
const GAMEEVENT_AI_MOVEFAILURE = 2100;
const GAMEEVENT_AI_BUMP = 2101;
const GAMEEVENT_AI_JUMPSPOT = 2102;
const GAMEEVENT_AI_HITWALL = 2103;
const GAMEEVENT_AI_JUMPOVERWALL = 2104;
const GAMEEVENT_AI_WAITFORDOOR = 2105;
const GAMEEVENT_AI_FINISHEDWAITFORDOOR = 2106;
const GAMEEVENT_AI_FAILEDADJUSTFROMWALL = 2107;
const GAMEEVENT_AI_CHARGEATTACK = 2108;
const GAMEEVENT_AI_CHANGEDENEMY = 2109;
const GAMEEVENT_AI_GETNEXTMOVEGOALFAILURE = 2110;
const GAMEEVENT_AI_REDIRECTEDPATH = 2111;
const GAMEEVENT_AI_BLOCKEDPATH = 2112;
const GAMEEVENT_AI_PATHOBSTRUCTION_FAIL = 2113;
const GAMEEVENT_AI_PATHOBSTRUCTION_REPATH = 2114;
const GAMEEVENT_AI_MOVE_TIMEOUT = 2115;
const GAMEEVENT_AI_INVALIDATE_ANCHOR = 2116;
const GAMEEVENT_AI_ANCHOR_FALLBACK_FAILED = 2117;
const GAMEEVENT_AI_FAILED_ANCHOR = 2118;
const GAMEEVENT_AI_BASED_ON_PAWN = 2119;
const GAMEEVENT_AI_HEADLESS_WANDER = 2120;
const GAMEEVENT_AI_DESTROYED_DOOR = 2121;
const GAMEEVENT_AI_PATHGOALEVAL_ABORT = 2122;
const GAMEEVENT_AI_PATH_FAILURE = 2123;

var globalconfig bool bRecordAIDebugInfo;
var int StatsFileIndex;
var transient Controller LastDiedController;

// Export UKFGameplayEventsWriter::execResolveWeaponClassIndex(FFrame&, void* const)
native function int ResolveWeaponClassIndex(Class WeaponClass);

// Export UKFGameplayEventsWriter::execResolveDamageClassIndex(FFrame&, void* const)
native function int ResolveDamageClassIndex(Class DamageClass);

// Export UKFGameplayEventsWriter::execResolveProjectileClassIndex(FFrame&, void* const)
native function int ResolveProjectileClassIndex(Class ProjectileClass);

// Export UKFGameplayEventsWriter::execResolvePawnIndex(FFrame&, void* const)
native function int ResolvePawnIndex(Class PawnClass);

// Export UKFGameplayEventsWriter::execResolveActorIndex(FFrame&, void* const)
native function int ResolveActorIndex(Actor Actor);

// Export UKFGameplayEventsWriter::execOpenStatsFile(FFrame&, void* const)
native function bool OpenStatsFile(string Filename);

// Export UKFGameplayEventsWriter::execCanAcquireFile(FFrame&, void* const)
native function bool CanAcquireFile();

function LogSpawnVolumeRating(KFSpawnVolume SpawnVolume, float FinalRating, float UsageRating, float LocationRating)
{
    local GenericParamListStatEntry PLE;
    local Vector InteriorBB;
    local string ToolTipText;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2002);
    PLE.AddVector('BaseLocation', SpawnVolume.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_TrafficLight'");
    PLE.AddString('Name', string(SpawnVolume.Name));
    PLE.AddVector('BoxLoc', SpawnVolume.Location);
    PLE.AddVector('BoxColor', vect(0, 255, 0));
    InteriorBB = SpawnVolume.VisibilityBounds.BoxExtent;
    PLE.AddVector('BoxExtent', InteriorBB);
    PLE.AddVector('HeatmapPoint', SpawnVolume.Location);
    ToolTipText = (((("Final Rating: " $ string(FinalRating)) $ "
Usage Rating: ") $ string(UsageRating)) $ "
Location Rating: ") $ string(LocationRating);
    PLE.AddString('Text', ToolTipText);
    PLE.CommitToDisk();
}

function LogPlayersAtSpawn(KFPlayerController KFPC, Vector ViewLoc, Rotator ViewRot)
{
    local GenericParamListStatEntry PLE;
    local string ToolTipText;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2003);
    PLE.AddVector('BaseLocation', ViewLoc);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Attractor'");
    PLE.AddString('Name', string(KFPC.Name));
    ToolTipText = (((("Player: " $ string(KFPC.Name)) $ "
ViewLoc: ") $ string(ViewLoc)) $ "
ViewRot: ") $ string(ViewRot);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', ViewLoc);
    PLE.AddVector('LineColor', vect(0, 255, 0));
    PLE.AddVector('LineEnd', ViewLoc + (vector(ViewRot) * 750));
    PLE.AddInt('PlayerIndex', ResolvePlayerIndex(KFPC));
    PLE.CommitToDisk();
}

function LogBestSpawnVolume(KFSpawnVolume KFSV, int WaveNum, int SpawnCount)
{
    local GenericParamListStatEntry PLE;
    local string ToolTipText;
    local Vector InteriorBB;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2004);
    PLE.AddVector('BaseLocation', KFSV.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Spawn'");
    PLE.AddString('Name', string(KFSV.Name));
    ToolTipText = ((((("Wave " $ string(WaveNum)) $ "
Spawned ") $ string(SpawnCount)) $ " Zeds") $ "
Times chosen for spawn: ") $ string(KFSV.VolumeChosenCount);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('BoxLoc', KFSV.Location);
    InteriorBB = KFSV.VisibilityBounds.BoxExtent;
    PLE.AddVector('BoxExtent', InteriorBB);
    PLE.AddVector('HeatmapPoint', KFSV.Location);
    PLE.CommitToDisk();
}

function LogAIPathFailure(KFAIController KFAIC, NavigationPoint Anchor, Actor Goal, string ToolTipText)
{
    local GenericParamListStatEntry PLE;
    local int I;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2123);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    if(Anchor != none)
    {
        PLE.AddVector('SphereLoc', Anchor.Location);
        PLE.AddFloat('SphereRadius', 32);
        PLE.AddVector('SphereColor', vect(0, 255, 0));
    }
    if(Goal != none)
    {
        PLE.AddVector('LineStart', KFAIC.Pawn.Location);
        PLE.AddVector('LineEnd', KFAIC.MoveGoal.Location);
        PLE.AddVector('LineColor', vect(0, 0, 255));
    }
    if(KFAIC.RouteCache.Length > 0)
    {
        ToolTipText = (ToolTipText $ " RCItems:") $ string(KFAIC.RouteCache.Length);
        I = 0;
        J0x389:

        if(I < KFAIC.RouteCache.Length)
        {
            ToolTipText = (ToolTipText $ " RC0:") $ string(KFAIC.RouteCache[I]);
            ++ I;
            goto J0x389;
        }
    }
    ToolTipText = ToolTipText;
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIHeadlessWander(KFAIController KFAIC, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2120);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = ToolTipText;
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIBasedOnPawn(KFAIController KFAIC, Pawn BasePawn, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2119);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = ToolTipText;
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', KFAIC.Pawn.Location);
    PLE.AddVector('LineEnd', BasePawn.Location);
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIPathGoalEvalAbort(KFAIController KFAIC, PathGoalEvaluator PathEvaluator, NavigationPoint StartNav, string ToolTipText)
{
    local GenericParamListStatEntry PLE;
    local KFPawn NPC;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    NPC = KFAIC.MyKFPawn;
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2122);
    PLE.AddString('Name', string(NPC.Name));
    PLE.AddVector('BaseLocation', NPC.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', NPC.Location);
    PLE.AddVector('LineEnd', StartNav.Location);
    PLE.AddVector('LineColor', vect(255, 0, 0));
    PLE.AddVector('SphereLoc', StartNav.Location);
    PLE.AddFloat('SphereRadius', 32);
    PLE.AddVector('SphereColor', vect(255, 0, 0));
    PLE.AddVector('HeatmapPoint', NPC.Location);
    PLE.CommitToDisk();
}

function LogAIDestroyedDoor(KFAIController KFAIC, KFDoorActor door, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2121);
    PLE.AddVector('BaseLocation', door.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', door.Location);
    PLE.AddVector('LineEnd', KFAIC.Pawn.Location);
    PLE.AddVector('HeatmapPoint', door.Location);
    PLE.CommitToDisk();
}

function LogAIFailedAnchor(int EventID, KFAIController KFAIC, Actor MoveTarget, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2117);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    if(MoveTarget != none)
    {
        ToolTipText = (ToolTipText $ " MoveTarget:") $ string(MoveTarget);
        PLE.AddString('Text', ToolTipText);
        PLE.AddVector('LineStart', KFAIC.Pawn.Location);
        PLE.AddVector('LineEnd', MoveTarget.Location);
    }
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIPathObstruction(int EventID, KFAIController KFAIC, Actor Obstruction, string ToolTipText)
{
    local GenericParamListStatEntry PLE;
    local float Radius, Height;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', EventID);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    PLE.AddVector('SphereLoc', Obstruction.Location);
    Obstruction.GetBoundingCylinder(Radius, Height);
    PLE.AddFloat('SphereRadius', Radius);
    PLE.AddVector('SphereColor', vect(255, 0, 0));
    ToolTipText = (ToolTipText $ " Obstruction:") $ string(Obstruction);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', KFAIC.Pawn.Location);
    PLE.AddVector('LineEnd', Obstruction.Location);
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIBlockedPath(KFAIController KFAIC, NavigationPoint Start, NavigationPoint End, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2112);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (((ToolTipText $ " MoveTarget: ") $ string(KFAIC.MoveTarget)) $ " MoveGoal: ") $ string(KFAIC.MoveTarget);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', Start.Location);
    PLE.AddVector('LineEnd', End.Location);
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIRedirectedPath(KFAIController KFAIC, Actor MoveGoal, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    if(KFAIC != none)
    {
        KFAIC.AILog_Internal((((((string(KFAIC.Pawn) $ " GAMEEVENT_AI_REDIRECTEDPATH at ") $ string(KFAIC.Pawn.Location)) $ " MoveGoal: ") $ string(MoveGoal)) $ " ToolTipText: ") $ ToolTipText, 'Critical');
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2111);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Repulsor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (((((ToolTipText $ " Base: ") $ string(KFAIC.Pawn.Base)) $ " MG Dist:") $ string(VSize(MoveGoal.Location - KFAIC.Pawn.Location))) $ " SS? ") $ string(KFAIC.MyKFPawn.IsUsingSuperSpeed());
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', KFAIC.Pawn.Location);
    PLE.AddVector('LineEnd', KFAIC.Pawn.Location + (vector(KFAIC.Pawn.Rotation) * 350));
    if(KFAIC.MoveGoal != none)
    {
        PLE.AddVector('SecondLineStart', KFAIC.Pawn.Location);
        PLE.AddVector('SecondLineEnd', KFAIC.MoveGoal.Location);
        PLE.AddVector('SecondLineColor', vect(1, 1, 0));
    }
    PLE.AddVector('HeatmapPoint', KFAIC.Pawn.Location);
    PLE.CommitToDisk();
}

function LogAIMoveFailure(KFAIController KFAIC, Vector NPCLocation, Rotator NPCRotation, Actor MoveGoal, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2100);
    PLE.AddVector('BaseLocation', NPCLocation);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Crosswalk'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    if(MoveGoal != none)
    {
        ToolTipText = (((ToolTipText $ " MG Dist:") $ string(VSize(MoveGoal.Location - KFAIC.Pawn.Location))) $ " SS? ") $ string(KFAIC.MyKFPawn.IsUsingSuperSpeed());        
    }
    else
    {
        ToolTipText = (ToolTipText $ " SS? ") $ string(KFAIC.MyKFPawn.IsUsingSuperSpeed());
    }
    if(KFAIC.MyKFPawn.Base != none)
    {
        ToolTipText = (ToolTipText $ " Base:") $ string(KFAIC.MyKFPawn.Base);        
    }
    else
    {
        ToolTipText = ToolTipText $ " NO BASE!";
    }
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', NPCLocation);
    PLE.AddVector('LineEnd', NPCLocation + (vector(NPCRotation) * 350));
    if((KFAIC.MoveGoal != none) || KFAIC.MoveTarget != none)
    {
        PLE.AddVector('SecondLineStart', NPCLocation);
        if(KFAIC.MoveTarget != none)
        {
            PLE.AddVector('SecondLineEnd', KFAIC.MoveTarget.Location);            
        }
        else
        {
            PLE.AddVector('SecondLineEnd', KFAIC.MoveGoal.Location);
        }
        PLE.AddVector('SecondLineColor', vect(1, 1, 0));
    }
    PLE.AddVector('HeatmapPoint', NPCLocation);
    PLE.CommitToDisk();
}

function LogAIGetNextMoveGoalFailure(KFAIController KFAIC, Vector NPCLocation, Rotator NPCRotation, Actor MoveGoal, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    if(KFAIC != none)
    {
        KFAIC.AILog_Internal((((((string(KFAIC.Pawn) $ " LogAIGetNextMoveGoalFailure at ") $ string(NPCLocation)) $ " MoveGoal: ") $ string(MoveGoal)) $ " ToolTipText: ") $ ToolTipText, 'PathWarning');
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2110);
    PLE.AddVector('BaseLocation', NPCLocation);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Spawn'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (((((ToolTipText $ " Base: ") $ string(KFAIC.Pawn.Base)) $ " MG Dist:") $ string(VSize(MoveGoal.Location - KFAIC.Pawn.Location))) $ " SS: ") $ string(KFAIC.MyKFPawn.IsUsingSuperSpeed());
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', NPCLocation);
    PLE.AddVector('LineEnd', NPCLocation + (vector(NPCRotation) * 350));
    if(KFAIC.MoveGoal != none)
    {
        PLE.AddVector('SecondLineStart', NPCLocation);
        PLE.AddVector('SecondLineEnd', KFAIC.MoveGoal.Location);
        PLE.AddVector('SecondLineColor', vect(1, 1, 0));
    }
    PLE.AddVector('HeatmapPoint', NPCLocation);
    PLE.CommitToDisk();
}

function LogAIChargeAttack(KFAIController KFAIC, Vector ChargeStartLocation, Vector ChargeEndLocation, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2108);
    PLE.AddVector('BaseLocation', ChargeStartLocation);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Attractor'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (ToolTipText $ " Enemy: ") $ string(KFAIC.Enemy);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', ChargeStartLocation);
    PLE.AddVector('LineEnd', ChargeEndLocation);
    PLE.AddVector('HeatmapPoint', ChargeStartLocation);
    PLE.CommitToDisk();
}

function LogAIBump(int EventID, KFAIController KFAIC, Vector NPCLocation, Rotator NPCRotation, Actor Other, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2101);
    PLE.AddVector('BaseLocation', NPCLocation);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_TrafficLight'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (((((((ToolTipText $ " Other: ") $ string(Other)) $ " Base: ") $ string(KFAIC.Pawn.Base)) $ " SS: ") $ string(KFAIC.MyKFPawn.IsUsingSuperSpeed())) $ " Command: ") $ string(KFAIC.CachedAICommandList);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', NPCLocation);
    PLE.AddVector('LineEnd', NPCLocation + (vector(NPCRotation) * 750));
    PLE.AddVector('HeatmapPoint', NPCLocation);
    PLE.CommitToDisk();
}

function LogAIWall(int EventID, KFAIController KFAIC, Vector NPCLocation, Rotator NPCRotation, Actor Wall, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', EventID);
    PLE.AddVector('BaseLocation', NPCLocation);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Spawn'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (((((ToolTipText $ " Wall: ") $ string(Wall)) $ " Phys: ") $ KFAIC.Pawn.GetPhysicsName()) $ " SS: ") $ string(KFAIC.MyKFPawn.IsUsingSuperSpeed());
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', NPCLocation);
    PLE.AddVector('LineEnd', NPCLocation + (vector(NPCRotation) * 250));
    PLE.AddVector('HeatmapPoint', NPCLocation);
    PLE.CommitToDisk();
}

function LogAIDoor(int EventID, KFAIController KFAIC, Vector NPCLocation, KFDoorActor door, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', EventID);
    PLE.AddVector('BaseLocation', NPCLocation);
    PLE.AddString('Sprite', "Texture2D'EditorResources.door'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (ToolTipText $ " Command: ") $ string(KFAIC.CachedAICommandList);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', NPCLocation);
    PLE.AddVector('LineEnd', door.Location);
    PLE.AddVector('HeatmapPoint', NPCLocation);
    PLE.CommitToDisk();
}

function LogAIChangedEnemy(KFAIController KFAIC, Pawn NewEnemy, Pawn OldEnemy, string ToolTipText)
{
    local GenericParamListStatEntry PLE;

    if(!bRecordAIDebugInfo)
    {
        return;
    }
    PLE = GetGenericParamListEntry();
    PLE.AddInt('EventID', 2109);
    PLE.AddVector('BaseLocation', KFAIC.Pawn.Location);
    PLE.AddString('Sprite', "Texture2D'EditorResources.Crowd.T_Crowd_Behavior'");
    PLE.AddString('Name', string(KFAIC.Pawn.Name));
    ToolTipText = (((((ToolTipText $ " from ") $ OldEnemy.PlayerReplicationInfo.PlayerName) $ " to ") $ NewEnemy.PlayerReplicationInfo.PlayerName) $ " ") $ string(KFAIC.CachedAICommandList);
    PLE.AddString('Text', ToolTipText);
    PLE.AddVector('LineStart', KFAIC.Pawn.Location);
    PLE.AddVector('LineColor', vect(0, 255, 0));
    PLE.AddVector('LineEnd', NewEnemy.Location);
    PLE.CommitToDisk();
}

defaultproperties
{
    SupportedEvents=/* Array type was not detected. */
}