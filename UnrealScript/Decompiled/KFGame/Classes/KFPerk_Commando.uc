/*******************************************************************************
 * KFPerk_Commando generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_Commando extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision,Mobile,Object,Debug,Advanced,Physics,Actor,Attachment,Display);

enum ECommandoSkills
{
    ECommandoTacticalReload,
    ECommandoLargeMags,
    ECommandoBackup,
    ECommandoImpact,
    ECommandoHealthIncrease,
    ECommandoAmmoVest,
    ECommandoHollowPoints,
    ECommandoEatLead,
    ECommandoProfessional,
    ECommandoRapidFire,
    ECommandoSkills_MAX
};

var private const PerkSkill WeaponDamage;
var private const PerkSkill CloakedEnemyDetection;
var private const PerkSkill ZedTimeExtension;
var private const PerkSkill ReloadSpeed;
var private const PerkSkill CallOut;
var private const PerkSkill NightVision;
var private const float RapidFireFiringRate;
var private const float BackupWeaponSwitchModifier;
var private const float HollowPointRecoilModifier;
var private const float HealthArmorModifier;
var Texture2D WhiteMaterial;

function SetPlayerDefaults(Pawn PlayerPawn)
{
    local float NewArmor;

    super.SetPlayerDefaults(PlayerPawn);
    if((OwnerPawn.Role == ROLE_Authority) && IsHealthIncreaseActive())
    {
        NewArmor = float(OwnerPawn.default.MaxArmor) * GetHealthArmorModifier();
        OwnerPawn.AddArmor(Round(NewArmor));
    }
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType, optional int HitZoneIdx)
{
    local KFWeapon KFW;
    local float TempDamage;

    TempDamage = float(InDamage);
    if(DamageCauser != none)
    {
        KFW = GetWeaponFromDamageCauser(DamageCauser);
    }
    if(((KFW != none) && IsWeaponOnPerk(KFW)) || (DamageType != none) && IsDamageTypeOnPerk(DamageType))
    {
        TempDamage += (float(InDamage) * (GetPassiveValue(WeaponDamage, CurrentLevel)));
        if(IsRapidFireActive())
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[9])));
        }
    }
    if(KFW != none)
    {
        if(IsBackupActive() && IsBackupWeapon(KFW))
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[2])));
        }
        if(IsWeaponOnPerk(KFW))
        {
            if(IsHollowPointsActive())
            {
                TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[6])));
            }
        }
    }
    InDamage = FCeil(TempDamage);
}

simulated function float GetCloakDetectionRange()
{
    return GetPassiveValue(CloakedEnemyDetection, CurrentLevel);
}

static simulated function float GetZedTimeExtension(byte Level)
{
    if(Level >= 25)
    {
        return default.ZedTimeExtension.MaxValue;        
    }
    else
    {
        if(Level >= 20)
        {
            return default.ZedTimeExtension.StartingValue + (float(4) * default.ZedTimeExtension.Increment);            
        }
        else
        {
            if(Level >= 15)
            {
                return default.ZedTimeExtension.StartingValue + (float(3) * default.ZedTimeExtension.Increment);                
            }
            else
            {
                if(Level >= 10)
                {
                    return default.ZedTimeExtension.StartingValue + (float(2) * default.ZedTimeExtension.Increment);                    
                }
                else
                {
                    if(Level >= 5)
                    {
                        return default.ZedTimeExtension.StartingValue + default.ZedTimeExtension.Increment;
                    }
                }
            }
        }
    }
    return 1;
}

private static final simulated function float GetExtraReloadSpeed(int Level)
{
    return default.ReloadSpeed.Increment * float(FFloor(float(Level) / 5));
}

simulated function float GetReloadRateScale(KFWeapon KFW)
{
    if(IsWeaponOnPerk(KFW))
    {
        return 1 - GetExtraReloadSpeed(CurrentLevel);
    }
    return 1;
}

function ModifyHealth(out int InHealth)
{
    local float TempHealth;

    if(IsHealthIncreaseActive())
    {
        TempHealth = float(InHealth);
        TempHealth += (float(InHealth) * (GetSkillValue(PerkSkills[4])));
        InHealth = Round(TempHealth);
    }
}

function ModifyArmor(out byte MaxArmor)
{
    local float TempArmor;

    TempArmor = float(MaxArmor);
    TempArmor += (float(MaxArmor) * (GetSkillValue(PerkSkills[4])));
    MaxArmor = byte(Round(TempArmor));
}

simulated function bool GetUsingTactialReload(KFWeapon KFW)
{
    return IsTacticalReloadActive() && (IsWeaponOnPerk(KFW)) || IsBackupWeapon(KFW);
}

simulated function ModifyMagSizeAndNumber(KFWeapon KFW, out byte MagazineCapacity, optional class<KFPerk> WeaponPerkClass)
{
    local float TempCapacity;

    TempCapacity = float(MagazineCapacity);
    if((IsWeaponOnPerk(KFW, WeaponPerkClass)) && (KFW == none) || !KFW.bNoMagazine)
    {
        if(KFW != none)
        {
            if(IsLargeMagActive())
            {
                TempCapacity += (float(MagazineCapacity) * (GetSkillValue(PerkSkills[1])));
            }
            if(IsEatLeadActive())
            {
                TempCapacity += (float(MagazineCapacity) * (GetSkillValue(PerkSkills[7])));
            }
        }
    }
    MagazineCapacity = byte(Round(TempCapacity));
}

simulated function ModifyMaxSpareAmmoAmount(KFWeapon KFW, out int MaxSpareAmmo, const optional out STraderItem TraderItem)
{
    local float TempMaxSpareAmmoAmount;

    if(IsAmmoVestActive() && IsWeaponOnPerk(KFW, TraderItem.AssociatedPerkClass))
    {
        TempMaxSpareAmmoAmount = float(MaxSpareAmmo);
        TempMaxSpareAmmoAmount += (float(MaxSpareAmmo) * (GetSkillValue(PerkSkills[5])));
        MaxSpareAmmo = Round(TempMaxSpareAmmoAmount);
    }
}

simulated function float GetZedTimeModifier(KFWeapon W)
{
    local name StateName;

    StateName = W.GetStateName();
    if(IsProfessionalActive())
    {
        if(StateName == 'Reloading')
        {
            return 1;            
        }
        else
        {
            if((StateName == 'WeaponPuttingDown') || StateName == 'WeaponEquipping')
            {
                return 0.3;
            }
        }
    }
    if((CouldRapidFireActive()) && ZedTimeModifyingStates.Find(StateName != -1)
    {
        return RapidFireFiringRate;
    }
    return 0;
}

function float GetStumblePowerModifier(optional KFPawn KFP, optional class<KFDamageType> DamageType, optional out float CooldownModifier, optional byte BodyPart)
{
    local KFWeapon KFW;

    KFW = GetOwnerWeapon();
    if(IsImpactActive() && IsWeaponOnPerk(KFW))
    {
        return 1 + (GetSkillValue(PerkSkills[3]));
    }
    return 1;
}

simulated function ModifyWeaponSwitchTime(out float ModifiedSwitchTime)
{
    if(IsBackupActive())
    {
        ModifiedSwitchTime -= (ModifiedSwitchTime * GetBackupWeaponSwitchModifier());
    }
}

static final simulated function float GetBackupWeaponSwitchModifier()
{
    return default.BackupWeaponSwitchModifier;
}

simulated function ModifyRecoil(out float CurrentRecoilModifier, KFWeapon KFW)
{
    if((IsWeaponOnPerk(KFW)) && IsHollowPointsActive())
    {
        CurrentRecoilModifier -= (CurrentRecoilModifier * GetHollowPointRecoilModifier());
    }
}

static final simulated function float GetHollowPointRecoilModifier()
{
    return default.HollowPointRecoilModifier;
}

private static final function float GetHealthArmorModifier()
{
    return default.HealthArmorModifier;
}

simulated function bool IsCallOutActive()
{
    return true;
}

simulated function bool HasNightVision()
{
    return true;
}

protected simulated function bool IsRapidFireActive()
{
    return PerkSkills[9].bActive && WorldInfo.TimeDilation < 1;
}

protected simulated function bool CouldRapidFireActive()
{
    return PerkSkills[9].bActive;
}

private final simulated function bool IsLargeMagActive()
{
    return PerkSkills[1].bActive;
}

private final simulated function bool IsBackupActive()
{
    return PerkSkills[2].bActive;
}

private final simulated function bool IsHollowPointsActive()
{
    return PerkSkills[6].bActive;
}

private final simulated function bool IsTacticalReloadActive()
{
    return PerkSkills[0].bActive;
}

private final function bool IsImpactActive()
{
    return PerkSkills[3].bActive;
}

private final function bool IsHealthIncreaseActive()
{
    return PerkSkills[4].bActive;
}

private final function bool IsEatLeadActive()
{
    return PerkSkills[7].bActive;
}

private final function bool IsAmmoVestActive()
{
    return PerkSkills[5].bActive;
}

private final simulated function bool IsProfessionalActive()
{
    return PerkSkills[8].bActive;
}

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round((GetPassiveValue(default.WeaponDamage, Level)) * float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.CloakedEnemyDetection, Level)) / float(100))) $ "m";
    PassiveValues[2] = string(Round(GetZedTimeExtension(Level))) $ "sec";
    PassiveValues[3] = string(Round(GetExtraReloadSpeed(Level) * float(100))) $ "%";
    PassiveValues[4] = "";
    PassiveValues[5] = "";
    Increments[0] = ((("[" @ string(int(default.WeaponDamage.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = ((("[" @ string(int(default.CloakedEnemyDetection.Increment / float(100)))) $ "m /") @ default.LevelString) @ "]";
    Increments[2] = ((((("[" @ string(int(default.ZedTimeExtension.StartingValue))) @ "+") @ string(int(default.ZedTimeExtension.Increment))) @ "sec / 5") @ default.LevelString) @ "]";
    Increments[3] = ((("[" @ string(int(default.ReloadSpeed.Increment * float(100)))) $ "% / 5") @ default.LevelString) @ "]";
    Increments[4] = "";
    Increments[5] = "";
}

static simulated function int GetStalkerKillXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

simulated function DrawSpecialPerkHUD(Canvas C)
{
    local KFPawn_Monster KFPM;
    local float DetectionRangeSq, ThisDot;

    if(CheckOwnerPawn())
    {
        DetectionRangeSq = Square(GetPassiveValue(CloakedEnemyDetection, CurrentLevel));
        foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFPM)
        {
            ThisDot = Normal(vector(OwnerPawn.GetViewRotation())) Dot Normal(KFPM.Location - OwnerPawn.Location);
            if(((KFPM.IsAliveAndWell() && KFPM.bShowHealth) && DetectionRangeSq >= VSizeSq(KFPM.Location - OwnerPawn.Location)) && ThisDot > float(0))
            {
                DrawZedHealthbar(C, KFPM);
            }            
        }        
    }
}

simulated function DrawZedHealthbar(Canvas C, KFPawn_Monster KFPM)
{
    local Vector ScreenPos, TargetLocation, CameraLocation;
    local float HealthBarLength, HealthbarHeight, HealthScale;

    CheckOwnerPawn();
    CameraLocation = OwnerPawn.GetPawnViewLocation();
    HealthBarLength = FMin(50 * (float(C.SizeX) / 1024), 50);
    HealthbarHeight = FMin(6 * (float(C.SizeX) / 1024), 6);
    HealthScale = float(KFPM.Health) / float(KFPM.HealthMax);
    if((KFPM.bCrawler && KFPM.Floor.Z <= -0.7) && KFPM.Physics == 8)
    {
        TargetLocation = KFPM.Location + ((vect(0, 0, -1) * KFPM.GetCollisionHeight()) * 1.2);        
    }
    else
    {
        TargetLocation = KFPM.Location + ((vect(0, 0, 1) * KFPM.GetCollisionHeight()) * 1.2);
    }
    ScreenPos = C.Project(TargetLocation);
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(C.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(C.SizeY))
    {
        return;
    }
    if(FastTrace(TargetLocation, CameraLocation))
    {
        C.EnableStencilTest(true);
        C.SetDrawColor(0, 0, 0, 255);
        C.SetPos(ScreenPos.X - (HealthBarLength * 0.5), ScreenPos.Y);
        C.DrawTileStretched(WhiteMaterial, HealthBarLength, HealthbarHeight, 0, 0, 32, 32);
        C.SetDrawColor(237, 8, 0, 255);
        C.SetPos((ScreenPos.X - (HealthBarLength * 0.5)) + 1, ScreenPos.Y + 1);
        C.DrawTileStretched(WhiteMaterial, (HealthBarLength - 2) * HealthScale, HealthbarHeight - 2, 0, 0, 32, 32);
        C.EnableStencilTest(false);
    }
}

private final simulated function name LogTacticalReload()
{
    local KFWeapon KFW;

    KFW = GetOwnerWeapon();
    return KFW.GetReloadAnimName(GetUsingTactialReload(KFW));
}

simulated function LogPerkSkills()
{
    super.LogPerkSkills();
    if(bLogPerk)
    {
    }
}

defaultproperties
{
    WeaponDamage=(Name="Weapon Damage",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    CloakedEnemyDetection=(Name="Cloaked Enemy Detection Range",Increment=200,Rank=0,StartingValue=1000,MaxValue=6000,ModifierValue=0,IconPath="",bActive=false)
    ZedTimeExtension=(Name="Zed Time Extension",Increment=1,Rank=0,StartingValue=1,MaxValue=6,ModifierValue=0,IconPath="",bActive=false)
    ReloadSpeed=(Name="Reload Speed",Increment=0.02,Rank=0,StartingValue=0,MaxValue=0.1,ModifierValue=0,IconPath="",bActive=false)
    CallOut=(Name="Call Out",Increment=2,Rank=0,StartingValue=0,MaxValue=50,ModifierValue=0,IconPath="",bActive=false)
    NightVision=(Name="Night Vision",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="",bActive=false)
    RapidFireFiringRate=0.5
    BackupWeaponSwitchModifier=0.5
    HollowPointRecoilModifier=0.5
    HealthArmorModifier=0.25
    WhiteMaterial=Texture2D'EngineResources.WhiteSquareTexture'
    ProgressStatID=1
    PerkBuildStatID=2
    SecondaryXPModifier[0]=3
    SecondaryXPModifier[1]=5
    SecondaryXPModifier[2]=6
    SecondaryXPModifier[3]=9
    PerkName="Commando"
    Passives(0)=(Title="Perk Weapon Damage",Description="%x% increase in Commando weapon damage.",IconPath="")
    Passives(1)=(Title="Cloaked Enemy & Health Bar Detection",Description="10m plus %x%m increase by each level",IconPath="")
    Passives(2)=(Title="Zed Time Extension",Description="Zed time lasts %x% longer",IconPath="")
    Passives(3)=(Title="Reload Speed",Description="%x%% increase every 5 levels",IconPath="")
    Passives(4)=(Title="+Night Vision Capability",Description="Flashlights - AND Night Vision Goggles",IconPath="")
    Passives(5)=(Title="+Call Out Cloaked Zeds",Description="Allow teammates to see cloaked units",IconPath="")
    SkillCatagories[0]="Tactics"
    SkillCatagories[1]="Advanced Tactics"
    SkillCatagories[2]="Survival"
    SkillCatagories[3]="Weapon Specialist"
    SkillCatagories[4]="Advanced Training"
    EXPAction1="Dealing Commando weapon damage"
    EXPAction2="Killing Stalkers with Commando weapons"
    PerkIcon=Texture2D'UI_PerkIcons_TEX.UI_PerkIcon_Commando'
    PerkSkills(0)=(Name="TacticalReload",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_TacticalReload",bActive=false)
    PerkSkills(1)=(Name="LargeMags",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_LargeMag",bActive=false)
    PerkSkills(2)=(Name="Backup",Increment=0,Rank=0,StartingValue=0.6,MaxValue=0.6,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_Backup",bActive=false)
    PerkSkills(3)=(Name="Impact",Increment=0,Rank=0,StartingValue=1.5,MaxValue=1.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_Impact",bActive=false)
    PerkSkills(4)=(Name="HealthIncrease",Increment=0,Rank=0,StartingValue=0.25,MaxValue=0.25,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_HP",bActive=false)
    PerkSkills(5)=(Name="AmmoVest",Increment=0,Rank=0,StartingValue=0.2,MaxValue=0.2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_AmmoVest",bActive=false)
    PerkSkills(6)=(Name="HollowPoints",Increment=0,Rank=0,StartingValue=0.2,MaxValue=0.2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_SingleFire",bActive=false)
    PerkSkills(7)=(Name="EatLead",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_AutoFire",bActive=false)
    PerkSkills(8)=(Name="Professional",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_Professional",bActive=false)
    PerkSkills(9)=(Name="RapidFire",Increment=0,Rank=0,StartingValue=0.03,MaxValue=0.03,ModifierValue=0,IconPath="UI_PerkTalent_TEX.commando.UI_Talents_Commando_RapidFire",bActive=false)
    ZedTimeModifyingStates(0)=WeaponFiring
    ZedTimeModifyingStates(1)=WeaponBurstFiring
    ZedTimeModifyingStates(2)=WeaponSingleFiring
    bCanSeeCloakedZeds=true
    PrimaryWeaponDef=Class'KFWeapDef_AR15'
    GrenadeWeaponDef=Class'KFWeapDef_Grenade_Commando'
    HeadshotAccuracyHandicap=-3
}