/*******************************************************************************
 * KFPerk_Commando generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_Commando extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision,Mobile,Object,Debug,Advanced,Physics,Actor,Attachment,Display);

enum ECommandoSkills
{
    ECommandoLargeMags,
    ECommandoBackup,
    ECommandoImpact,
    ECommandoTacticalReload,
    ECommandoLeadership,
    ECommandoCallOut,
    ECommandoSingleFire,
    ECommandoAutoFire,
    ECommandoRapidFire,
    ECommandoProfessional,
    ECommandoSkills_MAX
};

var const PerkSkill WeaponDamage;
var const PerkSkill CloakedEnemyDetection;
var const PerkSkill HealthBarDetection;
var const PerkSkill ZedTimeExtension;
var const PerkSkill ExtraHealth;
var const PerkSkill NightVision;
var const float RapidFireFiringRate;
var Texture2D WhiteMaterial;
var const array<name> ZedTimeModifyingStates;

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType)
{
    local KFWeapon KFW;
    local float TempDamage;

    TempDamage = float(InDamage);
    if(DamageCauser != none)
    {
        KFW = GetWeaponFromDamageCauser(DamageCauser);
    }
    if(((KFW != none) && IsWeaponOnPerk(KFW)) || (DamageType != none) && IsDamageTypeOnPerk(DamageType))
    {
        TempDamage += (float(InDamage) * (GetPassiveValue(WeaponDamage, CurrentLevel)));
        if(IsRapidFireActive())
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[8])));
        }
    }
    if(KFW != none)
    {
        if(IsBackupActive() && IsBackupWeapon(KFW))
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[1])));
        }
        if(IsSingleFireActive() && KFW.GetStateName() == 'WeaponSingleFiring')
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[6])));
        }
        if(IsAutoFireActive() && (KFW.GetStateName() == 'WeaponBurstFiring') || KFW.GetStateName() == 'WeaponFiring')
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[7])));
        }
    }
    InDamage = FCeil(TempDamage);
}

simulated function float GetCloakDetectionRange()
{
    return GetPassiveValue(CloakedEnemyDetection, CurrentLevel);
}

static simulated function float GetZedTimeExtension(byte Level)
{
    if(Level >= 25)
    {
        return default.ZedTimeExtension.MaxValue;        
    }
    else
    {
        if(Level >= 20)
        {
            return default.ZedTimeExtension.StartingValue + (float(4) * default.ZedTimeExtension.Increment);            
        }
        else
        {
            if(Level >= 15)
            {
                return default.ZedTimeExtension.StartingValue + (float(3) * default.ZedTimeExtension.Increment);                
            }
            else
            {
                if(Level >= 10)
                {
                    return default.ZedTimeExtension.StartingValue + (float(2) * default.ZedTimeExtension.Increment);                    
                }
                else
                {
                    if(Level >= 5)
                    {
                        return default.ZedTimeExtension.StartingValue + default.ZedTimeExtension.Increment;
                    }
                }
            }
        }
    }
    return 1;
}

function ModifyHealth(out int InHealth)
{
    InHealth += int(GetPassiveValue(ExtraHealth, GetLevel()));
}

simulated function bool GetUsingTactialReload(KFWeapon KFW)
{
    return IsTacticalReloadActive() && (IsWeaponOnPerk(KFW)) || IsBackupWeapon(KFW);
}

simulated function ModifyMagSizeAndNumber(KFWeapon KFW, out int MagazineCapacity, optional class<KFPerk> WeaponPerkClass)
{
    if(((IsWeaponOnPerk(KFW, WeaponPerkClass)) && IsLargeMagActive()) && (KFW == none) || !KFW.bNoMagazine)
    {
        if(KFW != none)
        {
            MagazineCapacity *= (float(1) + (GetSkillValue(PerkSkills[0])));
        }
    }
}

simulated function float GetZedTimeModifier(KFWeapon W)
{
    local name StateName;

    StateName = W.GetStateName();
    if(IsProfessionalActive())
    {
        if(StateName == 'Reloading')
        {
            return 1;            
        }
        else
        {
            if((StateName == 'WeaponPuttingDown') || StateName == 'WeaponEquipping')
            {
                return 0.3;
            }
        }
    }
    if((IsRapidFireActive()) && ZedTimeModifyingStates.Find(StateName != -1)
    {
        return RapidFireFiringRate;
    }
    return 0;
}

function float GetStumblePowerModifier(optional KFPawn KFP, optional class<KFDamageType> DamageType, optional out float CooldownModifier)
{
    local KFWeapon KFW;

    KFW = GetOwnerWeapon();
    if(IsImpactActive() && IsWeaponOnPerk(KFW))
    {
        return 1 + (GetSkillValue(PerkSkills[2]));
    }
    return 1;
}

static simulated function float GetLeadshipRateReduction()
{
    return GetSkillValue(default.PerkSkills[4]);
}

simulated function bool IsCallOutActive()
{
    return PerkSkills[5].bActive;
}

simulated function bool HasNightVision()
{
    return true;
}

protected simulated function bool IsRapidFireActive()
{
    return PerkSkills[8].bActive && WorldInfo.TimeDilation < 1;
}

private final simulated function bool IsLargeMagActive()
{
    return PerkSkills[0].bActive;
}

private final function bool IsBackupActive()
{
    return PerkSkills[1].bActive;
}

private final function bool IsSingleFireActive()
{
    return PerkSkills[6].bActive;
}

private final simulated function bool IsTacticalReloadActive()
{
    return PerkSkills[3].bActive;
}

simulated function bool IsLeadershipActive()
{
    return PerkSkills[4].bActive;
}

private final function bool IsImpactActive()
{
    return PerkSkills[2].bActive;
}

private final function bool IsAutoFireActive()
{
    return PerkSkills[7].bActive;
}

private final simulated function bool IsProfessionalActive()
{
    return PerkSkills[9].bActive;
}

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round((GetPassiveValue(default.WeaponDamage, Level)) * float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.CloakedEnemyDetection, Level)) / float(100))) $ "m";
    PassiveValues[2] = string(Round((GetPassiveValue(default.HealthBarDetection, Level)) / float(100))) $ "m";
    PassiveValues[3] = string(Round(GetZedTimeExtension(Level))) $ "sec";
    PassiveValues[4] = string(Round(GetPassiveValue(default.ExtraHealth, Level))) $ "%";
    PassiveValues[5] = "";
    Increments[0] = ((("[" @ string(int(default.WeaponDamage.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = ((("[" @ string(int(default.CloakedEnemyDetection.Increment / float(100)))) $ "m /") @ default.LevelString) @ "]";
    Increments[2] = ((("[" @ string(int(default.HealthBarDetection.Increment / float(100)))) $ "m /") @ default.LevelString) @ "]";
    Increments[3] = ((((("[" @ string(int(default.ZedTimeExtension.StartingValue))) @ "+") @ string(int(default.ZedTimeExtension.Increment))) @ "sec / 5") @ default.LevelString) @ "]";
    Increments[4] = ((("[" @ string(int(default.ExtraHealth.Increment))) $ "% /") @ default.LevelString) @ "]";
    Increments[5] = "";
}

static simulated function int GetStalkerKillXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

simulated function DrawSpecialPerkHUD(Canvas C)
{
    local KFPawn_Monster KFPM;
    local float DetectionRangeSq, ThisDot;

    if(CheckOwnerPawn())
    {
        DetectionRangeSq = Square(GetPassiveValue(HealthBarDetection, CurrentLevel));
        foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFPM)
        {
            ThisDot = Normal(vector(OwnerPawn.GetViewRotation())) Dot Normal(KFPM.Location - OwnerPawn.Location);
            if(((KFPM.IsAliveAndWell() && KFPM.bShowHealth) && DetectionRangeSq >= VSizeSq(KFPM.Location - OwnerPawn.Location)) && ThisDot > float(0))
            {
                DrawZedHealthbar(C, KFPM);
            }            
        }        
    }
}

simulated function DrawZedHealthbar(Canvas C, KFPawn_Monster KFPM)
{
    local Vector ScreenPos, TargetLocation, CameraLocation;
    local float HealthBarLength, HealthbarHeight, HealthScale;

    CheckOwnerPawn();
    CameraLocation = OwnerPawn.GetPawnViewLocation();
    HealthBarLength = FMin(50 * (float(C.SizeX) / 1024), 50);
    HealthbarHeight = FMin(6 * (float(C.SizeX) / 1024), 6);
    HealthScale = float(KFPM.Health) / float(KFPM.HealthMax);
    if((KFPM.bCrawler && KFPM.Floor.Z <= -0.7) && KFPM.Physics == 8)
    {
        TargetLocation = KFPM.Location + ((vect(0, 0, -1) * KFPM.GetCollisionHeight()) * 1.2);        
    }
    else
    {
        TargetLocation = KFPM.Location + ((vect(0, 0, 1) * KFPM.GetCollisionHeight()) * 1.2);
    }
    ScreenPos = C.Project(TargetLocation);
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(C.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(C.SizeY))
    {
        return;
    }
    if(FastTrace(TargetLocation, CameraLocation))
    {
        C.EnableStencilTest(true);
        C.SetDrawColor(0, 0, 0, 255);
        C.SetPos(ScreenPos.X - (HealthBarLength * 0.5), ScreenPos.Y);
        C.DrawTileStretched(WhiteMaterial, HealthBarLength, HealthbarHeight, 0, 0, 32, 32);
        C.SetDrawColor(237, 8, 0, 255);
        C.SetPos((ScreenPos.X - (HealthBarLength * 0.5)) + 1, ScreenPos.Y + 1);
        C.DrawTileStretched(WhiteMaterial, (HealthBarLength - 2) * HealthScale, HealthbarHeight - 2, 0, 0, 32, 32);
        C.EnableStencilTest(false);
    }
}

private final simulated function name LogTacticalReload()
{
    local KFWeapon KFW;

    KFW = GetOwnerWeapon();
    return KFW.GetReloadAnimName(GetUsingTactialReload(KFW));
}

simulated function LogPerkSkills()
{
    super.LogPerkSkills();
    if(bLogPerk)
    {
    }
}

defaultproperties
{
    WeaponDamage=(Name="Weapon Damage",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    CloakedEnemyDetection=(Name="Cloacked Enemy Detection Range",Increment=200,Rank=0,StartingValue=0,MaxValue=5000,ModifierValue=0,IconPath="",bActive=false)
    HealthBarDetection=(Name="Health Bar Detection Range",Increment=200,Rank=0,StartingValue=0,MaxValue=5000,ModifierValue=0,IconPath="",bActive=false)
    ZedTimeExtension=(Name="Zed Time Extension",Increment=1,Rank=0,StartingValue=1,MaxValue=6,ModifierValue=0,IconPath="",bActive=false)
    ExtraHealth=(Name="Extra Health",Increment=2,Rank=0,StartingValue=0,MaxValue=50,ModifierValue=0,IconPath="",bActive=false)
    NightVision=(Name="Night Vision",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="",bActive=false)
    RapidFireFiringRate=0.5
    WhiteMaterial=Texture2D'EngineResources.WhiteSquareTexture'
    ZedTimeModifyingStates(0)=WeaponFiring
    ZedTimeModifyingStates(1)=WeaponBurstFiring
    ZedTimeModifyingStates(2)=WeaponSingleFiring
    ProgressStatID=1
    PerkBuildStatID=2
    SecondaryXPModifier[0]=3
    SecondaryXPModifier[1]=5
    SecondaryXPModifier[2]=6
    SecondaryXPModifier[3]=9
    PerkName="Commando"
    Passives(0)=(Title="Perk Weapon Damage",Description="%x% increase in Commando weapon damage.",IconPath="")
    Passives(1)=(Title="Cloaked Enemy Detection",Description="Cloaked detection increased by %x%",IconPath="")
    Passives(2)=(Title="Health Bar Detection",Description="Health bar detection increased by %x%",IconPath="")
    Passives(3)=(Title="Zed Time Extension",Description="Zed time lasts %x%",IconPath="")
    Passives(4)=(Title="Health Increase",Description="Health increased by %x%",IconPath="")
    Passives(5)=(Title="+Night Vision Capability",Description="Flashlights - AND Night Vision Goggles",IconPath="")
    SkillCatagories[0]="Supply"
    SkillCatagories[1]="Weapon Handling"
    SkillCatagories[2]="Awareness"
    SkillCatagories[3]="Weapon Specialist"
    SkillCatagories[4]="Advanced Training"
    EXPAction1="Dealing Commando weapon damage"
    EXPAction2="Killing Stalkers with Commando weapons"
    PerkIcon=Texture2D'UI_PerkIcons_TEX.UI_PerkIcon_Commando'
    PerkSkills(0)=(Name="LargeMags",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_LargeMag",bActive=false)
    PerkSkills(1)=(Name="Backup",Increment=0,Rank=0,StartingValue=0.6,MaxValue=0.6,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_Backup",bActive=false)
    PerkSkills(2)=(Name="Impact",Increment=0,Rank=0,StartingValue=0.3,MaxValue=0.3,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_Impact",bActive=false)
    PerkSkills(3)=(Name="TacticalReload",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_TacticalReload",bActive=false)
    PerkSkills(4)=(Name="Leadership",Increment=0,Rank=0,StartingValue=0.1,MaxValue=0.1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_Nightvision",bActive=false)
    PerkSkills(5)=(Name="CallOut",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_CallOut",bActive=false)
    PerkSkills(6)=(Name="SingleFire",Increment=0,Rank=0,StartingValue=0.2,MaxValue=0.2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_SingleFire",bActive=false)
    PerkSkills(7)=(Name="Autofire",Increment=0,Rank=0,StartingValue=0.2,MaxValue=0.2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_AutoFire",bActive=false)
    PerkSkills(8)=(Name="RapidFire",Increment=0,Rank=0,StartingValue=0.03,MaxValue=0.03,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_RapidFire",bActive=false)
    PerkSkills(9)=(Name="Professional",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Commando.UI_Talents_Commando_Professional",bActive=false)
    bCanSeeCloakedZeds=true
    PrimaryWeaponClassName="KFGameContent.KFWeap_AssaultRifle_AR15"
    MeleeWeaponClassName="KFGameContent.KFWeap_Knife_Commando"
    GrenadeClassName="KFGameContent.KFProj_HEGrenade"
}