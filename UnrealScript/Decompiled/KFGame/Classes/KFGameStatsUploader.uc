/*******************************************************************************
 * KFGameStatsUploader generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameStatsUploader extends GameplayEventsReader
    native(Analytics)
    config(GameStats);

var KFGameStateObject KFGameState;
var KFGameplayEventsHandlerOnline StatsHandler;
var KFGameStatsAggregatorOnline AggregateHandler;
var string AggregatorClassName;
var bool bLogAnalytics;
var config bool bKeepAnalyticsFile;
var config bool bKeepGameStatsFile;
var config bool bUploadDedicatedServer;
var config bool bUploadListenServer;
var config bool bUploadOfflineGame;
var config bool bUploadPerformanceEvents;
var int StatsFileIndex;
var string FileToUpload;
var GameplayEventsHeader PayloadHeader;
var init array<init byte> DataPayload;
var native const Pointer MemoryArchive;
var config float MinMatchDuration;
var config int MinNumberPlayers;

function Init(KFGameplayEventsWriter Writer)
{
    if(bLogAnalytics)
    {
        LogInternal("KFGameStatsUploader: Uploading using class:" @ string(Name), 'Analytics');
    }
    if(bLogAnalytics)
    {
        LogInternal("KFGameStatsUploader: Aggregating using class:" @ AggregatorClassName, 'Analytics');
    }
    if(AggregatorClassName != "")
    {
        KFGameState = new (self) Class'KFGameStateObject';
        StatsHandler = new (none) Class'KFGameplayEventsHandlerOnline';
        AggregateHandler = new (none, AggregatorClassName) Class'KFGameStatsAggregatorOnline';
        StatsHandler.KFGameState = KFGameState;
        FileToUpload = Writer.GetFilename();
        LogInternal("File to upload:" @ FileToUpload);
        StatsFileIndex = Writer.StatsFileIndex;
        Flush();
    }
}

// Export UKFGameStatsUploader::execFlush(FFrame&, void* const)
native function Flush();

// Export UKFGameStatsUploader::execIsFinishedFlushing(FFrame&, void* const)
native function bool IsFinishedFlushing();

// Export UKFGameStatsUploader::execUploadGameplayStats(FFrame&, void* const)
native function UploadGameplayStats(TWOnlineEventsInterface OnlineInterface);

// Export UKFGameStatsUploader::execSerializePayloadHeader(FFrame&, void* const)
protected native function SerializePayloadHeader();

// Export UKFGameStatsUploader::execSerializePayloadFooter(FFrame&, void* const)
protected native function SerializePayloadFooter();

defaultproperties
{
    AggregatorClassName="KFGame.KFGameStatsAggregatorOnline"
    bUploadDedicatedServer=true
    bUploadListenServer=true
    bUploadOfflineGame=true
    bUploadPerformanceEvents=true
    MinMatchDuration=20
    MinNumberPlayers=1
}