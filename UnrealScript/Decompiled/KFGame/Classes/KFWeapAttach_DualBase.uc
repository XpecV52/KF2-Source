/*******************************************************************************
 * KFWeapAttach_DualBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_DualBase extends KFWeaponAttachment
    notplaceable
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

const ShootLeftAnim = 'ADD_Shoot_LW';
const ShootRightAnim = 'ADD_Shoot_RW';
const LeftWeaponSocket = 'LW_Weapon';

/** Left hand skeletal mesh. If none is specified, the right hand skeletal mesh will be duplicated. */
var() const SkeletalMesh LeftHandSkelMesh;
/** Anim set to use for 3rd person weapon anims */
var() AnimSet LeftWeaponAnimSet;
var protected export editinline transient SkeletalMeshComponent LeftWeapMesh;
var protected transient KFMuzzleFlash LeftMuzzleFlash;
/** A reference to the left muzzle flash template (to specify left shell eject socket) */
var() protected const KFMuzzleFlash LeftMuzzleFlashTemplate;
var protected transient AnimNodeSequence LeftWeapAnimNode;
var transient bool bPlayFXOnSecondWeapon;
var transient float LastChooseWeaponTime;

event PreBeginPlay()
{
    if((LeftWeapMesh != none) && !bWeapMeshIsPawnMesh)
    {
        if(LeftWeaponAnimSet != none)
        {
            LeftWeapMesh.AnimSets[0] = LeftWeaponAnimSet;            
        }
        else
        {
            if(WeaponAnimSet != none)
            {
                LeftWeapMesh.AnimSets[0] = WeaponAnimSet;
            }
        }
        if(LeftHandSkelMesh != none)
        {
            LeftWeapMesh.SkeletalMesh = LeftHandSkelMesh;
        }
        LeftWeapAnimNode = AnimNodeSequence(LeftWeapMesh.Animations);
    }
    super.PreBeginPlay();
}

simulated function AttachTo(KFPawn P)
{
    super.AttachTo(P);
    if(bWeapMeshIsPawnMesh)
    {
        LeftWeapMesh = P.Mesh;        
    }
    else
    {
        if(LeftWeapMesh != none)
        {
            if(LeftHandSkelMesh == none)
            {
                LeftWeapMesh = new (self) Class'SkeletalMeshComponent' (WeapMesh);
            }
            LeftWeapMesh.SetShadowParent(P.Mesh);
            P.Mesh.AttachComponent(LeftWeapMesh, 'LW_Weapon');
        }
    }
}

simulated function DetachFrom(KFPawn P)
{
    super.DetachFrom(P);
    if(LeftMuzzleFlash != none)
    {
        LeftMuzzleFlash.DetachMuzzleFlash(LeftWeapMesh);
    }
    if(bWeapMeshIsPawnMesh)
    {
        LeftWeapMesh = none;        
    }
    else
    {
        if(LeftWeapMesh != none)
        {
            LeftWeapMesh.SetShadowParent(none);
            P.Mesh.DetachComponent(LeftWeapMesh);
        }
    }
}

simulated function AttachMuzzleFlash()
{
    super.AttachMuzzleFlash();
    if((WeapMesh != none) && LeftMuzzleFlash == none)
    {
        LeftMuzzleFlash = new (self) Class'KFMuzzleFlash' (LeftMuzzleFlashTemplate);
        LeftMuzzleFlash.AttachMuzzleFlash(LeftWeapMesh);
    }
}

function bool ChooseActiveWeapon(byte FlashCount)
{
    if(LastChooseWeaponTime == WorldInfo.TimeSeconds)
    {
        return bPlayFXOnSecondWeapon;
    }
    if(FlashCount > 0)
    {
        bPlayFXOnSecondWeapon = (FlashCount & 1) == 0;        
    }
    else
    {
        bPlayFXOnSecondWeapon = !bPlayFXOnSecondWeapon;
    }
    LastChooseWeaponTime = WorldInfo.TimeSeconds;
    return bPlayFXOnSecondWeapon;
}

simulated function bool ThirdPersonFireEffects(Vector HitLocation, KFPawn P)
{
    ChooseActiveWeapon(P.FlashCount);
    SpawnTracer(GetMuzzleLocation(((bPlayFXOnSecondWeapon) ? 1 : 0)), HitLocation);
    if(!ActorEffectIsRelevant(P, false, MaxFireEffectDistance))
    {
        return false;
    }
    if(!P.IsDoingSpecialMove())
    {
        if(bPlayFXOnSecondWeapon)
        {
            P.PlayBodyAnim('ADD_Shoot_LW', 0, 1, ShootBlendInTime, ShootBlendOutTime);            
        }
        else
        {
            P.PlayBodyAnim('ADD_Shoot_RW', 0, 1, ShootBlendInTime, ShootBlendOutTime);
        }
    }
    CauseMuzzleFlash(P.FiringMode);
    return true;
}

simulated function CauseMuzzleFlash(byte FiringMode)
{
    if(bPlayFXOnSecondWeapon)
    {
        if((LeftMuzzleFlash == none) && MuzzleFlashTemplate != none)
        {
            AttachMuzzleFlash();
        }
        if(LeftMuzzleFlash != none)
        {
            LeftMuzzleFlash.CauseMuzzleFlash(FiringMode);
            if(LeftMuzzleFlash.bAutoActivateShellEject)
            {
                LeftMuzzleFlash.CauseShellEject();
            }
        }        
    }
    else
    {
        super.CauseMuzzleFlash(FiringMode);
    }
}

simulated function Vector GetMuzzleLocation(optional byte MuzzleID)
{
    local Vector SocketLocation;

    if(MuzzleID >= 1)
    {
        if((LeftMuzzleFlash == none) && MuzzleFlashTemplate != none)
        {
            AttachMuzzleFlash();
        }
        if(LeftMuzzleFlash != none)
        {
            LeftWeapMesh.GetSocketWorldLocationAndRotation(LeftMuzzleFlash.GetAltSocketName(), SocketLocation);
            return SocketLocation;
        }
    }
    return super.GetMuzzleLocation(MuzzleID);
}

simulated function PlayWeaponMeshAnim(name AnimName, AnimNodeSlot SyncNode, bool bLoop)
{
    super.PlayWeaponMeshAnim(AnimName, SyncNode, bLoop);
    LeftWeapMesh.PlayAnim(AnimName, 0, bLoop);
}

defaultproperties
{
    begin object name=SkeletalMeshComponent1 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeaponAttachment.MeshSequenceA'
        bForceRefpose=1
        bUpdateSkelWhenNotRendered=false
        bIgnoreControllersWhenNotRendered=true
        bPerBoneMotionBlur=true
        bOverrideAttachmentOwnerVisibility=true
        ReplacementPrimitive=none
        MaxDrawDistance=4000
        CachedMaxDrawDistance=4000
        bOwnerNoSee=true
        LightingChannels=(bInitialized=true,Outdoor=true)
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_DualBase.SkeletalMeshComponent1'
    LeftWeapMesh=SkeletalMeshComponent1
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_DualBase.SkeletalMeshComponent0.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_DualBase.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}