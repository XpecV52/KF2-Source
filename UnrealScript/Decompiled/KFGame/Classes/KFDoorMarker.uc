/*******************************************************************************
 * KFDoorMarker generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDoorMarker extends DoorMarker
    native(Waypoint)
    hidecategories(Navigation,Lighting,LightColor,Force,DoorMarker);

var(KF2) KFDoorActor MyKFDoor;
/** Optionally override the distance at which my door will be considered reached by NPCs */
var(KF2) float AdjustedReachThreshold;
/** Optionally override the extra cost for Zeds to want to path through this door if it's closed & welded */
var(KF2) int ExtraCostWhenWelded;

event bool SuggestMovePreparation(Pawn Other)
{
    local KFPawn_Monster KFPM;
    local int Count;

    if(KFPawn(Other).MyKFAIC != none)
    {
        KFPawn(Other).MyKFAIC.AILog_Internal((((((string(GetFuncName()) $ "() ") $ string(self)) $ " called for ") $ string(Other)) $ " Dist: ") $ string(VSize(Location - Other.Location)), 'Doors');
    }
    if(((MyKFDoor != none) && !MyKFDoor.IsCompletelyOpen()) && MyKFDoor.WeldIntegrity > 0)
    {
        foreach VisibleCollidingActors(Class'KFPawn_Monster', KFPM, 220, Other.Location,,, true)
        {
            if(((((KFPM != Other) && KFPM.IsAliveAndWell()) && VSizeSq2D(KFPM.Location - Location) < VSizeSq2D(Other.Location - Location)) && KFPM.MyKFAIC.DoorEnemy != none) && KFPM.MyKFAIC.DoorEnemy == MyKFDoor)
            {
                ++ Count;
            }            
        }        
        if(Count > 3)
        {
            if(KFPawn(Other).MyKFAIC != none)
            {
                KFPawn(Other).MyKFAIC.AILog_Internal(((((((string(GetFuncName()) $ "() ") $ string(self)) $ " - telling ") $ string(Other)) $ " to wait for ") $ string(MyKFDoor)) $ " to open", 'Doors');
            }
            Other.ZeroMovementVariables();
            KFPawn_Monster(Other).MyKFAIC.WaitForDoor(MyKFDoor);
            return true;
        }
    }
    return false;
    if((MyKFDoor == none) || MyKFDoor.IsCompletelyOpen())
    {
        return false;
    }
    if((KFPawn(Other) != none) && !KFPawn(Other).IsHumanControlled())
    {
        if(KFPawn(Other).MyKFAIC != none)
        {
            KFPawn(Other).MyKFAIC.AILog_Internal((((((string(GetFuncName()) $ " ") $ string(self)) $ " by ") $ string(KFPawn(Other).MyKFAIC)) $ " Dist: ") $ string(VSize(Location - Other.Location)), 'Doors');
        }
    }
    if((VSize(Location - Other.Location) < 72) || (Other.Controller != none) && Other.Controller.ActorReachable(self))
    {
        if(MyKFDoor.WeldIntegrity > 0)
        {
            if((KFPawn(Other) != none) && !KFPawn(Other).IsHumanControlled())
            {
                if(KFPawn(Other).MyKFAIC != none)
                {
                    KFPawn(Other).MyKFAIC.AILog_Internal(((((string(GetFuncName()) $ " ") $ string(self)) $ " by ") $ string(KFPawn(Other).MyKFAIC)) $ " calling WaitForDoor and NotifyAttacKDoor", 'Doors');
                }
            }
            KFAIController(Other.Controller).WaitForDoor(MyKFDoor);
            KFAIController(Other.Controller).NotifyAttackDoor(MyKFDoor);
            return true;            
        }
        else
        {
            if((KFPawn(Other) != none) && !KFPawn(Other).IsHumanControlled())
            {
                if(KFPawn(Other).MyKFAIC != none)
                {
                    KFPawn(Other).MyKFAIC.AILog_Internal(((((string(GetFuncName()) $ " ") $ string(self)) $ " by ") $ string(KFPawn(Other).MyKFAIC)) $ " calling WaitForDoor and UseDoor", 'Doors');
                }
            }
            KFAIController(Other.Controller).WaitForDoor(MyKFDoor);
            MyKFDoor.UseDoor(Other);
            return true;
        }        
    }
    else
    {
        return false;
    }
}

function MoverOpened()
{
    bBlocked = !bInitiallyClosed && bBlockedWhenClosed;
    bDoorOpen = bInitiallyClosed;
    WorldInfo.Game.NotifyNavigationChanged(self);
}

function MoverClosed()
{
    bBlocked = bInitiallyClosed && bBlockedWhenClosed;
    bDoorOpen = !bInitiallyClosed;
    WorldInfo.Game.NotifyNavigationChanged(self);
}

function bool ProceedWithMove(Pawn Other)
{
    local KFAIController KFAIC;

    if((KFPawn(Other) != none) && !KFPawn(Other).IsHumanControlled())
    {
        if(KFPawn(Other).MyKFAIC != none)
        {
            KFPawn(Other).MyKFAIC.AILog_Internal((((string(GetFuncName()) $ " ") $ string(self)) $ " for ") $ string(Other), 'Doors');
        }
    }
    KFAIC = KFAIController(Other.Controller);
    if((((KFAIC != none) && KFAIC.PendingDoor != none) && bWaitUntilCompletelyOpened && KFAIC.PendingDoor.IsCompletelyOpen()) || !bWaitUntilCompletelyOpened && KFAIC.PendingDoor.bIsDoorOpen || KFAIC.PendingDoor.bIsDestroyed)
    {
        return true;
    }
    if(((MyKFDoor != none) && bWaitUntilCompletelyOpened && MyKFDoor.IsCompletelyOpen()) || !bWaitUntilCompletelyOpened && MyKFDoor.bIsDoorOpen || MyKFDoor.bIsDestroyed)
    {
        return true;
    }
    if((((Other.Controller != none) && KFAIController(Other.Controller) != none) && bWaitUntilCompletelyOpened) && MyKFDoor != none)
    {
        KFAIController(Other.Controller).WaitForDoor(MyKFDoor);
    }
    return false;
}

event Actor SpecialHandling(Pawn Other)
{
    if(KFPawn(Other).MyKFAIC != none)
    {
        KFPawn(Other).MyKFAIC.AILog_Internal((((string(GetFuncName()) $ "() ") $ string(self)) $ " SpecialHandling event called for ") $ string(Other), 'Doors');
    }
    if((MyKFDoor == none) || MyKFDoor.IsCompletelyOpen())
    {
        return self;
    }
    if((KFPawn(Other) != none) && !KFPawn(Other).IsHumanControlled())
    {
        if(KFPawn(Other).MyKFAIC != none)
        {
            KFPawn(Other).MyKFAIC.AILog_Internal((((string(GetFuncName()) $ " ") $ string(self)) $ " calling for ") $ string(Other), 'Doors');
        }
    }
    return self;
}

defaultproperties
{
    AdjustedReachThreshold=72
    ExtraCostWhenWelded=3000
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFDoorMarker.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFDoorMarker.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFDoorMarker.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFDoorMarker.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFDoorMarker.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFDoorMarker.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFDoorMarker.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__KFDoorMarker.PathRenderer'
    Components(4)=PathRenderer
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFDoorMarker.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}