/*******************************************************************************
 * KFGFxHUD_PlayerBackpack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_PlayerBackpack extends GFxObject within GFxMoviePlayer;

var KFPlayerController MyKFPC;
var int LastDosh;
var int LastSpareAmmo;
var int LastMagazineAmmo;
var bool bUsesAmmo;
var bool bWasUsingAltFireMode;
var bool bUsesSecondaryAmmo;
var bool bUsesGrenadesAsSecondaryAmmo;
var bool bUsesSecondaryAmmoAltHUD;
var string LastSpecialAmmo;
var int LastFlashlightBattery;
var int LastGrenades;
var int LastSavedBuild;
var int LastMaxWeight;
var int LastWeight;
var byte LastSecondaryAmmo;
var int LastSecondarySpareAmmo;
var class<KFPerk> LastPerkClass;
var KFWeapon LastWeapon;
var KFInventoryManager MyKFInvManager;
var ASColorTransform DefaultColor;
var ASColorTransform RedColor;
var name OldState;

function InitializeHUD()
{
    MyKFPC = KFPlayerController(Outer.GetPC());
    if((MyKFPC.Pawn != none) && MyKFPC.Pawn.InvManager != none)
    {
        MyKFInvManager = KFInventoryManager(MyKFPC.Pawn.InvManager);
    }
    DefaultColor = GetObject("secondaryAmmoContainer").GetColorTransform();
    RedColor = GetObject("FlashlightContainer").GetColorTransform();
}

function TickHud(float DeltaTime)
{
    UpdateDosh();
    UpdateGrenades();
    UpdateWeapon();
    UpdateFlashlight();
    UpdateWeight();
}

function UpdateWeight()
{
    if((MyKFPC.Pawn != none) && MyKFPC.Pawn.InvManager != none)
    {
        MyKFInvManager = KFInventoryManager(MyKFPC.Pawn.InvManager);
        if((MyKFInvManager != none) && (LastMaxWeight != MyKFInvManager.MaxCarryBlocks) || LastWeight != MyKFInvManager.CurrentCarryBlocks)
        {
            SetString("WeightText", (string(MyKFInvManager.CurrentCarryBlocks) $ "/") $ string(MyKFInvManager.MaxCarryBlocks));
            LastMaxWeight = MyKFInvManager.MaxCarryBlocks;
            LastWeight = MyKFInvManager.CurrentCarryBlocks;
        }
    }
}

function UpdateDosh()
{
    local int CurrentDosh, DeltaDosh;

    if(MyKFPC.PlayerReplicationInfo != none)
    {
        CurrentDosh = int(MyKFPC.PlayerReplicationInfo.Score);
        if(CurrentDosh != LastDosh)
        {
            DeltaDosh = CurrentDosh - LastDosh;
            SetInt("backpackDosh", DeltaDosh);
            LastDosh = CurrentDosh;
        }
    }
}

function UpdateGrenades()
{
    local int CurrentGrenades;

    if(MyKFPC == none)
    {
        return;
    }
    if(MyKFInvManager != none)
    {
        CurrentGrenades = MyKFInvManager.GrenadeCount;
    }
    if(MyKFPC.CurrentPerk != none)
    {
        if((LastPerkClass != MyKFPC.CurrentPerk.Class) || LastSavedBuild != MyKFPC.CurrentPerk.GetSavedBuild())
        {
            SetString("backpackGrenadeType", "img://" $ MyKFPC.CurrentPerk.GetGrenadeImagePath());
            LastPerkClass = MyKFPC.CurrentPerk.Class;
            LastSavedBuild = MyKFPC.CurrentPerk.GetSavedBuild();
        }
    }
    if(CurrentGrenades != LastGrenades)
    {
        SetInt("backpackGrenades", CurrentGrenades);
        LastGrenades = CurrentGrenades;
    }
}

function UpdateWeapon()
{
    local int CurrentSpareAmmo, CurrentMagazineAmmo;
    local byte CurrentSecondaryAmmo;
    local int CurrentSecondarySpareAmmo;
    local string CurrentSpecialAmmo;
    local KFWeapon CurrentWeapon;
    local ASColorTransform ColorChange;
    local name StateName;
    local bool ForceSecondaryWeaponIconUpdate;

    if(((MyKFPC != none) && MyKFPC.Pawn != none) && MyKFPC.Pawn.Weapon != none)
    {
        CurrentWeapon = KFWeapon(MyKFPC.Pawn.Weapon);
        if(CurrentWeapon != none)
        {
            if((LastWeapon == none) || LastWeapon != CurrentWeapon)
            {
                LastWeapon = CurrentWeapon;
                RefreshWeapon(CurrentWeapon);
                ForceSecondaryWeaponIconUpdate = true;                
            }
            else
            {
                if(bWasUsingAltFireMode != CurrentWeapon.bUseAltFireMode)
                {
                    UpdateFireModeIcon(CurrentWeapon);
                }
            }
            if(bUsesAmmo)
            {
                CurrentMagazineAmmo = CurrentWeapon.AmmoCount[0];
                if(CurrentMagazineAmmo != LastMagazineAmmo)
                {
                    SetInt("weaponMagazineAmmo", CurrentMagazineAmmo);
                    LastMagazineAmmo = CurrentMagazineAmmo;
                }
                CurrentSpareAmmo = CurrentWeapon.GetSpareAmmoForHUD();
                if(CurrentSpareAmmo != LastSpareAmmo)
                {
                    SetInt("backpackStoredAmmo", CurrentSpareAmmo);
                    LastSpareAmmo = CurrentSpareAmmo;
                }                
            }
            else
            {
                CurrentSpecialAmmo = CurrentWeapon.GetSpecialAmmoForHUD();
                if(CurrentSpecialAmmo != LastSpecialAmmo)
                {
                    SetString("specialAmmoString", CurrentSpecialAmmo);
                }
            }
            LastSpecialAmmo = CurrentSpecialAmmo;
            StateName = CurrentWeapon.GetStateName();
            if(bUsesSecondaryAmmo)
            {
                CurrentSecondaryAmmo = byte(CurrentWeapon.GetSecondaryAmmoForHUD());
                if(!bUsesSecondaryAmmoAltHUD)
                {
                    if(CurrentSecondaryAmmo != LastSecondaryAmmo)
                    {
                        SetInt("secondaryAmmo", CurrentSecondaryAmmo);
                        LastSecondaryAmmo = CurrentSecondaryAmmo;
                    }                    
                }
                else
                {
                    if(CurrentSecondaryAmmo != LastSecondaryAmmo)
                    {
                        SetInt("secondaryAltAmmo", CurrentSecondaryAmmo);
                        LastSecondaryAmmo = CurrentSecondaryAmmo;
                    }
                    CurrentSecondarySpareAmmo = CurrentWeapon.GetSecondarySpareAmmoForHUD();
                    if(CurrentSecondarySpareAmmo != LastSecondarySpareAmmo)
                    {
                        SetInt("secondaryAltSpareAmmo", CurrentSecondarySpareAmmo);
                        LastSecondarySpareAmmo = CurrentSecondarySpareAmmo;
                    }
                }
                if(!bUsesGrenadesAsSecondaryAmmo && ForceSecondaryWeaponIconUpdate)
                {
                    GetObject("secondaryAmmoContainer").SetColorTransform(DefaultColor);
                }
                if(bUsesGrenadesAsSecondaryAmmo && StateName != OldState)
                {
                    OldState = StateName;
                    if(CurrentWeapon.HasToReloadSecondaryAmmoForHUD())
                    {
                        ColorChange.Add = MakeLinearColor(0.65, 0.23, 0, 0.2);
                        GetObject("secondaryAmmoContainer").SetColorTransform(ColorChange);
                        SetString("secondaryIcon", ("img://" $ string(CurrentWeapon.SecondaryAmmoTexture.GetPackageName())) $ ".UI_FireModeSelect_BulletSingleProhibited");                        
                    }
                    else
                    {
                        SetString("secondaryIcon", (("img://" $ string(CurrentWeapon.SecondaryAmmoTexture.GetPackageName())) $ ".") $ string(CurrentWeapon.SecondaryAmmoTexture));
                        GetObject("secondaryAmmoContainer").SetColorTransform(DefaultColor);
                    }
                }
            }
        }
    }
}

function UpdateFireModeIcon(KFWeapon CurrentWeapon)
{
    local byte NewFireModeIndex;

    NewFireModeIndex = byte(((CurrentWeapon.bUseAltFireMode) ? CurrentWeapon.1 : CurrentWeapon.0));
    if(Len(string(CurrentWeapon.FireModeIconPaths[NewFireModeIndex])) > 0)
    {
        SetString("firemodeIcon", (("img://" $ string(CurrentWeapon.FireModeIconPaths[NewFireModeIndex].GetPackageName())) $ ".") $ string(CurrentWeapon.FireModeIconPaths[NewFireModeIndex]));
    }
    bWasUsingAltFireMode = CurrentWeapon.bUseAltFireMode;
}

function RefreshWeapon(KFWeapon CurrentWeapon)
{
    bUsesAmmo = CurrentWeapon.UsesAmmo();
    SetBool("bUsesAmmo", bUsesAmmo);
    bUsesSecondaryAmmo = CurrentWeapon.UsesSecondaryAmmo();
    bUsesSecondaryAmmoAltHUD = bUsesSecondaryAmmo && CurrentWeapon.bUsesSecondaryAmmoAltHUD;
    bUsesGrenadesAsSecondaryAmmo = CurrentWeapon.UsesGrenadesAsSecondaryAmmo();
    if(bUsesSecondaryAmmoAltHUD)
    {
        SetBool("bUsesSecondaryAmmoAlt", bUsesSecondaryAmmoAltHUD);        
    }
    else
    {
        SetBool("bUsesSecondaryAmmo", bUsesSecondaryAmmo);
    }
    if(bUsesSecondaryAmmo)
    {
        SetString("secondaryIcon", (("img://" $ string(CurrentWeapon.SecondaryAmmoTexture.GetPackageName())) $ ".") $ string(CurrentWeapon.SecondaryAmmoTexture));
    }
    UpdateFireModeIcon(CurrentWeapon);
}

function UpdateFlashlight()
{
    local KFPawn_Human MyKFP;
    local int CurrentFlashlightBattery;

    if((MyKFPC != none) && MyKFPC.Pawn != none)
    {
        MyKFP = KFPawn_Human(MyKFPC.Pawn);
        if(MyKFP != none)
        {
            CurrentFlashlightBattery = int(MyKFP.BatteryCharge);
            if(CurrentFlashlightBattery != LastFlashlightBattery)
            {
                SetFlashlightBattery(CurrentFlashlightBattery, MyKFP.bFlashlightOn);
                LastFlashlightBattery = CurrentFlashlightBattery;
            }
        }
    }
}

function SetFlashlightBattery(int BatteryCharge, bool bIsOn)
{
    ActionScriptVoid("setFlashlightBattery");
}

defaultproperties
{
    LastMaxWeight=-1
    LastWeight=-1
    DefaultColor=(Multiply=(R=1,G=1,B=1,A=1),Add=(R=0,G=0,B=0,A=0))
    RedColor=(Multiply=(R=1,G=1,B=1,A=1),Add=(R=0,G=0,B=0,A=0))
}