/*******************************************************************************
 * KFGFxHUD_PlayerBackpack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_PlayerBackpack extends GFxObject within GFxMoviePlayer;

var KFPlayerController MyKFPC;
var int LastDosh;
var int LastSpareAmmo;
var int LastMagazineAmmo;
var bool bUsesAmmo;
var bool bWasUsingAltFireMode;
var bool bUsesSecondaryAmmo;
var int LastFlashlightBattery;
var int LastGrenades;
var int LastSecondaryAmmo;
var class<KFPerk> LastPerkClass;
var KFWeapon LastWeapon;

function InitializeHUD()
{
    MyKFPC = KFPlayerController(Outer.GetPC());
}

function TickHud(float DeltaTime)
{
    UpdateDosh();
    UpdateGrenades();
    UpdateWeapon();
    UpdateFlashlight();
}

function UpdateDosh()
{
    local int CurrentDosh, DeltaDosh;

    if(MyKFPC.PlayerReplicationInfo != none)
    {
        CurrentDosh = int(MyKFPC.PlayerReplicationInfo.Score);
        if(CurrentDosh != LastDosh)
        {
            DeltaDosh = CurrentDosh - LastDosh;
            SetInt("backpackDosh", DeltaDosh);
            LastDosh = CurrentDosh;
        }
    }
}

function UpdateGrenades()
{
    local KFInventoryManager MyKFInvManager;
    local int CurrentGrenades;

    if(MyKFPC == none)
    {
        return;
    }
    if(MyKFPC.Pawn != none)
    {
        MyKFInvManager = KFInventoryManager(MyKFPC.Pawn.InvManager);
        if(MyKFInvManager != none)
        {
            CurrentGrenades = MyKFInvManager.GrenadeCount;
        }
    }
    if(MyKFPC.GetPerk() != none)
    {
        if(LastPerkClass != MyKFPC.GetPerk().Class)
        {
            SetString("backpackGrenadeType", "img://" $ MyKFPC.CurrentPerk.GrenadeWeaponDef.static.GetImagePath());
            LastPerkClass = MyKFPC.CurrentPerk.Class;
        }
    }
    if(CurrentGrenades != LastGrenades)
    {
        SetInt("backpackGrenades", CurrentGrenades);
        LastGrenades = CurrentGrenades;
    }
}

function UpdateWeapon()
{
    local int CurrentSpareAmmo, CurrentMagazineAmmo, CurrentSecondaryAmmo;
    local KFWeapon CurrentWeapon;

    if((MyKFPC != none) && MyKFPC.Pawn != none)
    {
        CurrentWeapon = KFWeapon(MyKFPC.Pawn.Weapon);
        if(CurrentWeapon != none)
        {
            if((LastWeapon == none) || LastWeapon != CurrentWeapon)
            {
                LastWeapon = CurrentWeapon;
                RefreshWeapon(CurrentWeapon);                
            }
            else
            {
                if(bWasUsingAltFireMode != CurrentWeapon.bUseAltFireMode)
                {
                    UpdateFireModeIcon(CurrentWeapon);
                }
            }
            if(bUsesAmmo)
            {
                CurrentMagazineAmmo = CurrentWeapon.AmmoCount[0];
                if(CurrentMagazineAmmo != LastMagazineAmmo)
                {
                    SetInt("weaponMagazineAmmo", CurrentMagazineAmmo);
                    LastMagazineAmmo = CurrentMagazineAmmo;
                }
                CurrentSpareAmmo = CurrentWeapon.GetSpareAmmoForHUD();
                if(CurrentSpareAmmo != LastSpareAmmo)
                {
                    SetInt("backpackStoredAmmo", CurrentSpareAmmo);
                    LastSpareAmmo = CurrentSpareAmmo;
                }
            }
            if(bUsesSecondaryAmmo)
            {
                CurrentSecondaryAmmo = CurrentWeapon.AmmoCount[1];
                if(CurrentSecondaryAmmo != LastSecondaryAmmo)
                {
                    SetInt("secondaryAmmo", CurrentSecondaryAmmo);
                    LastSecondaryAmmo = CurrentSecondaryAmmo;
                }
            }
        }
    }
}

function UpdateFireModeIcon(KFWeapon CurrentWeapon)
{
    local byte NewFireModeIndex;

    NewFireModeIndex = byte(((CurrentWeapon.bUseAltFireMode) ? CurrentWeapon.1 : CurrentWeapon.0));
    if(Len(string(CurrentWeapon.FireModeIconPaths[NewFireModeIndex])) > 0)
    {
        SetString("firemodeIcon", (("img://" $ string(CurrentWeapon.FireModeIconPaths[NewFireModeIndex].GetPackageName())) $ ".") $ string(CurrentWeapon.FireModeIconPaths[NewFireModeIndex]));
    }
    bWasUsingAltFireMode = CurrentWeapon.bUseAltFireMode;
}

function RefreshWeapon(KFWeapon CurrentWeapon)
{
    bUsesAmmo = CurrentWeapon.UsesAmmo();
    SetBool("bUsesAmmo", bUsesAmmo);
    bUsesSecondaryAmmo = CurrentWeapon.UsesSecondaryAmmo();
    SetBool("bUsesSecondaryAmmo", bUsesSecondaryAmmo);
    if(bUsesSecondaryAmmo)
    {
        SetString("secondaryIcon", (("img://" $ string(CurrentWeapon.SecondaryAmmoTexture.GetPackageName())) $ ".") $ string(CurrentWeapon.SecondaryAmmoTexture));
    }
    UpdateFireModeIcon(CurrentWeapon);
}

function UpdateFlashlight()
{
    local KFPawn_Human MyKFP;
    local int CurrentFlashlightBattery;

    if((MyKFPC != none) && MyKFPC.Pawn != none)
    {
        MyKFP = KFPawn_Human(MyKFPC.Pawn);
        if(MyKFP != none)
        {
            CurrentFlashlightBattery = int(MyKFP.BatteryCharge);
            if(CurrentFlashlightBattery != LastFlashlightBattery)
            {
                SetFlashlightBattery(CurrentFlashlightBattery, MyKFP.bFlashlightOn);
                LastFlashlightBattery = CurrentFlashlightBattery;
            }
        }
    }
}

function SetFlashlightBattery(int BatteryCharge, bool bIsOn)
{
    ActionScriptVoid("setFlashlightBattery");
}
