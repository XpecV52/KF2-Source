/*******************************************************************************
 * KFSM_PlayerMeleeBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_PlayerMeleeBase extends KFSM_MeleeAttack
    abstract;

enum EPlayerZedAtkType
{
    PZA_Default,
    PZA_Sprinting,
    PZA_SprintBackwards,
    PZA_SprintCloaked,
    PZA_Cloaked,
    PZA_Jumping,
    PZA_Headless,
    PZA_Left,
    PZA_Right,
    PZA_Backwards,
    PZA_SpecialDefault,
    PZA_SpecialSprinting,
    PZA_SpecialBackwards,
    PZA_MAX
};

struct PlayerZedAtkInfo
{
    var array<name> Anims;
    var bool bIsInputHeld;
    var KFSM_PlayerMeleeBase.EPlayerZedAtkType Type;
    var KFPawn.EAnimSlotStance Stance;
    var float MomentumPush;
    var bool bForceDisableRootMotion;
    var bool bCannotBeParried;

    structdefaultproperties
    {
        Anims=none
        bIsInputHeld=false
        Type=EPlayerZedAtkType.PZA_Default
        Stance=EAnimSlotStance.EAS_FullBody
        MomentumPush=0
        bForceDisableRootMotion=false
        bCannotBeParried=false
    }
};

var bool bAnimCanBeInterrupted;
var array<PlayerZedAtkInfo> Attacks;

static function byte PackFlagsBase(KFPawn P)
{
    local byte AtkIdx, Variant;
    local KFSM_PlayerMeleeBase.EPlayerZedAtkType Type;
    local bool bUsingSpecialAttacks;
    local KFPawn.EPawnOctant PawnMoveDir;

    if(P != none)
    {
        PawnMoveDir = GetFourWayMoveDirection(P);
        bUsingSpecialAttacks = default.Class.static.IsInSpecialMode(P);
        if(P.IsHeadless())
        {
            Type = 6;            
        }
        else
        {
            if(P.Physics == 2)
            {
                Type = 5;                
            }
            else
            {
                if(P.bIsSprinting)
                {
                    if(P.bIsCloaking)
                    {
                        Type = 3;                        
                    }
                    else
                    {
                        if(bUsingSpecialAttacks)
                        {
                            Type = ((PawnMoveDir == 1) ? 12 : 11);                            
                        }
                        else
                        {
                            if(PawnMoveDir == 3)
                            {
                                Type = 8;                                
                            }
                            else
                            {
                                Type = ((PawnMoveDir == 1) ? 2 : 1);
                            }
                        }
                    }                    
                }
                else
                {
                    if(P.bIsCloaking)
                    {
                        Type = 4;                        
                    }
                    else
                    {
                        if(PawnMoveDir == 1)
                        {
                            Type = ((bUsingSpecialAttacks) ? 12 : 9);                            
                        }
                        else
                        {
                            if(PawnMoveDir == 3)
                            {
                                Type = 8;                                
                            }
                            else
                            {
                                if(PawnMoveDir == 2)
                                {
                                    Type = 7;                                    
                                }
                                else
                                {
                                    Type = ((bUsingSpecialAttacks) ? 10 : 0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    AtkIdx = byte(default.Attacks.Find('Type', Type);
    if(AtkIdx == 255)
    {
        AtkIdx = 0;
    }
    Variant = byte(Rand(default.Attacks[AtkIdx].Anims.Length));
    return byte(AtkIdx + (Variant << 4));
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    bAnimCanBeInterrupted = false;
    bPendingStopFire = false;
    bCanBeInterrupted = !bCannotBeParried;
}

static function bool IsInSpecialMode(KFPawn P)
{
    return false;
}

static function KFPawn.EPawnOctant GetFourWayMoveDirection(Pawn P)
{
    local Vector MoveDir;

    MoveDir = ((IsZero(P.Acceleration)) ? P.Velocity : P.Acceleration);
    return Class'KFPawn'.static.CalcQuadRegion(P.Rotation, MoveDir);
}

function UnpackSpecialMoveFlags()
{
    local byte Variant, AtkIdx;

    AtkIdx = byte(KFPOwner.SpecialMoveFlags & 15);
    Variant = byte(KFPOwner.SpecialMoveFlags >> 4);
    AnimName = Attacks[AtkIdx].Anims[Variant];
    AnimStance = Attacks[AtkIdx].Stance;
    bDisableMovement = AnimStance == 0;
    bUseRootMotion = (AnimStance == 0) && !Attacks[AtkIdx].bForceDisableRootMotion;
    bAllowMomentumPush = !bUseRootMotion || Attacks[AtkIdx].Type != 5;
    bCannotBeParried = Attacks[AtkIdx].bCannotBeParried;
    if(Attacks[AtkIdx].bIsInputHeld)
    {
        bCanBeInterrupted = true;
        if(KFPOwner.IsLocallyControlled())
        {
            KFPOwner.SetTimer(KFSkeletalMeshComponent(KFPOwner.Mesh).GetAnimInterruptTime(AnimName), false, 'Timer_AnimInterrupt', self);
        }
    }
    if((bAllowMomentumPush && Attacks[AtkIdx].MomentumPush > 0) && (KFPOwner.Role == ROLE_Authority) || KFPOwner.IsLocallyControlled())
    {
        KFPOwner.Velocity += (vector(KFPOwner.Rotation) * Attacks[AtkIdx].MomentumPush);
    }
}

function Timer_AnimInterrupt()
{
    bAnimCanBeInterrupted = true;
    if(bPendingStopFire)
    {
        SpecialMoveButtonReleased();
    }
}

function SpecialMoveFlagsUpdated()
{
    if(KFPOwner.SpecialMoveFlags == 254)
    {
        KFPOwner.EndSpecialMove();        
    }
    else
    {
        super(GameSpecialMove).SpecialMoveFlagsUpdated();
    }
}

function SpecialMoveButtonRetriggered()
{
    bPendingStopFire = false;
}

function SpecialMoveButtonReleased()
{
    bPendingStopFire = true;
    if(!bAnimCanBeInterrupted)
    {
        return;
    }
    KFPOwner.DoSpecialMove(KFPOwner.SpecialMove, true,, 254);
    if((KFPOwner.Role < ROLE_Authority) && KFPOwner.IsLocallyControlled())
    {
        KFPOwner.ServerDoSpecialMove(KFPOwner.SpecialMove, true,, 254);
    }
}
