/*******************************************************************************
 * KFGFxHud_PlayerRosterWidget generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHud_PlayerRosterWidget extends GFxObject within GFxMoviePlayer;

var PlayerReplicationInfo MyPRI;

function InitializeHUD()
{
    MyPRI = Outer.GetPC().PlayerReplicationInfo;
}

function TickHud(float DeltaTime)
{
    UpdatePlayerData();
}

function UpdatePlayerData()
{
    local GFxObject DataProvider, TempData;
    local int I, PlayerIndex;
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;
    local KFGameReplicationInfo KFGRI;
    local array<KFPlayerReplicationInfo> CurrentPlayerList;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI == none)
    {
        return;
    }
    if(MyPRI == none)
    {
        return;
    }
    PlayerIndex = 0;
    KFGRI.GetKFPRIArray(CurrentPlayerList);
    KFPC = KFPlayerController(Outer.GetPC());
    DataProvider = Outer.CreateArray();
    I = 0;
    J0x118:

    if(I < CurrentPlayerList.Length)
    {
        if((CurrentPlayerList[I].GetTeamNum() == MyPRI.GetTeamNum()) && MyPRI != CurrentPlayerList[I])
        {
            KFPRI = CurrentPlayerList[I];
            TempData = Outer.CreateObject("Object");
            TempData.SetString("playerIcon", KFPC.GetSteamAvatar(KFPRI.UniqueId));
            if(KFPRI.CharPortrait != none)
            {
                TempData.SetString("zedIcon", "img://" $ PathName(KFPRI.CharPortrait));
            }
            TempData.SetFloat("health", ByteToFloat(KFPRI.PlayerHealthPercent) * float(100));
            DataProvider.SetElementObject(PlayerIndex, TempData);
            ++ PlayerIndex;
        }
        ++ I;
        goto J0x118;
    }
    SetObject("data", DataProvider);
}
