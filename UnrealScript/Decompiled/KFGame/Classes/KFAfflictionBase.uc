/*******************************************************************************
 * KFAfflictionBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAfflictionBase extends Object
    abstract
    native(Pawn);

const INCAP_THRESHOLD = 100.f;

var float CurrentStrength;
var float DissipationRate;
var KFPawn PawnOwner;
var KFPawn_Monster MonsterOwner;
var KFPawn.ESpecialMove SpecialMove;
var float Cooldown;
var float LastActivationTime;
var bool bNeedsTick;
var bool bDebug;
var float LastDissipationTime;

function Init(KFPawn P, KFAfflictionManager.EAfflictionType Type)
{
    PawnOwner = P;
    MonsterOwner = KFPawn_Monster(P);
    Cooldown = P.IncapSettings[Type].Cooldown;
    if(bNeedsTick && DissipationRate > float(0))
    {
        P.AfflictionHandler.AfflictionTickArray.AddItem(self;
    }
}

function Accrue(float InPower)
{
    if((LastActivationTime > float(0)) && (PawnOwner.WorldInfo.TimeSeconds - LastActivationTime) < Cooldown)
    {
        if(bDebug)
        {
            LogInternal(string(Class.Name) @ "rejected because of cooldown");
        }
        return;
    }
    if(!bNeedsTick)
    {
        if(CurrentStrength > float(0))
        {
            CurrentStrength -= (DissipationRate * (PawnOwner.WorldInfo.TimeSeconds - LastDissipationTime));
        }
        LastDissipationTime = PawnOwner.WorldInfo.TimeSeconds;
    }
    CurrentStrength = FClamp(CurrentStrength + InPower, InPower, 100);
    if(CurrentStrength >= 100)
    {
        Activate();
    }
    if(bDebug)
    {
        LogInternal((((string(Class.Name) @ "Added=") $ string(InPower)) @ "NewStrength=") $ string(CurrentStrength));
    }
}

function Activate()
{
    if(SpecialMove != 0)
    {
        if(PawnOwner.IsAliveAndWell())
        {
            PawnOwner.DoSpecialMove(SpecialMove, true,, GetSpecialMoveFlags());
        }
        CurrentStrength = 0;
    }
    LastActivationTime = PawnOwner.WorldInfo.TimeSeconds;
    if(bDebug)
    {
        LogInternal(string(Class.Name) @ "was activated");
    }
}

function byte GetSpecialMoveFlags();

function ShutDown();

function ToggleEffects(bool bPrimary, optional bool bSecondary)
{
    WarnInternal("called without having a subclass implementation. Will have errors online.");
}

function SetMaterialParameter(float Value)
{
    WarnInternal("called without having a subclass implementation. Will have errors online.");
}

event Tick(float DeltaTime);

function float GetKnockdownModifier()
{
    return 0;
}

function float GetStumbleModifier()
{
    return 0;
}

function float GetStunModifier()
{
    return 0;
}

function float GetDamageModifier()
{
    return 0;
}

function float GetSpeedModifier()
{
    return 1;
}

function float GetAttackSpeedModifier()
{
    return 1;
}

defaultproperties
{
    DissipationRate=20
}