/*******************************************************************************
 * KFGameEngine generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameEngine extends GameEngine
    transient
    native
    config(Game);

enum SupportedPlatform
{
    PLATFORM_PC_DX11,
    PLATFORM_PC_DX10,
    PLATFORM_PC_MAX
};

enum EConnectionError
{
    CE_None,
    CE_Generic,
    CE_WrongPassword,
    CE_NeedPassword,
    CE_MAX
};

var int LastFocusedGameStateID;
var Font KFCanvasFont;
var float KFFontScale;
var bool bReadingPlayfabStoreData;
var bool bMusicVocalsEnabled;
var bool bMinimalChatter;
var config bool bShowWelderInInv;
var config bool bUseAltAimOnDual;
var config bool bAntiMotionSickness;
var private config bool bShowCrossHair;
var private bool bShowCrossHairConsole;
var config bool bMuteOnLossOfFocus;
var config bool bEnableAdvDebugLines;
var float DefaultGammaMult;
var float MusicVolumeMultiplier;
var float SFxVolumeMultiplier;
var float DialogVolumeMultiplier;
var float MasterVolumeMultiplier;
var float PadVolumeMultiplier;
var float VOIPVolumeMultiplier;
var float GammaMultiplier;
var config float FOVOptionsPercentageValue;
var transient delegate<HandshakeCompleteCallback> OnHandshakeComplete;
var KFGameEngine.EConnectionError LastConnectionError;
var string ConsoleGameSessionGuid;
/** List of categories to filter */
var(Debug) config array<config name> AILogFilter;
var private transient KFDebugLines KFDebugLines;
var delegate<HandshakeCompleteCallback> __HandshakeCompleteCallback__Delegate;

// Export UKFGameEngine::execCheckSkipLobby(FFrame&, void* const)
native static function bool CheckSkipLobby();

// Export UKFGameEngine::execCheckSkipGammaCheck(FFrame&, void* const)
native static function bool CheckSkipGammaCheck();

// Export UKFGameEngine::execCheckNoAutoStart(FFrame&, void* const)
native static function bool CheckNoAutoStart();

// Export UKFGameEngine::execCheckNoMusic(FFrame&, void* const)
native static function bool CheckNoMusic();

// Export UKFGameEngine::execCheckNoRandomStart(FFrame&, void* const)
native static function bool CheckNoRandomStart();

// Export UKFGameEngine::execGetGameVersion(FFrame&, void* const)
native static function int GetGameVersion();

// Export UKFGameEngine::execIsPlaygoModePS4(FFrame&, void* const)
native static function bool IsPlaygoModePS4();

// Export UKFGameEngine::execGetDebugLines(FFrame&, void* const)
native static function KFDebugLines GetDebugLines();

// Export UKFGameEngine::execGetPlatform(FFrame&, void* const)
native static function KFGameEngine.SupportedPlatform GetPlatform();

// Export UKFGameEngine::execGetClassCountAndSize(FFrame&, void* const)
native static function GetClassCountAndSize(out int ClassCount, out float ClassSize, out float ResourceSize, Class LoadedClass);

// Export UKFGameEngine::execInitAudioOptions(FFrame&, void* const)
native static function InitAudioOptions();

// Export UKFGameEngine::execInitVideoOptions(FFrame&, void* const)
native static function InitVideoOptions();

// Export UKFGameEngine::execSetWWiseSFXVolume(FFrame&, void* const)
native static function SetWWiseSFXVolume(float Volume);

// Export UKFGameEngine::execSetWWiseMusicVolume(FFrame&, void* const)
native static function SetWWiseMusicVolume(float Volume);

// Export UKFGameEngine::execSetWWiseVoiceVolume(FFrame&, void* const)
native static function SetWWiseVoiceVolume(float Volume);

// Export UKFGameEngine::execSetWWiseMasterVolume(FFrame&, void* const)
native static function SetWWiseMasterVolume(float Volume);

// Export UKFGameEngine::execSetWWisePADVolume(FFrame&, void* const)
native static function SetWWisePADVolume(float Volume);

// Export UKFGameEngine::execSetVoIPRecieveVolume(FFrame&, void* const)
native static function SetVoIPRecieveVolume(float Volume);

// Export UKFGameEngine::execGetVoIPVolumeRange(FFrame&, void* const)
native static function GetVoIPVolumeRange(out float MinVol, out float MaxVol, out float CurrentVol);

// Export UKFGameEngine::execPlayFullScreenMovie(FFrame&, void* const)
native static function PlayFullScreenMovie(string MovieName);

// Export UKFGameEngine::execIsFullScreenMoviePlaying(FFrame&, void* const)
native static function bool IsFullScreenMoviePlaying();

// Export UKFGameEngine::execSetGamma(FFrame&, void* const)
native static function SetGamma(float InGammaMultiplier);

// Export UKFGameEngine::execGetKFGameVersion(FFrame&, void* const)
native static function int GetKFGameVersion();

// Export UKFGameEngine::execGetAppID(FFrame&, void* const)
native static function int GetAppID();

static function Font GetKFCanvasFont()
{
    return default.KFCanvasFont;
}

static function float GetKFFontScale()
{
    return default.KFFontScale;
}

static function bool IsCrosshairEnabled()
{
    return default.bShowCrossHair;
}

static function SetCrosshairEnabled(bool bEnable)
{
    default.bShowCrossHair = bEnable;
    if(!Class'WorldInfo'.static.IsConsoleBuild())
    {
        StaticSaveConfig();
    }
}

static function KFGameEngine.EConnectionError GetConnectionErrorForMessage(out string Message, out string Title)
{
    if(Message == "<Strings:Engine.AccessControl.NeedPassword>")
    {
        return 3;
    }
    if(Message == "<Strings:Engine.AccessControl.WrongPassword>")
    {
        return 2;
    }
    return 1;
}

function SetLastConnectionError(string Message, string Title)
{
    if(LastConnectionError == 0)
    {
        LastConnectionError = GetConnectionErrorForMessage(Message, Title);
    }
}

delegate bool HandshakeCompleteCallback(bool bSuccess, string Error, out int SuppressPasswordRetry);

event bool CheckHandshakeComplete(Engine.PlayerController.EProgressMessageType MessageType, string Title, out int SuppressPasswordRetry, out int Cleanup)
{
    local bool SuppressPopup;

    SuppressPopup = false;
    Cleanup = 0;
    if(OnHandshakeComplete != none)
    {
        switch(MessageType)
        {
            case 4:
            case 5:
            case 6:
            case 7:
                Cleanup = 1;
                SuppressPopup = HandshakeCompleteCallback(false, Title, SuppressPasswordRetry);
                break;
            case 1:
                if(Title == "HandshakeDone")
                {
                    SuppressPopup = HandshakeCompleteCallback(true, Title, SuppressPasswordRetry);
                }
                break;
            default:
                break;
        }
    }
    else
    {
        return SuppressPopup;
    }
}

// Export UKFGameEngine::execCancelPendingLevel(FFrame&, void* const)
native static function CancelPendingLevel();

function bool IsLockedServer()
{
    return bUsedForTakeover && !bAvailableForTakeover;
}

function UnlockServer()
{
    local UniqueNetId NullId;

    if(bUsedForTakeover)
    {
        ConsoleGameSessionGuid = "";
        KFGameReplicationInfo(Class'WorldInfo'.static.GetWorldInfo().GRI).ConsoleGameSessionHost = NullId;
        bAvailableForTakeover = true;
        bPrivateServer = false;
        if(GetPlayfabInterface() != none)
        {
            GetPlayfabInterface().serverDeallocate();
        }
    }
}

// Export UKFGameEngine::execKillPendingServerConnection(FFrame&, void* const)
native function KillPendingServerConnection();

function ReadPFStoreData()
{
    bReadingPlayfabStoreData = true;
    GetPlayfabInterface().AddStoreDataReadCompleteDelegate(OnPlayfabStoreReadComplete);
    GetPlayfabInterface().ReadStoreData();
}

function OnPlayfabStoreReadComplete(bool bSuccessful)
{
    GetPlayfabInterface().ClearStoreDataReadCompleteDelegate(OnPlayfabStoreReadComplete);
    if(bSuccessful)
    {
        GetOnlineSubsystem().PlayerInterfaceEx.AddStoreDataReadCompleteDelegate(OnStoreDataRead);
        GetOnlineSubsystem().PlayerInterfaceEx.ReadStoreData();
    }
}

function OnStoreDataRead(bool bSuccessful)
{
    GetOnlineSubsystem().PlayerInterfaceEx.ClearStoreDataReadCompleteDelegate(OnStoreDataRead);
    GetPlayfabInterface().AddInventoryReadCompleteDelegate(OnPlayfabInventoryReadComplete);
    GetPlayfabInterface().ReadInventory();
}

function OnPlayfabInventoryReadComplete(bool bSuccessful)
{
    bReadingPlayfabStoreData = false;
    GetPlayfabInterface().ClearInventoryReadCompleteDelegate(OnPlayfabInventoryReadComplete);
    GetOnlineSubsystem().ClearNewlyAdded();
}

function OnLinkStatusChange(bool bIsConnected)
{
    OnConnectionStatusChanged(((bIsConnected) ? 1 : 2));
}

function OnConnectionStatusChanged(Engine.OnlineSubsystem.EOnlineServerConnectionStatus ConnectionStatus)
{
    local KFGameViewportClient GVC;

    if((GamePlayers[0].Actor != none) && KFPlayerController(GamePlayers[0].Actor) != none)
    {
        KFPlayerController(GamePlayers[0].Actor).HandleConnectionStatusChange(ConnectionStatus);        
    }
    else
    {
        GetOnlineSubsystem().GameInterface.DestroyOnlineGame('Game');
        GVC = KFGameViewportClient(Class'GameEngine'.static.GetEngine().GameViewport);
        GVC.bNeedDisconnectMessage = true;        
        GVC.ConsoleCommand("open KFMainMenu");
    }
}

function OnLoginStatusChanged(Engine.OnlineSubsystem.ELoginStatus NewStatus, UniqueNetId NewId)
{
    local KFGameViewportClient GVC;

    if((GamePlayers[0].Actor != none) && KFPlayerController(GamePlayers[0].Actor) != none)
    {
        KFPlayerController(GamePlayers[0].Actor).HandleLoginStatusChange(NewStatus == 2);        
    }
    else
    {
        if(NewStatus == 0)
        {
            GetOnlineSubsystem().GameInterface.DestroyOnlineGame('Game');
            GVC = KFGameViewportClient(Class'GameEngine'.static.GetEngine().GameViewport);
            GVC.bNeedSignoutMessage = true;            
            GVC.ConsoleCommand("open KFMainMenu");
        }
    }
}

function RegisterOnlineDelegates()
{
    GetOnlineSubsystem().SystemInterface.AddConnectionStatusChangeDelegate(OnConnectionStatusChanged);
    GetOnlineSubsystem().PlayerInterface.AddLoginStatusChangeDelegate(OnLoginStatusChanged, 0);
}

function ClearOnlineDelegates()
{
    GetOnlineSubsystem().SystemInterface.ClearConnectionStatusChangeDelegate(OnConnectionStatusChanged);
    GetOnlineSubsystem().PlayerInterface.ClearLoginStatusChangeDelegate(OnLoginStatusChanged, 0);
}

defaultproperties
{
    KFCanvasFont=Font'UI_Canvas_Fonts.Font_Main'
    KFFontScale=0.6
    bMuteOnLossOfFocus=true
    DefaultGammaMult=0.68
    FOVOptionsPercentageValue=1
    bDisableAILogging=true
}