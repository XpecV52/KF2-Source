/*******************************************************************************
 * KFFracturedMeshGlass generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFFracturedMeshGlass extends KFFracturedMeshActor
    native(Effect);

var deprecated int DestroyOnBumpThreshold;
/** If true, AI bump will completely destroy the glass regardless of other settings */
var() bool bInstiKillOnAIBump;
var transient bool bTickMaterialParam;
var transient MaterialInstanceConstant MIC;

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    if(MaterialLightParams.LightActor != none)
    {
        MIC = FracturedStaticMeshComponent.CreateAndSetMaterialInstanceConstant(MaterialLightParams.MatID);
        bTickMaterialParam = true;
    }
}

simulated event PostBeginPlay()
{
    super(FracturedStaticMeshActor).PostBeginPlay();
    if(bTickMaterialParam && bTickIsDisabled)
    {
        SetTickIsDisabled(false);
    }
}

simulated event TakeDamage(int Damage, Controller EventInstigator, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)
{
    super.TakeDamage(Damage, EventInstigator, HitLocation, Momentum, DamageType, HitInfo, DamageCauser);
}

event Bump(Actor Other, PrimitiveComponent OtherComp, Vector HitNormal)
{
    local Pawn OtherPawn;

    if(!bHasBeenDestroyed)
    {
        if(bHasLostChunk)
        {
            BreakOffAllFragments(Other.Velocity);            
        }
        else
        {
            if(bInstiKillOnAIBump)
            {
                OtherPawn = Pawn(Other);
                if((OtherPawn != none) && !OtherPawn.IsHumanControlled())
                {
                    BreakOffAllFragments(Other.Velocity);
                }
            }
        }
    }
}

simulated function bool StopsProjectile(Projectile P)
{
    local KFProjectile KFProj;
    local bool bShatter;

    if(P.bBounce)
    {
        KFProj = KFProjectile(P);
        if(KFProj != none)
        {
            switch(KFProj.GlassShatterType)
            {
                case 0:
                    bShatter = false;
                    break;
                case 1:
                    bShatter = bHasLostChunk;
                    break;
                case 2:
                    bShatter = true;
                    break;
                default:
                    break;
            }
        }
        else
        {
        }/* !MISMATCHING REMOVE, tried If got Type:Else Position:0x0BD! */
        if(bShatter)
        {
            if((Role == ROLE_Authority) && !bHasBeenDestroyed)
            {
                BreakOffAllFragments(Normal(P.Velocity) * float(200));
            }
            return false;            
        }
        else
        {
            if(ReplicationMode == 2)
            {
            }
        }
        return super(Actor).StopsProjectile(P);
    }/* !MISMATCHING REMOVE, tried Else got Type:If Position:0x000! */
}

simulated function TakeRadiusDamage(Controller InstigatedBy, float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, Vector HurtOrigin, bool bFullDamage, Actor DamageCauser, optional float DamageFalloffExponent)
{
    DamageFalloffExponent = 1;
    super(Actor).TakeRadiusDamage(InstigatedBy, BaseDamage, DamageRadius, DamageType, Momentum, HurtOrigin, true, DamageCauser, DamageFalloffExponent);
}

defaultproperties
{
    bInstiKillOnAIBump=true
    TotalHealth=300
    VulnerableDamageType(0)=class'KFDT_Sonic'
    begin object name=FracturedStaticMeshComponent0 class=FracturedStaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: FracturedStaticMeshComponent'Default__KFFracturedMeshGlass.FracturedStaticMeshComponent0'
    FracturedStaticMeshComponent=FracturedStaticMeshComponent0
    begin object name=FracturedSkinnedComponent0 class=FracturedSkinnedMeshComponent
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFFracturedMeshGlass.LightEnvironment0'
    object end
    // Reference: FracturedSkinnedMeshComponent'Default__KFFracturedMeshGlass.FracturedSkinnedComponent0'
    SkinnedComponent=FracturedSkinnedComponent0
    bDestroyFragmentsOnImpact=true
    begin object name=FracturedSkinnedComponent0 class=FracturedSkinnedMeshComponent
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFFracturedMeshGlass.LightEnvironment0'
    object end
    // Reference: FracturedSkinnedMeshComponent'Default__KFFracturedMeshGlass.FracturedSkinnedComponent0'
    Components(0)=FracturedSkinnedComponent0
    begin object name=FracturedStaticMeshComponent0 class=FracturedStaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: FracturedStaticMeshComponent'Default__KFFracturedMeshGlass.FracturedStaticMeshComponent0'
    Components(1)=FracturedStaticMeshComponent0
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFFracturedMeshGlass.Sprite'
    Components(2)=Sprite
    bWorldGeometry=false
    begin object name=FracturedStaticMeshComponent0 class=FracturedStaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: FracturedStaticMeshComponent'Default__KFFracturedMeshGlass.FracturedStaticMeshComponent0'
    CollisionComponent=FracturedStaticMeshComponent0
}