/*******************************************************************************
 * KFGFxMoviePlayer_HUD generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMoviePlayer_HUD extends GFxMoviePlayer
    config(UI);

var KFGFxHUD_SpectatorInfo SpectatorInfoWidget;
var KFGFxHUD_PlayerStatus PlayerStatusContainer;
var KFGFxHUD_PlayerBackpack PlayerBackpackContainer;
var GFxObject PriorityMessageContainer;
var GFxObject BossNameplateContainer;
var GFxObject InteractionMessageContainer;
var KFGFxHUD_WeaponSelectWidget WeaponSelectWidget;
var KFGFxHUD_TraderCompass TraderCompassWidget;
var KFGFxHUD_WaveInfo WaveInfoWidget;
var KFGFxHUD_ScoreboardWidget ScoreboardWidget;
var KFGFxWidget_VOIPNotification VOIPWidget;
var KFGFxHUD_ChatBoxWidget HudChatBox;
var KFGFxWidget_LevelUpNotification LevelUpNotificationWidget;
var KFGFxWidget_VoiceComms VoiceCommsWidget;
var KFGFxWidget_MusicNotification MusicNotification;
var KFGFxWidget_KickVote KickVoteWidget;
var KFGFxWidget_NonCriticalGameMessage NonCriticalGameMessageWidget;
var KFGFxWidget_RhythmCounter RhythmCounterWidget;
var KFPlayerController KFPC;
var config float HUDScale;
var GFxObject KFGXHUDManager;
var bool bIsSpectating;
var bool bIsVisible;
var bool bUsingGamepad;
var int CurrentInteractionIndex;
var const string ControllerStringPrefix;
var const float UpdateInterval;
var protected float LastUpdateTime;
var string PendingKickPlayerName;

function Init(optional LocalPlayer LocPlay)
{
    KFPC = KFPlayerController(GetPC());
    KFPC.SetGFxHUD(self);
    super.Init(LocPlay);
    KFGXHUDManager = GetVariableObject("root");
    UpdateScale();
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'KickVoteWidget':
            if(KickVoteWidget == none)
            {
                KickVoteWidget = KFGFxWidget_KickVote(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                KickVoteWidget.InitializeHUD();
            }
            break;
        case 'SpectatorInfoWidget':
            if(SpectatorInfoWidget == none)
            {
                SpectatorInfoWidget = KFGFxHUD_SpectatorInfo(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                SpectatorInfoWidget.InitializeHUD();
            }
            break;
        case 'PlayerStatWidget':
            if(PlayerStatusContainer == none)
            {
                PlayerStatusContainer = KFGFxHUD_PlayerStatus(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                PlayerStatusContainer.InitializeHUD();
            }
            break;
        case 'PlayerBackpackWidget':
            if(PlayerBackpackContainer == none)
            {
                PlayerBackpackContainer = KFGFxHUD_PlayerBackpack(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                PlayerBackpackContainer.InitializeHUD();
            }
            break;
        case 'PriorityMsgWidget':
            if(PriorityMessageContainer == none)
            {
                PriorityMessageContainer = Widget;
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'BossNamePlate':
            if(BossNameplateContainer == none)
            {
                BossNameplateContainer = Widget;
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'interactionMsgWidget':
            if(InteractionMessageContainer == none)
            {
                InteractionMessageContainer = Widget;
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'WeaponSelectContainer':
            if(WeaponSelectWidget == none)
            {
                WeaponSelectWidget = KFGFxHUD_WeaponSelectWidget(Widget);
                WeaponSelectWidget.RefreshWeaponSelect();
                WeaponSelectWidget.InitializeObject();
            }
            break;
        case 'CompassContainer':
            if(TraderCompassWidget == none)
            {
                TraderCompassWidget = KFGFxHUD_TraderCompass(Widget);
                TraderCompassWidget.InitializeHUD();
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'WaveInfoContainer':
            if(WaveInfoWidget == none)
            {
                WaveInfoWidget = KFGFxHUD_WaveInfo(Widget);
                WaveInfoWidget.InitializeHUD();
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'ScoreboardWidgetMC':
            if(ScoreboardWidget == none)
            {
                ScoreboardWidget = KFGFxHUD_ScoreboardWidget(Widget);
                ScoreboardWidget.InitializeHUD();
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'ChatBoxWidget':
            if(!Class'WorldInfo'.static.IsPlayInEditor())
            {
                if(HudChatBox == none)
                {
                    HudChatBox = KFGFxHUD_ChatBoxWidget(Widget);
                }
            }
            break;
        case 'VOIPWidget':
            if(VOIPWidget == none)
            {
                VOIPWidget = KFGFxWidget_VOIPNotification(Widget);
            }
            break;
        case 'LevelUpNotificationWidget':
            if(LevelUpNotificationWidget == none)
            {
                LevelUpNotificationWidget = KFGFxWidget_LevelUpNotification(Widget);
                LevelUpNotificationWidget.InitializeHUD();
            }
            break;
        case 'VoiceCommsWidget':
            if(VoiceCommsWidget == none)
            {
                VoiceCommsWidget = KFGFxWidget_VoiceComms(Widget);
                VoiceCommsWidget.InitializeHUD();
            }
            break;
        case 'MusicNotification':
            if(MusicNotification == none)
            {
                MusicNotification = KFGFxWidget_MusicNotification(Widget);
                MusicNotification.InitializeHUD();
            }
            break;
        case 'NonCriticalGameMessageWidget':
            if(NonCriticalGameMessageWidget == none)
            {
                NonCriticalGameMessageWidget = KFGFxWidget_NonCriticalGameMessage(Widget);
            }
            break;
        case 'RhythmCounter':
            if(RhythmCounterWidget == none)
            {
                RhythmCounterWidget = KFGFxWidget_RhythmCounter(Widget);
            }
            break;
        default:
            break;
    }
    return true;
}

function TickHud(float DeltaTime)
{
    local PlayerController PC;

    PC = GetPC();
    if((PC == none) || (PC.WorldInfo.TimeSeconds - LastUpdateTime) < UpdateInterval)
    {
        return;
    }
    if(!PC.myHUD.bShowHUD)
    {
        return;
    }
    LastUpdateTime = PC.WorldInfo.TimeSeconds;
    if(bUsingGamepad != PC.PlayerInput.bUsingGamepad)
    {
        bUsingGamepad = PC.PlayerInput.bUsingGamepad;
        UpdateUsingGamepad();
    }
    if(bIsSpectating)
    {
        if(SpectatorInfoWidget != none)
        {
            SpectatorInfoWidget.TickHud(DeltaTime);
        }        
    }
    else
    {
        if(PlayerStatusContainer != none)
        {
            PlayerStatusContainer.TickHud(DeltaTime);
        }
        if(PlayerBackpackContainer != none)
        {
            PlayerBackpackContainer.TickHud(DeltaTime);
        }
    }
    if(TraderCompassWidget != none)
    {
        TraderCompassWidget.TickHud(DeltaTime);
    }
    if(WaveInfoWidget != none)
    {
        WaveInfoWidget.TickHud(DeltaTime);
    }
    if((ScoreboardWidget != none) && ScoreboardWidget.bUpdateScoreboard)
    {
        ScoreboardWidget.TickHud(DeltaTime);
    }
}

function UpdateWaveCount()
{
    if((ScoreboardWidget != none) && ScoreboardWidget.MatchInfoContainer != none)
    {
        ScoreboardWidget.MatchInfoContainer.UpdateWaveCount();
    }
    if(WaveInfoWidget != none)
    {
        WaveInfoWidget.UpdateWaveCount();
    }
}

function NotifyVisibilityChange(bool bValue)
{
    if(bIsVisible != bValue)
    {
        bIsVisible = bValue;
        if(KFPC != none)
        {
            KFPC.SetTimer(0.01, false, 'UpdateVisibilityState', self);
        }
    }
}

function UpdateVisibilityState()
{
    if(bIsVisible)
    {
        if(HudChatBox != none)
        {
            HudChatBox.ClearAndCloseChat();
        }        
    }
    else
    {
        Callback_ChatBoxClosed();
    }
}

function SetHUDSpectating(bool bSpectate)
{
    bIsSpectating = bSpectate;
    KFGXHUDManager.SetBool("bSpectating", bIsSpectating);
}

function ShowScoreboard(bool newShowScoreboard)
{
    if(ScoreboardWidget != none)
    {
        ScoreboardWidget.SetOpen(newShowScoreboard);
        ScoreboardWidget.bUpdateScoreboard = newShowScoreboard;
    }
}

function ShowVoiceComms(bool bShowComms)
{
    if((VoiceCommsWidget != none) && !bIsSpectating)
    {
        if(bShowComms)
        {
            VoiceCommsWidget.EnableComm();
            ShowScoreboard(false);
            WeaponSelectWidget.Hide();            
        }
        else
        {
            VoiceCommsWidget.DisableComm();
        }
        SetMovieCanReceiveFocus(bShowComms);
        SetMovieCanReceiveInput(bShowComms);
    }
}

function PlayerOwnerDied()
{
    if(VoiceCommsWidget != none)
    {
        VoiceCommsWidget.DisableComm();
    }
    if(WeaponSelectWidget != none)
    {
        WeaponSelectWidget.Hide();
    }
}

function Cleanup()
{
    if(GetGameViewportClient() != none)
    {
        GetGameViewportClient().__HandleInputAxis__Delegate = None;
    }
}

function NotifyHUDofPRIDestroyed(KFPlayerReplicationInfo KFPRI)
{
    if(VOIPWidget != none)
    {
        VOIPWidget.VOIPEventTriggered(KFPRI, false);
    }
}

function ShowBossNameplate(string BossName, string InSecondaryMessageString)
{
    local GFxObject TempObject;

    ShowVoiceComms(false);
    if((BossNameplateContainer != none) && BossName != "")
    {
        TempObject = CreateObject("Object");
        TempObject.SetString("bossName", BossName);
        TempObject.SetString("subString", InSecondaryMessageString);
        KFGXHUDManager.SetObject("bossData", TempObject);
    }
}

function HideBossNamePlate()
{
    if(BossNameplateContainer != none)
    {
        KFGXHUDManager.ActionScriptVoid("hideBossNamePlate");
    }
}

function DisplayPriorityMessage(string InPrimaryMessageString, string InSecondaryMessageString, int Lifetime)
{
    if((PriorityMessageContainer != none) && InPrimaryMessageString != "")
    {
        PriorityMessageContainer.ActionScriptVoid("showNewPriorityMessage");
    }
}

function DisplayInteractionMessage(string MessageString, int MessageIndex, optional string ButtonName, optional float Duration)
{
    ButtonName = "";    
    if(InteractionMessageContainer != none)
    {
        if((MessageIndex > CurrentInteractionIndex) || MessageIndex == 0)
        {
            if(MessageIndex == 0)
            {
                HideInteractionMessage();                
            }
            else
            {
                MessageString = Caps(MessageString);
                if(KFPC != none)
                {
                    KFPC.ClearTimer('HideInteractionMessage', self);
                    if(Duration > 0)
                    {
                        KFPC.SetTimer(Duration, false, 'HideInteractionMessage', self);
                    }
                }
                if((Class'Actor'.static.Len(ButtonName) - Class'Actor'.static.Len(ControllerStringPrefix)) > 1)
                {
                    Class'Actor'.static.ReplaceText(ButtonName, ControllerStringPrefix, "");
                }
                Class'Actor'.static.ReplaceText(MessageString, "<%X%>", ButtonName);
                SendInteractionMessageToGFX(MessageString);
            }
            CurrentInteractionIndex = MessageIndex;
        }
    }
}

function SendInteractionMessageToGFX(string MessageString)
{
    InteractionMessageContainer.ActionScriptVoid("showInteractionMessage");
}

function HideInteractionMessage()
{
    InteractionMessageContainer.ActionScriptVoid("outInteractionMessage");
}

function ShowNonCriticalMessage(string LocalizedMessage)
{
    if(NonCriticalGameMessageWidget != none)
    {
        NonCriticalGameMessageWidget.ShowMessage(LocalizedMessage);
    }
}

function UpdateRhythmCounterWidget(int Value)
{
    if(RhythmCounterWidget != none)
    {
        RhythmCounterWidget.SetCount(Value);
    }
}

function EatMyInput(bool bValue)
{
    local byte HUDPriority;

    if(bValue)
    {
        GetPC().PlayerInput.ResetInput();
    }
    SetMovieCanReceiveFocus(bValue);
    SetMovieCanReceiveInput(bValue);
    HUDPriority = ((bValue) ? 255 : 1);
    SetPriority(HUDPriority);
}

function UpdateUsingGamepad()
{
    if(SpectatorInfoWidget != none)
    {
        SpectatorInfoWidget.UpdateUsingGamepad(bUsingGamepad);
    }
    if(KickVoteWidget != none)
    {
        KickVoteWidget.UpdateUsingGamepad(bUsingGamepad);
    }
}

function OpenChatBox()
{
    if(HudChatBox != none)
    {
        HudChatBox.OpenInputField();
        EatMyInput(true);
        bIgnoreMouseInput = false;
    }
}

function ShowKickVote(PlayerReplicationInfo PRI, byte VoteDuration, bool bShowChoices)
{
    if(KickVoteWidget != none)
    {
        KickVoteWidget.ShowKickVote(PRI, VoteDuration, bShowChoices);
    }
}

simulated function HideKickVote()
{
    if(KickVoteWidget != none)
    {
        KickVoteWidget.VoteClosed();
    }
}

function UpdateKickVoteCount(byte YesVotes, byte NoVotes)
{
    if(KickVoteWidget != none)
    {
        KickVoteWidget.UpdateKickVoteCount(YesVotes, NoVotes);
    }
}

function UpdateScale()
{
    if(KFGXHUDManager != none)
    {
        KFGXHUDManager.SetFloat("HUDScale", HUDScale);
    }
}

function NotifyHUDofWeapon()
{
    if(WeaponSelectWidget != none)
    {
        WeaponSelectWidget.RefreshWeaponSelect();
    }
}

function ClearBuffIcons()
{
    if(PlayerStatusContainer != none)
    {
        PlayerStatusContainer.ClearBuffIcons();
    }
}

function Callback_BroadcastChatMessage(string NewMessage)
{
    if(!IsPendingKill())
    {
        if(NewMessage != "")
        {
            GetPC().Say(NewMessage);
        }
    }
}

function Callback_ChatBoxClosed()
{
    EatMyInput(false);
    bIgnoreMouseInput = true;
}

function Callback_SelectWeapon(int GroupIndex, int WeaponIndex)
{
    local KFInventoryManager KFIM;

    if(GetPC().Pawn != none)
    {
        KFIM = KFInventoryManager(GetPC().Pawn.InvManager);
        if(KFIM != none)
        {
            KFIM.SelectCurrentWeapon(byte(GroupIndex), byte(WeaponIndex));
        }
    }
}

function Callback_WeaponSelectFadedOut()
{
    if(WeaponSelectWidget != none)
    {
        WeaponSelectWidget.bChangingWeapons = false;
    }
}

function Callback_VoiceCommsSay(int CommsIndex)
{
    if(VoiceCommsWidget != none)
    {
        VoiceCommsWidget.SayVoiceCommms(CommsIndex);
    }
}

function Callback_VoteKick(bool bKick)
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(GetPC().PlayerReplicationInfo);
    KFPRI.CastKickVote(KFPRI, bKick);
}

defaultproperties
{
    HUDScale=1
    ControllerStringPrefix="XboxTypeS_"
    UpdateInterval=0.1
    MovieInfo=SwfMovie'UI_HUD.InGameHUD_SWF'
    bDisplayWithHudOff=false
    bAutoPlay=true
    bCaptureInput=true
    WidgetBindings=/* Array type was not detected. */
}