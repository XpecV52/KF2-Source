/*******************************************************************************
 * KFGFxMoviePlayer_HUD generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMoviePlayer_HUD extends GFxMoviePlayer
    config(UI);

var KFGFxMoviePlayer_ScoreBoard GfxScoreBoardPlayer;
var class<KFGFxMoviePlayer_ScoreBoard> ScoreBoardClass;
var KFLocalMessage_Priority.EGameMessageType LastMessageType;
var bool bObjectiveQueued;
var bool bIsSkipTraderVoteActive;
var bool bIsKickVoteActive;
var bool bUserAlreadyStartASkipTraderVote;
var bool bIsSpectating;
var bool bIsVisible;
var bool bUsingGamepad;
var array<string> SpecialWaveIconPath;
var array<string> SpecialWaveLocKey;
var KFGFxHUD_SpectatorInfo SpectatorInfoWidget;
var KFGFxHUD_PlayerStatus PlayerStatusContainer;
var KFGFxHUD_PlayerBackpack PlayerBackpackContainer;
var GFxObject PriorityMessageContainer;
var GFxObject BossNameplateContainer;
var GFxObject InteractionMessageContainer;
var KFGFxHUD_WeaponSelectWidget KeyboardWeaponSelectWidget;
var KFGFxHUD_WeaponSelectWidget ControllerWeaponSelectWidget;
var KFGFxHUD_WeaponSelectWidget WeaponSelectWidget;
var KFGFxHUD_TraderCompass TraderCompassWidget;
var KFGFxHUD_WaveInfo WaveInfoWidget;
var KFGFxWidget_VOIPNotification VOIPWidget;
var KFGFxHUD_ChatBoxWidget HudChatBox;
var KFGFxWidget_LevelUpNotification LevelUpNotificationWidget;
var KFGFxWidget_VoiceComms VoiceCommsWidget;
var KFGFxWidget_MusicNotification MusicNotification;
var KFGFxWidget_KickVote KickVoteWidget;
var KFGFxWidget_NonCriticalGameMessage NonCriticalGameMessageWidget;
var KFGFxWidget_RhythmCounter RhythmCounterWidget;
var KFGFxWidget_BossHealthBar bossHealthBar;
var KFPlayerController KFPC;
var config float HUDScale;
var GFxObject KFGXHUDManager;
var int CurrentInteractionIndex;
var const string ControllerStringPrefix;
var const string HoldCommandDelimiter;
var const string ZEDTeamTextColor;
var const string HumanTeamTextColor;
var const float UpdateInterval;
var protected float LastUpdateTime;
var string PendingKickPlayerName;

function Init(optional LocalPlayer LocPlay)
{
    KFPC = KFPlayerController(GetPC());
    KFPC.SetGFxHUD(self);
    super.Init(LocPlay);
    KFGXHUDManager = GetVariableObject("root");
    UpdateRatio();
    UpdateScale();
    KFGXHUDManager.SetBool("bConsoleBuild", Class'WorldInfo'.static.IsConsoleBuild());
}

function CreateScoreboard()
{
    if(GfxScoreBoardPlayer == none)
    {
        GfxScoreBoardPlayer = new ScoreBoardClass;
        GfxScoreBoardPlayer.SetTimingMode(1);
        GfxScoreBoardPlayer.Init(Class'Engine'.static.GetEngine().GamePlayers[GfxScoreBoardPlayer.LocalPlayerOwnerIndex]);
    }
}

function ClearScoreboard()
{
    if(GfxScoreBoardPlayer != none)
    {
        GfxScoreBoardPlayer.Close(true);
        GfxScoreBoardPlayer = none;
    }
}

function UpdateRatio(optional float fScale)
{
    local GFxObject GFxStage;
    local float ScaleStage;

    fScale = 1;
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        ScaleStage = Class'Engine'.static.GetEngine().GetTitleSafeArea();        
    }
    else
    {
        ScaleStage = fScale;
    }
    GFxStage = ((KFGXHUDManager != none) ? KFGXHUDManager.GetObject("stage") : none);
    if(GFxStage != none)
    {
        GFxStage.SetFloat("x", (GFxStage.GetFloat("width") * (1 - ScaleStage)) / float(2));
        GFxStage.SetFloat("y", (GFxStage.GetFloat("height") * (1 - ScaleStage)) / float(2));
        GFxStage.SetFloat("scaleX", ScaleStage);
        GFxStage.SetFloat("scaleY", ScaleStage);
    }
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'ObjectiveContainer':
            if((WaveInfoWidget != none) && WaveInfoWidget.ObjectiveContainer == none)
            {
                WaveInfoWidget.ObjectiveContainer = KFGFxHUD_ObjectiveConatiner(Widget);
                WaveInfoWidget.ObjectiveContainer.InitializeHUD();
                UpdateObjectiveActive();
            }
            break;
        case 'bossHealthBar':
            if(bossHealthBar == none)
            {
                bossHealthBar = KFGFxWidget_BossHealthBar(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                bossHealthBar.InitializeHUD();
            }
            break;
        case 'KickVoteWidget':
            if(KickVoteWidget == none)
            {
                KickVoteWidget = KFGFxWidget_KickVote(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                KickVoteWidget.InitializeHUD();
            }
            break;
        case 'SpectatorInfoWidget':
            if(SpectatorInfoWidget == none)
            {
                SpectatorInfoWidget = KFGFxHUD_SpectatorInfo(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                SpectatorInfoWidget.InitializeHUD();
            }
            break;
        case 'PlayerStatWidgetMC':
            if(PlayerStatusContainer == none)
            {
                PlayerStatusContainer = KFGFxHUD_PlayerStatus(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                PlayerStatusContainer.InitializeHUD();
            }
            break;
        case 'PlayerBackpackWidget':
            if(PlayerBackpackContainer == none)
            {
                PlayerBackpackContainer = KFGFxHUD_PlayerBackpack(Widget);
                SetWidgetPathBinding(Widget, WidgetPath);
                PlayerBackpackContainer.InitializeHUD();
            }
            break;
        case 'PriorityMsgWidget':
            if(PriorityMessageContainer == none)
            {
                PriorityMessageContainer = Widget;
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'BossNamePlate':
            if(BossNameplateContainer == none)
            {
                BossNameplateContainer = Widget;
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'interactionMsgWidget':
            if(InteractionMessageContainer == none)
            {
                InteractionMessageContainer = Widget;
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'WeaponSelectContainer':
            if(KeyboardWeaponSelectWidget == none)
            {
                KeyboardWeaponSelectWidget = KFGFxHUD_WeaponSelectWidget(Widget);
                KeyboardWeaponSelectWidget.RefreshWeaponSelect();
                KeyboardWeaponSelectWidget.InitializeObject();
                if(!bUsingGamepad)
                {
                    WeaponSelectWidget = KeyboardWeaponSelectWidget;
                }
            }
            break;
        case 'ControllerWeaponSelectContainer':
            if(ControllerWeaponSelectWidget == none)
            {
                ControllerWeaponSelectWidget = KFGFxHUD_WeaponSelectWidget(Widget);
                ControllerWeaponSelectWidget.RefreshWeaponSelect();
                ControllerWeaponSelectWidget.InitializeObject();
                if(bUsingGamepad)
                {
                    WeaponSelectWidget = ControllerWeaponSelectWidget;
                }
            }
            break;
        case 'CompassContainer':
            if(TraderCompassWidget == none)
            {
                TraderCompassWidget = KFGFxHUD_TraderCompass(Widget);
                TraderCompassWidget.InitializeHUD();
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'WaveInfoContainer':
            if(WaveInfoWidget == none)
            {
                WaveInfoWidget = KFGFxHUD_WaveInfo(Widget);
                WaveInfoWidget.InitializeHUD();
                SetWidgetPathBinding(Widget, WidgetPath);
            }
            break;
        case 'ChatBoxWidget':
            if(!Class'WorldInfo'.static.IsPlayInEditor())
            {
                if(HudChatBox == none)
                {
                    HudChatBox = KFGFxHUD_ChatBoxWidget(Widget);
                }
            }
            break;
        case 'VOIPWidget':
            if(VOIPWidget == none)
            {
                VOIPWidget = KFGFxWidget_VOIPNotification(Widget);
            }
            break;
        case 'LevelUpNotificationWidget':
            if(LevelUpNotificationWidget == none)
            {
                LevelUpNotificationWidget = KFGFxWidget_LevelUpNotification(Widget);
                LevelUpNotificationWidget.InitializeHUD();
            }
            break;
        case 'VoiceCommsWidget':
            if(VoiceCommsWidget == none)
            {
                VoiceCommsWidget = KFGFxWidget_VoiceComms(Widget);
                VoiceCommsWidget.InitializeHUD();
            }
            break;
        case 'MusicNotification':
            if(MusicNotification == none)
            {
                MusicNotification = KFGFxWidget_MusicNotification(Widget);
                MusicNotification.InitializeHUD();
            }
            break;
        case 'NonCriticalMessageWidget':
            if(NonCriticalGameMessageWidget == none)
            {
                NonCriticalGameMessageWidget = KFGFxWidget_NonCriticalGameMessage(Widget);
            }
            break;
        case 'RhythmCounter':
            if(RhythmCounterWidget == none)
            {
                RhythmCounterWidget = KFGFxWidget_RhythmCounter(Widget);
            }
            break;
        default:
            break;
    }
    return true;
}

function UpdateWeaponSelect()
{
    if(bUsingGamepad)
    {
        WeaponSelectWidget = ControllerWeaponSelectWidget;
        if(KeyboardWeaponSelectWidget != none)
        {
            KeyboardWeaponSelectWidget.Hide();
        }        
    }
    else
    {
        WeaponSelectWidget = KeyboardWeaponSelectWidget;
        if(ControllerWeaponSelectWidget != none)
        {
            ControllerWeaponSelectWidget.Hide();
        }
    }
}

function TickHud(float DeltaTime)
{
    if((KFPC == none) || (KFPC.WorldInfo.TimeSeconds - LastUpdateTime) < UpdateInterval)
    {
        return;
    }
    if(WaveInfoWidget != none)
    {
        WaveInfoWidget.TickHud(DeltaTime);
    }
    if(!KFPC.myHUD.bShowHUD)
    {
        return;
    }
    LastUpdateTime = KFPC.WorldInfo.TimeSeconds;
    if(bUsingGamepad != KFPC.PlayerInput.bUsingGamepad)
    {
        bUsingGamepad = KFPC.PlayerInput.bUsingGamepad;
        UpdateUsingGamePad();
        UpdateWeaponSelect();
    }
    if(bossHealthBar != none)
    {
        bossHealthBar.TickHud(DeltaTime);
    }
    if(SpectatorInfoWidget != none)
    {
        SpectatorInfoWidget.TickHud(DeltaTime);
    }
    if(!bIsSpectating)
    {
        if(PlayerStatusContainer != none)
        {
            PlayerStatusContainer.TickHud(DeltaTime);
        }
        if(PlayerBackpackContainer != none)
        {
            PlayerBackpackContainer.TickHud(DeltaTime);
        }
    }
    if(TraderCompassWidget != none)
    {
        TraderCompassWidget.TickHud(DeltaTime);
    }
    if(GfxScoreBoardPlayer != none)
    {
        GfxScoreBoardPlayer.TickHud(DeltaTime);
    }
}

function UpdateObjectiveActive()
{
    local KFGameReplicationInfo KFGRI;
    local KFInterface_MapObjective ObjectiveInterface;

    KFPC = KFPlayerController(GetPC());
    if(KFPC == none)
    {
        return;
    }
    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    if((WaveInfoWidget != none) && WaveInfoWidget.ObjectiveContainer != none)
    {
        if(KFGRI.CurrentObjective == none)
        {
            WaveInfoWidget.ObjectiveContainer.SetActive(false);            
        }
        else
        {
            ObjectiveInterface = KFInterface_MapObjective(KFGRI.CurrentObjective);
            WaveInfoWidget.ObjectiveContainer.SetActive(ObjectiveInterface.IsActive());
        }
    }
}

function UpdateWaveCount()
{
    if(GfxScoreBoardPlayer != none)
    {
        GfxScoreBoardPlayer.UpdateWaveCount();
    }
    if(WaveInfoWidget != none)
    {
        WaveInfoWidget.UpdateWaveCount();
    }
}

function NotifyVisibilityChange(bool bValue)
{
    if(bIsVisible != bValue)
    {
        bIsVisible = bValue;
        if(KFPC != none)
        {
            KFPC.SetTimer(0.01, false, 'UpdateVisibilityState', self);
        }
    }
}

function UpdateVisibilityState()
{
    if(bIsVisible)
    {
        if(HudChatBox != none)
        {
            HudChatBox.ClearAndCloseChat();
        }        
    }
    else
    {
        Callback_ChatBoxClosed();
    }
}

function SetHUDSpectating(bool bSpectate)
{
    bIsSpectating = bSpectate;
    KFGXHUDManager.SetBool("bSpectating", bIsSpectating);
}

function ShowScoreboard(bool newShowScoreboard)
{
    if(GfxScoreBoardPlayer == none)
    {
        CreateScoreboard();
    }
    if(GfxScoreBoardPlayer != none)
    {
        GfxScoreBoardPlayer.ShowScoreboard(newShowScoreboard);
    }
}

function ShowVoiceComms(bool bShowComms)
{
    if((VoiceCommsWidget != none) && !bIsSpectating)
    {
        if(bShowComms)
        {
            VoiceCommsWidget.EnableComm();
            ShowScoreboard(false);
            if(WeaponSelectWidget != none)
            {
                WeaponSelectWidget.Hide();
            }            
        }
        else
        {
            VoiceCommsWidget.DisableComm();
        }
        SetMovieCanReceiveFocus(bShowComms);
        SetMovieCanReceiveInput(bShowComms);
    }
}

function PlayerOwnerDied()
{
    if(VoiceCommsWidget != none)
    {
        VoiceCommsWidget.DisableComm();
    }
    if(WeaponSelectWidget != none)
    {
        WeaponSelectWidget.Hide();
    }
}

function Cleanup()
{
    ClearScoreboard();
    if(GetGameViewportClient() != none)
    {
        GetGameViewportClient().__HandleInputAxis__Delegate = None;
    }
}

function NotifyHUDofPRIDestroyed(KFPlayerReplicationInfo KFPRI)
{
    if(VOIPWidget != none)
    {
        VOIPWidget.VOIPEventTriggered(KFPRI, false);
    }
}

function ShowKillMessage(PlayerReplicationInfo PRI1, PlayerReplicationInfo PRI2, optional bool bDeathMessage, optional Object OptionalObject)
{
    local GFxObject DataObject;
    local bool bHumanDeath;
    local string KilledName, KillerName, KilledIconpath, KillerIconPath, KillerTextColor, KilledTextColor;

    local class<KFPawn_Monster> KFPM;

    bDeathMessage = false;    
    if(KFPC == none)
    {
        return;
    }
    KFPM = class<KFPawn_Monster>(OptionalObject);
    if(KFGXHUDManager != none)
    {
        if(bDeathMessage)
        {
            if(KFPM != none)
            {
                KillerName = KFPM.static.GetLocalizedName();
                KillerTextColor = ZEDTeamTextColor;
                KillerIconPath = "img://" $ Class'KFPerk_Monster'.static.GetPerkIconPath();
            }            
        }
        else
        {
            if(KFPM != none)
            {
                KilledName = KFPM.static.GetLocalizedName();
                bHumanDeath = false;                
            }
            else
            {
                if(PRI1 != none)
                {
                    if(PRI1.GetTeamNum() == 255)
                    {
                        KillerTextColor = ZEDTeamTextColor;
                        KillerIconPath = "img://" $ Class'KFPerk_Monster'.static.GetPerkIconPath();                        
                    }
                    else
                    {
                        KillerTextColor = HumanTeamTextColor;
                        KillerIconPath = "img://" $ KFPlayerReplicationInfo(PRI1).CurrentPerkClass.static.GetPerkIconPath();
                    }
                    KillerName = PRI1.PlayerName;
                }
            }
        }
        if(PRI2 != none)
        {
            if(PRI2.GetTeamNum() == Class'KFTeamInfo_Human'.default.TeamIndex)
            {
                bHumanDeath = true;
                KilledTextColor = HumanTeamTextColor;                
            }
            else
            {
                KilledTextColor = ZEDTeamTextColor;
                bHumanDeath = false;
            }
            KilledName = PRI2.PlayerName;
            KilledIconpath = "img://" $ KFPlayerReplicationInfo(PRI2).CurrentPerkClass.static.GetPerkIconPath();
        }
        DataObject = CreateObject("Object");
        DataObject.SetBool("humanDeath", bHumanDeath);
        DataObject.SetString("killedName", KilledName);
        DataObject.SetString("killedTextColor", KilledTextColor);
        DataObject.SetString("killedIcon", KilledIconpath);
        DataObject.SetString("killerName", KillerName);
        DataObject.SetString("killerTextColor", KillerTextColor);
        DataObject.SetString("killerIcon", KillerIconPath);
        DataObject.SetString("text", KillerName @ KilledName);
        KFGXHUDManager.SetObject("newBark", DataObject);
    }
}

function ShowBossNameplate(string BossName, string InSecondaryMessageString)
{
    local GFxObject TempObject;

    ShowVoiceComms(false);
    if((BossNameplateContainer != none) && BossName != "")
    {
        TempObject = CreateObject("Object");
        TempObject.SetString("bossName", BossName);
        TempObject.SetString("subString", InSecondaryMessageString);
        KFGXHUDManager.SetObject("bossData", TempObject);
    }
}

function HideBossNamePlate()
{
    if(BossNameplateContainer != none)
    {
        KFGXHUDManager.ActionScriptVoid("hideBossNamePlate");
    }
    if(bossHealthBar != none)
    {
        bossHealthBar.OnNamePlateHidden();
    }
}

function DisplayPriorityMessage(string InPrimaryMessageString, string InSecondaryMessageString, int Lifetime, optional KFLocalMessage_Priority.EGameMessageType MessageType)
{
    local GFxObject PriorityMessageObject;

    if((PriorityMessageContainer != none) && InPrimaryMessageString != "")
    {
        LastMessageType = MessageType;
        PriorityMessageObject = CreateObject("Object");
        PriorityMessageObject.SetString("priorityTextPrimaryString", InPrimaryMessageString);
        PriorityMessageObject.SetString("priorityTextSecondaryString", InSecondaryMessageString);
        PriorityMessageObject.SetInt("priorityTextDisplayTime", Lifetime);
        PriorityMessageContainer.SetObject("priorityMessage", PriorityMessageObject);
    }
}

function DisplayExpandedWaveInfo()
{
    local KFGameReplicationInfo KFGRI;
    local KFWeeklyOutbreakInformation WeeklyInfo;
    local GFxObject PriorityMessageObject;
    local int ModifierIndex;

    switch(LastMessageType)
    {
        case 0:
        case 17:
        case 18:
        case 19:
            break;
        default:
            return;
            break;
    }
    PriorityMessageObject = CreateObject("Object");
    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    if(PriorityMessageContainer != none)
    {
        PriorityMessageObject = CreateObject("Object");
        if(KFGRI.default.bEndlessMode)
        {
            PriorityMessageObject.SetString("waveNum", string(KFGRI.WaveNum));            
        }
        else
        {
            if(KFGRI.IsBossWave())
            {
                PriorityMessageObject.SetString("waveNum", Class'KFGFxHUD_WaveInfo'.default.BossWaveString);                
            }
            else
            {
                if(KFGRI.IsFinalWave())
                {
                    PriorityMessageObject.SetString("waveNum", Class'KFGFxHUD_WaveInfo'.default.FinalWaveString);                    
                }
                else
                {
                    PriorityMessageObject.SetString("waveNum", (string(KFGRI.WaveNum) $ "/") @ string(KFGRI.GetFinalWaveNum()));
                }
            }
        }
        PriorityMessageObject.SetString("waveString", Class'KFGFxHUD_WaveInfo'.default.WaveString);
        PriorityMessageObject.SetInt("waveTier", GetWaveTier());
        if(KFGRI.IsWeeklyWave(ModifierIndex))
        {
            WeeklyInfo = Class'KFMission_LocalizedStrings'.static.GetWeeklyOutbreakInfoByIndex(ModifierIndex);
            PriorityMessageObject.SetString("waveType", WeeklyInfo.FriendlyName);
            PriorityMessageObject.SetString("waveImage", "img://" $ WeeklyInfo.IconPath);            
        }
        else
        {
            if(KFGRI.IsSpecialWave(ModifierIndex))
            {
                PriorityMessageObject.SetString("waveType", Localize("Zeds", SpecialWaveLocKey[ModifierIndex], "KFGame"));
                PriorityMessageObject.SetString("waveImage", "img://" $ SpecialWaveIconPath[ModifierIndex]);                
            }
        }
        PriorityMessageContainer.SetObject("waveNumberMessage", PriorityMessageObject);
    }
}

function int GetWaveTier()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    if(KFGRI.default.bEndlessMode)
    {
        if(KFGRI.WaveNum > 20)
        {
            return 5;            
        }
        else
        {
            if(KFGRI.WaveNum > 15)
            {
                return 4;
            }
        }
        if(KFGRI.WaveNum > 10)
        {
            return 3;
        }
        if(KFGRI.WaveNum > 5)
        {
            return 2;
        }        
    }
    else
    {
        if(KFGRI.IsFinalWave())
        {
            return 3;            
        }
        else
        {
            if(KFGRI.IsBossWave())
            {
                return 5;
            }
        }
    }
    return 1;
}

function bool ShouldCheckForObjective(KFLocalMessage_Priority.EGameMessageType MessageType)
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    if(KFGRI.GetNumPlayersAlive() <= 0)
    {
        return false;
    }
    switch(MessageType)
    {
        case 0:
        case 17:
        case 18:
        case 19:
        case 1:
            return true;
        default:
            return false;
            break;
    }
}

simulated function PlayObjectiveAudio()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    if(KFGRI.PreviousObjectiveResult > 0)
    {
        Class'KFMusicStingerHelper'.static.PlayObjectiveWonStinger(GetPC());        
    }
    else
    {
        Class'KFMusicStingerHelper'.static.PlayNewObjectiveStinger(GetPC());
    }
}

simulated function DisplayObjectiveResults()
{
    local KFGameReplicationInfo KFGRI;
    local GFxObject ObjectiveObject;
    local KFInterface_MapObjective ObjectiveInterface;

    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    ObjectiveInterface = KFInterface_MapObjective(KFGRI.PreviousObjective);
    if(KFGRI.PreviousObjectiveResult > 0)
    {
        ObjectiveObject = CreateObject("Object");
        ObjectiveObject.SetString("titleString", Class'KFLocalMessage_Priority'.default.ObjectiveWonMessage);
        ObjectiveObject.SetString("nameString", Class'KFCommon_LocalizedStrings'.default.BonusDoshString);
        ObjectiveObject.SetString("descString", " ");
        ObjectiveObject.SetString("requireString", " ");
        ObjectiveObject.SetString("rewardNum", string(KFGRI.PreviousObjectiveResult));
        ObjectiveObject.SetString("xpBonus", string(KFGRI.PreviousObjectiveXPResult));
        ObjectiveObject.SetString("voshBonus", string(KFGRI.PreviousObjectiveVoshResult));
        ObjectiveObject.SetString("iconPath", "img://" $ PathName(ObjectiveInterface.GetIcon()));
        ObjectiveObject.SetBool("isBonus", true);
        PriorityMessageContainer.SetObject("objectiveMessage", ObjectiveObject);
        LastMessageType = 20;
    }
}

simulated function DisplayNewObjective()
{
    local KFGameReplicationInfo KFGRI;
    local GFxObject ObjectiveObject;
    local KFInterface_MapObjective ObjectiveInterface;

    KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
    ObjectiveInterface = KFGRI.ObjectiveInterface;
    if(NotEqual_InterfaceInterface(ObjectiveInterface, (none)))
    {
        ObjectiveObject = CreateObject("Object");
        ObjectiveObject.SetString("titleString", Class'KFLocalMessage_Priority'.default.ObjectiveStartMessage);
        ObjectiveObject.SetString("nameString", ObjectiveInterface.GetLocalizedName());
        ObjectiveObject.SetString("descString", ObjectiveInterface.GetLocalizedDescription());
        ObjectiveObject.SetString("requireString", ObjectiveInterface.GetLocalizedRequirements());
        ObjectiveObject.SetString("rewardNum", string(ObjectiveInterface.GetMaxDoshReward()));
        ObjectiveObject.SetString("xpBonus", string(ObjectiveInterface.GetMaxXPReward()));
        ObjectiveObject.SetString("voshBonus", string(ObjectiveInterface.GetMaxVoshReward()));
        ObjectiveObject.SetString("iconPath", "img://" $ PathName(ObjectiveInterface.GetIcon()));
        ObjectiveObject.SetBool("isBonus", false);
        KFGRI.PreviousObjectiveResult = -1;
        PriorityMessageContainer.SetObject("objectiveMessage", ObjectiveObject);
        LastMessageType = 20;
    }
}

function DisplayInteractionMessage(string MessageString, int MessageIndex, optional string ButtonName, optional float Duration)
{
    ButtonName = "";    
    if(InteractionMessageContainer != none)
    {
        if((MessageIndex == 0) || KFPC.IsBossCameraMode())
        {
            HideInteractionMessage();            
        }
        else
        {
            if((MessageIndex != CurrentInteractionIndex) && (GetInteractionMessagePriority(MessageIndex)) >= (GetInteractionMessagePriority(CurrentInteractionIndex)))
            {
                MessageString = Caps(MessageString);
                if(KFPC != none)
                {
                    KFPC.ClearTimer('HideInteractionMessage', self);
                    if(Duration > 0)
                    {
                        KFPC.SetTimer(Duration, false, 'HideInteractionMessage', self);
                    }
                }
                if((Class'Actor'.static.Len(ButtonName) - Class'Actor'.static.Len(ControllerStringPrefix)) > 1)
                {
                    Class'Actor'.static.ReplaceText(ButtonName, ControllerStringPrefix, "");
                }
                SendInteractionMessageToGFX(MessageString, ButtonName);
                CurrentInteractionIndex = MessageIndex;
            }
        }
    }
}

function int GetInteractionMessagePriority(int MessageIndex)
{
    if(MessageIndex < 11)
    {
        return 11 - 1;
    }
    return MessageIndex;
}

function SendInteractionMessageToGFX(string MessageString, string ButtonName)
{
    local GFxObject TextObject;
    local array<string> StringArray;

    TextObject = CreateObject("Object");
    StringArray = SplitString(MessageString, HoldCommandDelimiter);
    if(StringArray.Length > 1)
    {
        TextObject.SetString("holdMessage", StringArray[1]);
        TextObject.SetBool("bHoldCommand", true);        
    }
    else
    {
        TextObject.SetBool("bHoldCommand", false);
    }
    TextObject.SetString("message", StringArray[0]);
    TextObject.SetString("buttonName", ButtonName);
    TextObject.SetString("holdString", Class'KFGFxControlsContainer_ControllerPresets'.default.HoldString);
    TextObject.SetString("tapString", Class'KFGFxControlsContainer_ControllerPresets'.default.TapString);
    InteractionMessageContainer.SetObject("interactionMessageData", TextObject);
}

function HideInteractionMessage()
{
    CurrentInteractionIndex = 0;
    InteractionMessageContainer.ActionScriptVoid("outInteractionMessage");
}

function ShowNonCriticalMessage(string LocalizedMessage)
{
    if(NonCriticalGameMessageWidget != none)
    {
        NonCriticalGameMessageWidget.ShowMessage(LocalizedMessage);
    }
}

function UpdateRhythmCounterWidget(int Value, int Max)
{
    if(RhythmCounterWidget != none)
    {
        RhythmCounterWidget.SetCount(Value, Max);
    }
}

function EatMyInput(bool bValue)
{
    local byte HUDPriority;

    if(bValue)
    {
        GetPC().PlayerInput.ResetInput();
    }
    SetMovieCanReceiveFocus(bValue);
    SetMovieCanReceiveInput(bValue);
    HUDPriority = ((bValue) ? 255 : 1);
    SetPriority(HUDPriority);
}

function UpdateUsingGamePad()
{
    if(SpectatorInfoWidget != none)
    {
        SpectatorInfoWidget.UpdateUsingGamePad(bUsingGamepad);
    }
    if(KickVoteWidget != none)
    {
        KickVoteWidget.UpdateUsingGamePad(bUsingGamepad);
    }
}

function OpenChatBox()
{
    if(HudChatBox != none)
    {
        HudChatBox.OpenInputField();
        EatMyInput(true);
        bIgnoreMouseInput = false;
    }
}

function ShowKickVote(PlayerReplicationInfo PRI, byte VoteDuration, bool bShowChoices)
{
    if(KickVoteWidget != none)
    {
        bIsSkipTraderVoteActive = false;
        bIsKickVoteActive = true;
        KickVoteWidget.ShowVote(PRI, VoteDuration, bShowChoices, bIsSkipTraderVoteActive);
    }
}

simulated function HideKickVote()
{
    if(KickVoteWidget != none)
    {
        bIsSkipTraderVoteActive = false;
        bIsKickVoteActive = false;
        KickVoteWidget.VoteClosed();
    }
}

function UpdateKickVoteCount(byte YesVotes, byte NoVotes)
{
    if(KickVoteWidget != none)
    {
        KickVoteWidget.UpdateVoteCount(YesVotes, NoVotes);
    }
}

function ShowSkipTraderVote(PlayerReplicationInfo PRI, byte VoteDuration, bool bShowChoices)
{
    if(KickVoteWidget != none)
    {
        bIsSkipTraderVoteActive = true;
        bIsKickVoteActive = false;
        KickVoteWidget.ShowVote(PRI, VoteDuration, bShowChoices, bIsSkipTraderVoteActive);
    }
}

function UpdateSkipTraderTime(byte VoteDuration)
{
    if(KickVoteWidget != none)
    {
        KickVoteWidget.UpdateVoteDuration(VoteDuration);
    }
}

simulated function HideSkipTraderVote()
{
    if(KickVoteWidget != none)
    {
        bIsSkipTraderVoteActive = false;
        bIsKickVoteActive = false;
        KickVoteWidget.VoteClosed();
    }
}

function UpdateSkipTraderVoteCount(byte YesVotes, byte NoVotes)
{
    if(KickVoteWidget != none)
    {
        KickVoteWidget.UpdateVoteCount(YesVotes, NoVotes);
    }
}

function UpdateScale()
{
    if(KFGXHUDManager != none)
    {
        KFGXHUDManager.SetFloat("HUDScale", HUDScale * Class'WorldInfo'.static.GetResolutionBasedHUDScale());
    }
}

function NotifyHUDofWeapon()
{
    if(WeaponSelectWidget != none)
    {
        WeaponSelectWidget.RefreshWeaponSelect();
    }
}

function ClearBuffIcons()
{
    if(PlayerStatusContainer != none)
    {
        PlayerStatusContainer.ClearBuffIcons();
    }
}

function PawnDied()
{
    ClearBuffIcons();
}

function ReceivePawn(KFPawn NewPawn);

function Callback_ObjMessageFired()
{
    PlayObjectiveAudio();
}

function Callback_PriorityMessageComplete()
{
    local KFInterface_MapObjective ObjectiveInterface;
    local KFGameReplicationInfo KFGRI;

    DisplayExpandedWaveInfo();
    if(ShouldCheckForObjective(LastMessageType))
    {
        KFGRI = KFGameReplicationInfo(KFPC.WorldInfo.GRI);
        ObjectiveInterface = KFGRI.ObjectiveInterface;
        if(NotEqual_InterfaceInterface(ObjectiveInterface, (none)))
        {
            DisplayNewObjective();            
        }
        else
        {
            if(KFGRI.PreviousObjective != none)
            {
                DisplayObjectiveResults();
            }
        }
        UpdateObjectiveActive();
        LastMessageType = 20;        
    }
    else
    {
        bObjectiveQueued = true;
    }
}

function Callback_BroadcastChatMessage(string NewMessage)
{
    if(!IsPendingKill())
    {
        if(NewMessage != "")
        {
            if(KFPC.CurrentTextChatChannel == 1)
            {
                GetPC().TeamSay(NewMessage);                
            }
            else
            {
                GetPC().Say(NewMessage);
            }
        }
    }
}

function Callback_ChatBoxClosed()
{
    EatMyInput(false);
    bIgnoreMouseInput = true;
}

function Callback_SelectWeapon(int GroupIndex, int WeaponIndex)
{
    local KFInventoryManager KFIM;

    if(GetPC().Pawn != none)
    {
        KFIM = KFInventoryManager(GetPC().Pawn.InvManager);
        if(KFIM != none)
        {
            KFIM.SelectCurrentWeapon(byte(GroupIndex), byte(WeaponIndex));
        }
    }
}

function Callback_WeaponSelectFadedOut()
{
    if(WeaponSelectWidget != none)
    {
        WeaponSelectWidget.bChangingWeapons = false;
    }
}

function Callback_VoiceCommsSay(int CommsIndex)
{
    if(VoiceCommsWidget != none)
    {
        VoiceCommsWidget.SayVoiceCommms(CommsIndex);
    }
}

function Callback_VoiceCommsSelection(int CommsIndex)
{
    if(VoiceCommsWidget != none)
    {
        VoiceCommsWidget.SaveVoiceCommSelection(CommsIndex);
    }
}

function Callback_VoteKick(bool bKickOrSkip)
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(GetPC().PlayerReplicationInfo);
    if(bIsSkipTraderVoteActive)
    {
        KFPRI.CastSkipTraderVote(KFPRI, bKickOrSkip);        
    }
    else
    {
        KFPRI.CastKickVote(KFPRI, bKickOrSkip);
    }
    if(KickVoteWidget != none)
    {
        KickVoteWidget.ResetVote();
    }
}

defaultproperties
{
    ScoreBoardClass=Class'KFGFxMoviePlayer_ScoreBoard'
    SpecialWaveIconPath(0)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Cyst"
    SpecialWaveIconPath(1)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Slasher"
    SpecialWaveIconPath(2)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Clot"
    SpecialWaveIconPath(3)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Crawler"
    SpecialWaveIconPath(4)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Gorefast"
    SpecialWaveIconPath(5)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Stalker"
    SpecialWaveIconPath(6)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Scrake"
    SpecialWaveIconPath(7)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_FP"
    SpecialWaveIconPath(8)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_FP"
    SpecialWaveIconPath(9)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Bloat"
    SpecialWaveIconPath(10)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Siren"
    SpecialWaveIconPath(11)="UI_Endless_TEX.ZEDs.UI_ZED_Endless_Husk"
    SpecialWaveLocKey(0)="KFPawn_ZedClot_Cyst"
    SpecialWaveLocKey(1)="KFPawn_ZedClot_Slasher"
    SpecialWaveLocKey(2)="KFPawn_ZedClot_Alpha"
    SpecialWaveLocKey(3)="KFPawn_ZedCrawler"
    SpecialWaveLocKey(4)="KFPawn_ZedGorefast"
    SpecialWaveLocKey(5)="KFPawn_ZedStalker"
    SpecialWaveLocKey(6)="KFPawn_ZedScrake"
    SpecialWaveLocKey(7)="KFPawn_ZedFleshpound"
    SpecialWaveLocKey(8)=""
    SpecialWaveLocKey(9)="KFPawn_ZedBloat"
    SpecialWaveLocKey(10)="KFPawn_ZedSiren"
    SpecialWaveLocKey(11)="KFPawn_ZedHusk"
    HUDScale=1
    ControllerStringPrefix="XboxTypeS_"
    HoldCommandDelimiter="<%HOLD%>"
    ZEDTeamTextColor="0xBE0600"
    HumanTeamTextColor="0xBAFFFF"
    UpdateInterval=0.1
    MovieInfo=SwfMovie'UI_HUD.InGameHUD_SWF'
    bDisplayWithHudOff=false
    bAutoPlay=true
    bCaptureInput=true
    SoundThemes=/* Array type was not detected. */
    WidgetBindings=/* Array type was not detected. */
}