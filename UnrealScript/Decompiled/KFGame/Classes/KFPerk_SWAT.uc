/*******************************************************************************
 * KFPerk_SWAT generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_SWAT extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision);

enum ESWATPerkSkills
{
    ESWAT_HeavyArmor,
    ESWAT_TacticalMovement,
    ESWAT_Backup,
    ESWAT_TacticalReload,
    ESWAT_SpecialAmmunition,
    ESWAT_AmmoVest,
    ESWAT_BodyArmor,
    ESWAT_Cripple,
    ESWAT_SWATEnforcer,
    ESWAT_RapidAssault,
    ESWAT_MAX
};

var private const PerkSkill WeaponDamage;
var private const PerkSkill BulletResistance;
var private const PerkSkill MagSize;
var private const PerkSkill WeaponSwitchSpeed;
var private const float RapidAssaultFiringRate;
var private const float SnarePower;
var private const float TacticalMovementBobDamp;
var private const class<KFWeaponDefinition> BackupSecondaryWeaponDef;
var private const float HeavyArmorAbsorptionPct;
var float CurrentHealthPenalty;
var int BumpDamageAmount;
var class<DamageType> BumpDamageType;
var float BumpMomentum;
var float SWATEnforcerZedTimeSpeedScale;
var float LastBumpTime;
var array<Actor> CurrentBumpedActors;
var float BumpCooldown;

replication
{
     if(bNetDirty)
        CurrentHealthPenalty;
}

function SetPlayerDefaults(Pawn PlayerPawn)
{
    local float NewArmor;

    super.SetPlayerDefaults(PlayerPawn);
    if(OwnerPawn.Role == ROLE_Authority)
    {
        if(IsHeavyArmorActive())
        {
            NewArmor += (float(OwnerPawn.default.MaxArmor) * (GetSkillValue(PerkSkills[0])));
        }
        if(IsBodyArmorActive())
        {
            NewArmor += (float(OwnerPawn.default.MaxArmor) * (GetSkillValue(PerkSkills[6])));
        }
        OwnerPawn.AddArmor(Round(NewArmor));
    }
}

function ApplySkillsToPawn()
{
    super.ApplySkillsToPawn();
    if(OwnerPawn != none)
    {
        OwnerPawn.bMovesFastInZedTime = IsSWATEnforcerActive();
    }
}

simulated event float GetZedTimeSpeedScale()
{
    return ((IsSWATEnforcerActive()) ? SWATEnforcerZedTimeSpeedScale : 1);
}

simulated function string GetSecondaryWeaponClassPath()
{
    return ((IsBackupActive()) ? BackupSecondaryWeaponDef.default.WeaponClassPath : SecondaryWeaponDef.default.WeaponClassPath);
}

function ModifyDamageTaken(out int InDamage, optional class<DamageType> DamageType, optional Controller InstigatedBy)
{
    local float TempDamage;

    if(InDamage <= 0)
    {
        return;
    }
    TempDamage = float(InDamage);
    if(ClassIsChildOf(DamageType, Class'KFDT_Ballistic'))
    {
        TempDamage -= (float(InDamage) * (GetPassiveValue(BulletResistance, CurrentLevel)));
    }
    InDamage = Round(TempDamage);
}

simulated function ModifyMagSizeAndNumber(KFWeapon KFW, out int MagazineCapacity, optional array< class<KFPerk> > WeaponPerkClass, optional bool bSecondary, optional name WeaponClassName)
{
    local float TempCapacity;

    bSecondary = false;    
    TempCapacity = float(MagazineCapacity);
    if(((!bSecondary && !Is9mm(KFW)) && IsWeaponOnPerk(KFW, WeaponPerkClass, self.Class)) && (KFW == none) || !KFW.bNoMagazine)
    {
        TempCapacity += (float(MagazineCapacity) * (GetPassiveValue(MagSize, CurrentLevel)));
    }
    MagazineCapacity = Round(TempCapacity);
}

simulated function ModifyWeaponSwitchTime(out float ModifiedSwitchTime)
{
    ModifiedSwitchTime *= (1 - (GetPassiveValue(WeaponSwitchSpeed, CurrentLevel)));
}

function bool CanNotBeGrabbed()
{
    return IsHeavyArmorActive();
}

simulated function bool HasHeavyArmor()
{
    return IsHeavyArmorActive();
}

private static final simulated function bool Is9mm(KFWeapon KFW)
{
    return ((KFW != none) && KFW.default.bIsBackupWeapon) && !KFW.IsMeleeWeapon();
}

simulated event float GetIronSightSpeedModifier(KFWeapon KFW)
{
    if((IsTacticalMovementActive()) && Is9mm(KFW) || IsWeaponOnPerk(KFW,, self.Class))
    {
        return GetSkillValue(PerkSkills[1]);
    }
    return 1;
}

function FinalizeSpeedVariables()
{
    super.FinalizeSpeedVariables();
    if(OwnerPawn != none)
    {
        CurrentHealthPenalty = 1 - OwnerPawn.LowHealthSpeedPenalty;
    }
}

simulated event float GetCrouchSpeedModifier(KFWeapon KFW)
{
    if((IsTacticalMovementActive()) && Is9mm(KFW) || IsWeaponOnPerk(KFW,, self.Class))
    {
        return (GetSkillValue(PerkSkills[1])) * CurrentHealthPenalty;
    }
    return 1;
}

simulated function ModifyWeaponBopDamping(out float BobDamping, KFWeapon PawnWeapon)
{
    if((IsTacticalMovementActive()) && Is9mm(PawnWeapon) || IsWeaponOnPerk(PawnWeapon,, self.Class))
    {
        BobDamping *= default.TacticalMovementBobDamp;
    }
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType, optional int HitZoneIdx)
{
    local KFWeapon KFW;
    local float TempDamage;

    TempDamage = float(InDamage);
    if(DamageCauser != none)
    {
        KFW = GetWeaponFromDamageCauser(DamageCauser);
    }
    if(KFW != none)
    {
        if(IsBackupActive() && (IsBackupWeapon(KFW)) || KFW.Class.Name == 'KFWeap_Pistol_Dual9mm')
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[2])));            
        }
        else
        {
            if((IsWeaponOnPerk(KFW,, self.Class)) || (DamageType != none) && IsDamageTypeOnPerk(DamageType))
            {
                TempDamage *= (GetPassiveValue(WeaponDamage, CurrentLevel));
            }
        }
    }
    InDamage = Round(TempDamage);
}

simulated function ModifyMaxSpareAmmoAmount(KFWeapon KFW, out int MaxSpareAmmo, const optional out STraderItem TraderItem, optional bool bSecondary)
{
    local float TempMaxSpareAmmoAmount;

    bSecondary = false;
    if((IsAmmoVestActive() && !Is9mm(KFW)) && IsWeaponOnPerk(KFW, TraderItem.AssociatedPerkClasses, self.Class))
    {
        TempMaxSpareAmmoAmount = float(MaxSpareAmmo);
        TempMaxSpareAmmoAmount += (float(MaxSpareAmmo) * (GetSkillValue(PerkSkills[5])));
        MaxSpareAmmo = Round(TempMaxSpareAmmoAmount);
    }
}

simulated function float GetSnareSpeedModifier()
{
    return ((IsCrippleActive()) ? default.PerkSkills[7].StartingValue : 1);
}

simulated function float GetSnarePowerModifier(optional class<DamageType> DamageType, optional byte HitZoneIdx)
{
    if((IsCrippleActive() && DamageType != none) && IsDamageTypeOnPerk(class<KFDamageType>(DamageType)))
    {
        return default.SnarePower;
    }
    return 0;
}

function ModifyArmor(out byte MaxArmor)
{
    local float TempArmor;

    if(IsBodyArmorActive())
    {
        TempArmor = float(MaxArmor);
        TempArmor += (TempArmor * (GetSkillValue(PerkSkills[6])));
        MaxArmor = byte(Round(TempArmor));
    }
}

simulated function float GetZedTimeModifier(KFWeapon W)
{
    local name StateName;

    StateName = W.GetStateName();
    if((IsRapidAssaultActive()) && Is9mm(W) || IsWeaponOnPerk(W,, self.Class))
    {
        if(ZedTimeModifyingStates.Find(StateName != -1)
        {
            return RapidAssaultFiringRate;
        }
    }
    return 0;
}

function float GetStumblePowerModifier(optional KFPawn KFP, optional class<KFDamageType> DamageType, optional out float CooldownModifier, optional byte BodyPart)
{
    local KFWeapon KFW;
    local float StumbleModifier;

    StumbleModifier = 0;
    KFW = GetOwnerWeapon();
    if((IsSpecialAmmunitionActive()) && Is9mm(KFW) || IsWeaponOnPerk(KFW,, self.Class))
    {
        StumbleModifier += (GetSkillValue(PerkSkills[4]));
    }
    if(IsRapidAssaultActive())
    {
        StumbleModifier += (GetSkillValue(PerkSkills[9]));
    }
    return StumbleModifier;
}

simulated function bool GetIsUberAmmoActive(KFWeapon KFW)
{
    return (IsRapidAssaultActive()) && Is9mm(KFW) || IsWeaponOnPerk(KFW,, self.Class);
}

simulated function bool ShouldKnockDownOnBump()
{
    return (IsSWATEnforcerActive()) && WorldInfo.TimeDilation < 1;
}

simulated function OnBump(Actor BumpedActor, KFPawn_Human BumpInstigator, Vector BumpedVelocity, Rotator BumpedRotation)
{
    local KFPawn_Monster KFPM;
    local bool CanBump;

    if((ShouldKnockDownOnBump()) && (Normal(BumpedVelocity) Dot vector(BumpedRotation)) > 0.7)
    {
        KFPM = KFPawn_Monster(BumpedActor);
        if(KFPM != none)
        {
            if((WorldInfo.TimeSeconds - LastBumpTime) > BumpCooldown)
            {
                CurrentBumpedActors.Length = 0;
                CurrentBumpedActors.AddItem(BumpedActor;
                CanBump = true;                
            }
            else
            {
                if(CurrentBumpedActors.Find(BumpedActor == -1)
                {
                    CurrentBumpedActors.AddItem(BumpedActor;
                    CanBump = true;
                }
            }
            LastBumpTime = WorldInfo.TimeSeconds;
            if(CanBump)
            {
                if(KFPM.IsHeadless())
                {
                    KFPM.TakeDamage(KFPM.HealthMax, BumpInstigator.Controller, BumpInstigator.Location, Normal(vector(BumpedRotation)) * BumpMomentum, BumpDamageType);                    
                }
                else
                {
                    KFPM.TakeDamage(BumpDamageAmount, BumpInstigator.Controller, BumpInstigator.Location, Normal(vector(BumpedRotation)) * BumpMomentum, BumpDamageType);
                    KFPM.Knockdown(BumpedVelocity * float(3), vect(1, 1, 1), KFPM.Location, 1000, 100);
                }
            }
        }
    }
}

simulated function int GetArmorDamageAmount(int AbsorbedAmt)
{
    if(HasHeavyArmor())
    {
        return Max(Round(float(AbsorbedAmt) * HeavyArmorAbsorptionPct), 1);
    }
    return AbsorbedAmt;
}

simulated function bool IsHeavyArmorActive()
{
    return PerkSkills[0].bActive && IsPerkLevelAllowed(0);
}

simulated function bool IsTacticalMovementActive()
{
    return PerkSkills[1].bActive && IsPerkLevelAllowed(1);
}

private final simulated function bool IsBackupActive()
{
    return PerkSkills[2].bActive && IsPerkLevelAllowed(2);
}

private final simulated function bool IsTacticalReloadActive()
{
    return PerkSkills[3].bActive && IsPerkLevelAllowed(3);
}

simulated function bool GetUsingTactialReload(KFWeapon KFW)
{
    return IsTacticalReloadActive() && Is9mm(KFW) || IsWeaponOnPerk(KFW,, self.Class);
}

simulated function bool IsSpecialAmmunitionActive()
{
    return PerkSkills[4].bActive && IsPerkLevelAllowed(4);
}

private final simulated function bool IsAmmoVestActive()
{
    return PerkSkills[5].bActive && IsPerkLevelAllowed(5);
}

private final function bool IsBodyArmorActive()
{
    return PerkSkills[6].bActive && IsPerkLevelAllowed(6);
}

private final function bool IsCrippleActive()
{
    return PerkSkills[7].bActive && IsPerkLevelAllowed(7);
}

function bool IsSWATEnforcerActive()
{
    return PerkSkills[8].bActive && IsPerkLevelAllowed(8);
}

simulated function bool IsRapidAssaultActive()
{
    return (PerkSkills[9].bActive && WorldInfo.TimeDilation < 1) && IsPerkLevelAllowed(9);
}

static simulated function int GetClotKillXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round(((GetPassiveValue(default.WeaponDamage, Level)) * float(100)) - float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.BulletResistance, Level)) * float(100))) $ "%";
    PassiveValues[2] = string(Round((GetPassiveValue(default.MagSize, Level)) * float(100))) $ "%";
    PassiveValues[3] = string(Round((GetPassiveValue(default.WeaponSwitchSpeed, Level)) * float(100))) $ "%";
    PassiveValues[4] = "";
    Increments[0] = ((("[" @ Left(string(default.WeaponDamage.Increment * float(100)), InStr(string(default.WeaponDamage.Increment * float(100)), ".") + 2)) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = (((("[" @ "5% +") @ string(Round(default.BulletResistance.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[2] = ((("[" @ string(Round(default.MagSize.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[3] = ((("[" @ string(Round(default.WeaponSwitchSpeed.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[4] = "";
}

defaultproperties
{
    WeaponDamage=(Name="Weapon Damage",Increment=0.01,Rank=0,StartingValue=1,MaxValue=1.25,ModifierValue=0,IconPath="",bActive=false)
    BulletResistance=(Name="Bullet Resistance",Increment=0.01,Rank=0,StartingValue=0.05,MaxValue=0.3,ModifierValue=0,IconPath="",bActive=false)
    MagSize=(Name="Increased Mag Size",Increment=0.04,Rank=0,StartingValue=0,MaxValue=1,ModifierValue=0,IconPath="",bActive=false)
    WeaponSwitchSpeed=(Name="Weapon Switch Speed",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    RapidAssaultFiringRate=0.51
    SnarePower=15
    TacticalMovementBobDamp=1.11
    BackupSecondaryWeaponDef=Class'KFWeapDef_9mmDual'
    HeavyArmorAbsorptionPct=0.65
    BumpDamageAmount=450
    BumpDamageType=Class'KFDT_SWATBatteringRam'
    BumpMomentum=1
    SWATEnforcerZedTimeSpeedScale=1.25
    BumpCooldown=0.1
    ProgressStatID=90
    PerkBuildStatID=91
    SecondaryXPModifier[0]=2
    SecondaryXPModifier[1]=3
    SecondaryXPModifier[2]=4
    SecondaryXPModifier[3]=7
    PerkName="SWAT"
    Passives(0)=(Title="Perk Weapon Damage",Description="Increase perk weapon damage %x% per level",IconPath="")
    Passives(1)=(Title="Bullet Resistance",Description="Increase resistance to projectile damage 5%, increases %x% each level",IconPath="")
    Passives(2)=(Title="Increased Mag Size",Description="Increase magazine size %x% per level",IconPath="")
    Passives(3)=(Title="Weapon Switch Speed",Description="Increase weapon switch speed %x% per level",IconPath="")
    Passives(4)=(Title="",Description="",IconPath="")
    SkillCatagories[0]="Specialization"
    SkillCatagories[1]="Assault Techniques"
    SkillCatagories[2]="Equipment"
    SkillCatagories[3]="Defensive Techniques"
    SkillCatagories[4]="Specialist Training"
    EXPAction1="Dealing SWAT weapon damage"
    EXPAction2="Killing Clots with SWAT weapons"
    PerkIcon=Texture2D'UI_PerkIcons_TEX.UI_PerkIcon_SWAT'
    PerkSkills(0)=(Name="HeavyArmor",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_HeavyArmor",bActive=false)
    PerkSkills(1)=(Name="TacticalMovement",Increment=0,Rank=0,StartingValue=2.5,MaxValue=2.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_TacticalMovement",bActive=false)
    PerkSkills(2)=(Name="Backup",Increment=0,Rank=0,StartingValue=0.85,MaxValue=0.85,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_Backup",bActive=false)
    PerkSkills(3)=(Name="TacticalReload",Increment=0,Rank=0,StartingValue=2,MaxValue=2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_TacticalReload",bActive=false)
    PerkSkills(4)=(Name="SpecialAmmunition",Increment=0,Rank=0,StartingValue=2,MaxValue=2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_SpecialAmmunition",bActive=false)
    PerkSkills(5)=(Name="AmmoVest",Increment=0,Rank=0,StartingValue=0.3,MaxValue=0.3,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_AmmoVest",bActive=false)
    PerkSkills(6)=(Name="BodyArmor",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_BodyArmor",bActive=false)
    PerkSkills(7)=(Name="Cripple",Increment=0,Rank=0,StartingValue=0.7,MaxValue=0.7,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_Cripple",bActive=false)
    PerkSkills(8)=(Name="SWATEnforcer",Increment=0,Rank=0,StartingValue=1,MaxValue=1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_SWATEnforcer",bActive=false)
    PerkSkills(9)=(Name="RapidAssault",Increment=0,Rank=0,StartingValue=1,MaxValue=1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.SWAT.UI_Talents_SWAT_RapidAssault",bActive=false)
    ZedTimeModifyingStates(0)=WeaponFiring
    ZedTimeModifyingStates(1)=WeaponBurstFiring
    ZedTimeModifyingStates(2)=WeaponSingleFiring
    ZedTimeModifyingStates(3)=WeaponAltFiringAuto
    PrimaryWeaponDef=Class'KFWeapDef_MP7'
    KnifeWeaponDef=Class'KFWeapDef_Knife_SWAT'
    GrenadeWeaponDef=Class'KFWeapDef_Grenade_SWAT'
    AutoBuyLoadOutPath(0)=class'KFWeapDef_MP7'
    AutoBuyLoadOutPath(1)=class'KFWeapDef_MP5RAS'
    AutoBuyLoadOutPath(2)=class'KFWeapDef_P90'
    AutoBuyLoadOutPath(3)=class'KFWeapDef_Kriss'
    HeadshotAccuracyHandicap=-3
    PrestigeRewardItemIconPaths(0)="WEP_SkinSet_Prestige01_Item_TEX.knives.SWATKnife_PrestigePrecious_Mint_large"
    PrestigeRewardItemIconPaths(1)="WEP_SkinSet_Prestige02_Item_TEX.tier01.MP7_PrestigePrecious_Mint_large"
    PrestigeRewardItemIconPaths(2)="WEP_skinset_prestige03_itemtex.tier02.MP5RAS_PrestigePrecious_Mint_large"
    PrestigeRewardItemIconPaths(3)="wep_skinset_prestige04_itemtex.tier03.HecklerKochUMP_PrestigePrecious_Mint_large"
    PrestigeRewardItemIconPaths(4)="WEP_SkinSet_Prestige05_Item_TEX.tier04.KrissSMG_PrestigePrecious_Mint_large"
}