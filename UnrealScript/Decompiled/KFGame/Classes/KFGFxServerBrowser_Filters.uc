/*******************************************************************************
 * KFGFxServerBrowser_Filters generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxServerBrowser_Filters extends KFGFxObject_Container within GFxMoviePlayer
    native(UI)
    config(UI);

enum EFilter_Key
{
    NO_PASSWORD,
    NO_MUTATORS,
    NOT_FULL,
    NOT_EMPTY,
    Custom,
    DEDICATED,
    IN_LOBBY,
    IN_PROGRESS,
    LIMIT_SERVER_RESULTS,
    FILTERS_MAX,
    EFilter_Key_MAX
};

var KFGFxMenu_ServerBrowser ServerMenu;
var const localized string NoPasswordString;
var const localized string NoMutatorsString;
var const localized string NotFullString;
var const localized string NotEmptyString;
var const localized string NoRankedStandardString;
var const localized string NoRankedCustomString;
var const localized string NoUnrankedString;
var const localized string DedicatedString;
var const localized string VACSecureString;
var const localized string InLobbyString;
var const localized string InProgressString;
var const localized string OnlyStockMapsString;
var const localized string OnlyCustomMapsString;
var const localized string LimitServerResultsString;
var array<string> FilterStrings;
var config bool bNoPassword;
var config bool bNoMutators;
var config bool bNotFull;
var config bool bNotEmpty;
var config bool bUsesStats;
var config bool bCustom;
var config bool bDedicated;
var config bool bVAC_Secure;
var config bool bInLobby;
var config bool bInProgress;
var config bool bOnlyStockMaps;
var config bool bOnlyCustomMaps;
var config bool bLimitServerResults;
var bool bNoPasswordPending;
var bool bNoMutatorsPending;
var bool bNotFullPending;
var bool bNotEmptyPending;
var bool bUsesStatsPending;
var bool bCustomPending;
var bool bDedicatedPending;
var bool bVAC_SecurePending;
var bool bInLobbyPending;
var bool bInProgressPending;
var bool bOnlyStockMapsPending;
var bool bOnlyCustomMapsPending;
var bool bLimitServerResultsPending;
var config byte SavedGameModeIndex;
var config byte SavedMapIndex;
var config byte SavedDifficultyIndex;
var config byte SavedLengthIndex;
var config byte SavedPingIndex;
var byte SavedGameModeIndexPending;
var byte SavedMapIndexPending;
var byte SavedDifficultyIndexPending;
var byte SavedLengthIndexPending;
var byte SavedPingIndexPending;
var transient string CachedMapName;
var transient string CachedModeName;
var transient int CachedDifficulty;
var transient int CachedLength;
var transient array<string> MapList;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    ServerMenu = KFGFxMenu_ServerBrowser(NewParentMenu);
    ServerMenu.Manager.StartMenu.GetMapList(MapList);
    InitFiltersArray();
    LocalizeText();
    ClearPendingValues();
}

exec function string GetSelectedMap()
{
    if((SavedMapIndex < 0) || SavedMapIndex >= MapList.Length)
    {
        return "";
    }
    return MapList[SavedMapIndex];
}

exec function int GetSelectedDifficulty()
{
    if((SavedDifficultyIndex < 0) || SavedDifficultyIndex >= Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray().Length)
    {
        return -1;
    }
    return SavedDifficultyIndex;
}

exec function int GetSelectedGameLength()
{
    switch(SavedLengthIndex)
    {
        case 0:
            return 4;
        case 1:
            return 7;
        case 2:
            return 10;
        default:
            return -1;
            break;
    }
}

function InitFiltersArray()
{
    FilterStrings[0] = NoPasswordString;
    FilterStrings[1] = NoMutatorsString;
    FilterStrings[2] = NotFullString;
    FilterStrings[3] = NotEmptyString;
    FilterStrings[4] = NoRankedCustomString;
    FilterStrings[5] = DedicatedString;
    FilterStrings[6] = InLobbyString;
    FilterStrings[7] = InProgressString;
    FilterStrings[8] = LimitServerResultsString @ string(Class'KFGFxServerBrowser_ServerList'.default.MaxSearchResults);
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("back", ServerMenu.BackString);
    LocalizedObject.SetString("reset", ServerMenu.ResetString);
    LocalizedObject.SetString("apply", ServerMenu.ApplyString);
    LocalizedObject.SetString("filters", ServerMenu.FiltersString);
    LocalizedObject.SetString("gameMode", ServerMenu.GameModeString);
    LocalizedObject.SetString("map", ServerMenu.MapString);
    LocalizedObject.SetString("difficulty", ServerMenu.DifficultyString);
    LocalizedObject.SetString("length", ServerMenu.LengthString);
    LocalizedObject.SetString("ping", ServerMenu.PingString);
    SetObject("localizedText", LocalizedObject);
    CreateList("gameModeScrollingList", Class'KFCommon_LocalizedStrings'.static.GetGameModeStringsArray(), SavedGameModeIndex);
    CreateList("mapScrollingList", MapList, SavedMapIndex);
    CreateList("difficultyScrollingList", Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray(), SavedDifficultyIndex);
    CreateList("lengthScrollingList", Class'KFCommon_LocalizedStrings'.static.GetLengthStringsArray(), SavedLengthIndex);
    CreateList("pingScrollingList", ServerMenu.PingOptionStrings, SavedPingIndex);
    LocalizeCheckBoxes();
}

function LocalizeCheckBoxes()
{
    local byte I;
    local GFxObject FiltersArray, TempObject;

    FiltersArray = Outer.CreateArray();
    I = 0;
    J0x35:

    if(I < 9)
    {
        TempObject = Outer.CreateObject("Object");
        TempObject.SetString("label", FilterStrings[I]);
        TempObject.SetInt("key", I);
        TempObject.SetBool("selected", GetBoolByEFilter_Key(I));
        FiltersArray.SetElementObject(I, TempObject);
        ++ I;
        goto J0x35;
    }
    SetObject("filterLabels", FiltersArray);
}

function CreateList(string ListString, array<string> TextArray, int SelectedIndex)
{
    local byte I;
    local GFxObject OptionList, DataProvider, ItemSlot;
    local string TempString, ButtonLabel;

    OptionList = GetObject(ListString);
    DataProvider = OptionList.GetObject("dataProvider");
    I = 0;
    J0x62:

    if(I < TextArray.Length)
    {
        ItemSlot = Outer.CreateObject("Object");
        TempString = TextArray[I];
        ItemSlot.SetString("label", TempString);
        DataProvider.SetElementObject(I, ItemSlot);
        ++ I;
        goto J0x62;
    }
    ItemSlot = Outer.CreateObject("Object");
    ItemSlot.SetString("label", Class'KFCommon_LocalizedStrings'.default.NoPreferenceString);
    DataProvider.SetElementObject(I, ItemSlot);
    if(SelectedIndex != 255)
    {
        OptionList.SetInt("selectedIndex", SelectedIndex);
    }
    OptionList.SetObject("dataProvider", DataProvider);
    if(SelectedIndex < TextArray.Length)
    {
        ButtonLabel = TextArray[SelectedIndex];        
    }
    else
    {
        ButtonLabel = "-";
    }
    OptionList.GetObject("associatedButton").SetString("label", ButtonLabel);
    OptionList.ActionScriptVoid("invalidateData");
}

function ModeChanged(int Index)
{
    SavedGameModeIndexPending = byte(Index);
}

function MapChanged(int Index)
{
    SavedMapIndexPending = byte(Index);
}

function DifficultyChanged(int Index)
{
    SavedDifficultyIndexPending = byte(Index);
}

function LengthChanged(int Index)
{
    SavedLengthIndexPending = byte(Index);
}

function PingChanged(int Index)
{
    SavedPingIndexPending = byte(Index);
}

function ApplyFilters()
{
    bNoPassword = bNoPasswordPending;
    bNoMutators = bNoMutatorsPending;
    bNotFull = bNotFullPending;
    bNotEmpty = bNotEmptyPending;
    bCustom = bCustomPending;
    bDedicated = bDedicatedPending;
    bVAC_Secure = bVAC_SecurePending;
    bInLobby = bInLobbyPending;
    bInProgress = bInProgressPending;
    bOnlyStockMaps = bOnlyStockMapsPending;
    bOnlyCustomMaps = bOnlyCustomMapsPending;
    bLimitServerResults = bLimitServerResultsPending;
    SavedGameModeIndex = SavedGameModeIndexPending;
    SavedMapIndex = SavedMapIndexPending;
    SavedDifficultyIndex = SavedDifficultyIndexPending;
    SavedLengthIndex = SavedLengthIndexPending;
    SavedPingIndex = SavedPingIndexPending;
    SaveConfig();
}

function ClearPendingValues()
{
    bNoPasswordPending = bNoPassword;
    bNoMutatorsPending = bNoMutators;
    bNotFullPending = bNotFull;
    bNotEmptyPending = bNotEmpty;
    bUsesStatsPending = bUsesStats;
    bCustomPending = bCustom;
    bDedicatedPending = bDedicated;
    bVAC_SecurePending = bVAC_Secure;
    bInLobbyPending = bInLobby;
    bInProgressPending = bInProgress;
    bOnlyStockMapsPending = bOnlyStockMaps;
    bOnlyCustomMapsPending = bOnlyCustomMaps;
    bLimitServerResultsPending = bLimitServerResults;
    SavedGameModeIndexPending = SavedGameModeIndex;
    SavedMapIndexPending = SavedMapIndex;
    SavedDifficultyIndexPending = SavedDifficultyIndex;
    SavedLengthIndexPending = SavedLengthIndex;
    SavedPingIndexPending = SavedPingIndex;
}

function ResetFilters()
{
    bNoPassword = false;
    bNoMutators = false;
    bNotFull = false;
    bNotEmpty = false;
    bUsesStats = true;
    bCustom = false;
    bDedicated = false;
    bVAC_Secure = false;
    bInLobby = false;
    bInProgress = false;
    bOnlyStockMaps = false;
    bOnlyCustomMaps = false;
    bLimitServerResults = true;
    SavedGameModeIndex = 255;
    SavedMapIndex = 255;
    SavedDifficultyIndex = 255;
    SavedLengthIndex = 255;
    SavedPingIndex = 255;
    ClearPendingValues();
    SaveConfig();
    LocalizeCheckBoxes();
    LocalizeText();
}

function SetBoolByEFilter_Key(KFGFxServerBrowser_Filters.EFilter_Key Filter, bool FilterValue)
{
    switch(Filter)
    {
        case 0:
            bNoPasswordPending = FilterValue;
            break;
        case 1:
            bNoMutatorsPending = FilterValue;
            break;
        case 2:
            bNotFullPending = FilterValue;
            break;
        case 3:
            bNotEmptyPending = FilterValue;
            break;
        case 4:
            bCustom = !FilterValue;
            break;
        case 5:
            bDedicatedPending = FilterValue;
            break;
        case 6:
            bInLobbyPending = FilterValue;
            break;
        case 7:
            bInProgressPending = FilterValue;
            break;
        case 8:
            bLimitServerResultsPending = FilterValue;
            break;
        default:
            break;
    }
}

function bool GetBoolByEFilter_Key(KFGFxServerBrowser_Filters.EFilter_Key Filter)
{
    switch(Filter)
    {
        case 0:
            return bNoPassword;
        case 1:
            return bNoMutators;
        case 2:
            return bNotFull;
        case 3:
            return bNotEmpty;
        case 4:
            return bCustom;
        case 5:
            return bDedicated;
        case 6:
            return bInLobby;
        case 7:
            return bInProgress;
        case 8:
            return bLimitServerResults;
        default:
            break;
    }
}

defaultproperties
{
    NoPasswordString="NO PASSWORD"
    NoMutatorsString="NO MUTATORS"
    NotFullString="NOT FULL"
    NotEmptyString="NOT EMPTY"
    NoRankedCustomString="NO CUSTOM SERVERS"
    NoUnrankedString="NO UNRANKED SERVERS"
    DedicatedString="DEDICATED SERVER"
    VACSecureString="VAC SECURE"
    InLobbyString="IN LOBBY"
    InProgressString="IN PROGRESS"
    OnlyStockMapsString="ONLY STOCK MAPS"
    OnlyCustomMapsString="ONLY CUSTOM MAPS"
    LimitServerResultsString="LIMIT RESULTS:"
    bUsesStats=true
    bLimitServerResults=true
    SavedGameModeIndex=255
    SavedMapIndex=255
    SavedDifficultyIndex=255
    SavedLengthIndex=255
    SavedPingIndex=255
}