/*******************************************************************************
 * KFPawn_MonsterBoss generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_MonsterBoss extends KFPawn_Monster
    abstract
    native(Pawn)
    config(Game)
    hidecategories(Navigation);

var const localized string BossName;
var const localized array<localized string> BossCaptionStrings;

function PossessedBy(Controller C, bool bVehicleTransition)
{
    super.PossessedBy(C, bVehicleTransition);
    PlayBossMusic();
}

function NotifyTakeHit(Controller InstigatedBy, Vector HitLocation, int Damage, class<DamageType> DamageType, Vector Momentum, Actor DamageCauser)
{
    super.NotifyTakeHit(InstigatedBy, HitLocation, Damage, DamageType, Momentum, DamageCauser);
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayBossTakeDamageDialog(self);
    }
}

function bool CanAITargetThisPawn(Controller TargetingController)
{
    if(TargetingController.Pawn.IsSameTeam(self))
    {
        return false;
    }
    return super(KFPawn).CanAITargetThisPawn(TargetingController);
}

simulated function PlayDying(class<DamageType> DamageType, Vector HitLoc)
{
    local KFGameReplicationInfo KFGRI;
    local KFPlayerController KFPC;

    super(KFPawn).PlayDying(DamageType, HitLoc);
    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((KFGRI != none) && !KFGRI.IsFinalWave())
    {
        return;
    }
    foreach LocalPlayerControllers(Class'KFPlayerController', KFPC)
    {
        KFPC.SetBossCamera(self);        
    }    
}

static function bool IsABoss()
{
    return true;
}

function bool Died(Controller Killer, class<DamageType> DamageType, Vector HitLocation)
{
    local bool Result;

    Result = super.Died(Killer, DamageType, HitLocation);
    if(Result)
    {
        KFGameInfo(WorldInfo.Game).BossDied(Killer);
    }
    return Result;
}

function PlayBossMusic();

function CauseHeadTrauma(optional float BleedOutTime)
{
    BleedOutTime = 5;
}

simulated function PlayHeadAsplode();

function PlayMonologue(byte MonologueType)
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayBossMonologue(self, MonologueType);
    }
}

function PlayGrabDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayBossGrabDialog(self);
    }
}

function PlayHealDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayBossHealDialog(self);
    }
}

function PlayLeapedDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayBossLeapedDialog(self);
    }
}

function PlayLandedDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayBossLandedDialog(self);
    }
}

defaultproperties
{
    BossName="Boss"
    BossCaptionStrings(0)="Boss caption 1"
    BossCaptionStrings(1)="Boss caption 2"
    MinSpawnSquadSizeType=ESquadType.EST_Boss
    MeleeAttackHelper=KFMeleeHelperAI'Default__KFPawn_MonsterBoss.MeleeHelper'
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_MonsterBoss.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    bWeakZedGrab=false
    AfflictionHandler=KFPawnAfflictions'Default__KFPawn_MonsterBoss.Afflictions'
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_MonsterBoss.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses(0)=none
        SpecialMoveClasses(1)=class'KFSM_MeleeAttack'
        SpecialMoveClasses(2)=class'KFSM_DoorMeleeAttack'
        SpecialMoveClasses(3)=none
        SpecialMoveClasses(4)=class'KFSM_GrappleAttack'
        SpecialMoveClasses(5)=class'KFSM_Stumble'
        SpecialMoveClasses(6)=class'KFSM_RecoverFromRagdoll'
        SpecialMoveClasses(7)=class'KFSM_RagdollKnockdown'
        SpecialMoveClasses(8)=class'KFSM_DeathAnim'
        SpecialMoveClasses(9)=class'KFSM_Stunned'
        SpecialMoveClasses(10)=none
        SpecialMoveClasses(11)=class'KFSM_Zed_Taunt'
        SpecialMoveClasses(12)=class'KFSM_Zed_WalkingTaunt'
        SpecialMoveClasses(13)=none
        SpecialMoveClasses(14)=none
        SpecialMoveClasses(15)=none
        SpecialMoveClasses(16)=none
        SpecialMoveClasses(17)=none
        SpecialMoveClasses(18)=none
        SpecialMoveClasses(19)=class'KFSM_GrappleVictim'
        SpecialMoveClasses(20)=class'KFSM_HansGrappleVictim'
        SpecialMoveClasses(21)=class'KFSM_Zed_Boss_Theatrics'
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_MonsterBoss.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_MonsterBoss.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_MonsterBoss.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_MonsterBoss.WeaponAmbientEchoHandler'
    FootstepAkComponent=AkComponent'Default__KFPawn_MonsterBoss.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_MonsterBoss.DialogAkSoundComponent'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bUpdateKinematicBonesFromAnimation=true
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_MonsterBoss.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_MonsterBoss.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_MonsterBoss.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_MonsterBoss.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_MonsterBoss.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bUpdateKinematicBonesFromAnimation=true
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_MonsterBoss.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_MonsterBoss.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_MonsterBoss.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_MonsterBoss.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_MonsterBoss.DialogAkSoundComponent'
    bAlwaysRelevant=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_MonsterBoss.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}