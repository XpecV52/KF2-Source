/*******************************************************************************
 * KFProjectileStickHelper_HRGScorcher generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProjectileStickHelper_HRGScorcher extends KFProjectileStickHelper within KFProjectile;

simulated function Stick(Actor HitActor, Vector HitLocation, Vector HitNormal, const out TraceHitInfo HitInfo)
{
    local int BoneIdx;
    local KFPawn_Monster HitMonster;
    local array<ImpactInfo> HitZoneImpactList;
    local Vector StartTrace, EndTrace, Direction, ClosestBoneLocation;
    local name BoneName;

    BoneName = HitInfo.BoneName;
    HitMonster = KFPawn_Monster(HitActor);
    if(HitMonster != none)
    {
        StartTrace = HitLocation;
        Direction = Normal(Outer.Velocity);
        EndTrace = StartTrace + (Direction * (HitMonster.CylinderComponent.CollisionRadius * 6));
        Outer.TraceProjHitZones(HitMonster, EndTrace, StartTrace, HitZoneImpactList);
        if(BoneName == 'None')
        {
            ClosestBoneLocation = HitMonster.Mesh.GetClosestCollidingBoneLocation(HitLocation, true, false);
            BoneName = HitMonster.Mesh.FindClosestBone(ClosestBoneLocation, ClosestBoneLocation);
        }
    }
    if(!IsZero(HitLocation))
    {
        Outer.SetLocation(HitLocation);
    }
    Outer.SetStickOrientation(HitNormal);
    BoneIdx = -1;
    if(BoneName != 'None')
    {
        BoneIdx = GetBoneIndexFromActor(HitActor, BoneName);
    }
    StickToActor(HitActor, HitInfo.HitComponent, BoneIdx, true);
    if(Outer.Role < ROLE_Authority)
    {
        Outer.ServerStick(HitActor, BoneIdx, Outer.StuckToLocation, Outer.StuckToRotation);
    }
    if((Outer.WorldInfo.NetMode != NM_DedicatedServer) && StickAkEvent != none)
    {
        Outer.PlaySoundBase(StickAkEvent);
    }
}

simulated function bool GetImpactResult(Actor HitActor, PrimitiveComponent HitComp)
{
    local KFPawn_Human KFP;
    local KFDestructibleActor D;
    local editinline StaticMeshComponent StaticMeshComp;

    if(HitActor == none)
    {
        return true;
    }
    if(((HitActor.RemoteRole == ROLE_None) && !HitActor.bWorldGeometry) && InterpActor(HitActor) == none)
    {
        return false;
    }
    if(((HitActor.bTearOff || HitActor.bDeleteMe) || HitActor.bPendingDelete) || HitActor == Outer.PrevStuckToActor)
    {
        return false;
    }
    StaticMeshComp = StaticMeshComponent(HitComp);
    if(StaticMeshComp != none)
    {
        return true;
    }
    KFP = KFPawn_Human(HitActor);
    if(KFP != none)
    {
        return false;
    }
    D = KFDestructibleActor(HitActor);
    if(D != none)
    {
        return D.ReplicationMode != 2;
    }
    return true;
}
