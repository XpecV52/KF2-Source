/*******************************************************************************
 * KFWeap_ThrownBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_ThrownBase extends KFWeapon
    abstract
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

const THROW_FIREMODE = 0;
const SprintInLastAnim = 'Sprint_In_Last';
const SprintLoopLastAnim = 'Sprint_Loop_Last';
const SprintOutLastAnim = 'Sprint_Out_Last';
const NadeThrowLastAnim = 'Nade_Throw_Last';

/** DEFAULT_FIREMODE */
var(Animations) const editconst array<editconst name> IdleLastAnims;
var(Animations) const editconst array<editconst name> IdleLastPickupAnims;
/** Default melee attack animation names when out of ammo */
var(Animations) const editconst array<editconst name> MeleeAttackLastAnims;
var(Animations) const editconst name EquipLastAnim;
var(Animations) const editconst name PutDownLastAnim;
var float ConsumeSpareAmmoDelay;

simulated function bool ShouldPlayLastAnims()
{
    return (GetTotalAmmoAmount(0)) <= 0;
}

simulated function name GetMeleeAnimName(KFPawn.EPawnOctant AtkDir, KFMeleeHelperWeapon.EMeleeAttackType AtkType)
{
    local int Idx;

    if(ShouldPlayLastAnims())
    {
        if(MeleeAttackLastAnims.Length > 0)
        {
            Idx = Rand(MeleeAttackLastAnims.Length);
            return MeleeAttackLastAnims[Idx];
        }        
    }
    else
    {
        if(MeleeAttackAnims.Length > 0)
        {
            Idx = Rand(MeleeAttackAnims.Length);
            return MeleeAttackAnims[Idx];
        }
    }
}

simulated function name GetWeaponPutDownAnimName()
{
    return ((ShouldPlayLastAnims()) ? PutDownLastAnim : super.GetWeaponPutDownAnimName());
}

simulated function name GetSprintStartAnimName()
{
    return ((ShouldPlayLastAnims()) ? 'Sprint_In_Last' : super.GetSprintStartAnimName());
}

simulated function name GetSprintLoopAnimName()
{
    return ((ShouldPlayLastAnims()) ? 'Sprint_Loop_Last' : super.GetSprintLoopAnimName());
}

simulated function name GetSprintEndAnimName()
{
    return ((ShouldPlayLastAnims()) ? 'Sprint_Out_Last' : super.GetSprintEndAnimName());
}

simulated function name GetEquipAnimName()
{
    return ((ShouldPlayLastAnims()) ? EquipLastAnim : super.GetEquipAnimName());
}

simulated function name GetGrenadeThrowAnim()
{
    return ((ShouldPlayLastAnims()) ? 'Nade_Throw_Last' : super.GetGrenadeThrowAnim());
}

simulated function bool ShouldPlayFireLast(byte FireModeNum)
{
    if((GetTotalAmmoAmount(0)) == 0)
    {
        return true;
    }
    return false;
}

simulated function bool ShouldAutoReload(byte FireModeNum)
{
    return false;
}

reliable client simulated function ClientNotifyAmmoAddedEmpty()
{
    local int IdleIndex;

    IdleIndex = Rand(IdleLastPickupAnims.Length);
    PlayAnimation(IdleLastPickupAnims[IdleIndex], 0, false, 0.2);
    SetTimer(ConsumeSpareAmmoDelay, false, 'PerformArtificialReload');
}

simulated function PerformArtificialReload()
{
    PerformReload();
    if(bAllowClientAmmoTracking && Role < ROLE_Authority)
    {
        InitializeReload();
        ServerSyncReload(SpareAmmoCount[0]);
    }
}

simulated function bool ShouldIncrementFlashCountOnFire()
{
    return false;
}

static simulated function float CalculateTraderWeaponStatDamage()
{
    local float BaseDamage, DoTDamage;
    local class<KFProjectile> ProjClass;
    local class<KFDamageType> DamageType;

    ProjClass = class<KFProjectile>(default.WeaponProjectiles[0]);
    if(ProjClass.default.ExplosionTemplate != none)
    {
        BaseDamage = ProjClass.default.ExplosionTemplate.Damage;
        DamageType = class<KFDamageType>(ProjClass.default.ExplosionTemplate.default.MyDamageType);        
    }
    else
    {
        BaseDamage = ProjClass.default.Damage;
        DamageType = class<KFDamageType>(ProjClass.default.MyDamageType);
    }
    if((DamageType != none) && DamageType.default.DoT_Type != 0)
    {
        DoTDamage = (DamageType.default.DoT_Duration / DamageType.default.DoT_Interval) * (BaseDamage * DamageType.default.DoT_DamageScale);
    }
    return BaseDamage + DoTDamage;
}

simulated state Active
{
    simulated function PlayIdleAnim()
    {
        local int IdleIndex;

        if(Instigator.IsFirstPerson())
        {
            if(bUsingSights && IdleSightedAnims.Length > 0)
            {
                IdleIndex = Rand(IdleSightedAnims.Length);
                PlayAnimation(IdleSightedAnims[IdleIndex], 0, true, 0.1);
                StartIdleFidgetTimer();                
            }
            else
            {
                if((ShouldPlayFireLast(0)) && IdleLastAnims.Length > 0)
                {
                    IdleIndex = Rand(IdleLastAnims.Length);
                    PlayAnimation(IdleLastAnims[IdleIndex], 0, true, 0.2);                    
                }
                else
                {
                    if(IdleAnims.Length > 0)
                    {
                        IdleIndex = Rand(IdleAnims.Length);
                        PlayAnimation(IdleAnims[IdleIndex], 0, true, 0.2);
                        StartIdleFidgetTimer();
                    }
                }
            }
            ToggleAdditiveBobAnim(!bUsingSights);
        }
    }

    function int AddAmmo(int Amount)
    {
        local int OldAmmo, AmmoAdded;

        OldAmmo = AmmoCount[0];
        AmmoAdded = global.AddAmmo(Amount);
        if((OldAmmo == 0) && AmmoAdded > 0)
        {
            ClientNotifyAmmoAddedEmpty();
        }
        return AmmoAdded;
    }
    stop;    
}

simulated state WeaponThrowing extends WeaponSingleFiring
{
    simulated event BeginState(name PreviousStateName)
    {
        local name WeaponFireAnimName;

        LogInternal(((((((((string(WorldInfo.TimeSeconds) @ "Self:") @ string(self)) @ "Instigator:") @ string(Instigator)) @ string(GetStateName())) $ "::") $ string(GetFuncName())) @ "PreviousStateName:") @ string(PreviousStateName), 'Inventory');
        ConsumeAmmo(CurrentFireMode);
        if((Instigator != none) && Instigator.IsFirstPerson())
        {
            WeaponFireAnimName = GetWeaponFireAnim(CurrentFireMode);
            if(WeaponFireAnimName != 'None')
            {
                PlayAnimation(WeaponFireAnimName, MySkelMesh.GetAnimLength(WeaponFireAnimName),, FireTweenTime);
            }
        }
        TimeWeaponFiring(CurrentFireMode);
        ClearPendingFire(CurrentFireMode);
        NotifyBeginState();
        SetTimer(ConsumeSpareAmmoDelay, false, 'PerformArtificialReload');
        IncrementFlashCount();
    }

    simulated function EndState(name NextStateName)
    {
        super(WeaponFiring).EndState(NextStateName);
        NotifyEndState();
        ProjectileFire();
        NotifyWeaponFired(CurrentFireMode);
    }
    stop;    
}

defaultproperties
{
    IdleLastAnims(0)=Idle_Last
    IdleLastPickupAnims(0)=Idle_Last_Pickup
    MeleeAttackLastAnims(0)=Bash_Last
    EquipLastAnim=Equip_Last
    PutDownLastAnim=Putaway_Last
    ConsumeSpareAmmoDelay=1
    bHasFireLastAnims=true
    QuickWeaponDownRotation=(Pitch=-8192,Yaw=0,Roll=8192)
    FireAnim=Throw
    FireLastAnim=Throw_Last
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_ThrownBase.MeleeHelper'
    FiringStatesArray=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_ThrownBase.FirstPersonMesh'
    Mesh=FirstPersonMesh
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_ThrownBase.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_ThrownBase.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}