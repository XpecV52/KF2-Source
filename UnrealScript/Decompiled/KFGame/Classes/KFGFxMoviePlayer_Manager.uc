/*******************************************************************************
 * KFGFxMoviePlayer_Manager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMoviePlayer_Manager extends GFxMoviePlayer
    config(UI);

enum EUIIndex
{
    UI_Start,
    UI_Perks,
    UI_Gear,
    UI_Inventory,
    UI_Store,
    UI_OptionsSelection,
    UI_Exit_Menu,
    UI_OptionsControls,
    UI_OptionsAudio,
    UI_OptionsGraphics,
    UI_OptionsGameSettings,
    UI_Achievements,
    UI_Extras,
    UI_PostGame,
    UI_Trader,
    UI_ServerBrowserMenu,
    UI_MAX
};

enum EStartMenuState
{
    EMatchmaking,
    EServerBrowser,
    ESoloGame,
    EOverview,
    EServerBrowserOverview,
    EStartMenuState_MAX
};

enum EPopUpType
{
    EConfirmation,
    EGamma,
    ENotification,
    EPopUpMax,
    EInputPrompt,
    EPopUpType_MAX
};

struct SPopupData
{
    var string SWFPath;
    var const localized array<localized string> TitleStrings;
    var const localized array<localized string> DescriptionStrings;
    var const localized string LeftButtonString;
    var const localized string RightButtonString;

    structdefaultproperties
    {
        SWFPath=""
        TitleStrings=none
        DescriptionStrings=none
        LeftButtonString=""
        RightButtonString=""
    }
};

var array<string> MenuSWFPaths;
var KFGFxObject_Menu CurrentMenu;
var byte CurrentMenuIndex;
var KFGFxMoviePlayer_Manager.EStartMenuState StartMenuState;
var KFGFxMoviePlayer_Manager.EPopUpType CurrentPopUpType;
var KFGFxMenu_StartGame StartMenu;
var KFGFxMenu_Perks PerksMenu;
var KFGFxMenu_Gear GearMenu;
var KFGFxMenu_Inventory InventoryMenu;
var KFGFxMenu_Store StoreMenu;
var KFGFxOptionsMenu_Controls OptionsControlsMenu;
var KFGFxOptionsMenu_Audio OptionsAudioMenu;
var KFGFxOptionsMenu_Graphics OptionsGraphicsMenu;
var KFGFxOptionsMenu_GameSettings OptionsGameSettingsMenu;
var KFGFxOptionsMenu_Selection OptionsSelectionMenu;
var KFGFxMenu_PostGameReport PostGameMenu;
var KFGFxMenu_Trader TraderMenu;
var KFGFxMenu_ServerBrowser ServerBrowserMenu;
var KFGFxMenu_Exit ExitMenu;
var bool bPostGameState;
var bool bKickVotePopupActive;
var bool bUsingGamepad;
var bool bAfterLobby;
var bool bMenusOpen;
var bool bSearchingForGame;
var bool bCanCloseMenu;
var bool bPlayerInLobby;
var globalconfig bool bSetGamma;
var class<KFGFxWidget_PartyInGame> InGamePartyWidgetClass;
var KFGFxObject_Popup CurrentPopup;
var protected array<SPopupData> PopupData;
var const localized string FailedSearchTitleString;
var const localized string FailedSearchString;
var const localized string BrowseServersString;
var const localized string HasInvitedToGameString;
var const localized string JoinGameString;
var KFGFxWidget_MenuBar MenuBarWidget;
var KFGFxWidget_BaseParty PartyWidget;
var KFGFxWidget_ButtonPrompt ButtonPromptWidget;
var array<string> WidgetPaths;
var PlayerReplicationInfo VotePRI;
var() transient KFHUDTimerHelper TimerHelper;
var TWOnlineLobby OnlineLobby;
var UniqueNetId CurrentInviteLobbyId;
var const UniqueNetId ZeroUniqueId;
var GFxObject ManagerObject;
var KFHUDBase HUD;
var TextureMovie BackgroundMovie;
var array<string> IgnoredCommands;
var name SoundThemeName;
var const int MouseInputChangedThreshold;
var delegate<PendingRightButtonDelegate> __PendingRightButtonDelegate__Delegate;
var delegate<PendingMiddleButtonDelegate> __PendingMiddleButtonDelegate__Delegate;
var delegate<PendingLeftButtonDelegate> __PendingLeftButtonDelegate__Delegate;

delegate PendingRightButtonDelegate();

delegate PendingMiddleButtonDelegate();

delegate PendingLeftButtonDelegate();

function Init(optional LocalPlayer LocPlay)
{
    local OnlineSubsystem OnlineSub;

    TimerHelper = GetPC().Spawn(Class'KFHUDTimerHelper');
    Class'KFUIDataStore_GameResource'.static.InitializeProviders();
    HUD = KFHUDBase(GetPC().myHUD);
    super.Init(LocPlay);
    if(OnlineSub != none)
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        OnlineLobby = OnlineSub.GetLobbyInterface();
    }
    TimerHelper.SetTimer(1, true, 'OneSecondLoop', self);
    SetTimingMode(1);
    UpdateDynamicIgnoreKeys();
}

function LaunchMenus(optional bool bForceSkipLobby)
{
    local GFxWidgetBinding WidgetBinding;
    local bool bSkippedLobby;

    WidgetBinding.WidgetName = 'PartyWidget';
    if(Class'WorldInfo'.static.IsMenuLevel())
    {
        WidgetBinding.WidgetClass = Class'KFGFxWidget_PartyMainMenu';
        SetExternalTexture("background", BackgroundMovie);
        BackgroundMovie.Play();        
    }
    else
    {
        bSkippedLobby = bForceSkipLobby || CheckSkipLobby();
        WidgetBinding.WidgetClass = InGamePartyWidgetClass;
        ManagerObject.SetBool("backgroundVisible", false);
        if(bSkippedLobby)
        {
            BackgroundMovie.Stop();
        }
    }
    WidgetBindings.AddItem(WidgetBinding;
    switch(Class'KFGameEngine'.static.GetPlatform())
    {
        case 1:
            WidgetBinding.WidgetName = 'OptionsGraphicsMenu';
            WidgetBinding.WidgetClass = Class'KFGFxOptionsMenu_Graphics_DX10';
            WidgetBindings.AddItem(WidgetBinding;
            break;
        default:
            WidgetBinding.WidgetName = 'OptionsGraphicsMenu';
            WidgetBinding.WidgetClass = Class'KFGFxOptionsMenu_Graphics';
            WidgetBindings.AddItem(WidgetBinding;
            break;
    }
    if(!bSkippedLobby)
    {
        LoadWidgets(WidgetPaths);
        OpenMenu(0);
        AllowCloseMenu();
    }
    if(bForceSkipLobby)
    {
        bAfterLobby = true;
        CloseMenus(true);
    }
    if(!bSetGamma && !Class'KFGameEngine'.static.CheckSkipGammaCheck())
    {
        OpenPopup(1, "", Class'KFGFxOptionsMenu_Graphics'.default.AdjustGammaDescription, Class'KFGFxOptionsMenu_Graphics'.default.ResetGammaString, Class'KFGFxOptionsMenu_Graphics'.default.SetGammaString);
    }
}

function bool CheckSkipLobby()
{
    if(!bAfterLobby && Class'KFGameEngine'.static.CheckSkipLobby() || Class'KFGameEngine'.static.IsEditor())
    {
        if(KFPlayerController(GetPC()) != none)
        {
            KFPlayerController(GetPC()).SkipLobby();
            bAfterLobby = true;
            CloseMenus(true);
            return true;
        }
    }
    return false;
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    local PlayerController PC;
    local bool bHandled;

    bHandled = true;
    LogInternal("WidgetInitialized - Menu: " @ string(WidgetName), 'DevGFxUI');
    switch(WidgetName)
    {
        case 'root1':
            if(ManagerObject == none)
            {
                ManagerObject = Widget;
                ManagerObject.SetBool("bConsoleBuild", Class'WorldInfo'.static.IsConsoleBuild(8));
            }
            break;
        case 'ExitMenu':
            if(ExitMenu == none)
            {
                ExitMenu = KFGFxMenu_Exit(Widget);
                ExitMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, ExitMenu);
            break;
        case 'StartMenu':
            if(StartMenu == none)
            {
                StartMenu = KFGFxMenu_StartGame(Widget);
                StartMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, StartMenu);
            break;
        case 'PerksMenu':
            if(PerksMenu == none)
            {
                PerksMenu = KFGFxMenu_Perks(Widget);
                PerksMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, PerksMenu);
            break;
        case 'ServerBrowserMenu':
            if(ServerBrowserMenu == none)
            {
                ServerBrowserMenu = KFGFxMenu_ServerBrowser(Widget);
                ServerBrowserMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, ServerBrowserMenu);
            break;
        case 'GearMenu':
            PC = GetPC();
            if(PC.PlayerReplicationInfo.bReadyToPlay && PC.WorldInfo.GRI.bMatchHasBegun)
            {
                goto J0xB1B;
            }
            if(GearMenu == none)
            {
                GearMenu = KFGFxMenu_Gear(Widget);
                GearMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, GearMenu);
            break;
        case 'InventoryMenu':
            PC = GetPC();
            if(InventoryMenu == none)
            {
                InventoryMenu = KFGFxMenu_Inventory(Widget);
                InventoryMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, InventoryMenu);
            break;
        case 'StoreMenu':
            PC = GetPC();
            if(StoreMenu == none)
            {
                StoreMenu = KFGFxMenu_Store(Widget);
                StoreMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, StoreMenu);
            break;
        case 'OptionsSelectionMenu':
            if(OptionsSelectionMenu == none)
            {
                OptionsSelectionMenu = KFGFxOptionsMenu_Selection(Widget);
                OptionsSelectionMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsSelectionMenu);
            break;
        case 'OptionsControlsMenu':
            if(OptionsControlsMenu == none)
            {
                OptionsControlsMenu = KFGFxOptionsMenu_Controls(Widget);
                OptionsControlsMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsControlsMenu);
            break;
        case 'OptionsAudioMenu':
            if(OptionsAudioMenu == none)
            {
                OptionsAudioMenu = KFGFxOptionsMenu_Audio(Widget);
                OptionsAudioMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsAudioMenu);
            break;
        case 'OptionsGraphicsMenu':
            if(OptionsGraphicsMenu == none)
            {
                OptionsGraphicsMenu = KFGFxOptionsMenu_Graphics(Widget);
                OptionsGraphicsMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsGraphicsMenu);
            break;
        case 'OptionsGameSettingsMenu':
            if(OptionsGameSettingsMenu == none)
            {
                OptionsGameSettingsMenu = KFGFxOptionsMenu_GameSettings(Widget);
                OptionsGameSettingsMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsGameSettingsMenu);
            break;
        case 'TraderMenu':
            if(TraderMenu == none)
            {
                TraderMenu = KFGFxMenu_Trader(Widget);
                TraderMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, TraderMenu);
            break;
        case 'PostGameMenu':
            if(PostGameMenu == none)
            {
                PostGameMenu = KFGFxMenu_PostGameReport(Widget);
                PostGameMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, PostGameMenu);
            break;
        case 'MenuBarWidget':
            if(MenuBarWidget == none)
            {
                MenuBarWidget = KFGFxWidget_MenuBar(Widget);
                MenuBarWidget.InitializeMenu(self);
                MenuBarWidget.InitializeCurrentMenu(0);
            }
            break;
        case 'ButtonPromptWidgetContainer':
            if(ButtonPromptWidget == none)
            {
                ButtonPromptWidget = KFGFxWidget_ButtonPrompt(Widget);
                ButtonPromptWidget.InitializeMenu(self);
            }
            break;
        case 'PartyWidget':
            if(PartyWidget == none)
            {
                if(Class'WorldInfo'.static.IsMenuLevel())
                {
                    PartyWidget = KFGFxWidget_PartyMainMenu(Widget);                    
                }
                else
                {
                    PartyWidget = KFGFxWidget_PartyInGame(Widget);
                    PartyWidget.StartCountdown(KFGameReplicationInfo(GetPC().WorldInfo.GRI).RemainingTime, false);
                }
                PartyWidget.Manager = self;
                PartyWidget.InitializeWidget();
            }
            break;
        case 'ChatBoxWidget':
            if(PartyWidget != none)
            {
                if(PartyWidget.PartyChatWidget == none)
                {
                    PartyWidget.PartyChatWidget = KFGFxHUD_ChatBoxWidget(Widget);
                    PartyWidget.PartyChatWidget.Init();
                }
            }
            break;
        case 'GammaPopup':
        case 'ConnectionErrorPopup':
        case 'ConfirmationPopup':
        case 'InputPromptPopup':
            InitializePopup(WidgetPath, KFGFxObject_Popup(Widget));
            break;
        default:
            bHandled = false;
            break;
    }
    J0xB1B:

    return bHandled;
}

function StatsInitialized()
{
    if(PartyWidget != none)
    {
        PartyWidget.StatsInit();
    }
}

function AllowCloseMenu()
{
    bCanCloseMenu = true;
}

function OneSecondLoop()
{
    if(bMenusOpen)
    {
        if(CurrentMenu != none)
        {
            CurrentMenu.OneSecondLoop();
        }
        if(PartyWidget != none)
        {
            PartyWidget.OneSecondLoop();
        }
        if(PostGameMenu != none)
        {
            PostGameMenu.OneSecondLoop();
        }
    }
}

function SetMenusOpen(bool bIsOpen)
{
    local KFGFxHudWrapper HudWrapper;

    TimerHelper.SetTickIsDisabled(!bIsOpen);
    SetPause(!bIsOpen);
    bMenusOpen = bIsOpen;
    HudWrapper = KFGFxHudWrapper(HUD);
    if((HudWrapper != none) && HudWrapper.HudMovie != none)
    {
        HudWrapper.HudMovie.UpdateVisibilityState();
    }
}

function OpenMenu(byte NewMenuIndex, optional bool bShowWidgets)
{
    local KFGFxMoviePlayer_Manager.EStartMenuState TempMenuState;
    local WorldInfo WI;
    local PlayerController PC;

    bShowWidgets = true;
    if(NewMenuIndex == 2)
    {
        PC = GetPC();
        if(PC.PlayerReplicationInfo.bReadyToPlay && PC.WorldInfo.GRI.bMatchHasBegun)
        {
            return;
        }
    }
    WI = Class'WorldInfo'.static.GetWorldInfo();
    if(NewMenuIndex == 13)
    {
        UnloadCurrentPopup();
    }
    if(!bMenusOpen)
    {
        SetMenusOpen(true);
    }
    if(VotePRI != none)
    {
        ShowKickVote(VotePRI);
    }
    if((bMenusOpen && NewMenuIndex != CurrentMenuIndex) && CurrentMenu != none)
    {
        CurrentMenu.OnClose();
        CurrentMenu = none;
    }
    bCanCloseMenu = false;
    TimerHelper.ClearTimer('AllowCloseMenu', self);
    TimerHelper.SetTimer(0.5, false, 'AllowCloseMenu', self);
    if(NewMenuIndex != 14)
    {
        CurrentMenuIndex = NewMenuIndex;        
    }
    else
    {
        PlaySoundFromTheme('TraderMenu_Open', SoundThemeName);
        if((PC != none) && PC.PlayerInput != none)
        {
            PC.PlayerInput.ResetInput();
        }
    }
    if(CurrentMenuIndex == 0)
    {
        if(StartMenuState == 1)
        {
            CurrentMenuIndex = 15;
            NewMenuIndex = 15;            
        }
        else
        {
            if(StartMenu != none)
            {
                TempMenuState = StartMenu.GetStartMenuState();
                if((((TempMenuState == 4) || TempMenuState == 3) && !IsInLobby()) && WI.IsMenuLevel())
                {
                    if(StartMenu != none)
                    {
                        StartMenu.SetOverview();
                    }                    
                }
                else
                {
                    SetStartMenuState(TempMenuState);
                }
            }
        }
    }
    UpdateMenuBar();
    LoadMenu(MenuSWFPaths[NewMenuIndex], bShowWidgets);
}

function LoadMenu(string Path, bool bShowWidgets)
{
    ManagerObject.ActionScriptVoid("loadCurrentMenu");
}

function LoadWidgets(array<string> Paths)
{
    ManagerObject.ActionScriptVoid("loadWidgets");
}

function OnMenuOpen(name WidgetPath, KFGFxObject_Menu Widget)
{
    CurrentMenu = Widget;
    CurrentMenu.OnOpen();
    SetWidgetPathBinding(Widget, WidgetPath);
    if(CurrentPopup == none)
    {
        SetExternalInterface(Widget);
    }
    ConditionalPauseGame(true);
    SetHUDVisiblity(false);
}

function ClosePostGameMenu()
{
    if(CurrentMenu == PostGameMenu)
    {
        CloseMenus();
    }
}

function CloseMenus(optional bool bForceClose)
{
    bForceClose = false;
    if((bMenusOpen && bCanCloseMenu) || bForceClose)
    {
        UnloadCurrentPopup();
        if((((!bAfterLobby && PartyWidget != none) || (GetPC()) == none) || GetPC().WorldInfo.GRI == none) || GetPC().WorldInfo.GRI.bMatchIsOver)
        {
            PartyWidget.SetReadyButtonVisibility(false);
            bAfterLobby = true;
        }
        if(CurrentMenu != none)
        {
            if(CurrentMenu == TraderMenu)
            {
                PlaySoundFromTheme('TraderMenu_Close', SoundThemeName);
            }
            CurrentMenu.OnClose();
            CurrentMenu = none;
        }
        ConditionalPauseGame(false);
        SetMenuVisibility(false);
        SetHUDVisiblity(true);
    }
}

event OnClose()
{
    CloseMenus();
    if(!BackgroundMovie.Stopped)
    {
        BackgroundMovie.Stop();
    }
}

event OnCleanup()
{
    super.OnCleanup();
    GetGameViewportClient().__HandleInputAxis__Delegate = None;
}

function bool ToggleMenus()
{
    if(!bMenusOpen || HUD.bShowHUD)
    {
        if(!bMenusOpen)
        {
            TimerHelper.SetTimer(0.5, false, 'AllowCloseMenu', self);
        }
        ManagerObject.SetBool("bOpenedInGame", true);
        if(CurrentMenuIndex >= MenuSWFPaths.Length)
        {
            LaunchMenus();            
        }
        else
        {
            OpenMenu(1);
            UpdateMenuBar();
        }
        bCanCloseMenu = false;
        TimerHelper.SetTimer(0.15, false, 'PlayOpeningSound', self);        
    }
    else
    {
        if(bCanCloseMenu)
        {
            if(GetPC().WorldInfo.GRI.bMatchIsOver && !bAfterLobby)
            {
                return false;
            }
            if(CurrentMenu != TraderMenu)
            {
                PlaySoundFromTheme('MainMenu_Close', SoundThemeName);
            }
            CloseMenus();            
        }
        else
        {
            if(bPostGameState)
            {
                if(CurrentMenu == PostGameMenu)
                {
                    bMenusOpen = false;
                    OpenMenu(1);
                    SetWidgetsVisible(true);                    
                }
                else
                {
                    OpenMenu(13);
                    SetWidgetsVisible(false);
                }
            }
        }
    }
    return false;
}

function PlayOpeningSound()
{
    PlaySoundFromTheme('MainMenu_Open', SoundThemeName);
}

event MenusFinishedClosing()
{
    if(bMenusOpen)
    {
        SetMenusOpen(false);
    }
}

function SetWidgetsVisible(bool bVisible)
{
    ManagerObject.ActionScriptVoid("setWidgetsVisiblity");
}

function SetMenuVisibility(bool bVisible)
{
    ManagerObject.ActionScriptVoid("setMenuVisibility");
}

function SetHUDVisiblity(bool bIsVisible)
{
    if(HUD != none)
    {
        HUD.SetVisible(bIsVisible);
    }
    bCaptureInput = !bIsVisible;
    if(((GetPC()) != none) && GetPC().PlayerInput != none)
    {
        GetPC().PlayerInput.ResetInput();
    }
}

event OnTraderTimeStart()
{
    if(CurrentMenu != none)
    {
        CurrentMenu.OnTraderTimeStart();
    }
}

function CloseTraderMenu()
{
    if(CurrentMenu == TraderMenu)
    {
        CloseMenus();
    }
}

function ShowWelcomeScreen()
{
    if((StartMenu != none) && StartMenu.OverviewContainer != none)
    {
        StartMenu.OverviewContainer.ShowWelcomeScreen();
    }
}

function NotifyUnsuccessfulSearch()
{
    if(CurrentMenu == StartMenu)
    {
        if(StartMenu.OptionsComponent != none)
        {
            StartMenu.OptionsComponent.SetSearching(false);
        }
        SetSearchingForMatch(false);
        OpenPopup(0, FailedSearchTitleString, FailedSearchString, BrowseServersString, Class'KFCommon_LocalizedStrings'.default.OKString, StartMenu.Callback_OpenServerBrowser);
    }
}

function AssignPendingLeftButtonDelegate(delegate<PendingLeftButtonDelegate> LeftDelegate)
{
    __PendingLeftButtonDelegate__Delegate = LeftDelegate;
}

function AssignPendingMiddleButtonDelegate(delegate<PendingMiddleButtonDelegate> MiddleDelegate)
{
    __PendingMiddleButtonDelegate__Delegate = MiddleDelegate;
}

function AssignPendingRightButtonDelegate(delegate<PendingRightButtonDelegate> RightDelegate)
{
    __PendingRightButtonDelegate__Delegate = RightDelegate;
}

function InitializePopup(name WidgetPath, KFGFxObject_Popup Widget)
{
    CurrentPopup = Widget;
    if(CurrentPopup != none)
    {
        SetWidgetPathBinding(Widget, WidgetPath);
        SetExternalInterface(Widget);
        CurrentPopup.InitializePopup(self);
        CurrentPopup.AssignLeftButtonDelegate(PendingLeftButtonDelegate);
        CurrentPopup.AssignMiddleButtonDelegate(PendingMiddleButtonDelegate);
        CurrentPopup.AssignRightButtonDelegate(PendingRightButtonDelegate);
        __PendingLeftButtonDelegate__Delegate = None;
        __PendingMiddleButtonDelegate__Delegate = None;
        __PendingRightButtonDelegate__Delegate = None;
    }
}

function OpenPopup(KFGFxMoviePlayer_Manager.EPopUpType PopUpType, string TitleString, string DescriptionString, string LeftButtonString, optional string RightButtonString, optional delegate<PendingLeftButtonDelegate> LeftButtonDelegate, optional delegate<PendingRightButtonDelegate> RightButtonDelegate, optional string MiddleButtonString, optional delegate<PendingMiddleButtonDelegate> MiddleButtonDelegate, optional name OverridingSoundEffect)
{
    if((CurrentPopup != none) && PopUpType == CurrentPopUpType)
    {
        CurrentPopup.UpdateDescritionText(DescriptionString);        
    }
    else
    {
        if(PopupData[PopUpType].SWFPath != "")
        {
            UnloadCurrentPopup();
            CurrentPopUpType = PopUpType;
            LoadPopup(PopupData[PopUpType].SWFPath, TitleString, DescriptionString, LeftButtonString, RightButtonString, MiddleButtonString);
            bCaptureInput = true;
            bBlurLesserMovies = true;
            AssignPendingLeftButtonDelegate(LeftButtonDelegate);
            AssignPendingMiddleButtonDelegate(MiddleButtonDelegate);
            AssignPendingRightButtonDelegate(RightButtonDelegate);
            if(OverridingSoundEffect == 'None')
            {
                PlaySoundFromTheme('Alert_Popup', SoundThemeName);                
            }
            else
            {
                PlaySoundFromTheme(OverridingSoundEffect, SoundThemeName);
            }
        }
    }
}

function LoadPopup(string Path, optional string TitleString, optional string DescriptionString, optional string LeftButtonString, optional string RightButtonString, optional string MiddleButtonString)
{
    ManagerObject.ActionScriptVoid("loadCurrentPopup");
}

function UnloadCurrentPopup()
{
    ManagerObject.ActionScriptVoid("unloadCurrentPopup");
    if(CurrentPopup != none)
    {
        CurrentPopup.OnClosed();
        CurrentPopup = none;
        CurrentPopUpType = 3;
        bBlurLesserMovies = false;
        if(CurrentMenu == none)
        {
            bCaptureInput = false;
        }
    }
}

function LoadPopups(array<string> Paths)
{
    ManagerObject.ActionScriptVoid("loadPopups");
}

function UnloadPopups()
{
    ManagerObject.ActionScriptVoid("unloadPopups");
}

function ConditionalPauseGame(bool bPause)
{
    local WorldInfo WI;

    WI = Class'WorldInfo'.static.GetWorldInfo();
    if(WI.NetMode == NM_Standalone)
    {
        if(bPause)
        {
            if((((WI.IsMenuLevel() || !bAfterLobby) || CurrentMenu == TraderMenu) || (GetPC()) == none) || GetPC().WorldInfo.GRI.bMatchIsOver)
            {
                return;
            }
            GetPC().SetPause(true);            
        }
        else
        {
            if((GetPC()) != none)
            {
                GetPC().SetPause(false);
            }
        }
    }
}

function ClientRecieveNewTeam();

function OnLobbyStatusChanged(bool bIsInLobby)
{
    bPlayerInLobby = bIsInLobby;
    if(PartyWidget != none)
    {
        PartyWidget.UpdateInLobby(bIsInLobby);
    }
    if(CurrentMenu != none)
    {
        CurrentMenu.OnLobbyStatusChanged(bIsInLobby);
    }
    UpdateMenuBar();
}

function bool IsInLobby()
{
    if(OnlineLobby != none)
    {
        return OnlineLobby.IsInLobby();
    }
    return bPlayerInLobby;
}

function bool GetMultiplayerMenuActive()
{
    if(CurrentMenuIndex == 15)
    {
        return true;
    }
    if(((StartMenu != none) && CurrentMenuIndex == 0) && StartMenu.GetStartMenuState() == 0)
    {
        return true;
    }
    return false;
}

function KFGFxMoviePlayer_Manager.EStartMenuState GetStartMenuState()
{
    if(StartMenu != none)
    {
        return StartMenu.GetStartMenuState();
    }
    return 0;
}

function SetStartMenuState(KFGFxMoviePlayer_Manager.EStartMenuState MenuState)
{
    StartMenuState = MenuState;
    UpdateMenuBar();
}

function SetSearchingForMatch(bool bSearching)
{
    bSearchingForGame = bSearching;
    if(PartyWidget != none)
    {
        PartyWidget.SendSearching();
    }
}

function UpdateMenuBar()
{
    if(MenuBarWidget != none)
    {
        MenuBarWidget.UpdateMenu(CurrentMenuIndex);
    }
}

function HandleSteamLobbyLeaderTakeOver(UniqueNetId AdminId)
{
    if(StartMenu != none)
    {
        StartMenu.HandleSteamLobbyLeaderTakeOver(AdminId);
    }
}

function ChangeOverviewState(bool bLeaderIsOnServerBrowser)
{
    if(StartMenu != none)
    {
        StartMenu.bLeaderInServerBrowser = bLeaderIsOnServerBrowser;
    }
}

event bool FilterButtonInput(int ControllerId, name ButtonName, Core.Object.EInputEvent InputEvent)
{
    if(((bAfterLobby || GetPC().WorldInfo.GRI.bMatchIsOver) && InputEvent == 0) && (ButtonName == 'Escape') || ButtonName == 'XboxTypeS_Start')
    {
        return ToggleMenus();
    }
    if(CurrentMenu != none)
    {
        CurrentMenu.FilterButtonInput(ControllerId, ButtonName, InputEvent);
        if(!Class'WorldInfo'.static.IsConsoleBuild(8))
        {
            CheckIfUsingGamepad();
        }
    }
    return false;
}

function CheckIfUsingGamepad()
{
    local bool bGamepad;

    if(CurrentMenu != none)
    {
        bGamepad = GetUsingGamepad();
        if(bUsingGamepad != bGamepad)
        {
            OnInputTypeChanged(bGamepad);
        }
    }
}

function OnInputTypeChanged(bool bGamepad)
{
    ManagerObject.SetBool("bUsingGamepad", bGamepad);
    bUsingGamepad = bGamepad;
}

function bool GetUsingGamepad()
{
    local PlayerController PC;

    PC = GetPC();
    if((PC == none) || PC.PlayerInput == none)
    {
        return false;
    }
    return PC.PlayerInput.bUsingGamepad;
}

function UpdateDynamicIgnoreKeys()
{
    local name KeyBindName;
    local int I;

    if(((GetPC()) == none) || KFPlayerInput(GetPC().PlayerInput) == none)
    {
        return;
    }
    ClearFocusIgnoreKeys();
    I = 0;
    J0x57:

    if(I < IgnoredCommands.Length)
    {
        KeyBindName = GetKeyBindName(IgnoredCommands[I]);
        AddFocusIgnoreKey(KeyBindName);
        ++ I;
        goto J0x57;
    }
}

function name GetKeyBindName(string GBA_Command)
{
    local KFPlayerInput KFInput;
    local KeyBind MyKeyBind;

    KFInput = KFPlayerInput(GetPC().PlayerInput);
    KFInput.GetKeyBindFromCommand(MyKeyBind, GBA_Command, false);
    return MyKeyBind.Name;
}

function bool IsFocusIgnoreKey(string GBA_Command)
{
    if(IgnoredCommands.Find(GBA_Command != -1)
    {
        return true;
    }
    return false;
}

function UpdateVOIP(PlayerReplicationInfo PRI, bool bIsTalking)
{
    if(PartyWidget != none)
    {
        PartyWidget.UpdateVOIP(PRI, bIsTalking);
    }
    if(PostGameMenu != none)
    {
        PostGameMenu.VOIPEventTriggered(PRI, bIsTalking);
    }
}

function RemotePlayerDisconnected(UniqueNetId UniqueId);

function ShowKickVote(PlayerReplicationInfo PRI)
{
    VotePRI = PRI;
    if(bMenusOpen)
    {
        bKickVotePopupActive = true;
        OpenPopup(0, Class'KFGFxWidget_KickVote'.default.VoteKickString, VotePRI.PlayerName, Class'KFCommon_LocalizedStrings'.default.YesString, Class'KFCommon_LocalizedStrings'.default.NoString, CastYesVote, CastNoVote);
    }
}

simulated function HideKickVote()
{
    if(bKickVotePopupActive)
    {
        bKickVotePopupActive = false;
        UnloadCurrentPopup();
    }
    VotePRI = none;
}

function CastYesVote()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.CastKickVote(KFPRI, true);
        }
    }
}

function CastNoVote()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.CastKickVote(KFPRI, false);
        }
    }
}

function currentFocus()
{
    ManagerObject.ActionScriptVoid("currentFocus");
}

defaultproperties
{
    MenuSWFPaths(0)="../UI_Menus/StartMenu_SWF.swf"
    MenuSWFPaths(1)="../UI_Menus/PerksMenu_SWF.swf"
    MenuSWFPaths(2)="../UI_Menus/GearMenu_SWF.swf"
    MenuSWFPaths(3)="../UI_Menus/InventoryMenu_SWF.swf"
    MenuSWFPaths(4)="../UI_Menus/StoreMenu_SWF.swf"
    MenuSWFPaths(5)="../UI_Menus/OptionsSelectionMenu_SWF.swf"
    MenuSWFPaths(6)="../UI_Menus/ExitMenu_SWF.swf"
    MenuSWFPaths(7)="../UI_Menus/OptionsControlsMenu_SWF.swf"
    MenuSWFPaths(8)="../UI_Menus/OptionsAudioMenu_SWF.swf"
    MenuSWFPaths(9)="../UI_Menus/OptionsGraphicsMenu_SWF.swf"
    MenuSWFPaths(10)="../UI_Menus/OptionsGameSettingsMenu_SWF.swf"
    MenuSWFPaths(11)=""
    MenuSWFPaths(12)=""
    MenuSWFPaths(13)="../UI_Menus/PostGameMenu_SWF.swf"
    MenuSWFPaths(14)="../UI_Menus/TraderMenu_SWF.swf"
    MenuSWFPaths(15)="../UI_Menus/ServerBrowserMenu_SWF.swf"
    CurrentMenuIndex=255
    InGamePartyWidgetClass=Class'KFGFxWidget_PartyInGame'
    PopupData(0)=(SWFPath="../UI_PopUps/ConfirmationPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(1)=(SWFPath="../UI_PopUps/GammaPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(2)=(SWFPath="../UI_PopUps/ConnectionErrorPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(3)=(SWFPath="",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(4)=(SWFPath="../UI_PopUps/InputPromptPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    FailedSearchTitleString="FAILED TO FIND MATCH"
    FailedSearchString="Matchmaking failed to find a match with the options provided.  Please broaden your search or consider using the server browser to find a match."
    BrowseServersString="BROWSE SERVERS"
    HasInvitedToGameString=" has invited you to a game."
    JoinGameString="Join Game?"
    WidgetPaths(0)="../UI_Widgets/MenuBarWidget_SWF.swf"
    WidgetPaths(1)="../UI_Widgets/PartyWidget_SWF.swf"
    WidgetPaths(2)="../UI_Widgets/ButtonPromptWidget_SWF.swf"
    BackgroundMovie=TextureMovie'UI_Managers.MenuBG'
    IgnoredCommands(0)="GBA_VoiceChat"
    SoundThemeName=ButtonSoundTheme
    MouseInputChangedThreshold=5
    MovieInfo=SwfMovie'UI_Managers.LoaderManager_SWF'
    bAutoPlay=true
    bCaptureInput=true
    SoundThemes=/* Array type was not detected. */
    WidgetBindings=/* Array type was not detected. */
}