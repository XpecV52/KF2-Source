/*******************************************************************************
 * KFGFxMoviePlayer_Manager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMoviePlayer_Manager extends GFxMoviePlayer
    config(UI);

const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;
const KFID_ToggleToRun = 172;
const KFID_ClassicPlayerInfo = 173;
const KFID_VOIPMicVolumeMultiplier = 174;

enum EUIIndex
{
    UI_Start,
    UI_Perks,
    UI_Gear,
    UI_Dosh_Vault,
    UI_Inventory,
    UI_Store,
    UI_OptionsSelection,
    UI_Exit_Menu,
    UI_OptionsControls,
    UI_OptionsAudio,
    UI_OptionsGraphics,
    UI_OptionsGameSettings,
    UI_Achievements,
    UI_Extras,
    UI_PostGame,
    UI_Trader,
    UI_ServerBrowserMenu,
    UI_IIS,
    UI_FiendsList,
    UI_OptionMic,
    UI_MAX
};

enum EDelayedPopupPriorityId
{
    EDPPID_Misc,
    EDPPID_SwitchTeams,
    EDPPID_RegionWait,
    EDPPID_RegionBest,
    EDPPID_Gamma,
    EDPPID_ExitToMainMenu,
    EDPPID_JoinFailure,
    EDPPID_ControllerDisconnect,
    EDPPID_MAX
};

enum EStartMenuState
{
    EStartHome,
    EMatchmaking,
    ECreateGame,
    EServerBrowser,
    ESoloGame,
    ETutorial,
    EOverview,
    EServerBrowserOverview,
    EOverview_Matchmaking,
    EOverviewCreateGame,
    EStartMenuState_MAX
};

enum EPopUpType
{
    EConfirmation,
    EGamma,
    ENotification,
    EPopUpMax,
    EInputPrompt,
    EFriendsList,
    EOptionMic,
    EConfirmInvite,
    EPopUpType_MAX
};

struct SMenuPaths
{
    var string BaseSWFPath;
    var string ConsoleSWFPath;

    structdefaultproperties
    {
        BaseSWFPath=""
        ConsoleSWFPath=""
    }
};

struct DelayedPopup
{
    var bool bShown;
    var int Priority;
    var KFGFxMoviePlayer_Manager.EPopUpType PopUpType;
    var string TitleString;
    var string DescriptionString;
    var string LeftButtonString;
    var string RightButtonString;
    var delegate<PendingLeftButtonDelegate> LeftButtonDelegate;
    var delegate<PendingRightButtonDelegate> RightButtonDelegate;
    var string MiddleButtonString;
    var delegate<PendingMiddleButtonDelegate> MiddleButtonDelegate;
    var name OverridingSoundEffect;

    structdefaultproperties
    {
        bShown=false
        Priority=0
        PopUpType=EPopUpType.EConfirmation
        TitleString=""
        DescriptionString=""
        LeftButtonString=""
        RightButtonString=""
        ftButt=None
        ghtButt=None
        MiddleButtonString=""
        ddleButt=None
        OverridingSoundEffect=None
    }
};

struct SPopupData
{
    var string SWFPath;
    var const localized array<localized string> TitleStrings;
    var const localized array<localized string> DescriptionStrings;
    var const localized string LeftButtonString;
    var const localized string RightButtonString;

    structdefaultproperties
    {
        SWFPath=""
        TitleStrings=none
        DescriptionStrings=none
        LeftButtonString=""
        RightButtonString=""
    }
};

var bool bDisplayedInitialFreePopUp;
var bool bPostGameState;
var bool bStatsInitialized;
var bool bKickVotePopupActive;
var bool bSkipTraderVotePopupActive;
var bool bUsingGamepad;
var bool bAfterLobby;
var bool bMenusOpen;
var bool bMenusActive;
var bool bSearchingForGame;
var bool bCanCloseMenu;
var bool bPlayerInLobby;
var bool bSetGamma;
var bool bCheckConnectionOnFirstLaunch;
var SDelayedPriorityMessage DelayedPriorityMessage;
var float LastForceCloseTime;
var float AllowMenusOpenAfterForceCloseTime;
var array<SMenuPaths> MenuSWFPaths;
var KFGFxObject_Menu CurrentMenu;
var byte CurrentMenuIndex;
var KFGFxMoviePlayer_Manager.EStartMenuState StartMenuState;
var KFGFxMoviePlayer_Manager.EPopUpType CurrentPopUpType;
var KFGFxMenu_StartGame StartMenu;
var KFGFxMenu_Perks PerksMenu;
var KFGFxMenu_Gear GearMenu;
var KFGFxMenu_Inventory InventoryMenu;
var KFGFxMenu_Store StoreMenu;
var KFGFxOptionsMenu_Controls OptionsControlsMenu;
var KFGFxOptionsMenu_Audio OptionsAudioMenu;
var KFGFxOptionsMenu_Graphics OptionsGraphicsMenu;
var KFGFxOptionsMenu_GameSettings OptionsGameSettingsMenu;
var KFGFxOptionsMenu_Selection OptionsSelectionMenu;
var KFGFxMenu_PostGameReport PostGameMenu;
var KFGFxMenu_Trader TraderMenu;
var KFGFxMenu_ServerBrowser ServerBrowserMenu;
var KFGFxMenu_Exit ExitMenu;
var KFGFxMenu_IIS IISMenu;
var KFGFxMenu_DoshVault DoshVaultMenu;
var KFGFxMoviePlayer_ScreenSize ScreenSizeMovie;
var KFProfileSettings CachedProfile;
var class<KFGFxWidget_PartyInGame> InGamePartyWidgetClass;
var TextureMovie CurrentBackgroundMovie;
var array<DelayedPopup> DelayedPopups;
var transient int ActivePopup;
var KFGFxObject_Popup CurrentPopup;
var protected array<SPopupData> PopupData;
var const localized string FailedSearchTitleString;
var const localized string FailedSearchString;
var const localized string BrowseServersString;
var const localized string HasInvitedToGameString;
var const localized string JoinGameString;
var KFGFxWidget_MenuBar MenuBarWidget;
var KFGFxWidget_BaseParty PartyWidget;
var KFGFxWidget_ButtonPrompt ButtonPromptWidget;
var array<string> WidgetPaths;
var PlayerReplicationInfo KickVotePRI;
var PlayerReplicationInfo SkipTraderVotePRI;
var TWOnlineLobby OnlineLobby;
var UniqueNetId CurrentInviteLobbyId;
var const UniqueNetId ZeroUniqueId;
var GFxObject ManagerObject;
var KFHUDBase HUD;
var array<TextureMovie> BackgroundMovies;
var TextureMovie IISMovie;
var array<string> IgnoredCommands;
var name SoundThemeName;
var const int MouseInputChangedThreshold;
var OnlineSubsystem OnlineSub;
var PlayfabInterface PlayfabInter;
var int SelectIDOnOpen;
var delegate<PendingRightButtonDelegate> __PendingRightButtonDelegate__Delegate;
var delegate<PendingMiddleButtonDelegate> __PendingMiddleButtonDelegate__Delegate;
var delegate<PendingLeftButtonDelegate> __PendingLeftButtonDelegate__Delegate;

delegate PendingRightButtonDelegate();

delegate PendingMiddleButtonDelegate();

delegate PendingLeftButtonDelegate();

function Init(optional LocalPlayer LocPlay)
{
    local Vector2D ViewportSize;
    local GameViewportClient GVC;
    local float ScaleStage;

    Class'KFUIDataStore_GameResource'.static.InitializeProviders();
    HUD = KFHUDBase(GetPC().myHUD);
    super.Init(LocPlay);
    bCheckConnectionOnFirstLaunch = true;
    if(OnlineSub == none)
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if(OnlineSub != none)
        {
            OnlineLobby = OnlineSub.GetLobbyInterface();
            CachedProfile = KFProfileSettings(OnlineSub.PlayerInterface.GetProfileSettings(byte(GetLP().ControllerId)));
            if(CachedProfile != none)
            {
                bSetGamma = CachedProfile.GetProfileBool(129);
            }
        }
    }
    PlayfabInter = Class'GameEngine'.static.GetPlayfabInterface();
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(1, true, 'OneSecondLoop', self);
    SetTimingMode(1);
    GVC = GetGameViewportClient();
    if((GVC != none) && Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        GVC.GetViewportSize(ViewportSize);
        ScaleStage = Class'Engine'.static.GetTitleSafeArea();
        SetViewport(int((ViewportSize.X - (ViewportSize.X * ScaleStage)) / float(2)), int((ViewportSize.Y - (ViewportSize.Y * ScaleStage)) / float(2)), int(ViewportSize.X * ScaleStage), int(ViewportSize.Y * ScaleStage));
    }
    bUsingGamepad = Class'WorldInfo'.static.IsConsoleBuild();
    UpdateDynamicIgnoreKeys();
}

function OnProfileSettingsRead()
{
    CachedProfile = KFProfileSettings(OnlineSub.PlayerInterface.GetProfileSettings(byte(GetLP().ControllerId)));
    if((CachedProfile != none) && CachedProfile.AsyncState == 3)
    {
        bSetGamma = CachedProfile.GetProfileBool(129);
        if((!bSetGamma && !Class'KFGameEngine'.static.CheckSkipGammaCheck()) && !Class'WorldInfo'.static.IsConsoleBuild(9))
        {
            LogInternal(((((((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "33") @ "bSetGamma:'") $ string(bSetGamma)) $ "'") @ "CurrentMenu:'") $ string(CurrentMenu)) $ "'");
            ManagerObject.SetBool("bStartUpGamma", true);
            DelayedOpenPopup(1, 4, "", Class'KFGFxOptionsMenu_Graphics'.default.AdjustGammaDescription, Class'KFGFxOptionsMenu_Graphics'.default.ResetGammaString, Class'KFGFxOptionsMenu_Graphics'.default.SetGammaString);
        }
    }
}

function LaunchMenus(optional bool bForceSkipLobby)
{
    local GFxWidgetBinding WidgetBinding;
    local bool bSkippedLobby, bShowIIS;
    local KFGameViewportClient GVC;
    local KFPlayerController KFPC;
    local bool bShowMenuBg;
    local TextureMovie BGTexture;
    local OnlineSubsystem MyOnlineSub;

    GVC = KFGameViewportClient(GetGameViewportClient());
    KFPC = KFPlayerController(GetPC());
    bStatsInitialized = KFPC.HasReadStats();
    WidgetBinding.WidgetName = 'PartyWidget';
    if(Class'WorldInfo'.static.IsMenuLevel())
    {
        WidgetBinding.WidgetClass = Class'KFGFxWidget_PartyMainMenu';
        bShowIIS = (GVC != none) && !GVC.bSeenIIS;
        UpdateBackgroundMovie();
        BGTexture = ((GetPC().WorldInfo.IsConsoleBuild() && bShowIIS) ? IISMovie : CurrentBackgroundMovie);
        bShowMenuBg = GVC.bSeenIIS || !GetPC().WorldInfo.IsConsoleBuild();
        ManagerObject.SetBool("backgroundVisible", bShowMenuBg);
        ManagerObject.SetBool("IISMovieVisible", !bShowMenuBg);
        BGTexture.Play();        
    }
    else
    {
        bSkippedLobby = bForceSkipLobby || CheckSkipLobby();
        WidgetBinding.WidgetClass = InGamePartyWidgetClass;
        ManagerObject.SetBool("backgroundVisible", false);
        ManagerObject.SetBool("IISMovieVisible", false);
        if(bSkippedLobby)
        {
            CurrentBackgroundMovie.Stop();
        }
    }
    WidgetBindings.AddItem(WidgetBinding;
    switch(Class'KFGameEngine'.static.GetPlatform())
    {
        case 1:
            WidgetBinding.WidgetName = 'OptionsGraphicsMenu';
            WidgetBinding.WidgetClass = Class'KFGFxOptionsMenu_Graphics_DX10';
            WidgetBindings.AddItem(WidgetBinding;
            break;
        default:
            WidgetBinding.WidgetName = 'OptionsGraphicsMenu';
            WidgetBinding.WidgetClass = Class'KFGFxOptionsMenu_Graphics';
            WidgetBindings.AddItem(WidgetBinding;
            break;
    }
    if(!bSkippedLobby)
    {
        LoadWidgets(WidgetPaths);
        LogInternal((((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "11") @ "bShowIIS:'") $ string(bShowIIS)) $ "'");
        if(Class'WorldInfo'.static.IsConsoleBuild() && bShowIIS)
        {
            OpenMenu(17, false);            
        }
        else
        {
            OpenMenu(0);
        }
        AllowCloseMenu();
        if(GVC.bNeedDisconnectMessage)
        {
            Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'DelayedShowDisconnectMessage', self);
            GVC.bNeedDisconnectMessage = false;            
        }
        else
        {
            if(Class'WorldInfo'.static.IsConsoleBuild(9) && bCheckConnectionOnFirstLaunch)
            {
                bCheckConnectionOnFirstLaunch = false;
                MyOnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
                if((MyOnlineSub != none) && MyOnlineSub.SystemInterface.GetCurrentConnectionStatus() != 1)
                {
                    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'DelayedShowStartDisconnectMessage', self);
                }
            }
        }
        if(GVC.bHandlePlayTogether)
        {
            KFPC.OnGameDestroyedForPlayTogetherComplete('Party', true);
            GVC.bHandlePlayTogether = false;
        }
    }
    if(bForceSkipLobby)
    {
        bAfterLobby = true;
        CloseMenus(true);
    }
    if((((!bSetGamma && !Class'KFGameEngine'.static.CheckSkipGammaCheck()) && CachedProfile != none) && CachedProfile.AsyncState != 1) && !Class'WorldInfo'.static.IsConsoleBuild(9))
    {
        LogInternal(((((((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "22") @ "bSetGamma:'") $ string(bSetGamma)) $ "'") @ "bShowIIS:'") $ string(bShowIIS)) $ "'");
        ManagerObject.SetBool("bStartUpGamma", true);
        DelayedOpenPopup(1, 4, "", Class'KFGFxOptionsMenu_Graphics'.default.AdjustGammaDescription, Class'KFGFxOptionsMenu_Graphics'.default.ResetGammaString, Class'KFGFxOptionsMenu_Graphics'.default.SetGammaString);
    }
}

function UpdateBackgroundMovie()
{
    local bool bWasPlaying;
    local TextureMovie NewBackgroundMovie;

    if(CurrentBackgroundMovie != none)
    {
        bWasPlaying = !CurrentBackgroundMovie.Stopped;
    }
    NewBackgroundMovie = GetBackgroundMovie();
    if(bWasPlaying)
    {
        if(CurrentBackgroundMovie != NewBackgroundMovie)
        {
            CurrentBackgroundMovie.Stop();
        }
        NewBackgroundMovie.Play();        
    }
    else
    {
        if(CurrentBackgroundMovie != none)
        {
            CurrentBackgroundMovie.Stop();
        }
        NewBackgroundMovie.Stop();
    }
    CurrentBackgroundMovie = NewBackgroundMovie;
    SetExternalTexture("background", CurrentBackgroundMovie, true);
    SetExternalTexture("IIS_BG", IISMovie, true);
}

function TextureMovie GetBackgroundMovie()
{
    local int EventIndex;

    if(Class'GameEngine'.static.WasLaunchedOnPartialInstall())
    {
        return BackgroundMovies[0];
    }
    EventIndex = Class'KFGameEngine'.static.GetSeasonalEventID();
    if((EventIndex != -1) && EventIndex < BackgroundMovies.Length)
    {
        return BackgroundMovies[EventIndex];
    }
    return BackgroundMovies[0];
}

function QueueDelayedPriorityMessage(string InPrimaryMessageString, string InSecondaryMessageString, int Lifetime, optional KFLocalMessage_Priority.EGameMessageType MessageType)
{
    DelayedPriorityMessage.InPrimaryMessageString = InPrimaryMessageString;
    DelayedPriorityMessage.InSecondaryMessageString = InSecondaryMessageString;
    DelayedPriorityMessage.Lifetime = Lifetime;
    DelayedPriorityMessage.MessageType = MessageType;
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.5, false, 'DisplayDelayedPriorityMessage', self);
}

function DisplayDelayedPriorityMessage()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if(((KFPC != none) && KFPC.myGfxHUD != none) && KFPC.MyGFxManager != none)
    {
        KFPC.myGfxHUD.DisplayPriorityMessage(DelayedPriorityMessage.InPrimaryMessageString, KFPC.MyGFxManager.DelayedPriorityMessage.InSecondaryMessageString, KFPC.MyGFxManager.DelayedPriorityMessage.Lifetime, KFPC.MyGFxManager.DelayedPriorityMessage.MessageType);
    }
}

static function HandleFreeTrialError(Engine.OnlineSubsystem.EFreeTrialNotification ErrorCode)
{
    local KFPlayerController KFPC;
    local KFGFxMoviePlayer_Manager MovieManager;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if(KFPC == none)
    {
        LogInternal("KFPC is none, cannot display pop up.");
        return;
    }
    MovieManager = KFPC.MyGFxManager;
    if(MovieManager == none)
    {
        LogInternal("Movie manager is none, cannot display pop up.");
        return;
    }
    switch(ErrorCode)
    {
        case 0:
            MovieManager.DelayedOpenPopup(2, 0, Class'KFCommon_LocalizedStrings'.default.NoticeString, Class'KFCommon_LocalizedStrings'.default.NotAvailableInFreeTrialString, Class'KFCommon_LocalizedStrings'.default.ConfirmString);
            break;
        case 1:
            MovieManager.DelayedOpenPopup(2, 0, Class'KFCommon_LocalizedStrings'.default.NoticeString, Class'KFCommon_LocalizedStrings'.default.NetworkCheckFreeTrialFailedString, Class'KFCommon_LocalizedStrings'.default.ConfirmString);
            break;
        case 2:
            MovieManager.DelayedOpenPopup(0, 0, "", Class'KFCommon_LocalizedStrings'.default.FreeConsolePlayOverString, Class'KFCommon_LocalizedStrings'.default.BuyGameString, Class'KFCommon_LocalizedStrings'.default.OKString, MovieManager.OnBuyGamePressed);
            break;
        default:
            break;
    }
}

static function DisplayFreeTrialFeatureBlockedPopUp()
{
    local KFPlayerController KFPC;
    local KFGFxMoviePlayer_Manager MovieManager;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if(KFPC == none)
    {
        LogInternal("KFPC is none, cannot display pop up.");
        return;
    }
    MovieManager = KFPC.MyGFxManager;
    if(MovieManager == none)
    {
        LogInternal("Movie manager is none, cannot display pop up.");
        return;
    }
    MovieManager.DelayedOpenPopup(2, 0, Class'KFCommon_LocalizedStrings'.default.NoticeString, Class'KFCommon_LocalizedStrings'.default.NotAvailableInFreeTrialString, Class'KFCommon_LocalizedStrings'.default.ConfirmString);
}

static function DisplayCouldNotCheckFreeTrialStatusErrorPopUp()
{
    local KFPlayerController KFPC;
    local KFGFxMoviePlayer_Manager MovieManager;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if(KFPC == none)
    {
        LogInternal("KFPC is none, cannot display pop up.");
        return;
    }
    MovieManager = KFPC.MyGFxManager;
    if(MovieManager == none)
    {
        LogInternal("Movie manager is none, cannot display pop up.");
        return;
    }
    MovieManager.DelayedOpenPopup(2, 0, Class'KFCommon_LocalizedStrings'.default.NoticeString, Class'KFCommon_LocalizedStrings'.default.NetworkCheckFreeTrialFailedString, Class'KFCommon_LocalizedStrings'.default.ConfirmString);
}

static function DisplayFreeTrialOverPopUp()
{
    local KFPlayerController KFPC;
    local KFGFxMoviePlayer_Manager MovieManager;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if(KFPC == none)
    {
        LogInternal("KFPC is none, cannot display pop up.");
        return;
    }
    MovieManager = KFPC.MyGFxManager;
    if(MovieManager == none)
    {
        LogInternal("Movie manager is none, cannot display pop up.");
        return;
    }
    MovieManager.DelayedOpenPopup(0, 0, "", Class'KFCommon_LocalizedStrings'.default.FreeConsolePlayOverString, Class'KFCommon_LocalizedStrings'.default.BuyGameString, Class'KFCommon_LocalizedStrings'.default.OKString, MovieManager.OnBuyGamePressed);
}

function OnBuyGamePressed()
{
    local OnlineSubsystem MyOnlineSub;

    LogInternal("On Buy game pressed");
    if(Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        MyOnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        MyOnlineSub.OpenGameStorePage();
    }
}

function DelayedShowDisconnectMessage()
{
    if(Class'KFGameEngine'.static.IsFullScreenMoviePlaying())
    {
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'DelayedShowDisconnectMessage', self);        
    }
    else
    {
        DelayedOpenPopup(2, 6, Localize("Notifications", "ConnectionLostTitle", "KFGameConsole"), Localize("Notifications", ((Class'WorldInfo'.static.IsConsoleBuild(9)) ? "ConnectionLostMessageLive" : "ConnectionLostMessage"), "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
    }
}

function DelayedShowStartDisconnectMessage()
{
    if(Class'KFGameEngine'.static.IsFullScreenMoviePlaying())
    {
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'DelayedShowStartDisconnectMessage', self);        
    }
    else
    {
        DelayedOpenPopup(2, 6, Localize("Notifications", "NotConnectedTitle", "KFGameConsole"), Localize("Notifications", "NotConnectedMessage", "KFGameConsole"), Class'KFCommon_LocalizedStrings'.default.OKString);
    }
}

function DelayedOpenPopup(KFGFxMoviePlayer_Manager.EPopUpType PopUpType, int PopupPriority, string TitleString, string DescriptionString, optional string LeftButtonString, optional string RightButtonString, optional delegate<PendingLeftButtonDelegate> LeftButtonDelegate, optional delegate<PendingRightButtonDelegate> RightButtonDelegate, optional string MiddleButtonString, optional delegate<PendingMiddleButtonDelegate> MiddleButtonDelegate, optional name OverridingSoundEffect)
{
    local DelayedPopup PopUp;
    local int I;

    PopUp.PopUpType = PopUpType;
    PopUp.TitleString = TitleString;
    PopUp.DescriptionString = DescriptionString;
    PopUp.LeftButtonString = LeftButtonString;
    PopUp.RightButtonString = RightButtonString;
    PopUp.LeftButtonDelegate = LeftButtonDelegate;
    PopUp.RightButtonDelegate = RightButtonDelegate;
    PopUp.MiddleButtonString = MiddleButtonString;
    PopUp.MiddleButtonDelegate = MiddleButtonDelegate;
    PopUp.OverridingSoundEffect = OverridingSoundEffect;
    PopUp.Priority = PopupPriority;
    if((PopupPriority == 3) && DelayedPopups[DelayedPopups.Length - 1].Priority == 2)
    {
        UnloadCurrentPopup();        
    }
    else
    {
        if((CurrentPopup != none) && DelayedPopups.Length > 0)
        {
            if(DelayedPopups[DelayedPopups.Length - 1].Priority < PopupPriority)
            {
                DelayedPopups[DelayedPopups.Length - 1].bShown = false;
            }
        }
    }
    I = DelayedPopups.Length;
    J0x293:

    if(I > 0)
    {
        if((PopupPriority > 0) && PopupPriority == DelayedPopups[I - 1].Priority)
        {
            return;
        }
        if(DelayedPopups[I - 1].Priority <= PopupPriority)
        {
            DelayedPopups.InsertItem(I, PopUp;
            Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'ShowDelayedPopupMessage', self);
            return;
        }
        -- I;
        goto J0x293;
    }
    DelayedPopups.InsertItem(0, PopUp;
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'ShowDelayedPopupMessage', self);
}

function ShowDelayedPopupMessage()
{
    if(Class'KFGameEngine'.static.IsFullScreenMoviePlaying() || (CurrentMenu == IISMenu) && Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'ShowDelayedPopupMessage', self);
        return;
    }
    if((DelayedPopups.Length > 0) && !DelayedPopups[DelayedPopups.Length - 1].bShown)
    {
        OpenPopup(DelayedPopups[DelayedPopups.Length - 1].PopUpType, DelayedPopups[DelayedPopups.Length - 1].TitleString, DelayedPopups[DelayedPopups.Length - 1].DescriptionString, DelayedPopups[DelayedPopups.Length - 1].LeftButtonString, DelayedPopups[DelayedPopups.Length - 1].RightButtonString, DelayedPopups[DelayedPopups.Length - 1].LeftButtonDelegate, DelayedPopups[DelayedPopups.Length - 1].RightButtonDelegate, DelayedPopups[DelayedPopups.Length - 1].MiddleButtonString, DelayedPopups[DelayedPopups.Length - 1].MiddleButtonDelegate, DelayedPopups[DelayedPopups.Length - 1].OverridingSoundEffect);
        DelayedPopups[DelayedPopups.Length - 1].bShown = true;
    }
}

function bool CheckSkipLobby()
{
    if(!bAfterLobby && Class'KFGameEngine'.static.CheckSkipLobby() || Class'KFGameEngine'.static.IsEditor())
    {
        if(KFPlayerController(GetPC()) != none)
        {
            KFPlayerController(GetPC()).SkipLobby();
            bAfterLobby = true;
            CloseMenus(true);
            return true;
        }
    }
    return false;
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    local bool bHandled;

    bHandled = true;
    LogInternal("WidgetInitialized - Menu: " @ string(WidgetName), 'DevGFxUI');
    switch(WidgetName)
    {
        case 'root1':
            if(ManagerObject == none)
            {
                ManagerObject = Widget;
                ManagerObject.SetBool("bConsoleBuild", Class'WorldInfo'.static.IsConsoleBuild());
            }
            break;
        case 'DoshVaultMenu':
            if(DoshVaultMenu == none)
            {
                DoshVaultMenu = KFGFxMenu_DoshVault(Widget);
                DoshVaultMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, DoshVaultMenu);
            break;
        case 'ExitMenu':
            if(ExitMenu == none)
            {
                ExitMenu = KFGFxMenu_Exit(Widget);
                ExitMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, ExitMenu);
            break;
        case 'StartMenu':
            if(StartMenu == none)
            {
                StartMenu = KFGFxMenu_StartGame(Widget);
                StartMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, StartMenu);
            break;
        case 'PerksMenu':
            if(PerksMenu == none)
            {
                PerksMenu = KFGFxMenu_Perks(Widget);
                PerksMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, PerksMenu);
            break;
        case 'ServerBrowserMenu':
            if(ServerBrowserMenu == none)
            {
                ServerBrowserMenu = KFGFxMenu_ServerBrowser(Widget);
                ServerBrowserMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, ServerBrowserMenu);
            break;
        case 'GearMenu':
            if((MenuBarWidget != none) && !MenuBarWidget.CanUseGearButton(GetPC(), self))
            {
                goto J0xBA9;
            }
            if(GearMenu == none)
            {
                GearMenu = KFGFxMenu_Gear(Widget);
                GearMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, GearMenu);
            break;
        case 'InventoryMenu':
            if(InventoryMenu == none)
            {
                InventoryMenu = KFGFxMenu_Inventory(Widget);
                InventoryMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, InventoryMenu);
            break;
        case 'StoreMenu':
            if(StoreMenu == none)
            {
                StoreMenu = KFGFxMenu_Store(Widget);
                StoreMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, StoreMenu);
            break;
        case 'OptionsSelectionMenu':
            if(OptionsSelectionMenu == none)
            {
                OptionsSelectionMenu = KFGFxOptionsMenu_Selection(Widget);
                OptionsSelectionMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsSelectionMenu);
            break;
        case 'OptionsControlsMenu':
            if(OptionsControlsMenu == none)
            {
                OptionsControlsMenu = KFGFxOptionsMenu_Controls(Widget);
                OptionsControlsMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsControlsMenu);
            break;
        case 'OptionsAudioMenu':
            if(OptionsAudioMenu == none)
            {
                OptionsAudioMenu = KFGFxOptionsMenu_Audio(Widget);
                OptionsAudioMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsAudioMenu);
            break;
        case 'OptionsGraphicsMenu':
            if(OptionsGraphicsMenu == none)
            {
                OptionsGraphicsMenu = KFGFxOptionsMenu_Graphics(Widget);
                OptionsGraphicsMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsGraphicsMenu);
            break;
        case 'OptionsGameSettingsMenu':
            if(OptionsGameSettingsMenu == none)
            {
                OptionsGameSettingsMenu = KFGFxOptionsMenu_GameSettings(Widget);
                OptionsGameSettingsMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, OptionsGameSettingsMenu);
            break;
        case 'TraderMenu':
            if(TraderMenu == none)
            {
                TraderMenu = KFGFxMenu_Trader(Widget);
                TraderMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, TraderMenu);
            break;
        case 'PostGameMenu':
            if(PostGameMenu == none)
            {
                PostGameMenu = KFGFxMenu_PostGameReport(Widget);
                PostGameMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, PostGameMenu);
            break;
        case 'IISMenu':
            if(IISMenu == none)
            {
                IISMenu = KFGFxMenu_IIS(Widget);
                IISMenu.InitializeMenu(self);
            }
            OnMenuOpen(WidgetPath, IISMenu);
            break;
        case 'MenuBarWidget':
            if(MenuBarWidget == none)
            {
                MenuBarWidget = KFGFxWidget_MenuBar(Widget);
                MenuBarWidget.InitializeMenu(self);
                MenuBarWidget.InitializeCurrentMenu(0);
            }
            break;
        case 'ButtonPromptWidgetContainer':
            if(ButtonPromptWidget == none)
            {
                ButtonPromptWidget = KFGFxWidget_ButtonPrompt(Widget);
                ButtonPromptWidget.InitializeMenu(self);
            }
            break;
        case 'PartyWidget':
            if(PartyWidget == none)
            {
                if(Class'WorldInfo'.static.IsMenuLevel())
                {
                    PartyWidget = KFGFxWidget_PartyMainMenu(Widget);                    
                }
                else
                {
                    PartyWidget = KFGFxWidget_PartyInGame(Widget);
                    PartyWidget.StartCountdown(KFGameReplicationInfo(GetPC().WorldInfo.GRI).RemainingTime, false);
                }
                PartyWidget.Manager = self;
                PartyWidget.InitializeWidget();
            }
            break;
        case 'ChatBoxWidget':
            if(PartyWidget != none)
            {
                if(PartyWidget.PartyChatWidget == none)
                {
                    PartyWidget.PartyChatWidget = KFGFxHUD_ChatBoxWidget(Widget);
                    PartyWidget.PartyChatWidget.Init();
                }
            }
            break;
        case 'GammaPopup':
        case 'ConnectionErrorPopup':
        case 'ConfirmationPopup':
        case 'InputPromptPopup':
        case 'FriendsListPopup':
        case 'OptionMicPopup':
        case 'FriendsConfirmInvitePopup':
            InitializePopup(WidgetPath, KFGFxObject_Popup(Widget));
            break;
        default:
            bHandled = false;
            break;
    }
    J0xBA9:

    return bHandled;
}

function StatsInitialized()
{
    if((StartMenu != none) && StartMenu.MissionObjectiveContainer != none)
    {
        StartMenu.MissionObjectiveContainer.FullRefresh();
    }
    bStatsInitialized = true;
}

function AllowCloseMenu()
{
    bCanCloseMenu = true;
}

function ForceUpdateNextFrame()
{
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.01, false, 'OnForceUpdate', self);
}

function OnForceUpdate()
{
    OneSecondLoop();
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(1, true, 'OneSecondLoop', self);
}

function OneSecondLoop()
{
    if(bMenusOpen)
    {
        if(CurrentMenu != none)
        {
            CurrentMenu.OneSecondLoop();
        }
        if(PartyWidget != none)
        {
            PartyWidget.OneSecondLoop();
        }
        if(PostGameMenu != none)
        {
            PostGameMenu.OneSecondLoop();
        }
        if(IISMenu != none)
        {
            IISMenu.OneSecondLoop();
        }
    }
}

function SetMenusOpen(bool bIsOpen)
{
    local KFGFxHudWrapper HudWrapper;

    SetPause(!bIsOpen);
    bMenusOpen = bIsOpen;
    bMenusActive = bIsOpen;
    SetMovieCanReceiveInput(bIsOpen);
    if(bUsingGamepad)
    {
        FlushPlayerInput(false);
    }
    HudWrapper = KFGFxHudWrapper(HUD);
    if((HudWrapper != none) && HudWrapper.HudMovie != none)
    {
        HudWrapper.HudMovie.UpdateVisibilityState();
    }
}

function OpenMenu(byte NewMenuIndex, optional bool bShowWidgets)
{
    local KFGFxMoviePlayer_Manager.EStartMenuState TempMenuState;
    local WorldInfo WI;
    local PlayerController PC;
    local string MenuPath;

    bShowWidgets = true;
    PC = GetPC();
    LogInternal("open menu: " @ string(NewMenuIndex));
    if(((PC.WorldInfo.TimeSeconds - LastForceCloseTime) < AllowMenusOpenAfterForceCloseTime) && LastForceCloseTime != float(0))
    {
        return;
    }
    if(NewMenuIndex == 2)
    {
        if((MenuBarWidget != none) && !MenuBarWidget.CanUseGearButton(PC, self))
        {
            return;
        }
    }
    if(CurrentMenuIndex == 3)
    {
        if((DoshVaultMenu != none) && !DoshVaultMenu.CanCloseVaultMenu())
        {
            MenuBarWidget.UpdateMenu(CurrentMenuIndex);
            return;
        }
    }
    WI = Class'WorldInfo'.static.GetWorldInfo();
    if(NewMenuIndex == 14)
    {
        UnloadCurrentPopup();
    }
    if(!bMenusOpen)
    {
        SetMenusOpen(true);
    }
    if(KickVotePRI != none)
    {
        ShowKickVote(KickVotePRI);
    }
    if((SkipTraderVotePRI != none) && NewMenuIndex != 15)
    {
        ShowSkipTraderVote(SkipTraderVotePRI);
    }
    if((bMenusOpen && NewMenuIndex != CurrentMenuIndex) && CurrentMenu != none)
    {
        CurrentMenu.OnClose();
        CurrentMenu = none;
    }
    if((CurrentMenuIndex == 17) && NewMenuIndex == 0)
    {
        IISMovie.Stop();
        ManagerObject.SetBool("IISMovieVisible", false);
        CurrentBackgroundMovie.Play();
        ManagerObject.SetBool("backgroundVisible", true);
    }
    if(NewMenuIndex == 17)
    {
        CurrentBackgroundMovie.Stop();
        ManagerObject.SetBool("backgroundVisible", false);
        IISMovie.Play();
        ManagerObject.SetBool("IISMovieVisible", true);
        Class'Engine'.static.GetEngine().GameViewport.bAllowInputFromMultipleControllers = true;
        SetWidgetsVisible(false);
    }
    if(NewMenuIndex != 15)
    {
        CurrentMenuIndex = NewMenuIndex;        
    }
    else
    {
        PlaySoundFromTheme('TRADER_OPEN_MENU', 'UI');
        if((PC != none) && PC.PlayerInput != none)
        {
            PC.PlayerInput.ResetInput();
        }
        bCanCloseMenu = false;
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.5, false, 'AllowCloseMenu', self);
    }
    if(CurrentMenuIndex == 0)
    {
        if((((Class'WorldInfo'.static.IsMenuLevel() && OnlineSub != none) && !OnlineSub.IsGameOwned()) && Class'WorldInfo'.static.IsConsoleBuild(8)) && !bDisplayedInitialFreePopUp)
        {
            if(OnlineSub.CanCheckFreeTrialState() && !OnlineSub.IsFreeTrialPeriodActive())
            {
                bDisplayedInitialFreePopUp = true;
                HandleFreeTrialError(2);
            }
            if(!OnlineSub.CanCheckFreeTrialState())
            {
                bDisplayedInitialFreePopUp = true;
                HandleFreeTrialError(1);
            }
        }
        if(StartMenu != none)
        {
            TempMenuState = StartMenu.GetStartMenuState();
            if(((TempMenuState >= 6) && !IsInLobby()) && WI.IsMenuLevel())
            {
                if(StartMenu != none)
                {
                    StartMenu.SetOverview();
                }                
            }
            else
            {
                SetStartMenuState(TempMenuState);
            }
        }
    }
    UpdateMenuBar();
    if(Class'WorldInfo'.static.IsConsoleBuild() && MenuSWFPaths[NewMenuIndex].ConsoleSWFPath != "")
    {
        MenuPath = MenuSWFPaths[NewMenuIndex].ConsoleSWFPath;        
    }
    else
    {
        MenuPath = MenuSWFPaths[NewMenuIndex].BaseSWFPath;
    }
    LoadMenu(MenuPath, bShowWidgets);
}

function LoadMenu(string Path, bool bShowWidgets)
{
    ManagerObject.ActionScriptVoid("loadCurrentMenu");
}

function LoadWidgets(array<string> Paths)
{
    ManagerObject.ActionScriptVoid("loadWidgets");
}

function OnMenuOpen(name WidgetPath, KFGFxObject_Menu Widget)
{
    CurrentMenu = Widget;
    CurrentMenu.OnOpen();
    SetWidgetPathBinding(Widget, WidgetPath);
    if(CurrentPopup == none)
    {
        SetExternalInterface(Widget);
    }
    ConditionalPauseGame(true);
    SetHUDVisiblity(false);
}

function ClosePostGameMenu()
{
    if(CurrentMenu == PostGameMenu)
    {
        CloseMenus();
    }
}

function CloseMenus(optional bool bForceClose)
{
    bForceClose = false;
    LogInternal(((((((((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "PartyWidget:'") $ string(PartyWidget)) $ "'") @ "bAfterLobby:'") $ string(bAfterLobby)) $ "'") @ "bForceClose:'") $ string(bForceClose)) $ "'");
    if((bMenusOpen && bCanCloseMenu) || bForceClose)
    {
        UnloadCurrentPopup();
        if((((!bAfterLobby && PartyWidget != none) || (GetPC()) == none) || GetPC().WorldInfo.GRI == none) || GetPC().WorldInfo.GRI.bMatchIsOver)
        {
            LogInternal("Setting PartyWidget Visibility false, bAfterLobby = true");
            PartyWidget.SetReadyButtonVisibility(false);
            bAfterLobby = true;
        }
        if(CurrentMenu != none)
        {
            if(CurrentMenu == TraderMenu)
            {
                PlaySoundFromTheme('TRADER_EXIT_BUTTON_CLICK', 'UI');
            }
            LogInternal(((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "CurrentMenu:'") $ string(CurrentMenu)) $ "'");
            CurrentMenu.OnClose();
            CurrentMenu = none;
        }
        bMenusActive = false;
        ConditionalPauseGame(false);
        SetMenuVisibility(false);
        SetHUDVisiblity(true);
    }
}

event OnClose()
{
    CloseMenus();
    if(!CurrentBackgroundMovie.Stopped)
    {
        CurrentBackgroundMovie.Stop();
    }
}

event OnCleanup()
{
    super.OnCleanup();
    if(OnlineSub != none)
    {
        OnlineSub.ClearAllInventoryReadCompleteDelegates();
    }
    if(PlayfabInter != none)
    {
        PlayfabInter.InventoryReadDelegates.Length = 0;
    }
    GetGameViewportClient().__HandleInputAxis__Delegate = None;
}

function bool ToggleMenus()
{
    LogInternal(((((((((((((((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "bMenusOpen:'") $ string(bMenusOpen)) $ "'") @ "HUD.bShowHUD:'") $ string(HUD.bShowHUD)) $ "'") @ "bCanCloseMenu:'") $ string(bCanCloseMenu)) $ "'") @ "bPostGameState:'") $ string(bPostGameState)) $ "'") @ "CurrentMenuIndex:'") $ string(CurrentMenuIndex)) $ "'");
    if(!bMenusOpen || HUD.bShowHUD)
    {
        ManagerObject.SetBool("bOpenedInGame", true);
        if(CurrentMenuIndex >= MenuSWFPaths.Length)
        {
            LaunchMenus();            
        }
        else
        {
            LogInternal((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName()));
            OpenMenu(1);
            UpdateMenuBar();
            if(PartyWidget != none)
            {
                PartyWidget.UpdateReadyButtonVisibility();
            }
        }
        bCanCloseMenu = false;
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.5, false, 'AllowCloseMenu', self);
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.15, false, 'PlayOpeningSound', self);        
    }
    else
    {
        if(bCanCloseMenu)
        {
            if(GetPC().WorldInfo.GRI.bMatchIsOver && !bAfterLobby)
            {
                return false;
            }
            if(CurrentMenu != TraderMenu)
            {
                PlaySoundFromTheme('MAINMENU_CLOSE', 'UI');
            }
            CloseMenus();            
        }
        else
        {
            if(bPostGameState)
            {
                if(CurrentMenu == PostGameMenu)
                {
                    ManagerObject.SetBool("bOpenedInGame", true);
                    bMenusOpen = false;
                    OpenMenu(1);
                    SetWidgetsVisible(true);                    
                }
                else
                {
                    ManagerObject.SetBool("bOpenedInGame", false);
                    OpenMenu(14);
                    SetWidgetsVisible(false);
                }
            }
        }
    }
    return false;
}

function PlayOpeningSound()
{
    PlaySoundFromTheme('MainMenu_Open', SoundThemeName);
}

event MenusFinishedClosing()
{
    if(bMenusOpen)
    {
        SetMenusOpen(false);
    }
}

function SetWidgetsVisible(bool bVisible)
{
    LogInternal(((((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "bVisible:'") $ string(bVisible)) $ "'");
    ManagerObject.ActionScriptVoid("setWidgetsVisiblity");
}

function SetMenuVisibility(bool bVisible)
{
    ManagerObject.ActionScriptVoid("setMenuVisibility");
}

function SetHUDVisiblity(bool bIsVisible)
{
    if(HUD != none)
    {
        HUD.SetVisible(bIsVisible);
    }
    bCaptureInput = !bIsVisible;
    if(((GetPC()) != none) && GetPC().PlayerInput != none)
    {
        GetPC().PlayerInput.ResetInput();
    }
}

function OnTraderTimeStart()
{
    if(CurrentMenu != none)
    {
        CurrentMenu.OnTraderTimeStart();
    }
}

function OnRoundOver()
{
    if(CurrentMenu != none)
    {
        CurrentMenu.OnRoundOver();
    }
}

function CloseTraderMenu()
{
    if(CurrentMenu == TraderMenu)
    {
        CloseMenus();
    }
}

function ShowWelcomeScreen()
{
    if((StartMenu != none) && StartMenu.OverviewContainer != none)
    {
        StartMenu.OverviewContainer.ShowWelcomeScreen();
    }
}

function NotifyUnsuccessfulSearch()
{
    if(CurrentMenu == StartMenu)
    {
        if(StartMenu.OptionsComponent != none)
        {
            StartMenu.OptionsComponent.SetSearching(false);
        }
        SetSearchingForMatch(false);
        DelayedOpenPopup(0, 0, FailedSearchTitleString, FailedSearchString, BrowseServersString, Class'KFCommon_LocalizedStrings'.default.OKString, StartMenu.Callback_OpenServerBrowser);
    }
}

function AssignPendingLeftButtonDelegate(delegate<PendingLeftButtonDelegate> LeftDelegate)
{
    __PendingLeftButtonDelegate__Delegate = LeftDelegate;
}

function AssignPendingMiddleButtonDelegate(delegate<PendingMiddleButtonDelegate> MiddleDelegate)
{
    __PendingMiddleButtonDelegate__Delegate = MiddleDelegate;
}

function AssignPendingRightButtonDelegate(delegate<PendingRightButtonDelegate> RightDelegate)
{
    __PendingRightButtonDelegate__Delegate = RightDelegate;
}

function InitializePopup(name WidgetPath, KFGFxObject_Popup Widget)
{
    CurrentPopup = Widget;
    if(CurrentPopup != none)
    {
        SetWidgetPathBinding(Widget, WidgetPath);
        SetExternalInterface(Widget);
        CurrentPopup.InitializePopup(self);
        CurrentPopup.AssignLeftButtonDelegate(PendingLeftButtonDelegate);
        CurrentPopup.AssignMiddleButtonDelegate(PendingMiddleButtonDelegate);
        CurrentPopup.AssignRightButtonDelegate(PendingRightButtonDelegate);
        __PendingLeftButtonDelegate__Delegate = None;
        __PendingMiddleButtonDelegate__Delegate = None;
        __PendingRightButtonDelegate__Delegate = None;
    }
}

private final function OpenPopup(KFGFxMoviePlayer_Manager.EPopUpType PopUpType, string TitleString, string DescriptionString, optional string LeftButtonString, optional string RightButtonString, optional delegate<PendingLeftButtonDelegate> LeftButtonDelegate, optional delegate<PendingRightButtonDelegate> RightButtonDelegate, optional string MiddleButtonString, optional delegate<PendingMiddleButtonDelegate> MiddleButtonDelegate, optional name OverridingSoundEffect)
{
    if(PopupData[PopUpType].SWFPath != "")
    {
        UnloadCurrentPopup();
        CurrentPopUpType = PopUpType;
        LoadPopup(PopupData[PopUpType].SWFPath, TitleString, DescriptionString, LeftButtonString, RightButtonString, MiddleButtonString);
        bCaptureInput = true;
        bBlurLesserMovies = true;
        AssignPendingLeftButtonDelegate(LeftButtonDelegate);
        AssignPendingMiddleButtonDelegate(MiddleButtonDelegate);
        AssignPendingRightButtonDelegate(RightButtonDelegate);
        if(OverridingSoundEffect == 'None')
        {
            PlaySoundFromTheme('Alert_Popup', SoundThemeName);            
        }
        else
        {
            PlaySoundFromTheme(OverridingSoundEffect, SoundThemeName);
        }
        if(!bMenusOpen)
        {
            ToggleMenus();
        }
    }
}

function LoadPopup(string Path, optional string TitleString, optional string DescriptionString, optional string LeftButtonString, optional string RightButtonString, optional string MiddleButtonString)
{
    ManagerObject.ActionScriptVoid("loadCurrentPopup");
    currentFocus();
}

function UnloadCurrentPopup()
{
    ManagerObject.ActionScriptVoid("unloadCurrentPopup");
    if(CurrentPopup != none)
    {
        CurrentPopup.OnClosed();
        CurrentPopup = none;
        CurrentPopUpType = 3;
        bBlurLesserMovies = false;
        if(CurrentMenu == none)
        {
            bCaptureInput = false;
        }
    }
    if(DelayedPopups.Length > 0)
    {
        if(DelayedPopups[DelayedPopups.Length - 1].bShown)
        {
            DelayedPopups.Remove(DelayedPopups.Length - 1, 1;
        }
    }
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'ShowDelayedPopupMessage', self);
}

function LoadPopups(array<string> Paths)
{
    ManagerObject.ActionScriptVoid("loadPopups");
}

function UnloadPopups()
{
    ManagerObject.ActionScriptVoid("unloadPopups");
}

function ConditionalPauseGame(bool bPause)
{
    local WorldInfo WI;

    WI = Class'WorldInfo'.static.GetWorldInfo();
    if(WI.NetMode == NM_Standalone)
    {
        if(bPause)
        {
            if((((WI.IsMenuLevel() || !bAfterLobby) || CurrentMenu == TraderMenu) || (GetPC()) == none) || GetPC().WorldInfo.GRI.bMatchIsOver)
            {
                return;
            }
            GetPC().SetPause(true, CanUnpauseMenuClosed);            
        }
        else
        {
            if((GetPC()) != none)
            {
                if(!bCanCloseMenu)
                {
                    LogInternal(((((("(" $ string(Name)) $ ") KFGfxMoviePlayer_Manager::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "We were going to unpause here... but maybe that's not correct");                    
                }
                else
                {
                    GetPC().SetPause(false);
                }
            }
        }
    }
}

function bool CanUnpauseMenuClosed()
{
    LogInternal("JOPILA - CanUnpauseMenuClosed" @ string(bMenusActive));
    return !bMenusActive;
}

function ClientRecieveNewTeam();

event SoloGameMenuOpened()
{
    if(PartyWidget != none)
    {
        PartyWidget.SoloGameMenuOpened();
    }
}

function OnLobbyStatusChanged(bool bIsInLobby)
{
    bPlayerInLobby = bIsInLobby;
    if(PartyWidget != none)
    {
        PartyWidget.UpdateInLobby(bIsInLobby);
    }
    if(CurrentMenu != none)
    {
        CurrentMenu.OnLobbyStatusChanged(bIsInLobby);
    }
    UpdateMenuBar();
}

function bool IsInLobby()
{
    if(OnlineLobby != none)
    {
        return OnlineLobby.IsInLobby();
    }
    return bPlayerInLobby;
}

function OnLoginFailed()
{
    if(PartyWidget != none)
    {
        PartyWidget.SetBool("bShowWaitingSpinner", false);
        PartyWidget.SetBool("bInParty", false);
    }
}

function bool GetMultiplayerMenuActive()
{
    if(CurrentMenuIndex == 16)
    {
        return true;
    }
    if(((StartMenu != none) && CurrentMenuIndex == 0) && StartMenu.GetStartMenuState() == 1)
    {
        return true;
    }
    return false;
}

function KFGFxMoviePlayer_Manager.EStartMenuState GetStartMenuState()
{
    if(StartMenu != none)
    {
        return StartMenu.GetStartMenuState();
    }
    return 1;
}

function SetStartMenuState(KFGFxMoviePlayer_Manager.EStartMenuState MenuState, optional bool bChangeMenu)
{
    bChangeMenu = false;
    StartMenuState = MenuState;
    if(bChangeMenu)
    {
        StartMenu.SetInt("externalMenuState", MenuState);
    }
    UpdateMenuBar();
}

function SetSearchingForMatch(bool bSearching)
{
    bSearchingForGame = bSearching;
    if(PartyWidget != none)
    {
        PartyWidget.SendSearching();
    }
}

function UpdateMenuBar()
{
    if(MenuBarWidget != none)
    {
        MenuBarWidget.UpdateMenu(CurrentMenuIndex);
    }
}

function HandleSteamLobbyLeaderTakeOver(UniqueNetId AdminId)
{
    if(StartMenu != none)
    {
        StartMenu.HandleSteamLobbyLeaderTakeOver(AdminId);
    }
}

function ChangeOverviewState(bool bLeaderIsOnServerBrowser)
{
    if(StartMenu != none)
    {
        StartMenu.bLeaderInServerBrowser = bLeaderIsOnServerBrowser;
    }
}

event bool FilterButtonInput(int ControllerId, name ButtonName, Core.Object.EInputEvent InputEvent)
{
    local KFPlayerReplicationInfo KFPRI;
    local KFGameReplicationInfo KFGRI;
    local bool bLoading;

    KFPRI = KFPlayerReplicationInfo(GetPC().PlayerReplicationInfo);
    KFGRI = KFGameReplicationInfo(GetPC().WorldInfo.GRI);
    if(Class'KFGameEngine'.static.IsFullScreenMoviePlaying())
    {
        return true;
    }
    if(((((bAfterLobby || GetPC().WorldInfo.GRI.bMatchIsOver) && InputEvent == 0) && (ButtonName == 'Escape') || ButtonName == 'XboxTypeS_Start') && bMenusOpen) && bCanCloseMenu || bPostGameState)
    {
        return ToggleMenus();        
    }
    else
    {
        if((InputEvent == 0) && bMenusOpen)
        {
            if(ButtonName == 'XboxTypeS_Y')
            {
                if(((!KFGRI.bMatchIsOver && !bAfterLobby) && !Class'WorldInfo'.static.IsMenuLevel()) && CurrentPopup == none)
                {
                    if(!KFPRI.bReadyToPlay)
                    {
                        PlaySoundFromTheme('PARTYWIDGET_READYUP_BUTTON_CLICK', 'UI');
                    }
                    CurrentMenu.Callback_ReadyClicked(!KFPRI.bReadyToPlay);
                    PartyWidget.SetBool("bReady", KFPRI.bReadyToPlay);
                    PartyWidget.ReadyButton.SetBool("selected", KFPRI.bReadyToPlay);                    
                }
                else
                {
                    if(((((KFPRI.bHasSpawnedIn && !KFGRI.bMatchIsOver) && KFGRI.bMatchHasBegun) && KFGRI.bTraderIsOpen) && CurrentMenu != TraderMenu) && bMenusOpen)
                    {
                        CurrentMenu.Callback_ReadyClicked(true);
                    }
                }                
            }
            else
            {
                if(ButtonName == 'XboxTypeS_RightThumbStick')
                {
                    if(CurrentMenu != none)
                    {
                        CurrentMenu.OnR3Pressed();
                    }                    
                }
                else
                {
                    bLoading = ManagerObject.GetBool("_bLoading");
                    if((MenuBarWidget != none) && !bLoading)
                    {
                        if(ButtonName == 'XboxTypeS_RightShoulder')
                        {
                            MenuBarWidget.CalloutButtonBumperPress(1);                            
                        }
                        else
                        {
                            if(ButtonName == 'XboxTypeS_LeftShoulder')
                            {
                                MenuBarWidget.CalloutButtonBumperPress(-1);
                            }
                        }
                    }
                }
            }
        }
    }
    if(CurrentMenu != none)
    {
        if(!Class'WorldInfo'.static.IsConsoleBuild())
        {
            CheckIfUsingGamepad();
        }
        return CurrentMenu.FilterButtonInput(ControllerId, ButtonName, InputEvent);
    }
    return false;
}

function CheckIfUsingGamepad()
{
    local bool bGamepad;

    if(CurrentMenu != none)
    {
        bGamepad = GetUsingGamepad();
        if(bUsingGamepad != bGamepad)
        {
            OnInputTypeChanged(bGamepad);
        }
    }
}

function OnInputTypeChanged(bool bGamepad)
{
    ManagerObject.SetBool("bUsingGamepad", bGamepad);
    bUsingGamepad = bGamepad;
}

function bool GetUsingGamepad()
{
    local PlayerController PC;

    PC = GetPC();
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        return true;
    }
    if((PC == none) || PC.PlayerInput == none)
    {
        return false;
    }
    return PC.PlayerInput.bUsingGamepad;
}

function UpdateDynamicIgnoreKeys()
{
    local name KeyBindName;
    local int I;

    if(((GetPC()) == none) || KFPlayerInput(GetPC().PlayerInput) == none)
    {
        return;
    }
    ClearFocusIgnoreKeys();
    I = 0;
    J0x57:

    if(I < IgnoredCommands.Length)
    {
        KeyBindName = GetKeyBindName(IgnoredCommands[I]);
        AddFocusIgnoreKey(KeyBindName);
        ++ I;
        goto J0x57;
    }
}

function name GetKeyBindName(string GBA_Command)
{
    local KFPlayerInput KFInput;
    local KeyBind MyKeyBind;

    KFInput = KFPlayerInput(GetPC().PlayerInput);
    KFInput.GetKeyBindFromCommand(MyKeyBind, GBA_Command, false);
    return MyKeyBind.Name;
}

function bool IsFocusIgnoreKey(string GBA_Command)
{
    if(IgnoredCommands.Find(GBA_Command != -1)
    {
        return true;
    }
    return false;
}

function UpdateVOIP(PlayerReplicationInfo PRI, bool bIsTalking)
{
    if(Class'WorldInfo'.static.IsConsoleBuild() && PartyWidget != none)
    {
        PartyWidget.UpdateVOIP(PRI, bIsTalking);
    }
    if(PostGameMenu != none)
    {
        PostGameMenu.VOIPEventTriggered(PRI, bIsTalking);
    }
}

function RemotePlayerDisconnected(UniqueNetId UniqueId);

function NotifySpectateStateChanged(bool bIsSpectating)
{
    if(MenuBarWidget != none)
    {
        MenuBarWidget.UpdateGearButtonState();
    }
    if(MenuBarWidget != none)
    {
        MenuBarWidget.UpdateInventoryButtonState();
    }
}

function UpdateSpeakingIcon(UniqueNetId PlayerID, bool isShowIcon)
{
    if(PartyWidget != none)
    {
        PartyWidget.UpdateSpeakingIcon(PlayerID, isShowIcon);
    }
}

function ShowSkipTraderVote(PlayerReplicationInfo PRI)
{
    SkipTraderVotePRI = PRI;
    if(bMenusOpen && CurrentMenu != TraderMenu)
    {
        bSkipTraderVotePopupActive = true;
        DelayedOpenPopup(0, 0, Class'KFGFxWidget_KickVote'.default.VoteSkipTraderString, SkipTraderVotePRI.PlayerName @ Class'KFGFxWidget_KickVote'.default.VoteSkipTraderDetailString, Class'KFCommon_LocalizedStrings'.default.YesString, Class'KFCommon_LocalizedStrings'.default.NoString, CastYesVoteSkipTrader, CastNoVoteSkipTrader);
    }
}

simulated function HideSkipTraderVote()
{
    if(bSkipTraderVotePopupActive)
    {
        bSkipTraderVotePopupActive = false;
        UnloadCurrentPopup();
    }
    SkipTraderVotePRI = none;
}

function CastYesVoteSkipTrader()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.CastSkipTraderVote(KFPRI, true);
        }
    }
}

function CastNoVoteSkipTrader()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.CastSkipTraderVote(KFPRI, false);
        }
    }
}

function ShowKickVote(PlayerReplicationInfo PRI)
{
    KickVotePRI = PRI;
    if(bMenusOpen)
    {
        bKickVotePopupActive = true;
        DelayedOpenPopup(0, 0, Class'KFGFxWidget_KickVote'.default.VoteKickString, KickVotePRI.PlayerName, Class'KFCommon_LocalizedStrings'.default.YesString, Class'KFCommon_LocalizedStrings'.default.NoString, CastYesVoteKick, CastNoVoteKick);
    }
}

simulated function HideKickVote()
{
    if(bKickVotePopupActive)
    {
        bKickVotePopupActive = false;
        UnloadCurrentPopup();
    }
    KickVotePRI = none;
}

function CastYesVoteKick()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.CastKickVote(KFPRI, true);
        }
    }
}

function CastNoVoteKick()
{
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetPC());
    if(KFPC != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.CastKickVote(KFPRI, false);
        }
    }
}

function OpenScreenSizeMovie()
{
    if(ScreenSizeMovie == none)
    {
        ScreenSizeMovie = new Class'KFGFxMoviePlayer_ScreenSize';
        ScreenSizeMovie.SetTimingMode(1);
        ScreenSizeMovie.Init();
        GetPC().SetUIScale(KFGameEngine(Class'Engine'.static.GetEngine()).SafeFrameScale);
    }
}

function CloseScreenSizeMovie()
{
    ScreenSizeMovie.Close();
    ScreenSizeMovie = none;
    if((Class'WorldInfo'.static.IsConsoleBuild(9) && !bSetGamma) && !Class'KFGameEngine'.static.CheckSkipGammaCheck())
    {
        ManagerObject.SetBool("bStartUpGamma", true);
        DelayedOpenPopup(1, 4, "", Class'KFGFxOptionsMenu_Graphics'.default.AdjustGammaDescription, Class'KFGFxOptionsMenu_Graphics'.default.ResetGammaString, Class'KFGFxOptionsMenu_Graphics'.default.SetGammaString);
    }
}

function UpdateViewportSize(int X, int Y, int Width, int Height)
{
    SetViewport(X, Y, Width, Height);
    if(ScreenSizeMovie != none)
    {
        ScreenSizeMovie.SetViewport(X, Y, Width, Height);
    }
}

function currentFocus()
{
    ManagerObject.ActionScriptVoid("currentFocus");
}

function int GetModeIndex(optional bool bAdjustedIndex)
{
    local int SavedModeIndex;

    bAdjustedIndex = true;
    SavedModeIndex = CachedProfile.GetProfileInt(148);
    if(!Class'GameEngine'.static.IsGameFullyInstalled() && ((SavedModeIndex == 4) || SavedModeIndex == 1) || SavedModeIndex == 3)
    {
        CachedProfile.SetProfileSettingValueInt(148, 0);
        return 0;
    }
    if(((StartMenu.OptionsComponent != none) && StartMenu.OptionsComponent.bIsSoloGame) && bAdjustedIndex)
    {
        if(SavedModeIndex >= 2)
        {
            return SavedModeIndex - 1;
        }
    }
    return SavedModeIndex;
}

function OnLoginOnOtherPlatformDoneAndFriendsReady()
{
    local KFGFxPopup_FriendsList FriendsList;

    if(CurrentPopUpType == 5)
    {
        FriendsList = KFGFxPopup_FriendsList(CurrentPopup);
        if(FriendsList != none)
        {
            FriendsList.OnLoginOnOtherPlatformDoneAndFriendsReady();
        }
    }
}

function OnFriendsChange()
{
    local KFGFxPopup_FriendsList FriendsList;

    if(CurrentPopUpType == 5)
    {
        FriendsList = KFGFxPopup_FriendsList(CurrentPopup);
        if(FriendsList != none)
        {
            FriendsList.OnFriendsChange();
        }
    }
}

function bool FriendListPopUpIsShown()
{
    return CurrentPopUpType == 5;
}

defaultproperties
{
    MenuSWFPaths(0)=(BaseSWFPath="../UI_Menus/StartMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(1)=(BaseSWFPath="../UI_Menus/PerksMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(2)=(BaseSWFPath="../UI_Menus/GearMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(3)=(BaseSWFPath="../UI_Menus/DoshVaultMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(4)=(BaseSWFPath="../UI_Menus/InventoryMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(5)=(BaseSWFPath="../UI_Menus/StoreMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(6)=(BaseSWFPath="../UI_Menus/OptionsSelectionMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(7)=(BaseSWFPath="../UI_Menus/ExitMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(8)=(BaseSWFPath="../UI_Menus/OptionsControlsMenu_SWF.swf",ConsoleSWFPath="../UI_Menus/OptionsControlsMenu_SWF_Console.swf")
    MenuSWFPaths(9)=(BaseSWFPath="../UI_Menus/OptionsAudioMenu_SWF.swf",ConsoleSWFPath="../UI_Menus/OptionsAudioMenu_SWF_Console.swf")
    MenuSWFPaths(10)=(BaseSWFPath="../UI_Menus/OptionsGraphicsMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(11)=(BaseSWFPath="../UI_Menus/OptionsGameSettingsMenu_SWF.swf",ConsoleSWFPath="../UI_Menus/OptionsGameSettingsMenu_SWF_Console.swf")
    MenuSWFPaths(12)=(BaseSWFPath="",ConsoleSWFPath="")
    MenuSWFPaths(13)=(BaseSWFPath="",ConsoleSWFPath="")
    MenuSWFPaths(14)=(BaseSWFPath="../UI_Menus/PostGameMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(15)=(BaseSWFPath="../UI_Menus/TraderMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(16)=(BaseSWFPath="../UI_Menus/ServerBrowserMenu_SWF.swf",ConsoleSWFPath="")
    MenuSWFPaths(17)=(BaseSWFPath="../UI_Menus/IISMenu_SWF.swf",ConsoleSWFPath="")
    CurrentMenuIndex=255
    InGamePartyWidgetClass=Class'KFGFxWidget_PartyInGame'
    PopupData(0)=(SWFPath="../UI_PopUps/ConfirmationPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(1)=(SWFPath="../UI_PopUps/GammaPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(2)=(SWFPath="../UI_PopUps/ConnectionErrorPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(3)=(SWFPath="",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(4)=(SWFPath="../UI_PopUps/InputPromptPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(5)=(SWFPath="../UI_PopUps/FriendsListPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(6)=(SWFPath="../UI_PopUps/OptionMicPopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    PopupData(7)=(SWFPath="../UI_PopUps/FriendsConfirmInvitePopup_SWF.swf",TitleStrings=none,DescriptionStrings=none,LeftButtonString="",RightButtonString="")
    FailedSearchTitleString="FAILED TO FIND MATCH"
    FailedSearchString="Matchmaking failed to find a match with the options provided. Please broaden your search or consider using the server browser to find a match."
    BrowseServersString="BROWSE SERVERS"
    HasInvitedToGameString=" has invited you to a game"
    JoinGameString="Join Game?"
    WidgetPaths(0)="../UI_Widgets/MenuBarWidget_SWF.swf"
    WidgetPaths(1)="../UI_Widgets/PartyWidget_SWF.swf"
    WidgetPaths(2)="../UI_Widgets/ButtonPromptWidget_SWF.swf"
    BackgroundMovies(0)=TextureMovie'UI_Managers.MenuBG'
    BackgroundMovies(1)=TextureMovie'UI_Managers.MenuBG_Cyberpunk'
    BackgroundMovies(2)=TextureMovie'UI_Managers.SummerSideShowBGMovie'
    BackgroundMovies(3)=TextureMovie'UI_Managers.MenuBG_Halloween'
    BackgroundMovies(4)=TextureMovie'UI_Managers.Menu_Winter'
    IISMovie=TextureMovie'UI_Managers.IIS'
    IgnoredCommands(0)="GBA_VoiceChat"
    SoundThemeName=ButtonSoundTheme
    MouseInputChangedThreshold=5
    SelectIDOnOpen=-1
    MovieInfo=SwfMovie'UI_Managers.LoaderManager_SWF'
    bAutoPlay=true
    bCaptureInput=true
    SoundThemes=/* Array type was not detected. */
    WidgetBindings=/* Array type was not detected. */
}