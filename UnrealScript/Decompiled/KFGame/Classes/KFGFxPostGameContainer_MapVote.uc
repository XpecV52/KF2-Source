/*******************************************************************************
 * KFGFxPostGameContainer_MapVote generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxPostGameContainer_MapVote extends KFGFxObject_Container within GFxMoviePlayer;

var const localized string YourVoteString;
var const localized string TopVotesString;
var string MapVoteString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    LocalizeText();
    SetMapOptions();
}

function LocalizeText()
{
    local GFxObject TextObject;

    TextObject = Outer.CreateObject("Object");
    TextObject.SetString("yourVote", YourVoteString);
    TextObject.SetString("mapList", MapVoteString);
    TextObject.SetString("topVotes", TopVotesString);
    SetObject("localizedText", TextObject);
}

function SetMapOptions()
{
    local GFxObject MapList, MapObject;
    local int I;
    local array<string> ServerMapList;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if((KFGRI != none) && KFGRI.VoteCollector != none)
    {
        ServerMapList = KFGRI.VoteCollector.MapList;
        MapList = Outer.CreateArray();
        I = 0;
        J0x102:

        if(I < ServerMapList.Length)
        {
            MapObject = Outer.CreateObject("Object");
            MapObject.SetString("label", ServerMapList[I]);
            MapObject.SetString("mapSource", GetMapSource(ServerMapList[I]));
            MapList.SetElementObject(I, MapObject);
            ++ I;
            goto J0x102;
        }
    }
    SetObject("mapChoices", MapList);
}

function RecieveTopMaps(const out TopVotes VoteObject)
{
    local GFxObject MapList;
    local array<string> TopMapList;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if((KFGRI != none) && KFGRI.VoteCollector != none)
    {
        TopMapList = KFGRI.VoteCollector.MapList;
        MapList = Outer.CreateArray();
        if((VoteObject.Map1Index != 255) && VoteObject.Map1Votes > 0)
        {
            MapList.SetElementObject(0, IndexToTopMapObject(TopMapList, VoteObject.Map1Index, VoteObject.Map1Votes));
        }
        if((VoteObject.Map2Index != 255) && VoteObject.Map2Votes > 0)
        {
            MapList.SetElementObject(1, IndexToTopMapObject(TopMapList, VoteObject.Map2Index, VoteObject.Map2Votes));
        }
        if((VoteObject.Map3Index != 255) && VoteObject.Map3Votes > 0)
        {
            MapList.SetElementObject(2, IndexToTopMapObject(TopMapList, VoteObject.Map3Index, VoteObject.Map3Votes));
        }
    }
    SetObject("currentVotes", MapList);
}

function GFxObject IndexToTopMapObject(const out array<string> TopMapList, int MapIndex, int VoteCount)
{
    local GFxObject MapObject;

    MapObject = Outer.CreateObject("Object");
    MapObject.SetString("label", TopMapList[MapIndex]);
    MapObject.SetString("secondaryText", string(VoteCount));
    MapObject.SetString("mapSource", GetMapSource(TopMapList[MapIndex]));
    return MapObject;
}

function string GetMapSource(string MapName)
{
    local KFMapSummary MapData;

    MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName(MapName);
    if(MapData != none)
    {
        return "img://" $ MapData.ScreenshotPathName;        
    }
    else
    {
        MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName("KF-Default");
        if(MapData != none)
        {
            return "img://" $ MapData.ScreenshotPathName;
        }
    }
}

defaultproperties
{
    YourVoteString="YOUR VOTE"
    TopVotesString="TOP VOTES"
}