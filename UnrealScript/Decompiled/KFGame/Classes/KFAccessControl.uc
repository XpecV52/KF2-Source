/*******************************************************************************
 * KFAccessControl generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAccessControl extends AccessControl
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var globalconfig bool bSilentAdminLogin;
var array<UniqueNetId> SessionBannedIDs;

function KickSessionBanPlayer(PlayerController C, UniqueNetId KickBanID, string KickReason)
{
    if(KickBanID != Class'PlayerReplicationInfo'.default.UniqueId)
    {
        if(!IsIDBanned(KickBanID) && !IsSessionBanned(KickBanID))
        {
            SessionBannedIDs.AddItem(KickBanID;
        }
        if(C != none)
        {
            KickPlayer(C, KickReason);
        }
    }
}

function bool ForceKickPlayer(PlayerController C, string KickReason)
{
    if((C != none) && NetConnection(C.Player) != none)
    {
        if(C.Pawn != none)
        {
            C.Pawn.Suicide();
        }
        C.ClientWasKicked();
        return true;
    }
    return false;
}

function AdminEntered(PlayerController P)
{
    if(P == none)
    {
        return;
    }
    if(bSilentAdminLogin)
    {
        P.ReceiveLocalizedMessage(Class'KFLocalMessage', 0, P.PlayerReplicationInfo);        
    }
    else
    {
        P.BroadcastLocalizedMessage(Class'KFLocalMessage', 0, P.PlayerReplicationInfo);
    }
}

function AdminExited(PlayerController P)
{
    if(P == none)
    {
        return;
    }
    if(bSilentAdminLogin)
    {
        P.ReceiveLocalizedMessage(Class'KFLocalMessage', 1, P.PlayerReplicationInfo);        
    }
    else
    {
        P.BroadcastLocalizedMessage(Class'KFLocalMessage', 1, P.PlayerReplicationInfo);
    }
}

function bool AdminLogout(PlayerController P)
{
    if(P.PlayerReplicationInfo.bAdmin)
    {
        P.PlayerReplicationInfo.bAdmin = false;
        P.bGodMode = false;
        return true;
    }
    return false;
}

function KickBanPlayer(PlayerController C, string KickReason)
{
    local string IP;

    if(NetConnection(C.Player) != none)
    {
        if(!WorldInfo.IsConsoleBuild())
        {
            IP = C.GetPlayerNetworkAddress();
            if(CheckIPPolicy(IP))
            {
                IP = Left(IP, InStr(IP, ":"));
                LogInternal("Adding IP Ban for: " $ IP);
                IPPolicies[IPPolicies.Length] = "DENY," $ IP;
                SaveConfig();
            }
        }
        if(C.PlayerReplicationInfo.UniqueId != C.PlayerReplicationInfo.default.UniqueId && !IsIDBanned(C.PlayerReplicationInfo.UniqueId))
        {
            BannedIDs.AddItem(C.PlayerReplicationInfo.UniqueId;
            SaveConfig();
        }
        KickPlayer(C, KickReason);
        return;
    }
}

function bool IsSessionBanned(const out UniqueNetId NetId)
{
    return SessionBannedIDs.Find('Uid', NetId.Uid > -1;
}

function bool IsIDBanned(const out UniqueNetId NetId)
{
    return (IsSessionBanned(NetId)) || super.IsIDBanned(NetId);
}

defaultproperties
{
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFAccessControl.Sprite'
    Components(0)=Sprite
}