/*******************************************************************************
 * KFLocalMessage_Priority generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFLocalMessage_Priority extends KFLocalMessage;

enum EGameMessageType
{
    GMT_WaveStart,
    GMT_WaveEnd,
    GMT_MatchWon,
    GMT_MatchLost,
    GMT_ObjectiveStart,
    GMT_ObjectiveWon,
    GMT_ObjectiveLost,
    GMT_ObjEndPlayerNeeded,
    GMT_ObjEndTimeLimit,
    GMT_LevelUp,
    GMT_TierUnlocked,
    GMT_Died,
    GMT_ZedsWin,
    GMT_HumansWin,
    GMT_AttackHumanPlayers,
    GMT_NextRoundBegin,
    GMT_LastPlayerStanding,
    GMT_Null,
    GMT_MAX
};

struct SDelayedPriorityMessage
{
    var string InPrimaryMessageString;
    var string InSecondaryMessageString;
    var int Lifetime;
    var byte MessageType;

    structdefaultproperties
    {
        InPrimaryMessageString=""
        InSecondaryMessageString=""
        Lifetime=0
        MessageType=0
    }
};

var const localized string WaveStartMessage;
var const localized string WaveEndMessage;
var const localized string GetToTraderMessage;
var const localized string ScavengeMessage;
var const localized string YouLostMessage;
var const localized string YouWonMessage;
var const localized string SquadWipedOutMessage;
var const localized string SquadSurvivedMessage;
var const localized string ObjectiveStartMessage;
var const localized string ObjectiveWonMessage;
var const localized string ObjectiveLostMessage;
var const localized string ObjectiveEndedMessage;
var const localized string ObjNotEnoughPlayersMessage;
var const localized string ObjTimeRanOutMessage;
var const localized string HumansLoseMessage;
var const localized string HumansWinMessage;
var const localized string AttackHumanPlayersString;
var const localized string ZedGroupRegroupingString;
var const localized string NextRoundBeginString;
var const localized string PlayerCanChangePerksString;
var const localized string ZedWaitingForNextRoundString;
var const localized string LastPlayerStandingString;

static function ClientReceive(PlayerController P, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject)
{
    local string MessageString, SecondaryMessageString;
    local KFGFxMoviePlayer_HUD myGfxHUD;
    local KFGameReplicationInfo KFGRI;
    local TeamInfo TeamInfo;
    local byte TeamIndex;
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    TeamIndex = P.PlayerReplicationInfo.GetTeamNum();
    if(OptionalObject != none)
    {
        TeamInfo = TeamInfo(OptionalObject);
        if(TeamInfo != none)
        {
            TeamIndex = byte(TeamInfo.TeamIndex);
        }
    }
    MessageString = GetMessageString(Switch, SecondaryMessageString, TeamIndex);
    if(((MessageString != "") && KFGFxHudWrapper(P.myHUD) != none) && ShouldShowPriortyMessage(P, Switch))
    {
        myGfxHUD = KFGFxHudWrapper(P.myHUD).HudMovie;
        if(myGfxHUD != none)
        {
            myGfxHUD.DisplayPriorityMessage(MessageString, SecondaryMessageString, int(GetMessageLifeTime(Switch)), byte(Switch));            
        }
        else
        {
            if(KFPC.MyGFxManager != none)
            {
                if(KFPC.MyGFxManager != none)
                {
                    KFPC.MyGFxManager.QueueDelayedPriorityMessage(MessageString, SecondaryMessageString, int(GetMessageLifeTime(Switch)), byte(Switch));
                }
            }
        }
    }
    switch(Switch)
    {
        case 0:
            if(!P.PlayerReplicationInfo.bOnlySpectator && P.PlayerReplicationInfo.bReadyToPlay)
            {
                if((KFPC != none) && KFPC.LEDEffectsManager != none)
                {
                    KFPC.LEDEffectsManager.PlayEffectWaveIncoming();
                }
                CloseMenus();
            }
            Class'KFMusicStingerHelper'.static.PlayWaveStartStinger(P);
            break;
        case 1:
            Class'KFMusicStingerHelper'.static.PlayWaveCompletedStinger(P);
            break;
        case 2:
            KFGRI = KFGameReplicationInfo(P.WorldInfo.GRI);
            if(KFGRI != none)
            {
                KFGRI.bMatchVictory = true;
            }
            if(!P.PlayerReplicationInfo.bOnlySpectator && P.PlayerReplicationInfo.GetTeamNum() == 255)
            {
                Class'KFMusicStingerHelper'.static.PlayMatchLostStinger(P);                
            }
            else
            {
                Class'KFMusicStingerHelper'.static.PlayMatchWonStinger(P);
            }
            if((KFPC != none) && KFPC.LEDEffectsManager != none)
            {
                KFPC.LEDEffectsManager.PlayEffectShowMatchOutcome(P.PlayerReplicationInfo.GetTeamNum() != 255);
            }
            break;
        case 3:
            if(!P.PlayerReplicationInfo.bOnlySpectator && P.PlayerReplicationInfo.GetTeamNum() == 255)
            {
                Class'KFMusicStingerHelper'.static.PlayMatchWonStinger(P);                
            }
            else
            {
                Class'KFMusicStingerHelper'.static.PlayMatchLostStinger(P);
            }
            if((KFPC != none) && KFPC.LEDEffectsManager != none)
            {
                KFPC.LEDEffectsManager.PlayEffectShowMatchOutcome(P.PlayerReplicationInfo.GetTeamNum() == 255);
            }
            break;
        case 13:
            KFGRI = KFGameReplicationInfo(P.WorldInfo.GRI);
            if(KFGRI != none)
            {
                KFGRI.bMatchVictory = true;
            }
            if(P.PlayerReplicationInfo.GetTeamNum() == 255)
            {
                Class'KFMusicStingerHelper'.static.PlayRoundLostStinger(P);                
            }
            else
            {
                Class'KFMusicStingerHelper'.static.PlayRoundWonStinger(P);
            }
            if((KFPC != none) && KFPC.LEDEffectsManager != none)
            {
                KFPC.LEDEffectsManager.PlayEffectShowMatchOutcome(P.PlayerReplicationInfo.GetTeamNum() != 255);
            }
            break;
        case 12:
            if(P.PlayerReplicationInfo.GetTeamNum() == 255)
            {
                Class'KFMusicStingerHelper'.static.PlayRoundWonStinger(P);                
            }
            else
            {
                Class'KFMusicStingerHelper'.static.PlayRoundLostStinger(P);
            }
            if((KFPC != none) && KFPC.LEDEffectsManager != none)
            {
                KFPC.LEDEffectsManager.PlayEffectShowMatchOutcome(P.PlayerReplicationInfo.GetTeamNum() == 255);
            }
            break;
        case 9:
            Class'KFMusicStingerHelper'.static.PlayLevelUpStinger(P);
            break;
        case 10:
            Class'KFMusicStingerHelper'.static.PlayTierUnlockedStinger(P);
            break;
        case 5:
            Class'KFMusicStingerHelper'.static.PlayObjectiveWonStinger(P);
            break;
        case 6:
            Class'KFMusicStingerHelper'.static.PlayObjectiveLostStinger(P);
            break;
        case 11:
            Class'KFMusicStingerHelper'.static.PlayPlayerDiedStinger(P);
            break;
        case 16:
            break;
        default:
            break;
    }
}

static function string GetMessageString(int Switch, optional out string SecondaryString, optional byte TeamIndex)
{
    SecondaryString = "";
    switch(Switch)
    {
        case 13:
            SecondaryString = default.HumansWinMessage;
            if(TeamIndex == 255)
            {
                return default.YouLostMessage;                
            }
            else
            {
                return default.YouWonMessage;
            }
        case 12:
            SecondaryString = default.HumansLoseMessage;
            if(TeamIndex == 255)
            {
                return default.YouWonMessage;                
            }
            else
            {
                return default.YouLostMessage;
            }
        case 0:
            return default.WaveStartMessage;
        case 1:
            if(TeamIndex == 255)
            {
                return default.ZedGroupRegroupingString;                
            }
            else
            {
                SecondaryString = ((KFGameReplicationInfo(Class'WorldInfo'.static.GetWorldInfo().GRI).bTradersEnabled) ? default.GetToTraderMessage : default.ScavengeMessage);
                return default.WaveEndMessage;
            }
        case 2:
            if(Class'WorldInfo'.static.GetWorldInfo().NetMode != NM_Standalone)
            {
                SecondaryString = default.SquadSurvivedMessage;
            }
            return default.YouWonMessage;
        case 3:
            if(Class'WorldInfo'.static.GetWorldInfo().NetMode != NM_Standalone)
            {
                SecondaryString = default.SquadWipedOutMessage;
            }
            return default.YouLostMessage;
        case 4:
            return default.ObjectiveStartMessage;
        case 5:
            return default.ObjectiveWonMessage;
        case 6:
            return default.ObjectiveLostMessage;
        case 7:
            SecondaryString = default.ObjNotEnoughPlayersMessage;
            return default.ObjectiveEndedMessage;
        case 8:
            SecondaryString = default.ObjTimeRanOutMessage;
            return default.ObjectiveLostMessage;
        case 9:
            SecondaryString = "";
            return "";
        case 10:
            SecondaryString = "";
            return "";
        case 14:
            return default.AttackHumanPlayersString;
        case 15:
            if(TeamIndex == 255)
            {
                SecondaryString = default.ZedWaitingForNextRoundString;                
            }
            else
            {
                SecondaryString = default.PlayerCanChangePerksString;
                OpenPerkMenu();
            }
            return default.NextRoundBeginString;
        case 16:
            return default.LastPlayerStandingString;
        default:
            return "";
            break;
    }
}

static function bool ShouldShowPriortyMessage(PlayerController P, int Switch)
{
    local PlayerController PC;

    if((Switch == 6) || Switch == 5)
    {
        return false;
    }
    if(Switch == 16)
    {
        PC = Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController();
        if((PC != none) && (PC.Pawn != none) && PC.Pawn.Health > 0)
        {
            return false;
        }
    }
    return true;
}

static function CloseMenus()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if((KFPC != none) && KFPC.MyGFxManager != none)
    {
        if(KFPC.MyGFxManager.bMenusOpen)
        {
            KFPC.MyGFxManager.CloseMenus(true);
        }
    }
}

static function OpenPerkMenu()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Class'WorldInfo'.static.GetWorldInfo().GetALocalPlayerController());
    if((KFPC != none) && KFPC.MyGFxManager != none)
    {
        KFPC.MyGFxManager.OpenMenu(1, true);
    }
}

static function float GetMessageLifeTime(int Switch)
{
    switch(Switch)
    {
        case 0:
            return 5;
        case 1:
            return 4;
        case 4:
        case 5:
        case 6:
            return 3;
        case 9:
        case 10:
            return 0.01;
        case 2:
        case 3:
            return 0;
        case 14:
            return 2;
        case 15:
            return 5;
        case 16:
            return 1.5;
        default:
            return default.Lifetime;
            break;
    }
}

defaultproperties
{
    WaveStartMessage="W A V E  I N C O M I N G"
    WaveEndMessage="W A V E  C O M P L E T E"
    GetToTraderMessage="Get to the Trader Pod"
    ScavengeMessage="Scavenge"
    YouLostMessage="D E F E A T"
    YouWonMessage="V I C T O R Y"
    SquadWipedOutMessage="Your squad was wiped out!"
    SquadSurvivedMessage="Your squad survived!"
    ObjectiveStartMessage="OBJECTIVE STARTED"
    ObjectiveWonMessage="OBJECTIVE COMPLETE"
    ObjectiveLostMessage="OBJECTIVE FAILED"
    ObjectiveEndedMessage="OBJECTIVE OVER"
    ObjNotEnoughPlayersMessage="Not Enough Players!"
    ObjTimeRanOutMessage="Time Limit Reached!"
    HumansLoseMessage="Human squad wiped out!"
    HumansWinMessage="Human squad survived!"
    AttackHumanPlayersString="Attack the Human Players!"
    ZedGroupRegroupingString="Zed Horde regrouping!"
    NextRoundBeginString="N E X T  R O U N D"
    PlayerCanChangePerksString="Perk changes are allowed"
    ZedWaitingForNextRoundString="Zed Horde invasion imminent!"
    LastPlayerStandingString="LAST PLAYER STANDING"
}