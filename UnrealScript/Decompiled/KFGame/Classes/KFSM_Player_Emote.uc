/*******************************************************************************
 * KFSM_Player_Emote generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Player_Emote extends KFSM_PlaySingleAnim;

var CameraAnim CameraAnim;
var name LastCameraMode;
var Color FadeInColor;
var Color FadeOutColor;
var float FadeInTime;
var float FadeOutTime;
var Rotator InitialRotation;
var protected const float EmoteCooldownTime;
var protected float LastEmoteTime;
var protected export editinline array<export editinline ParticleSystemComponent> AnimParticles;

protected function bool InternalCanDoSpecialMove()
{
    if(((KFPOwner == none) || KFPOwner.Physics == 2) || (KFPOwner.WorldInfo.TimeSeconds - LastEmoteTime) < EmoteCooldownTime)
    {
        return false;
    }
    return super(KFSpecialMove).InternalCanDoSpecialMove();
}

function bool CanDrawCrosshair()
{
    return false;
}

static function byte PackFlagsBase(KFPawn P)
{
    return Class'KFEmoteList'.static.GetEmoteIndex(Class'KFEmoteList'.static.GetEquippedEmoteId());
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    ClearSMParticles();
    super.SpecialMoveStarted(bForced, PrevMove);
    InitialRotation = KFPOwner.Rotation;
}

function PlayAnimation()
{
    AnimName = Class'KFEmoteList'.static.GetEmoteFromIndex(KFPOwner.SpecialMoveFlags);
    PlaySpecialMoveAnim(AnimName, AnimStance, BlendInTime, BlendOutTime, 1);
    if(KFPOwner.Role == ROLE_Authority)
    {
        KFGameInfo(KFPOwner.WorldInfo.Game).DialogManager.PlayDialogEvent(KFPOwner, 31);
    }
    LastCameraMode = 'FirstPerson';
    if((PCOwner != none) && PCOwner.PlayerCamera != none)
    {
        LastCameraMode = PCOwner.PlayerCamera.CameraStyle;
    }
    if((PCOwner == none) || !PawnOwner.IsLocallyControlled())
    {
        KFPOwner.SetWeaponAttachmentVisibility(false);
        return;
    }
    if(PCOwner.CanViewCinematics())
    {
        PCOwner.ClientSetCameraFade(true, FadeInColor, vect2d(1, 0), FadeInTime, true);
        PCOwner.PlayerCamera.CameraStyle = 'Emote';
        if(PCOwner.WorldInfo.NetMode != NM_DedicatedServer)
        {
            PCOwner.ClientSetCameraMode('Emote');
        }
        KFPOwner.SetWeaponAttachmentVisibility(false);
    }
}

function ClearSMParticles()
{
    if(AnimParticles.Length > 0)
    {
        AnimParticles.Remove(0, AnimParticles.Length;
    }
}

simulated function OnAnimNotifyParticleSystemSpawned(const AnimNotify_PlayParticleEffect AnimNotifyData, ParticleSystemComponent PSC)
{
    local AnimSequence AnimSeq;

    if(AnimNotifyData.Outer != none)
    {
        AnimSeq = AnimSequence(AnimNotifyData.Outer);
        if((AnimSeq != none) && string(AnimSeq.SequenceName) ~= string(AnimName))
        {
            AnimParticles.AddItem(PSC;
        }
    }
}

function Tick(float DeltaTime)
{
    super(KFSpecialMove).Tick(DeltaTime);
    if(KFPOwner != none)
    {
        if(((KFPOwner.Role == ROLE_Authority) && KFPOwner.Physics == 2) && KFPOwner.SpecialMoves[KFPOwner.SpecialMove] == self)
        {
            KFPOwner.EndSpecialMove();
        }
        if(KFPOwner.Role != ROLE_SimulatedProxy)
        {
            KFPOwner.SetRotation(InitialRotation);
        }
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    local int I;

    if(KFPOwner.BodyStanceNodes[AnimStance].bIsPlayingCustomAnim)
    {
        KFPOwner.StopBodyAnim(AnimStance, 0.2);
        I = 0;
        J0x7B:

        if(I < AnimParticles.Length)
        {
            if((AnimParticles[I] != none) && AnimParticles[I].bIsActive)
            {
                AnimParticles[I].DeactivateSystem();
            }
            ++ I;
            goto J0x7B;
        }
    }
    ClearSMParticles();
    KFPOwner.SetWeaponAttachmentVisibility((PCOwner == none) || PCOwner.IsEmoteCameraMode());
    if((PCOwner == none) || !KFPOwner.IsLocallyControlled())
    {
        if((PCOwner != none) && PCOwner.IsEmoteCameraMode())
        {
            PCOwner.SetRotation(InitialRotation);
            PCOwner.PlayerCamera.CameraStyle = LastCameraMode;
        }
        super.SpecialMoveEnded(PrevMove, NextMove);
        return;
    }
    LastEmoteTime = KFPOwner.WorldInfo.TimeSeconds;
    if(CameraAnim != none)
    {
        PCOwner.ClientStopCameraAnim(CameraAnim);
    }
    if(PCOwner.IsEmoteCameraMode())
    {
        PCOwner.ClientSetCameraFade(true, FadeOutColor, vect2d(1, 0), FadeOutTime, true);
        PCOwner.SetRotation(InitialRotation);
        if(PCOwner.WorldInfo.NetMode != NM_DedicatedServer)
        {
            PCOwner.ClientSetCameraMode(LastCameraMode);
        }
    }
    super.SpecialMoveEnded(PrevMove, NextMove);
}

defaultproperties
{
    FadeOutColor=(B=255,G=255,R=255,A=0)
    FadeInTime=1.5
    FadeOutTime=0.6
    EmoteCooldownTime=6
    BlendOutTime=0.15
    bDisableMovement=true
    bLockPawnRotation=true
    Handle=KFSM_Player_Emote
}