/*******************************************************************************
 * KFProj_Grenade generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Grenade extends KFProjectile
    abstract
    native
    hidecategories(Navigation);

var float FuseTime;
var KFImpactEffectInfo GrenadeBounceEffectInfo;
/** Dampen amount for every bounce */
var() float DampenFactor;
/** Dampen amount for parallel angle to velocity */
var() float DampenFactorParallel;
/** How much to offset the emitter mesh when the grenade has landed so that it doesn't penetrate the ground */
var() Vector LandedTranslationOffset;
/** Whether or not we want to prevent this grenade from being tossed during the initial zed grab rotation. If the nade can insta kill the player, set to false */
var(Grab) bool bAllowTossDuringZedGrabRotation;
var bool bUpgradable;
/** The UI image for this grenade.  Needed so the images have a reference and are cooked into packages. */
var() Texture2D WeaponSelectTexture;
var repnotify byte TeamNum;

replication
{
     if(bNetInitial && !bNetOwner)
        TeamNum;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'TeamNum')
    {
        EnableGrenadeWarning();        
    }
    else
    {
        super.ReplicatedEvent(VarName);
    }
}

event PreBeginPlay()
{
    super.PreBeginPlay();
    if(Instigator != none)
    {
        TeamNum = Instigator.GetTeamNum();
    }
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    RandSpin(100000);
    if(Role == ROLE_Authority)
    {
        SetTimer(FuseTime, false, 'ExplodeTimer');
    }
    AdjustCanDisintigrate();
}

simulated function SpawnFlightEffects()
{
    super.SpawnFlightEffects();
    if(WorldInfo.Role == ROLE_Authority)
    {
        EnableGrenadeWarning();
    }
}

simulated function EnableGrenadeWarning()
{
    local PlayerController LocalPC;

    if((ProjEffects == none) || GetTeamNum() != 0)
    {
        return;
    }
    LocalPC = GetALocalPlayerController();
    if(((LocalPC != none) && !LocalPC.IsSpectating()) && LocalPC.GetTeamNum() != GetTeamNum())
    {
        ProjEffects.SetFloatParameter('Warning', 0.75);
    }
}

simulated function byte GetTeamNum()
{
    if(!bNetOwner)
    {
        return TeamNum;
    }
    return super(Projectile).GetTeamNum();
}

function ExplodeTimer()
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;

    GetExplodeEffectLocation(HitLocation, HitNormal, HitActor);
    TriggerExplosion(HitLocation, HitNormal, HitActor);
}

simulated function Destroyed()
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;

    if(!bHasExploded && !bHasDisintegrated)
    {
        GetExplodeEffectLocation(HitLocation, HitNormal, HitActor);
        TriggerExplosion(HitLocation, HitNormal, HitActor);
    }
    super.Destroyed();
}

simulated function GetExplodeEffectLocation(out Vector HitLocation, out Vector HitRotation, out Actor HitActor)
{
    local Vector EffectStartTrace, EffectEndTrace;
    local TraceHitInfo HitInfo;

    EffectStartTrace = Location + (vect(0, 0, 1) * 4);
    EffectEndTrace = EffectStartTrace - (vect(0, 0, 1) * 32);
    HitActor = Trace(HitLocation, HitRotation, EffectEndTrace, EffectStartTrace, false,, HitInfo, 1);
    if(IsZero(HitLocation))
    {
        HitLocation = Location;
    }
    if(IsZero(HitRotation))
    {
        HitRotation = vect(0, 0, 1);
    }
}

simulated event HitWall(Vector HitNormal, Actor Wall, PrimitiveComponent WallComp)
{
    if(Pawn(Wall) != none)
    {
        return;
    }
    Bounce(HitNormal, Wall);
    if((Speed < float(40)) && HitNormal.Z > float(0))
    {
        ImpactedActor = Wall;
        GrenadeIsAtRest();
    }
}

simulated function bool Bounce(Vector HitNormal, Actor BouncedOff)
{
    local Vector VNorm;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        KFImpactEffectManager(WorldInfo.MyImpactEffectManager).PlayImpactEffects(Location, Instigator, HitNormal, GrenadeBounceEffectInfo, true);
    }
    VNorm = (Velocity Dot HitNormal) * HitNormal;
    Velocity = (-VNorm * DampenFactor) + ((Velocity - VNorm) * DampenFactorParallel);
    Speed = VSize(Velocity);
    LastBounced.Actor = BouncedOff;
    LastBounced.Time = WorldInfo.TimeSeconds;
    return true;
}

simulated event GrenadeIsAtRest()
{
    local Rotator NewRotation;

    SetPhysics(0);
    if(ProjEffects != none)
    {
        ProjEffects.SetTranslation(LandedTranslationOffset);
    }
    RotationRate.Yaw = 0;
    RotationRate.Pitch = 0;
    RotationRate.Roll = 0;
    NewRotation.Pitch = 16384;
    SetRotation(NewRotation);
}

protected simulated function PrepareExplosionTemplate()
{
    if(bUpgradable)
    {
        super.PrepareExplosionTemplate();        
    }
    else
    {
        GetRadialDamageValues(ExplosionTemplate.Damage, ExplosionTemplate.DamageRadius, ExplosionTemplate.DamageFalloffExponent);
    }
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    if(((Other != none) && Other != Instigator) && !Other.bWorldGeometry || !Other.bStatic)
    {
        if(Pawn(Other) != none)
        {
            if(Pawn(Other).GetTeamNum() != GetTeamNum())
            {
                Disable('Touch');
                Velocity = vect(0, 0, 0);
            }            
        }
        else
        {
            if(!Other.bCanBeDamaged && Other.bBlockActors)
            {
                if(!CheckRepeatingTouch(Other))
                {
                    HitWall(HitNormal, Other, LastTouchComponent);
                }                
            }
            else
            {
                ProcessDestructibleTouchOnBounce(Other, HitLocation, HitNormal);
            }
        }
    }
}

defaultproperties
{
    FuseTime=2
    GrenadeBounceEffectInfo=KFImpactEffectInfo'FX_Impacts_ARCH.DefaultGrenadeImpacts'
    DampenFactor=0.25
    DampenFactorParallel=0.4
    LandedTranslationOffset=(X=2,Y=0,Z=0)
    TeamNum=128
    bAlwaysReplicateDisintegration=true
    bAlwaysReplicateExplosion=true
    bCanDisintegrate=true
    AlwaysRelevantDistanceSquared=6250000
    GlassShatterType=FracturedMeshGlassShatterType.FMGS_ShatterAll
    TouchTimeThreshhold=0.15
    TossZ=250
    Speed=2500
    MaxSpeed=2500
    bBlockedByInstigator=false
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=10
        CollisionRadius=10
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=false
    object end
    // Reference: CylinderComponent'Default__KFProj_Grenade.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=10
        CollisionRadius=10
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=false
    object end
    // Reference: CylinderComponent'Default__KFProj_Grenade.CollisionCylinder'
    Components(0)=CollisionCylinder
    Physics=EPhysics.PHYS_Falling
    bNetTemporary=false
    bCollideComplex=true
    bBounce=true
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=10
        CollisionRadius=10
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=false
    object end
    // Reference: CylinderComponent'Default__KFProj_Grenade.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}