/*******************************************************************************
 * KFMeleeHelperAI generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMeleeHelperAI extends KFMeleeHelperBase within Actor
    native;

struct native SwipeHitActorData
{
    var transient KFPawn HitActor;
    var transient float LastHitTime;

    structdefaultproperties
    {
        HitActor=none
        LastHitTime=0
    }
};

struct native DelayedMeleeInfo
{
    var Pawn Victim;
    var int Damage;
    var float Momentum;
    var float TimeOfDamage;

    structdefaultproperties
    {
        Victim=none
        Damage=0
        Momentum=0
        TimeOfDamage=0
    }
};

/** The default damage applied to each melee hit */
var() float BaseDamage;
/** Default DamageType class */
var() const class<KFDamageType> MyDamageType;
/** how much knockback an attack could cause */
var() float MomentumTransfer;
var transient array<SwipeHitActorData> SwipedActors;
var bool bTrackSwipeHits;
var array<DelayedMeleeInfo> PendingDamage;
var int MaxPingCompensation;
var float PingCompensationScale;

function ApplyMeleeDamage(Actor Victim, int Damage, optional float InMomentum, optional class<KFDamageType> inDamageType)
{
    local Vector HitLocation, HitDirection;
    local KFPawn_Monster InstigatorPawn;

    InMomentum = 1;
    inDamageType = MyDamageType;
    HitLocation = Victim.Location;
    HitLocation.Z += FRand();
    HitDirection = Normal(HitLocation - Outer.Instigator.Location);
    Damage = Max(Damage, 1);
    Victim.TakeDamage(Damage, Outer.Instigator.Controller, HitLocation, HitDirection * InMomentum, inDamageType,, Outer);
    PlayMeleeHitEffects(Victim, HitLocation, HitDirection);
    InstigatorPawn = KFPawn_Monster(Outer.Instigator);
    if(InstigatorPawn != none)
    {
        InstigatorPawn.MyKFAIC.NotifyMeleeDamageDealt();
    }
    if(bLogMelee)
    {
        LogInternal((((string(Victim) $ "**** Melee attack!  BaseDamage=") @ string(BaseDamage)) @ ", ModifiedDamage=") @ string(Damage));
    }
}

function bool ShouldDealDamageToEnemy(Actor Target, optional float Range)
{
    local Vector VectToEnemy, HitLoc, HitNormal;
    local Actor HitActor;
    local TraceHitInfo HitInfo;
    local Vector TraceOffset;

    Range = MaxHitRange;
    VectToEnemy = Target.Location - Outer.Location;
    if(VSizeSq(VectToEnemy) > Square(Range))
    {
        return false;
    }
    if((Normal(VectToEnemy) Dot vector(Outer.Instigator.Rotation)) < 0)
    {
        return false;
    }
    HitActor = Outer.Trace(HitLoc, HitNormal, Target.Location, Outer.Location, false,, HitInfo);
    if(((HitActor != none) && HitInfo.HitComponent != none) && HitInfo.HitComponent.BlockActors)
    {
        TraceOffset = Outer.Instigator.BaseEyeHeight * vect(0, 0, 1);
        HitActor = Outer.Trace(HitLoc, HitNormal, Target.Location + TraceOffset, Outer.Location + TraceOffset, false,, HitInfo);
        if(((HitActor != none) && HitInfo.HitComponent != none) && HitInfo.HitComponent.BlockActors)
        {
            return false;
        }
    }
    return true;
}

function bool DoAreaImpact(int Damage, optional float MomentumScalar, optional class<KFDamageType> DamageType, optional float Range, optional float InFOVCosine, optional bool bPlayersOnly)
{
    local KFPawn KFP;
    local bool bFoundHit;

    MomentumScalar = 1;
    DamageType = MyDamageType;
    Range = MaxHitRange;
    InFOVCosine = 0;    
    foreach Outer.WorldInfo.AllPawns(Class'KFPawn', KFP, Outer.Location, Range)
    {
        if(bPlayersOnly && !KFP.IsHumanControlled())
        {
            continue;            
        }
        if((RateMeleeVictim(KFP, Outer.Location, KFP.Location, Range, InFOVCosine)) > 0)
        {
            ApplyMeleeDamage(KFP, Damage, MomentumScalar, DamageType);
            bFoundHit = true;
        }        
    }    
    return bFoundHit;
}

function MeleeImpactNotify(KFAnimNotify_MeleeImpact Notify)
{
    local KFAIController KFAIC;
    local float MomentumScalar;
    local bool bDealtDmg;

    MomentumScalar = ((Notify.bCanDoKnockback) ? MomentumTransfer : 1);
    KFAIC = KFAIController(Outer.Instigator.Controller);
    if((KFAIC != none) && (KFAIC.DoorEnemy != none) || KFAIC.ActorEnemy != none)
    {
        bDealtDmg = CheckEnemyImpact(int(Notify.DamageScale * BaseDamage), MomentumScalar);        
    }
    else
    {
        if(Notify.bDoAreaDamage)
        {
            bDealtDmg = DoAreaImpact(int(Notify.DamageScale * BaseDamage), MomentumScalar);            
        }
        else
        {
            if(Notify.bDoSwipeDamage)
            {
                bDealtDmg = DoSwipeImpact(int(Notify.DamageScale * BaseDamage), Notify.SwipeDirection, MomentumScalar);                
            }
            else
            {
                bDealtDmg = CheckEnemyImpact(int(Notify.DamageScale * BaseDamage), MomentumScalar);
            }
        }
    }
    if(bDealtDmg && Notify.bCanCauseZedTime)
    {
        KFGameInfo(Outer.WorldInfo.Game).DramaticEvent(0.03);
    }
}

protected function bool CheckEnemyImpact(int Damage, float MomentumScalar)
{
    local KFAIController AIC;

    AIC = KFAIController(Outer.Instigator.Controller);
    if(AIC != none)
    {
        if((AIC.Enemy != none) && ShouldDealDamageToEnemy(AIC.Enemy))
        {
            ResolvePawnMeleeDamage(AIC.Enemy, Damage, MomentumScalar);
            return true;            
        }
        else
        {
            if((AIC.DoorEnemy != none) && VSizeSq(Outer.Location - AIC.DoorEnemy.Location) < Square(500))
            {
                ApplyMeleeDamage(AIC.DoorEnemy, Damage, MomentumScalar);
                return true;                
            }
            else
            {
                if((AIC.ActorEnemy != none) && VSizeSq(Outer.Location - AIC.ActorEnemy.Location) < Square(500))
                {
                    if(KFDestructibleActor(AIC.ActorEnemy) != none)
                    {
                        ApplyMeleeDamage(AIC.ActorEnemy, Damage, MomentumScalar);
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

protected function bool DoSwipeImpact(int Damage, optional KFPawn.EPawnOctant SwipeDir, optional float MomentumScalar, optional float Range, optional bool bPlayersOnly)
{
    local Pawn P;
    local Vector ConeDir, ConeStart;
    local float ConeRange;
    local bool bFoundHit;

    SwipeDir = 0;
    MomentumScalar = 1;
    Range = MaxHitRange;    
    ConeDir = GetSwipeVector(SwipeDir);
    ConeStart = Outer.Location + vect(0, 0, 32);
    ConeRange = Range;
    if(bLogMelee)
    {
        Outer.DrawDebugCone(ConeStart, ConeDir, ConeRange, Acos(0.7071), Acos(0.7071), 16, MakeColor(64, 64, 64, 0), true);
    }
    foreach Outer.WorldInfo.AllPawns(Class'Pawn', P, Outer.Location, ConeRange)
    {
        if((P == Outer.Instigator) || P.bTearOff)
        {
            continue;            
        }
        if(bPlayersOnly && !P.IsHumanControlled())
        {
            continue;            
        }
        if((Normal2D(P.Location - ConeStart) Dot ConeDir) < 0.7071)
        {
            if(bLogMelee)
            {
                LogInternal((("rejected:" @ string(P)) @ "dot:") @ string(Normal(P.Location - ConeStart) Dot ConeDir));
            }
            continue;            
        }
        if(!Outer.FastTrace(P.Location, Outer.Location))
        {
            if(bLogMelee)
            {
                LogInternal(((string(GetFuncName()) @ "rejected:") @ string(P)) @ "melee obstruction: ");
            }
            continue;            
        }
        ProcessSwipeHit(P, Damage, MomentumScalar);
        bFoundHit = true;        
    }    
    if(bLogMelee && bFoundHit)
    {
        Outer.DrawDebugCone(ConeStart, ConeDir, ConeRange, Acos(0.7071), Acos(0.7071), 16, MakeColor(255, 0, 0, 255), true);
    }
    return bFoundHit;
}

protected function Vector GetSwipeVector(KFPawn.EPawnOctant SwipeDir)
{
    local Rotator R;

    switch(SwipeDir)
    {
        case 4:
            R = rot(0, -8192, 0);
            break;
        case 2:
            R = rot(0, -16384, 0);
            break;
        case 6:
            R = rot(0, -24576, 0);
            break;
        case 5:
            R = rot(0, 8192, 0);
            break;
        case 1:
            R = rot(0, 32768, 0);
            break;
        case 7:
            R = rot(0, 24576, 0);
            break;
        case 3:
            R = rot(0, 16384, 0);
            break;
        default:
            break;
    }
    return vector(Outer.Rotation + R);
}

protected function ProcessSwipeHit(Actor A, int Damage, float MomentumScalar)
{
    local KFPawn Victim;
    local int ListIdx;

    Victim = KFPawn(A);
    if(Victim == none)
    {
        return;
    }
    if(bTrackSwipeHits && A.IsA('KFPawn_Human'))
    {
        ListIdx = SwipedActors.Find('HitActor', Victim;
        if(ListIdx == -1)
        {
            ListIdx = SwipedActors.Add(1;
            SwipedActors[ListIdx].HitActor = Victim;
            SwipedActors[ListIdx].LastHitTime = Outer.WorldInfo.TimeSeconds;            
        }
        else
        {
            if((Outer.WorldInfo.TimeSeconds - SwipedActors[ListIdx].LastHitTime) > 0.25)
            {
                SwipedActors[ListIdx].LastHitTime = Outer.WorldInfo.TimeSeconds;                
            }
            else
            {
                return;
            }
        }
    }
    ResolvePawnMeleeDamage(Victim, Damage, MomentumScalar);
}

protected function ResolvePawnMeleeDamage(Pawn Victim, int Damage, float Momentum)
{
    local DelayedMeleeInfo NewDmgInfo;
    local float RealDeltaSeconds, PingCompensation;

    if(Outer.Instigator.Role < ROLE_Authority)
    {
        return;
    }
    if(((Victim.PlayerReplicationInfo != none) && Victim.Weapon != none) && ClassIsChildOf(Victim.Weapon.Class, Class'KFWeap_MeleeBase'))
    {
        PingCompensation = float(Min(int(float(Victim.PlayerReplicationInfo.Ping) * 4), MaxPingCompensation)) / 1000;
        PingCompensation *= PingCompensationScale;
        RealDeltaSeconds = Outer.WorldInfo.DeltaSeconds / Outer.WorldInfo.TimeDilation;
        PingCompensation -= (RealDeltaSeconds / 2);
        if(PingCompensation > float(0))
        {
            NewDmgInfo.Victim = Victim;
            NewDmgInfo.Damage = Damage;
            NewDmgInfo.Momentum = Momentum;
            NewDmgInfo.TimeOfDamage = Outer.WorldInfo.RealTimeSeconds + PingCompensation;
            PendingDamage.AddItem(NewDmgInfo;
            return;
        }
    }
    ApplyMeleeDamage(Victim, Damage, Momentum);
}

event ApplyDelayedPawnDamage(int I)
{
    local KFGameReplicationInfo KFGRI;

    if(!Outer.Instigator.IsAliveAndWell())
    {
        KFGRI = KFGameReplicationInfo(Outer.WorldInfo.GRI);
        if((KFGRI != none) && KFGRI.bTraderIsOpen)
        {
            return;
        }
    }
    ApplyMeleeDamage(PendingDamage[I].Victim, PendingDamage[I].Damage, PendingDamage[I].Momentum);
}

defaultproperties
{
    MyDamageType=Class'KFDT_Slashing'
    bTrackSwipeHits=true
    MaxPingCompensation=200
    PingCompensationScale=0.5
    DefaultFOVCosine=0
    MeleeVictimCamShake=CameraShake'Default__KFMeleeHelperAI.MeleeImpactCamShake0'
}