/*******************************************************************************
 * KFGFxStartGameContainer_Options generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxStartGameContainer_Options extends KFGFxObject_Container within GFxMoviePlayer
    config(UI);

enum EInProgess
{
    E_Allow_In_Progress,
    E_Not_Started,
    E_MAX
};

enum EServerType
{
    E_Standard,
    E_Custom,
    E_Unranked,
    E_MAX
};

var int ModeFilter;
var int DifficultyFilter;
var int LengthFilter;
var int ServerTypeFilter;
var int InProgressFilter;
var int PermissionsFilter;
var bool bModeFilterSet;
var bool bLengthFilterSet;
var bool bServerTypeFilterSet;
var bool bInProgressFilterSet;
var bool bPermissionsFilterSet;
var bool bIsSoloGame;
var byte InitialMapIndex;
var config byte SavedModeIndex;
var config byte SavedDifficultyIndex;
var config byte SavedLengthIndex;
var config byte SavedPrivacyIndex;
var config byte SavedServerTypeIndex;
var config byte SavedInProgressIndex;
var config string SavedMapString;
var KFGFxMenu_StartGame StartMenu;
var const localized string BackString;
var const localized string StartGameString;
var const localized string LaunchGameString;
var const localized string ServerTypeString;
var const localized string InProgressString;
var const localized string SoloGameString;
var const localized string LeaveMatchMakingString;
var const localized string MultiplayerLaunchString;
var const localized string SearchingString;
var const localized string StandardServerString;
var const localized string UnrankedServerString;
var const localized string CustomServerString;
var const localized string AllowInProgressString;
var const localized string NotStartedString;
var array<string> ServerTypeStrings;
var array<string> InProgessOptionStrings;
var const localized array<localized string> GameTypes;
var string PreviousMapName;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    if(SavedDifficultyIndex >= Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray().Length)
    {
        SavedDifficultyIndex = 0;
    }
    StartMenu = KFGFxMenu_StartGame(NewParentMenu);
    InitializeGameOptions();
    LocalizeArrays();
    SetOptions();
}

function InitializeGameOptions()
{
    local GFxObject TextObject;

    bIsSoloGame = GetBool("bIsSoloGame");
    InitialMapIndex = byte(StartMenu.MapStringList.Find(SavedMapString);
    if(InitialMapIndex == 255)
    {
        InitialMapIndex = byte(StartMenu.MapStringList.Length);
    }
    TextObject = Outer.CreateObject("Object");
    TextObject.SetString("soloGameString", SoloGameString);
    TextObject.SetString("matchMakingString", StartMenu.MatchmakingString);
    TextObject.SetString("leaveMatchmakingString", LeaveMatchMakingString);
    TextObject.SetString("backString", BackString);
    TextObject.SetString("lauchGameString", LaunchGameString);
    TextObject.SetString("multiplayerLaunchString", MultiplayerLaunchString);
    TextObject.SetString("searchingString", SearchingString);
    TextObject.SetString("mode", StartMenu.GameModeTitle);
    TextObject.SetString("map", StartMenu.MapTitle);
    TextObject.SetString("difficulty", StartMenu.DifficultyTitle);
    TextObject.SetString("length", StartMenu.LengthTitle);
    TextObject.SetString("privacy", StartMenu.PermissionsTitle);
    TextObject.SetString("serverType", ServerTypeString);
    TextObject.SetString("inProgress", InProgressString);
    if(bIsSoloGame)
    {
        AdjustSavedIndexesForSoloGame();
    }
    TextObject.SetObject("modeList", CreateList(Class'KFCommon_LocalizedStrings'.static.GetGameModeStringsArray(), SavedModeIndex, true));
    TextObject.SetObject("lengthList", CreateList(Class'KFCommon_LocalizedStrings'.static.GetLengthStringsArray(), SavedLengthIndex, true));
    TextObject.SetObject("mapList", CreateList(StartMenu.MapStringList, InitialMapIndex, true, true));
    TextObject.SetObject("difficultyList", CreateList(Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray(), SavedDifficultyIndex, false));
    TextObject.SetObject("serverTypeList", CreateList(ServerTypeStrings, SavedServerTypeIndex, true));
    TextObject.SetObject("inProgressList", CreateList(InProgessOptionStrings, SavedInProgressIndex, false));
    TextObject.SetObject("privacyList", CreateList(Class'KFCommon_LocalizedStrings'.static.GetPermissionStringsArray(), SavedPrivacyIndex, false));
    SetInt("currentSelectedMapIndex", InitialMapIndex);
    SetObject("localizedText", TextObject);
}

function LocalizeArrays()
{
    ServerTypeStrings[0] = Localize("KFGFxStartGameContainer_Options", "StandardServerString", "KFGame");
    ServerTypeStrings[1] = Localize("KFGFxStartGameContainer_Options", "CustomServerString", "KFGame");
    InProgessOptionStrings[0] = Localize("KFGFxStartGameContainer_Options", "AllowInProgressString", "KFGame");
    InProgessOptionStrings[1] = Localize("KFGFxStartGameContainer_Options", "NotStartedString", "KFGame");
}

function AdjustSavedIndexesForSoloGame()
{
    if(SavedModeIndex >= Class'KFCommon_LocalizedStrings'.static.GetGameModeStringsArray().Length)
    {
        SavedModeIndex = 0;
    }
    if(SavedLengthIndex >= Class'KFCommon_LocalizedStrings'.static.GetLengthStringsArray().Length)
    {
        SavedLengthIndex = 0;
    }
    if(InitialMapIndex >= StartMenu.MapStringList.Length)
    {
        InitialMapIndex = 0;
    }
    if(SavedDifficultyIndex >= Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray().Length)
    {
        SavedDifficultyIndex = 0;
    }
}

function GFxObject CreateList(array<string> TextArray, byte SelectedIndex, bool bAddNoPrefString, optional bool bIsMapList)
{
    local byte I;
    local GFxObject OptionList, DataProvider, ItemSlot;
    local string TempString;

    OptionList = Outer.CreateObject("Object");
    DataProvider = Outer.CreateArray();
    I = 0;
    J0x69:

    if(I < TextArray.Length)
    {
        ItemSlot = Outer.CreateObject("Object");
        TempString = ((bIsMapList) ? StartMenu.GetFriendlyMapName(TextArray[I]) : TextArray[I]);
        ItemSlot.SetString("label", TempString);
        DataProvider.SetElementObject(I, ItemSlot);
        ++ I;
        goto J0x69;
    }
    if(bAddNoPrefString && !GetBool("bIsSoloGame"))
    {
        ItemSlot = Outer.CreateObject("Object");
        TempString = Class'KFCommon_LocalizedStrings'.default.NoPreferenceString;
        ItemSlot.SetString("label", TempString);
        DataProvider.SetElementObject(I, ItemSlot);
    }
    OptionList.SetInt("selectedIndex", SelectedIndex);
    OptionList.SetObject("dataProvider", DataProvider);
    OptionList.ActionScriptVoid("invalidateData");
    return OptionList;
}

function SetOptions()
{
    if(((SavedMapString == "") || InitialMapIndex >= StartMenu.MapStringList.Length) && !bIsSoloGame)
    {
        MapChanged("", false);        
    }
    else
    {
        if(InitialMapIndex == 255)
        {
            InitialMapIndex = 0;
        }
        MapChanged(StartMenu.MapStringList[InitialMapIndex], false);
    }
    InProgressChanged(SavedInProgressIndex);
    PrivacyChanged(SavedPrivacyIndex);
}

function SetSearching(bool bSearching)
{
    SetBool("bSearchingForGame", bSearching);
    InProgressChanged(SavedInProgressIndex);
    PrivacyChanged(SavedPrivacyIndex);
}

function ModeChanged(int Index)
{
    SavedModeIndex = byte(Index);
    SaveConfig();
}

function LengthChanged(int Index)
{
    SavedLengthIndex = byte(Index);
    SaveConfig();
}

function DifficultyChanged(int Index)
{
    SavedDifficultyIndex = byte(Index);
    SaveConfig();
}

function MapChanged(string MapName, optional bool bSave)
{
    bSave = true;
    SavedMapString = MapName;
    UpdateMapSource(MapName);
    if(bSave)
    {
        SaveConfig();
    }
}

function UpdateMapSource(string MapName)
{
    if((PreviousMapName == "") || PreviousMapName != MapName)
    {
        SetString("mapSource", StartMenu.GetMapSource(MapName));
        PreviousMapName = MapName;
    }
}

function PrivacyChanged(int Index)
{
    SavedPrivacyIndex = byte(Index);
    SaveConfig();
    SetBool("bPublicGame", (GetPartyPrivacy() == 0) || GetPartyPrivacy() == 1);
}

function ServerTypeChanged(int Index)
{
    SavedServerTypeIndex = byte(Index);
    SaveConfig();
}

function InProgressChanged(int Index)
{
    SavedInProgressIndex = byte(Index);
    SaveConfig();
    SetBool("bAllowGameInProgress", SavedInProgressIndex == 0);
}

function UpdateFilters()
{
    local GFxObject DataObject;

    DataObject = GetObject("options");
    ModeFilter = DataObject.GetInt("mode");
    bModeFilterSet = ModeFilter < Class'KFCommon_LocalizedStrings'.static.GetGameModeStringsArray().Length;
    DifficultyFilter = DataObject.GetInt("difficulty");
    if(DifficultyFilter >= Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray().Length)
    {
        DifficultyFilter = 0;
    }
    LengthFilter = DataObject.GetInt("length");
    bLengthFilterSet = LengthFilter < Class'KFCommon_LocalizedStrings'.static.GetLengthStringsArray().Length;
    ServerTypeFilter = DataObject.GetInt("serverType");
    bServerTypeFilterSet = LengthFilter < ServerTypeStrings.Length;
    InProgressFilter = DataObject.GetInt("inProgress");
    bInProgressFilterSet = SavedInProgressIndex == 0;
    PermissionsFilter = DataObject.GetInt("permissions");
    bPermissionsFilterSet = GetPartyPrivacy() != 0;
}

function int GetGameLength()
{
    if(!bLengthFilterSet)
    {
        return -1;
    }
    switch(LengthFilter)
    {
        case 0:
            return 4;
        case 1:
            return 7;
        case 2:
            return 10;
        default:
            return -1;
            break;
    }
}

function bool GetAllowInProgress()
{
    return bInProgressFilterSet;
}

function int GetDifficulty()
{
    if(DifficultyFilter >= Class'KFCommon_LocalizedStrings'.static.GetDifficultyStringsArray().Length)
    {
        DifficultyFilter = 0;
    }
    return DifficultyFilter;
}

function string GetMapName()
{
    return SavedMapString;
}

function bool GetServerType()
{
    return true;
}

function Engine.TWOnlineLobby.ELobbyVisibility GetPartyPrivacy()
{
    switch(SavedPrivacyIndex)
    {
        case 0:
            return 0;
        case 1:
            return 1;
        case 2:
        default:
            return 2;
            break;
    }
}

function GetServerTypeBools(out int bCustom, out int bRanked)
{
    bCustom = 0;
    bRanked = 1;
    switch(SavedServerTypeIndex)
    {
        case 1:
            bCustom = 1;
            break;
        default:
            break;
            break;
    }
    return;
}

defaultproperties
{
    BackString="BACK"
    StartGameString="START GAME"
    LaunchGameString="LAUNCH GAME"
    ServerTypeString="SERVER TYPE"
    InProgressString="GAME PROGRESS"
    SoloGameString="SOLO GAME"
    LeaveMatchMakingString="LEAVE MATCHMAKING"
    MultiplayerLaunchString="PLAY ONLINE NOW"
    SearchingString="CANCEL SEARCH"
    StandardServerString="Standard"
    UnrankedServerString="Unranked"
    CustomServerString="Custom"
    AllowInProgressString="Allow In Progress Games"
    NotStartedString="Only New Games"
}