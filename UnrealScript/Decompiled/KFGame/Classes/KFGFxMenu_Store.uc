/*******************************************************************************
 * KFGFxMenu_Store generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_Store extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI);

const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;
const KFID_ToggleToRun = 172;
const KFID_ClassicPlayerInfo = 173;
const KFID_VOIPMicVolumeMultiplier = 174;
const KFID_GamepadDeadzoneScale = 175;
const KFID_GamepadAccelerationJumpScale = 176;
const KFID_HasTabbedToStore = 177;

enum ETitleStoreIconLocation
{
    ETSIL_BottomLeft,
    ETSIL_BottomCenter,
    ETSIL_BottomRight,
    ETSIL_MAX
};

struct StoreItem
{
    var int SKU;
    var string ItemDesciption;
    var string IconLocation;
    var string ItemName;
    var float ItemPrice;
    var name ItemType;

    structdefaultproperties
    {
        SKU=0
        ItemDesciption=""
        IconLocation=""
        ItemName=""
        ItemPrice=0
        ItemType=None
    }
};

var const localized string ExitKF2;
var OnlineSubsystem OnlineSub;
var KFGFxStoreContainer_Main MainContainer;
var KFGFxStoreContainer_Details DetailsContainer;
var KFGFxStoreContainer_Cart CartContainer;
var GFxObject AddCartButton;
var const localized string StoreString;

// Export UKFGFxMenu_Store::execShowSystemStoreIcon(FFrame&, void* const)
native function bool ShowSystemStoreIcon(KFGFxMenu_Store.ETitleStoreIconLocation Location);

// Export UKFGFxMenu_Store::execHideSystemStoreIcon(FFrame&, void* const)
native function bool HideSystemStoreIcon();

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    LocalizeText();
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild())
    {
        Class'GameEngine'.static.GetPlayfabInterface().AddInventoryReadCompleteDelegate(OnReadPlayfabInventoryComplete);        
    }
    else
    {
        if(OnlineSub != none)
        {
            OnlineSub.AddOnInventoryReadCompleteDelegate(OnInventoryReadComplete);
        }
    }
}

function OnOpen()
{
    local KFProfileSettings ProfileSettings;
    local bool bHasTabbedToStore;

    if(Class'WorldInfo'.static.IsConsoleBuild(8))
    {
        CheckForEmptyStore();
    }
    if(Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild())
    {
        Class'GameEngine'.static.GetPlayfabInterface().AddInventoryReadCompleteDelegate(OnReadPlayfabInventoryComplete);        
    }
    else
    {
        if(OnlineSub != none)
        {
            OnlineSub.AddOnInventoryReadCompleteDelegate(OnInventoryReadComplete);
        }
    }
    ProfileSettings = Manager.CachedProfile;
    bHasTabbedToStore = ((ProfileSettings != none) ? ProfileSettings.GetProfileInt(177) != 0 : false);
    if((Class'KFGameEngine'.static.IsSalesEventActive() && ProfileSettings != none) && !bHasTabbedToStore)
    {
        ProfileSettings.SetProfileSettingValueInt(177, 1);        
    }
    else
    {
        if((!Class'KFGameEngine'.static.IsSalesEventActive() && Class'KFGameEngine'.static.IsSalesEventChecked()) && ProfileSettings != none)
        {
            ProfileSettings.SetProfileSettingValueInt(177, 0);
        }
    }
    RefreshItemList();
}

function OnClose()
{
    if(Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild())
    {
        Class'GameEngine'.static.GetPlayfabInterface().ClearInventoryReadCompleteDelegate(OnReadPlayfabInventoryComplete);        
    }
    else
    {
        if(OnlineSub != none)
        {
            OnlineSub.ClearOnInventoryReadCompleteDelegate(OnInventoryReadComplete);
        }
    }
}

function OnInventoryReadComplete()
{
    RefreshItemList();
}

function OnReadPlayfabInventoryComplete(bool bSuccess)
{
    if(bSuccess)
    {
        RefreshItemList();        
    }
    else
    {
        Manager.DelayedOpenPopup(2, 0, Class'KFCommon_LocalizedStrings'.default.NoticeString, Class'KFCommon_LocalizedStrings'.default.FailedToReachInventoryServerString, Class'KFCommon_LocalizedStrings'.default.OKString);
    }
}

function RefreshItemList()
{
    if(MainContainer != none)
    {
        MainContainer.SendItems(OnlineSub.ItemPropertiesList);
    }
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("store", ((Class'WorldInfo'.static.IsConsoleBuild(9)) ? ConsoleLocalize("StoreStringXB1") : StoreString));
    SetObject("localizedText", LocalizedObject);
}

event bool WidgetInitialized(name WidgetName, name WidgetPath, GFxObject Widget)
{
    switch(WidgetName)
    {
        case 'storeMainContainer':
            if(MainContainer == none)
            {
                MainContainer = KFGFxStoreContainer_Main(Widget);
                MainContainer.Initialize(self);
                MainContainer.SendItems(OnlineSub.ItemPropertiesList);
            }
            break;
        case 'storeCart':
            if(CartContainer == none)
            {
                CartContainer = KFGFxStoreContainer_Cart(Widget);
                CartContainer.Initialize(self);
            }
            break;
        case 'ItemDetails':
            if(DetailsContainer == none)
            {
                DetailsContainer = KFGFxStoreContainer_Details(Widget);
                DetailsContainer.Initialize(self);
                AddCartButton = DetailsContainer.GetObject("addCartButton");
            }
            break;
        default:
            break;
    }
    return true;
}

function Callback_StoreSectionChanged(int FilterIndex)
{
    MainContainer.UpdateFilter(FilterIndex);
}

function Callback_AddToCartClicked(int ItemSKU)
{
    local ItemProperties StoreItemDetails;

    if(OnlineSub != none)
    {
        StoreItemDetails = OnlineSub.ItemPropertiesList[OnlineSub.ItemPropertiesList.Find('Definition', ItemSKU];
        if(Class'WorldInfo'.static.IsConsoleBuild())
        {
            if(StoreItemDetails.SignedOfferId != "")
            {
                if(Class'WorldInfo'.static.IsConsoleBuild(9))
                {
                    OnlineSub.PlayerInterfaceEx.ShowProductDetailsUI(byte(Outer.GetLP().ControllerId), StoreItemDetails.ProductID);                    
                }
                else
                {
                    OnlineSub.OpenMarketPlaceSearch(StoreItemDetails);
                }
            }            
        }
        else
        {
            if(StoreItemDetails.Price == "")
            {
                OnlineSub.OpenMarketPlaceSearch(StoreItemDetails);                
            }
            else
            {
                OnlineSub.OpenItemPurchaseOverlay(ItemSKU);
            }
        }
    }
}

function CallBack_ItemDetailsClicked(int ItemDefinition)
{
    local ItemProperties StoreItemDetails;

    StoreItemDetails = OnlineSub.ItemPropertiesList[OnlineSub.ItemPropertiesList.Find('Definition', ItemDefinition];
    if(StoreItemDetails.Price == "")
    {
        AddCartButton.SetString("label", Class'KFGFxStoreContainer_Details'.default.LookUpOnMarketString);        
    }
    else
    {
        AddCartButton.SetString("label", Class'KFGFxStoreContainer_Details'.default.AddToCartString @ StoreItemDetails.Price);
    }
    SetObject("storeItemDetails", CreateStoreItem(StoreItemDetails));
    if(Class'WorldInfo'.static.IsEOSBuild())
    {
        AddCartButton.SetVisible((StoreItemDetails.Price != "  ") && StoreItemDetails.Price != "");
    }
    if(Class'WorldInfo'.static.IsConsoleBuild())
    {
        if(StoreItemDetails.Price != "")
        {
            AddCartButton.SetString("label", Class'KFGFxStoreContainer_Details'.default.AddToCartString);
            AddCartButton.SetVisible(true);            
        }
        else
        {
            AddCartButton.SetString("label", "");
            AddCartButton.SetVisible(false);
        }
    }
}

function GFxObject CreateStoreItem(ItemProperties DesiredStoreItem)
{
    local GFxObject DataObject;

    DataObject = Outer.CreateObject("Object");
    DataObject.SetString("label", DesiredStoreItem.Name);
    DataObject.SetString("description", DesiredStoreItem.Description);
    DataObject.SetString("price", ((Class'WorldInfo'.static.IsConsoleBuild()) ? "" : DesiredStoreItem.Price));
    DataObject.SetString("imageURL", "img://" $ DesiredStoreItem.IconURL);
    DataObject.SetString("imageURLLarge", "img://" $ DesiredStoreItem.IconURLLarge);
    DataObject.SetInt("SKU", DesiredStoreItem.Definition);
    return DataObject;
}

function CheckForEmptyStore()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < OnlineSub.ItemPropertiesList.Length)
    {
        if(OnlineSub.ItemPropertiesList[I].SignedOfferId != "")
        {
            return;
        }
        ++ I;
        goto J0x0B;
    }
    if(OnlineSub.PlayerInterface.GetLoginStatus(0) == 2)
    {
        OnlineSub.PlayerInterfaceEx.ShowCustomErrorUI(0);
    }
}

defaultproperties
{
    StoreString="STORE"
    SubWidgetBindings=/* Array type was not detected. */
}