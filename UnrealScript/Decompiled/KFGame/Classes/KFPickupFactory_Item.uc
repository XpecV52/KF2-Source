/*******************************************************************************
 * KFPickupFactory_Item generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPickupFactory_Item extends KFPickupFactory
    native
    nativereplication
    hidecategories(Navigation,Lighting,LightColor,Force);

struct native ItemPickup
{
    /**  
     *A list of all possible weapon pickups. These classes are used to
     *               populate the path names but will not actually load the weapon class
     */
    var() class<Inventory> ItemClass;
    /** Chance relative to other valid attacks (Works like AnimNodeRandom) */
    var() float Priority<ClampMin=0.0>;

    structdefaultproperties
    {
        ItemClass=none
        Priority=1
    }
};

/** The list of possible pickups that could spawn from this factory */
var() array<ItemPickup> ItemPickups;
var name ArmorClassName;
var repnotify byte PickupIndex;

replication
{
     if(bNetDirty && Role == ROLE_Authority)
        PickupIndex;
}

function bool CanUsePickup()
{
    local KFGameInfo KFGI;
    local int I;
    local bool has_armour;

    KFGI = KFGameInfo(WorldInfo.Game);
    if((KFGI != none) && KFGI.OutbreakEvent != none)
    {
        if(KFGI.OutbreakEvent.ActiveEvent.bOnlyArmorItemPickup)
        {
            I = 0;
            J0xBB:

            if(I < ItemPickups.Length)
            {
                if(ItemPickups[I].ItemClass.Name == ArmorClassName)
                {
                    has_armour = true;
                    goto J0x139;
                }
                ++ I;
                goto J0xBB;
            }
        }
        J0x139:

        if(has_armour == false)
        {
            return false;
        }
    }
    return super.CanUsePickup();
}

simulated event PreBeginPlay()
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(((KFGI != none) && KFGI.OutbreakEvent != none) && KFGI.OutbreakEvent.ActiveEvent.bUnlimitedWeaponPickups)
    {
        if(bKismetDriven && bEnabledAtStart)
        {
            bKismetDriven = false;
        }
    }
    super(PickupFactory).PreBeginPlay();
}

simulated event ReplicatedEvent(name VarName)
{
    super(PickupFactory).ReplicatedEvent(VarName);
    if(VarName == 'PickupIndex')
    {
        SetPickupMesh();
    }
}

simulated function InitializePickup()
{
    local KFGameInfo KFGI;

    if(bKismetDriven)
    {
        return;
    }
    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        KFGI.ItemPickups.AddItem(self;
    }
}

simulated event SetInitialState()
{
    if(bKismetDriven && bEnabledAtStart)
    {
        PickupIndex = byte(ChooseWeaponPickup());
        SetPickupMesh();
    }
    super.SetInitialState();
    bScriptInitialized = true;
}

function Reset()
{
    super.Reset();
    PickupIndex = byte(ChooseWeaponPickup());
    bNetDirty = true;
    SetPickupMesh();
}

simulated event OverridePickup()
{
    PickupIndex = byte(ChooseWeaponPickup());
    bNetDirty = true;
    SetPickupMesh();
}

function SetRespawn()
{
    local KFGameInfo KFGI;

    if(bKismetDriven && bEnabledAtStart)
    {
        PickupIndex = byte(ChooseWeaponPickup());
        SetPickupMesh();        
    }
    else
    {
        KFGI = KFGameInfo(WorldInfo.Game);
        if(((KFGI != none) && KFGI.OutbreakEvent != none) && KFGI.OutbreakEvent.ActiveEvent.bUnlimitedWeaponPickups)
        {
            StartSleeping();
            return;
        }
    }
    super.SetRespawn();
}

function int ChooseWeaponPickup()
{
    local int I, DesiredItemIdx;
    local float Weight, TotalWeight, RandomWeight;
    local array<int> IndexList;
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    DesiredItemIdx = 255;
    I = 0;
    J0x48:

    if(I < ItemPickups.Length)
    {
        if((KFGI != none) && KFGI.OutbreakEvent != none)
        {
            if(KFGI.OutbreakEvent.ActiveEvent.bOnlyArmorItemPickup)
            {
                if(ItemPickups[I].ItemClass.Name != 'KFInventory_Armor')
                {
                    goto J0x1A2;
                }
            }
        }
        if(ItemPickups[I].Priority > 0)
        {
            TotalWeight += ItemPickups[I].Priority;
            IndexList.AddItem(I;
        }
        J0x1A2:

        ++ I;
        goto J0x48;
    }
    if((IndexList.Length > 0) && TotalWeight > 0)
    {
        RandomWeight = FRand();
        DesiredItemIdx = IndexList[0];
        I = 0;
        J0x201:

        if(I < (IndexList.Length - 1))
        {
            Weight = ItemPickups[IndexList[I]].Priority / TotalWeight;
            if(RandomWeight <= Weight)
            {
                goto J0x2C0;                
            }
            else
            {
                RandomWeight -= Weight;
                DesiredItemIdx = IndexList[I + 1];
            }
            ++ I;
            goto J0x201;
        }
    }
    J0x2C0:

    return DesiredItemIdx;
}

// Export UKFPickupFactory_Item::execGetPickupMesh(FFrame&, void* const)
native simulated function GetPickupMesh(class<KFWeapon> ItemClass);

simulated function SetPickupMesh()
{
    local KFGameInfo KFGI;

    if(PickupIndex >= ItemPickups.Length)
    {
        return;
    }
    KFGI = KFGameInfo(WorldInfo.Game);
    if((KFGI != none) && KFGI.OutbreakEvent != none)
    {
        if(KFGI.OutbreakEvent.ActiveEvent.bOnlyArmorItemPickup)
        {
            if(ItemPickups[PickupIndex].ItemClass.Name != ArmorClassName)
            {
                return;
            }
        }
    }
    if(ItemPickups[PickupIndex].ItemClass.Name == ArmorClassName)
    {
        FinalizePickupMesh(StaticMeshComponent(ItemPickups[PickupIndex].ItemClass.default.PickupFactoryMesh).StaticMesh);        
    }
    else
    {
        GetPickupMesh(class<KFWeapon>(ItemPickups[PickupIndex].ItemClass));
    }
}

simulated event FinalizePickupMesh(StaticMesh NewMesh)
{
    local editinline StaticMeshComponent FactoryPickupMesh;

    FactoryPickupMesh = StaticMeshComponent(PickupMesh);
    FactoryPickupMesh.SetStaticMesh(NewMesh);
    FactoryPickupMesh.SetCullDistance(3500);
}

function GiveTo(Pawn P)
{
    if(PickupIndex >= ItemPickups.Length)
    {
        return;
    }
    if(ItemPickups[PickupIndex].ItemClass.Name == ArmorClassName)
    {
        GiveArmor(P);        
    }
    else
    {
        GiveWeapon(P);
    }
}

function GiveArmor(Pawn P)
{
    local KFInventoryManager KFIM;

    KFIM = KFInventoryManager(P.InvManager);
    if((KFIM != none) && KFIM.AddArmorFromPickup())
    {
        ActivateNewPickup(P);
        PickedUpBy(P);
        if(Class'KFGameInfo'.static.AllowBalanceLogging())
        {
            WorldInfo.LogGameBalance((((string('Pickup') $ ",") $ P.PlayerReplicationInfo.PlayerName) $ ",") $ "Armor");
        }
        if((WorldInfo.GRI != none) && WorldInfo.GRI.GameClass.static.AllowAnalyticsLogging())
        {
            WorldInfo.TWLogEvent("pickup", P.PlayerReplicationInfo, "armor");
        }
    }
}

function GiveWeapon(Pawn P)
{
    local KFWeapon KFW;
    local class<Inventory> InventoryClass;
    local class<KFWeapon> KFWeaponClass;
    local KFInventoryManager KFIM;
    local Inventory Inv;

    KFIM = KFInventoryManager(P.InvManager);
    foreach KFIM.InventoryActors(Class'KFWeapon', KFW)
    {
        KFWeaponClass = class<KFWeapon>(ItemPickups[PickupIndex].ItemClass);
        if(KFW.Class == ItemPickups[PickupIndex].ItemClass)
        {
            if(KFW.DualClass == none)
            {
                PlayerController(P.Owner).ReceiveLocalizedMessage(Class'KFLocalMessage_Game', 16);                
                return;
            }
            continue;
        }
        if((KFWeaponClass != none) && KFW.Class == KFWeaponClass.default.DualClass)
        {
            PlayerController(P.Owner).ReceiveLocalizedMessage(Class'KFLocalMessage_Game', 16);            
            return;
        }        
    }    
    InventoryClass = ItemPickups[PickupIndex].ItemClass;
    Inv = KFIM.CreateInventory(InventoryClass, true);
    if(Inv != none)
    {
        KFW = KFWeapon(Inv);
        if(KFW != none)
        {
            KFW.bGivenAtStart = true;
            KFW = KFIM.CombineWeaponsOnPickup(KFW);
            KFW.NotifyPickedUp();
        }
        ActivateNewPickup(P);
        PickedUpBy(P);
        if(Class'KFGameInfo'.static.AllowBalanceLogging())
        {
            WorldInfo.LogGameBalance((((string('Pickup') $ ",") $ P.PlayerReplicationInfo.PlayerName) $ ",") $ string(InventoryClass));
        }
        if((WorldInfo.GRI != none) && WorldInfo.GRI.GameClass.static.AllowAnalyticsLogging())
        {
            WorldInfo.TWLogEvent("pickup", P.PlayerReplicationInfo, string(InventoryClass));
        }
    }
}

function ActivateNewPickup(Pawn P)
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if((KFGI != none) && KFGI.OutbreakEvent != none)
    {
        if(KFGI.OutbreakEvent.ActiveEvent.bOnlyArmorItemPickup)
        {
            if(ItemPickups[PickupIndex].ItemClass.Name != ArmorClassName)
            {
                return;
            }
        }
    }
    if(bKismetDriven)
    {
        return;
    }
    if(KFGI != none)
    {
        KFGI.EnableNewPickup(KFGI.ItemPickups, KFGI.DifficultyInfo.GetWeaponPickupInterval(byte(KFGI.GetLivingPlayerCount())), self);
    }
}

function bool CurrentPickupIsWeapon()
{
    if((ItemPickups.Length == 0) || ItemPickups.Length <= PickupIndex)
    {
        return false;
    }
    return ItemPickups[PickupIndex].ItemClass.Name != ArmorClassName;
}

function bool CurrentPickupIsArmor()
{
    if((ItemPickups.Length == 0) || ItemPickups.Length <= PickupIndex)
    {
        return false;
    }
    return ItemPickups[PickupIndex].ItemClass.Name == ArmorClassName;
}

defaultproperties
{
    ArmorClassName=KFInventory_Armor
    PickupIndex=255
    begin object name=StaticMeshComponent0 class=StaticMeshComponent
        StaticMesh=StaticMesh'WEP_3P_AR15_9mm_MESH.Wep_AR15_Pickup'
        ReplacementPrimitive=none
        bCastDynamicShadow=false
        Translation=(X=0,Y=0,Z=-50)
    object end
    // Reference: StaticMeshComponent'Default__KFPickupFactory_Item.StaticMeshComponent0'
    PickupMesh=StaticMeshComponent0
    bNotBased=true
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=50
        CollisionRadius=100
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPickupFactory_Item.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.S_Weapon'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory_Item.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory_Item.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.S_Weapon'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory_Item.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPickupFactory_Item.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPickupFactory_Item.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=50
        CollisionRadius=100
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPickupFactory_Item.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__KFPickupFactory_Item.PathRenderer'
    Components(4)=PathRenderer
    begin object name=StaticMeshComponent0 class=StaticMeshComponent
        StaticMesh=StaticMesh'WEP_3P_AR15_9mm_MESH.Wep_AR15_Pickup'
        ReplacementPrimitive=none
        bCastDynamicShadow=false
        Translation=(X=0,Y=0,Z=-50)
    object end
    // Reference: StaticMeshComponent'Default__KFPickupFactory_Item.StaticMeshComponent0'
    Components(5)=StaticMeshComponent0
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=50
        CollisionRadius=100
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPickupFactory_Item.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}