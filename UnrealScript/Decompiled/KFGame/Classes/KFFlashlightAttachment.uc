/*******************************************************************************
 * KFFlashlightAttachment generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFFlashlightAttachment extends Object
    native(Effect)
    hidecategories(Object);

var export editinline transient SkeletalMeshComponent OwnerMesh;
var transient bool bEnabled;
var transient bool bLightInitialized;
/** Spot Light */
var() export editinline SpotLightComponent LightTemplate;
var export editinline transient SpotLightComponent Light;
/** Light Cone Mesh */
var() SkeletalMesh LightConeMesh;
var export editinline transient KFSkeletalMeshComponent LightConeMeshComp;
/** Mesh attachment (always visible) */
var() StaticMesh AttachmentMesh;
var export editinline transient StaticMeshComponent AttachmentMeshComp;
/** Socket name to attach the flashlight to */
var() name FlashlightSocketName;

function AttachFlashlight(SkeletalMeshComponent Mesh, optional name SocketNameOverride)
{
    if(SocketNameOverride != 'None')
    {
        FlashlightSocketName = SocketNameOverride;
    }
    if(AttachmentMesh != none)
    {
        AttachmentMeshComp = new (self) Class'StaticMeshComponent';
        AttachmentMeshComp.SetStaticMesh(AttachmentMesh);
        Mesh.AttachComponentToSocket(AttachmentMeshComp, FlashlightSocketName);
    }
    OwnerMesh = Mesh;
}

function DetachFlashlight(SkeletalMeshComponent Mesh)
{
    if(Mesh != none)
    {
        if(Light != none)
        {
            Mesh.DetachComponent(Light);
        }
        if(LightConeMeshComp != none)
        {
            Mesh.DetachComponent(LightConeMeshComp);
        }
        if(AttachmentMeshComp != none)
        {
            Mesh.DetachComponent(AttachmentMeshComp);
        }
    }
}

function SetEnabled(bool bNewEnabled)
{
    if(bNewEnabled && !bLightInitialized)
    {
        InitializeLight(OwnerMesh);
    }
    if(Light != none)
    {
        Light.super(KFFlashlightAttachment).SetEnabled(bNewEnabled);
    }
    if(LightConeMeshComp != none)
    {
        LightConeMeshComp.SetHidden(!bNewEnabled);
    }
    bEnabled = bNewEnabled;
}

private final function InitializeLight(SkeletalMeshComponent Mesh)
{
    if(Mesh == none)
    {
        LogInternal("Invalid mesh for flashlight" @ string(self));
        return;
    }
    if((Light == none) && LightTemplate != none)
    {
        Light = new (self) Class'SpotLightComponent' (LightTemplate);
        OwnerMesh.AttachComponentToSocket(Light, FlashlightSocketName);
    }
    if(LightConeMesh != none)
    {
        LightConeMeshComp.SetSkeletalMesh(LightConeMesh);
        OwnerMesh.AttachComponentToSocket(LightConeMeshComp, FlashlightSocketName);
        if(OwnerMesh.IsA('KFSkeletalMeshComponent'))
        {
            SetFOV(KFSkeletalMeshComponent(OwnerMesh).FOV);
        }
    }
    bLightInitialized = true;
}

simulated function SetFOV(float NewFOV)
{
    if(LightConeMeshComp != none)
    {
        LightConeMeshComp.super(KFFlashlightAttachment).SetFOV(NewFOV);
    }
}

defaultproperties
{
    begin object name=FlashLightTemplate class=SpotLightComponent
        InnerConeAngle=20
        OuterConeAngle=30
        Radius=3000
        Brightness=2
        Function=LightFunction'Default__KFFlashlightAttachment.FlashLightFunction'
        bEnabled=false
        CastStaticShadows=false
        ForceCastDynamicShadows=true
        bUpdateOwnerRenderTime=true
        LightingChannels=(Outdoor=true)
    object end
    // Reference: SpotLightComponent'Default__KFFlashlightAttachment.FlashLightTemplate'
    LightTemplate=FlashLightTemplate
    begin object name=LightConeComp class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
        CastShadow=false
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFFlashlightAttachment.LightConeComp'
    LightConeMeshComp=LightConeComp
    FlashlightSocketName=FlashLight
}