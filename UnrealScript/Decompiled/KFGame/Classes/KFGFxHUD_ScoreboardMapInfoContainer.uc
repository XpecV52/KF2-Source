/*******************************************************************************
 * KFGFxHUD_ScoreboardMapInfoContainer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_ScoreboardMapInfoContainer extends GFxObject within GFxMoviePlayer;

var protected int LastMatchTime;
var const localized string WaveString;
var const localized string FinalString;
var int CurrentGameDifficulty;
var string GameTypeString;
var bool bLocalized;

function InitializeHUD()
{
    UpdateWaveCount();
}

function LocalizeText()
{
    local string CurrentMapName;
    local GFxObject LocalizedObject;
    local string MatchInfoString, GameDifficultyString;

    CurrentMapName = Outer.GetPC().WorldInfo.GetMapName();
    GameTypeString = Class'KFCommon_LocalizedStrings'.static.GetGameModeString(0);
    if(Outer.GetPC().WorldInfo.GRI != none)
    {
        CurrentGameDifficulty = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI).GameDifficulty;
        GameDifficultyString = Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(CurrentGameDifficulty));
        GameTypeString = Class'KFCommon_LocalizedStrings'.static.GetGameModeString(0);
        MatchInfoString = (GameTypeString @ "-") @ GameDifficultyString;
    }
    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("waveText", WaveString);
    LocalizedObject.SetString("mapText", GetFriendlyMapName(CurrentMapName));
    LocalizedObject.SetString("matchInfo", MatchInfoString);
    SetObject("localizeText", LocalizedObject);
    bLocalized = true;
}

function string GetFriendlyMapName(string MapName)
{
    local KFMapSummary MapData;

    MapData = Class'KFUIDataStore_GameResource'.static.GetMapSummaryFromMapName(MapName);
    if((MapData != none) && MapData.DisplayName != "")
    {
        return MapData.DisplayName;        
    }
    else
    {
        return MapName;
    }
}

function UpdateMatchInfo()
{
    local KFGameReplicationInfo KFGRI;
    local int CurrentMatchTime;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI != none)
    {
        if(!bLocalized)
        {
            LocalizeText();
        }
        CurrentMatchTime = KFGRI.ElapsedTime;
        if(CurrentMatchTime != LastMatchTime)
        {
            SetInt("timeValue", CurrentMatchTime);
            LastMatchTime = CurrentMatchTime;
        }
    }
}

function UpdateWaveCount()
{
    local int CurrentWaveNum;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI == none)
    {
        return;
    }
    CurrentWaveNum = KFGRI.WaveNum;
    if(CurrentWaveNum == (KFGRI.WaveMax - 1))
    {
        SetString("waveNumber", FinalString);        
    }
    else
    {
        SetString("waveNumber", (string(CurrentWaveNum) $ "/") $ string(KFGRI.WaveMax - 1));
    }
}

defaultproperties
{
    WaveString="WAVE"
    FinalString="Final"
}