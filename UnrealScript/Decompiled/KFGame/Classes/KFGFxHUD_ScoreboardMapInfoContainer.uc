/*******************************************************************************
 * KFGFxHUD_ScoreboardMapInfoContainer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxHUD_ScoreboardMapInfoContainer extends GFxObject within GFxMoviePlayer;

var protected int LastMatchTime;
var const localized string WaveString;
var const localized string FinalString;
var int CurrentGameDifficulty;
var string GameTypeString;
var bool bLocalized;

function InitializeHUD()
{
    UpdateWaveCount();
}

function LocalizeText()
{
    local GFxObject LocalizedObject;
    local string MatchInfoString, GameDifficultyString;
    local KFGameReplicationInfo KFGRI;

    GameTypeString = Class'KFCommon_LocalizedStrings'.static.GetGameModeString(0);
    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI != none)
    {
        CurrentGameDifficulty = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI).GameDifficulty;
        GameDifficultyString = Class'KFCommon_LocalizedStrings'.static.GetDifficultyString(float(CurrentGameDifficulty));
        GameTypeString = KFGRI.GameClass.default.GameName;
        MatchInfoString = (GameTypeString @ "-") @ GameDifficultyString;
    }
    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("waveText", WaveString);
    LocalizedObject.SetString("mapText", Class'KFCommon_LocalizedStrings'.static.GetFriendlyMapName(Outer.GetPC().WorldInfo.GetMapName(true)));
    LocalizedObject.SetString("matchInfo", MatchInfoString);
    SetObject("localizeText", LocalizedObject);
    bLocalized = true;
}

function UpdateMatchInfo()
{
    local KFGameReplicationInfo KFGRI;
    local int CurrentMatchTime;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI != none)
    {
        if(!bLocalized)
        {
            LocalizeText();
        }
        CurrentMatchTime = KFGRI.ElapsedTime;
        if(CurrentMatchTime != LastMatchTime)
        {
            SetInt("timeValue", CurrentMatchTime);
            LastMatchTime = CurrentMatchTime;
        }
    }
}

function UpdateWaveCount()
{
    local int CurrentWaveNum;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(Outer.GetPC().WorldInfo.GRI);
    if(KFGRI == none)
    {
        return;
    }
    CurrentWaveNum = KFGRI.WaveNum;
    if(KFGRI.IsBossWave())
    {
        SetString("waveNumber", Class'KFGFxHUD_WaveInfo'.default.BossWaveString);        
    }
    else
    {
        if(KFGRI.IsFinalWave())
        {
            SetString("waveNumber", FinalString);            
        }
        else
        {
            if(KFGRI.default.bEndlessMode)
            {
                SetString("waveNumber", "" $ string(CurrentWaveNum));                
            }
            else
            {
                SetString("waveNumber", (string(CurrentWaveNum) $ "/") $ string(KFGRI.WaveMax - 1));
            }
        }
    }
}

defaultproperties
{
    WaveString="WAVE"
    FinalString="Final"
}