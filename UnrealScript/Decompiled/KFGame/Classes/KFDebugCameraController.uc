/*******************************************************************************
 * KFDebugCameraController generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDebugCameraController extends DebugCameraController
    native(Controller)
    config(Input)
    hidecategories(Navigation);

var bool bDebugSceneEnabled;
var bool bViewFromFocus;
var bool bForceSprinting;
var bool bMoveToActorOnly;
var KFSceneCaptureDebugCam DebugSceneCamera;
var KFPawn_Monster SelectedKFPawn;
var float SelectedNPCMoveOffset;
var AIDebugGoal DebugGoal;
var KFPawn_Monster DebugTarget;

// Export UKFDebugCameraController::execPrimarySelect(FFrame&, void* const)
native function PrimarySelect(Vector HitLoc, Vector HitNormal, TraceHitInfo HitInfo);

// Export UKFDebugCameraController::execSecondarySelect(FFrame&, void* const)
native function SecondarySelect(Vector HitLoc, Vector HitNormal, TraceHitInfo HitInfo);

// Export UKFDebugCameraController::execUnselect(FFrame&, void* const)
native function Unselect();

simulated event PostBeginPlay()
{
    local HUD NewHUD;

    NewHUD = Spawn(HUDClass, self);
    if((OriginalControllerRef != none) && OriginalControllerRef.myHUD.PostRenderedActors.Length > 0)
    {
        NewHUD.PostRenderedActors = OriginalControllerRef.myHUD.PostRenderedActors;
        NewHUD.bShowOverlays = true;
    }
    if((myHUD != none) && myHUD.PostRenderedActors.Length > 0)
    {
        NewHUD.PostRenderedActors = myHUD.PostRenderedActors;
        NewHUD.bShowOverlays = true;
    }
    super(PlayerController).PostBeginPlay();
    if(NewHUD != none)
    {
        if(myHUD != none)
        {
            myHUD.Destroy();
        }
        myHUD = NewHUD;
    }
}

function OnDeactivate(PlayerController PC)
{
    if(DrawFrustum != none)
    {
        DrawFrustum.SetHidden(true);
        PC.PlayerCamera.DetachComponent(DrawFrustum);
    }
    PC.SetHidden(true);
    PC.PlayerCamera.SetHidden(true);
}

function DisableDebugCamera()
{
    if(OriginalControllerRef != none)
    {
        if(myHUD.PostRenderedActors.Length > 0)
        {
            OriginalControllerRef.myHUD.PostRenderedActors = myHUD.PostRenderedActors;
        }
        super.DisableDebugCamera();
    }
}

function OnActivate(PlayerController PC)
{
    bCollideWorld = false;
    if(KFDebugCameraHUD(myHUD) != none)
    {
        KFDebugCameraHUD(myHUD).bDrawDebugText = bDrawDebugText;
        if(OriginalControllerRef.myHUD.PostRenderedActors.Length > 0)
        {
            KFDebugCameraHUD(myHUD).PostRenderedActors = OriginalControllerRef.myHUD.PostRenderedActors;
            KFDebugCameraHUD(myHUD).bShowOverlays = true;
        }
    }
    PC.SetHidden(false);
    PC.PlayerCamera.SetHidden(false);
}

function AddCheats(optional bool bForce)
{
    if((((CheatManager == none) && WorldInfo.Game != none) && WorldInfo.Game.AllowCheats(self)) || bForce)
    {
        CheatManager = new (self) CheatClass;
        CheatManager.InitCheatManager();
        KFCheatManager(CheatManager).bDebugSceneEnabled = bDebugSceneEnabled;
        KFCheatManager(CheatManager).DebugSceneCamera = DebugSceneCamera;
        KFCheatManager(CheatManager).DebugTarget = DebugTarget;
    }
}

function AICommand_Debug GetDebugCommand(KFPawn DebugPawn)
{
    local AICommand_Debug DebugCommand;
    local KFAIController KFAIC;

    if(((DebugPawn == none) || DebugPawn.Controller == none) || DebugPawn.IsAliveAndWell())
    {
        return none;
    }
    KFAIC = KFAIController(DebugPawn.Controller);
    if((KFAIC != none) && KFAIC.bHasDebugCommand)
    {
        DebugCommand = KFAIC.FindCommandOfClass(Class'AICommand_Debug');
        if(DebugCommand != none)
        {
            return DebugCommand;
        }
    }
    return none;
}

unreliable server function ServerCauseEvent(name EventName)
{
    local array<SequenceObject> AllConsoleEvents;
    local SeqEvent_Console ConsoleEvt;
    local Sequence GameSeq;
    local int Idx;
    local bool bFoundEvt;
    local PlayerController PC;
    local DebugCameraController DCC;

    GameSeq = WorldInfo.GetGameSequence();
    if((GameSeq != none) && EventName != 'None')
    {
        GameSeq.FindSeqObjectsByClass(Class'SeqEvent_Console', true, AllConsoleEvents);
        Idx = 0;
        J0x8E:

        if(Idx < AllConsoleEvents.Length)
        {
            ConsoleEvt = SeqEvent_Console(AllConsoleEvents[Idx]);
            if((ConsoleEvt != none) && EventName == ConsoleEvt.ConsoleEventName)
            {
                bFoundEvt = true;
                foreach WorldInfo.AllControllers(Class'PlayerController', PC)
                {
                    if(PC.bIsPlayer && PC.IsLocalPlayerController())
                    {
                        DCC = DebugCameraController(PC);
                        if((DCC != none) && DCC.OriginalControllerRef != none)
                        {
                            ConsoleEvt.CheckActivate(self, DCC.OriginalControllerRef.Pawn);
                        }
                    }                    
                }                
            }
            ++ Idx;
            goto J0x8E;
        }
    }
    if(!bFoundEvt)
    {
        ListConsoleEvents();
    }
}

exec function AIMoveForward()
{
    local AICommand_Debug DebugCommand;

    if(SelectedKFPawn != none)
    {
        DebugCommand = GetDebugCommand(SelectedKFPawn);
        if(DebugCommand != none)
        {
            DebugCommand.Debug_MoveForward();
        }        
    }
    else
    {
        KFCheatManager(CheatManager).AIMoveForward();
    }
}

exec function AIShowSelectedInfo()
{
    bShowSelectedInfo = !bShowSelectedInfo;
}

exec function ToggleDebugViewFocus()
{
    KFDebugCameraHUD(myHUD).bFocusOnSelectedActor = !KFDebugCameraHUD(myHUD).bFocusOnSelectedActor;
    KFDebugCameraHUD(myHUD).PlayerCamera = PlayerCamera;
}

exec function SetMoveOffset(optional float NewOffset)
{
    NewOffset = 64;
    ClientMessage(("MoveOffset of " $ string(NewOffset)) $ " units will be used for selected NPC");
    SelectedNPCMoveOffset = NewOffset;
}

exec function ToggleSelectedActorView()
{
    bViewFromFocus = !bViewFromFocus;
}

function GetDebugSceneViewPoint(out Vector out_Location, out Rotator out_Rotation)
{
    if(SelectedKFPawn != none)
    {
        out_Rotation = SelectedKFPawn.Rotation;
        out_Rotation.Pitch -= 3000;
        out_Rotation.Yaw = int((WorldInfo.TimeSeconds * float(65536)) / float(10));
        out_Location = (SelectedKFPawn.Location + vect(0, 0, 72)) - (float(220) * vector(out_Rotation));
        return;
    }
}

unreliable server function ServerUpdateCamera(Vector CamLoc, int CamPitchAndYaw)
{
    local TPOV NewPOV;

    if(bViewFromFocus && SelectedActor != none)
    {
        GetDebugSceneViewPoint(NewPOV.Location, NewPOV.Rotation);
        PlayerCamera.FillCameraCache(NewPOV);        
    }
    else
    {
        super(PlayerController).ServerUpdateCamera(CamLoc, CamPitchAndYaw);
    }
}

simulated event GetPlayerViewPoint(out Vector out_Location, out Rotator out_Rotation)
{
    local Actor TheViewTarget;

    if(PlayerCamera == none)
    {
        if(CameraClass != none)
        {
            PlayerCamera = Spawn(CameraClass, self);
            if(PlayerCamera != none)
            {
                PlayerCamera.InitializeFor(self);                
            }
            else
            {
                LogInternal("Couldn't Spawn Camera Actor for Player!!");
            }
        }
    }
    if(bViewFromFocus && SelectedActor != none)
    {
        GetDebugSceneViewPoint(out_Location, out_Rotation);        
    }
    else
    {
        if(PlayerCamera != none)
        {
            PlayerCamera.GetCameraViewPoint(out_Location, out_Rotation);            
        }
        else
        {
            TheViewTarget = GetViewTarget();
            if(TheViewTarget != none)
            {
                out_Location = TheViewTarget.Location;
                out_Rotation = TheViewTarget.Rotation;                
            }
            else
            {
                super(PlayerController).GetPlayerViewPoint(out_Location, out_Rotation);
            }
        }
    }
}

function bool NativeInputKey(int ControllerId, name Key, Core.Object.EInputEvent Event, optional float AmountDepressed, optional bool bGamepad)
{
    local Vector CamLoc, ZeroVec;
    local Rotator CamRot;
    local TraceHitInfo HitInfo;
    local Actor HitActor;
    local Vector HitLoc, HitNormal;
    local bool bIsSprinting;

    AmountDepressed = 1;
    bGamepad = false;
    CamLoc = PlayerCamera.CameraCache.POV.Location;
    CamRot = PlayerCamera.CameraCache.POV.Rotation;
    if(Key == PrimaryKey)
    {
        HitActor = Trace(HitLoc, HitNormal, ((vector(CamRot) * float(5000)) * float(20)) + CamLoc, CamLoc, true, ZeroVec, HitInfo);
        if((HitActor != none) && KFPawn_Monster(HitActor) != none)
        {
            SelectedActor = HitActor;
            SelectedKFPawn = KFPawn_Monster(HitActor);
            PrimarySelect(HitLoc, HitNormal, HitInfo);
        }
        return true;        
    }
    else
    {
        if(((Key == 'P') && Event == 0) && SelectedActor != none)
        {
            SelectedKFPawn.bIsSprinting = !SelectedKFPawn.bIsSprinting;
            bIsSprinting = SelectedKFPawn.bIsSprinting;
            if(bIsSprinting)
            {
                ClientMessage(string(SelectedKFPawn) $ ": Sprinting turned on");                
            }
            else
            {
                ClientMessage(string(SelectedKFPawn) $ " : Sprinting turned off");
            }
            return true;
        }
    }
    if(((Key == 'L') && Event == 0) && SelectedActor != none)
    {
        ToggleSelectedActorView();
        return true;
    }
    if(((Key == 'T') && Event == 0) && SelectedActor != none)
    {
        SelectedKFPawn.LookAtPawn(GetALocalPlayerController().Pawn);
        return true;
    }
    if((Key == 'Z') && Event == 0)
    {
        KFCheatManager(CheatManager).TeleportPawnToCamera();
        return true;
    }
    if((Key == 'H') && Event == 0)
    {
        KFDebugCameraHUD(myHUD).ToggleHelpDisplay();
        return true;
    }
    if(((Key == 'R') && Event == 0) && SelectedActor != none)
    {
        HitActor = Trace(HitLoc, HitNormal, ((vector(CamRot) * float(5000)) * float(20)) + CamLoc, CamLoc, true, ZeroVec, HitInfo);
        SelectedKFPawn.MyKFAIC.Focus = none;
        SelectedKFPawn.MyKFAIC.SetFocalPoint(HitLoc + (HitNormal * 4));
        return true;
    }
    if(((Key == SecondaryKey) && Event == 0) && SelectedActor != none)
    {
        HitActor = Trace(HitLoc, HitNormal, ((vector(CamRot) * float(5000)) * float(20)) + CamLoc, CamLoc, false, ZeroVec, HitInfo);
        if((HitActor == none) || HitActor.bWorldGeometry)
        {
            HitLoc += (HitNormal * 4);
            SelectedKFPawn.MyKFAIC.StopAllLatentMovement();
            SelectedKFPawn.ZeroMovementVariables();
            if(bMoveToActorOnly)
            {
                ClientMessage(("Attempting move to goal " $ string(DebugGoal)) $ ". You can set bMoveToActorOnly to use move to location method instead.");
                if(DebugGoal == none)
                {
                    DebugGoal = Spawn(Class'AIDebugGoal', self,, HitLoc);                    
                }
                else
                {
                    DebugGoal.SetLocation(HitLoc);
                }                
            }
            else
            {
                ClientMessage(("Attempting move to location " $ string(HitLoc)) $ ". You can set bMoveToActorOnly to true to use move to goal actor method instead.");
            }
        }
        return true;
    }
    return false;
}

defaultproperties
{
    bMoveToActorOnly=true
    HUDClass=Class'KFDebugCameraHUD'
    CheatClass=Class'KFCheatManager'
    InputClass=Class'KFDebugCameraInput'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFDebugCameraController.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFDebugCameraController.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFDebugCameraController.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}