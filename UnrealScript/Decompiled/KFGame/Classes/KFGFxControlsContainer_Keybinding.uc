/*******************************************************************************
 * KFGFxControlsContainer_Keybinding generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxControlsContainer_Keybinding extends KFGFxObject_Container within GFxMoviePlayer
    config(UI);

const MAX_SECTIONS = 4;

var KFGFxMoviePlayer_Manager Manager;
var config array<config string> MovementBindList;
var config array<config string> CombatBindList;
var config array<config string> WeaponSelectBindList;
var config array<config string> InteractionBindList;
var KeyBind PendingKeyBind;
var KeyBind OldKeyBind;
var string bindCommand;
var byte CurrentlySelectedSection;
var byte TotalBindSections;
var bool bModCtrl;
var bool bModShift;
var bool bModAlt;
var bool bWaitForInput;
var const string SectionName;
var const localized array<localized string> SectionHeaders;
var const localized string ResetString;
var const localized string ApplyString;
var const localized string KeyAlreadyBoundString;
var const localized string PressKeyString;
var const localized string WarningString;
var const localized string RebindString;
var const localized string ClearedString;
var const localized string CancelString;
var const localized string AcceptString;
var const localized string IgnoredKeyString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    local GFxObject LocalizedObject;

    super.Initialize(NewParentMenu);
    Manager = NewParentMenu.Manager;
    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("resetLabel", ResetString);
    LocalizedObject.SetString("applyLabel", ApplyString);
    SetObject("localizedText", LocalizedObject);
    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("warningLabel", WarningString);
    LocalizedObject.SetString("rebindLabel", RebindString);
    LocalizedObject.SetString("clearedLabel", ClearedString);
    LocalizedObject.SetString("cancelLabel", CancelString);
    LocalizedObject.SetString("acceptLabel", AcceptString);
    SetObject("localizedPopup", LocalizedObject);
    InitalizeCommandList(MovementBindList);
    InitalizeCommandList(InteractionBindList);
    InitalizeCommandList(CombatBindList);
    InitalizeCommandList(WeaponSelectBindList);
    UpdateAllBindings();
}

function InitalizeCommandList(out array<string> BindList)
{
    local byte I;
    local GFxObject CommandSlot, DataProvider;

    if(TotalBindSections < 4)
    {
        DataProvider = Outer.CreateArray();
        DataProvider.SetInt("sectionIndex", TotalBindSections);
        DataProvider.SetString("bindingHeader", SectionHeaders[TotalBindSections]);
        DataProvider.SetString("pressKeyString", PressKeyString);
        I = 0;
        J0xFC:

        if(I < BindList.Length)
        {
            CommandSlot = Outer.CreateObject("Object");
            CommandSlot.SetString("label", Localize(SectionName, BindList[I], "KFGame"));
            DataProvider.SetElementObject(I, CommandSlot);
            ++ I;
            goto J0xFC;
        }
        SetObject("commandList", DataProvider);
        ++ TotalBindSections;
    }
}

function UpdateAllBindings()
{
    UpdateBindList(MovementBindList, 0);
    UpdateBindList(InteractionBindList, 1);
    UpdateBindList(CombatBindList, 2);
    UpdateBindList(WeaponSelectBindList, 3);
    Manager.UpdateDynamicIgnoreKeys();
}

function UpdateBindList(out array<string> BindList, int SectionIndex)
{
    local byte I;
    local GFxObject DataProvider, BindSlot;
    local KeyBind MyKeyBind;
    local KFPlayerInput KFInput;

    if((Outer.GetPC() == none) || KFPlayerInput(Outer.GetPC().PlayerInput) == none)
    {
        return;
    }
    DataProvider = Outer.CreateArray();
    KFInput = KFPlayerInput(Outer.GetPC().PlayerInput);
    I = 0;
    J0xE8:

    if(I < BindList.Length)
    {
        BindSlot = Outer.CreateObject("Object");
        KFInput.GetKeyBindFromCommand(MyKeyBind, BindList[I], false);
        BindSlot.SetString("command", BindList[I]);
        if(MyKeyBind.Name != 'None')
        {
            BindSlot.SetString("label", KFInput.GetBindDisplayName(MyKeyBind));            
        }
        else
        {
            BindSlot.SetString("label", "");
        }
        DataProvider.SetElementObject(I, BindSlot);
        ++ I;
        goto J0xE8;
    }
    SetSectionBindings(SectionIndex, DataProvider);
}

function SetSectionBindings(int I, GFxObject bindData)
{
    ActionScriptVoid("setSectionBindings");
}

function ChangeBind(string ChangedCommand, byte SelectedSection)
{
    bindCommand = ChangedCommand;
    CurrentlySelectedSection = SelectedSection;
    bWaitForInput = true;
}

function BindKey(name KeyPressed, Core.Object.EInputEvent EventType)
{
    local KeyBind NewKeyBind;

    if(!bWaitForInput)
    {
        return;
    }
    NewKeyBind.Name = KeyPressed;
    if(EventType == 0)
    {
        UpdateModKeys(KeyPressed, EventType);
    }
    if(EventType == 1)
    {
        UpdateModKeys(KeyPressed, EventType);
        NewKeyBind.Control = bModCtrl;
        NewKeyBind.Shift = bModShift;
        NewKeyBind.Alt = bModAlt;
        bWaitForInput = false;
        SetKeyBind(NewKeyBind);
        ResetModKeys();
    }
    Manager.ClearFocusIgnoreKeys();
}

function UpdateModKeys(name KeyPressed, Core.Object.EInputEvent EventType)
{
    switch(KeyPressed)
    {
        case 'LeftControl':
            ResetModKeys();
            bModCtrl = EventType == 0;
            break;
        case 'LeftShift':
            ResetModKeys();
            bModShift = EventType == 0;
            break;
        case 'LeftAlt':
            ResetModKeys();
            bModAlt = EventType == 0;
            break;
        default:
            break;
    }
}

function ResetModKeys()
{
    bModCtrl = false;
    bModShift = false;
    bModAlt = false;
}

function SetKeyBind(KeyBind NewKeyBind)
{
    local KFPlayerInput KFInput;
    local string OldKeyCommand;

    if((Outer.GetPC() == none) || KFPlayerInput(Outer.GetPC().PlayerInput) == none)
    {
        return;
    }
    if(NewKeyBind.Name == 'Escape')
    {
        UpdateAllBindings();
        return;
    }
    if(((NewKeyBind.Name == 'XboxTypeS_A') || NewKeyBind.Name == 'LeftMouseButton') && Manager.IsFocusIgnoreKey(bindCommand))
    {
        Manager.OpenPopup(2, default.WarningString, string(NewKeyBind.Name) @ default.IgnoredKeyString, Class'KFCommon_LocalizedStrings'.default.OKString);
        UpdateAllBindings();
        return;
    }
    KFInput = KFPlayerInput(Outer.GetPC().PlayerInput);
    OldKeyCommand = KFInput.GetGameBindableAction(NewKeyBind.Name);
    if(((NewKeyBind.Name != 'Delete') && OldKeyCommand != "") && OldKeyCommand != bindCommand)
    {
        PendingKeyBind = NewKeyBind;
        OldKeyBind.Command = OldKeyCommand;
        OldKeyBind.Name = 'Delete';
        SetConflictMessage(string(NewKeyBind.Name), OldKeyCommand, bindCommand, CurrentlySelectedSection);        
    }
    else
    {
        KFInput.BindKey(NewKeyBind, bindCommand, false);
        UpdateAllBindings();
    }
}

function SetConflictMessage(string KeyString, string OldCommand, string NewCommand, byte SelectedSection)
{
    KeyString = Repl(KeyAlreadyBoundString, "%x%", KeyString, true);
    OldCommand = Localize(SectionName, OldCommand, "KFGame");
    NewCommand = Localize(SectionName, NewCommand, "KFGame");
    ActionScriptVoid("setConflictMessage");
}

function AcceptBind()
{
    KFPlayerInput(Outer.GetPC().PlayerInput).BindKey(OldKeyBind, OldKeyBind.Command, false);
    KFPlayerInput(Outer.GetPC().PlayerInput).BindKey(PendingKeyBind, bindCommand, false);
    UpdateAllBindings();
}

function ResetControls()
{
    if((Outer.GetPC() != none) && Outer.GetPC().PlayerInput != none)
    {
        KFPlayerInput(Outer.GetPC().PlayerInput).ResetKeysToDefault();
        UpdateAllBindings();
    }
}

function ClearInputOnContainer()
{
    UpdateAllBindings();
    bWaitForInput = false;
}

defaultproperties
{
    MovementBindList(0)="GBA_MoveForward"
    MovementBindList(1)="GBA_StrafeLeft"
    MovementBindList(2)="GBA_Backward"
    MovementBindList(3)="GBA_StrafeRight"
    MovementBindList(4)="GBA_Jump"
    MovementBindList(5)="GBA_Sprint"
    MovementBindList(6)="GBA_CrouchToggle"
    MovementBindList(7)="GBA_CrouchHold"
    CombatBindList(0)="GBA_Fire"
    CombatBindList(1)="GBA_IronsightsToggle"
    CombatBindList(2)="GBA_IronsightsHold"
    CombatBindList(3)="GBA_Reload"
    CombatBindList(4)="GBA_Grenade"
    CombatBindList(5)="GBA_QuickHeal"
    CombatBindList(6)="GBA_SwitchFireMode"
    CombatBindList(7)="GBA_TertiaryFire"
    CombatBindList(8)="GBA_ToggleFlashlight"
    WeaponSelectBindList(0)="GBA_NextWeapon"
    WeaponSelectBindList(1)="GBA_PrevWeapon"
    WeaponSelectBindList(2)="GBA_SwitchWeapon1"
    WeaponSelectBindList(3)="GBA_SwitchWeapon2"
    WeaponSelectBindList(4)="GBA_SwitchWeapon3"
    WeaponSelectBindList(5)="GBA_SwitchWeapon4"
    WeaponSelectBindList(6)="GBA_LastWeapon"
    InteractionBindList(0)="GBA_Use"
    InteractionBindList(1)="GBA_Talk"
    InteractionBindList(2)="GBA_TeamTalk"
    InteractionBindList(3)="GBA_VoiceChat"
    InteractionBindList(4)="GBA_ShowVoiceComms"
    InteractionBindList(5)="GBA_ShowScores"
    InteractionBindList(6)="GBA_TossMoney"
    InteractionBindList(7)="GBA_DropWeapon"
    InteractionBindList(8)="GBA_VoteYes"
    InteractionBindList(9)="GBA_VoteNo"
    SectionName="LocalizedControls"
    SectionHeaders(0)="Movement"
    SectionHeaders(1)="Interaction"
    SectionHeaders(2)="Combat"
    SectionHeaders(3)="Weapon Selection"
    ResetString="RESET ALL"
    ApplyString="APPLY"
    KeyAlreadyBoundString="Key <%x%> is already bound to:"
    PressKeyString="[PRESS KEY]"
    WarningString="WARNING"
    RebindString="Rebind to:"
    ClearedString="(Previous binding will be cleared)"
    CancelString="CANCEL"
    AcceptString="ACCEPT"
    IgnoredKeyString="may not be bound to ignored key"
}