/*******************************************************************************
 * KFSeasonalEventStats generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSeasonalEventStats extends Object within KFOnlineStatsWrite
    abstract
    native;

var protected int bObjectiveIsValidForMap[5];

// Export UKFSeasonalEventStats::execIsValid(FFrame&, void* const)
native final function bool IsValid();

// Export UKFSeasonalEventStats::execIncrementSeasonalEventStat(FFrame&, void* const)
protected native final function IncrementSeasonalEventStat(int StatIdx, int InC);

// Export UKFSeasonalEventStats::execSetSeasonalEventStatsMax(FFrame&, void* const)
protected native final function SetSeasonalEventStatsMax(int StatMax1, int StatMax2, int StatMax3, int StatMax4, int StatMax5);

// Export UKFSeasonalEventStats::execGrantEventItem(FFrame&, void* const)
protected native final function GrantEventItem(int ItemId);

private final event Initialize(string MapName);

private static final event bool AllowEventBossOverrideForMap(string MapName);

private final event GrantEventItems();

protected final simulated function FinishedObjective(int EventIndex, int ObjectiveIndex)
{
    local KFPlayerController KFPC;
    local int Year, Month, DayOfWeek, Day, Hour, minute,
	    second, MSec;

    if(!IsValid())
    {
        return;
    }
    KFPC = Outer.MyKFPC;
    if(((((KFPC.WorldInfo.NetMode != NM_DedicatedServer) && KFPC.IsLocalPlayerController()) && !KFPC.PlayerReplicationInfo.bOnlySpectator) && !Outer.HasCheated()) && !Outer.IsEventObjectiveComplete(ObjectiveIndex))
    {
        GetSystemTime(Year, Month, DayOfWeek, Day, Hour, minute, second, MSec);
        Outer.UpdateSpecialEvent(EventIndex, ObjectiveIndex, Year, Month);
        if(((KFPC.myGfxHUD != none) && KFPC.myGfxHUD.LevelUpNotificationWidget != none) && (Class'KFGameEngine'.static.GetSeasonalEventID() % 10) == EventIndex)
        {
            KFPC.myGfxHUD.LevelUpNotificationWidget.FinishedSpecialEvent(EventIndex, ObjectiveIndex);
        }
        if(((KFPC.MyGFxManager != none) && KFPC.MyGFxManager.StartMenu != none) && KFPC.MyGFxManager.StartMenu.MissionObjectiveContainer != none)
        {
            KFPC.MyGFxManager.StartMenu.MissionObjectiveContainer.Refresh();
        }
    }
}

simulated function OnMapObjectiveDeactivated(Actor ObjectiveInterfaceActor);

simulated function OnZedKilled(class<KFPawn_Monster> MonsterClass, int Difficulty, class<DamageType> DT);

simulated function OnZedKilledByHeadshot(class<KFPawn_Monster> MonsterClass, int Difficulty, class<DamageType> DT);

simulated function OnMapCollectibleFound(PlayerReplicationInfo FinderPRI, int CollectibleID);

simulated event OnGameWon(class<GameInfo> GameClass, int Difficulty, int GameLength, bool bCoop);

simulated event OnGameEnd(class<GameInfo> GameClass);

simulated function OnBossDied();

simulated event OnWaveCompleted(class<GameInfo> GameClass, int Difficulty, int WaveNum);

simulated event OnTriggerUsed(class<Trigger_PawnsOnly> TriggerClass);

simulated event OnTryCompleteObjective(int ObjectiveIndex, int EventIndex);

simulated function OnHitTaken();
