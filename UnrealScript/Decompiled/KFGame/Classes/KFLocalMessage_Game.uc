/*******************************************************************************
 * KFLocalMessage_Game generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFLocalMessage_Game extends KFLocalMessage;

enum EGameMessageType
{
    GMT_GaveAmmoTo,
    GMT_GaveArmorTo,
    GMT_GaveAmmoAndArmorTo,
    GMT_ReceivedAmmoFrom,
    GMT_ReceivedArmorFrom,
    GMT_ReceivedAmmoAndArmorFrom,
    GMT_HealedBy,
    GMT_HealedPlayer,
    GMT_HealedSelf,
    GMT_Equipped,
    GMT_PickedupArmor,
    GMT_FullArmor,
    GMT_Ammo,
    GMT_PickedupWeaponAmmo,
    GMT_AmmoIsFull,
    GMT_AmmoAndArmorAreFull,
    GMT_AlreadyCarryingWeapon,
    GMT_PickedupItem,
    GMT_TooMuchWeight,
    GMT_PendingPerkChangesSet,
    GMT_PendingPerkChangesApplied,
    GMT_FailedDropInventory,
    GMT_ReceivedGrenadesFrom,
    GMT_GaveGrenadesTo,
    GMT_FoundCollectible,
    GMT_FoundAllCollectibles,
    GMT_UserSharingContent,
    KMT_Killed,
    KMT_Suicide,
    EGameMessageType_MAX
};

var const localized string ReceivedAmmoFromMessage;
var const localized string GaveAmmoToMessage;
var const localized string HealedByMessage;
var const localized string HealedMessage;
var const localized string PickedupArmorMessage;
var const localized string FullArmorMessage;
var const localized string PickupAmmoMessage;
var const localized string AmmoFullMessage;
var const localized string AlreadyCarryingWeaponMessage;
var const localized string PickupWeaponAmmoMessage;
var const localized string PickupMessage;
var const localized string TooMuchWeightMessage;
var const localized string ReceivedGrenadesFromMessage;
var const localized string GaveGrenadesToMessage;
var const localized string YourselfString;
var const localized string FailedDropInventoryMessage;
var const localized string PendingPerkChangesSet;
var const localized string PendingPerkChangesApplied;
var const localized string KilledMessage;
var const localized string SuicideMessage;
var const localized string KillzedBy_PatriarchString;
var const localized string KillzedBy_HansString;
var const localized string KillzedBy_ZedCrawlerString;
var const localized string KillzedBy_ZedBloatString;
var const localized string KillzedBy_ZedFleshpoundString;
var const localized string KillzedBy_ZedGorefastString;
var const localized string KillzedBy_ZedHuskString;
var const localized string KillzedBy_ZedScrakeString;
var const localized string KillzedBy_ZedSirenString;
var const localized string KillzedBy_ZedStalkerString;
var const localized string KillzedBy_ZedClot_CystString;
var const localized string KillzedBy_ZedClot_AlphaString;
var const localized string KillzedBy_ZedClot_SlasherString;
var const localized string FoundAMapCollectibleMessage;
var const localized string FoundAllMapCollectiblesMessage;
var const localized string MapCollectibleName;
var const localized string SharingContentString;
var const localized string HeadShotAddedString;
var const localized string HeadShotMaxString;
var const localized string HeadShotResetString;

static function string GetHexColor(int Switch)
{
    switch(Switch)
    {
        case 0:
        case 1:
        case 2:
        case 5:
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 13:
        case 16:
        case 17:
        case 19:
        case 20:
        case 22:
        case 23:
            return default.GameColor;
        default:
            return "00FF00";
            break;
    }
}

static function string GetString(optional int Switch, optional bool bPRI1HUD, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject)
{
    local string TempString;

    switch(Switch)
    {
        case 0:
        case 1:
        case 2:
            return default.GaveAmmoToMessage @ RelatedPRI_1.PlayerName;
        case 3:
        case 4:
        case 5:
            return default.ReceivedAmmoFromMessage @ RelatedPRI_1.PlayerName;
        case 6:
            return default.HealedByMessage @ RelatedPRI_1.PlayerName;
        case 19:
            return default.PendingPerkChangesSet;
        case 20:
            return default.PendingPerkChangesApplied;
        case 7:
            return default.HealedMessage @ RelatedPRI_1.PlayerName;
        case 8:
            return default.HealedMessage @ default.YourselfString;
        case 10:
            return default.PickedupArmorMessage;
        case 11:
            return default.FullArmorMessage;
        case 12:
            return default.PickupAmmoMessage;
        case 14:
        case 15:
            return default.AmmoFullMessage;
        case 13:
            TempString = Repl(default.PickupWeaponAmmoMessage, "%x%", class<Inventory>(OptionalObject).default.ItemName, true);
            return TempString;
        case 16:
            return default.AlreadyCarryingWeaponMessage;
        case 17:
            return default.PickupMessage @ Inventory(OptionalObject).ItemName;
        case 18:
            return default.TooMuchWeightMessage;
        case 21:
            return default.FailedDropInventoryMessage;
        case 23:
            return default.GaveGrenadesToMessage @ RelatedPRI_1.PlayerName;
        case 22:
            return default.ReceivedGrenadesFromMessage @ RelatedPRI_1.PlayerName;
        case 24:
            return default.FoundAMapCollectibleMessage;
        case 25:
            return default.FoundAllMapCollectiblesMessage;
        case 26:
            return RelatedPRI_1.PlayerName @ default.SharingContentString;
        case 27:
            return RelatedPRI_2.PlayerName $ (GetKilledByZedMessage(OptionalObject));
        case 28:
            return RelatedPRI_2.PlayerName @ default.SuicideMessage;
        default:
            return "";
            break;
    }
}

static function string GetKilledByZedMessage(Object KillerObject)
{
    local class<Pawn> PawnClass;
    local class<KFDamageType> KFDT;

    PawnClass = class<Pawn>(KillerObject);
    if((PawnClass != none) && PawnClass.default.ControllerClass != none)
    {
        switch(PawnClass.default.ControllerClass.Name)
        {
            case 'KFAIController_ZedPatriarch':
                return default.KillzedBy_PatriarchString;
            case 'KFAIController_Hans':
                return default.KillzedBy_HansString;
            case 'KFAIController_ZedCrawler':
            case 'KFAIController_ZedCrawlerKing':
                return default.KillzedBy_ZedCrawlerString;
            case 'KFAIController_ZedBloat':
                return default.KillzedBy_ZedBloatString;
            case 'KFAIController_ZedFleshpound':
                return default.KillzedBy_ZedFleshpoundString;
            case 'KFAIController_ZedGorefast':
            case 'KFAIController_ZedGorefastDualBlade':
                return default.KillzedBy_ZedGorefastString;
            case 'KFAIController_ZedHusk':
                return default.KillzedBy_ZedHuskString;
            case 'KFAIController_ZedScrake':
                return default.KillzedBy_ZedScrakeString;
            case 'KFAIController_ZedSiren':
                return default.KillzedBy_ZedSirenString;
            case 'KFAIController_ZedStalker':
                return default.KillzedBy_ZedStalkerString;
            case 'KFAIController_ZedClot_Cyst':
                return default.KillzedBy_ZedClot_CystString;
            case 'KFAIController_ZedClot_Alpha':
            case 'KFAIController_ZedClot_AlphaKing':
                return default.KillzedBy_ZedClot_AlphaString;
            case 'KFAIController_ZedClot_Slasher':
                return default.KillzedBy_ZedClot_SlasherString;
            default:
                break;
                break;
        }
    }
    KFDT = class<KFDamageType>(KillerObject);
    if(KFDT != none)
    {
        switch(KFDT.Name)
        {
            case 'KFDT_Explosive_CrawlerSuicide':
            case 'KFDT_Toxic_PlayerCrawlerSuicide':
                return default.KillzedBy_ZedCrawlerString;
            case 'KFDT_BloatPuke':
            case 'KFDT_Toxic_BloatPukeMine':
                return default.KillzedBy_ZedBloatString;
            case 'KFDT_Fire_HuskFireball':
            case 'KFDT_Fire_HuskFlamethrower':
            case 'KFDT_Explosive_HuskSuicide':
                return default.KillzedBy_ZedHuskString;
            default:
                break;
            }
    }
    else
    {
        return default.KilledMessage;
    }
}

static function float GetPos(int Switch, HUD myHUD)
{
    switch(Switch)
    {
        case 27:
        case 28:
            return 0.1;
        default:
            return 0.8;
            break;
    }
}

defaultproperties
{
    ReceivedAmmoFromMessage="You received ammo from"
    GaveAmmoToMessage="You gave ammo to"
    HealedByMessage="You were healed by"
    HealedMessage="You healed"
    PickedupArmorMessage="You picked up armor"
    FullArmorMessage="Your armor is already full"
    PickupAmmoMessage="You picked up ammo"
    AmmoFullMessage="Your ammo is full"
    AlreadyCarryingWeaponMessage="You already have this weapon"
    PickupWeaponAmmoMessage="You picked up %x% ammo"
    PickupMessage="You picked up a"
    TooMuchWeightMessage="This weapon is too heavy. Try dropping or selling a weapon"
    ReceivedGrenadesFromMessage="You received grenades from"
    GaveGrenadesToMessage="You gave grenades to"
    YourselfString="yourself"
    FailedDropInventoryMessage="You can't drop that here"
    PendingPerkChangesSet="Perk changes will be applied at the end of the wave"
    PendingPerkChangesApplied="Perk changes applied!"
    KilledMessage=" was eaten alive"
    SuicideMessage=" just gave up on life..."
    KillzedBy_PatriarchString=" can't hurt Kevin's children anymore"
    KillzedBy_HansString="'s body has been removed for further experimentation"
    KillzedBy_ZedCrawlerString="'s ankles have been chewed off"
    KillzedBy_ZedBloatString=" has drowned in bodily fluids"
    KillzedBy_ZedFleshpoundString=" has been ground to a pulp"
    KillzedBy_ZedGorefastString=" was skinned alive"
    KillzedBy_ZedHuskString=" has been charred to death"
    KillzedBy_ZedScrakeString=" was cut down in their prime"
    KillzedBy_ZedSirenString="'s ears have blown out - fatally"
    KillzedBy_ZedStalkerString=" didn't see it coming"
    KillzedBy_ZedClot_CystString=" has suffered an underwhelming death"
    KillzedBy_ZedClot_AlphaString=" was grabbed inappropriately"
    KillzedBy_ZedClot_SlasherString=" no longer likes slasher flicks"
    FoundAMapCollectibleMessage="%x% found a %y%. %z% left..."
    FoundAllMapCollectiblesMessage="Every %x% has been found!"
    MapCollectibleName="piece of dosh bling"
    SharingContentString="is sharing content"
    HeadShotAddedString="%x Headshot(s) - %y% Extra Damage!"
    HeadShotMaxString="Headshot! %x% Extra Damage!"
    HeadShotResetString="Missed Headshot. Normal Damage!"
    bIsUnique=true
    bIsConsoleMessage=false
    bBeep=true
    Lifetime=5
    DrawColor=(B=0,G=0,R=255,A=255)
    FontSize=20
}