/*******************************************************************************
 * KFDT_Slashing generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDT_Slashing extends KFDamageType
    abstract;

static simulated function KFPawn.EPawnOctant GetLastSlashDirection(KFPawn_Monster inPawn, Vector HitDirection)
{
    local Vector SlashPlaneNormal;
    local Rotator InstigatorRotation;
    local Vector InstigatorFaceDir, InstigatorRightDir;
    local float UpDotSlash, RightDotSlash, UpThresholdValue;

    if((inPawn != none) && inPawn.HitFxInstigator != none)
    {
        HitDirection = Normal(HitDirection);
        InstigatorRotation = inPawn.HitFxInstigator.GetBaseAimRotation();
        InstigatorFaceDir = GetRotatorAxis(InstigatorRotation, 0);
        InstigatorRightDir = GetRotatorAxis(InstigatorRotation, 1);
        SlashPlaneNormal = Normal(InstigatorFaceDir Cross HitDirection);
        UpDotSlash = vect(0, 0, 1) Dot SlashPlaneNormal;
        UpThresholdValue = Abs(UpDotSlash);
        RightDotSlash = InstigatorRightDir Dot SlashPlaneNormal;
        if((UpThresholdValue <= float(1)) && UpThresholdValue >= 0.76)
        {
            if(UpDotSlash > float(0))
            {
                return 3;                
            }
            else
            {
                return 2;
            }            
        }
        else
        {
            if((UpThresholdValue <= 0.76) && UpThresholdValue >= 0.34)
            {
                if((UpDotSlash < float(0)) && RightDotSlash > float(0))
                {
                    return 4;                    
                }
                else
                {
                    if((UpDotSlash > float(0)) && RightDotSlash > float(0))
                    {
                        return 5;                        
                    }
                    else
                    {
                        if((UpDotSlash > float(0)) && RightDotSlash < float(0))
                        {
                            return 7;                            
                        }
                        else
                        {
                            if((UpDotSlash < float(0)) && RightDotSlash < float(0))
                            {
                                return 6;
                            }
                        }
                    }
                }                
            }
            else
            {
                if((UpThresholdValue <= 0.34) && UpThresholdValue >= float(0))
                {
                    if(RightDotSlash > float(0))
                    {
                        return 0;                        
                    }
                    else
                    {
                        return 1;
                    }
                }
            }
        }
    }
    return 8;
}

static simulated function AddBloodSpread(KFPawn_Monster inPawn, Vector HitDirection, out array<Vector> HitSpread, bool bIsDismemberingHit, bool bWasObliterated)
{
    local Rotator InstigatorRotation;
    local float Angle;
    local Quat Rotation;
    local Vector InstigatorFaceDir, SlashPlaneNormal;

    InstigatorRotation = inPawn.HitFxInstigator.GetBaseAimRotation();
    InstigatorFaceDir = GetRotatorAxis(InstigatorRotation, 0);
    SlashPlaneNormal = Normal(InstigatorFaceDir Cross HitDirection);
    Angle = -3.141593 / 2;
    J0x94:

    if(Angle <= (3.141593 / 2))
    {
        Rotation = QuatFromAxisAndAngle(SlashPlaneNormal, Angle);
        HitSpread.AddItem(QuatRotateVector(Rotation, HitDirection);
        Angle += (3.141593 / 6);
        goto J0x94;
    }
}

static simulated function float GetBloodScale(float HitZoneDamageScale, bool bIsDismemberingHit, bool bWasObliterated)
{
    return default.BloodScale * ((bIsDismemberingHit) ? 4 : 1);
}

static simulated function bool CanDismemberHitZone(name InHitZoneName)
{
    switch(InHitZoneName)
    {
        case 'head':
        case 'lhand':
        case 'rhand':
        case 'lfoot':
        case 'rfoot':
        case 'lforearm':
        case 'rforearm':
            return true;
        default:
            return false;
            break;
    }
}

static function int GetKillerDialogID()
{
    return 78;
}

defaultproperties
{
    EffectGroup=EEffectDamageGroup.FXG_Slashing
    GoreDamageGroup=EGoreDamageGroup.DGT_MeleeSlash
    bShouldSpawnPersistentBlood=true
    BodyWoundDecalMaterials(0)=MaterialInstanceConstant'FX_Impacts_MAT.FX_Bladed_Impact_Slice_01_MIC'
    CameraLensEffectTemplate=Class'KFCameraLensEmit_BloodBase'
    BloodScale=0.5
    KDamageImpulse=300
}