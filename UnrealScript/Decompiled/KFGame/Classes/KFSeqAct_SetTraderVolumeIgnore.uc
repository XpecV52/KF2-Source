/*******************************************************************************
 * KFSeqAct_SetTraderVolumeIgnore generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSeqAct_SetTraderVolumeIgnore extends SequenceAction
    forcescriptorder(true)
    hidecategories(Object);

/**  
 *Leave at VCT_None to always attempt to show the path to all human players.
 * If this is set to VCT_InVolume, it will only show the path to players inside the linked volume.
 * If this is set to VCT_NotInVolume, it will only show the path to players NOT in the linked volume.
 */
var() KFSeqAct_ShowPath.eVolumeCheckType VolumeCheckType;

event Activated()
{
    local SeqVar_Object ObjVar;
    local Volume Volume;
    local KFGameReplicationInfo KFGRI;

    if(InputLinks[0].bHasImpulse)
    {
        foreach LinkedVariables(Class'SeqVar_Object', ObjVar, "Volume")
        {
            Volume = Volume(ObjVar.GetObjectValue());
            break;            
        }        
        if(Volume == none)
        {
            return;
        }
        KFGRI = KFGameReplicationInfo(Class'WorldInfo'.static.GetWorldInfo().GRI);
        if(KFGRI != none)
        {
            KFGRI.TraderVolume = Volume;
            KFGRI.TraderVolumeCheckType = VolumeCheckType;
        }        
    }
    else
    {
        if(InputLinks[1].bHasImpulse)
        {
            KFGRI = KFGameReplicationInfo(Class'WorldInfo'.static.GetWorldInfo().GRI);
            if(KFGRI != none)
            {
                KFGRI.TraderVolume = none;
                KFGRI.TraderVolumeCheckType = 0;
            }
        }
    }
}

static function bool IsActorInVolume(Actor TestActor, Volume TestVolume)
{
    local Actor A;

    foreach TestActor.TouchingActors(Class'Actor', A)
    {
        if(A == TestVolume)
        {            
            return true;
        }        
    }    
    return TestVolume.Encompasses(TestActor);
}

defaultproperties
{
    bCallHandler=false
    InputLinks(0)=(LinkDesc="Set",bHasImpulse=false,QueuedActivations=0,bDisabled=false,bDisabledPIE=false,LinkedOp=none,DrawY=0,bHidden=false,ActivateDelay=0,bMoving=false,bClampedMax=false,bClampedMin=false,OverrideDelta=0)
    InputLinks(1)=(LinkDesc="Clear",bHasImpulse=false,QueuedActivations=0,bDisabled=false,bDisabledPIE=false,LinkedOp=none,DrawY=0,bHidden=false,ActivateDelay=0,bMoving=false,bClampedMax=false,bClampedMin=false,OverrideDelta=0)
    VariableLinks(0)=(ExpectedType=Class'Engine.SeqVar_Object',LinkedVariables=none,LinkDesc="Volume",LinkVar=None,PropertyName=None,bWriteable=false,bSequenceNeverReadsOnlyWritesToThisVar=false,bModifiesLinkedObject=false,bHidden=false,MinVars=1,MaxVars=1,DrawX=0,CachedProperty=none,bAllowAnyType=false,bMoving=false,bClampedMax=false,bClampedMin=false,OverrideDelta=0)
    ObjName="Set Trader Volume Settings"
    ObjCategory="Killing Floor"
}