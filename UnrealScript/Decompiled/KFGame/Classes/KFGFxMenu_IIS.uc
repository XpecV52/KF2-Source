/*******************************************************************************
 * KFGFxMenu_IIS generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_IIS extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI);

enum EConditionalState
{
    ECS_UnTested,
    ECS_Failed,
    ECS_AsyncWaiting,
    ECS_CompleteSuccess,
    ECS_MAX
};

var transient KFGFxMenu_IIS.EConditionalState eHasInternet;
var transient KFGFxMenu_IIS.EConditionalState eSaveDataLoaded;
var transient KFGFxMenu_IIS.EConditionalState eHasTSSUpdates;
var transient KFGFxMenu_IIS.EConditionalState eHasPlayfabUser;
var transient KFGFxMenu_IIS.EConditionalState eHasPILogin;
var transient KFGFxMenu_IIS.EConditionalState AutoLoginState;
var transient int LoginAttemptNum;
var transient int LoginAttemptedLast;
var transient bool bLoginForInvite;
var const localized string OnError_LeftButton;
var const localized string ErrorNoInternetTitle;
var const localized string ErrorNoInternetDescription;
var const localized string ErrorNoSaveDataLoadTitle;
var const localized string ErrorNoSaveDataLoadDescription;
var const localized string ErrorTSSFailedTitle;
var const localized string ErrorTSSFailedDescription;
var const localized string ErrorNoPlayfabTitle;
var const localized string ErrorNoPlayfabDescription;
var const localized string ErrorNoPlaystationNetworkTitle;
var const localized string ErrorNoPlaystationNetworkDescription;
var const localized string ErrorNoPlaystationPlusTitle;
var const localized string ErrorNoPlaystationPlusDescription;

event AttemptAutoLogin(optional bool inLoginForInvite)
{
    inLoginForInvite = false;
    bLoginForInvite = inLoginForInvite;
    AutoLoginState = 2;
    LoginToGame();
}

// Export UKFGFxMenu_IIS::execIsRunning(FFrame&, void* const)
native function bool IsRunning();

function OneSecondLoop()
{
    if((Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.GetLoginStatus(0) == 0) && ShouldAttemptAutoLogin())
    {
        AttemptAutoLogin();
    }
}

// Export UKFGFxMenu_IIS::execShouldAttemptAutoLogin(FFrame&, void* const)
native function bool ShouldAttemptAutoLogin();

function OnOpen()
{
    SetString("loginText", Localize(string(self.Class.Name), "PressButtonToStart", "KFGameConsole"));
    SetBool("showLoading", false);
}

event OnClose()
{
    local KFGameViewportClient GVC;

    GVC = KFGameViewportClient(Outer.GetGameViewportClient());
    if(GVC != none)
    {
        GVC.bSeenIIS = true;
    }
    UnRegisterDelegates();
}

function UnRegisterDelegates()
{
    Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.ClearLoginStatusChangeDelegate(OnLoginStatusChange, 0);
    Class'GameEngine'.static.GetOnlineSubsystem().ContentInterface.ClearQueryAvailableDownloadsComplete(0, OnQueryInitialContentComplete);
    Class'GameEngine'.static.GetPlayfabInterface().ClearOnLoginCompleteDelegate(OnPlayfabLoginComplete);
    Class'GameEngine'.static.GetPlayfabInterface().ClearStoreDataReadCompleteDelegate(OnPlayfabStoreReadComplete);
    Class'GameEngine'.static.GetPlayfabInterface().ClearInventoryReadCompleteDelegate(OnPlayfabInventoryReadComplete);
}

event bool FilterButtonInput(int ControllerId, name ButtonName, Core.Object.EInputEvent InputEvent)
{
    if((((ButtonName == 'XboxTypeS_A') && InputEvent == 0) && Manager != none) && Manager.CurrentPopup == none)
    {
        LoginToGame();
        return true;
    }
    return false;
}

function LoginLocal()
{
    local OnlineSubsystem OSS;

    OSS = Class'GameEngine'.static.GetOnlineSubsystem();
    eHasInternet = 3;
    eHasTSSUpdates = 3;
    eHasPlayfabUser = 3;
    SetString("loginText", Localize(string(self.Class.Name), "LoggingIn", "KFGameConsole"));
    SetBool("showLoading", true);
    eHasPILogin = 2;
    OSS.PlayerInterface.AddLoginStatusChangeDelegate(OnLoginStatusChange, 0);
    OSS.PlayerInterface.Login(0, "E3 Demo Player", "", true);
    eSaveDataLoaded = 2;
    OSS.ContentInterface.AddQueryAvailableDownloadsComplete(0, OnQueryInitialContentComplete);
    OSS.ContentInterface.QueryAvailableDownloads(0);
}

function LoginToGame()
{
    local OnlineSubsystem OSS;
    local PlayfabInterface playfab;
    local string cachedName, cachedPass;

    if(LoginAttemptedLast != LoginAttemptNum)
    {
        return;
    }
    OSS = Class'GameEngine'.static.GetOnlineSubsystem();
    ++ LoginAttemptNum;
    if(Class'WorldInfo'.static.IsConsoleBuild() && Class'WorldInfo'.static.IsE3Build())
    {
        LogInternal(((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "Running Local login now!!! - Whoo E3");
        LoginLocal();
        return;
    }
    SetString("loginText", Localize(string(self.Class.Name), "LoggingIn", "KFGameConsole"));
    SetBool("showLoading", true);
    if(OSS.SystemInterface.HasLinkConnection())
    {
        eHasInternet = 3;        
    }
    else
    {
        eHasInternet = 1;
        OnLoginFailed();
        return;
    }
    cachedName = Class'GameInfo'.default.DefaultPlayerName;
    cachedPass = "12345";
    if((eHasPILogin != 3) && OSS.PlayerInterface.GetLoginStatus(0) == 0)
    {
        LogInternal(((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "WE are not logged in at start time");
        OSS.PlayerInterface.AddLoginStatusChangeDelegate(OnLoginStatusChange, 0);
        OSS.PlayerInterface.Login(0, cachedName, cachedPass);
        eHasPILogin = 2;        
    }
    else
    {
        if(eHasPlayfabUser != 3)
        {
            playfab = Class'GameEngine'.static.GetPlayfabInterface();
            if(playfab != none)
            {
                playfab.AddOnLoginCompleteDelegate(OnPlayfabLoginComplete);
                playfab.Login(OSS.PlayerInterface.GetPlayerNickname(0));
                eHasPlayfabUser = 2;
            }
        }
    }
    if(eSaveDataLoaded != 3)
    {
        OSS.ContentInterface.AddQueryAvailableDownloadsComplete(0, OnQueryInitialContentComplete);
        OSS.ContentInterface.QueryAvailableDownloads(0);
        eSaveDataLoaded = 2;
    }
    eHasTSSUpdates = 3;
}

function OnPlayfabLoginComplete(bool bWasSuccessful, string SessionTicket, string PlayfabId)
{
    LogInternal(((((((((((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "bWasSuccessful:'") $ string(bWasSuccessful)) $ "'") @ "SessionTicket:'") $ SessionTicket) $ "'") @ "PlayfabId:'") $ PlayfabId) $ "'");
    Class'GameEngine'.static.GetPlayfabInterface().ClearOnLoginCompleteDelegate(OnPlayfabLoginComplete);
    if(bWasSuccessful)
    {
        Class'GameEngine'.static.GetPlayfabInterface().AddStoreDataReadCompleteDelegate(OnPlayfabStoreReadComplete);
        Class'GameEngine'.static.GetPlayfabInterface().ReadStoreData();        
    }
    else
    {
        eHasPlayfabUser = 1;
        OnLoginFailed();
    }
}

function OnPlayfabStoreReadComplete(bool bSuccessful)
{
    LogInternal("OnPlayfabStoreReadComplete" @ string(bSuccessful));
    Class'GameEngine'.static.GetPlayfabInterface().ClearStoreDataReadCompleteDelegate(OnPlayfabStoreReadComplete);
    if(bSuccessful)
    {
        Class'GameEngine'.static.GetPlayfabInterface().AddInventoryReadCompleteDelegate(OnPlayfabInventoryReadComplete);
        Class'GameEngine'.static.GetPlayfabInterface().ReadInventory();        
    }
    else
    {
        eHasPlayfabUser = 1;
        OnLoginFailed();
    }
}

function OnPlayfabInventoryReadComplete(bool bSuccessful)
{
    LogInternal("OnPlayfabInventoryReadComplete" @ string(bSuccessful));
    Class'GameEngine'.static.GetPlayfabInterface().ClearInventoryReadCompleteDelegate(OnPlayfabInventoryReadComplete);
    if(bSuccessful)
    {
        Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterfaceEx.AddStoreDataReadCompleteDelegate(OnStoreDataRead);
        Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterfaceEx.ReadStoreData();        
    }
    else
    {
        eHasPlayfabUser = 1;
        OnLoginFailed();
    }
}

function OnStoreDataRead(bool bSuccessful)
{
    LogInternal("store data read" @ string(bSuccessful));
    Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterfaceEx.ClearStoreDataReadCompleteDelegate(OnStoreDataRead);
    if(bSuccessful)
    {
        eHasPlayfabUser = 3;
        OnLoginToGameComplete();        
    }
    else
    {
        eHasPlayfabUser = 1;
        OnLoginFailed();
    }
}

function OnLoginStatusChange(Engine.OnlineSubsystem.ELoginStatus NewStatus, UniqueNetId NewId)
{
    local OnlineSubsystem OSS;

    OSS = Class'GameEngine'.static.GetOnlineSubsystem();
    OSS.PlayerInterface.ClearLoginStatusChangeDelegate(OnLoginStatusChange, 0);
    LogInternal(((((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "NewStatus:'") $ string(NewStatus)) $ "'");
    if(NewStatus != 0)
    {
        LogInternal(((((((((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "- Success -") @ "NewStatus:'") $ string(NewStatus)) $ "'") @ "eHasPlayfabUser:'") $ string(eHasPlayfabUser)) $ "'");
        eHasPILogin = 3;
        if(eHasPlayfabUser != 3)
        {
            eHasPlayfabUser = 2;
            LogInternal((((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "PlayerInterface login success, assuming PSN login info set for playfab login") @ OSS.PlayerInterface.GetPlayerNickname(0));
            Class'GameEngine'.static.GetPlayfabInterface().AddOnLoginCompleteDelegate(OnPlayfabLoginComplete);
            Class'GameEngine'.static.GetPlayfabInterface().@NULL == Lerp((@NULL != ( != rot(0, 2359296, -536472042))) != "NewStatus:'", string(NewStatus));
        }
    }    
    ,    
    eHasPILogin = 1;
    OSS.PlayerInterface.ShowLoginUI(false);
    OnLoginToGameComplete();
}

function OnQueryInitialContentComplete(bool bWasSuccess)
{
    local OnlineSubsystem OSS;

    OSS = Class'GameEngine'.static.GetOnlineSubsystem();
    OSS.ContentInterface.ClearQueryAvailableDownloadsComplete(0, OnQueryInitialContentComplete);
    eSaveDataLoaded = ((bWasSuccess) ? 3 : 1);
    OnLoginToGameComplete();
}

function OnLoginFailed()
{
    LogInternal((((((((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "LoginAttemptNum:'") $ string(LoginAttemptNum)) $ "'") @ "LoginAttemptedLast:'") $ string(LoginAttemptedLast)) $ "'");
    AutoLoginState = 1;
    OnOpen();
    if(Manager == none)
    {
        LogInternal(((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "There is no manager associated with this movie, how is that possible?");
        ScriptTrace();        
    }
    else
    {
        if(Manager.CurrentPopup != none)
        {
            LogInternal((((((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "There is already a movie playing at this time:") $ "Manager.CurrentPopup:'") $ string(Manager.CurrentPopup)) $ "'");
            ScriptTrace();
        }
    }
    if(eHasInternet != 3)
    {
        Manager.OpenPopup(2, ErrorNoInternetTitle, ErrorNoInternetDescription, OnError_LeftButton);        
    }
    else
    {
        if(eSaveDataLoaded == 1)
        {
            Manager.OpenPopup(2, ErrorNoSaveDataLoadTitle, ErrorNoSaveDataLoadDescription, OnError_LeftButton);            
        }
        else
        {
            if(eHasTSSUpdates == 1)
            {
                Manager.OpenPopup(2, ErrorTSSFailedTitle, ErrorTSSFailedDescription, OnError_LeftButton);                
            }
            else
            {
                if(eHasPlayfabUser == 1)
                {
                    Manager.OpenPopup(2, ErrorNoPlayfabTitle, ErrorNoPlayfabDescription, OnError_LeftButton);                    
                }
                else
                {
                    if(eHasPILogin == 1)
                    {
                        Manager.OpenPopup(2, ErrorNoPlaystationNetworkTitle, ErrorNoPlaystationNetworkDescription, OnError_LeftButton);
                    }
                }
            }
        }
    }
    AutoLoginState = 1;
}

function OnLoginToGameComplete()
{
    local KFPlayerController PC;

    LogInternal((((((("!!!!!" @ "(") $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "We have 'Finished' Logging in, proceed !!!!!");
    LogInternal(((((((((((((("eHasInternet:'" $ string(eHasInternet)) $ "'") @ "eHasPILogin:'") $ string(eHasPILogin)) $ "'") @ "eSaveDataLoaded:'") $ string(eSaveDataLoaded)) $ "'") @ "eHasTSSUpdates:'") $ string(eHasTSSUpdates)) $ "'") @ "eHasPlayfabUser:'") $ string(eHasPlayfabUser)) $ "'");
    LoginAttemptedLast = LoginAttemptNum;
    PC = KFPlayerController(Outer.GetPC());
    if(((((eHasInternet == 3) && eHasPILogin == 3) && eSaveDataLoaded == 3) && eHasTSSUpdates == 3) && eHasPlayfabUser == 3)
    {
        AutoLoginState = 3;
        PC.ResetPerkStatsLoaded();
        PC.ClientInitializePerks();
        PC.ReceivedPlayer();
        if(PC.WorldInfo.IsConsoleBuild(8) && !PC.WorldInfo.IsE3Build())
        {
            PC.PlayerReplicationInfo.PlayerName = Outer.GetLP().GetNickname();
            PC.PlayerReplicationInfo.UniqueId = Outer.GetLP().GetUniqueNetId();            
            PC.GetPS4Avatar(PC.PlayerReplicationInfo.PlayerName);
            if(bLoginForInvite)
            {
                PC.OnLoginForGameInviteComplete();
            }
        }
        Manager.PartyWidget.RefreshParty();
        if(!Manager.bSetGamma && !Class'KFGameEngine'.static.CheckSkipGammaCheck())
        {
            Manager.OpenPopup(1, "", Class'KFGFxOptionsMenu_Graphics'.default.AdjustGammaDescription, Class'KFGFxOptionsMenu_Graphics'.default.ResetGammaString, Class'KFGFxOptionsMenu_Graphics'.default.SetGammaString);
        }
        NativeLoginComplete();
        NowProgressToMenu();
    }
}

// Export UKFGFxMenu_IIS::execNativeLoginComplete(FFrame&, void* const)
native function NativeLoginComplete();

function NowProgressToMenu()
{
    LogInternal((((("(" $ string(Name)) $ ") KFGFxMenu_IIS::") $ string(GetStateName())) $ ":") $ string(GetFuncName()));
    ScriptTrace();
    Manager.OpenMenu(0);
}
