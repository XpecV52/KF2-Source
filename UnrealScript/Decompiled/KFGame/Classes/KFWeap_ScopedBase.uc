/*******************************************************************************
 * KFWeap_ScopedBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_ScopedBase extends KFWeapon
    abstract
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

/** component that renders the scene to a texture */
var(Scope) const export editinline TWSceneCapture2DDPGComponent SceneCapture;
/** Ratio of the scope texture relative to screen resolution (Should be between 0.0-1.0) */
var(Scope) float ScopeTextureScale;
var int MaxSceneCaptureSize;
/**  
 *Name of the parameter used to blend between scene capture texture (when in ironsights) and
 *    regular texture (when hipped)
 *
 *    1.0 => Scene capture texture
 *    0.0 => Generic texture
 */
var(Scope) name InterpParamName;
var TextureRenderTarget2D SniperScopeTextureTarget;
var const MaterialInstanceConstant ScopeLenseMICTemplate;
var MaterialInstanceConstant ScopeLenseMIC;
var int CurrentScopeTextureSize;
var(Scope) float ScopedSensitivityMod;
var byte ScopeMICIndex;

simulated exec function ScopeFOV(float NewFOV)
{
    SceneCapture.SetCaptureParameters(,, NewFOV);
}

static simulated event KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    if((default.FiringStatesArray[0] == 'WeaponFiring') || default.FiringStatesArray[0] == 'WeaponBurstFiring')
    {
        return 7;        
    }
    else
    {
        return 2;
    }
}

simulated function ProcessInstantHitEx(byte FiringMode, ImpactInfo Impact, optional int NumHits, optional out float out_PenetrationVal, optional int ImpactNum)
{
    local KFPerk InstigatorPerk;

    InstigatorPerk = GetPerk();
    if(InstigatorPerk != none)
    {
        InstigatorPerk.UpdatePerkHeadShots(Impact, InstantHitDamageTypes[FiringMode], ImpactNum);
    }
    super.ProcessInstantHitEx(FiringMode, Impact, NumHits, out_PenetrationVal, ImpactNum);
}

simulated function InitFOV(float SizeX, float SizeY, float DefaultPlayerFOV)
{
    local int NewScopeTextureSize;

    super.InitFOV(SizeX, SizeY, DefaultPlayerFOV);
    NewScopeTextureSize = int(ScopeTextureScale * SizeX);
    if(NewScopeTextureSize > MaxSceneCaptureSize)
    {
        NewScopeTextureSize = MaxSceneCaptureSize;
    }
    if(CurrentScopeTextureSize != NewScopeTextureSize)
    {
        SniperScopeTextureTarget = Class'TextureRenderTarget2D'.static.Create(NewScopeTextureSize, NewScopeTextureSize, 10);
        SniperScopeTextureTarget.TargetGamma = 1;
        SceneCapture.SetCaptureParameters(SniperScopeTextureTarget);
        if(ScopeLenseMIC != none)
        {
            ScopeLenseMIC.SetTextureParameterValue('ScopeTextureTarget', SniperScopeTextureTarget);
        }
        CurrentScopeTextureSize = NewScopeTextureSize;
    }
}

reliable client simulated function ClientWeaponSet(bool bOptionalSet, optional bool bDoNotActivate)
{
    super.ClientWeaponSet(bOptionalSet);
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && Instigator.IsHumanControlled())
    {
        ScopeLenseMIC = new Class'MaterialInstanceConstant';
        ScopeLenseMIC.SetParent(ScopeLenseMICTemplate);
        ScopeLenseMIC.SetTextureParameterValue('ScopeTextureTarget', SniperScopeTextureTarget);
        ScopeLenseMIC.SetScalarParameterValue(InterpParamName, 0);
        Mesh.SetMaterial(ScopeMICIndex, ScopeLenseMIC);
    }
}

simulated event SetPosition(KFPawn Holder)
{
    if(!Holder.IsFirstPerson())
    {
        return;
    }
    super.SetPosition(Holder);
    if(ScopeLenseMIC != none)
    {
        ScopeLenseMIC.SetScalarParameterValue('u_position_shadow', -WeaponLag.Y);
        ScopeLenseMIC.SetScalarParameterValue('v_position_shadow', WeaponLag.Z);
    }
    if(bUsingSights)
    {
        SceneCapture.SetView(Location, Rotation);
    }
}

simulated function float GetModifiedFOVAngle()
{
    if(bUsingSights)
    {
        return (default.PlayerIronSightFOV / SceneCapture.FieldOfView) * ScopedSensitivityMod;        
    }
    else
    {
        return super(Weapon).GetModifiedFOVAngle();
    }
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super.AttachWeaponTo(MeshCpnt, SocketName);
    if(Instigator != none)
    {
        Instigator.AttachComponent(SceneCapture);
    }
}

simulated function DetachWeapon()
{
    super.DetachWeapon();
    if(Instigator != none)
    {
        Instigator.DetachComponent(SceneCapture);
    }
}

simulated event Tick(float DeltaTime)
{
    local float InterpValue, DefaultZoomInTime;

    super.Tick(DeltaTime);
    if(ScopeLenseMIC == none)
    {
        return;
    }
    if(((Instigator != none) && Instigator.Controller != none) && Instigator.IsHumanControlled())
    {
        if(bZoomingOut)
        {
            InterpValue = ZoomTime / default.ZoomOutTime;
            ScopeLenseMIC.SetScalarParameterValue(InterpParamName, InterpValue);            
        }
        else
        {
            if(bZoomingIn)
            {
                DefaultZoomInTime = default.ZoomInTime;
                InterpValue = (-ZoomTime / DefaultZoomInTime) + float(1);
                ScopeLenseMIC.SetScalarParameterValue(InterpParamName, InterpValue);
            }
        }
    }
}

simulated event OnZoomInFinished()
{
    if(ScopeLenseMIC != none)
    {
        ScopeLenseMIC.SetScalarParameterValue(InterpParamName, 1);
    }
    super.OnZoomInFinished();
}

simulated event OnZoomOutFinished()
{
    if(ScopeLenseMIC != none)
    {
        ScopeLenseMIC.SetScalarParameterValue(InterpParamName, 0);
    }
    super.OnZoomOutFinished();
}

simulated function ZoomIn(bool bAnimateTransition, float ZoomTimeToGo)
{
    super.ZoomIn(bAnimateTransition, ZoomTimeToGo);
    if(((SceneCapture != none) && Instigator != none) && !Instigator.PlayerReplicationInfo.bBot)
    {
        SceneCapture.bEnabled = true;
        SceneCapture.SetFrameRate(SceneCapture.default.FrameRate);
    }
    ClearTimer('ZoomOutFastFinished');
}

simulated function ZoomOut(bool bAnimateTransition, float ZoomTimeToGo)
{
    super.ZoomOut(bAnimateTransition, ZoomTimeToGo);
    if(!bAnimateTransition)
    {
        SetTimer(ZoomTimeToGo + 0.01, false, 'ZoomOutFastFinished');        
    }
    else
    {
        if(((SceneCapture != none) && Instigator != none) && !Instigator.PlayerReplicationInfo.bBot)
        {
            SceneCapture.bEnabled = false;
            SceneCapture.SetFrameRate(0);
        }
    }
}

simulated function ZoomOutFastFinished()
{
    if(ScopeLenseMIC != none)
    {
        ScopeLenseMIC.SetScalarParameterValue(InterpParamName, 0);
    }
    if(((SceneCapture != none) && Instigator != none) && !Instigator.PlayerReplicationInfo.bBot)
    {
        SceneCapture.bEnabled = false;
        SceneCapture.SetFrameRate(0);
    }
}

defaultproperties
{
    begin object name=SceneCapture2DComponent0 class=TWSceneCapture2DDPGComponent
        bRenderForegroundDPG=false
        FieldOfView=6
        NearPlane=10
        FarPlane=0
        bUpdateMatrices=false
        bEnabled=false
        bEnableFog=true
        ViewMode=ESceneCaptureViewMode.SceneCapView_Lit
        FrameRate=60
    object end
    // Reference: TWSceneCapture2DDPGComponent'Default__KFWeap_ScopedBase.SceneCapture2DComponent0'
    SceneCapture=SceneCapture2DComponent0
    ScopeTextureScale=0.5
    MaxSceneCaptureSize=1024
    InterpParamName=mat_blend_scaler
    ScopedSensitivityMod=6
    ScopeMICIndex=2
    AimCorrectionSize=40
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_ScopedBase.MeleeHelper'
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_ScopedBase.FirstPersonMesh'
    Mesh=FirstPersonMesh
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_ScopedBase.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_ScopedBase.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
    begin object name=SceneCapture2DComponent0 class=TWSceneCapture2DDPGComponent
        bRenderForegroundDPG=false
        FieldOfView=6
        NearPlane=10
        FarPlane=0
        bUpdateMatrices=false
        bEnabled=false
        bEnableFog=true
        ViewMode=ESceneCaptureViewMode.SceneCapView_Lit
        FrameRate=60
    object end
    // Reference: TWSceneCapture2DDPGComponent'Default__KFWeap_ScopedBase.SceneCapture2DComponent0'
    Components(0)=SceneCapture2DComponent0
}