/*******************************************************************************
 * KFAIPluginRage_Fleshpound generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAIPluginRage_Fleshpound extends AITickablePlugin within KFAIController_ZedFleshpound
    native(AI);

var Vector StartLocation;
var int AccumulatedDOT;
var float RageFrustrationStartTime;
var float MaxEnemyNotVisibleRageTime;
var float RageFrustrationBaseTime;
var float RageFrustrationTime;
var float RageDamageThreshold;
var bool bIsEnraged;

event TickRage()
{
    if((bIsEnraged && !Outer.bEnemyIsVisible) && (Outer.WorldInfo.TimeSeconds - Outer.LastEnemySightedTime) > MaxEnemyNotVisibleRageTime)
    {
        EndRage();        
    }
    else
    {
        if(CanDoRage())
        {
            Outer.AIActionStatus = "Enraged!";
            GotoState('Enraged');
        }
    }
}

function DoSpawnRage()
{
    Outer.AIActionStatus = "Enraged!";
    GotoState('Enraged');
}

function bool CanDoRage()
{
    if(bIsEnraged || !Outer.MyKFPawn.IsCombatCapable())
    {
        return false;
    }
    if(((Outer.Enemy != none) && RageFrustrationStartTime > float(0)) && (Outer.WorldInfo.TimeSeconds - RageFrustrationStartTime) > RageFrustrationTime)
    {
        return true;
    }
    if(float(AccumulatedDOT) >= RageDamageThreshold)
    {
        return true;
    }
    return false;
}

function StartRageTimer(optional bool bJustSawEnemy)
{
    if(bIsEnraged)
    {
        return;
    }
    RageFrustrationStartTime = Outer.WorldInfo.TimeSeconds;
    SetRageTime();
    if(bJustSawEnemy && (Outer.WorldInfo.TimeSeconds - Outer.LastEnemySightedTime) > MaxEnemyNotVisibleRageTime)
    {
        RageFrustrationStartTime += (RageFrustrationTime - 0.5);
    }
}

function SetRageTime()
{
    RageFrustrationTime = RageFrustrationBaseTime + RandRange(1, 5);
}

function EndRage()
{
    if(bIsEnraged)
    {
        GotoState(Outer.InitialState);
        StartRageTimer();
    }
}

state Enraged
{
    function BeginState(name PreviousStateName)
    {
        bIsEnraged = true;
        Outer.MyKFPawn.SetEnraged(true);
        if(!Class'Engine'.static.GetEngine().bDisableAILogging)
        {
            Outer.AILog_Internal((((string(GetStateName()) $ " ") $ string(GetFuncName())) $ "() Prev: ") $ string(PreviousStateName), 'Charging');
        }
        Outer.SetFocalPoint(vect(0, 0, 0));
        Outer.Focus = none;
        Outer.AIZeroMovementVariables();
        PushState('RotateToFocus');
        if(!Outer.MyKFPawn.IsDoingSpecialMove())
        {
            Outer.DoRageTauntAt(KFPawn(Outer.Enemy));
            Outer.LastTauntTime = Outer.WorldInfo.TimeSeconds;
        }
    }

    function EndState(name NextStateName)
    {
        bIsEnraged = false;
        Outer.MyKFPawn.SetEnraged(false);
        AccumulatedDOT = 0;
        if(((Outer.Enemy == none) || VSize(Outer.Enemy.Location - Outer.Pawn.Location) > 1024) || !Outer.CanSee(Outer.Enemy))
        {
            Outer.SetEnemy(Outer.GetClosestEnemy());
        }
        Outer.AIActionStatus = "No longer engraged";
        Outer.EnableMeleeRangeEventProbing();
        Outer.MyKFPawn.bForceMaxAccel = false;
        Outer.bPreciseDestination = false;
    }

    function ContinuedState()
    {
        Outer.AIActionStatus = "Enraged, and preparing to charge";
    }
Finished:

    Outer.UnlockPawnRotation();
    Outer.AIZeroMovementVariables();
    Outer.SetDestinationPosition(Outer.Pawn.Location);
    Outer.Pawn.ResetDesiredRotation();
    Outer.RotationRateMultiplier = 1;
    PushState('RotateToFocus');
    stop;        
}

state RotateToFocus extends DebugState
{Begin:

    Outer.AIActionStatus = "Rotating to focus";
    Outer.SetFocalPoint(vect(0, 0, 0));
    Outer.Focus = Outer.Enemy;
    Outer.FinishRotation();
    PopState();
    stop;                    
}

defaultproperties
{
    MaxEnemyNotVisibleRageTime=30
    RageFrustrationBaseTime=9
    RageDamageThreshold=276
}