/*******************************************************************************
 * AICommand_DebugTurn generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AICommand_DebugTurn extends AICommand within KFAIController;

var KFPlayerController Player;
var bool bEnableMeleeWhenInRange;

static function bool DebugTurnInPlace(KFAIController AI, bool InEnableMeleeWhenInRange, KFPlayerController InPlayerWhoIssuedCheat)
{
    local AICommand_DebugTurn Cmd;

    if(AI != none)
    {
        Cmd = new (AI) default.Class;
        if(Cmd != none)
        {
            Cmd.Player = InPlayerWhoIssuedCheat;
            Cmd.bEnableMeleeWhenInRange = InEnableMeleeWhenInRange;
            AI.PushCommand(Cmd);
            return true;
        }
    }
    return false;
}

function Pushed()
{
    super.Pushed();
    if(Outer.MyKFPawn != none)
    {
        Outer.MyKFPawn.bDisableTurnInPlace = false;
    }
    GotoState('Debug_TurningInPlace');
}

function CheckMeleeRange()
{
    local Pawn P;

    if(!Outer.MyKFPawn.IsDoingSpecialMove())
    {
        foreach Outer.WorldInfo.AllPawns(Class'Pawn', P)
        {
            if((P != Outer.Pawn) && VSize(Outer.Pawn.Location - P.Location) < 850)
            {
                StartMeleeSpecialMove();                
                return;
            }            
        }        
    }
    return;
    if(Player != none)
    {
        if(Outer.InMeleeRange(Player.Pawn.Location))
        {
            if(!Outer.MyKFPawn.IsDoingSpecialMove())
            {
                StartMeleeSpecialMove();
            }            
        }
        else
        {
            if(Outer.MyKFPawn.IsDoingSpecialMove(1))
            {
                Outer.MyKFPawn.EndSpecialMove();
            }
        }
    }
}

function StartMeleeSpecialMove()
{
    Outer.MyKFPawn.DoSpecialMove(1, false, none, 5);
}

state Debug_TurningInPlace
{
    event BeginState(name PreviousStateName)
    {
        super(Object).BeginState(PreviousStateName);
        if(bEnableMeleeWhenInRange)
        {
            Outer.SetTimer(0.1, true, 'CheckMeleeRange', self);
        }
    }
Begin:

    Outer.SetFocalPoint(vect(0, 0, 0));
    if(((Player == none) || !IsControllerAlive(Player)) || (Outer.MyKFPawn == none) || !IsPawnAlive(Outer.MyKFPawn))
    {
        Outer.Sleep(0.1);
        Status = 'Success';
        Outer.PopCommand(self);        
    }
    else
    {
        Outer.Focus = Player.Pawn;
    }
    Outer.Sleep(3);
    goto 'Begin';
    stop;        
}

defaultproperties
{
    bAllowedToAttack=false
    bIgnoreNotifies=true
    bIgnoreStepAside=true
}