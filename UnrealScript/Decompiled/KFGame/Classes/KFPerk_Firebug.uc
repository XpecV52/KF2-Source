/*******************************************************************************
 * KFPerk_Firebug generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_Firebug extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision);

enum EFirebugSkills
{
    EFirebugFullyStocked,
    EFirebugFlarotovCoctail,
    EFirebugFuse,
    EFirebugHeatWave,
    EFirebugZedShrapnel,
    EFirebugNapalm,
    EFirebugRange,
    EFirebugSplashDamage,
    EFirebugCombustion,
    EFirebugScorch,
    EFirebugSkills_MAX
};

var const PerkSkill WeaponDamage;
var const PerkSkill WeaponReload;
var const PerkSkill FireResistance;
var const PerkSkill OwnFireResistance;
var const PerkSkill StartingAmmo;
var const int HeatWaveRadiusSQ;
var const float ShrapnelChance;
var GameExplosion ExplosionTemplate;
var const string ShrapnelExplosionDamageTypeName;
var private const float AssistDoshModifier;

function ApplySkillsToPawn()
{
    super.ApplySkillsToPawn();
    if(MyPRI != none)
    {
        MyPRI.bExtraFireRange = IsRangeActive();
        MyPRI.bSplashActive = IsSplashDamageActive();
    }
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType, optional int HitZoneIdx)
{
    local KFWeapon KFW;
    local float TempDamage;

    TempDamage = float(InDamage);
    if(DamageCauser != none)
    {
        KFW = GetWeaponFromDamageCauser(DamageCauser);
    }
    if(((KFW != none) && IsWeaponOnPerk(KFW)) || (DamageType != none) && IsDamageTypeOnPerk(DamageType))
    {
        TempDamage *= (GetPassiveValue(WeaponDamage, CurrentLevel));
    }
    InDamage = Round(TempDamage);
}

simulated function float GetReloadRateScale(KFWeapon KFW)
{
    if(IsWeaponOnPerk(KFW))
    {
        return 1 - (GetPassiveValue(WeaponReload, CurrentLevel));
    }
    return 1;
}

function ModifyDamageTaken(out int InDamage, optional class<DamageType> DamageType, optional Controller InstigatedBy)
{
    local float TempDamage;
    local PerkSkill UsedResistance;

    TempDamage = float(InDamage);
    if(ClassIsChildOf(DamageType, Class'KFDT_Fire'))
    {
        UsedResistance = (((InstigatedBy != none) && InstigatedBy == OwnerPC) ? OwnFireResistance : FireResistance);
        TempDamage *= (float(1) - (GetPassiveValue(UsedResistance, CurrentLevel)));
    }
    InDamage = Round(TempDamage);
}

simulated function ModifySpareAmmoAmount(KFWeapon KFW, out int PrimarySpareAmmo, const optional out STraderItem TraderItem)
{
    local float TempSpareAmmoAmount;
    local class<KFPerk> WeaponPerkClass;

    if(KFW == none)
    {
        WeaponPerkClass = TraderItem.AssociatedPerkClass;        
    }
    else
    {
        WeaponPerkClass = KFW.AssociatedPerkClass;
    }
    if(IsWeaponOnPerk(KFW, WeaponPerkClass))
    {
        if((KFW != none) && IsFullyStockedActive())
        {
            PrimarySpareAmmo = KFW.MaxSpareAmmo[0] - KFW.AmmoCount[0];            
        }
        else
        {
            TempSpareAmmoAmount = float(PrimarySpareAmmo);
            TempSpareAmmoAmount *= (float(1) + GetStartingAmmoPercent(CurrentLevel));
            PrimarySpareAmmo = Round(TempSpareAmmoAmount);
        }
    }
}

simulated function MaximizeSpareAmmoAmount(class<KFPerk> WeaponPerkClass, out int PrimarySpareAmmo, int MaxPrimarySpareAmmo)
{
    if(WeaponPerkClass == default.Class)
    {
        if(IsFullyStockedActive())
        {
            PrimarySpareAmmo = MaxPrimarySpareAmmo;
        }
    }
}

private static final simulated function float GetStartingAmmoPercent(int Level)
{
    return default.StartingAmmo.Increment * float(FFloor(float(Level) / 5));
}

function ModifyDoTScaler(out float DoTScaler, optional class<KFDamageType> KFDT)
{
    if(IsFuseActive() && IsDamageTypeOnPerk(KFDT))
    {
        DoTScaler *= (GetSkillValue(PerkSkills[2]));
    }
}

function bool InHeatRange(KFPawn KFP)
{
    return VSizeSq(OwnerPawn.Location - KFP.Location) <= float(HeatWaveRadiusSQ);
}

function bool CanSpreadNapalm()
{
    return IsNapalmActive();
}

function bool CouldBeZedShrapnel(class<KFDamageType> KFDT)
{
    return (IsZedShrapnelActive() || IsCombustionSelected()) && IsDamageTypeOnPerk(KFDT);
}

simulated function float GetSplashDamageModifier()
{
    return ((IsSplashDamageActive()) ? GetSkillValue(PerkSkills[7]) : 1);
}

simulated function bool ShouldShrapnel()
{
    return IsCombustionActive() || IsZedShrapnelActive() && FRand() <= default.ShrapnelChance;
}

static function GameExplosion GetExplosionTemplate()
{
    return default.ExplosionTemplate;
}

static function class<KFDamageType> GetShrapnelDamageTypeClass()
{
    local class<KFDamageType> DamageTypeClass;

    DamageTypeClass = class<KFDamageType>(DynamicLoadObject(default.ShrapnelExplosionDamageTypeName, Class'Class'));
    return DamageTypeClass;
}

simulated function float GetZedTimeModifier(KFWeapon W)
{
    local name StateName;

    if(GetScorchActive() && IsWeaponOnPerk(W))
    {
        StateName = W.GetStateName();
        if(ZedTimeModifyingStates.Find(StateName != -1)
        {
            return GetSkillValue(PerkSkills[9]);
        }
    }
    return 0;
}

function float GetStumblePowerModifier(optional KFPawn KFP, optional class<KFDamageType> DamageType, optional out float CooldownModifier, optional byte BodyPart)
{
    if((IsHeatWaveActive() && IsDamageTypeOnPerk(DamageType)) && InHeatRange(KFP))
    {
        CooldownModifier = GetSkillValue(PerkSkills[3]);
        return 1000;
    }
    CooldownModifier = 1;
    return 1;
}

private final simulated function bool IsFullyStockedActive()
{
    return PerkSkills[0].bActive;
}

simulated function bool IsFlarotovActive()
{
    return PerkSkills[1].bActive;
}

private final simulated function bool IsFuseActive()
{
    return PerkSkills[2].bActive;
}

private final simulated function bool IsHeatWaveActive()
{
    return PerkSkills[3].bActive;
}

private final simulated function bool IsZedShrapnelActive()
{
    return PerkSkills[4].bActive;
}

private final simulated function bool IsNapalmActive()
{
    return PerkSkills[5].bActive;
}

simulated function bool IsRangeActive()
{
    return PerkSkills[6].bActive;
}

private final simulated function bool IsSplashDamageActive()
{
    return PerkSkills[7].bActive;
}

private final simulated function bool IsCombustionSelected()
{
    return PerkSkills[8].bActive;
}

private final simulated function bool IsCombustionActive()
{
    return PerkSkills[8].bActive && WorldInfo.TimeDilation < 1;
}

private final simulated function bool GetScorchActive()
{
    return PerkSkills[9].bActive && WorldInfo.TimeDilation < 1;
}

private final simulated function bool IsScorchActive()
{
    return PerkSkills[9].bActive;
}

static simulated function int GetCrawlerKillXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

static simulated function int GetBloatKillXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

static function ModifyAssistDosh(out int EarnedDosh)
{
    local float TempDosh;

    TempDosh = float(EarnedDosh);
    TempDosh *= GetAssistDoshModifer();
    EarnedDosh = Round(TempDosh);
}

private static final function float GetAssistDoshModifer()
{
    return default.AssistDoshModifier;
}

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round(((GetPassiveValue(default.WeaponDamage, Level)) * float(100)) - float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.WeaponReload, Level)) * float(100))) $ "%";
    PassiveValues[2] = string(Round((GetPassiveValue(default.FireResistance, Level)) * float(100))) $ "%";
    PassiveValues[3] = string(Round((GetPassiveValue(default.OwnFireResistance, Level)) * float(100))) $ "%";
    PassiveValues[4] = string(Round(GetStartingAmmoPercent(Level) * float(100))) $ "%";
    Increments[0] = ((("[" @ string(int(default.WeaponDamage.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = ((("[" @ string(int(default.WeaponReload.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[2] = (((((("[" @ string(int(default.FireResistance.StartingValue * float(100)))) $ "%") @ "+") @ string(int(default.FireResistance.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[3] = (((((("[" @ string(int(default.OwnFireResistance.StartingValue * float(100)))) $ "%") @ "+") @ string(int(default.OwnFireResistance.Increment * float(100)))) @ "%") @ default.LevelString) @ "]";
    Increments[4] = ((("[" @ string(int(default.StartingAmmo.Increment * float(100)))) $ "% / 5") @ default.LevelString) @ "]";
}

simulated function LogPerkSkills()
{
    super.LogPerkSkills();
    if(bLogPerk)
    {
        LogInternal("PASSIVE PERKS");
        LogInternal(("-WeaponDamage:" @ string((GetPassiveValue(default.WeaponDamage, GetLevel())) - float(1))) $ "%");
        LogInternal(("-WeaponReload:" @ string(GetPassiveValue(default.WeaponReload, GetLevel()))) $ "%");
        LogInternal(("-FireResistance:" @ string(GetPassiveValue(default.FireResistance, GetLevel()))) $ "%");
        LogInternal(("-OwnFireResistance:" @ string(GetPassiveValue(default.OwnFireResistance, GetLevel()))) $ "%");
        LogInternal(("-Ammo:" @ string(GetStartingAmmoPercent(GetLevel()))) $ "%");
        LogInternal("Skill Tree");
        LogInternal("-FullyStoked:" @ string(PerkSkills[0].bActive));
        LogInternal("-FlarotovCoctail:" @ string(PerkSkills[1].bActive));
        LogInternal("-Fuse:" @ string(PerkSkills[2].bActive));
        LogInternal("-HeatWave:" @ string(PerkSkills[3].bActive));
        LogInternal("-ZedShrapnel:" @ string(PerkSkills[4].bActive));
        LogInternal("-Napalm:" @ string(PerkSkills[5].bActive));
        LogInternal("-Range:" @ string(PerkSkills[6].bActive));
        LogInternal(("-SplashDamage:" @ string(PerkSkills[7].bActive)) @ string(GetSplashDamageModifier()));
        LogInternal("-Combustion:" @ string(PerkSkills[8].bActive));
        LogInternal("-Scorch:" @ string(PerkSkills[9].bActive));
    }
}

defaultproperties
{
    WeaponDamage=(Name="Weapon Damage",Increment=0.01,Rank=0,StartingValue=1,MaxValue=1.25,ModifierValue=0,IconPath="",bActive=false)
    WeaponReload=(Name="Weapon Reload Speed",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    FireResistance=(Name="Fire Resistance",Increment=0.02,Rank=0,StartingValue=0.3,MaxValue=0.8,ModifierValue=0,IconPath="",bActive=false)
    OwnFireResistance=(Name="Own fire Resistance",Increment=0.03,Rank=0,StartingValue=0.25,MaxValue=1,ModifierValue=0,IconPath="",bActive=false)
    StartingAmmo=(Name="Starting Ammo",Increment=0.05,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    HeatWaveRadiusSQ=90000
    ShrapnelChance=0.2
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'FX_Explosions_ARCH.FX_Combustion_Explosion'
        Damage=10
        DamageRadius=200
        ExplosionSound=AkEvent'WW_WEP_EXP_Grenade_Frag.Play_WEP_EXP_Grenade_Frag_Explosion'
        CamShake=KFCameraShake'FX_CameraShake_Arch.Misc_Explosions.Perk_ShrapnelCombustion'
    object end
    // Reference: KFGameExplosion'Default__KFPerk_Firebug.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    ShrapnelExplosionDamageTypeName="KFGameContent.KFDT_Explosive_Shrapnel"
    AssistDoshModifier=2
    ProgressStatID=30
    PerkBuildStatID=31
    SecondaryXPModifier[0]=2
    SecondaryXPModifier[1]=3
    SecondaryXPModifier[2]=3
    SecondaryXPModifier[3]=5
    PerkName="Firebug"
    Passives(0)=(Title="Perk Weapon Damage",Description="Perk weapon damage increased by %x%",IconPath="")
    Passives(1)=(Title="Perk Weapon Reload",Description="Perk weapon reload speed increased by %x%",IconPath="")
    Passives(2)=(Title="Resist Zed Fire Damage",Description="%x% resistance to fire damage",IconPath="")
    Passives(3)=(Title="Immunity to your own Fire",Description="%x% resistance to personal fire damage",IconPath="")
    Passives(4)=(Title="Starting Ammo",Description="%x% more starting ammo",IconPath="")
    SkillCatagories[0]="Supplies"
    SkillCatagories[1]="Spicy"
    SkillCatagories[2]="Burn"
    SkillCatagories[3]="Flame"
    SkillCatagories[4]="Advanced Training"
    EXPAction1="Dealing Firebug weapon damage"
    EXPAction2="Killing Crawlers with Firebug weapons"
    PerkIcon=Texture2D'UI_PerkIcons_TEX.UI_PerkIcon_Firebug'
    PerkSkills(0)=(Name="FullyStocked",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_FullyStocked",bActive=false)
    PerkSkills(1)=(Name="FlarotovCoctail",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_FlarotovCocktail",bActive=false)
    PerkSkills(2)=(Name="Fuse",Increment=0,Rank=0,StartingValue=1.7,MaxValue=1.7,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_Fuse",bActive=false)
    PerkSkills(3)=(Name="HeatWave",Increment=0,Rank=0,StartingValue=1,MaxValue=1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_HeatWave",bActive=false)
    PerkSkills(4)=(Name="ZedShrapnel",Increment=0,Rank=0,StartingValue=1.2,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_ZedShrapnel",bActive=false)
    PerkSkills(5)=(Name="Napalm",Increment=0,Rank=0,StartingValue=1.5,MaxValue=1.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_Napalm",bActive=false)
    PerkSkills(6)=(Name="Range",Increment=0,Rank=0,StartingValue=0.3,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_Range",bActive=false)
    PerkSkills(7)=(Name="SplashDamage",Increment=0,Rank=0,StartingValue=2,MaxValue=2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_SplashDamage",bActive=false)
    PerkSkills(8)=(Name="Combustion",Increment=0,Rank=0,StartingValue=1.03,MaxValue=1.03,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_Combustion",bActive=false)
    PerkSkills(9)=(Name="Scorch",Increment=0,Rank=0,StartingValue=0.9,MaxValue=0.9,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Firebug.UI_Talents_Firebug_Scorch",bActive=false)
    ZedTimeModifyingStates(0)=WeaponFiring
    ZedTimeModifyingStates(1)=WeaponBurstFiring
    ZedTimeModifyingStates(2)=WeaponSingleFiring
    ZedTimeModifyingStates(3)=SprayingFire
    PrimaryWeaponDef=Class'KFWeapDef_CaulkBurn'
    KnifeWeaponDef=Class'KFWeapDef_Knife_Firebug'
    GrenadeWeaponDef=Class'KFWeapDef_Grenade_Firebug'
    HitAccuracyHandicap=-2
    HeadshotAccuracyHandicap=5
}