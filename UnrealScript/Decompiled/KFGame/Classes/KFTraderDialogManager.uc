/*******************************************************************************
 * KFTraderDialogManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFTraderDialogManager extends Actor
    notplaceable
    hidecategories(Navigation);

struct TraderDialogCoolDownInfo
{
    var int EventID;
    var int Priority;
    var float EndTime;

    structdefaultproperties
    {
        EventID=0
        Priority=0
        EndTime=0
    }
};

var bool bEnabled;
var transient array<TraderDialogCoolDownInfo> Cooldowns;
var transient class<KFTraderVoiceGroupBase> TraderVoiceGroupClass;
var transient TraderDialogEventInfo ActiveEventInfo;
var float FewZedsDeadPct;
var float ManyZedsDeadPct;
var float FarFromTraderDistance;
var float NeedHealPct;
var float TeammateNeedsHealPct;
var int ShareDoshAmount;
var int LowDoshAmount;
var float WaveClearDialogDelay;
var int DelayedWaveClearEventID;

simulated function EndOfDialogTimer()
{
    local TraderDialogCoolDownInfo CoolDownInfo;

    CoolDownInfo.EventID = ActiveEventInfo.EventID;
    CoolDownInfo.Priority = ActiveEventInfo.Priority;
    CoolDownInfo.EndTime = WorldInfo.TimeSeconds + ActiveEventInfo.Cooldown;
    Cooldowns.AddItem(CoolDownInfo;
    ActiveEventInfo.AudioCue = none;
}

simulated function bool DialogIsCoolingDown(int EventID)
{
    local int CoolDownIndex;

    CoolDownIndex = Cooldowns.Find('EventID', EventID;
    if(CoolDownIndex == -1)
    {
        return false;
    }
    if(Cooldowns[CoolDownIndex].EndTime <= WorldInfo.TimeSeconds)
    {
        Cooldowns.Remove(CoolDownIndex, 1;
        return false;
    }
    return true;
}

simulated function bool ShouldDialogPlay(int EventID)
{
    local float PercentChance;

    PercentChance = TraderVoiceGroupClass.default.DialogEvents[EventID].Chance;
    if(PercentChance >= 1)
    {
        return true;
    }
    if(FRand() <= PercentChance)
    {
        return true;
    }
    return false;
}

simulated function PlayDialog(int EventID, Controller C, optional bool bInterrupt)
{
    local KFPawn_Human KFPH;

    bInterrupt = false;
    if(WorldInfo.NetMode == NM_DedicatedServer)
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Tried to play on dedicated server.");
        return;
    }
    if(C == none)
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Controller is null.");
        return;
    }
    if(!C.IsLocalController())
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Controller is not local");
        return;
    }
    if(!bEnabled || TraderVoiceGroupClass == none)
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Manager is disabled or trader voice group class is none.");
        return;
    }
    if((EventID < 0) || EventID >= 274)
    {
        LogInternal((("Failed to play dialog id " $ string(EventID)) $ ". Event id is outside of range of 0 and ") $ string(274 - 1));
        return;
    }
    if((C.Pawn == none) || !C.Pawn.IsAliveAndWell())
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Controller's pawn is either null or dead.");
        return;
    }
    if((ActiveEventInfo.AudioCue != none) && !bInterrupt)
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". There is already another audio cue going and we can't interrupt.");
        return;
    }
    if(DialogIsCoolingDown(EventID))
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Event id is still cooling down.");
        return;
    }
    if(!ShouldDialogPlay(EventID))
    {
        LogInternal(("Failed to play dialog id " $ string(EventID)) $ ". Failed random chance to play.");
        return;
    }
    KFPH = KFPawn_Human(C.Pawn);
    if(KFPH != none)
    {
        if(bInterrupt)
        {
            KFPH.StopTraderDialog();
        }
        ActiveEventInfo = TraderVoiceGroupClass.default.DialogEvents[EventID];
        KFPH.PlayTraderDialog(ActiveEventInfo.AudioCue);
        SetTimer(ActiveEventInfo.AudioCue.Duration, false, 'EndOfDialogTimer');
    }
}

static function PlayGlobalDialog(int EventID, WorldInfo WI, optional bool bInterrupt)
{
    local Controller C;
    local KFPlayerController KFPC;

    bInterrupt = false;
    foreach WI.AllControllers(Class'Controller', C)
    {
        if(C.bIsPlayer)
        {
            KFPC = KFPlayerController(C);
            if(KFPC == none)
            {
                continue;                
            }
            if(KFPC.IsLocalController())
            {
                KFPC.PlayTraderDialog(EventID, bInterrupt);
                continue;
            }
            KFPC.ClientPlayTraderDialog(EventID, bInterrupt);
        }        
    }    
}

static function PlayGlobalWaveProgressDialog(int ZedsRemaining, int ZedsTotal, WorldInfo WI)
{
    local float ZedDeadPct, PrevZedDeadPct;

    if(ZedsTotal == 0)
    {
        return;
    }
    ZedDeadPct = 1 - (float(ZedsRemaining) / float(ZedsTotal));
    PrevZedDeadPct = 1 - (float(ZedsRemaining + 1) / float(ZedsTotal));
    if((PrevZedDeadPct < default.ManyZedsDeadPct) && ZedDeadPct >= default.ManyZedsDeadPct)
    {
        PlayGlobalDialog(1, WI);        
    }
    else
    {
        if((PrevZedDeadPct < default.FewZedsDeadPct) && ZedDeadPct >= default.FewZedsDeadPct)
        {
            PlayGlobalDialog(0, WI);
        }
    }
}

simulated function PlayOpenTraderDialog(int WaveNum, int WaveMax, Controller C)
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((KFGRI != none) && KFGRI.IsBossWaveNext())
    {
        PlayDialog(9, C);        
    }
    else
    {
        if(((KFGRI != none) && KFGRI.bEndlessMode) && KFGRI.IsBossWave())
        {
            PlayDialog(256 + Clamp(WaveNum / 5, 0, 14), C);            
        }
        else
        {
            PlayDialog(2, C);
        }
    }
}

static function PlayApproachTraderDialog(Controller C)
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(C);
    if(KFPC == none)
    {
        return;
    }
    if(KFPC.IsLocalController())
    {
        KFPC.PlayTraderDialog(4);        
    }
    else
    {
        KFPC.ClientPlayTraderDialog(4);
    }
}

simulated function PlayCloseTraderDialog(Controller C)
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(C.WorldInfo.GRI);
    if((KFGRI == none) || !KFGRI.bEndlessMode)
    {
        PlayDialog(3, C);
    }
}

simulated function AddRandomOption(int OptionID, out byte NumOptions, out int BestOptionID)
{
    local TraderDialogEventInfo NewOptionEventInfo, BestOptionEventInfo;

    if((OptionID < 0) || TraderVoiceGroupClass == none)
    {
        return;
    }
    if(BestOptionID >= 0)
    {
        NewOptionEventInfo = TraderVoiceGroupClass.default.DialogEvents[OptionID];
        BestOptionEventInfo = TraderVoiceGroupClass.default.DialogEvents[BestOptionID];
        if(NewOptionEventInfo.Priority < BestOptionEventInfo.Priority)
        {
            NumOptions = 0;            
        }
        else
        {
            if(NewOptionEventInfo.Priority > BestOptionEventInfo.Priority)
            {
                return;
            }
        }
    }
    ++ NumOptions;
    if(FRand() <= (1 / float(NumOptions)))
    {
        BestOptionID = OptionID;
    }
}

simulated function PlayTraderTickDialog(int RemainingTime, Controller C, WorldInfo WI)
{
    local Pawn P;
    local KFPawn_Human KFPH, Teammate;
    local KFGameReplicationInfo KFGRI;
    local KFPlayerController KFPC;
    local KFMapInfo KFMI;
    local int BestOptionID;
    local byte NumOptions;

    if(!default.bEnabled)
    {
        return;
    }
    if(RemainingTime == 30)
    {
        PlayDialog(7, C);
        return;
    }
    if(RemainingTime == 10)
    {
        PlayDialog(8, C);
        return;
    }
    KFPC = KFPlayerController(C);
    if(KFPC == none)
    {
        return;
    }
    if(KFPC.bClientTraderMenuOpen)
    {
        return;
    }
    KFPH = KFPawn_Human(C.Pawn);
    if(KFPH == none)
    {
        return;
    }
    BestOptionID = -1;
    if(KFPH.GetHealthPercentage() < default.NeedHealPct)
    {
        AddRandomOption(15, NumOptions, BestOptionID);
    }
    KFGRI = KFGameReplicationInfo(WI.GRI);
    if((KFGRI != none) && KFGRI.OpenedTrader != none)
    {
        KFMI = KFMapInfo(WorldInfo.GetMapInfo());
        if(((KFMI == none) || KFMI.SubGameType != 1) && VSize(KFGRI.OpenedTrader.Location - KFPH.Location) >= default.FarFromTraderDistance)
        {
            AddRandomOption(10, NumOptions, BestOptionID);
        }
    }
    P = WI.PawnList;
    J0x2CB:

    if(P != none)
    {
        if(KFPH == P)
        {            
        }
        else
        {
            if(P.GetTeamNum() != 0)
            {                
            }
            else
            {
                if(!P.IsAliveAndWell())
                {                    
                }
                else
                {
                    Teammate = KFPawn_Human(P);
                    if(Teammate == none)
                    {                        
                    }
                    else
                    {
                        if(Teammate.GetHealthPercentage() < default.TeammateNeedsHealPct)
                        {
                            AddRandomOption(16, NumOptions, BestOptionID);
                            goto J0x3EF;
                        }
                    }
                }
            }
        }
        P = P.NextPawn;
        goto J0x2CB;
    }
    J0x3EF:

    if(BestOptionID != -1)
    {
        PlayDialog(BestOptionID, C);
    }
}

simulated function PlayBeginTraderTimeDialog(KFPlayerController KFPC)
{
    if(!default.bEnabled)
    {
        return;
    }
    if(KFPC.PWRI.bDiedDuringWave)
    {
        PlayPlayerDiedLastWaveDialog(KFPC);        
    }
    else
    {
        PlayPlayerSurvivedLastWaveDialog(KFPC);
    }
}

simulated function PlayPlayerDiedLastWaveDialog(KFPlayerController KFPC)
{
    local int BestOptionID;
    local byte NumOptions;

    BestOptionID = -1;
    if(KFPC.PWRI.ClassKilledByLastWave != none)
    {
        AddRandomOption(KFPC.PWRI.ClassKilledByLastWave.static.GetTraderAdviceID(), NumOptions, BestOptionID);
    }
    if(KFPC.MatchStats.DeathStreak >= 3)
    {
        AddRandomOption(24, NumOptions, BestOptionID);        
    }
    else
    {
        AddRandomOption(20, NumOptions, BestOptionID);
    }
    PlayWaveClearDialog(BestOptionID, KFPC);
}

simulated function PlayPlayerSurvivedLastWaveDialog(KFPlayerController KFPC)
{
    local int BestOptionID;
    local byte NumOptions;
    local KFPawn_Human KFPH;

    BestOptionID = -1;
    KFPH = KFPawn_Human(KFPC.Pawn);
    if(KFPH == none)
    {
        return;
    }
    if(KFPC.MatchStats.GetHealGivenInWave() >= 200)
    {
        AddRandomOption(18, NumOptions, BestOptionID);
    }
    if(KFPC.MatchStats.SurvivedStreak >= 3)
    {
        AddRandomOption(23, NumOptions, BestOptionID);
    }
    if(KFPC.MatchStats.GetDamageTakenInWave() == 0)
    {
        AddRandomOption(26, NumOptions, BestOptionID);
    }
    if(KFPH.HealthMax != KFPH.Health)
    {
        if(KFPC.MatchStats.GetDamageTakenInWave() < (KFPH.HealthMax / 2))
        {
            AddRandomOption(28, NumOptions, BestOptionID);
        }
        if(KFPC.MatchStats.GetDamageTakenInWave() >= 300)
        {
            AddRandomOption(29, NumOptions, BestOptionID);
        }
        if((KFPC.MatchStats.GetDamageTakenInWave() >= 100) && KFPC.MatchStats.GetHealReceivedInWave() >= 100)
        {
            AddRandomOption(30, NumOptions, BestOptionID);
        }
    }
    if(KFPC.PWRI.bKilledFleshpoundLastWave)
    {
        AddRandomOption(32, NumOptions, BestOptionID);
    }
    if(KFPC.PWRI.bKilledScrakeLastWave)
    {
        AddRandomOption(33, NumOptions, BestOptionID);
    }
    if(KFPH.PlayerReplicationInfo.Score < float(default.LowDoshAmount))
    {
        AddRandomOption(34, NumOptions, BestOptionID);
    }
    if(!IsSoloHumanPlayer())
    {
        if(KFPC.PWRI.bKilledMostZeds)
        {
            AddRandomOption(21, NumOptions, BestOptionID);
        }
        if(KFPC.PWRI.bEarnedMostDosh)
        {
            AddRandomOption(31, NumOptions, BestOptionID);
        }
        if(KFPC.PWRI.bBestTeammate)
        {
            AddRandomOption(22, NumOptions, BestOptionID);
        }
        if(KFPH.PlayerReplicationInfo.Score >= float(default.ShareDoshAmount))
        {
            AddRandomOption(17, NumOptions, BestOptionID);
        }
        if(KFPC.PWRI.bAllSurvivedLastWave)
        {
            AddRandomOption(25, NumOptions, BestOptionID);            
        }
        else
        {
            if(KFPC.PWRI.bSomeSurvivedLastWave)
            {
                AddRandomOption(27, NumOptions, BestOptionID);                
            }
            else
            {
                if(KFPC.PWRI.bOneSurvivedLastWave)
                {
                    AddRandomOption(19, NumOptions, BestOptionID);
                }
            }
        }
    }
    PlayWaveClearDialog(BestOptionID, KFPC);
}

function bool IsSoloHumanPlayer()
{
    local int I, NumHumans;
    local PlayerReplicationInfo PRI;

    if(WorldInfo.NetMode == NM_Standalone)
    {
        return true;
    }
    I = 0;
    J0x36:

    if((I < WorldInfo.GRI.PRIArray.Length) && NumHumans < 2)
    {
        PRI = WorldInfo.GRI.PRIArray[I];
        if(((PRI != none) && !PRI.bOnlySpectator) && PRI.GetTeamNum() == 0)
        {
            ++ NumHumans;
        }
        ++ I;
        goto J0x36;
    }
    return NumHumans == 1;
}

simulated function PlayWaveClearDialog(int EventID, Controller C)
{
    if((C != none) && C.IsLocalController())
    {
        DelayedWaveClearEventID = EventID;
        SetTimer(WaveClearDialogDelay, false, 'WaveClearDialogTimer');
    }
}

simulated function WaveClearDialogTimer()
{
    PlayDialog(DelayedWaveClearEventID, WorldInfo.GetALocalPlayerController());
}

simulated function PlayOpenTraderMenuDialog(KFPlayerController KFPC)
{
    local KFPawn_Human KFPH;
    local KFGameReplicationInfo KFGRI;
    local float ArmorPct, AmmoMax, AmmoPct;
    local int BestOptionID;
    local byte NumOptions;

    BestOptionID = -1;
    KFPH = KFPawn_Human(KFPC.Pawn);
    if(KFPH != none)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if((KFGRI == none) || KFGRI.WaveNum > 1)
        {
            ArmorPct = float(KFPH.Armor) / float(KFPH.MaxArmor);
            if(ArmorPct <= 0)
            {
                AddRandomOption(11, NumOptions, BestOptionID);                
            }
            else
            {
                if(ArmorPct < 0.3)
                {
                    AddRandomOption(12, NumOptions, BestOptionID);
                }
            }
        }
        AmmoMax = float(KFPH.MyKFWeapon.GetMaxAmmoAmount(0));
        if(AmmoMax > float(0))
        {
            AmmoPct = KFPH.MyKFWeapon.GetAmmoPercentage(0);
            if(AmmoPct < 0.3)
            {
                AddRandomOption(13, NumOptions, BestOptionID);
            }
        }
        if(!KFPH.MyKFWeapon.HasAmmo(4))
        {
            AddRandomOption(14, NumOptions, BestOptionID);
        }
    }
    PlayDialog(BestOptionID, KFPC);
}

simulated function PlayObjectiveDialog(Controller C, int ObjDialogID)
{
    PlayDialog(ObjDialogID, C);
}

function PlayLastManStandingDialog(WorldInfo WI)
{
    PlayGlobalDialog(154, WI);
}

simulated function PlaySelectItemDialog(Controller C, bool bTooExpensive, bool bTooHeavy)
{
    local int BestOptionID;
    local byte NumOptions;

    BestOptionID = -1;
    if(bTooExpensive)
    {
        AddRandomOption(5, NumOptions, BestOptionID);
    }
    if(bTooHeavy)
    {
        AddRandomOption(6, NumOptions, BestOptionID);
    }
    PlayDialog(BestOptionID, C);
}

static function BroadcastEndlessStartWaveDialog(int WaveNum, WorldInfo WI)
{
    local int EventID;

    if(WaveNum > 100)
    {
        EventID = 255;        
    }
    else
    {
        EventID = 155 + (WaveNum - 1);
    }
    PlayGlobalDialog(EventID, WI);
}

static function BroadcastEndlessSpecialWaveDialog(int ModeIndex, WorldInfo WI)
{
    local int EventID;

    EventID = 271 + (ModeIndex % 3);
    PlayGlobalDialog(EventID, WI);
}

defaultproperties
{
    bEnabled=true
    ActiveEventInfo=(EventID=0,AudioCue=none,Priority=0,Cooldown=0,Chance=1)
    FewZedsDeadPct=0.2
    ManyZedsDeadPct=0.8
    FarFromTraderDistance=50000
    NeedHealPct=0.5
    TeammateNeedsHealPct=0.5
    ShareDoshAmount=2000
    LowDoshAmount=200
    WaveClearDialogDelay=7
    CollisionType=ECollisionType.COLLIDE_CustomDefault
}