/*******************************************************************************
 * KFAffliction_BigHead generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAffliction_BigHead extends KFAfflictionAdvanced;

var() float EffectAppliedByStack;
var() float ApplyEffectVel;
var() float RemoveEffectVel;
var() array<float> StackDamageExplosion;
var() byte MaxStack;
var() byte MaxStackBobbleHead;
var transient byte CurrentStack;
var transient byte CurrentMaxStack;
var transient float CurrentEffectApplied;
var transient bool bIsBobbleHeadMode;
var transient bool bIsShrunkenHeads;

function Init(KFPawn P, KFAfflictionManager.EAfflictionType Type, KFPerk InstigatorPerk)
{
    local KFGameReplicationInfo KFGRI;
    local int EndlessWeeklyWaveIdx;

    super.Init(P, Type, InstigatorPerk);
    KFGRI = KFGameReplicationInfo(P.WorldInfo.GRI);
    if(KFGRI != none)
    {
        bIsBobbleHeadMode = (KFGRI.bIsWeeklyMode && KFGRI.CurrentWeeklyIndex == 3) || KFGRI.IsWeeklyWave(EndlessWeeklyWaveIdx) && EndlessWeeklyWaveIdx == 3;
        bIsShrunkenHeads = KFGRI.bIsWeeklyMode && KFGRI.CurrentWeeklyIndex == 15;
        if(bIsBobbleHeadMode)
        {
            MaxStack = MaxStackBobbleHead;
        }
    }
    CurrentMaxStack = ((bIsBobbleHeadMode) ? MaxStackBobbleHead : MaxStack);
}

function Activate(optional class<KFDamageType> DamageType)
{
    DamageType = none;
    if(CurrentStack < CurrentMaxStack)
    {
        super.Activate();
        if(!bIsBobbleHeadMode && !bIsShrunkenHeads)
        {
            ++ CurrentStack;
        }
    }
}

event Tick(float DeltaTime)
{
    local float Target;

    if(PawnOwner.bPlayedDeath)
    {
        CurrentStrength = 0;
        DeActivate();
        return;
    }
    if(bIsBobbleHeadMode || bIsShrunkenHeads)
    {
        return;
    }
    Target = float(CurrentStack) * EffectAppliedByStack;
    if(CurrentEffectApplied != Target)
    {
        if(CurrentEffectApplied < Target)
        {
            CurrentEffectApplied = FMin(CurrentEffectApplied + (DeltaTime * ApplyEffectVel), Target);            
        }
        else
        {
            CurrentEffectApplied = FMax(CurrentEffectApplied - (DeltaTime * ApplyEffectVel), 0);
        }
        PawnOwner.IntendedHeadScale = 1 + CurrentEffectApplied;
        PawnOwner.SetHeadScale(1 + CurrentEffectApplied, PawnOwner.CurrentHeadScale);
        PawnOwner.bNetDirty = true;
    }
    if(CurrentStrength <= 0)
    {
        CurrentStack = 0;
        CurrentStrength = 0.1;
        if(CurrentEffectApplied <= 0)
        {
            CurrentStrength = 0;
            DeActivate();
        }
    }
}

function float GetDamageModifier()
{
    local float Damage;

    Damage = ((bIsBobbleHeadMode) ? StackDamageExplosion[MaxStackBobbleHead] : StackDamageExplosion[CurrentStack]);
    CurrentStack = 0;
    return Damage;
}

defaultproperties
{
    EffectAppliedByStack=0.3
    ApplyEffectVel=1
    RemoveEffectVel=1
    StackDamageExplosion(0)=0
    StackDamageExplosion(1)=150
    StackDamageExplosion(2)=300
    StackDamageExplosion(3)=500
    StackDamageExplosion(4)=0
    StackDamageExplosion(5)=0
    MaxStack=3
    MaxStackBobbleHead=1
    DissipationRate=10
    bNeedsTick=true
}