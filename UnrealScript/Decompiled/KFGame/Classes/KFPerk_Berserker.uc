/*******************************************************************************
 * KFPerk_Berserker generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_Berserker extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision);

enum EBerserkPerkSkills
{
    EBerserkerPoisonResistance,
    EBerserkerSonicResistance,
    EBerserkerVampire,
    EBerserkerFortitude,
    EBerserkerFuriousDefender,
    EBerserkerBlock,
    EBerserkerParry,
    EBerserkerSmash,
    EBerserkerSpartan,
    EBerserkerMenace,
    EBerserkPerkSkills_MAX
};

var const PerkSkill BerserkerDamage;
var const PerkSkill MeleeAttackSpeed;
var const PerkSkill Movement;
var const PerkSkill DamageResistance;
var const PerkSkill NightVision;
var private const int SmallRadiusSizeSQ;
var private bool bBlockActive;
var private bool bParryActive;
var private const float ParryDuration;
var private const float ParrySpeed;
var private const float FuriousDefenderSpeed;
var AkEvent ParrySkillSoundModeStart;
var AkEvent ParrySkillSoundModeStop;

function ApplySkillsToPawn()
{
    super.ApplySkillsToPawn();
    if(OwnerPawn != none)
    {
        OwnerPawn.bMovesFastInZedTime = IsFastInZedTime();
    }
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType)
{
    local KFWeapon MyKFWeapon;
    local float TempDamage;

    TempDamage = float(InDamage);
    if(DamageCauser != none)
    {
        if(DamageCauser.IsA('Weapon'))
        {
            MyKFWeapon = KFWeapon(DamageCauser);            
        }
        else
        {
            if(DamageCauser.IsA('Projectile'))
            {
                MyKFWeapon = KFWeapon(DamageCauser.Owner);
            }
        }
        if(((MyKFWeapon != none) && IsWeaponOnPerk(MyKFWeapon)) || IsDamageTypeOnPerk(DamageType))
        {
            TempDamage += ((float(InDamage) * (GetPassiveValue(BerserkerDamage, CurrentLevel))) - float(InDamage));
            if(MyKFWeapon.IsMeleeWeapon() && GetBlockActive())
            {
                TempDamage += ((float(InDamage) * (float(1) + (GetSkillValue(PerkSkills[5])))) - float(InDamage));
                bBlockActive = false;
            }
        }
    }
    InDamage = Round(TempDamage);
}

simulated function ModifyMeleeAttackSpeed(out float InDuration, KFWeapon KFW)
{
    local float TempDuration;

    if((KFW == none) || !KFW.IsMeleeWeapon())
    {
        return;
    }
    TempDuration = InDuration;
    TempDuration -= (InDuration * (GetPassiveValue(MeleeAttackSpeed, CurrentLevel)));
    if(GetParryActive())
    {
        TempDuration -= (InDuration * ParrySpeed);
    }
    if(IsFuriousDefenderActive())
    {
        TempDuration -= (InDuration * (GetSkillValue(PerkSkills[4])));
    }
    if(IsSpartanActive())
    {
        TempDuration -= (InDuration * (GetSkillValue(PerkSkills[8])));
    }
    InDuration = TempDuration;
}

simulated function ModifySpeed(out float Speed)
{
    local KFWeapon MyKFWeapon;
    local KFInventoryManager KFIM;

    MyKFWeapon = GetOwnerWeapon();
    if((MyKFWeapon == none) && CheckOwnerPawn())
    {
        KFIM = KFInventoryManager(OwnerPawn.InvManager);
        if((KFIM != none) && KFIM.PendingWeapon != none)
        {
            MyKFWeapon = KFWeapon(KFIM.PendingWeapon);
        }
    }
    if((MyKFWeapon != none) && MyKFWeapon.IsMeleeWeapon())
    {
        Speed *= (GetPassiveValue(Movement, CurrentLevel));
    }
}

function ModifyDamageTaken(out int InDamage, optional class<DamageType> DamageType, optional Controller InstigatedBy)
{
    local float TempDamage;

    TempDamage = float(InDamage);
    if(IsPoisonResistanceActive() && ClassIsChildOf(DamageType, Class'KFDT_Toxic'))
    {
        TempDamage -= (float(InDamage) * (GetSkillValue(PerkSkills[0])));
    }
    if(IsSonicResistanceActive() && ClassIsChildOf(DamageType, Class'KFDT_Sonic'))
    {
        TempDamage -= (float(InDamage) * (GetSkillValue(PerkSkills[1])));
    }
    TempDamage -= (float(InDamage) * (GetPassiveValue(DamageResistance, CurrentLevel)));
    InDamage = Round(TempDamage);
}

function ModifyBloatBileDoT(out float DoTScaler)
{
    super.ModifyBloatBileDoT(DoTScaler);
    DoTScaler -= (GetSkillValue(PerkSkills[0]));
}

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round(((GetPassiveValue(default.BerserkerDamage, Level)) * float(100)) - float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.MeleeAttackSpeed, Level)) * float(100))) $ "%";
    PassiveValues[2] = string(Round(((GetPassiveValue(default.Movement, Level)) - float(1)) * float(100))) $ "%";
    PassiveValues[3] = string(Round((GetPassiveValue(default.DamageResistance, Level)) * float(100))) $ "%";
    PassiveValues[4] = "";
    PassiveValues[5] = "";
    Increments[0] = ((("[" @ ("25% + " @ string(int(default.BerserkerDamage.Increment * float(100))))) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = (((("[" @ "5% + .") @ string(int(default.MeleeAttackSpeed.Increment * float(1000)))) $ "% /") @ default.LevelString) @ "]";
    Increments[2] = (((("[" @ "10% + .") $ string(int(default.Movement.Increment * float(1000)))) $ "% /") @ default.LevelString) @ "]";
    Increments[3] = ((("[" @ string(int(default.DamageResistance.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[4] = "";
    Increments[5] = "";
}

static final function float GetPoisonResistance()
{
    return GetSkillValue(default.PerkSkills[0]);
}

function AddVampireHealth(KFPlayerController KFPC, class<DamageType> DT)
{
    if(((IsDamageTypeOnPerk(class<KFDamageType>(DT))) && IsVampireActive()) && KFPC.Pawn != none)
    {
        KFPC.Pawn.HealDamage(int(GetSkillValue(PerkSkills[2])), KFPC, Class'KFDT_Healing', false, false);
    }
}

function ModifyHealth(out int InHealth)
{
    if(IsFortitudeActive())
    {
        InHealth *= (GetSkillValue(PerkSkills[3]));
    }
}

function ModifyHardAttackDamage(out int InDamage)
{
    local float TempDamage;

    TempDamage = float(InDamage);
    if(IsFuriousDefenderActive())
    {
        TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[4])));
    }
    if(IsSmashActive())
    {
        TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[7])));
    }
    InDamage = ((TempDamage != float(InDamage)) ? Round(TempDamage) : InDamage);
}

function ModifyLightAttackDamage(out int InDamage)
{
    local float TempDamage;

    TempDamage = float(InDamage);
    if(IsParryActive())
    {
        TempDamage *= (float(1) + (GetSkillValue(PerkSkills[6])));
    }
    if(IsSmashActive())
    {
        TempDamage *= (float(1) + (GetSkillValue(PerkSkills[7])));
    }
    InDamage = ((TempDamage != float(InDamage)) ? Round(TempDamage) : InDamage);
}

simulated function ParryTimer()
{
    bParryActive = false;
    SetTickIsDisabled(true);
    if(OwnerPC != none)
    {
        OwnerPC.SetPerkEffect(false);
    }
    OwnerPC.PlaySoundBase(ParrySkillSoundModeStop, true);
}

function ModifyScreamEffectDuration(out float InDuration)
{
    if(IsSonicResistanceActive())
    {
        InDuration *= (float(1) - (GetSkillValue(PerkSkills[1])));
    }
}

function float GetKnockdownPowerModifier(optional class<DamageType> DamageType)
{
    local KFWeapon KFW;

    KFW = GetOwnerWeapon();
    if(IsSmashActive() && KFW.IsMeleeWeapon())
    {
        return 1 + (GetSkillValue(PerkSkills[7]));
    }
    return 1;
}

function float GetStumblePowerModifier(optional KFPawn KFP, optional class<KFDamageType> DamageType, optional out float CooldownModifier)
{
    if(IsMenaceActive())
    {
        return 1 + (GetSkillValue(PerkSkills[9]));
    }
    return 1;
}

function float GetStunPowerModifier(optional class<DamageType> DamageType, optional byte HitZoneIdx)
{
    if(IsMenaceActive() && HitZoneIdx == 0)
    {
        return 1 + (GetSkillValue(PerkSkills[9]));
    }
    return 1;
}

static function int GetSmallRadiusKillXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

static function int GetSmallRadiusKillDistanceSQ()
{
    return default.SmallRadiusSizeSQ;
}

function bool CanEarnSmallRadiusKillXP(class<DamageType> DT)
{
    return (IsDamageTypeOnPerk(class<KFDamageType>(DT))) || IsBackupDamageTypeOnPerk(DT);
}

function bool ShouldKnockdown()
{
    return IsSpartanActive();
}

simulated function float GetSirenScreamStrength()
{
    if(IsSonicResistanceActive())
    {
        return GetSkillValue(PerkSkills[1]);
    }
    return super.GetSirenScreamStrength();
}

private final simulated function bool IsPoisonResistanceActive()
{
    return PerkSkills[0].bActive;
}

private final simulated function bool IsSonicResistanceActive()
{
    return PerkSkills[1].bActive;
}

private final function bool IsVampireActive()
{
    return PerkSkills[2].bActive;
}

private final function bool IsFortitudeActive()
{
    return PerkSkills[3].bActive;
}

simulated function SetSuccessfullBlock()
{
    if(IsBlockActive())
    {
        bBlockActive = true;
    }
}

simulated function bool IsBlockActive()
{
    return PerkSkills[5].bActive;
}

simulated function bool GetBlockActive()
{
    return (IsBlockActive()) && bBlockActive;
}

simulated function SetSuccessfullParry()
{
    if(IsParryActive())
    {
        bParryActive = true;
        SetTickIsDisabled(false);
        SetTimer(ParryDuration, false, 'ParryTimer');
        if(OwnerPC != none)
        {
            OwnerPC.SetPerkEffect(true);
        }
        OwnerPC.PlaySoundBase(ParrySkillSoundModeStart, true);
    }
}

simulated function bool IsParryActive()
{
    return PerkSkills[6].bActive;
}

simulated event bool GetParryActive()
{
    return (IsParryActive()) && bParryActive;
}

simulated function bool HasNightVision()
{
    return true;
}

private final simulated function bool IsFuriousDefenderActive()
{
    return PerkSkills[4].bActive;
}

private final function bool IsSmashActive()
{
    return PerkSkills[7].bActive;
}

function bool CanNotBeGrabbed()
{
    return true;
}

private final simulated event bool IsSpartanActive()
{
    return PerkSkills[8].bActive && WorldInfo.TimeDilation < 1;
}

private final simulated event bool IsMenaceActive()
{
    return PerkSkills[9].bActive && WorldInfo.TimeDilation < 1;
}

function bool IsFastInZedTime()
{
    return PerkSkills[9].bActive || PerkSkills[8].bActive;
}

simulated function class<EmitterCameraLensEffectBase> GetPerkLensEffect(class<KFDamageType> dmgType)
{
    if(ClassIsChildOf(dmgType, Class'KFDT_Toxic'))
    {
        return ((IsPoisonResistanceActive()) ? dmgType.default.AltCameraLensEffectTemplate : super.GetPerkLensEffect(dmgType));
    }
    return super.GetPerkLensEffect(dmgType);
}

simulated function LogPerkSkills()
{
    super.LogPerkSkills();
    if(bLogPerk)
    {
        LogInternal("PASSIVE PERKS");
        LogInternal(("-Berserker Damage:" @ string(((GetPassiveValue(BerserkerDamage, CurrentLevel)) - float(1)) * float(100))) $ "%");
        LogInternal(("-MeleeAttackSpeed:" @ string((GetPassiveValue(default.MeleeAttackSpeed, CurrentLevel)) * float(100))) $ "%");
        LogInternal(("-Movement:" @ string(((GetPassiveValue(default.Movement, CurrentLevel)) - float(1)) * float(100))) $ "%");
        LogInternal(("-DamageResistance:" @ string((GetPassiveValue(default.DamageResistance, CurrentLevel)) * float(100))) $ "%");
        LogInternal("Skill Tree");
        LogInternal("PoisonResistance" @ string(PerkSkills[0].bActive));
        LogInternal("SonicResistance" @ string(PerkSkills[1].bActive));
        LogInternal("Vampire" @ string(PerkSkills[2].bActive));
        LogInternal("Fortitude" @ string(PerkSkills[3].bActive));
        LogInternal("FuriousDefender" @ string(PerkSkills[4].bActive));
        LogInternal("Block" @ string(PerkSkills[5].bActive));
        LogInternal("Parry" @ string(PerkSkills[6].bActive));
        LogInternal("Smash" @ string(PerkSkills[7].bActive));
        LogInternal("Spartan" @ string(PerkSkills[8].bActive));
        LogInternal("Menace" @ string(PerkSkills[9].bActive));
    }
}

defaultproperties
{
    BerserkerDamage=(Name="Berserker Damage",Increment=0.01,Rank=0,StartingValue=1.25,MaxValue=1.5,ModifierValue=0,IconPath="",bActive=false)
    MeleeAttackSpeed=(Name="Melee Attack Speed",Increment=0.008,Rank=0,StartingValue=0.05,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    Movement=(Name="Movement",Increment=0.006,Rank=0,StartingValue=1.1,MaxValue=1.25,ModifierValue=0,IconPath="",bActive=false)
    DamageResistance=(Name="Damage Resistance",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    NightVision=(Name="Night Vision",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="",bActive=false)
    SmallRadiusSizeSQ=40000
    ParryDuration=4
    ParrySpeed=0.15
    FuriousDefenderSpeed=0.1
    ParrySkillSoundModeStart=AkEvent'WW_GLO_Runtime.Play_Beserker_Parry_Mode'
    ParrySkillSoundModeStop=AkEvent'WW_GLO_Runtime.Stop_Beserker_Parry_Mode'
    ProgressStatID=10
    PerkBuildStatID=11
    SecondaryXPModifier[0]=6
    SecondaryXPModifier[1]=8
    SecondaryXPModifier[2]=10
    SecondaryXPModifier[3]=14
    PerkName="Berserker"
    Passives(0)=(Title="Perk Weapon Damage",Description="25% increase in Berserker weapon damage, plus x%x each level",IconPath="")
    Passives(1)=(Title="Melee Attack Speed",Description="0% increase in melee attack speed, increasing x%x per level",IconPath="")
    Passives(2)=(Title="Melee Move Speed",Description="10% faster movement when wielding a melee weapon, plus x%x each level",IconPath="")
    Passives(3)=(Title="Damage Resistance",Description="Incoming damage reduced by %x%",IconPath="")
    Passives(4)=(Title="+Night Vision Capability",Description="Flashlights - AND Night Vision Goggles",IconPath="")
    Passives(5)=(Title="+Clots cannot grab you",Description="Clots can't hold on to a Berserker.",IconPath="")
    SkillCatagories[0]="Resistance"
    SkillCatagories[1]="Survival"
    SkillCatagories[2]="Close Combat"
    SkillCatagories[3]="Power"
    SkillCatagories[4]="Advanced Training"
    EXPAction1="Dealing Berserker weapon damage"
    EXPAction2="Kill zeds near a player with a Perk weapon"
    PerkSkills(0)=(Name="PoisonResistance",Increment=0,Rank=0,StartingValue=0.4,MaxValue=0.4,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_PoisonResistance",bActive=false)
    PerkSkills(1)=(Name="SonicResistance",Increment=0,Rank=0,StartingValue=0.4,MaxValue=0.4,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_SonicResistance",bActive=false)
    PerkSkills(2)=(Name="Vampire",Increment=0,Rank=0,StartingValue=3,MaxValue=3,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Vampire",bActive=false)
    PerkSkills(3)=(Name="Fortitude",Increment=0,Rank=0,StartingValue=2,MaxValue=2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Fortitude",bActive=false)
    PerkSkills(4)=(Name="FuriousDefender",Increment=0,Rank=0,StartingValue=0.15,MaxValue=0.15,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_FuriousDefender",bActive=false)
    PerkSkills(5)=(Name="Block",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Block",bActive=false)
    PerkSkills(6)=(Name="Parry",Increment=0,Rank=0,StartingValue=0.15,MaxValue=0.15,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Parry",bActive=false)
    PerkSkills(7)=(Name="Smash",Increment=0,Rank=0,StartingValue=0.3,MaxValue=0.3,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Smash",bActive=false)
    PerkSkills(8)=(Name="Spartan",Increment=0,Rank=0,StartingValue=0.5,MaxValue=0.5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Spartan",bActive=false)
    PerkSkills(9)=(Name="Menace",Increment=0,Rank=0,StartingValue=1,MaxValue=1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.berserker.UI_Talents_Berserker_Menace",bActive=false)
    PrimaryWeaponClassName="KFGameContent.KFWeap_Blunt_Crovel"
    MeleeWeaponClassName="KFGameContent.KFWeap_Knife_Berserker"
    GrenadeClassName="KFGameContent.KFProj_EMPGrenade"
}