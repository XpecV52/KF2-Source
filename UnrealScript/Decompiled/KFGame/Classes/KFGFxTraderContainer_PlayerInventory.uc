/*******************************************************************************
 * KFGFxTraderContainer_PlayerInventory generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxTraderContainer_PlayerInventory extends KFGFxObject_Container within GFxMoviePlayer;

enum EButtonStates
{
    BS_Enabled,
    BS_MaxCapacity,
    BS_CantAfford,
    BS_MAX
};

var KFGFxMenu_Trader MyTraderMenu;
var int CostPerAutofillCycle;
var const localized string FillString;
var const localized string MagString;
var const localized string AutoFillString;
var const localized string BuyGrenadeString;
var const localized string ChangePerkString;
var const localized string ArmorString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    MyTraderMenu = KFGFxMenu_Trader(NewParentMenu);
    LocalizeContainer();
    UpdateLock();
}

function LocalizeContainer()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("autoFill", AutoFillString);
    LocalizedObject.SetString("armorLabel", FillString);
    LocalizedObject.SetString("fillLabel", FillString);
    LocalizedObject.SetString("magLabel", MagString);
    LocalizedObject.SetString("changePerk", ChangePerkString);
    LocalizedObject.SetString("grenadeLabel", BuyGrenadeString);
    SetObject("localizeStrings", LocalizedObject);
}

function UpdateLock()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        SetBool("perkChangeLocked", KFPC.bPlayerUsedUpdatePerk);
    }
}

function RefreshPlayerInventory()
{
    local byte SlotIndex;
    local float PricePerRound;
    local int AmmoCount, MaxAmmoCount, MagSize, PricePerMag, FillAmmoCost, BlocksRequired,
	    AutoFillCost;

    local string ItemString, TextureLocation;
    local GFxObject InfoSlot, MagSlot, FillSlot, InfoDataProvider, FillDataProvider, MagDataProvider;

    local SItemInformation ItemInfo;

    InfoDataProvider = Outer.CreateArray();
    FillDataProvider = Outer.CreateArray();
    MagDataProvider = Outer.CreateArray();
    SetArmorInfo(MyTraderMenu.ArmorItem, AutoFillCost);
    SetGrenadeInfo(MyTraderMenu.GrenadeItem, AutoFillCost);
    SlotIndex = 0;
    J0xE9:

    if(SlotIndex < MyTraderMenu.OwnedItemList.Length)
    {
        InfoSlot = Outer.CreateObject("Object");
        MagSlot = Outer.CreateObject("Object");
        FillSlot = Outer.CreateObject("Object");
        ItemInfo = MyTraderMenu.OwnedItemList[SlotIndex];
        ItemString = string(ItemInfo.DefaultItem.ClassName);
        FillAmmoCost = GetFillAmmoCost(ItemInfo);
        if(!ItemInfo.bIsSecondaryAmmo)
        {
            TextureLocation = ItemInfo.DefaultItem.TextureLocation;
            AmmoCount = ItemInfo.SpareAmmoCount;
            MaxAmmoCount = ItemInfo.MaxSpareAmmo;
            MagSize = ItemInfo.MagazineCapacity;
            PricePerMag = ItemInfo.AmmoPricePerMagazine;
            PricePerRound = ((MagSize > 0) ? float(PricePerMag) / float(MagSize) : 0);
            BlocksRequired = ItemInfo.DefaultItem.BlocksRequired;
            SetItemInfo(InfoSlot, ItemString, "ItemName", TextureLocation, AmmoCount, MaxAmmoCount, BlocksRequired);
            SetMagInfo(MagSlot, AmmoCount, MaxAmmoCount, MagSize, PricePerMag, PricePerRound, FillAmmoCost);
            SetFillInfo(FillSlot, AmmoCount, MaxAmmoCount, PricePerRound, FillAmmoCost, AutoFillCost);            
        }
        else
        {
            TextureLocation = ItemInfo.DefaultItem.SecondaryAmmoTexturePath;
            AmmoCount = ItemInfo.SecondaryAmmoCount;
            MaxAmmoCount = ItemInfo.MaxSecondaryAmmoCount;
            MagSize = ItemInfo.DefaultItem.SecondaryAmmoMagSize;
            PricePerMag = ItemInfo.DefaultItem.SecondaryAmmoMagPrice;
            PricePerRound = ((MagSize > 0) ? float(PricePerMag) / float(MagSize) : 0);
            BlocksRequired = -1;
            SetItemInfo(InfoSlot, ItemString, "SecondaryAmmo", TextureLocation, AmmoCount, MaxAmmoCount, BlocksRequired);
            SetMagInfo(MagSlot, AmmoCount, MaxAmmoCount, MagSize, PricePerMag, PricePerRound, FillAmmoCost);
            SetFillInfo(FillSlot, AmmoCount, MaxAmmoCount, PricePerRound, FillAmmoCost, AutoFillCost);
        }
        InfoDataProvider.SetElementObject(SlotIndex, InfoSlot);
        MagDataProvider.SetElementObject(SlotIndex, MagSlot);
        FillDataProvider.SetElementObject(SlotIndex, FillSlot);
        ++ SlotIndex;
        goto J0xE9;
    }
    SetAutoFill(AutoFillCost);
    SetObject("itemData", InfoDataProvider);
    SetObject("magData", MagDataProvider);
    SetObject("fillData", FillDataProvider);
}

function SetArmorInfo(out SItemInformation ArmorInfo, out int AutoFillCost)
{
    local GFxObject SlotObject;
    local int FillCost;

    FillCost = GetFillArmorCost(ArmorInfo);
    SlotObject = Outer.CreateObject("Object");
    SlotObject.SetInt("cost", FillCost);
    SlotObject.SetString("itemName", Localize(string(ArmorInfo.DefaultItem.ClassName), "ItemName", "KFGameContent"));
    SlotObject.SetString("itemSource", "img://" $ ArmorInfo.DefaultItem.TextureLocation);
    SlotObject.SetString("itemAmmo", (string(ArmorInfo.SpareAmmoCount) $ "/") $ string(ArmorInfo.MaxSpareAmmo));
    SlotObject.SetInt("buttonState", GetButtonState(float(ArmorInfo.AmmoPricePerMagazine), ArmorInfo.SpareAmmoCount, ArmorInfo.MaxSpareAmmo));
    SetObject("armorInfo", SlotObject);
    AutoFillCost += FillCost;
}

function SetGrenadeInfo(out SItemInformation GrenadeInfo, out int AutoFillCost)
{
    local GFxObject SlotObject;
    local int FillCost, MagCost, ButtonState, AmmoPricePerMagazine;

    AmmoPricePerMagazine = GrenadeInfo.AmmoPricePerMagazine;
    SlotObject = Outer.CreateObject("Object");
    SlotObject.SetString("itemSource", "img://" $ GrenadeInfo.DefaultItem.TextureLocation);
    SlotObject.SetString("itemName", Localize(string(GrenadeInfo.DefaultItem.ClassName), "ItemName", "KFGameContent"));
    FillCost = GetFillGrenadeCost(GrenadeInfo);
    MagCost = ((GrenadeInfo.SpareAmmoCount != GrenadeInfo.MaxSpareAmmo) ? GrenadeInfo.AmmoPricePerMagazine : 0);
    SlotObject.SetInt("magCost", MagCost);
    SlotObject.SetInt("fillCost", FillCost);
    SlotObject.SetString("itemAmmo", (string(GrenadeInfo.SpareAmmoCount) $ "/") $ string(GrenadeInfo.MaxSpareAmmo));
    ButtonState = GetButtonState(float(AmmoPricePerMagazine), GrenadeInfo.SpareAmmoCount, GrenadeInfo.MaxSpareAmmo);
    SlotObject.SetInt("magButtonState", ButtonState);
    SlotObject.SetInt("fillButtonState", ButtonState);
    SetObject("grenadeInfo", SlotObject);
    AutoFillCost += FillCost;
}

function SetItemInfo(out GFxObject InfoSlot, string ItemString, string ItemKeyString, string TextureLocation, int AmmoCount, int MaxAmmoCount, int BlocksRequired)
{
    local string ItemTexPath;

    InfoSlot.SetString("itemName", Localize(ItemString, ItemKeyString, "KFGameContent"));
    InfoSlot.SetString("itemAmmo", (string(AmmoCount) $ "/") $ string(MaxAmmoCount));
    InfoSlot.SetInt("itemWeight", BlocksRequired);
    ItemTexPath = "img://" $ TextureLocation;
    InfoSlot.SetString("itemSource", ItemTexPath);
}

function SetMagInfo(out GFxObject MagSlot, int AmmoCount, int MaxAmmoCount, int AmmoMagSize, int PricePerMag, float PricePerRound, int FillAmmoCost)
{
    local int MagCost;
    local bool bBuyPartialMag;

    bBuyPartialMag = (AmmoCount + AmmoMagSize) > MaxAmmoCount;
    MagCost = ((bBuyPartialMag) ? FillAmmoCost : PricePerMag);
    MagSlot.SetString("label", MagString);
    MagSlot.SetInt("buttonValue", MagCost);
    MagSlot.SetInt("buttonState", GetButtonState(PricePerRound, AmmoCount, MaxAmmoCount));
}

function SetFillInfo(out GFxObject FillSlot, int AmmoCount, int MaxAmmoCount, float PricePerRound, int FillAmmoCost, out int AutoFillCost)
{
    FillSlot.SetString("label", FillString);
    FillSlot.SetInt("buttonValue", FillAmmoCost);
    FillSlot.SetInt("buttonState", GetButtonState(PricePerRound, AmmoCount, MaxAmmoCount));
    AutoFillCost += FillAmmoCost;
}

function SetAutoFill(int AutoFillCost)
{
    local GFxObject AutoFillObject;

    AutoFillObject = Outer.CreateObject("Object");
    AutoFillObject.SetInt("buttonValue", AutoFillCost);
    AutoFillObject.SetInt("buttonState", GetButtonState(0, 0, AutoFillCost));
    SetObject("autoFillCost", AutoFillObject);
}

function int GetFillAmmoCost(out SItemInformation ItemInfo)
{
    local int AmmoCount, MaxAmmoCount;
    local float MissingAmmo, PricePerMag, MagSize, PricePerRound;

    if(ItemInfo.bIsSecondaryAmmo)
    {
        AmmoCount = ItemInfo.SecondaryAmmoCount;
        MaxAmmoCount = ItemInfo.MaxSecondaryAmmoCount;
        PricePerMag = float(ItemInfo.DefaultItem.SecondaryAmmoMagPrice);
        MagSize = float(ItemInfo.DefaultItem.SecondaryAmmoMagSize);        
    }
    else
    {
        AmmoCount = ItemInfo.SpareAmmoCount;
        MaxAmmoCount = ItemInfo.MaxSpareAmmo;
        PricePerMag = float(ItemInfo.AmmoPricePerMagazine);
        MagSize = float(ItemInfo.DefaultItem.MagazineCapacity);
    }
    if(MagSize <= float(0))
    {
        return 0;
    }
    MissingAmmo = float(MaxAmmoCount - AmmoCount);
    PricePerRound = PricePerMag / MagSize;
    return FCeil(MissingAmmo * PricePerRound);
}

function int GetFillGrenadeCost(out SItemInformation ItemInfo)
{
    local int AmmoCount, MaxAmmoCount;
    local float MissingAmmo, PricePerMag;

    AmmoCount = ItemInfo.SpareAmmoCount;
    MaxAmmoCount = ItemInfo.MaxSpareAmmo;
    PricePerMag = float(ItemInfo.AmmoPricePerMagazine);
    MissingAmmo = float(MaxAmmoCount - AmmoCount);
    return FCeil(MissingAmmo * PricePerMag);
}

function int GetFillArmorCost(out SItemInformation ArmorInfo)
{
    local float ArmorPercentage, FillCost, ArmorPricePerPercent;

    ArmorPercentage = float(ArmorInfo.MaxSpareAmmo - ArmorInfo.SpareAmmoCount);
    ArmorPricePerPercent = float(ArmorInfo.AmmoPricePerMagazine);
    FillCost = float(FCeil(ArmorPercentage * ArmorPricePerPercent));
    return int(FillCost);
}

function int GetButtonState(float Price, int SpareAmmoCount, int MaxSpareAmmoCount)
{
    if(SpareAmmoCount >= MaxSpareAmmoCount)
    {
        return 1;        
    }
    else
    {
        if(float(MyTraderMenu.TotalDosh) < Price)
        {
            return 2;
        }
    }
    return 0;
}

function float FillAmmo(out SItemInformation ItemInfo, optional bool bIsGrenade)
{
    local float MissingAmmo, MagSize, FillAmmoCost, PricePerMag, PricePerRound;

    if(ItemInfo.bIsSecondaryAmmo)
    {
        MagSize = float(ItemInfo.DefaultItem.SecondaryAmmoMagSize);
        PricePerMag = float(ItemInfo.DefaultItem.SecondaryAmmoMagPrice);
        MissingAmmo = float(ItemInfo.DefaultItem.MaxSecondaryAmmoCount - ItemInfo.SecondaryAmmoCount);
        FillAmmoCost = float(GetFillAmmoCost(ItemInfo));        
    }
    else
    {
        MagSize = float(ItemInfo.DefaultItem.MagazineCapacity);
        PricePerMag = float(ItemInfo.AmmoPricePerMagazine);
        MissingAmmo = float(ItemInfo.MaxSpareAmmo - ItemInfo.SpareAmmoCount);
        FillAmmoCost = float(((bIsGrenade) ? GetFillGrenadeCost(ItemInfo) : GetFillAmmoCost(ItemInfo)));
    }
    if(FillAmmoCost > float(MyTraderMenu.TotalDosh))
    {
        PricePerRound = PricePerMag / MagSize;
        MissingAmmo = float(FFloor(float(MyTraderMenu.TotalDosh) / PricePerRound));
        FillAmmoCost = float(FCeil(MissingAmmo * PricePerRound));
    }
    if(ItemInfo.bIsSecondaryAmmo)
    {
        ItemInfo.SecondaryAmmoCount += int(MissingAmmo);        
    }
    else
    {
        ItemInfo.SpareAmmoCount += int(MissingAmmo);
    }
    if(bIsGrenade)
    {
        MyTraderMenu.BoughtAmmo(int(MissingAmmo), int(FillAmmoCost), 3);        
    }
    else
    {
        MyTraderMenu.BoughtAmmo(int(MissingAmmo), int(FillAmmoCost), 0, ItemInfo.DefaultItem.ClassName, ItemInfo.DefaultItem.AssociatedPerkClass, ItemInfo.bIsSecondaryAmmo);
    }
    return FillAmmoCost;
}

function int FillArmor(out SItemInformation ArmorInfo)
{
    local float ArmorPricePerPercent, FillCost;
    local int PercentArmorBought;

    FillCost = float(GetFillArmorCost(ArmorInfo));
    PercentArmorBought = ArmorInfo.MaxSpareAmmo - ArmorInfo.SpareAmmoCount;
    if(FillCost > float(MyTraderMenu.TotalDosh))
    {
        ArmorPricePerPercent = float(ArmorInfo.AmmoPricePerMagazine);
        PercentArmorBought = int(float(MyTraderMenu.TotalDosh) / ArmorPricePerPercent);
        FillCost = ArmorPricePerPercent * float(PercentArmorBought);
    }
    ArmorInfo.SpareAmmoCount = int(FMin(float(ArmorInfo.SpareAmmoCount + PercentArmorBought), float(ArmorInfo.MaxSpareAmmo)));
    MyTraderMenu.BoughtAmmo(PercentArmorBought, int(FillCost), 1);
    return int(FillCost);
}

function int BuyMagazine(int ItemSlotIndex)
{
    local SItemInformation ItemInfo;
    local int MagCost;

    ItemInfo = MyTraderMenu.OwnedItemList[ItemSlotIndex];
    if(ItemInfo.bIsSecondaryAmmo)
    {
        MagCost = BuySecondaryAmmoMag(ItemInfo);        
    }
    else
    {
        MagCost = BuyItemMagazine(ItemInfo);
    }
    MyTraderMenu.OwnedItemList[ItemSlotIndex] = ItemInfo;
    return MagCost;
}

function int BuyGrenade(out SItemInformation ItemInfo)
{
    local int MagAmmoCost;

    MagAmmoCost = 0;
    if((ItemInfo.MaxSpareAmmo - ItemInfo.SpareAmmoCount) > 0)
    {
        MagAmmoCost = ItemInfo.AmmoPricePerMagazine;
        ItemInfo.SpareAmmoCount += 1;
        MyTraderMenu.BoughtAmmo(1, MagAmmoCost, 3);
    }
    return MagAmmoCost;
}

function int BuyItemMagazine(out SItemInformation ItemInfo)
{
    local int MagAmmoCost, MagSpaceAvailable;

    MagAmmoCost = 0;
    MagSpaceAvailable = ItemInfo.MaxSpareAmmo - ItemInfo.SpareAmmoCount;
    if(MagSpaceAvailable > 0)
    {
        MagAmmoCost = ItemInfo.AmmoPricePerMagazine;
        if((MagSpaceAvailable < ItemInfo.DefaultItem.MagazineCapacity) || MyTraderMenu.TotalDosh < MagAmmoCost)
        {
            return int(FillAmmo(ItemInfo));
        }
        ItemInfo.SpareAmmoCount += ItemInfo.DefaultItem.MagazineCapacity;
        ItemInfo.SpareAmmoCount = Min(ItemInfo.MaxSpareAmmo, ItemInfo.SpareAmmoCount);
        MyTraderMenu.BoughtAmmo(ItemInfo.DefaultItem.MagazineCapacity, MagAmmoCost, 0, ItemInfo.DefaultItem.ClassName, ItemInfo.DefaultItem.AssociatedPerkClass, ItemInfo.bIsSecondaryAmmo);
    }
    return MagAmmoCost;
}

function int BuySecondaryAmmoMag(out SItemInformation ItemInfo)
{
    local int MagAmmoCost, MagSpaceAvailable, AddedAmmo;

    MagAmmoCost = 0;
    MagSpaceAvailable = ItemInfo.MaxSecondaryAmmoCount - ItemInfo.SecondaryAmmoCount;
    if(MagSpaceAvailable > 0)
    {
        MagAmmoCost = ItemInfo.DefaultItem.SecondaryAmmoMagPrice;
        if((MagSpaceAvailable < ItemInfo.DefaultItem.SecondaryAmmoMagSize) || MyTraderMenu.TotalDosh < MagAmmoCost)
        {
            return int(FillAmmo(ItemInfo));
        }
        AddedAmmo = ItemInfo.DefaultItem.SecondaryAmmoMagSize;
        ItemInfo.SecondaryAmmoCount += AddedAmmo;
        ItemInfo.SecondaryAmmoCount = Min(ItemInfo.MaxSecondaryAmmoCount, ItemInfo.SecondaryAmmoCount);
        MyTraderMenu.BoughtAmmo(AddedAmmo, MagAmmoCost, 0, ItemInfo.DefaultItem.ClassName, ItemInfo.DefaultItem.AssociatedPerkClass, ItemInfo.bIsSecondaryAmmo);
    }
    return MagAmmoCost;
}

function StartAutoFill()
{
    local int AutoFillDosh;
    local bool bBoughtSomething, bLastCycle;

    bLastCycle = false;
    AutoFillDosh = MyTraderMenu.TotalDosh;
    J0x34:

    if(true)
    {
        bBoughtSomething = AutoFillOwnedItems(AutoFillDosh, bLastCycle);
        if(MyTraderMenu.ArmorItem.SpareAmmoCount < MyTraderMenu.ArmorItem.MaxSpareAmmo)
        {
            if(bLastCycle)
            {
                AutoFillDosh -= (FillArmor(MyTraderMenu.ArmorItem));                
            }
            else
            {
                if(AttemptBuyArmorChunk(MyTraderMenu.ArmorItem, AutoFillDosh))
                {
                    bBoughtSomething = true;
                }
            }
        }
        if(MyTraderMenu.GrenadeItem.SpareAmmoCount < MyTraderMenu.GrenadeItem.MaxSpareAmmo)
        {
            if(bLastCycle)
            {
                AutoFillDosh -= int(FillAmmo(MyTraderMenu.GrenadeItem, true));                
            }
            else
            {
                if(AttemptAutoFillOnItem(MyTraderMenu.GrenadeItem, AutoFillDosh, MyTraderMenu.GrenadeItem.AmmoPricePerMagazine))
                {
                    MyTraderMenu.GrenadeItem.AutoFillDosh -= (BuyGrenade(MyTraderMenu.GrenadeItem));
                    bBoughtSomething = true;
                }
            }
        }
        if(bLastCycle)
        {
            goto J0x322;            
        }
        else
        {
            if(!bBoughtSomething)
            {
                if(!bLastCycle)
                {
                    RePoolAutoFillDosh(AutoFillDosh);
                    bLastCycle = true;
                }
            }
        }
        bBoughtSomething = false;
        goto J0x34;
    }
    J0x322:

    ClearAutoFillDosh();
    MyTraderMenu.RefreshItemComponents();
}

function bool AutoFillOwnedItems(out int AutoFillDosh, bool bLastCycle)
{
    local int I, PricePerMag, AmmoCount, MaxAmmoCount;
    local SItemInformation ItemInfo;

    I = 0;
    J0x0B:

    if(I < MyTraderMenu.OwnedItemList.Length)
    {
        ItemInfo = MyTraderMenu.OwnedItemList[I];
        if(ItemInfo.bIsSecondaryAmmo)
        {
            PricePerMag = ItemInfo.DefaultItem.SecondaryAmmoMagPrice;
            AmmoCount = ItemInfo.SecondaryAmmoCount;
            MaxAmmoCount = ItemInfo.MaxSecondaryAmmoCount;            
        }
        else
        {
            PricePerMag = ItemInfo.AmmoPricePerMagazine;
            AmmoCount = ItemInfo.SpareAmmoCount;
            MaxAmmoCount = ItemInfo.MaxSpareAmmo;
        }
        if(AmmoCount < MaxAmmoCount)
        {
            if(bLastCycle)
            {
                AutoFillDosh -= int(FillAmmo(ItemInfo));                
            }
            else
            {
                if(AttemptAutoFillOnItem(ItemInfo, AutoFillDosh, PricePerMag))
                {
                    ItemInfo.AutoFillDosh -= (BuyMagazine(I));
                    MyTraderMenu.OwnedItemList[I].AutoFillDosh = ItemInfo.AutoFillDosh;
                    return true;
                }
            }
            MyTraderMenu.OwnedItemList[I] = ItemInfo;
        }
        ++ I;
        goto J0x0B;
    }
    return false;
}

function bool AttemptAutoFillOnItem(out SItemInformation ItemInfo, out int InAutoFillDosh, int Price)
{
    local int DoshSpent;

    DoshSpent = Min(InAutoFillDosh, CostPerAutofillCycle);
    InAutoFillDosh -= DoshSpent;
    ItemInfo.AutoFillDosh += DoshSpent;
    return ItemInfo.AutoFillDosh >= Price;
}

function bool AttemptBuyArmorChunk(out SItemInformation ArmorInfo, out int InAutoFillDosh)
{
    local float ArmorPricePerPercent, ChunkCost;
    local int PercentArmorBought;

    ArmorPricePerPercent = float(ArmorInfo.AmmoPricePerMagazine);
    PercentArmorBought = 0;
    if(ArmorInfo.SpareAmmoCount < ArmorInfo.MaxSpareAmmo)
    {
        PercentArmorBought = int(float(CostPerAutofillCycle) / ArmorPricePerPercent);
        ChunkCost = ArmorPricePerPercent * float(PercentArmorBought);
        if(float(InAutoFillDosh) < ChunkCost)
        {
            PercentArmorBought = int(float(InAutoFillDosh) / ArmorPricePerPercent);
            ChunkCost = ArmorPricePerPercent * float(PercentArmorBought);
        }
        InAutoFillDosh -= int(ChunkCost);
        ArmorInfo.SpareAmmoCount = int(FMin(float(ArmorInfo.SpareAmmoCount + PercentArmorBought), float(ArmorInfo.MaxSpareAmmo)));
        MyTraderMenu.BoughtAmmo(PercentArmorBought, int(ChunkCost), 1);
    }
    return PercentArmorBought > 0;
}

function RePoolAutoFillDosh(out int AutoFillDosh)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < MyTraderMenu.OwnedItemList.Length)
    {
        AutoFillDosh += MyTraderMenu.OwnedItemList[I].AutoFillDosh;
        MyTraderMenu.OwnedItemList[I].AutoFillDosh = 0;
        ++ I;
        goto J0x0C;
    }
    AutoFillDosh += MyTraderMenu.ArmorItem.AutoFillDosh;
    MyTraderMenu.ArmorItem.AutoFillDosh = 0;
    AutoFillDosh += MyTraderMenu.GrenadeItem.AutoFillDosh;
    MyTraderMenu.GrenadeItem.AutoFillDosh = 0;
}

function ClearAutoFillDosh()
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < MyTraderMenu.OwnedItemList.Length)
    {
        MyTraderMenu.OwnedItemList[I].AutoFillDosh = 0;
        ++ I;
        goto J0x0C;
    }
    MyTraderMenu.ArmorItem.AutoFillDosh = 0;
    MyTraderMenu.GrenadeItem.AutoFillDosh = 0;
}

defaultproperties
{
    CostPerAutofillCycle=10
    FillString="FILL"
    MagString="MAG"
    AutoFillString="AUTO FILL"
    BuyGrenadeString="1X"
    ChangePerkString="CHANGE PERK"
    ArmorString="Combat Armor"
}