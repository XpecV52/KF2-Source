/*******************************************************************************
 * KFAnimNotify_Decal generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAnimNotify_Decal extends AnimNotify
    native(Anim)
    editinlinenew
    collapsecategories
    hidecategories(Object);

struct native DecalData
{
    var bool bIsValid;
    /** Material and any other properties that are needed for impact decals */
    var() MaterialInterface DecalMaterial;
    /** Width of the decal */
    var() float Width;
    /** Height of the decal */
    var() float Height;
    /** Thickness of the decal (used to calculate the nearplane/farplane values) */
    var() float Thickness;
    /** Whether to skip this decal entirely when perf is slow */
    var() bool bSkip_ForSlowPerf;

    structdefaultproperties
    {
        bIsValid=false
        DecalMaterial=none
        Width=6
        Height=6
        Thickness=10
        bSkip_ForSlowPerf=false
    }
};

/** Optimization */
var() bool bIgnoreIfActorHidden;
/** Will only trace straight down regardless of bone or socket orientation */
var() bool bOnlyTraceDown;
/** BoneName or SocketName to use */
var() name BoneOrSocketName;
/** Relative Location for Trace Direction */
var() Vector RelativeLocation;
/** Relative Rotation for Trace Direction */
var() Rotator RelativeRotation;
/** How far to trace in the specified direction */
var() float TraceDistance;
/** The material to use for the decal */
var() DecalData Decal;
var editoronly export editinline ArrowComponent MyArrowComponent;

event SpawnDecal(Actor Owner, Vector TraceLocation, Vector TraceDir)
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;
    local TraceHitInfo HitInfo;

    if((Owner.WorldInfo.MyDecalManager != none) && !Owner.WorldInfo.bDropDetail || !Decal.bSkip_ForSlowPerf)
    {
        if(bOnlyTraceDown)
        {
            TraceDir.X = 0;
            TraceDir.Y = 0;
            TraceDir.Z = -1;
        }
        HitActor = Owner.Trace(HitLocation, HitNormal, TraceLocation + (TraceDir * TraceDistance), TraceLocation, false,, HitInfo);
        if(HitActor != none)
        {
            CreateDecal(Owner, Decal, HitActor, HitLocation, HitNormal, HitInfo);
        }
    }
}

simulated function DecalComponent CreateDecal(Actor Owner, const out DecalData outDecalData, Actor HitActor, Vector HitLocation, Vector HitNormal, const out TraceHitInfo HitInfo)
{
    local editinline DecalComponent DC;

    if(Owner.WorldInfo.MyDecalManager != none)
    {
        DC = Owner.WorldInfo.MyDecalManager.SpawnDecal(outDecalData.DecalMaterial, HitLocation, rotator(-HitNormal), outDecalData.Width, outDecalData.Height, outDecalData.Thickness, true);
    }
    return DC;
}

defaultproperties
{
    bIgnoreIfActorHidden=true
    bOnlyTraceDown=true
    TraceDistance=128
    Decal=(bIsValid=false,DecalMaterial=none,Width=6,Height=6,Thickness=10,bSkip_ForSlowPerf=false)
    begin object name=ArrowComponent0 class=ArrowComponent
        bTreatAsASprite=true
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFAnimNotify_Decal.ArrowComponent0'
    MyArrowComponent=ArrowComponent0
}