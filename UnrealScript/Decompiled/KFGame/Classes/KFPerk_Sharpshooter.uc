/*******************************************************************************
 * KFPerk_Sharpshooter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPerk_Sharpshooter extends KFPerk
    native
    config(Game)
    hidecategories(Navigation,Movement,Collision);

enum ESharpshooterPerkSkills
{
    ESharpshooterStationaryAim,
    ESharpshooterTrigger,
    ESharpshooterCrouchAim,
    ESharpshooterStun,
    ESharpshooterRhythmMethod,
    ESharpshooterTacticalReload,
    ESharpshooterScoped,
    ESharpshooterAmmoPouch,
    ESharpshooterZTKnockdown,
    ESharpshooterZTStun,
    ESharpshooterPerkSkills_MAX
};

var const PerkSkill HeadshotDamage;
var const PerkSkill Recoil;
var const PerkSkill WeaponSwitchSpeed;
var protected const AkEvent RhythmMethodSoundReset;
var protected const AkEvent RhythmMethodSoundHit;
var protected const AkEvent RhythmMethodSoundTop;
var protected const name RhytmMethodRTPCName;
var private int HeadShotComboCount;
var private int HeadShotComboCountDisplay;
var private const int MaxHeadShotComboCount;
var private const float CameraViewShakeScale;
var float SkillZedTimeChance;

static simulated function GetPassiveStrings(out array<string> PassiveValues, out array<string> Increments, byte Level)
{
    PassiveValues[0] = string(Round((GetPassiveValue(default.HeadshotDamage, Level)) * float(100))) $ "%";
    PassiveValues[1] = string(Round((GetPassiveValue(default.Recoil, Level)) * float(100))) $ "%";
    PassiveValues[2] = string(Round((GetPassiveValue(default.WeaponSwitchSpeed, Level)) * float(100))) $ "%";
    PassiveValues[3] = "";
    PassiveValues[4] = "";
    PassiveValues[5] = "";
    Increments[0] = ((("[" @ string(int(default.HeadshotDamage.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[1] = ((("[" @ string(int(default.Recoil.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[2] = ((("[" @ string(int(default.WeaponSwitchSpeed.Increment * float(100)))) $ "% /") @ default.LevelString) @ "]";
    Increments[3] = "";
    Increments[4] = "";
    Increments[5] = "";
}

static simulated function int GetHeadshotXP(byte Difficulty)
{
    return default.SecondaryXPModifier[Difficulty];
}

simulated function ModifySpeed(out float Speed)
{
    if(IsTriggerActive())
    {
        Speed *= (1 + PerkSkills[1].MaxValue);
    }
}

simulated function ModifyWeaponSwitchTime(out float ModifiedSwitchTime)
{
    ModifiedSwitchTime *= (1 - (GetPassiveValue(WeaponSwitchSpeed, CurrentLevel)));
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType, optional int HitZoneIdx)
{
    local KFWeapon KFW;
    local float TempDamage;

    TempDamage = float(InDamage);
    if(DamageCauser != none)
    {
        KFW = GetWeaponFromDamageCauser(DamageCauser);
    }
    if(((KFW != none) && IsWeaponOnPerk(KFW)) || (DamageType != none) && IsDamageTypeOnPerk(DamageType))
    {
        if((MyKFPM != none) && HitZoneIdx == 0)
        {
            TempDamage += (float(InDamage) * (GetPassiveValue(HeadshotDamage, CurrentLevel)));
            if(GetScopedActive(KFW))
            {
                TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[6])));
            }
            if((IsZTKnockdownActive()) || IsZTStunActive())
            {
                if(MyKFGI != none)
                {
                    MyKFGI.DramaticEvent(SkillZedTimeChance);
                }
            }
        }
        if((IsStationaryAimActive()) && VSizeSq(OwnerPawn.Velocity) <= float(0))
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[0])));
        }
        if((IsCrouchAimActive()) && OwnerPawn.bIsCrouched)
        {
            TempDamage += (float(InDamage) * (GetSkillValue(PerkSkills[2])));
        }
        if((IsRhythmMethodActive()) && HeadShotComboCount > 0)
        {
            TempDamage += ((float(InDamage) * (GetSkillValue(PerkSkills[4]))) * float(HeadShotComboCount));
        }
    }
    InDamage = FCeil(TempDamage);
}

simulated function ModifyRateOfFire(out float InRate, KFWeapon KFW)
{
    if(IsTriggerActive())
    {
        InRate -= (InRate * PerkSkills[1].StartingValue);
    }
}

simulated function ModifyRecoil(out float CurrentRecoilModifier, KFWeapon KFW)
{
    if(GetScopedActive(KFW))
    {
        CurrentRecoilModifier -= (CurrentRecoilModifier * (GetSkillValue(PerkSkills[6])));
    }
}

simulated event float GetCameraViewShakeModifier(KFWeapon OwnerWeapon)
{
    if(GetScopedActive(OwnerWeapon))
    {
        return GetCameraViewShakeScale();
    }
    return 1;
}

static final simulated function float GetCameraViewShakeScale()
{
    return default.CameraViewShakeScale;
}

simulated function ModifyMaxSpareAmmoAmount(KFWeapon KFW, out int MaxSpareAmmo, const optional out STraderItem TraderItem)
{
    local float TempMaxSpareAmmoAmount;

    if((IsAmmoPouchActive()) && IsWeaponOnPerk(KFW))
    {
        TempMaxSpareAmmoAmount = float(MaxSpareAmmo);
        TempMaxSpareAmmoAmount += (TempMaxSpareAmmoAmount * (GetSkillValue(PerkSkills[7])));
        MaxSpareAmmo = Round(TempMaxSpareAmmoAmount);
    }
}

protected simulated event PostSkillUpdate()
{
    if(IsAmmoPouchActive())
    {
        MaxGrenadeCount = int(float(default.MaxGrenadeCount) + (float(default.MaxGrenadeCount) * (GetSkillValue(PerkSkills[7]))));        
    }
    else
    {
        MaxGrenadeCount = default.MaxGrenadeCount;
    }
    super.PostSkillUpdate();
}

simulated function bool GetUsingTactialReload(KFWeapon KFW)
{
    return (IsTacticalReloadActive()) && IsWeaponOnPerk(KFW);
}

function float GetStunPowerModifier(optional class<DamageType> DamageType, optional byte HitZoneIdx)
{
    if(IsDamageTypeOnPerk(class<KFDamageType>(DamageType)))
    {
        if((HitZoneIdx == 0) && GetZTStunActive())
        {
            return GetSkillValue(PerkSkills[9]);            
        }
        else
        {
            if(IsStunActive())
            {
                return GetSkillValue(PerkSkills[3]);
            }
        }
    }
    return 1;
}

function float GetKnockdownPowerModifier(optional class<DamageType> DamageType, optional byte BodyPart, optional bool bIsSprinting)
{
    bIsSprinting = false;
    if((((WorldInfo.TimeDilation < 1) && BodyPart == 1) && IsZTKnockdownActive()) && IsDamageTypeOnPerk(class<KFDamageType>(DamageType)))
    {
        return GetSkillValue(PerkSkills[8]);
    }
    return 1;
}

function bool IsStationaryAimActive()
{
    return PerkSkills[0].bActive;
}

simulated function bool IsTriggerActive()
{
    return PerkSkills[1].bActive;
}

function bool IsCrouchAimActive()
{
    return PerkSkills[2].bActive;
}

simulated function bool IsStunActive()
{
    return PerkSkills[3].bActive;
}

simulated function bool IsRhythmMethodActive()
{
    return PerkSkills[4].bActive;
}

simulated function bool IsTacticalReloadActive()
{
    return PerkSkills[5].bActive;
}

simulated function bool IsScopedActive()
{
    return PerkSkills[6].bActive;
}

simulated function bool GetScopedActive(KFWeapon KFW)
{
    return ((IsScopedActive()) && KFW != none) && KFW.bUsingSights;
}

simulated function bool IsAmmoPouchActive()
{
    return PerkSkills[7].bActive;
}

simulated function bool IsZTKnockdownActive()
{
    return PerkSkills[8].bActive;
}

simulated function bool GetZTKnockdownActive()
{
    return (IsZTKnockdownActive()) && WorldInfo.TimeDilation < 1;
}

simulated function bool IsZTStunActive()
{
    return PerkSkills[9].bActive;
}

simulated function bool GetZTStunActive()
{
    return (IsZTStunActive()) && WorldInfo.TimeDilation < 1;
}

static function int GetMaxHeadShotsValue()
{
    return default.MaxHeadShotComboCount;
}

function AddToHeadShotCombo(class<KFDamageType> KFDT, KFPawn_Monster KFPM)
{
    if(IsRhythmMethodActive())
    {
        if(IsDamageTypeOnPerk(KFDT))
        {
            ++ HeadShotComboCount;
            ++ HeadShotComboCountDisplay;
            HeadShotComboCount = Min(HeadShotComboCount, MaxHeadShotComboCount);
            HeadShotMessage(byte(HeadShotComboCount), byte(HeadShotComboCountDisplay),, KFPM);            
        }
        else
        {
            SubstractHeadShotCombo();
        }
    }
}

function UpdatePerkHeadShots(ImpactInfo Impact, class<DamageType> DamageType, int NumHit)
{
    local int HitZoneIdx;
    local KFPawn_Monster KFPM;

    KFPM = KFPawn_Monster(Impact.HitActor);
    if(KFPM == none)
    {
        if(NumHit < 1)
        {
            SubstractHeadShotCombo();
        }
        return;
    }
    HitZoneIdx = KFPM.HitZones.Find('ZoneName', Impact.HitInfo.BoneName;
    if((HitZoneIdx == 0) && KFPM.IsAliveAndWell())
    {
        AddToHeadShotCombo(class<KFDamageType>(DamageType), KFPM);        
    }
    else
    {
        if(NumHit < 1)
        {
            SubstractHeadShotCombo();
        }
    }
}

reliable client simulated function HeadShotMessage(byte HeadShotNum, byte DisplayValue, optional bool bMissed, optional KFPawn_Monster KFPM)
{
    local int I;
    local AkEvent TempAkEvent;

    bMissed = false;    
    if(((OwnerPC == none) || OwnerPC.MyGFxHUD == none) || !IsRhythmMethodActive())
    {
        return;
    }
    I = HeadShotNum;
    OwnerPC.UpdateRhythmCounterWidget(DisplayValue, MaxHeadShotComboCount);
    switch(I)
    {
        case 0:
            TempAkEvent = RhythmMethodSoundReset;
            break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            if(!bMissed)
            {
                OwnerPC.ClientSpawnCameraLensEffect(Class'KFCameraLensEmit_RackemHeadShot');
                TempAkEvent = RhythmMethodSoundHit;
            }
            break;
        case 7:
            if(!bMissed)
            {
                OwnerPC.ClientSpawnCameraLensEffect(Class'KFCameraLensEmit_RackemHeadShotPing');
                TempAkEvent = RhythmMethodSoundTop;
                I = 6;
            }
            break;
        default:
            break;
    }
    if(TempAkEvent != none)
    {
        OwnerPC.PlayRMEffect(TempAkEvent, RhytmMethodRTPCName, I);
    }
}

function SubstractHeadShotCombo()
{
    if((IsRhythmMethodActive()) && HeadShotComboCount > 0)
    {
        -- HeadShotComboCount;
        HeadShotComboCountDisplay = HeadShotComboCount;
        HeadShotMessage(byte(HeadShotComboCount), byte(HeadShotComboCountDisplay), true);
    }
}

private reliable server final event ServerResetHeadShotCombo()
{
    SubstractHeadShotCombo();
}

private reliable server final function ServerClearHeadShotsCombo()
{
    HeadShotComboCountDisplay = 0;
    HeadShotComboCount = 0;
    HeadShotMessage(byte(HeadShotComboCount), byte(HeadShotComboCountDisplay));
}

simulated event bool GetIsHeadShotComboActive()
{
    return IsRhythmMethodActive();
}

defaultproperties
{
    HeadshotDamage=(Name="Headshot Damage",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    Recoil=(Name="Recoil",Increment=0.01,Rank=0,StartingValue=0,MaxValue=0.25,ModifierValue=0,IconPath="",bActive=false)
    WeaponSwitchSpeed=(Name="Weapon Switch Speed",Increment=0.02,Rank=0,StartingValue=0,MaxValue=0.5,ModifierValue=0,IconPath="",bActive=false)
    RhythmMethodSoundReset=AkEvent'WW_UI_PlayerCharacter.Play_R_Method_Reset'
    RhythmMethodSoundHit=AkEvent'WW_UI_PlayerCharacter.Play_R_Method_Hit'
    RhythmMethodSoundTop=AkEvent'WW_UI_PlayerCharacter.Play_R_Method_Top'
    RhytmMethodRTPCName=R_Method
    MaxHeadShotComboCount=4
    CameraViewShakeScale=0.5
    SkillZedTimeChance=0.05
    ProgressStatID=50
    PerkBuildStatID=51
    SecondaryXPModifier[1]=1
    SecondaryXPModifier[2]=2
    SecondaryXPModifier[3]=3
    PerkName="Sharpshooter"
    Passives(0)=(Title="Headshot Damage",Description="Headshot damage increased by %x%",IconPath="")
    Passives(1)=(Title="Recoil",Description="%x% less recoil",IconPath="")
    Passives(2)=(Title="Weapon Switch",Description="Weapon switch speed increased by %x%",IconPath="")
    Passives(3)=(Title="",Description="",IconPath="")
    Passives(4)=(Title="",Description="",IconPath="")
    SkillCatagories[0]="Movement"
    SkillCatagories[1]="Basic Technique"
    SkillCatagories[2]="Skill"
    SkillCatagories[3]="Equipment"
    SkillCatagories[4]="Master Techniques"
    EXPAction1="Dealing Sharpshooter weapon damage"
    EXPAction2="Head shots with Sharpshooter weapons"
    PerkIcon=Texture2D'UI_PerkIcons_TEX.UI_PerkIcon_Sharpshooter'
    PerkSkills(0)=(Name="StationaryAim",Increment=0,Rank=0,StartingValue=0.25,MaxValue=0.25,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_StationaryAim",bActive=false)
    PerkSkills(1)=(Name="Trigger",Increment=0,Rank=0,StartingValue=0.25,MaxValue=0.1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_Trigger",bActive=false)
    PerkSkills(2)=(Name="CrouchAim",Increment=0,Rank=0,StartingValue=0.3,MaxValue=0.3,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_CrouchAim",bActive=false)
    PerkSkills(3)=(Name="Stun",Increment=0,Rank=0,StartingValue=2,MaxValue=2,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_Stun",bActive=false)
    PerkSkills(4)=(Name="RhythmMethod",Increment=0,Rank=0,StartingValue=0.17,MaxValue=0.17,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_RackUmUp",bActive=false)
    PerkSkills(5)=(Name="TacticalReload",Increment=0,Rank=0,StartingValue=0,MaxValue=0,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_TacticalReload",bActive=false)
    PerkSkills(6)=(Name="Scoped",Increment=0,Rank=0,StartingValue=0.1,MaxValue=0.1,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_Scoped",bActive=false)
    PerkSkills(7)=(Name="AmmoPouch",Increment=0,Rank=0,StartingValue=0.25,MaxValue=0.25,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_AmmoPouch",bActive=false)
    PerkSkills(8)=(Name="ZTKnockdown",Increment=0,Rank=0,StartingValue=17,MaxValue=17,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_ZED-KnockDown",bActive=false)
    PerkSkills(9)=(Name="ZTStun",Increment=0,Rank=0,StartingValue=5,MaxValue=5,ModifierValue=0,IconPath="UI_PerkTalent_TEX.Sharpshooter.UI_Talents_Sharpshooter_ZED-Stun",bActive=false)
    ZedTimeModifyingStates(0)=WeaponFiring
    ZedTimeModifyingStates(1)=WeaponBurstFiring
    ZedTimeModifyingStates(2)=WeaponSingleFiring
    PrimaryWeaponDef=Class'KFWeapDef_Winchester1894'
    KnifeWeaponDef=Class'KFWeapDef_Knife_SharpShooter'
    GrenadeWeaponDef=Class'KFWeapDef_Grenade_Sharpshooter'
    HitAccuracyHandicap=-5
    HeadshotAccuracyHandicap=-8
}