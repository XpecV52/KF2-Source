/*******************************************************************************
 * KFGFxMenu_Inventory generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxMenu_Inventory extends KFGFxObject_Menu within GFxMoviePlayer;

enum EINventory_Filter
{
    EInv_All,
    EInv_WeaponSkins,
    EInv_Cosmetics,
    EInv_Consumables,
    EInv_MAX
};

struct InventoryHelper
{
    var int ItemDefinition;
    var int ItemIndex;
    var int ItemCount;
    var GFxObject GfxItemObject;

    structdefaultproperties
    {
        ItemDefinition=0
        ItemIndex=0
        ItemCount=0
        GfxItemObject=none
    }
};

var const localized string InventoryString;
var const localized string EquipString;
var const localized string UnequipString;
var const localized string UseString;
var const localized string AllString;
var const localized string WeaponSkinString;
var const localized string CosmeticString;
var const localized string ItemString;
var const localized string FiltersString;
var const localized string FailedToExchangeString;
var const localized string MoreItemsString;
var OnlineSubsystem OnlineSub;
var KFPawn_Customization KFPH;
var bool bInitialInventoryPassComplete;
var KFGFxMenu_Inventory.EINventory_Filter CurrentInventoryFilter;

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    LocalizeText();
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    OnlineSub.AddOnInventoryReadCompleteDelegate(OnInventoryReadComplete);
    KFPH = KFPawn_Customization(Outer.GetPC().Pawn);
}

function OnOpen()
{
    if(OnlineSub != none)
    {
        OnlineSub.AddOnInventoryReadCompleteDelegate(OnInventoryReadComplete);
    }
    InitInventory();
    if(Class'WorldInfo'.static.IsMenuLevel())
    {
        Manager.ManagerObject.SetBool("backgroundVisible", false);
    }
}

function OnClose()
{
    if(OnlineSub != none)
    {
        OnlineSub.ClearOnInventoryReadCompleteDelegate(OnInventoryReadComplete);
    }
    if(Class'WorldInfo'.static.IsMenuLevel())
    {
        Manager.ManagerObject.SetBool("backgroundVisible", true);
    }
}

function InitInventory()
{
    local int I, ItemIndex, HelperIndex;
    local ItemProperties TempItemDetailsHolder;
    local GFxObject ItemArray, ItemObject;
    local bool bActiveItem;
    local array<InventoryHelper> ActiveItems;
    local InventoryHelper HelperItem;
    local array<ExchangeRuleSets> ExchangeRules;

    if(OnlineSub == none)
    {
        return;
    }
    ItemArray = Outer.CreateArray();
    I = 0;
    J0x45:

    if(I < OnlineSub.CurrentInventory.Length)
    {
        ItemIndex = OnlineSub.ItemPropertiesList.Find('Definition', OnlineSub.CurrentInventory[I].Definition;
        if(ItemIndex != -1)
        {
            TempItemDetailsHolder = OnlineSub.ItemPropertiesList[ItemIndex];
            if(((CurrentInventoryFilter == 0) || CurrentInventoryFilter == (TempItemDetailsHolder.Type + 1)) || bool(OnlineSub.CurrentInventory[I].NewlyAdded))
            {
                ItemObject = Outer.CreateObject("Object");
                HelperIndex = ActiveItems.Find('ItemDefinition', OnlineSub.CurrentInventory[I].Definition;
                if(HelperIndex == -1)
                {
                    HelperItem.ItemDefinition = OnlineSub.CurrentInventory[I].Definition;
                    HelperItem.ItemCount = 1;
                    ActiveItems.AddItem(HelperItem;
                    HelperIndex = ActiveItems.Length - 1;                    
                }
                else
                {
                    ++ ActiveItems[HelperIndex].ItemCount;
                }
                OnlineSub.IsExchangeable(OnlineSub.CurrentInventory[I].Definition, ExchangeRules);
                ItemObject.SetInt("count", ActiveItems[HelperIndex].ItemCount);
                ItemObject.SetString("label", TempItemDetailsHolder.Name);
                ItemObject.SetString("price", TempItemDetailsHolder.Price);
                ItemObject.SetString("typeRarity", TempItemDetailsHolder.ShortDescription);
                ItemObject.SetInt("type", TempItemDetailsHolder.Type);
                ItemObject.SetBool("exchangeable", ExchangeRules.Length > 0);
                bActiveItem = IsItemActive(OnlineSub.CurrentInventory[I].Definition);
                ItemObject.SetBool("active", bActiveItem);
                ItemObject.SetString("description", TempItemDetailsHolder.Description);
                ItemObject.SetString("iconURLSmall", "img://" $ TempItemDetailsHolder.IconURL);
                ItemObject.SetString("iconURLLarge", "img://" $ TempItemDetailsHolder.IconURLLarge);
                ItemObject.SetInt("definition", TempItemDetailsHolder.Definition);
                ActiveItems[HelperIndex].GfxItemObject = ItemObject;
                if(bool(OnlineSub.CurrentInventory[I].NewlyAdded) && bInitialInventoryPassComplete)
                {
                    SetObject("crateOpen", ItemObject);
                }
                OnlineSub.CurrentInventory[I].NewlyAdded = 0;
            }
        }
        ++ I;
        goto J0x45;
    }
    I = 0;
    J0x7C5:

    if(I < ActiveItems.Length)
    {
        ItemArray.SetElementObject(I, ActiveItems[I].GfxItemObject);
        ++ I;
        goto J0x7C5;
    }
    SetObject("inventoryList", ItemArray);
    bInitialInventoryPassComplete = true;
}

function OnInventoryReadComplete()
{
    InitInventory();
}

function bool IsItemActive(int ItemDefinition)
{
    local class<KFWeaponDefinition> WeaponDef;
    local int ItemIndex;

    ItemIndex = Class'KFWeaponSkinList'.default.Skins.Find('Id', ItemDefinition;
    if(ItemIndex == -1)
    {
        return false;
    }
    WeaponDef = Class'KFWeaponSkinList'.default.Skins[ItemIndex].WeaponDef;
    if(WeaponDef != none)
    {
        return Class'KFWeaponSkinList'.static.IsSkinEquip(WeaponDef, ItemDefinition);
    }
    return false;
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("inventory", InventoryString);
    LocalizedObject.SetString("back", Class'KFCommon_LocalizedStrings'.default.BackString);
    LocalizedObject.SetString("ok", Class'KFCommon_LocalizedStrings'.default.OKString);
    LocalizedObject.SetString("equip", EquipString);
    LocalizedObject.SetString("unequip", UnequipString);
    LocalizedObject.SetString("useString", UseString);
    LocalizedObject.SetString("all", AllString);
    LocalizedObject.SetString("weaponSkins", WeaponSkinString);
    LocalizedObject.SetString("cosmetics", CosmeticString);
    LocalizedObject.SetString("items", ItemString);
    LocalizedObject.SetString("filters", FiltersString);
    SetObject("localizedText", LocalizedObject);
}

function Callback_RequestInitialnventory()
{
    InitInventory();
}

function Callback_InventoryFilter(int FilterIndex)
{
    local KFGFxMenu_Inventory.EINventory_Filter NewFilter;

    switch(FilterIndex)
    {
        case 0:
            NewFilter = 0;
            break;
        case 1:
            NewFilter = 1;
            break;
        case 2:
            NewFilter = 2;
            break;
        case 3:
            NewFilter = 3;
            break;
        default:
            break;
    }
    if(NewFilter != CurrentInventoryFilter)
    {
        CurrentInventoryFilter = NewFilter;
        InitInventory();
    }
}

function Callback_Equip(int ItemDefinition)
{
    local class<KFWeaponDefinition> WeaponDef;
    local int ItemIndex;

    ItemIndex = Class'KFWeaponSkinList'.default.Skins.Find('Id', ItemDefinition;
    if(ItemIndex == -1)
    {
        return;
    }
    WeaponDef = Class'KFWeaponSkinList'.default.Skins[ItemIndex].WeaponDef;
    if(WeaponDef != none)
    {
        if(IsItemActive(ItemDefinition))
        {
            Class'KFWeaponSkinList'.static.SaveWeaponSkin(WeaponDef, 0);            
        }
        else
        {
            Class'KFWeaponSkinList'.static.SaveWeaponSkin(WeaponDef, ItemDefinition);
        }
    }
    InitInventory();
}

function Callback_UseItem(int ItemDefinition)
{
    local array<ExchangeRuleSets> ExchangeRules;

    OnlineSub.IsExchangeable(ItemDefinition, ExchangeRules);
    if(OnlineSub.ExchangeReady(ExchangeRules[0]))
    {
        OnlineSub.Exchange(ExchangeRules[0]);
        ActionScriptVoid("onItemUsed");        
    }
    else
    {
        Manager.OpenPopup(2, FailedToExchangeString, MoreItemsString, Class'KFCommon_LocalizedStrings'.default.OKString);
    }
}

function Callback_CharacterSkin(int ItemDefinition);

function Callback_PreviewItem(int ItemDefinition)
{
    if(KFPH != none)
    {
    }
}

defaultproperties
{
    InventoryString="INVENTORY"
    EquipString="EQUIP"
    UnequipString="UNEQUIP"
    UseString="USE"
    AllString="All"
    WeaponSkinString="Weapon Skins"
    CosmeticString="Cosmetics"
    ItemString="Items"
    FiltersString="Filters"
    FailedToExchangeString="CANNOT OPEN CRATE"
    MoreItemsString="You require a matching key and crate. You can purchase a key from the in game store."
}