/*******************************************************************************
 * KFDialogManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDialogManager extends Actor
    config(Game)
    notplaceable
    hidecategories(Navigation);

struct DialogCoolDownInfo
{
    var int EventID;
    var KFPawn Speaker;
    var float EndTime;
    var Vector Location;

    structdefaultproperties
    {
        EventID=0
        Speaker=none
        EndTime=0
        Location=(X=0,Y=0,Z=0)
    }
};

struct DelayedDialogInfo
{
    var KFPawn Speaker;
    var int EventID;
    var float EndTime;

    structdefaultproperties
    {
        Speaker=none
        EventID=0
        EndTime=0
    }
};

var bool bEnabled;
var config bool bLogDialog;
var bool bIsTraderTime;
var array<DialogCoolDownInfo> Cooldowns;
var transient Pawn NextSpotterPawn;
var transient float LastSpotUpdateTime;
var array<DelayedDialogInfo> DelayedDialog;
var float LastIdleUpdateTime;
var byte InterruptPriorityThreshold;
var byte InterruptedByAnyPriorityThreshold;
var int WeldAboutToBreakThreshold;
var float NeedMoreHealingPctThreshold;
var float NeedNoMoreHealingPctThreshold;
var int CaughtSomeDoshAmt;
var int CaughtMuchDoshAmt;
var int NumZedsForPressureReload;
var float LowSpareAmmoPctThreshold;
var int NumKillsForOnARoll;
var float CloseCallKillHealthPctThreshold;
var int NumZedsInAreaForMassacre;
var float AreaRadiusForMassacre;
var float TimeLimitForMassacre;
var int NumHitsForDeadHorse;
var float TimeBetweenHitsForDeadHorse;
var float TimeForContinuousDamageThreshold;
var float TimeBetweenHitsForContinuousDamage;
var float PlayerHealthPctForNearDeath;
var float PlayerTakeDamageStreakInterval;
var float PlayerTakeDamageStreakPctForScream;
var float IdleTimeforSpottingZed;
var int SpotLargeHordeNumZeds;
var float ZedAlmostDeadHealthPctThreshold;
var float SprintTowardZedDuration;
var float IdleTimeForSituationalDialog;
var int IdleLowDoshThreshold;
var int IdleHighDoshThreshold;
var int IdleLowAmmoPctThreshold;
var int IdleHighAmmoPctThreshold;
var float TimeUntilStartSprintPanting;
var AkEvent StopBreathingAkEvent;
var delegate<OnFinishedDialog> __OnFinishedDialog__Delegate;

delegate OnFinishedDialog(const out DialogResponseInfo ResponseInfo);

function float GetEventRadius(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        return EventDataClass.default.Events[EventID].Radius;
    }
    WarnInternal("KFDialogManager::GetEventRadius - EventDataClass is none, using probably useless default value");
    return 0;
}

function float GetEventRadiusSq(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    local float Rad;

    Rad = GetEventRadius(EventID, EventDataClass);
    return Rad * Rad;
}

function float GetEventFOV(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        return EventDataClass.default.Events[EventID].FOV;
    }
    WarnInternal("KFDialogManager::GetEventFOV - EventDataClass is none, using probably useless default value");
    return 0;
}

function byte GetEventPriority(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        return EventDataClass.default.Events[EventID].Priority;
    }
    WarnInternal("KFDialogManager::GetEventPriority - EventDataClass is none, using probably useless default value");
    return 255;
}

function float GetEventCoolDownTime(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        return EventDataClass.default.Events[EventID].CoolDownTime;
    }
    WarnInternal("KFDialogManager::GetEventCoolDownTime - EventDataClass is none, using probably useless default value");
    return 0;
}

function float GetEventCoolDownRadius(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        return EventDataClass.default.Events[EventID].CoolDownRadius;
    }
    WarnInternal("KFDialogManager::GetEventCoolDownRadius - EventDataClass is none, using probably useless default value");
    return 0;
}

function float GetEventCoolDownRadiusSq(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    local float CoolDownRadius;

    CoolDownRadius = GetEventCoolDownRadius(EventID, EventDataClass);
    return CoolDownRadius * CoolDownRadius;
}

function int GetEventCoolDownCategory(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        if(EventDataClass.default.Events.Length > EventID)
        {
            return EventDataClass.default.Events[EventID].CoolDownCategory;            
        }
        else
        {
            return 255;
        }
    }
    WarnInternal("KFDialogManager::GetEventCoolDownCategory - EventDataClass is none, using probably useless default value");
    return 255;
}

function bool GetEventIsOnlyPlayedLocally(int EventID, class<KFPawnVoiceGroupEventData> EventDataClass)
{
    if(EventDataClass != none)
    {
        return EventDataClass.default.Events[EventID].bOnlyPlayLocally;
    }
    WarnInternal("KFDialogManager::GetEventIsOnlyPlayedLocally - EventDataClass is none, using probably useless default value");
    return true;
}

function bool PawnIsValidPlayer(KFPawn_Human KFPH)
{
    if(KFPH.GetTeamNum() != 0)
    {
        return false;
    }
    if(!KFPH.IsAliveAndWell())
    {
        return false;
    }
    if((KFPH.VoiceGroupArch == none) || KFPH.VoiceGroupArch.default.EventDataClass == none)
    {
        return false;
    }
    return true;
}

function bool PawnCanSpotPawn(Pawn P1, Pawn P2, float MaxDistanceSq, float FOVCosine, optional bool CheckLOS, optional bool DoubleCheckLOS)
{
    if(VSizeSq(P2.Location - P1.Location) >= MaxDistanceSq)
    {
        return false;
    }
    if(!ActorWithinPawnFOV(P2, P1, FOVCosine))
    {
        return false;
    }
    return !CheckLOS || PawnWithinPawnLOS(P2, P1, DoubleCheckLOS);
}

function bool PawnCanSpotActor(Pawn P, Actor A, float MaxDistanceSq, float FOVCosine, optional bool CheckLOS)
{
    if(VSizeSq(A.Location - P.Location) >= MaxDistanceSq)
    {
        return false;
    }
    if(!ActorWithinPawnFOV(A, P, FOVCosine))
    {
        return false;
    }
    if(CheckLOS && !FastTrace(P.GetPawnViewLocation(), A.Location))
    {
        return false;
    }
    return true;
}

function bool ActorWithinPawnFOV(Actor A, Pawn P, float FOVCosine)
{
    local Vector PtoA, PFacing;

    PFacing = vector(P.GetViewRotation());
    PtoA = Normal(A.Location - P.Location);
    if((PtoA Dot PFacing) < FOVCosine)
    {
        return false;
    }
    return true;
}

function bool ActorWithinPawnRadius(Actor A, Pawn P, float Radius)
{
    if(VSizeSq(A.Location - P.Location) > (Radius * Radius))
    {
        return false;
    }
    return true;
}

function bool PawnWithinPawnLOS(Pawn P1, Pawn P2, optional bool bDoubleCheckLOS)
{
    if(!FastTrace(P2.GetPawnViewLocation(), P1.GetPawnViewLocation()))
    {
        if(!bDoubleCheckLOS || !FastTrace(P1.GetPawnViewLocation(), P2.Location))
        {
            return false;
        }
    }
    return true;
}

function bool PlayerCanSpotEnemy(KFPawn_Human Player, KFPawn_Monster Enemy, optional float RadiusSq, optional float FOVCosine)
{
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    RadiusSq = -1;
    FOVCosine = -1;
    EventDataClass = Player.GetVoiceGroupEventDataClass();
    if(RadiusSq < float(0))
    {
        RadiusSq = GetEventRadiusSq(125, EventDataClass);
    }
    if(FOVCosine < float(0))
    {
        FOVCosine = GetEventFOV(125, EventDataClass);
    }
    return PawnCanSpotPawn(Player, Enemy, RadiusSq, FOVCosine, true, true);
}

function SetTraderTime(bool bTraderTime)
{
    bIsTraderTime = bTraderTime;
}

event Tick(float DeltaTime)
{
    if(!bEnabled || !WorldInfo.GRI.bMatchHasBegun)
    {
        return;
    }
    if(DelayedDialog.Length > 0)
    {
        UpdateDelayedDialog();
    }
    if((WorldInfo.TimeSeconds - LastSpotUpdateTime) > 0.25)
    {
        CheckSpottedDialog();
        LastSpotUpdateTime = WorldInfo.TimeSeconds;
    }
    if((WorldInfo.TimeSeconds - LastIdleUpdateTime) > 0.5)
    {
        CheckIdleDialog();
        LastIdleUpdateTime = WorldInfo.TimeSeconds;
    }
}

function UpdateDelayedDialog()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < DelayedDialog.Length)
    {
        if(DelayedDialog[I].EndTime < WorldInfo.TimeSeconds)
        {
            PlayDialogEvent(DelayedDialog[I].Speaker, DelayedDialog[I].EventID);
            DelayedDialog.Remove(-- I, 1;
        }
        ++ I;
        goto J0x0B;
    }
}

function bool DialogIsCoolingDown(KFPawn KFP, int EventID, int EventCoolDownCategory)
{
    local int I, CoolDownID, iCoolDownCategory;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = KFP.GetVoiceGroupEventDataClass();
    I = 0;
    J0x34:

    if(I < Cooldowns.Length)
    {
        CoolDownID = Cooldowns[I].EventID;
        iCoolDownCategory = GetEventCoolDownCategory(CoolDownID, EventDataClass);
        if((((EventID == CoolDownID) || EventCoolDownCategory == 5) || iCoolDownCategory == 6) || (EventCoolDownCategory != 255) && EventCoolDownCategory == iCoolDownCategory)
        {
            if(Cooldowns[I].EndTime <= WorldInfo.TimeSeconds)
            {
                Cooldowns.Remove(-- I, 1;                
            }
            else
            {
                if(KFP == Cooldowns[I].Speaker)
                {
                    return true;
                }
                if(VSizeSq(Cooldowns[I].Location - KFP.Location) < (GetEventCoolDownRadiusSq(CoolDownID, EventDataClass)))
                {
                    return true;
                }
            }
        }
        ++ I;
        goto J0x34;
    }
    return false;
}

function bool DialogEventCanBePlayed(KFPawn KFP, const out DialogEventInfo EventInfo)
{
    if(KFP.IsSpeaking())
    {
        if((EventInfo.Priority > InterruptPriorityThreshold) && KFP.CurrDialogPriority < InterruptedByAnyPriorityThreshold)
        {
            if(bLogDialog)
            {
                LogInternal(((((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Already speaking ") $ KFP.VoiceGroupArch.static.GetEventName(KFP.CurrDialogEventID)) $ " (priority too low to cause interupt)", 'BattleChatter');
            }
            return false;
        }
        if(EventInfo.Priority > KFP.CurrDialogPriority)
        {
            if(bLogDialog)
            {
                LogInternal(((((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Already speaking ") $ KFP.VoiceGroupArch.static.GetEventName(KFP.CurrDialogEventID)) $ " (lower priority)", 'BattleChatter');
            }
            return false;
        }
        if((EventInfo.Priority == KFP.CurrDialogPriority) && !EventInfo.bCanInterruptEqualPriority)
        {
            if(bLogDialog)
            {
                LogInternal(((((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Already speaking ") $ KFP.VoiceGroupArch.static.GetEventName(KFP.CurrDialogEventID)) $ " (same priority, not allowed to interrupt same priority)", 'BattleChatter');
            }
            return false;
        }
    }
    if(DialogIsCoolingDown(KFP, EventInfo.EventID, EventInfo.CoolDownCategory))
    {
        if(bLogDialog)
        {
            LogInternal(((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Cooling down", 'BattleChatter');
        }
        return false;
    }
    if(!EventInfo.bCanPlayAlone && KFGameInfo(WorldInfo.Game).GetLivingPlayerCount() < 2)
    {
        if(bLogDialog)
        {
            LogInternal(((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Alone", 'BattleChatter');
        }
        return false;
    }
    if((EventInfo.CoolDownCategory == 7) && !bIsTraderTime)
    {
        if(bLogDialog)
        {
            LogInternal(((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Trader time only", 'BattleChatter');
        }
        return false;
    }
    if((KFP.SpecialMove == 33) && EventInfo.Priority > InterruptPriorityThreshold)
    {
        if(bLogDialog)
        {
            LogInternal(((KFP.VoiceGroupArch.static.GetEventName(EventInfo.EventID) $ " can't be played for ") $ Right(string(KFP.VoiceGroupArch.Name), (Len(string(KFP.VoiceGroupArch.Name)) - InStr(string(KFP.VoiceGroupArch.Name), "_")) - 1)) $ " - Being grabbed by Hans", 'BattleChatter');
        }
        return false;
    }
    return true;
}

function PlayDialogEvent(KFPawn Speaker, int EventID)
{
    local DialogCoolDownInfo CoolDownInfo;
    local DialogEventInfo EventInfo;
    local AkEvent EventAudioCue;
    local name SpeakerName;

    if(!bEnabled || Speaker == none)
    {
        return;
    }
    if((EventID < 0) || Speaker.VoiceGroupArch == none)
    {
        return;
    }
    EventInfo = Speaker.VoiceGroupArch.static.GetDialogEventInfo(EventID);
    if(EventInfo.Delay > float(0))
    {
        if(AddDelayedDialogEvent(Speaker, EventID, EventInfo.Delay))
        {
            return;
        }
    }
    if(!DialogEventCanBePlayed(Speaker, EventInfo))
    {
        return;
    }
    if(FRand() > EventInfo.Chance)
    {
        return;
    }
    EventAudioCue = Speaker.VoiceGroupArch.static.GetDialogAkEvent(EventID, bIsTraderTime);
    if(EventAudioCue == none)
    {
        if(bLogDialog)
        {
            LogInternal(((("KFDialogManager::PlayDialogEvent - event " $ Speaker.VoiceGroupArch.static.GetEventName(EventInfo.EventID)) $ " for speaker ") $ string(Speaker)) $ " has no audio, bailing out");
        }
        return;
    }
    if(EventAudioCue.Duration <= float(0))
    {
        if(bLogDialog)
        {
            LogInternal(((("KFDialogManager::PlayDialogEvent - event " $ Speaker.VoiceGroupArch.static.GetEventName(EventInfo.EventID)) $ " for speaker ") $ string(Speaker)) $ " has invalid duration, bailing out");
        }
        return;
    }
    SpeakerName = Speaker.VoiceGroupArch.Name;
    if(Speaker.IsSpeaking())
    {
        if(bLogDialog)
        {
            LogInternal((("Interrupting " $ Speaker.VoiceGroupArch.static.GetEventName(Speaker.CurrDialogEventID)) $ " for ") $ Right(string(SpeakerName), (Len(string(SpeakerName)) - InStr(string(SpeakerName), "_")) - 1), 'BattleChatter');
        }
        Speaker.StopDialog();
    }
    if(bLogDialog)
    {
        LogInternal((("Playing " $ Speaker.VoiceGroupArch.static.GetEventName(EventInfo.EventID)) $ " for ") $ Right(string(SpeakerName), (Len(string(SpeakerName)) - InStr(string(SpeakerName), "_")) - 1), 'BattleChatter');
    }
    Speaker.CurrDialogEventID = EventInfo.EventID;
    Speaker.CurrDialogPriority = EventInfo.Priority;
    if(EventInfo.CoolDownTime > 0)
    {
        CoolDownInfo.EventID = EventInfo.EventID;
        CoolDownInfo.Speaker = Speaker;
        CoolDownInfo.Location = Speaker.Location;
        CoolDownInfo.EndTime = WorldInfo.TimeSeconds + EventInfo.CoolDownTime;
        Cooldowns.AddItem(CoolDownInfo;
    }
    if(EventInfo.bOnlyPlayLocally)
    {
        if(Speaker.IsLocallyControlled())
        {
            KFPlayerController(Speaker.Controller).ClientHearDialog(Speaker, EventAudioCue, EventInfo.bCanBeMinimized);
        }        
    }
    else
    {
        Speaker.PlayDialog(EventAudioCue, EventInfo.bCanBeMinimized);
    }
    SetTimer(EventAudioCue.Duration, false, 'EndOfDialogTimer', Speaker);
}

function bool PlayerIsPlayingDialogEvent(KFPawn_Human Player, int EventID)
{
    local int DelayedDialogIdx;

    if(Player.IsPlayingDialogEvent(EventID))
    {
        return true;
    }
    DelayedDialogIdx = DelayedDialog.Find('EventID', EventID;
    if((DelayedDialogIdx != -1) && DelayedDialog[DelayedDialogIdx].Speaker == Player)
    {
        return true;
    }
    return false;
}

function BasicResponseDelegate(const out DialogResponseInfo RespInfo)
{
    if(!RespInfo.Speaker.bDeleteMe && RespInfo.Speaker.IsAliveAndWell())
    {
        PlayDialogEvent(RespInfo.Speaker, RespInfo.EventID);
    }
}

function PlayBasicDialogResponse(KFPawn_Human RespondToPawn, int RespondingToID, int ResponseID, optional KFPawn_Human Responder, optional KFPawn Target, optional bool bPlayOnlyAsResponse)
{
    if(Responder == none)
    {
        Responder = FindPlayerResponder(RespondToPawn, ResponseID, Target);
    }
    if(Responder == none)
    {
        return;
    }
    if(PlayerIsPlayingDialogEvent(RespondToPawn, RespondingToID))
    {
        RespondToPawn.SetDialogResponseDelegate(Responder, BasicResponseDelegate, ResponseID, RespondingToID);        
    }
    else
    {
        if(!bPlayOnlyAsResponse)
        {
            PlayDialogEvent(Responder, ResponseID);
        }
    }
}

function KFPawn_Human FindPlayerResponder(KFPawn_Human Speaker, int ResponseEventID, optional KFPawn Target)
{
    local KFPawn_Human Responder;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = Speaker.GetVoiceGroupEventDataClass();
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', Responder)
    {
        if((Responder == Speaker) || !PawnIsValidPlayer(Responder))
        {
            continue;            
        }
        if((ActorWithinPawnRadius(Speaker, Responder, GetEventRadius(ResponseEventID, EventDataClass))) && (Target == none) || (ActorWithinPawnFOV(Target, Responder, GetEventFOV(ResponseEventID, EventDataClass))) && PawnWithinPawnLOS(Target, Responder))
        {            
            return Responder;
        }        
    }    
    return none;
}

function PlayCustomDialogResponse(KFPawn_Human Speaker, KFPawn Responder, int RespondingToID, delegate<OnFinishedDialog> CustomDelegate, optional bool bPlayOnlyAsResponse)
{
    if(PlayerIsPlayingDialogEvent(Speaker, RespondingToID))
    {
        Speaker.SetDialogResponseDelegate(Responder, CustomDelegate, -1, RespondingToID);        
    }
    else
    {
        if(!bPlayOnlyAsResponse)
        {
            Speaker.SetDialogResponseDelegate(Responder, None, -1, RespondingToID);
            OnFinishedDialog(Speaker.DlgRespInfo);
        }
    }
}

function AddRandomDialogOption(KFPawn Speaker, int OptionID, out int NumOptions, out int BestOptionID)
{
    local DialogEventInfo NewOptionEventInfo, BestOptionEventInfo;
    local int WeightCount;

    if((OptionID < 0) || Speaker.VoiceGroupArch == none)
    {
        return;
    }
    if(BestOptionID >= 0)
    {
        NewOptionEventInfo = Speaker.VoiceGroupArch.static.GetDialogEventInfo(OptionID);
        BestOptionEventInfo = Speaker.VoiceGroupArch.static.GetDialogEventInfo(BestOptionID);
        if(NewOptionEventInfo.Priority < BestOptionEventInfo.Priority)
        {
            NumOptions = 0;            
        }
        else
        {
            if(NewOptionEventInfo.Priority > BestOptionEventInfo.Priority)
            {
                return;
            }
        }
    }
    ++ NumOptions;
    WeightCount = NewOptionEventInfo.Weight;
    J0x199:

    if(-- WeightCount > 0)
    {
        if(FRand() <= (1 / float(NumOptions)))
        {
            BestOptionID = OptionID;
        }
        goto J0x199;
    }
}

function bool AddDelayedDialogEvent(KFPawn Speaker, int EventID, float Delay)
{
    local int DelayedDialogIdx;

    DelayedDialogIdx = DelayedDialog.Find('EventID', EventID;
    if(DelayedDialogIdx == -1)
    {
        DelayedDialog.Add(1;
        DelayedDialog[DelayedDialog.Length - 1].Speaker = Speaker;
        DelayedDialog[DelayedDialog.Length - 1].EventID = EventID;
        DelayedDialog[DelayedDialog.Length - 1].EndTime = WorldInfo.TimeSeconds + Delay;
        return true;        
    }
    else
    {
        if(DelayedDialog[DelayedDialogIdx].Speaker != Speaker)
        {
            return true;
        }
    }
    return false;
}

function PlayWeldDialog(KFPawn Speaker, KFDoorActor door, KFPawn Welder)
{
    local int WeldDialogID, WeldRespDialogID;

    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(door.UnderAttack())
    {
        WeldDialogID = 12;
        WeldRespDialogID = 13;        
    }
    else
    {
        WeldDialogID = 10;
        WeldRespDialogID = 11;
    }
    if(Speaker == Welder)
    {
        if(door.WeldIntegrity >= door.MaxWeldIntegrity)
        {
            PlayDialogEvent(KFPawn_Human(Speaker), 16);            
        }
        else
        {
            if(!door.BeingWelded())
            {
                PlayDialogEvent(KFPawn_Human(Speaker), WeldDialogID);                
            }
            else
            {
                if((WeldDialogID == 12) && door.WeldIntegrity < WeldAboutToBreakThreshold)
                {
                    PlayDialogEvent(KFPawn_Human(Speaker), 14);
                }
            }
        }        
    }
    else
    {
        PlayBasicDialogResponse(KFPawn_Human(Speaker), WeldDialogID, WeldRespDialogID, KFPawn_Human(Welder));
    }
}

function PlayUnweldDialog(KFPawn Speaker, KFDoorActor door, KFPawn Unwelder)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(Speaker == Unwelder)
    {
        if(door.WeldIntegrity <= 0)
        {
            PlayDialogEvent(KFPawn_Human(Speaker), 18);            
        }
        else
        {
            if(!door.BeingUnwelded())
            {
                PlayDialogEvent(KFPawn_Human(Speaker), 17);
            }
        }
    }
}

function PlayDoorTakeDamageDialog(KFDoorActor door)
{
    local KFPawn_Human KFPH;
    local bool bDoorWeldBroken;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    bDoorWeldBroken = door.WeldIntegrity <= 0;
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        EventDataClass = KFPH.GetVoiceGroupEventDataClass();
        if(!PawnCanSpotActor(KFPH, door, GetEventRadiusSq(19, EventDataClass), GetEventFOV(19, EventDataClass)))
        {
            continue;            
        }
        if(bDoorWeldBroken)
        {
            PlayDialogEvent(KFPH, 20);
            continue;
        }
        PlayDialogEvent(KFPH, 19);        
    }    
}

function PlayHealMissDialog(KFPawn Healer, KFPawn IntendedHealee)
{
    local KFPawn_Human KFPH, KFPH_Healee;

    if((Healer.VoiceGroupArch == none) || Healer.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    KFPH = KFPawn_Human(Healer);
    if(KFPH == none)
    {
        return;
    }
    KFPH_Healee = KFPawn_Human(IntendedHealee);
    if(KFPH_Healee == none)
    {
        return;
    }
    PlayDialogEvent(KFPH, 24);
    PlayCustomDialogResponse(KFPawn_Human(Healer), IntendedHealee, 24, PlayHealMissResponse, true);
}

function PlayHealMissResponse(const out DialogResponseInfo RespInfo)
{
    if(!RespInfo.Speaker.bIsMoving && ActorWithinPawnRadius(RespInfo.Speaker, RespInfo.RespondingToPawn, GetEventRadius(25, RespInfo.Speaker.GetVoiceGroupEventDataClass())))
    {
        PlayDialogEvent(RespInfo.Speaker, 25);
    }
}

function PlayHealingDialog(KFPawn Healer, KFPawn Healee, float HealeeHealthPct)
{
    local KFPawn_Human KFPH;

    if((Healer.VoiceGroupArch == none) || Healer.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    KFPH = KFPawn_Human(Healer);
    if(KFPH == none)
    {
        return;
    }
    if(KFPH != Healee)
    {
        PlayDialogEvent(KFPH, 21);
        if(HealeeHealthPct < NeedMoreHealingPctThreshold)
        {
            PlayBasicDialogResponse(KFPH, 21, 22, KFPawn_Human(Healee));            
        }
        else
        {
            if(HealeeHealthPct >= NeedNoMoreHealingPctThreshold)
            {
                PlayBasicDialogResponse(KFPH, 21, 23, KFPawn_Human(Healee));
            }
        }        
    }
    else
    {
        PlayDialogEvent(KFPH, 26);
    }
}

function PlayDoshCaughtDialog(KFPawn_Human Speaker)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(Speaker.DoshCaughtStreakAmt >= CaughtMuchDoshAmt)
    {
        PlayDialogEvent(Speaker, 29);        
    }
    else
    {
        if(Speaker.DoshCaughtStreakAmt >= CaughtSomeDoshAmt)
        {
            PlayDialogEvent(Speaker, 28);
        }
    }
}

function PlayDoshTossDialog(KFPawn Speaker)
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal, TraceStart, TraceEnd;

    TraceEnd = Speaker.GetPawnViewLocation();
    TraceStart = TraceEnd + (vector(Speaker.GetViewRotation()) * float(500));
    HitActor = Trace(HitLocation, HitNormal, TraceEnd, TraceStart, true);
    if((HitActor != Speaker) && KFPawn_Human(HitActor) != none)
    {
        PlayDialogEvent(Speaker, 27);        
    }
    else
    {
        PlayDialogEvent(Speaker, 30);
    }
}

function PlayReloadDialog(KFPawn Speaker)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(Speaker.IsSurrounded(true, NumZedsForPressureReload, GetEventRadius(33, Speaker.GetVoiceGroupEventDataClass())))
    {
        PlayDialogEvent(Speaker, 33);        
    }
    else
    {
        PlayDialogEvent(Speaker, 32);
    }
}

function PlayAmmoDialog(KFPawn Speaker, float SpareAmmoLeftPct)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(SpareAmmoLeftPct <= LowSpareAmmoPctThreshold)
    {
        PlayDialogEvent(Speaker, 38);
        PlayBasicDialogResponse(KFPawn_Human(Speaker), 38, 39,,, true);
    }
}

function PlayDropWeaponDialog(KFPawn Speaker)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    PlayDialogEvent(Speaker, 34);
}

function PlayMeleeAttackDialog(KFPawn Speaker, bool bIsHeavyAttack)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(bIsHeavyAttack)
    {
        PlayDialogEvent(Speaker, 40);        
    }
    else
    {
        PlayDialogEvent(Speaker, 41);
    }
}

function PlayIronsightsDialog(KFPawn Speaker)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    PlayDialogEvent(Speaker, 52);
}

function PlayJumpDialog(KFPawn Speaker)
{
    if((Speaker.VoiceGroupArch == none) || Speaker.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    PlayDialogEvent(Speaker, 53);
}

function PlaySprintPantingDialog(KFPawn_Human Speaker, bool bNewSprintStatus)
{
    if(bNewSprintStatus && !Speaker.bIsSprinting)
    {
        Speaker.SprintStartTime = WorldInfo.TimeSeconds;        
    }
    else
    {
        if(!bNewSprintStatus)
        {
            StopBreathingDialog(Speaker);
        }
    }
    if((WorldInfo.TimeSeconds - Speaker.SprintStartTime) > TimeUntilStartSprintPanting)
    {
        Speaker.SprintStartTime = WorldInfo.TimeSeconds;
        PlayDialogEvent(Speaker, 50);
    }
}

function StopBreathingDialog(KFPawn Speaker)
{
    if(Speaker.IsSpeaking())
    {
        if((Speaker.CurrDialogEventID == 50) || Speaker.CurrDialogEventID == 52)
        {
            KFPlayerController(Speaker.Controller).ClientHearDialog(Speaker, StopBreathingAkEvent, 0);
        }
    }
}

function PlayLevelUpDialog(KFPlayerController LevellerKFPC)
{
    local KFPawn_Human Leveller, Commenter;
    local int CommentEventID, LevellerLevel, CommenterLevel;

    LevellerLevel = KFPlayerReplicationInfo(LevellerKFPC.PlayerReplicationInfo).GetActivePerkLevel();
    if(LevellerLevel < 5)
    {
        CommentEventID = 54;        
    }
    else
    {
        if(LevellerLevel < 15)
        {
            CommentEventID = 55;            
        }
        else
        {
            if(LevellerLevel < 25)
            {
                CommentEventID = 56;                
            }
            else
            {
                CommentEventID = 57;
            }
        }
    }
    Leveller = KFPawn_Human(LevellerKFPC.Pawn);
    Commenter = FindPlayerResponder(Leveller, CommentEventID);
    if(Commenter != none)
    {
        PlayDialogEvent(Commenter, CommentEventID);
        CommenterLevel = KFPlayerReplicationInfo(KFPlayerController(Commenter.Controller).PlayerReplicationInfo).GetActivePerkLevel();
        if(CommenterLevel > LevellerLevel)
        {
            PlayBasicDialogResponse(Commenter, CommentEventID, 59, Leveller, Commenter, true);            
        }
        else
        {
            if(CommenterLevel < LevellerLevel)
            {
                PlayBasicDialogResponse(Commenter, CommentEventID, 58, Leveller, Commenter, true);
            }
        }
    }
}

function PlayKilledZedDialog(KFPawn_Human Killer, KFPawn_Monster Zed, class<DamageType> DamageType, bool bWasKnockedDown)
{
    local int NumOptions, BestOptionID;

    if((Killer.VoiceGroupArch == none) || Killer.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    BestOptionID = -1;
    CheckOnARollDialog(Killer, NumOptions, BestOptionID);
    CheckMassacreDialog(Killer, Zed, NumOptions, BestOptionID);
    CheckCloseCallKillDialog(Killer, Zed, NumOptions, BestOptionID);
    CheckKillAsLastAliveDialog(Killer, Zed, NumOptions, BestOptionID);
    CheckKilledWithFavoriteWeaponDialog(Killer, NumOptions, BestOptionID);
    AddRandomDialogOption(Killer, Zed.GetKillerDialogID(), NumOptions, BestOptionID);
    if(class<KFDamageType>(DamageType) != none)
    {
        AddRandomDialogOption(Killer, class<KFDamageType>(DamageType).static.GetKillerDialogID(), NumOptions, BestOptionID);
    }
    if(bWasKnockedDown)
    {
        AddRandomDialogOption(Killer, 77, NumOptions, BestOptionID);
    }
    PlayDialogEvent(Killer, BestOptionID);
    PlayBasicKilledResponse(Killer, Zed, BestOptionID);
}

function CheckOnARollDialog(KFPawn_Human Speaker, out int out_NumOptions, out int out_BestOptionID)
{
    Speaker.UpdateKillStreak();
    if(Speaker.ZedsKilledStreakAmt >= NumKillsForOnARoll)
    {
        AddRandomDialogOption(Speaker, 73, out_NumOptions, out_BestOptionID);
    }
}

function CheckMassacreDialog(KFPawn_Human Killer, KFPawn_Monster KilledZed, out int out_NumOptions, out int out_BestOptionID)
{
    local int I, MassacreCount;
    local KFGoreManager KFGM;
    local KFPawn Corpse;
    local float AreaRadiusSq;

    KFGM = KFGoreManager(WorldInfo.MyGoreEffectManager);
    if(KFGM == none)
    {
        return;
    }
    AreaRadiusSq = AreaRadiusForMassacre * AreaRadiusForMassacre;
    I = 0;
    J0x6B:

    if((I < KFGM.CorpsePool.Length) && MassacreCount < NumZedsInAreaForMassacre)
    {
        Corpse = KFGM.CorpsePool[I];
        if(Corpse == KilledZed)
        {            
        }
        else
        {
            if((WorldInfo.TimeSeconds - Corpse.TimeOfDeath) > TimeLimitForMassacre)
            {                
            }
            else
            {
                if(VSizeSq(Corpse.Location - KilledZed.Location) > AreaRadiusSq)
                {                    
                }
                else
                {
                    ++ MassacreCount;
                }
            }
        }
        ++ I;
        goto J0x6B;
    }
    if(MassacreCount >= NumZedsInAreaForMassacre)
    {
        AddRandomDialogOption(Killer, 69, out_NumOptions, out_BestOptionID);
    }
}

function CheckCloseCallKillDialog(KFPawn_Human Killer, KFPawn_Monster Zed, out int out_NumOptions, out int out_BestOptionID)
{
    if((Killer.LastHitBy == Zed.MyKFAIC) && (float(Killer.Health) / float(Killer.HealthMax)) <= CloseCallKillHealthPctThreshold)
    {
        AddRandomDialogOption(Killer, 75, out_NumOptions, out_BestOptionID);
    }
}

function CheckKillAsLastAliveDialog(KFPawn_Human Killer, KFPawn_Monster Zed, out int out_NumOptions, out int out_BestOptionID)
{
    if(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount() == 1)
    {
        AddRandomDialogOption(Killer, 76, out_NumOptions, out_BestOptionID);
    }
}

function CheckKilledWithFavoriteWeaponDialog(KFPawn_Human Killer, out int out_NumOptions, out int out_BestOptionID)
{
    local int FavoriteWeaponIndex;
    local KFCharacterInfo_Human KFCI;

    KFCI = KFCharacterInfo_Human(Killer.CharacterArch);
    if(KFCI == none)
    {
        return;
    }
    FavoriteWeaponIndex = KFCI.GetFavoriteWeaponIndexOf(Killer.Weapon);
    if(FavoriteWeaponIndex < 0)
    {
        return;
    }
    AddRandomDialogOption(Killer, 91 + FavoriteWeaponIndex, out_NumOptions, out_BestOptionID);
}

function PlayBasicKilledResponse(KFPawn_Human Killer, KFPawn_Monster KilledZed, int KilledEventID)
{
    local int ResponseEventID;
    local bool bPlayOnlyAsResponse;

    switch(KilledEventID)
    {
        case 73:
            ResponseEventID = 74;
            bPlayOnlyAsResponse = true;
            break;
        case 69:
            ResponseEventID = 70;
            bPlayOnlyAsResponse = true;
            break;
        case 78:
            ResponseEventID = 79;
            break;
        case 80:
            ResponseEventID = 81;
            break;
        case 82:
            ResponseEventID = 83;
            break;
        case 84:
            ResponseEventID = 85;
            break;
        case 86:
            ResponseEventID = 87;
            break;
        default:
            return;
            break;
    }
    PlayBasicDialogResponse(Killer, KilledEventID, ResponseEventID,, KilledZed, bPlayOnlyAsResponse);
}

function PlayDamagedZedDialog(KFPawn_Human Damager, KFPawn_Monster Zed, class<DamageType> DamageType)
{
    local int NumOptions, BestOptionID;

    if((Damager.VoiceGroupArch == none) || Damager.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    BestOptionID = -1;
    if(Zed.IsDoingSpecialMove(6))
    {
        AddRandomDialogOption(Damager, 101, NumOptions, BestOptionID);        
    }
    else
    {
        if(Zed.IsDoingSpecialMove(4))
        {
            AddRandomDialogOption(Damager, 100, NumOptions, BestOptionID);            
        }
        else
        {
            if(Zed.IsDoingSpecialMove(8))
            {
                AddRandomDialogOption(Damager, 99, NumOptions, BestOptionID);
            }
        }
    }
    if(class<KFDamageType>(DamageType) != none)
    {
        AddRandomDialogOption(Damager, class<KFDamageType>(DamageType).static.GetDamagerDialogID(), NumOptions, BestOptionID);
    }
    PlayDialogEvent(Damager, BestOptionID);
}

function PlayDamageZedContinuousDialog(KFPawn_Human Damager, KFPawn_Monster Zed)
{
    Damager.UpdateContinuousDamage(Zed, TimeBetweenHitsForContinuousDamage);
    if((WorldInfo.TimeSeconds - Damager.InitialContinousDamageTime) >= TimeForContinuousDamageThreshold)
    {
        PlayDialogEvent(Damager, 107);
    }
}

function PlayBeatDeadHorseDialog(KFPawn_Human Speaker, KFPawn_Monster DeadZed)
{
    if((DeadZed.DeadHorseHitStreakAmt < NumHitsForDeadHorse) && (WorldInfo.TimeSeconds - DeadZed.LastDeadHorseHitTime) < TimeBetweenHitsForDeadHorse)
    {
        DeadZed.UpdateDeadHorseStreak(true);        
    }
    else
    {
        DeadZed.UpdateDeadHorseStreak(false);
    }
    if(DeadZed.DeadHorseHitStreakAmt >= NumHitsForDeadHorse)
    {
        PlayDialogEvent(Speaker, 71);
        PlayBasicDialogResponse(Speaker, 71, 72,, DeadZed);
    }
}

function PlayPlayerDamageDialog(KFPawn_Human Player, class<DamageType> DamageType, int Damage)
{
    local int NumOptions, BestOptionID;

    if((Player.VoiceGroupArch == none) || Player.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    BestOptionID = -1;
    if((float(Player.Health) / float(Player.HealthMax)) < PlayerHealthPctForNearDeath)
    {
        AddRandomDialogOption(Player, 122, NumOptions, BestOptionID);        
    }
    else
    {
        CheckPlayerDamageGeneric(Player, Damage, NumOptions, BestOptionID);
    }
    if(class<KFDamageType>(DamageType) != none)
    {
        AddRandomDialogOption(Player, class<KFDamageType>(DamageType).static.GetDamageeDialogID(), NumOptions, BestOptionID);
        if(ClassIsChildOf(DamageType, Class'KFDT_Toxic') && !ClassIsChildOf(Player.GetPerk().Class, Class'KFPerk_Berserker'))
        {
            AddRandomDialogOption(Player, 120, NumOptions, BestOptionID);
        }
    }
    PlayDialogEvent(Player, BestOptionID);
    if(BestOptionID == 120)
    {
        PlayBasicDialogResponse(Player, 120, 121,,, true);
    }
}

function CheckPlayerDamageGeneric(KFPawn_Human Player, int Damage, out int out_NumOptions, out int out_BestOptionID)
{
    local float DamageTakenStreakPct;

    Player.UpdateDamageTakenStreak(Damage, PlayerTakeDamageStreakInterval);
    DamageTakenStreakPct = float(Player.DamageTakenStreakAmt) / float(Player.HealthMax);
    if(DamageTakenStreakPct >= PlayerTakeDamageStreakPctForScream)
    {
        AddRandomDialogOption(Player, 115, out_NumOptions, out_BestOptionID);        
    }
    else
    {
        AddRandomDialogOption(Player, 114, out_NumOptions, out_BestOptionID);
    }
}

function PlayPlayerGrabbedDialog(KFPawn_Human Speaker)
{
    if(Speaker != none)
    {
        PlayDialogEvent(Speaker, 150);
    }
}

function PlayPlayerGrabbedByPatriarchDialog(KFPawn_Human Speaker)
{
    if(Speaker != none)
    {
        PlayDialogEvent(Speaker, 151);
    }
}

function PlayPlayerDeathDialog(KFPawn_Human Player)
{
    local KFPawn_Human KFPH;
    local float MaxDistanceSq;

    if((Player.VoiceGroupArch == none) || Player.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    PlayDialogEvent(Player, 123);
    MaxDistanceSq = GetEventRadiusSq(113, Player.GetVoiceGroupEventDataClass());
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(PawnCanSpotPawn(KFPH, Player, MaxDistanceSq, GetEventFOV(113, KFPH.GetVoiceGroupEventDataClass()), true))
        {
            if(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount() == 1)
            {
                PlayDialogEvent(KFPH, 113);
                continue;
            }
            if(KFCharacterInfo_Human(KFPH.CharacterArch).bIsFemale)
            {
                PlayDialogEvent(KFPH, 111);
                continue;
            }
            PlayDialogEvent(KFPH, 109);
        }        
    }    
}

function bool CheckSpottedDialogPriority(KFPawn_Human Spotter, int CheckEventID, int BestEventID)
{
    local DialogEventInfo CheckEventInfo, BestEventInfo;

    if(BestEventID < 0)
    {
        return true;
    }
    CheckEventInfo = Spotter.VoiceGroupArch.static.GetDialogEventInfo(CheckEventID);
    BestEventInfo = Spotter.VoiceGroupArch.static.GetDialogEventInfo(BestEventID);
    if(CheckEventInfo.Priority > BestEventInfo.Priority)
    {
        return false;        
    }
    else
    {
        return true;
    }
}

function CheckSpotMonsterDialog(Pawn Spotter, KFPawn_Monster Spotted)
{
    local int SpottedDialogEventID, BestSpottedEventID;
    local KFPawn_Human KFPHSpotter;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    BestSpottedEventID = -1;
    Spotted.MyKFAIC.bWasVisibleToEnemy = Spotted.MyKFAIC.bIsVisibleToEnemy;
    KFPHSpotter = KFPawn_Human(Spotter);
    if(KFPHSpotter == none)
    {
        return;
    }
    EventDataClass = KFPHSpotter.GetVoiceGroupEventDataClass();
    if(ActorWithinPawnFOV(Spotted, Spotter, GetEventFOV(125, EventDataClass)))
    {
        Spotted.MyKFAIC.bIsVisibleToEnemy = true;
        if(!Spotted.MyKFAIC.bWasVisibleToEnemy && Spotted.MyKFAIC.bIsVisibleToEnemy)
        {
            if(ActorWithinPawnRadius(Spotted, Spotter, GetEventRadius(136, EventDataClass)))
            {
                PlayDialogEvent(KFPHSpotter, 136);                
            }
            else
            {
                if(ActorWithinPawnRadius(Spotted, Spotter, GetEventRadius(125, EventDataClass)))
                {
                    SpottedDialogEventID = Spotted.GetSpotterDialogID();
                    if(CheckSpottedDialogPriority(KFPHSpotter, SpottedDialogEventID, BestSpottedEventID))
                    {
                        BestSpottedEventID = SpottedDialogEventID;
                    }
                    PlayDialogEvent(KFPHSpotter, BestSpottedEventID);
                }
            }
        }        
    }
    else
    {
        Spotted.MyKFAIC.bIsVisibleToEnemy = false;
    }
}

function CheckSpottedDialog()
{
    local Pawn P;
    local KFPawn_Human KFPH;
    local KFPawn_Monster BestMonster;
    local int SpottedCount, SpottedEventID, NumOptions, BestOptionID;

    SpottedEventID = -1;
    BestOptionID = -1;
    if(((NextSpotterPawn == none) || NextSpotterPawn.bDeleteMe) || !NextSpotterPawn.IsAliveAndWell())
    {
        NextSpotterPawn = WorldInfo.PawnList;
    }
    P = NextSpotterPawn;
    J0xB2:

    if(P != none)
    {
        KFPH = KFPawn_Human(P);
        if((KFPH == none) || !PawnIsValidPlayer(KFPH))
        {            
        }
        else
        {
            if(KFPH.TimeSpentIdling() > IdleTimeforSpottingZed)
            {
                BestMonster = FindBestSpottedMonster(KFPH, SpottedCount, SpottedEventID);
                if((BestMonster != none) && FastTrace(KFPH.GetPawnViewLocation(), BestMonster.Location))
                {
                    AddRandomDialogOption(KFPH, SpottedEventID, NumOptions, BestOptionID);
                    if((float(BestMonster.Health) / float(BestMonster.HealthMax)) <= ZedAlmostDeadHealthPctThreshold)
                    {
                        AddRandomDialogOption(KFPH, 145, NumOptions, BestOptionID);
                    }
                    if(SpottedCount >= SpotLargeHordeNumZeds)
                    {
                        AddRandomDialogOption(KFPH, 131, NumOptions, BestOptionID);
                    }
                    if(SpotEnemyBehindPlayer(KFPH, BestMonster))
                    {
                        AddRandomDialogOption(KFPH, 137, NumOptions, BestOptionID);
                    }
                }
            }
            if((KFPH.SprintTowardZedStartTime > float(0)) && (WorldInfo.TimeSeconds - KFPH.SprintTowardZedStartTime) >= SprintTowardZedDuration)
            {
                AddRandomDialogOption(KFPH, 108, NumOptions, BestOptionID);
            }
            if((BestOptionID < 0) || GetEventPriority(BestOptionID, KFPH.GetVoiceGroupEventDataClass()) >= 5)
            {
                CheckSpotPickupsDialog(KFPH, NumOptions, BestOptionID);
            }
            PlayDialogEvent(KFPH, BestOptionID);
            PlayBasicSpottedResponse(KFPH, BestMonster, BestOptionID);
            NextSpotterPawn = KFPH.NextPawn;
            goto J0x489;
        }
        P = P.NextPawn;
        goto J0xB2;
    }
    J0x489:

}

function KFPawn_Monster FindBestSpottedMonster(KFPawn_Human Spotter, out int NumSpotted, out int BestSpottedEventID)
{
    local Pawn MP;
    local KFPawn_Monster KFPM, BestMonster;
    local int SpottedDialogEventID;
    local bool bSprintingTowardZed;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = Spotter.GetVoiceGroupEventDataClass();
    MP = WorldInfo.PawnList;
    J0x51:

    if(MP != none)
    {
        if(!MP.IsAliveAndWell() || MP.GetTeamNum() == 0)
        {            
        }
        else
        {
            KFPM = KFPawn_Monster(MP);
            if(KFPM == none)
            {                
            }
            else
            {
                if(KFPM.bIsHeadless)
                {                    
                }
                else
                {
                    if(VSizeSq(KFPM.Location - Spotter.Location) >= (GetEventRadiusSq(125, EventDataClass)))
                    {                        
                    }
                    else
                    {
                        if(ActorWithinPawnFOV(KFPM, Spotter, GetEventFOV(125, EventDataClass)))
                        {
                            ++ NumSpotted;
                            SpottedDialogEventID = KFPM.GetSpotterDialogID();
                            if(CheckSpottedDialogPriority(Spotter, SpottedDialogEventID, BestSpottedEventID))
                            {
                                BestSpottedEventID = SpottedDialogEventID;
                                BestMonster = KFPM;
                            }
                            if((Spotter.bIsSprinting && !bSprintingTowardZed) && ActorWithinPawnFOV(KFPM, Spotter, GetEventFOV(108, EventDataClass)))
                            {
                                bSprintingTowardZed = true;
                                if(Spotter.SprintTowardZedStartTime < float(0))
                                {
                                    Spotter.SprintTowardZedStartTime = WorldInfo.TimeSeconds;
                                }
                            }
                        }
                    }
                }
            }
        }
        MP = MP.NextPawn;
        goto J0x51;
    }
    if(!bSprintingTowardZed)
    {
        Spotter.SprintTowardZedStartTime = -1;
    }
    return BestMonster;
}

function bool SpotEnemyBehindPlayer(KFPawn_Human Spotter, KFPawn_Monster Enemy)
{
    local Pawn OtherPlayer;
    local Vector FacingDir, ToEnemyDir, ToPlayerDir;
    local float EventRadiusSq;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = Spotter.GetVoiceGroupEventDataClass();
    OtherPlayer = WorldInfo.PawnList;
    J0x51:

    if(OtherPlayer != none)
    {
        if((!OtherPlayer.IsAliveAndWell() || OtherPlayer.GetTeamNum() != 0) || OtherPlayer == Spotter)
        {            
        }
        else
        {
            ToPlayerDir = OtherPlayer.Location - Spotter.Location;
            if(VSizeSq(ToPlayerDir) >= (GetEventRadiusSq(125, EventDataClass)))
            {                
            }
            else
            {
                FacingDir = vector(Spotter.Rotation);
                ToPlayerDir = Normal(ToPlayerDir);
                if((ToPlayerDir Dot FacingDir) < (GetEventFOV(125, EventDataClass)))
                {                    
                }
                else
                {
                    EventRadiusSq = GetEventRadiusSq(137, EventDataClass);
                    ToEnemyDir = Enemy.Location - OtherPlayer.Location;
                    if(VSizeSq(ToEnemyDir) >= EventRadiusSq)
                    {                        
                    }
                    else
                    {
                        FacingDir = vector(OtherPlayer.Rotation);
                        ToEnemyDir = Normal(ToEnemyDir);
                        if((ToEnemyDir Dot FacingDir) <= -GetEventFOV(137, EventDataClass))
                        {
                            if(FastTrace(Spotter.GetPawnViewLocation(), OtherPlayer.GetPawnViewLocation()))
                            {
                                return true;
                            }
                            goto J0x314;
                        }
                    }
                }
            }
        }
        OtherPlayer = OtherPlayer.NextPawn;
        goto J0x51;
    }
    J0x314:

    return false;
}

function CheckSpotPickupsDialog(KFPawn_Human Spotter, out int out_NumOptions, out int out_BestOptionID)
{
    local int I;
    local KFGameInfo KFGI;
    local bool bSpottedWeapon, bSpottedArmor, bSpottedAmmo;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI == none)
    {
        return;
    }
    EventDataClass = Spotter.GetVoiceGroupEventDataClass();
    I = 0;
    J0x76:

    if(I < KFGI.AllPickupFactories.Length)
    {
        if(KFGI.AllPickupFactories[I].bPickupHidden)
        {            
        }
        else
        {
            if(KFGI.AllPickupFactories[I].CurrentPickupIsWeapon() && bSpottedWeapon)
            {                
            }
            else
            {
                if(KFGI.AllPickupFactories[I].CurrentPickupIsArmor() && bSpottedArmor)
                {                    
                }
                else
                {
                    if(KFGI.AllPickupFactories[I].CurrentPickupIsAmmo() && bSpottedAmmo)
                    {                        
                    }
                    else
                    {
                        if(!PawnCanSpotActor(Spotter, KFGI.AllPickupFactories[I], GetEventRadiusSq(37, EventDataClass), GetEventFOV(37, EventDataClass), true))
                        {                            
                        }
                        else
                        {
                            if(KFGI.AllPickupFactories[I].CurrentPickupIsWeapon())
                            {
                                AddRandomDialogOption(Spotter, 37, out_NumOptions, out_BestOptionID);
                                bSpottedWeapon = true;                                
                            }
                            else
                            {
                                if(KFGI.AllPickupFactories[I].CurrentPickupIsArmor())
                                {
                                    AddRandomDialogOption(Spotter, 36, out_NumOptions, out_BestOptionID);
                                    bSpottedArmor = true;                                    
                                }
                                else
                                {
                                    if(KFGI.AllPickupFactories[I].CurrentPickupIsAmmo())
                                    {
                                        AddRandomDialogOption(Spotter, 35, out_NumOptions, out_BestOptionID);
                                        bSpottedAmmo = true;
                                    }
                                }
                            }
                            if((bSpottedWeapon && bSpottedArmor) && bSpottedAmmo)
                            {
                                goto J0x3EC;
                            }
                        }
                    }
                }
            }
        }
        ++ I;
        goto J0x76;
    }
    J0x3EC:

}

function PlaySpotCloakDialog(KFPawn_Monster Cloaker, bool bNewCloaking)
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(PlayerCanSpotEnemy(KFPH, Cloaker))
        {
            if(bNewCloaking)
            {
                PlayDialogEvent(KFPH, 143);
                continue;
            }
            PlayDialogEvent(KFPH, 144);
        }        
    }    
}

function PlaySpotEnragedDialog(KFPawn_Monster EnragedEnemy)
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(PlayerCanSpotEnemy(KFPH, EnragedEnemy))
        {
            PlayDialogEvent(KFPH, 153);
        }        
    }    
}

function PlaySpotChargeDialog(KFPawn_Monster ChargingEnemy, KFPawn TargetPlayer)
{
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(TargetPlayer);
    if(KFPH == none)
    {
        return;
    }
    if((KFPH.VoiceGroupArch == none) || KFPH.VoiceGroupArch.default.EventDataClass == none)
    {
        return;
    }
    if(PlayerCanSpotEnemy(KFPH, ChargingEnemy))
    {
        PlayDialogEvent(KFPH, 152);
    }
}

function PlaySpotRocketsDialog(KFPawn_Monster Spotted)
{
    local KFPawn_Human KFPH;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        EventDataClass = KFPH.GetVoiceGroupEventDataClass();
        if(PlayerCanSpotEnemy(KFPH, Spotted, GetEventRadiusSq(155, EventDataClass), GetEventFOV(155, EventDataClass)))
        {
            PlayDialogEvent(KFPH, 155);
        }        
    }    
}

function PlaySpotGrenadeDialog(KFPawn_Monster Spotted)
{
    local KFPawn_Human KFPH;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        EventDataClass = KFPH.GetVoiceGroupEventDataClass();
        if(PlayerCanSpotEnemy(KFPH, Spotted, GetEventRadiusSq(156, EventDataClass), GetEventFOV(156, EventDataClass)))
        {
            PlayDialogEvent(KFPH, 156);
        }        
    }    
}

function PlayBeingShotAtDialog(KFPawn_Human Target, KFPawn_Monster shooter)
{
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    if(Target == none)
    {
        return;
    }
    EventDataClass = Target.GetVoiceGroupEventDataClass();
    if(PlayerCanSpotEnemy(Target, shooter, GetEventRadiusSq(154, EventDataClass), GetEventFOV(154, EventDataClass)))
    {
        PlayDialogEvent(Target, 154);
    }
}

function PlaySpotZedHealingDialog(KFPawn_Monster Spotted)
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(PlayerCanSpotEnemy(KFPH, Spotted))
        {
            PlayDialogEvent(KFPH, 149);
        }        
    }    
}

function PlaySpotRunAwayDialog(KFPawn_Monster Spotted)
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(PlayerCanSpotEnemy(KFPH, Spotted))
        {
            PlayDialogEvent(KFPH, 146);
        }        
    }    
}

function PlayLoseSightOfBossDialog(KFPawn_Monster Boss, KFPawn_Human Speaker)
{
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = Speaker.GetVoiceGroupEventDataClass();
    if(ActorWithinPawnFOV(Boss, Speaker, GetEventFOV(148, EventDataClass)))
    {
        PlayDialogEvent(Speaker, 148);
    }
}

function PlayBasicSpottedResponse(KFPawn_Human Spotter, KFPawn_Monster Spotted, int SpottedEventID)
{
    local int ResponseEventID;

    if(Spotted == none)
    {
        return;
    }
    switch(SpottedEventID)
    {
        case 128:
            ResponseEventID = 133;
            break;
        case 130:
        case 129:
        case 127:
        case 126:
            ResponseEventID = 134;
            break;
        case 125:
            ResponseEventID = 132;
            break;
        default:
            return;
            break;
    }
    PlayBasicDialogResponse(Spotter, SpottedEventID, ResponseEventID,, Spotted, true);
}

function CheckIdleDialog()
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(KFPH.TimeSpentIdling() > IdleTimeForSituationalDialog)
        {
            PlaySituationalDialog(KFPH);
        }        
    }    
}

function PlaySituationalDialog(KFPawn_Human Speaker)
{
    local KFPawn_Human Target;
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = Speaker.GetVoiceGroupEventDataClass();
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', Target)
    {
        if((Target == Speaker) || !PawnIsValidPlayer(Target))
        {
            continue;            
        }
        if(PawnCanSpotPawn(Speaker, Target, GetEventRadiusSq(163, EventDataClass), GetEventFOV(163, EventDataClass)))
        {
            break;
        }        
    }    
    PlayRandomSituationalDialog(Speaker, Target);
}

function PlayRandomSituationalDialog(KFPawn_Human Speaker, KFPawn_Human Target)
{
    local int NumPlayers, NumLivingPlayers, NumOptions, BestOptionID;

    NumPlayers = WorldInfo.Game.NumPlayers;
    NumLivingPlayers = KFGameInfo(WorldInfo.Game).GetLivingPlayerCount();
    BestOptionID = -1;
    if(Speaker.EnvironmentDialogEventID > 0)
    {
        AddRandomDialogOption(Speaker, Speaker.EnvironmentDialogEventID, NumOptions, BestOptionID);
    }
    if(Target != none)
    {
        if((Target.MyKFWeapon != none) && Target.MyKFWeapon.GetMaxAmmoAmount(0) > 0)
        {
            AddRandomDialogOption(Speaker, 160, NumOptions, BestOptionID);
        }
        AddRandomDialogOption(Speaker, 157, NumOptions, BestOptionID);
        AddRandomDialogOption(Speaker, 163, NumOptions, BestOptionID);
        if(NumLivingPlayers == NumPlayers)
        {
            AddRandomDialogOption(Speaker, 164, NumOptions, BestOptionID);            
        }
        else
        {
            if(NumLivingPlayers > (NumPlayers / 2))
            {
                AddRandomDialogOption(Speaker, 168, NumOptions, BestOptionID);                
            }
            else
            {
                if(NumLivingPlayers == (NumPlayers / 2))
                {
                    AddRandomDialogOption(Speaker, 166, NumOptions, BestOptionID);
                }
            }
        }
        if(Speaker.PlayerReplicationInfo.Score >= float(IdleHighDoshThreshold))
        {
            AddRandomDialogOption(Speaker, 170, NumOptions, BestOptionID);            
        }
        else
        {
            if(Speaker.PlayerReplicationInfo.Score <= float(IdleLowDoshThreshold))
            {
                AddRandomDialogOption(Speaker, 173, NumOptions, BestOptionID);
            }
        }
        PlayDialogEvent(Speaker, BestOptionID);
        PlayCustomDialogResponse(Speaker, Target, BestOptionID, PlayRandomSituationalResponse, true);        
    }
    else
    {
        if((NumPlayers > 1) && NumLivingPlayers == 1)
        {
            AddRandomDialogOption(Speaker, 175, NumOptions, BestOptionID);
        }
    }
    PlayDialogEvent(Speaker, BestOptionID);
}

function PlayRandomSituationalResponse(const out DialogResponseInfo RespInfo)
{
    local int ResponseID, ResponderDoshAmt;
    local float ResponderHealthPct, ResponderAmmoPCt;

    ResponseID = -1;
    switch(RespInfo.RespondingToID)
    {
        case 157:
            ResponderHealthPct = RespInfo.Speaker.GetHealthPercentage();
            if(ResponderHealthPct >= NeedNoMoreHealingPctThreshold)
            {
                ResponseID = 159;                
            }
            else
            {
                if(ResponderHealthPct < NeedMoreHealingPctThreshold)
                {
                    ResponseID = 158;
                }
            }
            break;
        case 160:
            ResponderAmmoPCt = RespInfo.Speaker.MyKFWeapon.GetAmmoPercentage();
            if(ResponderAmmoPCt >= 0)
            {
                if(ResponderAmmoPCt > float(IdleHighAmmoPctThreshold))
                {
                    ResponseID = 162;                    
                }
                else
                {
                    if(ResponderAmmoPCt < float(IdleLowAmmoPctThreshold))
                    {
                        ResponseID = 161;
                    }
                }
            }
            break;
        case 164:
            ResponseID = 165;
            break;
        case 166:
            ResponseID = 167;
            break;
        case 168:
            ResponseID = 169;
            break;
        case 170:
            ResponderDoshAmt = int(RespInfo.Speaker.PlayerReplicationInfo.Score);
            if(ResponderDoshAmt > IdleHighDoshThreshold)
            {
                ResponseID = 171;                
            }
            else
            {
                if(ResponderDoshAmt < IdleLowDoshThreshold)
                {
                    ResponseID = 172;
                }
            }
            break;
        case 173:
            ResponderDoshAmt = int(RespInfo.Speaker.PlayerReplicationInfo.Score);
            if(ResponderDoshAmt < IdleLowDoshThreshold)
            {
                ResponseID = 174;
            }
            break;
        default:
            break;
    }
    if(ResponseID >= 0)
    {
        PlayDialogEvent(RespInfo.Speaker, ResponseID);
    }
}

function PlayWaveStartDialog(bool bBossWave)
{
    local int RandomPlayer;
    local KFPawn_Human KFPH;

    RandomPlayer = Rand(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount());
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if((PawnIsValidPlayer(KFPH)) && -- RandomPlayer == 0)
        {
            break;
        }        
    }    
    if(bBossWave)
    {
        PlayDialogEvent(KFPH, 179);        
    }
    else
    {
        PlayDialogEvent(KFPH, 176);
    }
}

function PlayEnvironmentalDialog(KFPawn_Human Speaker, int EventID)
{
    PlayDialogEvent(Speaker, EventID);
}

function PlayAcceptObjectiveDialog(array<PlayerReplicationInfo> PRIsInObj)
{
    local array<KFPawn_Human> PawnsInObj;

    GetHumanPawnsInObj(PawnsInObj, PRIsInObj);
    PlayObjectiveDialogOnRandomPlayers(PawnsInObj, 206);
}

function PlayDeclineObjectiveDialog(array<PlayerReplicationInfo> PRIsInObj)
{
    local array<KFPawn_Human> PawnsInObj;

    GetHumanPawnsInObj(PawnsInObj, PRIsInObj);
    PlayObjectiveDialogOnRandomPlayers(PawnsInObj, 205);
}

function PlayWinObjectiveDialog(array<PlayerReplicationInfo> PRIsInObj)
{
    local array<KFPawn_Human> PawnsInObj;

    GetHumanPawnsInObj(PawnsInObj, PRIsInObj);
    PlayObjectiveDialogOnRandomPlayers(PawnsInObj, 201, 202);
}

function PlayLoseObjectiveDialog(array<PlayerReplicationInfo> PRIsInObj)
{
    local array<KFPawn_Human> PawnsInObj;

    GetHumanPawnsInObj(PawnsInObj, PRIsInObj);
    PlayObjectiveDialogOnRandomPlayers(PawnsInObj, 203, 204);
}

function GetHumanPawnsInObj(out array<KFPawn_Human> out_PawnsInObj, const out array<PlayerReplicationInfo> PRIsInObj)
{
    local KFPawn_Human KFPH;
    local int PRIIdx;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(PawnIsValidPlayer(KFPH))
        {
            PRIIdx = PRIsInObj.Find(KFPH.PlayerReplicationInfo;
            if(PRIIdx != -1)
            {
                out_PawnsInObj.AddItem(KFPH;
            }
        }        
    }    
}

function PlayObjectiveDialogOnRandomPlayers(array<KFPawn_Human> PawnsInObj, int EventID, optional int ResponseID)
{
    local int RandIdx;
    local KFPawn_Human Speaker, Responder;

    ResponseID = -1;
    RandIdx = Rand(PawnsInObj.Length);
    Speaker = PawnsInObj[RandIdx];
    PawnsInObj.Remove(RandIdx, 1;
    if(Speaker != none)
    {
        PlayDialogEvent(Speaker, EventID);
    }
    if(ResponseID < 0)
    {
        return;
    }
    RandIdx = Rand(PawnsInObj.Length);
    Responder = PawnsInObj[RandIdx];
    if(Responder != none)
    {
        PlayBasicDialogResponse(Speaker, EventID, ResponseID, Responder,, true);
    }
}

function PlayDefendObjDialog(byte PrevObjProgress, byte CurrObjProgress)
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(!PawnIsValidPlayer(KFPH))
        {
            continue;            
        }
        if(CurrObjProgress == 0)
        {
            PlayDialogEvent(KFPH, 207);
            continue;
        }
        if((PrevObjProgress < 100) && CurrObjProgress >= 100)
        {
            PlayDialogEvent(KFPH, 201);
            continue;
        }
        if((PrevObjProgress < 50) && CurrObjProgress >= 50)
        {
            PlayDialogEvent(KFPH, 208);
        }        
    }    
}

function PlaySwitchToFavoriteWeaponDialog(KFPawn_Human Speaker)
{
    local int FavoriteWeaponIndex;
    local KFCharacterInfo_Human KFCI;

    if((Speaker == none) || Speaker.Weapon == none)
    {
        return;
    }
    KFCI = KFCharacterInfo_Human(Speaker.CharacterArch);
    if(KFCI == none)
    {
        return;
    }
    FavoriteWeaponIndex = KFCI.GetFavoriteWeaponIndexOf(Speaker.Weapon);
    if(FavoriteWeaponIndex < 0)
    {
        return;
    }
    PlayDialogEvent(Speaker, 42 + FavoriteWeaponIndex);
}

function PlayVoiceCommandDialog(KFPawn Speaker, int CommandIndex)
{
    switch(CommandIndex)
    {
        case 0:
            PlayDialogEvent(Speaker, 5);
            break;
        case 1:
            PlayDialogEvent(Speaker, 3);
            break;
        case 2:
            PlayDialogEvent(Speaker, 7);
            break;
        case 3:
            PlayDialogEvent(Speaker, 2);
            break;
        case 4:
            PlayDialogEvent(Speaker, 1);
            break;
        case 5:
            PlayDialogEvent(Speaker, 0);
            break;
        case 6:
            PlayDialogEvent(Speaker, 8);
            break;
        case 7:
            PlayDialogEvent(Speaker, 9);
            break;
        case 9:
            PlayDialogEvent(Speaker, 230);
            break;
        default:
            break;
    }
}

function PlayBossMonologue(KFPawn Boss, byte MonologueType)
{
    if(MonologueType == 0)
    {
        PlayDialogEvent(Boss, 0);        
    }
    else
    {
        if(MonologueType == 1)
        {
            PlayDialogEvent(Boss, 13);
        }
    }
}

function PlayBossLoseSightOfDialog(KFPawn_Monster BossSpeaker, KFPawn_Human Target)
{
    local class<KFPawnVoiceGroupEventData> EventDataClass;

    EventDataClass = BossSpeaker.GetVoiceGroupEventDataClass();
    if(ActorWithinPawnFOV(Target, BossSpeaker, GetEventFOV(5, EventDataClass)))
    {
        PlayDialogEvent(BossSpeaker, 5);
    }
}

function PlayBossChallengeDialog(KFPawn Boss)
{
    PlayDialogEvent(Boss, 4);
}

function PlayBossGrabDialog(KFPawn Boss)
{
    PlayDialogEvent(Boss, 7);
}

function PlayBossHealDialog(KFPawn Boss)
{
    PlayDialogEvent(Boss, 8);
}

function PlayBossTakeDamageDialog(KFPawn Boss)
{
    if((float(Boss.Health) / float(Boss.HealthMax)) < 0.25)
    {
        PlayDialogEvent(Boss, 10);        
    }
    else
    {
        PlayDialogEvent(Boss, 9);
    }
}

function PlayBossDeathDialog(KFPawn Boss)
{
    PlayDialogEvent(Boss, 11);
}

function PlayBossLeapedDialog(KFPawn Boss)
{
    PlayDialogEvent(Boss, 14);
}

function PlayBossLandedDialog(KFPawn Boss)
{
    PlayDialogEvent(Boss, 15);
}

function PlayHansTickDialog(KFPawn Hans)
{
    local int NumPlayers, NumLivingPlayers, NumOptions, BestOptionID;
    local float PlayersAlivePct, DistToTargetSq, MaxDistToTargetSq;
    local KFPawn_ZedHansBase HansBase;

    BestOptionID = -1;
    if(Hans.bIsSprinting && Hans.MyKFAIC.Enemy != none)
    {
        DistToTargetSq = VSizeSq(Hans.Location - Hans.MyKFAIC.Enemy.Location);
        MaxDistToTargetSq = GetEventRadiusSq(17, Hans.GetVoiceGroupEventDataClass());
        if(DistToTargetSq <= MaxDistToTargetSq)
        {
            AddRandomDialogOption(Hans, 17, NumOptions, BestOptionID);
        }
    }
    NumPlayers = WorldInfo.Game.NumPlayers;
    NumLivingPlayers = KFGameInfo(WorldInfo.Game).GetLivingPlayerCount();
    if(NumLivingPlayers > 0)
    {
        HansBase = KFPawn_ZedHansBase(Hans);
        if((HansBase != none) && HansBase.bInHuntAndHealMode)
        {
            AddRandomDialogOption(Hans, 28, NumOptions, BestOptionID);
        }
        PlayersAlivePct = float(NumLivingPlayers) / float(NumPlayers);
        if(PlayersAlivePct >= 0.5)
        {
            AddRandomDialogOption(Hans, 1, NumOptions, BestOptionID);            
        }
        else
        {
            if(PlayersAlivePct >= 0.25)
            {
                AddRandomDialogOption(Hans, 2, NumOptions, BestOptionID);                
            }
            else
            {
                AddRandomDialogOption(Hans, 3, NumOptions, BestOptionID);
            }
        }
    }
    PlayDialogEvent(Hans, BestOptionID);
}

function PlayHansDrawGunsDialog(KFPawn Hans)
{
    PlayDialogEvent(Hans, 18);
}

function PlayHansNadeDialog(KFPawn Hans, bool bBarrage)
{
    if(bBarrage)
    {
        PlayDialogEvent(Hans, 30);        
    }
    else
    {
        PlayDialogEvent(Hans, 29);
    }
}

function PlayHansSmokeDialog(KFPawn Hans, bool bBarrage)
{
    if(bBarrage)
    {
        PlayDialogEvent(Hans, 27);        
    }
    else
    {
        PlayDialogEvent(Hans, 26);
    }
}

function PlayHansGasDialog(KFPawn Hans, bool bBarrage)
{
    if(bBarrage)
    {
        PlayDialogEvent(Hans, 24);        
    }
    else
    {
        PlayDialogEvent(Hans, 23);
    }
}

function PlayHansKilledDialog(KFPawn Hans, class<DamageType> dmgType)
{
    local int NumOptions, BestOptionID;

    BestOptionID = -1;
    AddRandomDialogOption(Hans, 12, NumOptions, BestOptionID);
    if(class<KFDamageType>(dmgType) != none)
    {
        AddRandomDialogOption(Hans, class<KFDamageType>(dmgType).static.GetKillerDialogID(), NumOptions, BestOptionID);
    }
    if(Hans.GetSpecialMoveTag() == 'Frenzy_Lunge')
    {
        AddRandomDialogOption(Hans, 22, NumOptions, BestOptionID);
    }
    PlayDialogEvent(Hans, BestOptionID);
}

function PlayHansDamagePlayerDialog(KFPawn Hans, class<DamageType> dmgType)
{
    if(dmgType.Name == 'KFDT_Ballistic_HansAK12')
    {
        PlayDialogEvent(Hans, 19);
    }
}

function PlayHansFrenzyDialog(KFPawn Hans)
{
    PlayDialogEvent(Hans, 21);
}

function PlayHansAOEDialog(KFPawn Hans)
{
    PlayDialogEvent(Hans, 37);
}

function PlayHansBattlePhaseDialog(KFPawn Hans, int CurrBattlePhase)
{
    if(!Hans.IsAliveAndWell())
    {
        return;
    }
    switch(CurrBattlePhase)
    {
        case 2:
            PlayDialogEvent(Hans, 34);
            break;
        case 3:
            PlayDialogEvent(Hans, 35);
            break;
        case 4:
            PlayDialogEvent(Hans, 36);
            break;
        default:
            break;
    }
}

function PlayPatriarchTickDialog(KFPawn Patty)
{
    local int NumPlayers, NumLivingPlayers, NumOptions, BestOptionID;
    local float PlayersAlivePct;

    BestOptionID = -1;
    NumPlayers = WorldInfo.Game.NumPlayers;
    NumLivingPlayers = KFGameInfo(WorldInfo.Game).GetLivingPlayerCount();
    if(NumLivingPlayers > 0)
    {
        PlayersAlivePct = float(NumLivingPlayers) / float(NumPlayers);
        if(PlayersAlivePct >= 0.5)
        {
            AddRandomDialogOption(Patty, 1, NumOptions, BestOptionID);            
        }
        else
        {
            if(PlayersAlivePct >= 0.25)
            {
                AddRandomDialogOption(Patty, 2, NumOptions, BestOptionID);                
            }
            else
            {
                AddRandomDialogOption(Patty, 3, NumOptions, BestOptionID);
            }
        }
    }
    PlayDialogEvent(Patty, BestOptionID);
}

function PlayPattyMinigunWarnDialog(KFPawn Patty)
{
    PlayDialogEvent(Patty, 16);
}

function PlayPattyMinigunAttackDialog(KFPawn Patty)
{
    PlayDialogEvent(Patty, 17);
}

function PlayPattyTentaclePullDialog(KFPawn Patty)
{
    PlayDialogEvent(Patty, 21);
}

function PlayPattyChildKilledDialog(KFPawn Patty)
{
    PlayDialogEvent(Patty, 25);
}

function PlayPattyKilledDialog(KFPawn Patty, class<DamageType> dmgType)
{
    local int NumOptions, BestOptionID;

    BestOptionID = -1;
    AddRandomDialogOption(Patty, 12, NumOptions, BestOptionID);
    if(class<KFDamageType>(dmgType) != none)
    {
        AddRandomDialogOption(Patty, class<KFDamageType>(dmgType).static.GetKillerDialogID(), NumOptions, BestOptionID);
    }
    PlayDialogEvent(Patty, BestOptionID);
}

function PlayPattyBattlePhaseDialog(KFPawn Patty, int CurrBattlePhase)
{
    if(!Patty.IsAliveAndWell())
    {
        return;
    }
    switch(CurrBattlePhase)
    {
        case 1:
            PlayDialogEvent(Patty, 26);
            break;
        case 2:
            PlayDialogEvent(Patty, 27);
            break;
        case 3:
            PlayDialogEvent(Patty, 28);
            break;
        default:
            break;
    }
}

function PlayPattyWhirlwindDialog(KFPawn Patty)
{
    PlayDialogEvent(Patty, 36);
}

defaultproperties
{
    bEnabled=true
    InterruptPriorityThreshold=2
    InterruptedByAnyPriorityThreshold=7
    WeldAboutToBreakThreshold=60
    NeedMoreHealingPctThreshold=0.75
    NeedNoMoreHealingPctThreshold=0.75
    CaughtSomeDoshAmt=50
    CaughtMuchDoshAmt=250
    NumZedsForPressureReload=1
    LowSpareAmmoPctThreshold=0.15
    NumKillsForOnARoll=6
    CloseCallKillHealthPctThreshold=0.3
    NumZedsInAreaForMassacre=9
    AreaRadiusForMassacre=2500
    TimeLimitForMassacre=30
    NumHitsForDeadHorse=3
    TimeBetweenHitsForDeadHorse=1
    TimeForContinuousDamageThreshold=3
    TimeBetweenHitsForContinuousDamage=0.75
    PlayerHealthPctForNearDeath=0.2
    PlayerTakeDamageStreakInterval=1
    PlayerTakeDamageStreakPctForScream=0.25
    IdleTimeforSpottingZed=5
    SpotLargeHordeNumZeds=6
    ZedAlmostDeadHealthPctThreshold=0.3
    SprintTowardZedDuration=1.5
    IdleTimeForSituationalDialog=7
    IdleLowDoshThreshold=350
    IdleHighDoshThreshold=3500
    TimeUntilStartSprintPanting=3
    StopBreathingAkEvent=AkEvent'WW_GLO_Runtime.Stop_Breathing'
    CollisionType=ECollisionType.COLLIDE_CustomDefault
}