/*******************************************************************************
 * KFGFxOptionsMenu_Graphics generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxOptionsMenu_Graphics extends KFGFxObject_Menu within GFxMoviePlayer
    native(UI);

const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;

enum PerfWarning
{
    PerfWarning_None,
    PerfWarning_Normal,
    PerfWarning_Severe,
    PerfWarning_MAX
};

enum SupportedAspectRatio
{
    KFASPECTRATIO_All,
    KFASPECTRATIO_Standard_4_3,
    KFASPECTRATIO_Standard_5_4,
    KFASPECTRATIO_Standard_3_2,
    KFASPECTRATIO_Wide_16_9,
    KFASPECTRATIO_Wide_16_10,
    KFASPECTRATIO_ExtraWide_2_1,
    KFASPECTRATIO_ExtraWide_21_9,
    KFASPECTRATIO_MultiMonitor,
    KFASPECTRATIO_MAX
};

enum GraphicsLevelPreset
{
    GRAPHICS_LOW,
    GRAPHICS_MEDIUM,
    GRAPHICS_HIGH,
    GRAPHICS_ULTRA,
    GRAPHICS_CUSTOM,
    GRAPHICS_MAX
};

struct native ResolutionSetting
{
    var int ResX;
    var int ResY;

    structdefaultproperties
    {
        ResX=0
        ResY=0
    }
};

struct native GraphicsQualitySetting
{
    var int EnvironmentDetailIndex;
    var int CharacterDetailIndex;
    var int FXQualityIndex;
    var int TextureResolutionIndex;
    var int TextureFilteringIndex;
    var int ShadowQualityIndex;
    var int RealtimeReflectionsIndex;
    var bool LightShafts;
    var bool VolumetricLighting;
    var bool LensFlares;
    var int AntiAliasingIndex;
    var int BloomIndex;
    var int MotionBlurIndex;
    var int AmbientOcclusionIndex;
    var int DOFIndex;
    var int FlexIndex;

    structdefaultproperties
    {
        EnvironmentDetailIndex=0
        CharacterDetailIndex=0
        FXQualityIndex=0
        TextureResolutionIndex=0
        TextureFilteringIndex=0
        ShadowQualityIndex=0
        RealtimeReflectionsIndex=0
        LightShafts=false
        VolumetricLighting=false
        LensFlares=false
        AntiAliasingIndex=0
        BloomIndex=0
        MotionBlurIndex=0
        AmbientOcclusionIndex=0
        DOFIndex=0
        FlexIndex=0
    }
};

struct native DisplaySetting
{
    var bool Fullscreen;
    var bool BorderlessWindow;

    structdefaultproperties
    {
        Fullscreen=false
        BorderlessWindow=false
    }
};

struct native VSyncSetting
{
    var bool VSync;

    structdefaultproperties
    {
        VSync=false
    }
};

struct native VariableFramerateSetting
{
    var bool VariableFrameRate;

    structdefaultproperties
    {
        VariableFrameRate=false
    }
};

struct native FilmGrainSetting
{
    var float FilmGrainScale;

    structdefaultproperties
    {
        FilmGrainScale=0
    }
};

struct native FlexSetting
{
    var int FlexLevel;

    structdefaultproperties
    {
        FlexLevel=0
    }
};

struct native EnvironmentDetailSetting
{
    var int DetailMode;
    var bool AllowLightFunctions;
    var bool bDisableCanBecomeDynamicWakeup;
    var float MakeDynamicCollisionThreshold;
    var float DestructionLifetimeScale;

    structdefaultproperties
    {
        DetailMode=0
        AllowLightFunctions=false
        bDisableCanBecomeDynamicWakeup=false
        MakeDynamicCollisionThreshold=0
        DestructionLifetimeScale=0
    }
};

struct native ShadowQualitySetting
{
    var bool bAllowWholeSceneDominantShadows;
    var bool bOverrideMapWholeSceneDominantShadowSetting;
    var bool bAllowDynamicShadows;
    var bool bAllowPerObjectShadows;
    var int MaxWholeSceneDominantShadowResolution;
    var int MaxShadowResolution;
    var int ShadowFadeResolution;
    var int MinShadowResolution;
    var float ShadowTexelsPerPixel;
    var float GlobalShadowDistanceScale;
    var bool AllowForegroundPreshadows;

    structdefaultproperties
    {
        bAllowWholeSceneDominantShadows=false
        bOverrideMapWholeSceneDominantShadowSetting=false
        bAllowDynamicShadows=false
        bAllowPerObjectShadows=false
        MaxWholeSceneDominantShadowResolution=0
        MaxShadowResolution=0
        ShadowFadeResolution=0
        MinShadowResolution=0
        ShadowTexelsPerPixel=0
        GlobalShadowDistanceScale=0
        AllowForegroundPreshadows=false
    }
};

struct native FXQualitySetting
{
    var int ParticleLODBias;
    var int DistanceFogQuality;
    var bool Distortion;
    var bool FilteredDistortion;
    var bool DropParticleDistortion;
    var bool AllowSecondaryBloodEffects;
    var float EmitterPoolScale;
    var float ShellEjectLifetime;
    var bool AllowExplosionLights;
    var bool AllowSprayActorLights;
    var bool AllowFootstepSounds;
    var bool AllowBloodSplatterDecals;
    var bool AllowRagdollAndGoreOnDeadBodies;
    var bool AllowPilotLights;
    var int MaxImpactEffectDecals;
    var int MaxExplosionDecals;
    var float GoreFXLifetimeMultiplier;
    var int MaxBloodEffects;
    var int MaxGoreEffects;
    var int MaxPersistentSplatsPerFrame;

    structdefaultproperties
    {
        ParticleLODBias=0
        DistanceFogQuality=0
        Distortion=false
        FilteredDistortion=false
        DropParticleDistortion=false
        AllowSecondaryBloodEffects=false
        EmitterPoolScale=0
        ShellEjectLifetime=0
        AllowExplosionLights=false
        AllowSprayActorLights=false
        AllowFootstepSounds=false
        AllowBloodSplatterDecals=false
        AllowRagdollAndGoreOnDeadBodies=false
        AllowPilotLights=false
        MaxImpactEffectDecals=0
        MaxExplosionDecals=0
        GoreFXLifetimeMultiplier=0
        MaxBloodEffects=0
        MaxGoreEffects=0
        MaxPersistentSplatsPerFrame=0
    }
};

struct native RealtimeReflectionsSetting
{
    var bool bAllowScreenSpaceReflections;

    structdefaultproperties
    {
        bAllowScreenSpaceReflections=false
    }
};

struct native CharacterDetailSetting
{
    var int SkeletalMeshLODBias;
    var bool AllowSubsurfaceScattering;
    var float KinematicUpdateDistFactorScale;
    var bool ShouldCorpseCollideWithDead;
    var bool ShouldCorpseCollideWithLiving;
    var bool ShouldCorpseCollideWithDeadAfterSleep;
    var int MaxBodyWoundDecals;
    var int MaxDeadBodies;
    var bool bAllowPhysics;

    structdefaultproperties
    {
        SkeletalMeshLODBias=0
        AllowSubsurfaceScattering=false
        KinematicUpdateDistFactorScale=0
        ShouldCorpseCollideWithDead=false
        ShouldCorpseCollideWithLiving=false
        ShouldCorpseCollideWithDeadAfterSleep=false
        MaxBodyWoundDecals=0
        MaxDeadBodies=0
        bAllowPhysics=false
    }
};

struct native LightShaftsSetting
{
    var bool bAllowLightShafts;

    structdefaultproperties
    {
        bAllowLightShafts=false
    }
};

struct native VolumetricLightingSetting
{
    var bool bAllowLightCones;

    structdefaultproperties
    {
        bAllowLightCones=false
    }
};

struct native LensFlareSetting
{
    var bool bAllowLensFlares;

    structdefaultproperties
    {
        bAllowLensFlares=false
    }
};

struct native TextureResolutionSetting
{
    var int UIBias;
    var int ShadowmapBias;
    var int CharacterBias;
    var int Weapon1stBias;
    var int Weapon3rdBias;
    var int EnvironmentBias;
    var int FXBias;

    structdefaultproperties
    {
        UIBias=0
        ShadowmapBias=0
        CharacterBias=0
        Weapon1stBias=0
        Weapon3rdBias=0
        EnvironmentBias=0
        FXBias=0
    }
};

struct native TextureFilterSetting
{
    var name MinMagFilter;
    var name MipFilter;
    var int MaxAnisotropy;

    structdefaultproperties
    {
        MinMagFilter=None
        MipFilter=None
        MaxAnisotropy=0
    }
};

struct native BloomSetting
{
    var bool Bloom;
    var int BloomQuality;

    structdefaultproperties
    {
        Bloom=false
        BloomQuality=0
    }
};

struct native MotionBlurSetting
{
    var bool MotionBlur;
    var int MotionBlurQuality;

    structdefaultproperties
    {
        MotionBlur=false
        MotionBlurQuality=0
    }
};

struct native AntiAliasingSetting
{
    var bool PostProcessAA;

    structdefaultproperties
    {
        PostProcessAA=false
    }
};

struct native AmbientOcclusionSetting
{
    var bool AmbientOcclusion;
    var bool HBAO;

    structdefaultproperties
    {
        AmbientOcclusion=false
        HBAO=false
    }
};

struct native DOFSetting
{
    var bool DepthOfField;
    var int DepthOfFieldQuality;

    structdefaultproperties
    {
        DepthOfField=false
        DepthOfFieldQuality=0
    }
};

struct native GFXSettings
{
    var ResolutionSetting Resolution;
    var VSyncSetting VSync;
    var DisplaySetting Display;
    var VariableFramerateSetting VariableFPS;
    var FilmGrainSetting FilmGrain;
    var FlexSetting Flex;
    var EnvironmentDetailSetting EnvironmentDetail;
    var CharacterDetailSetting CharacterDetail;
    var FXQualitySetting FX;
    var TextureResolutionSetting TextureResolution;
    var TextureFilterSetting TextureFiltering;
    var ShadowQualitySetting Shadows;
    var RealtimeReflectionsSetting RealtimeReflections;
    var AntiAliasingSetting AntiAliasing;
    var BloomSetting Bloom;
    var MotionBlurSetting MotionBlur;
    var AmbientOcclusionSetting AmbientOcclusion;
    var DOFSetting DepthOfField;
    var VolumetricLightingSetting VolumetricLighting;
    var LensFlareSetting LensFlares;
    var LightShaftsSetting LightShafts;

    structdefaultproperties
    {
        Resolution=(ResX=0,ResY=0)
        VSync=(VSync=false)
        Display=(Fullscreen=false,BorderlessWindow=false)
        VariableFPS=(VariableFrameRate=false)
        FilmGrain=(FilmGrainScale=0)
        Flex=(FlexLevel=0)
        EnvironmentDetail=(DetailMode=0,AllowLightFunctions=false,bDisableCanBecomeDynamicWakeup=false,MakeDynamicCollisionThreshold=0,DestructionLifetimeScale=0)
        CharacterDetail=(SkeletalMeshLODBias=0,AllowSubsurfaceScattering=false,KinematicUpdateDistFactorScale=0,ShouldCorpseCollideWithDead=false,ShouldCorpseCollideWithLiving=false,ShouldCorpseCollideWithDeadAfterSleep=false,MaxBodyWoundDecals=0,MaxDeadBodies=0,bAllowPhysics=false)
        FX=(ParticleLODBias=0,DistanceFogQuality=0,Distortion=false,FilteredDistortion=false,DropParticleDistortion=false,AllowSecondaryBloodEffects=false,EmitterPoolScale=0,ShellEjectLifetime=0,AllowExplosionLights=false,AllowSprayActorLights=false,AllowFootstepSounds=false,AllowBloodSplatterDecals=false,AllowRagdollAndGoreOnDeadBodies=false,AllowPilotLights=false,MaxImpactEffectDecals=0,MaxExplosionDecals=0,GoreFXLifetimeMultiplier=0,MaxBloodEffects=0,MaxGoreEffects=0,MaxPersistentSplatsPerFrame=0)
        TextureResolution=(UIBias=0,ShadowmapBias=0,CharacterBias=0,Weapon1stBias=0,Weapon3rdBias=0,EnvironmentBias=0,FXBias=0)
        TextureFiltering=(MinMagFilter=None,MipFilter=None,MaxAnisotropy=0)
        Shadows=(bAllowWholeSceneDominantShadows=false,bOverrideMapWholeSceneDominantShadowSetting=false,bAllowDynamicShadows=false,bAllowPerObjectShadows=false,MaxWholeSceneDominantShadowResolution=0,MaxShadowResolution=0,ShadowFadeResolution=0,MinShadowResolution=0,ShadowTexelsPerPixel=0,GlobalShadowDistanceScale=0,AllowForegroundPreshadows=false)
        RealtimeReflections=(bAllowScreenSpaceReflections=false)
        AntiAliasing=(PostProcessAA=false)
        Bloom=(Bloom=false,BloomQuality=0)
        MotionBlur=(MotionBlur=false,MotionBlurQuality=0)
        AmbientOcclusion=(AmbientOcclusion=false,HBAO=false)
        DepthOfField=(DepthOfField=false,DepthOfFieldQuality=0)
        VolumetricLighting=(bAllowLightCones=false)
        LensFlares=(bAllowLensFlares=false)
        LightShafts=(bAllowLightShafts=false)
    }
};

var bool bIsRevertCoundownActive;
var transient bool UnsavedPendingRestart;
var byte TimeCount;
var const byte ExpireTime;
var const localized string FlexPopUpString;
var const localized string KeepSettingsPromptString;
var const localized string WarningPromptString;
var const localized string WillExpireString;
var const localized string PerformanceDescString[2];
var const localized string RestartDescString;
var const localized string SingleWarningString;
var const localized string DoubleWarningString;
var const localized string UnsavedChangesString;
var const localized string ContinueString;
var const localized string SaveChangesString;
var const localized string AdjustGammaDescription;
var const localized string ResetGammaString;
var const localized string SetGammaString;
var const localized string GraphicsString;
var const localized string BasicString;
var const localized string AdvancedString;
var const localized string EffectsString;
var const localized string AspectRatioString;
var const localized string ResolutionString;
var const localized string GraphicsQualityString;
var const localized string VSyncString;
var const localized string FullscreenString;
var const localized string VariableFrameRateString;
var const localized string AdjustGammaString;
var const localized string FilmGrainString;
var const localized string EnvironmentDetailsString;
var const localized string CharacterDetailString;
var const localized string FXString;
var const localized string TextureResolutionString;
var const localized string TextureFilteringString;
var const localized string ShadowsString;
var const localized string RealtimeReflectionsString;
var const localized string AntiAliasingString;
var const localized string BloomString;
var const localized string MotionBlurString;
var const localized string AmbientOcclusionString;
var const localized string DepthOfFieldString;
var const localized string VolumetricLightingString;
var const localized string lensFlaresString;
var const localized string LightShaftsString;
var const localized string CustomString;
var const localized string IniOverrideString;
var const localized string OKString;
var const localized string ApplyString;
var const localized string CancelString;
var const localized string DefaultString;
var const localized string PhysicsLevelString;
var const localized array<localized string> PhysicsLevelOptionStrings;
var const localized array<localized string> PhysicsLevelSuggestionStrings;
var const localized string AspectRatioString_All;
var const localized string StandardAspectRatioString_4_3;
var const localized string StandardAspectRatioString_5_4;
var const localized string StandardAspectRatioString_3_2;
var const localized string WideAspectRatioString_16_9;
var const localized string WideAspectRatioString_16_10;
var const localized string ExtraWideAspectRatioString_2_1;
var const localized string ExtraWideAspectRatioString_21_9;
var const localized string MultiMonitorAspectRatioString;
var const localized array<localized string> FullScreenStringOptions;
var const localized array<localized string> GraphicsQualityStringOptions;
var const localized array<localized string> VSyncStringOptions;
var const localized array<localized string> EnvironmentDetailsStringOptions;
var const localized array<localized string> CharacterDetailStringOptions;
var const localized array<localized string> FXStringOptions;
var const localized array<localized string> TextureResolutionStringOptions;
var const localized array<localized string> TextureFilteringStringOptions;
var const localized array<localized string> ShadowsStringOptions;
var const localized array<localized string> RealtimeReflectionsStringOptions;
var const localized array<localized string> AntiAliasingStringOptions;
var const localized array<localized string> BloomStringOptions;
var const localized array<localized string> MotionBlurStringOptions;
var const localized array<localized string> AmbientOcclusionStringOptions;
var const localized array<localized string> DepthOfFieldStringOptions;
var const localized array<localized string> OffOnStringOptions;
var transient array<string> SupportedResolutionList;
var transient string RevertPopupDescriptionString;
var transient array<KFGFxOptionsMenu_Graphics.SupportedAspectRatio> AvailableAspectRatioList;
var array<GraphicsQualitySetting> GraphicsQualityPresets;
var array<DisplaySetting> DisplayPresets;
var array<VSyncSetting> VSyncPresets;
var array<VariableFramerateSetting> VariableFrameratePresets;
var array<FilmGrainSetting> FilmGrainMinMaxPreset;
var array<FlexSetting> FlexPresets;
var array<EnvironmentDetailSetting> EnvironmentDetailPresets;
var array<ShadowQualitySetting> ShadowQualityPresets;
var array<FXQualitySetting> FXQualityPresets;
var array<RealtimeReflectionsSetting> RealtimeReflectionsPresets;
var array<CharacterDetailSetting> CharacterDetailPresets;
var array<LightShaftsSetting> LightShaftsPresets;
var array<VolumetricLightingSetting> VolumetricLightingPresets;
var array<LensFlareSetting> LensFlarePresets;
var array<TextureResolutionSetting> TextureResolutionPresets;
var array<TextureFilterSetting> TextureFilterPresets;
var array<BloomSetting> BloomPresets;
var array<MotionBlurSetting> MotionBlurPresets;
var array<AntiAliasingSetting> AntiAliasingPresets;
var array<AmbientOcclusionSetting> AmbientOcclusionPresets;
var array<DOFSetting> DOFPresets;
var transient GFXSettings CurrentGFXSettings;
var transient GFXSettings RevertedGFXSettings;
var transient GFXSettings UnsavedGFXSettings;

// Export UKFGFxOptionsMenu_Graphics::execUpdateGSASetting(FFrame&, void* const)
native static function UpdateGSASetting(string SettingName, int Index);

// Export UKFGFxOptionsMenu_Graphics::execUpdateGSAResolution(FFrame&, void* const)
native static function UpdateGSAResolution(int Width, int Height);

// Export UKFGFxOptionsMenu_Graphics::execFlushGSA(FFrame&, void* const)
native static function FlushGSA();

// Export UKFGFxOptionsMenu_Graphics::execGetCurrentNativeSettings(FFrame&, void* const)
native static function GetCurrentNativeSettings(out GFXSettings CurrentSettings);

// Export UKFGFxOptionsMenu_Graphics::execSetNativeSettings(FFrame&, void* const)
native static function SetNativeSettings(out GFXSettings NewSettings);

// Export UKFGFxOptionsMenu_Graphics::execGetCompatLevel(FFrame&, void* const)
native function int GetCompatLevel();

// Export UKFGFxOptionsMenu_Graphics::execIsAspectRatioAvailable(FFrame&, void* const)
native function bool IsAspectRatioAvailable(KFGFxOptionsMenu_Graphics.SupportedAspectRatio InAspectRatio);

// Export UKFGFxOptionsMenu_Graphics::execRefreshSupportedResolutions(FFrame&, void* const)
native function RefreshSupportedResolutions(KFGFxOptionsMenu_Graphics.SupportedAspectRatio InAspectRatio);

// Export UKFGFxOptionsMenu_Graphics::execIsFleXSupported(FFrame&, void* const)
native function bool IsFleXSupported();

static function UpdateGSA(GFXSettings InSettings)
{
    UpdateGSASetting("EnvironmentDetail", FindEnvironmentDetailIndex(InSettings.EnvironmentDetail, default.EnvironmentDetailPresets));
    UpdateGSASetting("CharacterDetail", FindCharacterDetailIndex(InSettings.CharacterDetail, default.CharacterDetailPresets));
    UpdateGSASetting("FX", FindFXQualityIndex(InSettings.FX, default.FXQualityPresets));
    UpdateGSASetting("TextureResolution", FindTextureResolutionSettingIndex(InSettings.TextureResolution, default.TextureResolutionPresets));
    UpdateGSASetting("TextureFiltering", FindTextureFilterSettingIndex(InSettings.TextureFiltering, default.TextureFilterPresets));
    UpdateGSASetting("Shadows", FindShadowQualityIndex(InSettings.Shadows, default.ShadowQualityPresets));
    UpdateGSASetting("RealtimeReflections", FindReflectionsSettingIndex(InSettings.RealtimeReflections, default.RealtimeReflectionsPresets));
    UpdateGSASetting("AntiAliasing", FindAntiAliasingSettingIndex(InSettings.AntiAliasing, default.AntiAliasingPresets));
    UpdateGSASetting("Bloom", FindBloomSettingIndex(InSettings.Bloom, default.BloomPresets));
    UpdateGSASetting("MotionBlur", FindMotionBlurSettingIndex(InSettings.MotionBlur, default.MotionBlurPresets));
    UpdateGSASetting("AmbientOcclusion", FindAmbientOcclusionSettingIndex(InSettings.AmbientOcclusion, default.AmbientOcclusionPresets));
    UpdateGSASetting("DepthOfField", FindDOFSettingIndex(InSettings.DepthOfField, default.DOFPresets));
    UpdateGSASetting("VolumetricLighting", FindVolumetricLightingSettingIndex(InSettings.VolumetricLighting, default.VolumetricLightingPresets));
    UpdateGSASetting("LensFlares", FindLensFlareSettingIndex(InSettings.LensFlares, default.LensFlarePresets));
    UpdateGSASetting("LightShafts", FindLightShaftsSettingIndex(InSettings.LightShafts, default.LightShaftsPresets));
    UpdateGSASetting("Flex", FindFlexSettingIndex(InSettings.Flex, default.FlexPresets));
    UpdateGSAResolution(InSettings.Resolution.ResX, InSettings.Resolution.ResY);
    FlushGSA();
}

event KFGFxOptionsMenu_Graphics.SupportedAspectRatio GetAspectRatio(int ResX, int ResY)
{
    local float ComputedAspectRatio;

    if(IsAspectRatioAvailable(8))
    {
        return 8;        
    }
    else
    {
        ComputedAspectRatio = float(ResX) / float(ResY);
        if(ComputedAspectRatio ~= (4 / 3))
        {
            return 1;            
        }
        else
        {
            if(ComputedAspectRatio ~= (5 / 4))
            {
                return 2;                
            }
            else
            {
                if(ComputedAspectRatio ~= (3 / 2))
                {
                    return 3;                    
                }
                else
                {
                    if(ComputedAspectRatio ~= (16 / 9))
                    {
                        return 4;                        
                    }
                    else
                    {
                        if(ComputedAspectRatio ~= (16 / 10))
                        {
                            return 5;                            
                        }
                        else
                        {
                            if(ComputedAspectRatio ~= (2 / 1))
                            {
                                return 6;                                
                            }
                            else
                            {
                                if(ComputedAspectRatio ~= (21 / 9))
                                {
                                    return 7;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return 0;
}

static function GetCurrentScriptSettings(out GFXSettings CurrentSettings)
{
    GetScriptDisplaySettings(CurrentSettings.Display);
    GetScriptVSyncSettings(CurrentSettings.VSync);
    GetScriptVariableFramerateSettings(CurrentSettings.VariableFPS);
    GetScriptFilmGrainSettings(CurrentSettings.FilmGrain);
    GetScriptFlexSettings(CurrentSettings.Flex);
    GetScriptEnvironmentDetailSettings(CurrentSettings.EnvironmentDetail);
    GetScriptShadowQualitySettings(CurrentSettings.Shadows);
    GetScriptFXQualitySettings(CurrentSettings.FX);
    GetScriptReflectionSettings(CurrentSettings.RealtimeReflections);
    GetScriptCharacterDetailSettings(CurrentSettings.CharacterDetail);
    GetScriptLightShaftsSettings(CurrentSettings.LightShafts);
    GetScriptVolumetricLightingSettings(CurrentSettings.VolumetricLighting);
    GetScriptLensFlareSettings(CurrentSettings.LensFlares);
    GetScriptTextureResolutionSettings(CurrentSettings.TextureResolution);
    GetScriptTextureFilterSettings(CurrentSettings.TextureFiltering);
    GetScriptBloomSettings(CurrentSettings.Bloom);
    GetScriptMotionBlurSettings(CurrentSettings.MotionBlur);
    GetScriptAntiAliasingSettings(CurrentSettings.AntiAliasing);
    GetScriptAmbientOcclusionSettings(CurrentSettings.AmbientOcclusion);
    GetScriptDOFSettings(CurrentSettings.DepthOfField);
}

static function SetScriptSettings(out GFXSettings NewSettings)
{
    SetScriptDisplaySettings(NewSettings.Display);
    SetScriptVSyncSettings(NewSettings.VSync);
    SetScriptVariableFramerateSettings(NewSettings.VariableFPS);
    SetScriptFilmGrainSettings(NewSettings.FilmGrain);
    SetScriptFlexSettings(NewSettings.Flex);
    SetScriptEnvironmentDetailSettings(NewSettings.EnvironmentDetail);
    SetScriptShadowQualitySettings(NewSettings.Shadows);
    SetScriptFXQualitySettings(NewSettings.FX);
    SetScriptReflectionSettings(NewSettings.RealtimeReflections);
    SetScriptCharacterDetailSettings(NewSettings.CharacterDetail);
    SetScriptLightShaftsSettings(NewSettings.LightShafts);
    SetScriptVolumetricLightingSettings(NewSettings.VolumetricLighting);
    SetScriptLensFlareSettings(NewSettings.LensFlares);
    SetScriptTextureResolutionSettings(NewSettings.TextureResolution);
    SetScriptTextureFilterSettings(NewSettings.TextureFiltering);
    SetScriptBloomSettings(NewSettings.Bloom);
    SetScriptMotionBlurSettings(NewSettings.MotionBlur);
    SetScriptAntiAliasingSettings(NewSettings.AntiAliasing);
    SetScriptAmbientOcclusionSettings(NewSettings.AmbientOcclusion);
    SetScriptDOFSettings(NewSettings.DepthOfField);
}

function int FindGraphicsQualitySettingIndex(out GFXSettings Ref, out array<GraphicsQualitySetting> SettingsList)
{
    local int I;
    local GraphicsQualitySetting GraphicsQuality;

    GraphicsQuality.EnvironmentDetailIndex = FindEnvironmentDetailIndex(Ref.EnvironmentDetail, EnvironmentDetailPresets);
    GraphicsQuality.CharacterDetailIndex = FindCharacterDetailIndex(Ref.CharacterDetail, CharacterDetailPresets);
    GraphicsQuality.FXQualityIndex = FindFXQualityIndex(Ref.FX, FXQualityPresets);
    GraphicsQuality.TextureResolutionIndex = FindTextureResolutionSettingIndex(Ref.TextureResolution, TextureResolutionPresets);
    GraphicsQuality.TextureFilteringIndex = FindTextureFilterSettingIndex(Ref.TextureFiltering, TextureFilterPresets);
    GraphicsQuality.ShadowQualityIndex = FindShadowQualityIndex(Ref.Shadows, ShadowQualityPresets);
    GraphicsQuality.RealtimeReflectionsIndex = FindReflectionsSettingIndex(Ref.RealtimeReflections, RealtimeReflectionsPresets);
    GraphicsQuality.LightShafts = (FindLightShaftsSettingIndex(Ref.LightShafts, LightShaftsPresets)) > 0;
    GraphicsQuality.VolumetricLighting = (FindVolumetricLightingSettingIndex(Ref.VolumetricLighting, VolumetricLightingPresets)) > 0;
    GraphicsQuality.LensFlares = (FindLensFlareSettingIndex(Ref.LensFlares, LensFlarePresets)) > 0;
    GraphicsQuality.AntiAliasingIndex = FindAntiAliasingSettingIndex(Ref.AntiAliasing, AntiAliasingPresets);
    GraphicsQuality.BloomIndex = FindBloomSettingIndex(Ref.Bloom, BloomPresets);
    GraphicsQuality.MotionBlurIndex = FindMotionBlurSettingIndex(Ref.MotionBlur, MotionBlurPresets);
    GraphicsQuality.AmbientOcclusionIndex = FindAmbientOcclusionSettingIndex(Ref.AmbientOcclusion, AmbientOcclusionPresets);
    GraphicsQuality.DOFIndex = FindDOFSettingIndex(Ref.DepthOfField, DOFPresets);
    GraphicsQuality.FlexIndex = FindFlexSettingIndex(Ref.Flex, FlexPresets);
    I = 0;
    J0x4D7:

    if(I < SettingsList.Length)
    {
        if(GraphicsQuality == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x4D7;
    }
    return -1;
}

function int FindDisplaySettingIndex(out DisplaySetting Ref, out array<DisplaySetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptDisplaySettings(out DisplaySetting Setting);

static function SetScriptDisplaySettings(out DisplaySetting Setting);

function int FindVSyncSettingIndex(out VSyncSetting Ref, out array<VSyncSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptVSyncSettings(out VSyncSetting Setting);

static function SetScriptVSyncSettings(out VSyncSetting Setting);

function int FindVariableFPSSettingIndex(out VariableFramerateSetting Ref, out array<VariableFramerateSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptVariableFramerateSettings(out VariableFramerateSetting Setting);

static function SetScriptVariableFramerateSettings(out VariableFramerateSetting Setting);

function float GetFilmGrainSliderValue(out FilmGrainSetting Ref, out array<FilmGrainSetting> SettingsList)
{
    local float SliderValue;

    SliderValue = (Ref.FilmGrainScale - SettingsList[0].FilmGrainScale) / (SettingsList[1].FilmGrainScale - SettingsList[0].FilmGrainScale);
    return FClamp(SliderValue, 0, 1);
}

function float GetFilmGrainSettingValue(float SliderValue, out array<FilmGrainSetting> SettingsList)
{
    local float FilmGrainScale;

    FilmGrainScale = (SliderValue * (SettingsList[1].FilmGrainScale - SettingsList[0].FilmGrainScale)) + SettingsList[0].FilmGrainScale;
    return FClamp(FilmGrainScale, SettingsList[0].FilmGrainScale, SettingsList[1].FilmGrainScale);
}

static function GetScriptFilmGrainSettings(out FilmGrainSetting Setting);

static function SetScriptFilmGrainSettings(out FilmGrainSetting Setting);

static final operator(24) bool ==(FilmGrainSetting A, FilmGrainSetting B)
{
    return A.FilmGrainScale ~= B.FilmGrainScale;
}

static final operator(26) bool !=(FilmGrainSetting A, FilmGrainSetting B)
{
    return !A == B;
}

static function int FindEnvironmentDetailIndex(out EnvironmentDetailSetting Ref, array<EnvironmentDetailSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptEnvironmentDetailSettings(out EnvironmentDetailSetting Setting)
{
    Setting.DestructionLifetimeScale = Class'WorldInfo'.default.DestructionLifetimeScale;
}

static function SetScriptEnvironmentDetailSettings(out EnvironmentDetailSetting Setting)
{
    Class'WorldInfo'.default.DestructionLifetimeScale = Setting.DestructionLifetimeScale;
    Class'WorldInfo'.static.StaticSaveConfig();
}

static function int FindShadowQualityIndex(out ShadowQualitySetting Ref, array<ShadowQualitySetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptShadowQualitySettings(out ShadowQualitySetting Setting);

static function SetScriptShadowQualitySettings(out ShadowQualitySetting Setting);

static function int FindFXQualityIndex(out FXQualitySetting Ref, array<FXQualitySetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptFXQualitySettings(out FXQualitySetting Setting)
{
    Setting.EmitterPoolScale = Class'WorldInfo'.default.EmitterPoolScale;
    Setting.ShellEjectLifetime = Class'KFMuzzleFlash'.default.ShellEjectLifetime;
    Setting.AllowExplosionLights = Class'WorldInfo'.default.bAllowExplosionLights;
    Setting.AllowSprayActorLights = Class'KFSprayActor'.default.bAllowSprayLights;
    Setting.AllowFootstepSounds = Class'KFPawn'.default.bAllowFootstepSounds;
    Setting.AllowBloodSplatterDecals = Class'KFGoreManager'.default.bAllowBloodSplatterDecals;
    Setting.AllowRagdollAndGoreOnDeadBodies = Class'KFPawn'.default.bAllowRagdollAndGoreOnDeadBodies;
    Setting.AllowPilotLights = Class'KFWeap_FlameBase'.default.bArePilotLightsAllowed;
    Setting.MaxImpactEffectDecals = Class'KFImpactEffectManager'.default.MaxImpactEffectDecals;
    Setting.MaxExplosionDecals = Class'WorldInfo'.default.MaxExplosionDecals;
    Setting.GoreFXLifetimeMultiplier = Class'KFGoreManager'.default.GoreFXLifetimeMultiplier;
    Setting.MaxBloodEffects = Class'KFGoreManager'.default.MaxBloodEffects;
    Setting.MaxGoreEffects = Class'KFGoreManager'.default.MaxGoreEffects;
    Setting.MaxPersistentSplatsPerFrame = Class'KFGoreManager'.default.MaxPersistentSplatsPerFrame;
}

static function SetScriptFXQualitySettings(out FXQualitySetting Setting)
{
    Class'WorldInfo'.default.EmitterPoolScale = Setting.EmitterPoolScale;
    Class'KFMuzzleFlash'.default.ShellEjectLifetime = Setting.ShellEjectLifetime;
    Class'WorldInfo'.default.bAllowExplosionLights = Setting.AllowExplosionLights;
    Class'KFSprayActor'.default.bAllowSprayLights = Setting.AllowSprayActorLights;
    Class'KFPawn'.default.bAllowFootstepSounds = Setting.AllowFootstepSounds;
    Class'KFGoreManager'.default.bAllowBloodSplatterDecals = Setting.AllowBloodSplatterDecals;
    Class'KFPawn'.default.bAllowRagdollAndGoreOnDeadBodies = Setting.AllowRagdollAndGoreOnDeadBodies;
    Class'KFWeap_FlameBase'.default.bArePilotLightsAllowed = Setting.AllowPilotLights;
    Class'KFImpactEffectManager'.default.MaxImpactEffectDecals = Setting.MaxImpactEffectDecals;
    Class'WorldInfo'.default.MaxExplosionDecals = Setting.MaxExplosionDecals;
    Class'KFGoreManager'.default.GoreFXLifetimeMultiplier = Setting.GoreFXLifetimeMultiplier;
    Class'KFGoreManager'.default.MaxBloodEffects = Setting.MaxBloodEffects;
    Class'KFGoreManager'.default.MaxGoreEffects = Setting.MaxGoreEffects;
    Class'KFGoreManager'.default.MaxPersistentSplatsPerFrame = Setting.MaxPersistentSplatsPerFrame;
    Class'WorldInfo'.static.StaticSaveConfig();
    Class'KFMuzzleFlash'.static.StaticSaveConfig();
    Class'KFImpactEffectManager'.static.StaticSaveConfig();
    Class'KFGoreManager'.static.StaticSaveConfig();
    Class'KFSprayActor'.static.StaticSaveConfig();
    Class'KFPawn'.static.StaticSaveConfig();
    Class'KFWeap_FlameBase'.static.StaticSaveConfig();
}

static function int FindReflectionsSettingIndex(out RealtimeReflectionsSetting Ref, array<RealtimeReflectionsSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptReflectionSettings(out RealtimeReflectionsSetting Setting);

static function SetScriptReflectionSettings(out RealtimeReflectionsSetting Setting);

static function int FindCharacterDetailIndex(out CharacterDetailSetting Ref, array<CharacterDetailSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptCharacterDetailSettings(out CharacterDetailSetting Setting)
{
    Setting.MaxBodyWoundDecals = Class'KFGoreManager'.default.MaxBodyWoundDecals;
    Setting.MaxDeadBodies = Class'KFGoreManager'.default.MaxDeadBodies;
    Setting.bAllowPhysics = Class'KFPawn'.default.bAllowAlwaysOnPhysics;
}

static function SetScriptCharacterDetailSettings(out CharacterDetailSetting Setting)
{
    Class'KFGoreManager'.default.MaxBodyWoundDecals = Setting.MaxBodyWoundDecals;
    Class'KFGoreManager'.default.MaxDeadBodies = Setting.MaxDeadBodies;
    Class'KFPawn'.default.bAllowAlwaysOnPhysics = Setting.bAllowPhysics;
    Class'KFGoreManager'.static.StaticSaveConfig();
    Class'KFPawn'.static.StaticSaveConfig();
}

static function int FindLightShaftsSettingIndex(out LightShaftsSetting Ref, array<LightShaftsSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptLightShaftsSettings(out LightShaftsSetting Setting);

static function SetScriptLightShaftsSettings(out LightShaftsSetting Setting);

static function int FindVolumetricLightingSettingIndex(out VolumetricLightingSetting Ref, array<VolumetricLightingSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptVolumetricLightingSettings(out VolumetricLightingSetting Setting);

static function SetScriptVolumetricLightingSettings(out VolumetricLightingSetting Setting);

static function int FindLensFlareSettingIndex(out LensFlareSetting Ref, array<LensFlareSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptLensFlareSettings(out LensFlareSetting Setting);

static function SetScriptLensFlareSettings(out LensFlareSetting Setting);

static function int FindTextureResolutionSettingIndex(out TextureResolutionSetting Ref, array<TextureResolutionSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptTextureResolutionSettings(out TextureResolutionSetting Setting);

static function SetScriptTextureResolutionSettings(out TextureResolutionSetting Setting);

static function int FindTextureFilterSettingIndex(out TextureFilterSetting Ref, array<TextureFilterSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptTextureFilterSettings(out TextureFilterSetting Setting);

static function SetScriptTextureFilterSettings(out TextureFilterSetting Setting);

static function int FindBloomSettingIndex(out BloomSetting Ref, array<BloomSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptBloomSettings(out BloomSetting Setting);

static function SetScriptBloomSettings(out BloomSetting Setting);

static function int FindMotionBlurSettingIndex(out MotionBlurSetting Ref, array<MotionBlurSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptMotionBlurSettings(out MotionBlurSetting Setting);

static function SetScriptMotionBlurSettings(out MotionBlurSetting Setting);

static function int FindAntiAliasingSettingIndex(out AntiAliasingSetting Ref, array<AntiAliasingSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptAntiAliasingSettings(out AntiAliasingSetting Setting);

static function SetScriptAntiAliasingSettings(out AntiAliasingSetting Setting);

static function int FindAmbientOcclusionSettingIndex(out AmbientOcclusionSetting Ref, array<AmbientOcclusionSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptAmbientOcclusionSettings(out AmbientOcclusionSetting Setting);

static function SetScriptAmbientOcclusionSettings(out AmbientOcclusionSetting Setting);

static function int FindDOFSettingIndex(out DOFSetting Ref, array<DOFSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptDOFSettings(out DOFSetting Setting);

static function SetScriptDOFSettings(out DOFSetting Setting);

static function int FindFlexSettingIndex(out FlexSetting Ref, array<FlexSetting> SettingsList)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < SettingsList.Length)
    {
        if(Ref == SettingsList[I])
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    return -1;
}

static function GetScriptFlexSettings(out FlexSetting Setting);

static function SetScriptFlexSettings(out FlexSetting Setting);

function InitializeMenu(KFGFxMoviePlayer_Manager InManager)
{
    super.InitializeMenu(InManager);
    GetCurrentGFXSettings(CurrentGFXSettings);
    LocalizeText();
    InitializeResolution();
    InitValues();
    SetFleXOptionEnabled(IsFleXSupported());
}

function SetFleXOptionEnabled(bool bEnable)
{
    local GFxObject FlexDropDown;

    FlexDropDown = GetObject("physicsLevelDropDown");
    FlexDropDown.SetBool("enabled", bEnable);
}

function SetAspectRatioOptions(out GFxObject LocalizedObject)
{
    local int I;
    local array<string> SupportedAspectRatioOptions;

    I = 0;
    AvailableAspectRatioList.Remove(0, AvailableAspectRatioList.Length;
    SupportedAspectRatioOptions[++ I] = AspectRatioString_All;
    AvailableAspectRatioList.AddItem(0;
    if(IsAspectRatioAvailable(1))
    {
        SupportedAspectRatioOptions[++ I] = StandardAspectRatioString_4_3;
        AvailableAspectRatioList.AddItem(1;
    }
    if(IsAspectRatioAvailable(2))
    {
        SupportedAspectRatioOptions[++ I] = StandardAspectRatioString_5_4;
        AvailableAspectRatioList.AddItem(2;
    }
    if(IsAspectRatioAvailable(3))
    {
        SupportedAspectRatioOptions[++ I] = StandardAspectRatioString_3_2;
        AvailableAspectRatioList.AddItem(3;
    }
    if(IsAspectRatioAvailable(4))
    {
        SupportedAspectRatioOptions[++ I] = WideAspectRatioString_16_9;
        AvailableAspectRatioList.AddItem(4;
    }
    if(IsAspectRatioAvailable(5))
    {
        SupportedAspectRatioOptions[++ I] = WideAspectRatioString_16_10;
        AvailableAspectRatioList.AddItem(5;
    }
    if(IsAspectRatioAvailable(6))
    {
        SupportedAspectRatioOptions[++ I] = ExtraWideAspectRatioString_2_1;
        AvailableAspectRatioList.AddItem(6;
    }
    if(IsAspectRatioAvailable(7))
    {
        SupportedAspectRatioOptions[++ I] = ExtraWideAspectRatioString_21_9;
        AvailableAspectRatioList.AddItem(7;
    }
    if(IsAspectRatioAvailable(8))
    {
        SupportedAspectRatioOptions[++ I] = MultiMonitorAspectRatioString;
        AvailableAspectRatioList.AddItem(8;
    }
    LocalizedObject.SetObject("aspectRatioOptions", MakeDataProvider(SupportedAspectRatioOptions));
}

function SetFullScreenOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("fullscreenOptions", MakeDataProvider(FullScreenStringOptions));
}

function SetGraphicsQualityOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("graphicsOptions", MakeDataProvider(GraphicsQualityStringOptions));
}

function SetVSyncOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("vSyncOptions", MakeDataProvider(VSyncStringOptions));
}

function SetEnvironmentDetailOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("environmentDetailOptions", MakeDataProvider(EnvironmentDetailsStringOptions));
}

function SetCharacterDetailOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("characterDetailOptions", MakeDataProvider(CharacterDetailStringOptions));
}

function SetFXOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("fxOptions", MakeDataProvider(FXStringOptions));
}

function SetTextureResolutionOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("textureResolutionOptions", MakeDataProvider(TextureResolutionStringOptions));
}

function SetTextureFilteringOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("textureFilteringOptions", MakeDataProvider(TextureFilteringStringOptions));
}

function SetShadowOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("shadowsOptions", MakeDataProvider(ShadowsStringOptions));
}

function SetRealtimeReflectionsOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("realtimeReflectionsOptions", MakeDataProvider(RealtimeReflectionsStringOptions));
}

function SetAntiAliasingOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("antiAliasingOptions", MakeDataProvider(AntiAliasingStringOptions));
}

function SetBloomOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("bloomOptions", MakeDataProvider(BloomStringOptions));
}

function SetMotionBlurOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("motionBlurOptions", MakeDataProvider(MotionBlurStringOptions));
}

function SetAmbientOcclusionOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("ambientOcclusionOptions", MakeDataProvider(AmbientOcclusionStringOptions));
}

function SetDepthOfFieldOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("depthOfFieldOptions", MakeDataProvider(DepthOfFieldStringOptions));
}

function SetVolumetricLightingOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("volumetricLightingOptions", MakeDataProvider(OffOnStringOptions));
}

function SetLensFlareOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("lensFlaresOptions", MakeDataProvider(OffOnStringOptions));
}

function SetLightShaftOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("lightShaftsOptions", MakeDataProvider(OffOnStringOptions));
}

function SetPhysicsLevelOptions(out GFxObject LocalizedObject)
{
    LocalizedObject.SetObject("physicsLevelOptions", MakeDataProvider(PhysicsLevelOptionStrings));
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("graphics", Caps(Class'KFGFxOptionsMenu_Selection'.default.OptionStrings[0]));
    LocalizedObject.SetString("basic", Caps(BasicString));
    LocalizedObject.SetString("advanced", Caps(AdvancedString));
    LocalizedObject.SetString("effects", EffectsString);
    LocalizedObject.SetString("physicsLevel", PhysicsLevelString);
    LocalizedObject.SetString("aspectRatio", AspectRatioString);
    LocalizedObject.SetString("resolution", ResolutionString);
    LocalizedObject.SetString("graphicsQuality", GraphicsQualityString);
    LocalizedObject.SetString("vSync", VSyncString);
    LocalizedObject.SetString("fullscreen", FullscreenString);
    LocalizedObject.SetString("variableFrameRate", VariableFrameRateString);
    LocalizedObject.SetString("adjustGamma", AdjustGammaString);
    LocalizedObject.SetString("filmGrain", FilmGrainString);
    LocalizedObject.SetString("environmentDetails", EnvironmentDetailsString);
    LocalizedObject.SetString("characterDetail", CharacterDetailString);
    LocalizedObject.SetString("fx", FXString);
    LocalizedObject.SetString("textureResolution", TextureResolutionString);
    LocalizedObject.SetString("textureFiltering", TextureFilteringString);
    LocalizedObject.SetString("shadows", ShadowsString);
    LocalizedObject.SetString("realtimeReflections", RealtimeReflectionsString);
    LocalizedObject.SetString("antiAliasing", AntiAliasingString);
    LocalizedObject.SetString("bloom", BloomString);
    LocalizedObject.SetString("motionBlur", MotionBlurString);
    LocalizedObject.SetString("ambientOcclusion", AmbientOcclusionString);
    LocalizedObject.SetString("depthOfField", DepthOfFieldString);
    LocalizedObject.SetString("volumetricLighting", VolumetricLightingString);
    LocalizedObject.SetString("lensFlares", lensFlaresString);
    LocalizedObject.SetString("lightShafts", LightShaftsString);
    LocalizedObject.SetString("customString", CustomString);
    LocalizedObject.SetString("iniOverrideString", IniOverrideString);
    LocalizedObject.SetString("apply", ApplyString);
    LocalizedObject.SetString("close", Class'KFCommon_LocalizedStrings'.default.BackString);
    LocalizedObject.SetString("default", DefaultString);
    LocalizedObject.SetObject("physicsSuggestionsArray", MakeDataProvider(PhysicsLevelSuggestionStrings));
    SetAspectRatioOptions(LocalizedObject);
    SetFullScreenOptions(LocalizedObject);
    SetGraphicsQualityOptions(LocalizedObject);
    SetVSyncOptions(LocalizedObject);
    SetEnvironmentDetailOptions(LocalizedObject);
    SetCharacterDetailOptions(LocalizedObject);
    SetFXOptions(LocalizedObject);
    SetTextureResolutionOptions(LocalizedObject);
    SetTextureFilteringOptions(LocalizedObject);
    SetShadowOptions(LocalizedObject);
    SetRealtimeReflectionsOptions(LocalizedObject);
    SetAntiAliasingOptions(LocalizedObject);
    SetBloomOptions(LocalizedObject);
    SetMotionBlurOptions(LocalizedObject);
    SetAmbientOcclusionOptions(LocalizedObject);
    SetDepthOfFieldOptions(LocalizedObject);
    SetVolumetricLightingOptions(LocalizedObject);
    SetLensFlareOptions(LocalizedObject);
    SetLightShaftOptions(LocalizedObject);
    SetPhysicsLevelOptions(LocalizedObject);
    SetObject("localizedText", LocalizedObject);
}

function GFxObject MakeDataProvider(const out array<string> SourceText)
{
    local GFxObject DataProvider;
    local byte I;

    DataProvider = Outer.CreateArray();
    I = 0;
    J0x35:

    if(I < SourceText.Length)
    {
        DataProvider.SetElementString(I, SourceText[I]);
        ++ I;
        goto J0x35;
    }
    return DataProvider;
}

static function int GetGraphicsQualityFromCompat(int CompatLevel)
{
    switch(CompatLevel)
    {
        case 0:
            return 0;
        case 1:
            return 0;
        case 2:
            return 1;
        case 3:
        case 4:
        case 5:
            return 2;
        case 6:
            return 3;
        case 7:
            return 4;
        case 8:
            return 5;
        case 9:
            return 6;
        default:
            LogInternal(("[AppCompat]" @ string(CompatLevel)) @ " is not a valid compat level. Defaulting to medium settings");
            return 1;
            break;
    }
}

static event SetCompatibilityLevel(int CompatLevel)
{
    local GraphicsQualitySetting GraphicsQuality;
    local int GraphicsQualityIndex;

    GraphicsQualityIndex = GetGraphicsQualityFromCompat(CompatLevel);
    if((GraphicsQualityIndex >= 0) && GraphicsQualityIndex < default.GraphicsQualityPresets.Length)
    {
        GraphicsQuality = default.GraphicsQualityPresets[GraphicsQualityIndex];
        SetGraphicsQuality(GraphicsQuality, false);
    }
}

static event SetGraphicsQuality(GraphicsQualitySetting GraphicsQuality, bool bPreserveUserOverrides)
{
    local GFXSettings NewGFXSettings;

    GetCurrentGFXSettings(NewGFXSettings);
    if(!bPreserveUserOverrides || (FindEnvironmentDetailIndex(NewGFXSettings.EnvironmentDetail, default.EnvironmentDetailPresets)) != -1)
    {
        NewGFXSettings.EnvironmentDetail = default.EnvironmentDetailPresets[GraphicsQuality.EnvironmentDetailIndex];
    }
    if(!bPreserveUserOverrides || (FindCharacterDetailIndex(NewGFXSettings.CharacterDetail, default.CharacterDetailPresets)) != -1)
    {
        NewGFXSettings.CharacterDetail = default.CharacterDetailPresets[GraphicsQuality.CharacterDetailIndex];
    }
    if(!bPreserveUserOverrides || (FindFXQualityIndex(NewGFXSettings.FX, default.FXQualityPresets)) != -1)
    {
        NewGFXSettings.FX = default.FXQualityPresets[GraphicsQuality.FXQualityIndex];
    }
    if(!bPreserveUserOverrides || (FindTextureResolutionSettingIndex(NewGFXSettings.TextureResolution, default.TextureResolutionPresets)) != -1)
    {
        NewGFXSettings.TextureResolution = default.TextureResolutionPresets[GraphicsQuality.TextureResolutionIndex];
    }
    if(!bPreserveUserOverrides || (FindTextureFilterSettingIndex(NewGFXSettings.TextureFiltering, default.TextureFilterPresets)) != -1)
    {
        NewGFXSettings.TextureFiltering = default.TextureFilterPresets[GraphicsQuality.TextureFilteringIndex];
    }
    if(!bPreserveUserOverrides || (FindShadowQualityIndex(NewGFXSettings.Shadows, default.ShadowQualityPresets)) != -1)
    {
        NewGFXSettings.Shadows = default.ShadowQualityPresets[GraphicsQuality.ShadowQualityIndex];
    }
    if(!bPreserveUserOverrides || (FindReflectionsSettingIndex(NewGFXSettings.RealtimeReflections, default.RealtimeReflectionsPresets)) != -1)
    {
        NewGFXSettings.RealtimeReflections = default.RealtimeReflectionsPresets[GraphicsQuality.RealtimeReflectionsIndex];
    }
    if(!bPreserveUserOverrides || (FindLightShaftsSettingIndex(NewGFXSettings.LightShafts, default.LightShaftsPresets)) != -1)
    {
        NewGFXSettings.LightShafts = default.LightShaftsPresets[((GraphicsQuality.LightShafts) ? 1 : 0)];
    }
    if(!bPreserveUserOverrides || (FindVolumetricLightingSettingIndex(NewGFXSettings.VolumetricLighting, default.VolumetricLightingPresets)) != -1)
    {
        NewGFXSettings.VolumetricLighting = default.VolumetricLightingPresets[((GraphicsQuality.VolumetricLighting) ? 1 : 0)];
    }
    if(!bPreserveUserOverrides || (FindLensFlareSettingIndex(NewGFXSettings.LensFlares, default.LensFlarePresets)) != -1)
    {
        NewGFXSettings.LensFlares = default.LensFlarePresets[((GraphicsQuality.LensFlares) ? 1 : 0)];
    }
    if(!bPreserveUserOverrides || (FindAntiAliasingSettingIndex(NewGFXSettings.AntiAliasing, default.AntiAliasingPresets)) != -1)
    {
        NewGFXSettings.AntiAliasing = default.AntiAliasingPresets[GraphicsQuality.AntiAliasingIndex];
    }
    if(!bPreserveUserOverrides || (FindBloomSettingIndex(NewGFXSettings.Bloom, default.BloomPresets)) != -1)
    {
        NewGFXSettings.Bloom = default.BloomPresets[GraphicsQuality.BloomIndex];
    }
    if(!bPreserveUserOverrides || (FindMotionBlurSettingIndex(NewGFXSettings.MotionBlur, default.MotionBlurPresets)) != -1)
    {
        NewGFXSettings.MotionBlur = default.MotionBlurPresets[GraphicsQuality.MotionBlurIndex];
    }
    if(!bPreserveUserOverrides || (FindAmbientOcclusionSettingIndex(NewGFXSettings.AmbientOcclusion, default.AmbientOcclusionPresets)) != -1)
    {
        NewGFXSettings.AmbientOcclusion = default.AmbientOcclusionPresets[GraphicsQuality.AmbientOcclusionIndex];
    }
    if(!bPreserveUserOverrides || (FindDOFSettingIndex(NewGFXSettings.DepthOfField, default.DOFPresets)) != -1)
    {
        NewGFXSettings.DepthOfField = default.DOFPresets[GraphicsQuality.DOFIndex];
    }
    if(!bPreserveUserOverrides || (FindFlexSettingIndex(NewGFXSettings.Flex, default.FlexPresets)) != -1)
    {
        NewGFXSettings.Flex = default.FlexPresets[GraphicsQuality.FlexIndex];
    }
    SetNativeSettings(NewGFXSettings);
    SetScriptSettings(NewGFXSettings);
    UpdateGSA(NewGFXSettings);
}

function InitValues()
{
    local GFxObject ValuesObject;
    local int GraphicsQualityIndex, DisplayIndex, VSyncSettingIndex, VariableFramerateSettingIndex, EnvironmentDetailIndex, ShadowQualityIndex,
	    FXQualityIndex, ReflectionsSettingIndex, CharacterDetailIndex, LightShaftsSettingIndex, VolumetricLightingSettingIndex,
	    LensFlareSettingIndex, TextureResolutionSettingIndex, TextureFilterSettingIndex, BloomSettingIndex, MotionBlurSettingIndex,
	    AntiAliasingSettingIndex, AmbientOcclusionSettingIndex, DOFSettingIndex;

    local float FilmGrainSliderValue;
    local int FlexSettingIndex;

    ValuesObject = GetObject("options");
    GraphicsQualityIndex = FindGraphicsQualitySettingIndex(CurrentGFXSettings, GraphicsQualityPresets);
    ValuesObject.SetInt("graphics", GraphicsQualityIndex);
    VSyncSettingIndex = FindVSyncSettingIndex(CurrentGFXSettings.VSync, VSyncPresets);
    if((VSyncSettingIndex >= 0) && VSyncSettingIndex < VSyncPresets.Length)
    {
        ValuesObject.SetInt("vSync", VSyncSettingIndex);
    }
    DisplayIndex = FindDisplaySettingIndex(CurrentGFXSettings.Display, DisplayPresets);
    if((DisplayIndex >= 0) && DisplayIndex < DisplayPresets.Length)
    {
        ValuesObject.SetInt("fullScreen", DisplayIndex);
    }
    VariableFramerateSettingIndex = FindVariableFPSSettingIndex(CurrentGFXSettings.VariableFPS, VariableFrameratePresets);
    if((VariableFramerateSettingIndex >= 0) && VariableFramerateSettingIndex < VariableFrameratePresets.Length)
    {
        ValuesObject.SetBool("variableFrameRate", VariableFramerateSettingIndex > 0);
    }
    FilmGrainSliderValue = GetFilmGrainSliderValue(CurrentGFXSettings.FilmGrain, FilmGrainMinMaxPreset);
    ValuesObject.SetFloat("filmGrain", FilmGrainSliderValue);
    EnvironmentDetailIndex = FindEnvironmentDetailIndex(CurrentGFXSettings.EnvironmentDetail, EnvironmentDetailPresets);
    ValuesObject.SetInt("environmentDetail", EnvironmentDetailIndex);
    CharacterDetailIndex = FindCharacterDetailIndex(CurrentGFXSettings.CharacterDetail, CharacterDetailPresets);
    ValuesObject.SetInt("characterDetail", CharacterDetailIndex);
    FXQualityIndex = FindFXQualityIndex(CurrentGFXSettings.FX, FXQualityPresets);
    ValuesObject.SetInt("fx", FXQualityIndex);
    TextureResolutionSettingIndex = FindTextureResolutionSettingIndex(CurrentGFXSettings.TextureResolution, TextureResolutionPresets);
    ValuesObject.SetInt("textureResolution", TextureResolutionSettingIndex);
    TextureFilterSettingIndex = FindTextureFilterSettingIndex(CurrentGFXSettings.TextureFiltering, TextureFilterPresets);
    ValuesObject.SetInt("textureFiltering", TextureFilterSettingIndex);
    ShadowQualityIndex = FindShadowQualityIndex(CurrentGFXSettings.Shadows, ShadowQualityPresets);
    ValuesObject.SetInt("shadows", ShadowQualityIndex);
    ReflectionsSettingIndex = FindReflectionsSettingIndex(CurrentGFXSettings.RealtimeReflections, RealtimeReflectionsPresets);
    ValuesObject.SetInt("realtimeReflections", ReflectionsSettingIndex);
    AntiAliasingSettingIndex = FindAntiAliasingSettingIndex(CurrentGFXSettings.AntiAliasing, AntiAliasingPresets);
    ValuesObject.SetInt("antiAliasing", AntiAliasingSettingIndex);
    BloomSettingIndex = FindBloomSettingIndex(CurrentGFXSettings.Bloom, BloomPresets);
    ValuesObject.SetInt("bloom", BloomSettingIndex);
    MotionBlurSettingIndex = FindMotionBlurSettingIndex(CurrentGFXSettings.MotionBlur, MotionBlurPresets);
    ValuesObject.SetInt("motionBlur", MotionBlurSettingIndex);
    AmbientOcclusionSettingIndex = FindAmbientOcclusionSettingIndex(CurrentGFXSettings.AmbientOcclusion, AmbientOcclusionPresets);
    ValuesObject.SetInt("ambientOcclusion", AmbientOcclusionSettingIndex);
    DOFSettingIndex = FindDOFSettingIndex(CurrentGFXSettings.DepthOfField, DOFPresets);
    ValuesObject.SetInt("depthOfField", DOFSettingIndex);
    LightShaftsSettingIndex = FindLightShaftsSettingIndex(CurrentGFXSettings.LightShafts, LightShaftsPresets);
    ValuesObject.SetInt("lightShafts", LightShaftsSettingIndex);
    VolumetricLightingSettingIndex = FindVolumetricLightingSettingIndex(CurrentGFXSettings.VolumetricLighting, VolumetricLightingPresets);
    ValuesObject.SetInt("volumetricLighting", VolumetricLightingSettingIndex);
    LensFlareSettingIndex = FindLensFlareSettingIndex(CurrentGFXSettings.LensFlares, LensFlarePresets);
    ValuesObject.SetInt("lensFlares", LensFlareSettingIndex);
    FlexSettingIndex = FindFlexSettingIndex(CurrentGFXSettings.Flex, FlexPresets);
    ValuesObject.SetInt("physicsLevel", FlexSettingIndex);
    SetObject("options", ValuesObject);
}

static function GetCurrentGFXSettings(out GFXSettings CurrentSettings)
{
    GetCurrentNativeSettings(CurrentSettings);
    GetCurrentScriptSettings(CurrentSettings);
}

function SetGFXSettings(GFXSettings NewSettings)
{
    RevertedGFXSettings = CurrentGFXSettings;
    SetNativeSettings(NewSettings);
    SetScriptSettings(NewSettings);
    CurrentGFXSettings = NewSettings;
    UpdateGSA(NewSettings);
}

function GetModifiedGFXSettings(out GFXSettings NewSettings)
{
    local array<string> ResolutionStringArr;
    local GFxObject OptionsObj;
    local int ResolutionIndex, DisplayIndex, VSyncSettingIndex, VariableFramerateSettingIndex, EnvironmentDetailIndex, ShadowQualityIndex,
	    FXQualityIndex, ReflectionsSettingIndex, CharacterDetailIndex, LightShaftsSettingIndex, VolumetricLightingSettingIndex,
	    LensFlareSettingIndex, TextureResolutionSettingIndex, TextureFilterSettingIndex, BloomSettingIndex, MotionBlurSettingIndex,
	    AntiAliasingSettingIndex, AmbientOcclusionSettingIndex, DOFSettingIndex, FlexSettingIndex;

    local float FilmGrainSliderValue;

    OptionsObj = GetObject("options");
    ResolutionIndex = OptionsObj.GetInt("resolution");
    ResolutionStringArr = SplitString(SupportedResolutionList[ResolutionIndex], "x", true);
    NewSettings.Resolution.ResX = int(ResolutionStringArr[0]);
    NewSettings.Resolution.ResY = int(ResolutionStringArr[1]);
    VSyncSettingIndex = OptionsObj.GetInt("vSync");
    if((VSyncSettingIndex >= 0) && VSyncSettingIndex < VSyncPresets.Length)
    {
        NewSettings.VSync = VSyncPresets[VSyncSettingIndex];
    }
    DisplayIndex = OptionsObj.GetInt("fullScreen");
    if((DisplayIndex >= 0) && DisplayIndex < DisplayPresets.Length)
    {
        NewSettings.Display = DisplayPresets[DisplayIndex];
    }
    VariableFramerateSettingIndex = ((OptionsObj.GetBool("variableFrameRate")) ? 1 : 0);
    if((VariableFramerateSettingIndex >= 0) && VariableFramerateSettingIndex < VariableFrameratePresets.Length)
    {
        NewSettings.VariableFPS = VariableFrameratePresets[VariableFramerateSettingIndex];
    }
    FilmGrainSliderValue = OptionsObj.GetFloat("filmGrain");
    NewSettings.FilmGrain.FilmGrainScale = GetFilmGrainSettingValue(FilmGrainSliderValue, FilmGrainMinMaxPreset);
    FlexSettingIndex = OptionsObj.GetInt("physicsLevel");
    if((FlexSettingIndex >= 0) && FlexSettingIndex < FlexPresets.Length)
    {
        NewSettings.Flex = FlexPresets[FlexSettingIndex];
    }
    EnvironmentDetailIndex = OptionsObj.GetInt("environmentDetail");
    if((EnvironmentDetailIndex >= 0) && EnvironmentDetailIndex < EnvironmentDetailPresets.Length)
    {
        NewSettings.EnvironmentDetail = EnvironmentDetailPresets[EnvironmentDetailIndex];
    }
    CharacterDetailIndex = OptionsObj.GetInt("characterDetail");
    if((CharacterDetailIndex >= 0) && CharacterDetailIndex < CharacterDetailPresets.Length)
    {
        NewSettings.CharacterDetail = CharacterDetailPresets[CharacterDetailIndex];
    }
    FXQualityIndex = OptionsObj.GetInt("fx");
    if((FXQualityIndex >= 0) && FXQualityIndex < FXQualityPresets.Length)
    {
        NewSettings.FX = FXQualityPresets[FXQualityIndex];
    }
    TextureResolutionSettingIndex = OptionsObj.GetInt("textureResolution");
    if((TextureResolutionSettingIndex >= 0) && TextureResolutionSettingIndex < TextureResolutionPresets.Length)
    {
        NewSettings.TextureResolution = TextureResolutionPresets[TextureResolutionSettingIndex];
    }
    TextureFilterSettingIndex = OptionsObj.GetInt("textureFiltering");
    if((TextureFilterSettingIndex >= 0) && TextureFilterSettingIndex < TextureFilterPresets.Length)
    {
        NewSettings.TextureFiltering = TextureFilterPresets[TextureFilterSettingIndex];
    }
    ShadowQualityIndex = OptionsObj.GetInt("shadows");
    if((ShadowQualityIndex >= 0) && ShadowQualityIndex < ShadowQualityPresets.Length)
    {
        NewSettings.Shadows = ShadowQualityPresets[ShadowQualityIndex];
    }
    ReflectionsSettingIndex = OptionsObj.GetInt("realtimeReflections");
    if((ReflectionsSettingIndex >= 0) && ReflectionsSettingIndex < RealtimeReflectionsPresets.Length)
    {
        NewSettings.RealtimeReflections = RealtimeReflectionsPresets[ReflectionsSettingIndex];
    }
    AntiAliasingSettingIndex = OptionsObj.GetInt("antiAliasing");
    if((AntiAliasingSettingIndex >= 0) && AntiAliasingSettingIndex < AntiAliasingPresets.Length)
    {
        NewSettings.AntiAliasing = AntiAliasingPresets[AntiAliasingSettingIndex];
    }
    BloomSettingIndex = OptionsObj.GetInt("bloom");
    if((BloomSettingIndex >= 0) && BloomSettingIndex < BloomPresets.Length)
    {
        NewSettings.Bloom = BloomPresets[BloomSettingIndex];
    }
    MotionBlurSettingIndex = OptionsObj.GetInt("motionBlur");
    if((MotionBlurSettingIndex >= 0) && MotionBlurSettingIndex < MotionBlurPresets.Length)
    {
        NewSettings.MotionBlur = MotionBlurPresets[MotionBlurSettingIndex];
    }
    AmbientOcclusionSettingIndex = OptionsObj.GetInt("ambientOcclusion");
    if((AmbientOcclusionSettingIndex >= 0) && AmbientOcclusionSettingIndex < AmbientOcclusionPresets.Length)
    {
        NewSettings.AmbientOcclusion = AmbientOcclusionPresets[AmbientOcclusionSettingIndex];
    }
    DOFSettingIndex = OptionsObj.GetInt("depthOfField");
    if((DOFSettingIndex >= 0) && DOFSettingIndex < DOFPresets.Length)
    {
        NewSettings.DepthOfField = DOFPresets[DOFSettingIndex];
    }
    LightShaftsSettingIndex = OptionsObj.GetInt("lightShafts");
    if((LightShaftsSettingIndex >= 0) && LightShaftsSettingIndex < LightShaftsPresets.Length)
    {
        NewSettings.LightShafts = LightShaftsPresets[LightShaftsSettingIndex];
    }
    VolumetricLightingSettingIndex = OptionsObj.GetInt("volumetricLighting");
    if((VolumetricLightingSettingIndex >= 0) && VolumetricLightingSettingIndex < VolumetricLightingPresets.Length)
    {
        NewSettings.VolumetricLighting = VolumetricLightingPresets[VolumetricLightingSettingIndex];
    }
    LensFlareSettingIndex = OptionsObj.GetInt("lensFlares");
    if((LensFlareSettingIndex >= 0) && LensFlareSettingIndex < LensFlarePresets.Length)
    {
        NewSettings.LensFlares = LensFlarePresets[LensFlareSettingIndex];
    }
}

function InitializeResolution()
{
    local KFGFxOptionsMenu_Graphics.SupportedAspectRatio AspectRatio;
    local GFxObject OptionsObj;
    local int CurrentAspectRatioIndex;

    AspectRatio = GetAspectRatio(CurrentGFXSettings.Resolution.ResX, CurrentGFXSettings.Resolution.ResY);
    UpdateResolutionList(AspectRatio);
    CurrentAspectRatioIndex = AvailableAspectRatioList.Find(AspectRatio;
    OptionsObj = GetObject("options");
    OptionsObj.SetInt("aspectRatio", ((CurrentAspectRatioIndex != -1) ? CurrentAspectRatioIndex : 0));
    SetObject("options", OptionsObj);
}

function CheckForChangedSettings(out GFXSettings NewSettings, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte NeedsRevertCountdown)
{
    if(NewSettings.Resolution != CurrentGFXSettings.Resolution)
    {
        OnResolutionSettingChanged(CurrentGFXSettings.Resolution, NewSettings.Resolution, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.VSync != CurrentGFXSettings.VSync)
    {
        OnVsyncSettingChanged(CurrentGFXSettings.VSync, NewSettings.VSync, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.Display != CurrentGFXSettings.Display)
    {
        OnDisplaySettingChanged(CurrentGFXSettings.Display, NewSettings.Display, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.VariableFPS != CurrentGFXSettings.VariableFPS)
    {
        OnVariableFramerateSettingChanged(CurrentGFXSettings.VariableFPS, NewSettings.VariableFPS, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.FilmGrain != CurrentGFXSettings.FilmGrain)
    {
        OnFilmGrainSettingChanged(CurrentGFXSettings.FilmGrain, NewSettings.FilmGrain, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.Flex != CurrentGFXSettings.Flex)
    {
        OnFlexSettingChanged(CurrentGFXSettings.Flex, NewSettings.Flex, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.EnvironmentDetail != CurrentGFXSettings.EnvironmentDetail)
    {
        OnEnvironmentDetailSettingChanged(CurrentGFXSettings.EnvironmentDetail, NewSettings.EnvironmentDetail, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.CharacterDetail != CurrentGFXSettings.CharacterDetail)
    {
        OnCharacterDetailSettingChanged(CurrentGFXSettings.CharacterDetail, NewSettings.CharacterDetail, bUpdateSystemSettings, bRequiresRestart, NeedsRevertCountdown);
    }
    if(NewSettings.FX != CurrentGFXSettings.FX)
    {
        OnFXQualitySettingChanged(CurrentGFXSettings.FX, NewSettings.FX, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.TextureResolution != CurrentGFXSettings.TextureResolution)
    {
        OnTextureResolutionSettingChanged(CurrentGFXSettings.TextureResolution, NewSettings.TextureResolution, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.TextureFiltering != CurrentGFXSettings.TextureFiltering)
    {
        OnTextureFilteringSettingChanged(CurrentGFXSettings.TextureFiltering, NewSettings.TextureFiltering, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.Shadows != CurrentGFXSettings.Shadows)
    {
        OnShadowQualitySettingChanged(CurrentGFXSettings.Shadows, NewSettings.Shadows, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.RealtimeReflections != CurrentGFXSettings.RealtimeReflections)
    {
        OnReflectionSettingChanged(CurrentGFXSettings.RealtimeReflections, NewSettings.RealtimeReflections, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.AntiAliasing != CurrentGFXSettings.AntiAliasing)
    {
        OnAntiAliasingSettingChanged(CurrentGFXSettings.AntiAliasing, NewSettings.AntiAliasing, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.Bloom != CurrentGFXSettings.Bloom)
    {
        OnBloomSettingChanged(CurrentGFXSettings.Bloom, NewSettings.Bloom, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.MotionBlur != CurrentGFXSettings.MotionBlur)
    {
        OnMotionBlurSettingChanged(CurrentGFXSettings.MotionBlur, NewSettings.MotionBlur, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.AmbientOcclusion != CurrentGFXSettings.AmbientOcclusion)
    {
        OnAmbientOcclusionSettingChanged(CurrentGFXSettings.AmbientOcclusion, NewSettings.AmbientOcclusion, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.DepthOfField != CurrentGFXSettings.DepthOfField)
    {
        OnDOFSettingChanged(CurrentGFXSettings.DepthOfField, NewSettings.DepthOfField, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.VolumetricLighting != CurrentGFXSettings.VolumetricLighting)
    {
        OnVolumetricLightingSettingChanged(CurrentGFXSettings.VolumetricLighting, NewSettings.VolumetricLighting, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.LensFlares != CurrentGFXSettings.LensFlares)
    {
        OnLensFlareSettingChanged(CurrentGFXSettings.LensFlares, NewSettings.LensFlares, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
    if(NewSettings.LightShafts != CurrentGFXSettings.LightShafts)
    {
        OnLightShaftsSettingChanged(CurrentGFXSettings.LightShafts, NewSettings.LightShafts, bUpdateSystemSettings, bRequiresRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    }
}

function UpdateAdvancedSettingsUI(int GraphicsQualityIndex)
{
    local GraphicsQualitySetting GraphicsQuality;
    local GFxObject OptionsObj;

    OptionsObj = GetObject("options");
    if((GraphicsQualityIndex >= 0) && GraphicsQualityIndex < GraphicsQualityPresets.Length)
    {
        GraphicsQuality = GraphicsQualityPresets[GraphicsQualityIndex];
        OptionsObj.SetInt("environmentDetail", GraphicsQuality.EnvironmentDetailIndex);
        OptionsObj.SetInt("characterDetail", GraphicsQuality.CharacterDetailIndex);
        OptionsObj.SetInt("fx", GraphicsQuality.FXQualityIndex);
        OptionsObj.SetInt("textureResolution", GraphicsQuality.TextureResolutionIndex);
        OptionsObj.SetInt("textureFiltering", GraphicsQuality.TextureFilteringIndex);
        OptionsObj.SetInt("shadows", GraphicsQuality.ShadowQualityIndex);
        OptionsObj.SetInt("realtimeReflections", GraphicsQuality.RealtimeReflectionsIndex);
        OptionsObj.SetBool("lightShafts", GraphicsQuality.LightShafts);
        OptionsObj.SetBool("volumetricLighting", GraphicsQuality.VolumetricLighting);
        OptionsObj.SetBool("lensFlares", GraphicsQuality.LensFlares);
        OptionsObj.SetInt("antiAliasing", GraphicsQuality.AntiAliasingIndex);
        OptionsObj.SetInt("bloom", GraphicsQuality.BloomIndex);
        OptionsObj.SetInt("motionBlur", GraphicsQuality.MotionBlurIndex);
        OptionsObj.SetInt("ambientOcclusion", GraphicsQuality.AmbientOcclusionIndex);
        OptionsObj.SetInt("depthOfField", GraphicsQuality.DOFIndex);
        OptionsObj.SetInt("physicsLevel", GraphicsQuality.FlexIndex);
        SetObject("options", OptionsObj);
    }
}

function OneSecondLoop()
{
    local byte TimeLeft;
    local string TempString;

    if((((Manager != none) && Manager.CurrentPopup != none) && bIsRevertCoundownActive) && Outer.IsViewportInFocus())
    {
        if(TimeCount < ExpireTime)
        {
            TimeLeft = byte(ExpireTime - TimeCount);
            TempString = Repl(RevertPopupDescriptionString, "%x%", string(TimeLeft), true);
            Manager.CurrentPopup.UpdateDescritionText(TempString);
            ++ TimeCount;            
        }
        else
        {
            RevertSettings();
            Manager.UnloadCurrentPopup();
        }
    }
}

function Apply()
{
    local GFXSettings NewGFXSettings;
    local byte UpdateSystemSettings, NeedsRestart, PerformanceWarningLevel, NeedsRevertCountdown;

    GetCurrentGFXSettings(CurrentGFXSettings);
    NewGFXSettings = CurrentGFXSettings;
    GetModifiedGFXSettings(NewGFXSettings);
    UpdateSystemSettings = 0;
    NeedsRestart = 0;
    NeedsRevertCountdown = 0;
    PerformanceWarningLevel = 0;
    CheckForChangedSettings(NewGFXSettings, UpdateSystemSettings, NeedsRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    if(UpdateSystemSettings != 0)
    {
        SetGFXSettings(NewGFXSettings);
        if(((PerformanceWarningLevel > 0) || NeedsRestart > 0) || NeedsRevertCountdown > 0)
        {
            ShowRevertPopUp(PerformanceWarningLevel, NeedsRestart > 0, NeedsRevertCountdown > 0);
        }
    }
}

function ResetValues()
{
    InitializeResolution();
    InitValues();
}

function RevertSettings()
{
    SetGFXSettings(RevertedGFXSettings);
    ResetValues();
    bIsRevertCoundownActive = false;
}

function ShowRevertPopUp(byte PerfWarningLevel, bool bNeedsRestart, bool bNeedsRevertCountdown)
{
    local string TempString, PromptString;

    bIsRevertCoundownActive = bNeedsRevertCountdown;
    TimeCount = 0;
    if((PerfWarningLevel > 0) && bNeedsRestart)
    {
        PromptString = WarningPromptString;
        RevertPopupDescriptionString = Repl(Repl(DoubleWarningString, "%x%", PerformanceDescString[PerfWarningLevel - 1], true), "%y%", RestartDescString, true);        
        RevertPopupDescriptionString $= (". " $ ContinueString);
        if(bNeedsRevertCountdown)
        {            
            RevertPopupDescriptionString $= ("

" $ WillExpireString);
            TempString = Repl(RevertPopupDescriptionString, "%x%", string(ExpireTime), true);
            Manager.DelayedOpenPopup(0, 0, PromptString, TempString, OKString, CancelString, OnRestartConfirm, OnSettingsRevert);            
        }
        else
        {
            Manager.DelayedOpenPopup(0, 0, PromptString, RevertPopupDescriptionString, OKString, CancelString, OnRestartConfirm, OnSettingsRevert);
        }        
    }
    else
    {
        if(PerfWarningLevel > 0)
        {
            PromptString = WarningPromptString;
            RevertPopupDescriptionString = Repl(SingleWarningString, "%x%", PerformanceDescString[PerfWarningLevel - 1], true);            
            RevertPopupDescriptionString $= (". " $ ContinueString);
            if(bNeedsRevertCountdown)
            {                
                RevertPopupDescriptionString $= ("

" $ WillExpireString);
                TempString = Repl(RevertPopupDescriptionString, "%x%", string(ExpireTime), true);
                Manager.DelayedOpenPopup(0, 0, PromptString, TempString, OKString, CancelString, OnSettingsConfirm, OnSettingsRevert);                
            }
            else
            {
                Manager.DelayedOpenPopup(0, 0, PromptString, RevertPopupDescriptionString, OKString, CancelString, OnSettingsConfirm, OnSettingsRevert);
            }            
        }
        else
        {
            if(bNeedsRestart)
            {
                PromptString = WarningPromptString;
                RevertPopupDescriptionString = Repl(SingleWarningString, "%x%", RestartDescString, true);                
                RevertPopupDescriptionString $= (". " $ ContinueString);
                if(bNeedsRevertCountdown)
                {                    
                    RevertPopupDescriptionString $= ("

" $ WillExpireString);
                    TempString = Repl(RevertPopupDescriptionString, "%x%", string(ExpireTime), true);
                    Manager.DelayedOpenPopup(0, 0, PromptString, TempString, OKString, CancelString, OnRestartConfirm, OnSettingsRevert);                    
                }
                else
                {
                    Manager.DelayedOpenPopup(0, 0, PromptString, RevertPopupDescriptionString, OKString, CancelString, OnRestartConfirm, OnSettingsRevert);
                }                
            }
            else
            {
                RevertPopupDescriptionString = KeepSettingsPromptString;
                if(bNeedsRevertCountdown)
                {                    
                    RevertPopupDescriptionString $= ("

" $ WillExpireString);
                    TempString = Repl(RevertPopupDescriptionString, "%x%", string(ExpireTime), true);
                    Manager.DelayedOpenPopup(0, 0, PromptString, TempString, OKString, CancelString, OnSettingsConfirm, OnSettingsRevert);                    
                }
                else
                {
                    Manager.DelayedOpenPopup(0, 0, PromptString, RevertPopupDescriptionString, OKString, CancelString, OnSettingsConfirm, OnSettingsRevert);
                }
            }
        }
    }
}

function OnGraphicsQualitySet(int Index)
{
    UpdateAdvancedSettingsUI(Index);
}

function UpdateResolutionList(KFGFxOptionsMenu_Graphics.SupportedAspectRatio InAspectRatio)
{
    local int I, CurrentResolutionIndex;
    local GFxObject ResolutionSlot, DataProvider, OptionsObj;
    local string CurrentRes;

    CurrentResolutionIndex = 0;
    CurrentRes = (string(CurrentGFXSettings.Resolution.ResX) $ "x") $ string(CurrentGFXSettings.Resolution.ResY);
    RefreshSupportedResolutions(InAspectRatio);
    DataProvider = Outer.CreateArray();
    I = 0;
    J0xC5:

    if(I < SupportedResolutionList.Length)
    {
        ResolutionSlot = Outer.CreateObject("Object");
        ResolutionSlot.SetString("label", SupportedResolutionList[I]);
        if(CurrentRes == SupportedResolutionList[I])
        {
            CurrentResolutionIndex = I;
        }
        DataProvider.SetElementObject(I, ResolutionSlot);
        ++ I;
        goto J0xC5;
    }
    SetObject("resolutionOptions", DataProvider);
    OptionsObj = GetObject("options");
    OptionsObj.SetInt("resolution", CurrentResolutionIndex);
    SetObject("options", OptionsObj);
}

function OnAspectRatioSet(int Index)
{
    UpdateResolutionList(AvailableAspectRatioList[Index]);
}

function OnAdvancedOptionChanged();

function OnResolutionSettingChanged(ResolutionSetting OldSetting, ResolutionSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bNeedsRevertCountdown = byte(bNeedsRevertCountdown | 1);
}

function OnVsyncSettingChanged(VSyncSetting OldSetting, VSyncSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnDisplaySettingChanged(DisplaySetting OldSetting, DisplaySetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bNeedsRevertCountdown = byte(bNeedsRevertCountdown | 1);
}

function OnVariableFramerateSettingChanged(VariableFramerateSetting OldSetting, VariableFramerateSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnFilmGrainSettingChanged(FilmGrainSetting OldSetting, FilmGrainSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnEnvironmentDetailSettingChanged(EnvironmentDetailSetting OldSetting, EnvironmentDetailSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
}

function OnCharacterDetailSettingChanged(CharacterDetailSetting OldSetting, CharacterDetailSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnFXQualitySettingChanged(FXQualitySetting OldSetting, FXQualitySetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
}

function OnTextureResolutionSettingChanged(TextureResolutionSetting OldSetting, TextureResolutionSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnTextureFilteringSettingChanged(TextureFilterSetting OldSetting, TextureFilterSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
}

function OnShadowQualitySettingChanged(ShadowQualitySetting OldSetting, ShadowQualitySetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
}

function OnReflectionSettingChanged(RealtimeReflectionsSetting OldSetting, RealtimeReflectionsSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    if(!OldSetting.bAllowScreenSpaceReflections && NewSetting.bAllowScreenSpaceReflections)
    {
        PerformanceWarningLevel = byte(Max(PerformanceWarningLevel, 1));
    }
}

function OnAntiAliasingSettingChanged(AntiAliasingSetting OldSetting, AntiAliasingSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnBloomSettingChanged(BloomSetting OldSetting, BloomSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnMotionBlurSettingChanged(MotionBlurSetting OldSetting, MotionBlurSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnAmbientOcclusionSettingChanged(AmbientOcclusionSetting OldSetting, AmbientOcclusionSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    if(NewSetting.HBAO)
    {
        PerformanceWarningLevel = byte(Max(PerformanceWarningLevel, 1));
    }
}

function OnDOFSettingChanged(DOFSetting OldSetting, DOFSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnVolumetricLightingSettingChanged(VolumetricLightingSetting OldSetting, VolumetricLightingSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
}

function OnLensFlareSettingChanged(LensFlareSetting OldSetting, LensFlareSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
}

function OnLightShaftsSettingChanged(LightShaftsSetting OldSetting, LightShaftsSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
}

function OnFlexSettingChanged(FlexSetting OldSetting, FlexSetting NewSetting, out byte bUpdateSystemSettings, out byte bRequiresRestart, out byte PerformanceWarningLevel, out byte bNeedsRevertCountdown)
{
    bUpdateSystemSettings = byte(bUpdateSystemSettings | 1);
    bRequiresRestart = byte(bRequiresRestart | 1);
    if((NewSetting.FlexLevel > OldSetting.FlexLevel) && NewSetting.FlexLevel == 1)
    {
        PerformanceWarningLevel = byte(Max(PerformanceWarningLevel, 1));
    }
    if((NewSetting.FlexLevel > OldSetting.FlexLevel) && NewSetting.FlexLevel == 2)
    {
        PerformanceWarningLevel = byte(Max(PerformanceWarningLevel, 2));
    }
}

function OnSettingsConfirm()
{
    bIsRevertCoundownActive = false;
}

function OnRestartConfirm()
{
    bIsRevertCoundownActive = false;
    Outer.ConsoleCommand("RESTART");
}

function OnSettingsRevert()
{
    RevertSettings();
}

function OnSaveConfirm()
{
    SetGFXSettings(UnsavedGFXSettings);
    if(UnsavedPendingRestart)
    {
        Outer.ConsoleCommand("RESTART");
    }
    Manager.OpenMenu(6);
}

function OnSaveCancel()
{
    ResetValues();
    Manager.OpenMenu(6);
}

function Callback_CloseMenu()
{
    local GFXSettings NewGFXSettings;
    local string PromptString, DescriptionString;
    local byte UpdateSystemSettings, NeedsRestart, PerformanceWarningLevel, NeedsRevertCountdown;

    GetCurrentGFXSettings(CurrentGFXSettings);
    NewGFXSettings = CurrentGFXSettings;
    GetModifiedGFXSettings(NewGFXSettings);
    UpdateSystemSettings = 0;
    NeedsRestart = 0;
    NeedsRevertCountdown = 0;
    PerformanceWarningLevel = 0;
    CheckForChangedSettings(NewGFXSettings, UpdateSystemSettings, NeedsRestart, PerformanceWarningLevel, NeedsRevertCountdown);
    if(UpdateSystemSettings != 0)
    {
        UnsavedGFXSettings = NewGFXSettings;
        UnsavedPendingRestart = NeedsRestart > 0;
        if((PerformanceWarningLevel > 0) && NeedsRestart > 0)
        {
            PromptString = WarningPromptString;
            DescriptionString = UnsavedChangesString $ ". ";            
            DescriptionString $= (Repl(Repl(DoubleWarningString, "%x%", PerformanceDescString[PerformanceWarningLevel - 1], true), "%y%", RestartDescString, true) $ ". ");            
            DescriptionString $= ("

" $ SaveChangesString);            
        }
        else
        {
            if(PerformanceWarningLevel > 0)
            {
                PromptString = WarningPromptString;
                DescriptionString = UnsavedChangesString $ ". ";                
                DescriptionString $= (Repl(SingleWarningString, "%x%", PerformanceDescString[PerformanceWarningLevel - 1], true) $ ". ");                
                DescriptionString $= ("

" $ SaveChangesString);                
            }
            else
            {
                if(NeedsRestart > 0)
                {
                    PromptString = WarningPromptString;
                    DescriptionString = UnsavedChangesString $ ". ";                    
                    DescriptionString $= (Repl(SingleWarningString, "%x%", RestartDescString, true) $ ". ");                    
                    DescriptionString $= ("

" $ SaveChangesString);                    
                }
                else
                {
                    PromptString = "";
                    DescriptionString = UnsavedChangesString $ ". ";                    
                    DescriptionString $= ("

" $ SaveChangesString);
                }
            }
        }
        Manager.DelayedOpenPopup(0, 0, PromptString, DescriptionString, Class'KFCommon_LocalizedStrings'.default.YesString, Class'KFCommon_LocalizedStrings'.default.NoString, OnSaveConfirm, OnSaveCancel);        
    }
    else
    {
        ResetValues();
        Manager.OpenMenu(6);
    }
}

function Callback_FleXOptionChange(bool bShowPopUp)
{
    if(bShowPopUp)
    {
        Manager.DelayedOpenPopup(2, 0, WarningPromptString, FlexPopUpString, Class'KFCommon_LocalizedStrings'.default.OKString);
    }
}

function Callback_ApplyVideo()
{
    Apply();
}

function Callback_CancelVideo()
{
    ResetValues();
    Manager.OpenMenu(6);
}

function Callback_ResetDefaultVideo()
{
    local GFxObject OptionsObj;
    local int GraphicsQualityIndex;
    local float FilmGrainSliderValue;
    local FilmGrainSetting DefultImageGrain;

    OptionsObj = GetObject("options");
    GraphicsQualityIndex = GetGraphicsQualityFromCompat(GetCompatLevel());
    OptionsObj.SetInt("graphics", GraphicsQualityIndex);
    DefultImageGrain.FilmGrainScale = 1;
    FilmGrainSliderValue = GetFilmGrainSliderValue(DefultImageGrain, FilmGrainMinMaxPreset);
    OptionsObj.SetFloat("filmGrain", FilmGrainSliderValue);
    OptionsObj.SetInt("vSync", 0);
    OptionsObj.SetBool("variableFrameRate", false);
    SetObject("options", OptionsObj);
    OnGraphicsQualitySet(GraphicsQualityIndex);
}

function Callback_OpenGamma()
{
    Manager.SetVariableBool("bStartUpGamma", false);
    Manager.DelayedOpenPopup(1, 4, "", AdjustGammaDescription, ResetGammaString, SetGammaString);
}

defaultproperties
{
    ExpireTime=30
    FlexPopUpString="NVIDIA? FleX enables simulated gore and fluid. This setting may adversely affect performance and requires a restart."
    KeepSettingsPromptString="Use these video settings?"
    WarningPromptString="WARNING"
    WillExpireString="Settings will revert in %x% seconds."
    PerformanceDescString[0]="adversely affect performance"
    PerformanceDescString[1]="severely affect performance"
    RestartDescString="require a restart"
    SingleWarningString="Some of the settings selected may %x%"
    DoubleWarningString="Some of the settings selected may %x% and %y%"
    UnsavedChangesString="You have unsaved changes"
    ContinueString="Do you want to continue?"
    SaveChangesString="Do you want to save them now?"
    AdjustGammaDescription="Adjust the slider until the creature on the left is barely visible and creature on the right is clearly visible."
    ResetGammaString="RESET"
    SetGammaString="APPLY"
    GraphicsString="GRAPHICS"
    BasicString="Basic"
    AdvancedString="Advanced"
    EffectsString="Effects"
    AspectRatioString="Aspect Ratio"
    ResolutionString="Resolution"
    GraphicsQualityString="Graphics Quality"
    VSyncString="Vertical Sync"
    FullscreenString="Display"
    VariableFrameRateString="Variable Frame Rate"
    AdjustGammaString="ADJUST GAMMA"
    FilmGrainString="Film Grain"
    EnvironmentDetailsString="Environment Detail"
    CharacterDetailString="Character Detail"
    FXString="FX"
    TextureResolutionString="Texture Resolution"
    TextureFilteringString="Texture Filtering"
    ShadowsString="Shadow Quality"
    RealtimeReflectionsString="Realtime Reflections"
    AntiAliasingString="Anti-Aliasing"
    BloomString="Bloom"
    MotionBlurString="Motion Blur"
    AmbientOcclusionString="Ambient Occlusion"
    DepthOfFieldString="Depth of Field"
    VolumetricLightingString="Volumetric Lighting FX"
    lensFlaresString="Lens Flares"
    LightShaftsString="Light Shafts"
    CustomString="Custom"
    IniOverrideString="INI Override"
    OKString="OK"
    ApplyString="APPLY"
    CancelString="CANCEL"
    DefaultString="DEFAULT"
    PhysicsLevelString="NVIDIA? FleX"
    PhysicsLevelOptionStrings(0)="Off"
    PhysicsLevelOptionStrings(1)="Gibs*"
    PhysicsLevelOptionStrings(2)="Gibs AND Fluids*"
    PhysicsLevelSuggestionStrings(0)=""
    PhysicsLevelSuggestionStrings(1)="*GeForce? GTX? 770 or higher recommended"
    PhysicsLevelSuggestionStrings(2)="*GeForce? GTX? 980 or higher recommended"
    AspectRatioString_All="All"
    StandardAspectRatioString_4_3="4:3"
    StandardAspectRatioString_5_4="5:4"
    StandardAspectRatioString_3_2="3:2"
    WideAspectRatioString_16_9="16:9"
    WideAspectRatioString_16_10="16:10"
    ExtraWideAspectRatioString_2_1="2:1"
    ExtraWideAspectRatioString_21_9="21:9"
    MultiMonitorAspectRatioString="MultiMonitor"
    FullScreenStringOptions(0)="Windowed"
    FullScreenStringOptions(1)="Borderless"
    FullScreenStringOptions(2)="Fullscreen"
    GraphicsQualityStringOptions(0)="Low"
    GraphicsQualityStringOptions(1)="Medium"
    GraphicsQualityStringOptions(2)="High"
    GraphicsQualityStringOptions(3)="Ultra"
    VSyncStringOptions(0)="Off"
    VSyncStringOptions(1)="On"
    EnvironmentDetailsStringOptions(0)="Low"
    EnvironmentDetailsStringOptions(1)="Medium"
    EnvironmentDetailsStringOptions(2)="High"
    EnvironmentDetailsStringOptions(3)="Ultra"
    CharacterDetailStringOptions(0)="Low"
    CharacterDetailStringOptions(1)="High"
    CharacterDetailStringOptions(2)="Ultra"
    FXStringOptions(0)="Low"
    FXStringOptions(1)="Medium"
    FXStringOptions(2)="High"
    FXStringOptions(3)="Ultra"
    TextureResolutionStringOptions(0)="Low"
    TextureResolutionStringOptions(1)="Medium"
    TextureResolutionStringOptions(2)="High"
    TextureResolutionStringOptions(3)="Ultra"
    TextureFilteringStringOptions(0)="Bilinear"
    TextureFilteringStringOptions(1)="Trilinear"
    TextureFilteringStringOptions(2)="4x Anisotropic"
    TextureFilteringStringOptions(3)="16x Anisotropic"
    ShadowsStringOptions(0)="Low"
    ShadowsStringOptions(1)="Medium"
    ShadowsStringOptions(2)="High"
    ShadowsStringOptions(3)="Ultra"
    RealtimeReflectionsStringOptions(0)="Off"
    RealtimeReflectionsStringOptions(1)="On"
    AntiAliasingStringOptions(0)="Off"
    AntiAliasingStringOptions(1)="FXAA"
    BloomStringOptions(0)="Off"
    BloomStringOptions(1)="Low"
    BloomStringOptions(2)="High"
    MotionBlurStringOptions(0)="Off"
    MotionBlurStringOptions(1)="On"
    AmbientOcclusionStringOptions(0)="Off"
    AmbientOcclusionStringOptions(1)="SSAO"
    AmbientOcclusionStringOptions(2)="HBAO+"
    DepthOfFieldStringOptions(0)="Off"
    DepthOfFieldStringOptions(1)="On"
    OffOnStringOptions(0)="Off"
    OffOnStringOptions(1)="On"
    GraphicsQualityPresets(0)=(EnvironmentDetailIndex=0,CharacterDetailIndex=0,FXQualityIndex=0,TextureResolutionIndex=0,TextureFilteringIndex=0,ShadowQualityIndex=0,RealtimeReflectionsIndex=0,LightShafts=false,VolumetricLighting=false,LensFlares=false,AntiAliasingIndex=0,BloomIndex=0,MotionBlurIndex=0,AmbientOcclusionIndex=0,DOFIndex=0,FlexIndex=0)
    GraphicsQualityPresets(1)=(EnvironmentDetailIndex=1,CharacterDetailIndex=0,FXQualityIndex=1,TextureResolutionIndex=1,TextureFilteringIndex=1,ShadowQualityIndex=1,RealtimeReflectionsIndex=0,LightShafts=false,VolumetricLighting=false,LensFlares=false,AntiAliasingIndex=1,BloomIndex=1,MotionBlurIndex=0,AmbientOcclusionIndex=0,DOFIndex=0,FlexIndex=0)
    GraphicsQualityPresets(2)=(EnvironmentDetailIndex=2,CharacterDetailIndex=1,FXQualityIndex=2,TextureResolutionIndex=2,TextureFilteringIndex=2,ShadowQualityIndex=2,RealtimeReflectionsIndex=0,LightShafts=true,VolumetricLighting=true,LensFlares=true,AntiAliasingIndex=1,BloomIndex=2,MotionBlurIndex=0,AmbientOcclusionIndex=1,DOFIndex=1,FlexIndex=0)
    GraphicsQualityPresets(3)=(EnvironmentDetailIndex=3,CharacterDetailIndex=2,FXQualityIndex=3,TextureResolutionIndex=3,TextureFilteringIndex=3,ShadowQualityIndex=3,RealtimeReflectionsIndex=1,LightShafts=true,VolumetricLighting=true,LensFlares=true,AntiAliasingIndex=1,BloomIndex=2,MotionBlurIndex=1,AmbientOcclusionIndex=2,DOFIndex=1,FlexIndex=0)
    GraphicsQualityPresets(4)=(EnvironmentDetailIndex=2,CharacterDetailIndex=1,FXQualityIndex=2,TextureResolutionIndex=2,TextureFilteringIndex=2,ShadowQualityIndex=2,RealtimeReflectionsIndex=0,LightShafts=true,VolumetricLighting=true,LensFlares=true,AntiAliasingIndex=1,BloomIndex=2,MotionBlurIndex=0,AmbientOcclusionIndex=1,DOFIndex=1,FlexIndex=1)
    GraphicsQualityPresets(5)=(EnvironmentDetailIndex=2,CharacterDetailIndex=1,FXQualityIndex=2,TextureResolutionIndex=2,TextureFilteringIndex=2,ShadowQualityIndex=2,RealtimeReflectionsIndex=0,LightShafts=true,VolumetricLighting=true,LensFlares=true,AntiAliasingIndex=1,BloomIndex=2,MotionBlurIndex=0,AmbientOcclusionIndex=1,DOFIndex=1,FlexIndex=2)
    GraphicsQualityPresets(6)=(EnvironmentDetailIndex=3,CharacterDetailIndex=2,FXQualityIndex=3,TextureResolutionIndex=3,TextureFilteringIndex=3,ShadowQualityIndex=3,RealtimeReflectionsIndex=1,LightShafts=true,VolumetricLighting=true,LensFlares=true,AntiAliasingIndex=1,BloomIndex=2,MotionBlurIndex=1,AmbientOcclusionIndex=2,DOFIndex=1,FlexIndex=2)
    DisplayPresets(0)=(Fullscreen=false,BorderlessWindow=false)
    DisplayPresets(1)=(Fullscreen=false,BorderlessWindow=true)
    DisplayPresets(2)=(Fullscreen=true,BorderlessWindow=false)
    VSyncPresets(0)=(VSync=false)
    VSyncPresets(1)=(VSync=true)
    VariableFrameratePresets(0)=(VariableFrameRate=false)
    VariableFrameratePresets(1)=(VariableFrameRate=true)
    FilmGrainMinMaxPreset(0)=(FilmGrainScale=0.5)
    FilmGrainMinMaxPreset(1)=(FilmGrainScale=37.5)
    FlexPresets(0)=(FlexLevel=0)
    FlexPresets(1)=(FlexLevel=1)
    FlexPresets(2)=(FlexLevel=2)
    EnvironmentDetailPresets(0)=(DetailMode=0,AllowLightFunctions=false,bDisableCanBecomeDynamicWakeup=true,MakeDynamicCollisionThreshold=200,DestructionLifetimeScale=0.25)
    EnvironmentDetailPresets(1)=(DetailMode=1,AllowLightFunctions=false,bDisableCanBecomeDynamicWakeup=false,MakeDynamicCollisionThreshold=200,DestructionLifetimeScale=0.5)
    EnvironmentDetailPresets(2)=(DetailMode=2,AllowLightFunctions=true,bDisableCanBecomeDynamicWakeup=false,MakeDynamicCollisionThreshold=150,DestructionLifetimeScale=1)
    EnvironmentDetailPresets(3)=(DetailMode=2,AllowLightFunctions=true,bDisableCanBecomeDynamicWakeup=false,MakeDynamicCollisionThreshold=150,DestructionLifetimeScale=1.2)
    ShadowQualityPresets(0)=(bAllowWholeSceneDominantShadows=false,bOverrideMapWholeSceneDominantShadowSetting=false,bAllowDynamicShadows=true,bAllowPerObjectShadows=false,MaxWholeSceneDominantShadowResolution=1204,MaxShadowResolution=1024,ShadowFadeResolution=256,MinShadowResolution=128,ShadowTexelsPerPixel=0.5,GlobalShadowDistanceScale=0.75,AllowForegroundPreshadows=false)
    ShadowQualityPresets(1)=(bAllowWholeSceneDominantShadows=true,bOverrideMapWholeSceneDominantShadowSetting=false,bAllowDynamicShadows=true,bAllowPerObjectShadows=true,MaxWholeSceneDominantShadowResolution=1204,MaxShadowResolution=1024,ShadowFadeResolution=128,MinShadowResolution=64,ShadowTexelsPerPixel=1,GlobalShadowDistanceScale=0.75,AllowForegroundPreshadows=false)
    ShadowQualityPresets(2)=(bAllowWholeSceneDominantShadows=true,bOverrideMapWholeSceneDominantShadowSetting=false,bAllowDynamicShadows=true,bAllowPerObjectShadows=true,MaxWholeSceneDominantShadowResolution=1280,MaxShadowResolution=1024,ShadowFadeResolution=128,MinShadowResolution=64,ShadowTexelsPerPixel=1.3,GlobalShadowDistanceScale=1,AllowForegroundPreshadows=true)
    ShadowQualityPresets(3)=(bAllowWholeSceneDominantShadows=true,bOverrideMapWholeSceneDominantShadowSetting=true,bAllowDynamicShadows=true,bAllowPerObjectShadows=true,MaxWholeSceneDominantShadowResolution=2048,MaxShadowResolution=1536,ShadowFadeResolution=64,MinShadowResolution=32,ShadowTexelsPerPixel=2,GlobalShadowDistanceScale=1.5,AllowForegroundPreshadows=true)
    FXQualityPresets(0)=(ParticleLODBias=1,DistanceFogQuality=0,Distortion=false,FilteredDistortion=false,DropParticleDistortion=true,AllowSecondaryBloodEffects=false,EmitterPoolScale=0.25,ShellEjectLifetime=2,AllowExplosionLights=false,AllowSprayActorLights=false,AllowFootstepSounds=false,AllowBloodSplatterDecals=false,AllowRagdollAndGoreOnDeadBodies=false,AllowPilotLights=false,MaxImpactEffectDecals=8,MaxExplosionDecals=8,GoreFXLifetimeMultiplier=0.5,MaxBloodEffects=12,MaxGoreEffects=8,MaxPersistentSplatsPerFrame=25)
    FXQualityPresets(1)=(ParticleLODBias=0,DistanceFogQuality=0,Distortion=false,FilteredDistortion=false,DropParticleDistortion=true,AllowSecondaryBloodEffects=false,EmitterPoolScale=0.5,ShellEjectLifetime=5,AllowExplosionLights=true,AllowSprayActorLights=false,AllowFootstepSounds=true,AllowBloodSplatterDecals=false,AllowRagdollAndGoreOnDeadBodies=true,AllowPilotLights=true,MaxImpactEffectDecals=15,MaxExplosionDecals=12,GoreFXLifetimeMultiplier=0.75,MaxBloodEffects=15,MaxGoreEffects=8,MaxPersistentSplatsPerFrame=50)
    FXQualityPresets(2)=(ParticleLODBias=0,DistanceFogQuality=1,Distortion=true,FilteredDistortion=true,DropParticleDistortion=false,AllowSecondaryBloodEffects=true,EmitterPoolScale=1,ShellEjectLifetime=10,AllowExplosionLights=true,AllowSprayActorLights=true,AllowFootstepSounds=true,AllowBloodSplatterDecals=true,AllowRagdollAndGoreOnDeadBodies=true,AllowPilotLights=true,MaxImpactEffectDecals=20,MaxExplosionDecals=15,GoreFXLifetimeMultiplier=1,MaxBloodEffects=25,MaxGoreEffects=10,MaxPersistentSplatsPerFrame=75)
    FXQualityPresets(3)=(ParticleLODBias=0,DistanceFogQuality=1,Distortion=true,FilteredDistortion=true,DropParticleDistortion=false,AllowSecondaryBloodEffects=true,EmitterPoolScale=2,ShellEjectLifetime=20,AllowExplosionLights=true,AllowSprayActorLights=true,AllowFootstepSounds=true,AllowBloodSplatterDecals=true,AllowRagdollAndGoreOnDeadBodies=true,AllowPilotLights=true,MaxImpactEffectDecals=40,MaxExplosionDecals=20,GoreFXLifetimeMultiplier=1.2,MaxBloodEffects=40,MaxGoreEffects=15,MaxPersistentSplatsPerFrame=100)
    RealtimeReflectionsPresets(0)=(bAllowScreenSpaceReflections=false)
    RealtimeReflectionsPresets(1)=(bAllowScreenSpaceReflections=true)
    CharacterDetailPresets(0)=(SkeletalMeshLODBias=1,AllowSubsurfaceScattering=false,KinematicUpdateDistFactorScale=3,ShouldCorpseCollideWithDead=false,ShouldCorpseCollideWithLiving=false,ShouldCorpseCollideWithDeadAfterSleep=false,MaxBodyWoundDecals=2,MaxDeadBodies=8,bAllowPhysics=false)
    CharacterDetailPresets(1)=(SkeletalMeshLODBias=0,AllowSubsurfaceScattering=false,KinematicUpdateDistFactorScale=1.3,ShouldCorpseCollideWithDead=true,ShouldCorpseCollideWithLiving=true,ShouldCorpseCollideWithDeadAfterSleep=false,MaxBodyWoundDecals=5,MaxDeadBodies=12,bAllowPhysics=true)
    CharacterDetailPresets(2)=(SkeletalMeshLODBias=0,AllowSubsurfaceScattering=true,KinematicUpdateDistFactorScale=1,ShouldCorpseCollideWithDead=true,ShouldCorpseCollideWithLiving=true,ShouldCorpseCollideWithDeadAfterSleep=true,MaxBodyWoundDecals=5,MaxDeadBodies=15,bAllowPhysics=true)
    LightShaftsPresets(0)=(bAllowLightShafts=false)
    LightShaftsPresets(1)=(bAllowLightShafts=true)
    VolumetricLightingPresets(0)=(bAllowLightCones=false)
    VolumetricLightingPresets(1)=(bAllowLightCones=true)
    LensFlarePresets(0)=(bAllowLensFlares=false)
    LensFlarePresets(1)=(bAllowLensFlares=true)
    TextureResolutionPresets(0)=(UIBias=0,ShadowmapBias=1,CharacterBias=3,Weapon1stBias=1,Weapon3rdBias=1,EnvironmentBias=2,FXBias=1)
    TextureResolutionPresets(1)=(UIBias=0,ShadowmapBias=0,CharacterBias=2,Weapon1stBias=1,Weapon3rdBias=1,EnvironmentBias=2,FXBias=1)
    TextureResolutionPresets(2)=(UIBias=0,ShadowmapBias=0,CharacterBias=1,Weapon1stBias=0,Weapon3rdBias=0,EnvironmentBias=1,FXBias=0)
    TextureResolutionPresets(3)=(UIBias=0,ShadowmapBias=0,CharacterBias=0,Weapon1stBias=0,Weapon3rdBias=0,EnvironmentBias=0,FXBias=0)
    TextureFilterPresets(0)=(MinMagFilter=Linear,MipFilter=Point,MaxAnisotropy=1)
    TextureFilterPresets(1)=(MinMagFilter=Linear,MipFilter=Linear,MaxAnisotropy=1)
    TextureFilterPresets(2)=(MinMagFilter=Aniso,MipFilter=Linear,MaxAnisotropy=4)
    TextureFilterPresets(3)=(MinMagFilter=Aniso,MipFilter=Linear,MaxAnisotropy=16)
    BloomPresets(0)=(Bloom=false,BloomQuality=0)
    BloomPresets(1)=(Bloom=true,BloomQuality=1)
    BloomPresets(2)=(Bloom=true,BloomQuality=2)
    MotionBlurPresets(0)=(MotionBlur=false,MotionBlurQuality=0)
    MotionBlurPresets(1)=(MotionBlur=true,MotionBlurQuality=1)
    AntiAliasingPresets(0)=(PostProcessAA=false)
    AntiAliasingPresets(1)=(PostProcessAA=true)
    AmbientOcclusionPresets(0)=(AmbientOcclusion=false,HBAO=false)
    AmbientOcclusionPresets(1)=(AmbientOcclusion=true,HBAO=false)
    AmbientOcclusionPresets(2)=(AmbientOcclusion=true,HBAO=true)
    DOFPresets(0)=(DepthOfField=false,DepthOfFieldQuality=0)
    DOFPresets(1)=(DepthOfField=true,DepthOfFieldQuality=1)
    DOFPresets(2)=(DepthOfField=true,DepthOfFieldQuality=2)
    DOFPresets(3)=(DepthOfField=true,DepthOfFieldQuality=3)
}