/*******************************************************************************
 * KFGameInfo_Entry generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameInfo_Entry extends KFGameInfo
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var bool bInitialized;
var bool bInitPiles;
var int LastSystemTimeMinutes;
var array<KFActor_DoshPile> DoshVaultStacks;
var array<MaterialInstanceActor> TierLights;
var int FrontPilesInWorld;
var int FrontPilesActive;
var array<int> TierThreshold;
var string LightMICTagName;
var string LightConeTagName;
var string LightBulbTagName;
var string DoshLitterMICTagName;
var string CustomPawnSpawnPointTagName;
var int FilledPalletCount;
var int LastUpdateDoshAmount;
var() LinearColor WhiteColor;
var() LinearColor OffColor;
var KFPawn_Customization VaultCustomPawn;
var int CalcultedTierValue;

static function PreloadContentClasses();

function bool NeedPlayers();

function Pawn SpawnDefaultPawnFor(Controller NewPlayer, NavigationPoint StartSpot);

function InitSpawnManager();

function InitTraderList();

function InitVault()
{
    local KFPlayerController KFPC;
    local LocalPlayer LP;
    local int I;

    KFPC = KFPlayerController(WorldInfo.GetALocalPlayerController());
    if(KFPC == none)
    {
        return;
    }
    LP = LocalPlayer(KFPC.Player);
    if(LP != none)
    {
        LP.RemoveAllPostProcessingChains();
        LP.InsertPostProcessingChain(LP.Outer.GetWorldPostProcessChain(), -1, true);
    }
    if(KFPC.myHUD != none)
    {
        KFPC.myHUD.NotifyBindPostProcessEffects();
    }
    SetDoshTier(GetTotalDoshTier(KFPC));
    InitDoshPiles(KFPC);
    SpawnVaultCustomizationPawn(KFPC);
    if(!bInitialized)
    {
        I = 0;
        J0x1B1:

        if(I < TierThreshold.Length)
        {
            ActiveLightActorsForTier(I, I == 0);
            ++ I;
            goto J0x1B1;
        }
    }
}

function SpawnVaultCustomizationPawn(KFPlayerController KFPC)
{
    local KFGameInfo KFGI;
    local NavigationPoint BestStart;

    if(VaultCustomPawn != none)
    {
        return;
    }
    KFGI = KFGameInfo(WorldInfo.Game);
    if((KFGI == none) || (KFGI.bRestartLevel && WorldInfo.NetMode != NM_DedicatedServer) && WorldInfo.NetMode != NM_ListenServer)
    {
        WarnInternal("bRestartLevel && !server, abort from RestartPlayer" @ string(WorldInfo.NetMode));
        return;
    }
    BestStart = GetVaultCustomizationSpawnPoint(KFGI);
    VaultCustomPawn = KFPawn_Customization(KFGI.SpawnCustomizationPawn(BestStart));
    if(VaultCustomPawn != none)
    {
        VaultCustomPawn.InitializeCustomizationPawn(KFPC, BestStart);
    }
}

function NavigationPoint GetVaultCustomizationSpawnPoint(KFGameInfo KFGI)
{
    local NavigationPoint BestStartSpot;

    foreach AllActors(Class'NavigationPoint', BestStartSpot)
    {
        if(string(BestStartSpot.Tag) == CustomPawnSpawnPointTagName)
        {            
            return BestStartSpot;
        }        
    }    
    return BestStartSpot;
}

event InitDoshPiles(KFPlayerController KFPC)
{
    if(KFPC == none)
    {
        return;
    }
    CalcultedTierValue = GetTotalDoshTier(KFPC);
    CollectDoshPiles();
    SortDoshPiles();
    SpawnDoshPilesForAmount(KFPC.GetLastSeenDoshCount());
    InitDoshLitter(CalcultedTierValue);
    bInitPiles = true;
}

function InitDoshLitter(int DoshTier)
{
    local MaterialInstanceActor DoshLitterMICActor;
    local MaterialInstanceConstant MICInst;

    foreach AllActors(Class'MaterialInstanceActor', DoshLitterMICActor)
    {
        if(string(DoshLitterMICActor.Tag) == DoshLitterMICTagName)
        {
            MICInst = new (self) Class'MaterialInstanceConstant';
            MICInst.SetParent(DoshLitterMICActor.MatInst);
            MICInst.SetScalarParameterValue('Dosh_Amount', float(CalcultedTierValue) / float(TierThreshold.Length - 1));
            DoshLitterMICActor.MatInst = MICInst;
        }        
    }    
}

function CollectDoshPiles()
{
    local KFActor_DoshPile DoshPile;
    local int Index;

    Index = 0;
    DoshVaultStacks.Length = 0;
    foreach AllActors(Class'KFActor_DoshPile', DoshPile)
    {
        DoshVaultStacks.AddItem(DoshPile;
        DoshPile.SetHidden(true);
        DoshPile.PileIndexID = Index;
        DoshPile.SetValue(0);
        ++ Index;        
    }    
}

function SortDoshPiles()
{
    DoshVaultStacks.Sort(CompareItemTags;
}

function int CompareItemTags(Actor Actor1, Actor Actor2)
{
    local string Tag1, Tag2;

    Tag1 = string(Actor1.Tag);
    Tag2 = string(Actor2.Tag);
    if(Tag1 == Tag2)
    {
        return 0;
    }
    if(Len(Tag1) != Len(Tag2))
    {
        return ((Len(Tag1) > Len(Tag2)) ? -1 : 1);
    }
    return ((Tag1 > Tag2) ? -1 : 1);
}

function int GetTotalDoshTier(KFPlayerController KFPC)
{
    local int TierValue, NumPiles, I;

    NumPiles = int(float(KFPC.GetTotalDoshCount()) / Class'KFActor_DoshPile'.default.DoshPileMax);
    I = 0;
    J0x58:

    if(I < TierThreshold.Length)
    {
        if(NumPiles >= TierThreshold[I])
        {
            TierValue = I;
        }
        ++ I;
        goto J0x58;
    }
    return TierValue;
}

function FinalAnimationPlayed(KFPlayerController KFPC)
{
    SetDoshTier(GetTotalDoshTier(KFPC), true);
}

function SetDoshTier(int TierValue, optional bool bFinalAnimation)
{
    local array<SequenceObject> ActivationEvents;
    local KFSeqEvent_DoshVault ActivationEvent;
    local int I;

    bFinalAnimation = false;
    WorldInfo.GetGameSequence().FindSeqObjectsByClass(Class'KFSeqEvent_DoshVault', true, ActivationEvents);
    I = 0;
    J0x58:

    if(I < ActivationEvents.Length)
    {
        ActivationEvent = KFSeqEvent_DoshVault(ActivationEvents[I]);
        if(ActivationEvent != none)
        {
            ActivationEvent.SetDoshTier(TierValue);
        }
        ++ I;
        goto J0x58;
    }
}

function SpawnDoshPilesForAmount(int LastSeenDoshAmount)
{
    local int NumPiles, DoshAccountedFor, I, UpdateID;
    local KFActor_DoshPile DoshPile;

    NumPiles = int(float(LastSeenDoshAmount) / Class'KFActor_DoshPile'.default.DoshPileMax);
    FrontPilesActive = (NumPiles % FrontPilesInWorld) + 1;
    DoshAccountedFor = LastSeenDoshAmount;
    I = 0;
    J0x76:

    if(I < DoshVaultStacks.Length)
    {
        if(I < FrontPilesInWorld)
        {
            DoshVaultStacks[I].SetHidden(false);            
        }
        else
        {
            DoshVaultStacks[I].SetHidden(true);
        }
        DoshVaultStacks[I].SetValue(0);
        ++ I;
        goto J0x76;
    }
    UpdateID = FrontPilesInWorld;
    J0x14B:

    if((float(DoshAccountedFor) >= (float(FrontPilesActive) * Class'KFActor_DoshPile'.default.DoshPileMax)) && DoshAccountedFor > 0)
    {
        DoshPile = DoshVaultStacks[UpdateID];
        DoshPile.SetHidden(false);
        DoshPile.SetValue(FMin(float(DoshAccountedFor), Class'KFActor_DoshPile'.default.DoshPileMax) / Class'KFActor_DoshPile'.default.DoshPileMax);
        DoshAccountedFor -= int(Class'KFActor_DoshPile'.default.DoshPileMax);
        DoshAccountedFor = int(FMax(float(DoshAccountedFor), 0));
        ++ UpdateID;
        goto J0x14B;
    }
    UpdateID = 1;
    J0x2A0:

    if(DoshAccountedFor > 0)
    {
        if(float(DoshAccountedFor) >= Class'KFActor_DoshPile'.default.DoshPileMax)
        {
            DoshPile = DoshVaultStacks[UpdateID];            
        }
        else
        {
            DoshPile = DoshVaultStacks[0];
        }
        DoshPile.SetValue(FMin(float(DoshAccountedFor), Class'KFActor_DoshPile'.default.DoshPileMax) / Class'KFActor_DoshPile'.default.DoshPileMax);
        DoshAccountedFor -= int(Class'KFActor_DoshPile'.default.DoshPileMax);
        DoshAccountedFor = int(FMax(float(DoshAccountedFor), 0));
        ++ UpdateID;
        goto J0x2A0;
    }
}

exec function ActiveLightActorsForTier(int LightTier, optional bool bActive)
{
    local Light LightActor;
    local MaterialInstanceActor LightMIC;
    local StaticMeshActor LightCone;
    local MaterialInstanceConstant MICInst;

    bActive = true;
    foreach AllActors(Class'MaterialInstanceActor', LightMIC)
    {
        if(string(LightMIC.Tag) == (LightMICTagName $ string(LightTier)))
        {
            MICInst = new (self) Class'MaterialInstanceConstant';
            MICInst.SetParent(LightMIC.MatInst);
            MICInst.SetVectorParameterValue('Emissive_Color', ((bActive) ? WhiteColor : OffColor));
            LightMIC.MatInst = MICInst;
        }        
    }    
    foreach AllActors(Class'StaticMeshActor', LightCone)
    {
        if(string(LightCone.Tag) == (LightConeTagName $ string(LightTier)))
        {
            LightCone.SetHidden(!bActive);
        }        
    }    
    foreach AllActors(Class'Light', LightActor)
    {
        if(string(LightActor.Tag) == (LightBulbTagName $ string(LightTier)))
        {
            LightActor.LightComponent.SetEnabled(bActive);
        }        
    }    
}

function UpdateDoshPiles(int NewDoshAmount)
{
    local int UpdateID, Idx, I, ValueMultiple;

    if(!bInitPiles)
    {
        InitVault();
    }
    if(LastUpdateDoshAmount == NewDoshAmount)
    {
        return;
    }
    if(NewDoshAmount <= 0)
    {
        return;
    }
    ValueMultiple = int(float(NewDoshAmount) / Class'KFActor_DoshPile'.default.DoshPileMax);
    UpdateID = (ValueMultiple % FrontPilesInWorld) + 1;
    if(((float(NewDoshAmount) % (Class'KFActor_DoshPile'.default.DoshPileMax * float(FrontPilesInWorld))) == float(0)) && LastUpdateDoshAmount != -1)
    {
        I = 0;
        J0xFB:

        if(I < FrontPilesInWorld)
        {
            DoshVaultStacks[I].SpawnCompleteParticleEffects(false);
            ++ I;
            goto J0xFB;
        }
        VaultCustomPawn.PlayEmoteAnimation();
        SpawnDoshPilesForAmount(NewDoshAmount);        
    }
    else
    {
        if(((float(NewDoshAmount) % Class'KFActor_DoshPile'.default.DoshPileMax) == float(0)) && LastUpdateDoshAmount != -1)
        {
            if(UpdateID > 1)
            {
                DoshVaultStacks[0].SetValue(0);
                DoshVaultStacks[0].SpawnCompleteParticleEffects(false);
                DoshVaultStacks[UpdateID - 1].SpawnCompleteParticleEffects();
                VaultCustomPawn.PlayEmoteAnimation();
            }
        }
    }
    Idx = 0;
    J0x277:

    if(Idx <= UpdateID)
    {
        if(Idx == UpdateID)
        {
            DoshVaultStacks[0].SetValue((float(NewDoshAmount) % Class'KFActor_DoshPile'.default.DoshPileMax) / Class'KFActor_DoshPile'.default.DoshPileMax);            
        }
        else
        {
            DoshVaultStacks[Idx].SetValue(1);
        }
        ++ Idx;
        goto J0x277;
    }
    LastUpdateDoshAmount = NewDoshAmount;
}

event InitGame(string Options, out string ErrorMessage)
{
    if((ParseOption(Options, "PerformUnitTests")) ~= "1")
    {
        if(MyAutoTestManager == none)
        {
            MyAutoTestManager = Spawn(AutoTestManagerClass);
        }
        MyAutoTestManager.InitializeOptions(Options);
    }
    if(HasOption(Options, "Closed"))
    {
        Class'KFGameEngine'.static.RefreshOnlineGameData();
    }
    LastSystemTimeMinutes = GetSystemTimeMinutes();
    BroadcastHandler = Spawn(BroadcastHandlerClass);
    InitVault();
}

private final function int GetSystemTimeMinutes()
{
    local int Year, Month, DayOfWeek, Day, Hour, minute,
	    second, MSec;

    GetSystemTime(Year, Month, DayOfWeek, Day, Hour, minute, second, MSec);
    return (minute + (Hour * 60)) + ((Day * 60) * 24);
}

function Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    if(!bInitialized)
    {
        ForceMenuMusicTrack();
        bInitialized = true;
    }
}

exec function FinishCraft()
{
    local KFPlayerController KFPC;

    foreach LocalPlayerControllers(Class'KFPlayerController', KFPC)
    {
        if((KFPC.MyGFxManager != none) && KFPC.MyGFxManager.InventoryMenu != none)
        {
            KFPC.MyGFxManager.InventoryMenu.FinishCraft();
        }        
    }    
}

auto state PendingMatch
{
    ignores RestartPlayer, EndState;

    function Timer()
    {
        local int SystemTimeMinutes;

        SystemTimeMinutes = GetSystemTimeMinutes();
        if((SystemTimeMinutes - LastSystemTimeMinutes) >= 30)
        {
            Class'KFGameEngine'.static.RefreshOnlineGameData();
            LastSystemTimeMinutes = SystemTimeMinutes;
        }
    }

    function BeginState(name PreviousStateName)
    {
        bWaitingToStartMatch = true;
    }
    stop;    
}

defaultproperties
{
    FrontPilesInWorld=10
    TierThreshold(0)=0
    TierThreshold(1)=30
    TierThreshold(2)=70
    TierThreshold(3)=100
    TierThreshold(4)=130
    LightMICTagName="TierMIC_"
    LightConeTagName="TierCone_"
    LightBulbTagName="TierLight_"
    DoshLitterMICTagName="DoshLitter"
    CustomPawnSpawnPointTagName="KFCustomizationPoint_Vault"
    LastUpdateDoshAmount=-1
    WhiteColor=(R=1,G=1,B=1,A=1)
    OffColor=(R=0,G=0,B=0,A=1)
    SupportedEvents=/* Array type was not detected. */
}