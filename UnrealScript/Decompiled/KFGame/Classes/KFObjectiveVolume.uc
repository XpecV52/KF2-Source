/*******************************************************************************
 * KFObjectiveVolume generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFObjectiveVolume extends Volume
    native
    hidecategories(Navigation,Object,Movement,Display)
    implements(KFInterface_Usable);

var KFObjective CurObjective;
var array<PlayerReplicationInfo> ObjPlayerPRIs;
var() export editinline StaticMeshComponent ObjectiveMesh;
var bool bDebugObjectiveVolume;

simulated event PostBeginPlay()
{
    if(bDebugObjectiveVolume)
    {
        LogInternal("[OBJECTIVE VOLUME]" @ string(GetFuncName()));
    }
    super.PostBeginPlay();
    Hide();
}

simulated function InitVolume(KFObjective CurrentObjective)
{
    if(bDebugObjectiveVolume)
    {
        LogInternal("[OBJECTIVE VOLUME]" @ string(GetFuncName()));
    }
    CurObjective = CurrentObjective;
}

simulated function Unhide()
{
    if(bDebugObjectiveVolume)
    {
        LogInternal("[OBJECTIVE VOLUME]" @ string(GetFuncName()));
    }
    SetHidden(false);
}

simulated function Hide()
{
    if(bDebugObjectiveVolume)
    {
        LogInternal("[OBJECTIVE VOLUME]" @ string(GetFuncName()));
    }
    SetHidden(true);
}

simulated function ShutDownVolume()
{
    local KFPawn_Human KFPH;
    local KFPlayerController KFPC;

    if(bDebugObjectiveVolume)
    {
        LogInternal("[OBJECTIVE VOLUME]" @ string(GetFuncName()));
    }
    Hide();
    CurObjective = none;
    foreach TouchingActors(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.IsAliveAndWell() && KFPH.Controller != none)
        {
            KFPC = KFPlayerController(KFPH.Controller);
            if((KFPC != none) && KFPC.Pawn != none)
            {
                Class'KFPlayerController'.static.UpdateInteractionMessages(KFPC.Pawn);
            }
        }        
    }    
}

simulated function int GetNumPlayersActive()
{
    local KFPawn_Human KFPH;
    local KFPlayerReplicationInfo KFPRI;
    local int Num;

    foreach TouchingActors(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.IsAliveAndWell())
        {
            KFPRI = KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo);
            if((KFPRI != none) && CurObjective.IsObjectivePlayer(KFPRI))
            {
                ++ Num;
            }
        }        
    }    
    if(bDebugObjectiveVolume)
    {
        LogInternal((("[OBJECTIVE VOLUME]" @ string(GetFuncName())) @ "Players ready:") @ string(Num));
    }
    return Num;
}

simulated function ShowObjectivePath()
{
    local KFPlayerController KFPC;
    local KFGameReplicationInfo KFGRI;
    local KFEmit_ObjectivePath Path;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if((((KFGRI != none) && CurObjective != none) && KFGRI.CurrentObjective == CurObjective) && CurObjective.ShouldShowObjPath())
    {
        foreach LocalPlayerControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.FindPathTo(Location);
            Path = Spawn(Class'KFEmit_ObjectivePath', KFPC,, KFPC.Pawn.Location);
            Path.SetDestination(Location);
            KFPC.SetTimer(2, false, 'ShowObjectivePath', self);            
        }        
    }
}

simulated function bool GetIsUsable(Pawn User)
{
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(User);
    return ObjectiveIsValid(KFPH);
}

function int GetInteractionIndex()
{
    return 1;
}

function bool UsedBy(Pawn User)
{
    local KFPlayerController KFPC;

    if(GetIsUsable(User))
    {
        KFPC = KFPlayerController(User.Controller);
        if(KFPC != none)
        {
            KFPC.ServerAcceptObj();
        }
    }
    return false;
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    local KFPawn_Human KFPH;

    super(Actor).Touch(Other, OtherComp, HitLocation, HitNormal);
    KFPH = KFPawn_Human(Other);
    if(!ObjectiveIsValid(KFPH))
    {
        return;
    }
    Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
}

event UnTouch(Actor Other)
{
    local KFPawn_Human KFPH;

    super(Actor).UnTouch(Other);
    KFPH = KFPawn_Human(Other);
    if(!ObjectiveIsValid(KFPH))
    {
        return;
    }
    Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
}

function bool ObjectiveIsValid(KFPawn_Human KFPH)
{
    if((((KFPH == none) || CurObjective == none) || (CurObjective != none) && CurObjective.ObjectiveState > 2) || (KFPH != none) && CurObjective.ActiveObjectivePlayers.Find(KFPH.PlayerReplicationInfo != -1)
    {
        return false;
    }
    return true;
}

defaultproperties
{
    begin object name=MeshComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'UI_Objectives_World_MESH.Default_Objective_Cube'
        ReplacementPrimitive=none
        bAllowApproximateOcclusion=true
        CastShadow=false
        bForceDirectLightMap=true
        bCastDynamicShadow=false
        bCastStaticShadow=false
        bUsePrecomputedShadows=true
        BlockActors=false
        BlockZeroExtent=false
        BlockRigidBody=false
        bDisableAllRigidBody=true
        LightingChannels=(bInitialized=true,Indoor=true,Outdoor=true)
    object end
    // Reference: StaticMeshComponent'Default__KFObjectiveVolume.MeshComponent'
    ObjectiveMesh=MeshComponent
    bPawnsOnly=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFObjectiveVolume.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFObjectiveVolume.BrushComponent0'
    Components(0)=BrushComponent0
    begin object name=MeshComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'UI_Objectives_World_MESH.Default_Objective_Cube'
        ReplacementPrimitive=none
        bAllowApproximateOcclusion=true
        CastShadow=false
        bForceDirectLightMap=true
        bCastDynamicShadow=false
        bCastStaticShadow=false
        bUsePrecomputedShadows=true
        BlockActors=false
        BlockZeroExtent=false
        BlockRigidBody=false
        bDisableAllRigidBody=true
        LightingChannels=(bInitialized=true,Indoor=true,Outdoor=true)
    object end
    // Reference: StaticMeshComponent'Default__KFObjectiveVolume.MeshComponent'
    Components(1)=MeshComponent
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bStatic=false
    bHidden=false
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFObjectiveVolume.BrushComponent0'
    CollisionComponent=BrushComponent0
}