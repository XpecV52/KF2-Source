/*******************************************************************************
 * KFGFxWidget_MenuBar generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxWidget_MenuBar extends KFGFxObject_Menu within GFxMoviePlayer;

const KFID_QuickWeaponSelect = 100;
const KFID_CurrentLayoutIndex = 101;
const KFID_ForceFeedbackEnabled = 103;
const KFID_SavedPerkIndex = 105;
const KFID_AllowBloodSplatterDecals = 106;
const KFID_GoreLevel = 107;
const KFID_StoredCharIndex = 111;
const KFID_MasterVolumeMultiplier = 112;
const KFID_DialogVolumeMultiplier = 113;
const KFID_MusicVolumeMultiplier = 114;
const KFID_SFXVolumeMultiplier = 115;
const KFID_GammaMultiplier = 117;
const KFID_MusicVocalsEnabled = 118;
const KFID_MinimalChatter = 119;
const KFID_ShowCrossHair = 121;
const KFID_FOVOptionsPercentageValue = 122;
const KFID_ShowKillTicker = 123;
const KFID_FriendlyHudScale = 125;
const KFID_FavoriteWeapons = 127;
const KFID_GearLoadouts = 128;
const KFID_SetGamma = 129;
const KFID_RequiresPushToTalk = 130;
const KFID_InvertController = 131;
const KFID_AutoTargetEnabled = 132;
const KFID_GamepadSensitivityScale = 133;
const KFID_ZoomedSensitivityScale = 134;
const KFID_GamepadZoomedSensitivityScale = 135;
const KFID_EnableMouseSmoothing = 136;
const KFID_MouseSensitivity = 138;
const KFID_TargetAdhesionEnabled = 139;
const KFID_TargetFrictionEnabled = 140;
const KFID_InvertMouse = 142;
const KFID_DEPRECATED_143 = 143;
const KFID_SavedSoloModeIndex = 144;
const KFID_SavedSoloMapString = 145;
const KFID_SavedSoloDifficultyIndex = 146;
const KFID_SavedSoloLengthIndex = 147;
const KFID_SavedModeIndex = 148;
const KFID_SavedMapString = 149;
const KFID_SavedDifficultyIndex = 150;
const KFID_SavedLengthIndex = 151;
const KFID_SavedPrivacyIndex = 152;
const KFID_SavedServerTypeIndex = 153;
const KFID_SavedInProgressIndex = 154;
const KFID_ControllerSoundEnabled = 155;
const KFID_MatchmakingRegion = 156;
const KFID_UseAltAimOnDuals = 157;
const KFID_HideBossHealthBar = 158;
const KFID_AntiMotionSickness = 159;
const KFID_ShowWelderInInventory = 160;
const KFID_AutoTurnOff = 161;
const KFID_ReduceHightPitchSounds = 162;
const KFID_ShowConsoleCrossHair = 163;
const KFID_VOIPVolumeMultiplier = 164;
const KFID_WeaponSkinAssociations = 165;
const KFID_SavedEmoteId = 166;
const KFID_DisableAutoUpgrade = 167;
const KFID_SafeFrameScale = 168;
const KFID_Native4kResolution = 169;
const KFID_HideRemoteHeadshotEffects = 170;
const KFID_SavedHeadshotID = 171;
const KFID_ToggleToRun = 172;
const KFID_ClassicPlayerInfo = 173;
const KFID_VOIPMicVolumeMultiplier = 174;
const KFID_GamepadDeadzoneScale = 175;
const KFID_GamepadAccelerationJumpScale = 176;
const KFID_HasTabbedToStore = 177;
const KFID_AllowSwapTo9mm = 178;
const KFID_SurvivalStartingWeapIdx = 179;
const KFID_SurvivalStartingGrenIdx = 180;

var const localized array<localized string> MenuStrings;
var const localized string ExitString;
var const localized string CancelString;
var const localized string ServerBrowserString;
var const localized string MatchmakingString;
var const localized string CreateGameString;
var const localized string SoloString;
var const localized string OverviewString;
var const localized array<localized string> TitleStrings;
var const localized array<localized string> DescriptionStrings;
var string LastHomeString;
var GFxObject InventoryButton;
var GFxObject StoreButton;
var GFxObject VaultButton;
var GFxObject GearButton;
var int SaveCurrentMenuIndex;
var bool bCachedGameFullyInstalled;
var bool bAllowBumper;
var bool bGearButtonEnabled;

function InitializeCurrentMenu(byte CurrentMenuIndex)
{
    UpdateMenu(CurrentMenuIndex);
}

function CalloutButtonBumperPress(int Delta)
{
    if(bAllowBumper)
    {
        SetInt("calloutButtonBumperPress", Delta);
        bAllowBumper = false;
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(0.1, false, 'UnblockBumper', self);
    }
}

function UnblockBumper()
{
    bAllowBumper = true;
}

function UpdateMenu(byte CurrentMenuIndex)
{
    local GFxObject DataProvider, TempObj;
    local byte I;

    DataProvider = Outer.CreateArray();
    GetObject("menuButtonBar").GetObject("dataProvider");
    I = 0;
    J0x74:

    if(I < MenuStrings.Length)
    {
        if(((I == (MenuStrings.Length - 1)) && Class'WorldInfo'.static.IsMenuLevel()) && Class'WorldInfo'.static.IsConsoleBuild(8))
        {
            goto J0x189;
        }
        TempObj = Outer.CreateObject("Object");
        HandleButtonSpecialCase(I, TempObj);
        DataProvider.SetElementObject(I, TempObj);
        ++ I;
        goto J0x74;
    }
    J0x189:

    SaveCurrentMenuIndex = CurrentMenuIndex;
    if((((InventoryButton != none) && StoreButton != none) && !Class'WorldInfo'.static.IsE3Build()) && Class'WorldInfo'.static.IsConsoleBuild())
    {
        CheckGameFullyInstalled();
    }
    DataProvider.SetInt("selectedIndex", CurrentMenuIndex);
    SetObject("dataObject", DataProvider);
}

function HandleButtonSpecialCase(byte ButtonIndex, out GFxObject GfxButton)
{
    local KFProfileSettings ProfileSettings;
    local bool bHasTabbedToStore;

    GfxButton.SetInt("index", ButtonIndex);
    if(((ButtonIndex == 7) && Class'WorldInfo'.static.IsMenuLevel()) && Class'WorldInfo'.static.IsConsoleBuild(9))
    {
        GfxButton.SetString("label", ConsoleLocalize("LogoutTitle"));        
    }
    else
    {
        GfxButton.SetString("label", MenuStrings[ButtonIndex]);
    }
    switch(ButtonIndex)
    {
        case 3:
            GfxButton.SetBool("enabled", CanUseDoshVault());
            VaultButton = GfxButton;
            return;
        case 2:
            bGearButtonEnabled = CanUseGearButton(Outer.GetPC(), Manager);
            GfxButton.SetBool("enabled", bGearButtonEnabled);
            GearButton = GfxButton;
            return;
        case 0:
            GfxButton.SetString("label", GetHomeButtonName());
            GfxButton.SetBool("bPulsing", ShouldStartMenuPulse());
            break;
        case 4:
            GfxButton.SetBool("enabled", CanUseInventory());
            InventoryButton = GfxButton;
            return;
        case 5:
            if(Class'WorldInfo'.static.IsConsoleBuild(9))
            {
                GfxButton.SetString("label", ConsoleLocalize("StoreStringXB1", "KFGFxMenu_Store"));
            }
            GfxButton.SetBool("enabled", CanUseStore());
            ProfileSettings = Manager.CachedProfile;
            bHasTabbedToStore = ((ProfileSettings != none) ? ProfileSettings.GetProfileInt(177) != 0 : false);
            if(((((CanUseStore()) && Class'KFGameEngine'.static.IsSalesEventActive()) && Class'KFGameEngine'.static.IsSalesEventChecked()) && ProfileSettings != none) && !bHasTabbedToStore)
            {
                GfxButton.SetBool("bPulsing", true);
            }
            StoreButton = GfxButton;
            return;
        default:
            break;
    }
    GfxButton.SetBool("enabled", true);
}

function UpdateInventoryButtonState()
{
    if(InventoryButton != none)
    {
        InventoryButton.SetBool("enabled", CanUseInventory());
    }
}

function UpdateGearButtonState()
{
    local bool bCanChangeGear;

    bCanChangeGear = CanUseGearButton(Outer.GetPC(), Manager);
    if(bCanChangeGear != bGearButtonEnabled)
    {
        SetGearMenuEnabled(bCanChangeGear);
        bGearButtonEnabled = bCanChangeGear;
    }
}

function SetGearMenuEnabled(bool bEnabled)
{
    ActionScriptVoid("setGearButtonEnabled");
}

function CheckGameFullyInstalled()
{
    if(!bCachedGameFullyInstalled)
    {
        if(Class'GameEngine'.static.IsGameFullyInstalled())
        {
            bCachedGameFullyInstalled = true;
            InventoryButton.SetBool("enabled", CanUseInventory());
            StoreButton.SetBool("enabled", CanUseStore());
            VaultButton.SetBool("enabled", CanUseDoshVault());
            GearButton.SetBool("enabled", CanUseGearButton(Outer.GetPC(), Manager));
            UpdateMenu(byte(SaveCurrentMenuIndex));            
        }
        else
        {
            InventoryButton.SetBool("enabled", false);
            StoreButton.SetBool("enabled", false);
            VaultButton.SetBool("enabled", false);
            GearButton.SetBool("enabled", false);
            Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(1, false, 'CheckGameFullyInstalled', self);
        }
    }
}

function OpenQuitPopUp()
{
    local string TitleString, DescriptionString;

    TitleString = TitleStrings[Rand(TitleStrings.Length)];
    DescriptionString = DescriptionStrings[Rand(DescriptionStrings.Length)];
    if(Manager != none)
    {
        Manager.DelayedOpenPopup(0, 0, TitleString, DescriptionString, ExitString, Class'KFCommon_LocalizedStrings'.default.CancelString, OnQuitConfirm);
    }
}

function OnQuitConfirm()
{
    Outer.ConsoleCommand("quit");
}

function OpenLogoutPopup()
{
    if(Manager != none)
    {
        Manager.DelayedOpenPopup(0, 0, ConsoleLocalize("LogoutDialogTitle"), ConsoleLocalize("LogoutDialogMessage"), ConsoleLocalize("LogoutTitle"), Class'KFCommon_LocalizedStrings'.default.CancelString, OnLogoutConfirm);
    }
}

function OnLogoutConfirm()
{
    KFGameEngine(Class'Engine'.static.GetEngine()).PerformLogout();
}

function string GetHomeButtonName()
{
    local byte StartMenuState;

    if((Manager != none) && Manager.StartMenu != none)
    {
        if(Manager.CurrentMenuIndex == 16)
        {
            LastHomeString = ServerBrowserString;
            return LastHomeString;
        }
        StartMenuState = Manager.StartMenu.GetStartMenuState();
        if(Manager.CurrentMenuIndex == 0)
        {
            switch(StartMenuState)
            {
                case 1:
                    LastHomeString = MatchmakingString;
                    break;
                case 2:
                    LastHomeString = CreateGameString;
                    break;
                case 3:
                    LastHomeString = ServerBrowserString;
                    break;
                case 4:
                    LastHomeString = SoloString;
                    break;
                case 6:
                case 7:
                    LastHomeString = OverviewString;
                    break;
                default:
                    LastHomeString = MenuStrings[0];
                    break;
            }
        }
    }
    return LastHomeString;
}

function bool ShouldStartMenuPulse()
{
    if(((Manager != none) && Class'WorldInfo'.static.IsMenuLevel()) && OnlineLobby != none)
    {
        return (Manager.CurrentMenuIndex != 0) && OnlineLobby.IsInLobby();
    }
    return false;
}

static function bool CanUseGearButton(PlayerController PC, KFGFxMoviePlayer_Manager GfxManager)
{
    if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'GameEngine'.static.IsGameFullyInstalled())
    {
        return false;
    }
    if((!GfxManager.bAfterLobby && !PC.PlayerReplicationInfo.bOnlySpectator) || Class'WorldInfo'.static.IsMenuLevel())
    {
        return true;
    }
    return false;
}

function bool CanUseInventory()
{
    if(Class'WorldInfo'.static.IsE3Build())
    {
        return false;
    }
    if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'GameEngine'.static.IsGameFullyInstalled())
    {
        return false;
    }
    if(((Outer.GetPC().Pawn != none) && !Manager.bAfterLobby) || Class'WorldInfo'.static.IsMenuLevel())
    {
        return true;
    }
    return false;
}

function bool CanUseDoshVault()
{
    if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'GameEngine'.static.IsGameFullyInstalled())
    {
        return false;
    }
    return Class'WorldInfo'.static.IsMenuLevel();
}

function bool CanUseStore()
{
    if(Class'WorldInfo'.static.IsE3Build())
    {
        return false;
    }
    if((Class'WorldInfo'.static.IsConsoleBuild() && Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.GetLoginStatus(byte(Outer.GetLP().ControllerId)) != 2) || !Class'GameEngine'.static.GetOnlineSubsystem().IsGameOwned())
    {
        return false;
    }
    return true;
}

defaultproperties
{
    MenuStrings(0)="HOME"
    MenuStrings(1)="PERKS"
    MenuStrings(2)="GEAR"
    MenuStrings(3)="VAULT"
    MenuStrings(4)="INVENTORY"
    MenuStrings(5)="STORE"
    MenuStrings(6)="OPTIONS"
    MenuStrings(7)="EXIT"
    ExitString="EXIT"
    CancelString="CANCEL"
    ServerBrowserString="SERVER BROWSER"
    MatchmakingString="MATCHMAKING"
    CreateGameString="CREATE GAME"
    SoloString="SOLO"
    OverviewString="MATCH OVERVIEW"
    TitleStrings(0)="Abandoning the fight already?"
    TitleStrings(1)="Leaving so soon?"
    TitleStrings(2)="Tired of getting chewed on?"
    DescriptionStrings(0)="Fine, go on and run for your pathetic life. You wouldn't last five minutes on the Killing Floor."
    DescriptionStrings(1)="Each second you are away, another horde of freaks is born to feast on your friends. Are you just going to abandon them?"
    DescriptionStrings(2)="They're going to find you either way. They'll find you and they'll eat your heart, like a fleshy little snack."
    bAllowBumper=true
}