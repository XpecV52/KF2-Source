/*******************************************************************************
 * KFGFxWidget_MenuBar generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxWidget_MenuBar extends KFGFxObject_Menu within GFxMoviePlayer;

var const localized array<localized string> MenuStrings;
var const localized string ExitString;
var const localized string CancelString;
var const localized string ServerBrowserString;
var const localized string MatchmakingString;
var const localized string SoloString;
var const localized string OverviewString;
var const localized array<localized string> TitleStrings;
var const localized array<localized string> DescriptionStrings;
var string LastHomeString;

function InitializeCurrentMenu(byte CurrentMenuIndex)
{
    UpdateMenu(CurrentMenuIndex);
}

function UpdateMenu(byte CurrentMenuIndex)
{
    local GFxObject DataProvider, TempObj;
    local byte I;

    DataProvider = Outer.CreateArray();
    GetObject("menuButtonBar").GetObject("dataProvider");
    I = 0;
    J0x74:

    if(I < MenuStrings.Length)
    {
        TempObj = Outer.CreateObject("Object");
        HandleButtonSpecialCase(I, TempObj);
        DataProvider.SetElementObject(I, TempObj);
        ++ I;
        goto J0x74;
    }
    DataProvider.SetInt("selectedIndex", CurrentMenuIndex);
    SetObject("dataObject", DataProvider);
}

function HandleButtonSpecialCase(byte ButtonIndex, out GFxObject GfxButton)
{
    GfxButton.SetInt("index", ButtonIndex);
    GfxButton.SetString("label", MenuStrings[ButtonIndex]);
    GfxButton.SetBool("enabled", true);
    switch(ButtonIndex)
    {
        case 2:
            GfxButton.SetBool("enabled", CanUseGearButton());
            break;
        case 0:
            GfxButton.SetString("label", GetHomeButtonName());
            GfxButton.SetBool("bPulsing", ShouldStartMenuPulse());
            break;
        default:
            break;
    }
}

function OpenQuitPopUp()
{
    local string TitleString, DescriptionString;

    TitleString = TitleStrings[Rand(TitleStrings.Length)];
    DescriptionString = DescriptionStrings[Rand(DescriptionStrings.Length)];
    if(Manager != none)
    {
        Manager.OpenPopup(0, TitleString, DescriptionString, ExitString, Class'KFCommon_LocalizedStrings'.default.CancelString, OnQuitConfirm);
    }
}

function OnQuitConfirm()
{
    Outer.ConsoleCommand("quit");
}

function string GetHomeButtonName()
{
    local byte StartMenuState;

    if((Manager != none) && Manager.StartMenu != none)
    {
        if(Manager.CurrentMenuIndex == 14)
        {
            LastHomeString = ServerBrowserString;
            return LastHomeString;
        }
        StartMenuState = Manager.StartMenu.GetStartMenuState();
        if(Manager.CurrentMenuIndex == 0)
        {
            switch(StartMenuState)
            {
                case 0:
                    LastHomeString = MatchmakingString;
                    break;
                case 1:
                    LastHomeString = ServerBrowserString;
                    break;
                case 2:
                    LastHomeString = SoloString;
                    break;
                case 3:
                case 4:
                    LastHomeString = OverviewString;
                    break;
                default:
                    LastHomeString = MenuStrings[0];
                    break;
            }
        }
    }
    return LastHomeString;
}

function bool ShouldStartMenuPulse()
{
    if((Manager != none) && Class'WorldInfo'.static.IsMenuLevel())
    {
        return (Manager.CurrentMenuIndex != 0) && OnlineLobby.IsInLobby();
    }
    return false;
}

function bool CanUseGearButton()
{
    if(((Outer.GetPC().Pawn != none) && !Manager.bAfterLobby) || Class'WorldInfo'.static.IsMenuLevel())
    {
        return true;
    }
    return false;
}

defaultproperties
{
    MenuStrings(0)="HOME"
    MenuStrings(1)="PERKS"
    MenuStrings(2)="GEAR"
    MenuStrings(3)="OPTIONS"
    MenuStrings(4)="EXIT"
    ExitString="EXIT"
    CancelString="CANCEL"
    ServerBrowserString="SERVER BROWSER"
    MatchmakingString="MATCH MAKING"
    SoloString="SOLO"
    OverviewString="MATCH OVERVIEW"
    TitleStrings(0)="Abandoning the fight already?"
    TitleStrings(1)="Leaving so soon?"
    TitleStrings(2)="Tired of getting chewed on?"
    DescriptionStrings(0)="Fine, go on and run for your pathetic life. You wouldn't last five minutes on the Killing Floor."
    DescriptionStrings(1)="Each second you are away another horde of freaks is born to feast on your friends. Are you just going to abandon them?"
    DescriptionStrings(2)="They're going to find you either way. They'll find you and they'll eat your heart, like a fleshy little snack."
}