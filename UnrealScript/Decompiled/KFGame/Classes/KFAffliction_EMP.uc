/*******************************************************************************
 * KFAffliction_EMP generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAffliction_EMP extends KFAfflictionAdvanced;

var protected ParticleSystem EmpPanicTemplate;
var protected export editinline ParticleSystemComponent EMPPanicEffect;
var protected ParticleSystem EmpDisruptTemplate;
var protected export editinline ParticleSystemComponent EMPDisruptEffect;
var protected name EMPDisruptSocketName;
var protected AkEvent OnEMPSound;
var protected AkEvent OnEMPEndSound;

function Activate()
{
    super.Activate();
    SetEMPPanicked(true);
}

function DeActivate()
{
    super.DeActivate();
    SetEMPPanicked(false);
}

function ShutDown()
{
    super.ShutDown();
    ToggleEffects(false, false);
}

function SetEMPPanicked(bool bEnabled)
{
    if(PawnOwner.Role == ROLE_Authority)
    {
        if(PawnOwner.bEmpPanicked == bEnabled)
        {
            return;
        }
        PawnOwner.bEmpPanicked = bEnabled;
        PawnOwner.OnStackingAfflictionChanged(0);
    }
    ToggleEffects(PawnOwner.bEmpDisrupted, PawnOwner.bEmpPanicked);
}

function ToggleEffects(bool bDisrupted, optional bool bPanicked)
{
    if(PawnOwner.WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(bDisrupted)
        {
            if(EMPDisruptEffect == none)
            {
                EMPDisruptEffect = PawnOwner.WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(EmpDisruptTemplate, PawnOwner.Mesh, EMPDisruptSocketName, true);
            }            
        }
        else
        {
            if(EMPDisruptEffect != none)
            {
                PawnOwner.DetachEmitter(EMPDisruptEffect);
            }
        }
        if(bPanicked && EMPPanicEffect == none)
        {
            PawnOwner.PlaySoundBase(OnEMPSound, true, true, true);
            EMPPanicEffect = PawnOwner.WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(EmpPanicTemplate, PawnOwner.Mesh, EffectSocketName, false);            
        }
        else
        {
            if(EMPPanicEffect != none)
            {
                PawnOwner.PlaySoundBase(OnEMPEndSound, true, true);
                PawnOwner.DetachEmitter(EMPPanicEffect);
            }
        }
        SetEMPMatParam(bDisrupted, bPanicked);
    }
}

protected function SetEMPMatParam(bool bDisrupted, bool bPanicked)
{
    local MaterialInstanceConstant MIC;
    local float Value;

    if(PawnOwner.WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(bPanicked)
        {
            Value = 5;            
        }
        else
        {
            if(bDisrupted)
            {
                Value = 1;
            }
        }
        foreach PawnOwner.CharacterMICs(MIC,)
        {
            MIC.SetScalarParameterValue('Scalar_EMP', Value);            
        }        
    }
}

defaultproperties
{
    EmpPanicTemplate=ParticleSystem'FX_Gameplay_EMIT.FX_Char_Emp_clot'
    EmpDisruptTemplate=ParticleSystem'FX_Gameplay_EMIT.Chr.FX_CHR_Weapon_Disable_Emp'
    EMPDisruptSocketName=EMPDisruptSocket
    OnEMPSound=AkEvent'WW_WEP_EXP_Grenade_EMP.Play_WEP_EXP_Grenade_EMP_Shock_LP'
    OnEMPEndSound=AkEvent'WW_WEP_EXP_Grenade_EMP.Stop_WEP_EXP_Grenade_EMP_Shock_LP'
    DissipationRate=50
}