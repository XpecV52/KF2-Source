/*******************************************************************************
 * KFGFxTraderContainer_PlayerInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxTraderContainer_PlayerInfo extends KFGFxObject_Container within GFxMoviePlayer;

var const localized string PlayerHeaderString;
var const localized string SelectPerkString;

function Initialize(KFGFxObject_Menu NewParentMenu)
{
    super.Initialize(NewParentMenu);
    LocalizeText();
    UpdatePlayerInfo();
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("PlayerHeader", PlayerHeaderString);
    LocalizedObject.SetString("Cancel", Class'KFCommon_LocalizedStrings'.default.CancelString);
    LocalizedObject.SetString("SelectPerk", SelectPerkString);
    LocalizedObject.SetString("oncePerWave", Class'KFGFxPerksContainer_Selection'.default.OncePerWaveString);
    SetObject("LocalizedText", LocalizedObject);
}

function UpdatePlayerInfo()
{
    SetPerkInfo();
    SetCharacterImage();
    SetPerkList();
}

function SetPerkInfo()
{
    local KFPerk CurrentPerk;
    local KFPlayerController KFPC;
    local GFxObject PerkIconObject;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        CurrentPerk = KFPC.CurrentPerk;
        SetString("perkName", CurrentPerk.PerkName);
        SetInt("perkLevel", CurrentPerk.GetLevel());
        SetInt("xpBarValue", int(KFPC.GetPerkLevelProgressPercentage(CurrentPerk.Class)));
        PerkIconObject = Outer.CreateObject("Object");
        PerkIconObject.SetString("perkIcon", "img://" $ CurrentPerk.GetPerkIconPath());
        PerkIconObject.SetString("prestigeIcon", CurrentPerk.GetPrestigeIconPath(KFPC.GetPerkPrestigeLevelFromPerkList(CurrentPerk.Class)));
        SetObject("perkImageSource", PerkIconObject);
    }
}

function SetPerkList()
{
    local GFxObject PerkObject, DataProvider;
    local KFPlayerController KFPC;
    local byte I;
    local int PerkPercent;

    KFPC = KFPlayerController(Outer.GetPC());
    if(KFPC != none)
    {
        DataProvider = Outer.CreateArray();
        I = 0;
        J0x76:

        if(I < KFPC.PerkList.Length)
        {
            PerkObject = Outer.CreateObject("Object");
            PerkObject.SetString("name", KFPC.PerkList[I].PerkClass.default.PerkName);
            PerkObject.SetString("perkIconSource", "img://" $ KFPC.PerkList[I].PerkClass.static.GetPerkIconPath());
            PerkObject.SetInt("level", KFPC.PerkList[I].PerkLevel);
            PerkPercent = int(KFPC.GetPerkLevelProgressPercentage(KFPC.PerkList[I].PerkClass));
            PerkObject.SetInt("perkXP", PerkPercent);
            DataProvider.SetElementObject(I, PerkObject);
            ++ I;
            goto J0x76;
        }
        SetObject("perkList", DataProvider);
    }
}

function SetCharacterImage()
{
    local KFPlayerReplicationInfo KFPRI;
    local string CharacterImage;
    local byte CharacterIndex;

    KFPRI = KFPlayerReplicationInfo(Outer.GetPC().PlayerReplicationInfo);
    if(KFPRI != none)
    {
        CharacterIndex = byte(KFPRI.RepCustomizationInfo.CharacterIndex);
        CharacterImage = PathName(KFPRI.CharacterArchetypes[CharacterIndex].DefaultHeadPortrait);
        CharacterImage = "img://" $ CharacterImage;
        SetString("characterImage", CharacterImage);
    }
}

defaultproperties
{
    PlayerHeaderString="INVENTORY"
    SelectPerkString="SELECT PERK"
}