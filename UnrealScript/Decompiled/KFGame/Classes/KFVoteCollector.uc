/*******************************************************************************
 * KFVoteCollector generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFVoteCollector extends Object within KFGameReplicationInfo;

struct sVoteInfo
{
    var UniqueNetId PlayerID;
    var PlayerReplicationInfo PlayerPRI;
    var string PlayerIPAddress;

    structdefaultproperties
    {
        PlayerID=(Uid=none)
        PlayerPRI=none
        PlayerIPAddress=""
    }
};

struct MapVote
{
    var array<PlayerReplicationInfo> VoterPRIList;
    var int MapIndex;

    structdefaultproperties
    {
        VoterPRIList=none
        MapIndex=0
    }
};

struct TopVotes
{
    var string Map1Name;
    var byte Map1Votes;
    var string Map2Name;
    var byte Map2Votes;
    var string Map3Name;
    var byte Map3Votes;

    structdefaultproperties
    {
        Map1Name=""
        Map1Votes=255
        Map2Name=""
        Map2Votes=255
        Map3Name=""
        Map3Votes=255
    }
};

var byte VoteTime;
var byte YesVotes;
var byte NoVotes;
var byte ShortenedTime;
var byte KickedPlayers;
var byte LastKickVoteYesValue;
var byte LastKickVoteNoValue;
var byte LastSkipTraderYesVoteValue;
var byte LastSkipTraderNoVoteValue;
var byte CurrentVoteTime;
var byte LastPauseGameYesVoteValue;
var byte LastPauseGameNoVoteValue;
var sVoteInfo CurrentKickVote;
var bool bIsKickVoteInProgress;
var bool bIsFailedVoteTimerActive;
var bool bIsSkipTraderVoteInProgress;
var bool bAllPlayersVotedOnMap;
var bool bIsPauseGameVoteInProgress;
var const int TopResultsToShow;
var const int ActiveTimeUntilVoteEnabled;
var array<PlayerReplicationInfo> PlayersThatHaveVoted;
var sVoteInfo CurrentSkipTraderVote;
var int TimeAfterSkipTrader;
var int SkipTraderVoteLimit;
var int PauseGameVoteLimit;
var TopVotes TopVotesObject;
var array<MapVote> MapVoteList;
var array<string> MapList;
var sVoteInfo CurrentPauseGameVote;

function ServerStartVoteKick(PlayerReplicationInfo PRI_Kickee, PlayerReplicationInfo PRI_Kicker)
{
    local int I;
    local array<KFPlayerReplicationInfo> PRIs;
    local KFGameInfo KFGI;
    local KFPlayerController KFPC, KickeePC;

    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    KFPC = KFPlayerController(PRI_Kicker.Owner);
    KickeePC = KFPlayerController(PRI_Kickee.Owner);
    if(KFGI.bDisableKickVote)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 11);
        return;
    }
    if(PRI_Kicker.bOnlySpectator)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 19);
        return;
    }
    if(KFGI.NumPlayers <= 2)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 18);
        return;
    }
    if(KickedPlayers >= 2)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 17);
        return;
    }
    if(KFGI.AccessControl != none)
    {
        if(KFGI.AccessControl.IsAdmin(KickeePC))
        {
            KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 14);
            return;
        }
    }
    if(bIsFailedVoteTimerActive)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 9);
        return;
    }
    if(bIsSkipTraderVoteInProgress || bIsPauseGameVoteInProgress)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 5);
        return;
    }
    if(!bIsKickVoteInProgress)
    {
        PlayersThatHaveVoted.Length = 0;
        CurrentKickVote.PlayerID = PRI_Kickee.UniqueId;
        CurrentKickVote.PlayerPRI = PRI_Kickee;
        CurrentKickVote.PlayerIPAddress = KickeePC.GetPlayerNetworkAddress();
        bIsKickVoteInProgress = true;
        Outer.GetKFPRIArray(PRIs);
        I = 0;
        J0x3F4:

        if(I < PRIs.Length)
        {
            PRIs[I].ShowKickVote(PRI_Kickee, VoteTime, !(PRIs[I] == PRI_Kicker) || PRIs[I] == PRI_Kickee);
            ++ I;
            goto J0x3F4;
        }
        KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 6, CurrentKickVote.PlayerPRI);
        Outer.SetTimer(float(VoteTime), false, 'ConcludeVoteKick', self);
        RecieveVoteKick(PRI_Kicker, true);        
    }
    else
    {
        if(PRI_Kickee == CurrentKickVote.PlayerPRI)
        {
            RecieveVoteKick(PRI_Kicker, false);            
        }
        else
        {
            KFPlayerController(PRI_Kicker.Owner).ReceiveLocalizedMessage(Class'KFLocalMessage', 10);
        }
    }
}

reliable server function RecieveVoteKick(PlayerReplicationInfo PRI, bool bKick)
{
    local KFPlayerController KFPC;

    if(PlayersThatHaveVoted.Find(PRI == -1)
    {
        PlayersThatHaveVoted.AddItem(PRI;
        if(bKick)
        {
            ++ YesVotes;            
        }
        else
        {
            ++ NoVotes;
        }
        KFPC = KFPlayerController(PRI.Owner);
        if(KFPC != none)
        {
            if(bKick)
            {
                KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 12, CurrentKickVote.PlayerPRI);                
            }
            else
            {
                KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 13, CurrentKickVote.PlayerPRI);
            }
        }
        if(ShouldConcludeKickVote())
        {
            ConcludeVoteKick();            
        }
        else
        {
            ReplicateKickVotes();
        }
    }
}

function ReplicateKickVotes()
{
    local KFGameReplicationInfo KFGRI;

    Outer.RepKickYesVotes = YesVotes;
    Outer.RepKickNoVotes = NoVotes;
    KFGRI = Outer;
    KFGRI.bForceNetUpdate = true;
    LogInternal((("Replicate vote count" @ string(Outer.RepKickYesVotes)) @ "/") @ string(Outer.RepKickNoVotes));
    if((Outer.Role == ROLE_Authority) && Outer.WorldInfo.NetMode != NM_DedicatedServer)
    {
        UnPackKickVotes();
    }
}

function UnPackKickVotes()
{
    local KFPlayerController KFPC;

    LogInternal((("Unpack vote count" @ string(Outer.RepKickYesVotes)) @ "/") @ string(Outer.RepKickNoVotes));
    if((LastKickVoteYesValue != Outer.RepKickYesVotes) || LastKickVoteNoValue != Outer.RepKickNoVotes)
    {
        NoVotes = Outer.RepKickNoVotes;
        YesVotes = Outer.RepKickYesVotes;
        KFPC = KFPlayerController(Outer.GetALocalPlayerController());
        if((KFPC != none) && KFPC.myGfxHUD != none)
        {
            KFPC.myGfxHUD.UpdateKickVoteCount(YesVotes, NoVotes);
        }
        LastKickVoteYesValue = Outer.RepKickYesVotes;
        LastKickVoteNoValue = Outer.RepKickNoVotes;
    }
}

function bool ShouldConcludeKickVote()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local KFGameInfo KFGI;
    local int NumPRIs, KickVotesNeeded;

    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    Outer.GetKFPRIArray(PRIs);
    NumPRIs = PRIs.Length;
    if(PRIs.Find(CurrentKickVote.PlayerPRI != -1)
    {
        -- NumPRIs;
    }
    if((YesVotes + NoVotes) >= NumPRIs)
    {
        return true;        
    }
    else
    {
        if(KFGI != none)
        {
            KickVotesNeeded = FCeil(float(NumPRIs) * KFGI.KickVotePercentage);
            KickVotesNeeded = Clamp(KickVotesNeeded, 1, NumPRIs);
            if(YesVotes >= KickVotesNeeded)
            {
                return true;                
            }
            else
            {
                if(NoVotes > (NumPRIs - KickVotesNeeded))
                {
                    return true;
                }
            }
        }
    }
    return false;
}

reliable server function ConcludeVoteKick()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I, NumPRIs;
    local KFGameInfo KFGI;
    local KFPlayerController KickedPC;
    local int KickVotesNeeded;

    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    if(bIsKickVoteInProgress)
    {
        Outer.GetKFPRIArray(PRIs);
        I = 0;
        J0x88:

        if(I < PRIs.Length)
        {
            PRIs[I].HideKickVote();
            ++ I;
            goto J0x88;
        }
        NumPRIs = PRIs.Length;
        if(PRIs.Find(CurrentKickVote.PlayerPRI != -1)
        {
            -- NumPRIs;
        }
        KickVotesNeeded = FCeil(float(NumPRIs) * KFGI.KickVotePercentage);
        KickVotesNeeded = Clamp(KickVotesNeeded, 1, NumPRIs);
        if(YesVotes >= KickVotesNeeded)
        {
            if((CurrentKickVote.PlayerPRI == none) || CurrentKickVote.PlayerPRI.bPendingDelete)
            {
                I = 0;
                J0x204:

                if(I < Outer.WorldInfo.Game.InactivePRIArray.Length)
                {
                    if(Outer.WorldInfo.Game.InactivePRIArray[I].UniqueId == CurrentKickVote.PlayerID)
                    {
                        CurrentKickVote.PlayerPRI = Outer.WorldInfo.Game.InactivePRIArray[I];
                        goto J0x36A;
                    }
                    ++ I;
                    goto J0x204;
                }
            }
            J0x36A:

            if(KFGI.AccessControl != none)
            {
                KickedPC = (((CurrentKickVote.PlayerPRI != none) && CurrentKickVote.PlayerPRI.Owner != none) ? KFPlayerController(CurrentKickVote.PlayerPRI.Owner) : none);
                KFAccessControl(KFGI.AccessControl).KickSessionBanPlayer(KickedPC, CurrentKickVote.PlayerID, KFGI.AccessControl.KickedMsg);
            }
            KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 8, CurrentKickVote.PlayerPRI);
            ++ KickedPlayers;            
        }
        else
        {
            bIsFailedVoteTimerActive = true;
            Outer.SetTimer(KFGI.TimeBetweenFailedVotes, false, 'ClearFailedVoteFlag', self);
            KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 7, CurrentKickVote.PlayerPRI);
        }
        bIsKickVoteInProgress = false;
        CurrentKickVote.PlayerPRI = none;
        CurrentKickVote.PlayerID = Class'PlayerReplicationInfo'.default.UniqueId;
        YesVotes = 0;
        NoVotes = 0;
    }
}

function ClearFailedVoteFlag()
{
    bIsFailedVoteTimerActive = false;
}

function ServerStartVoteSkipTrader(PlayerReplicationInfo PRI)
{
    local int I;
    local array<KFPlayerReplicationInfo> PRIs;
    local KFGameInfo KFGI;
    local KFPlayerController KFPC;
    local KFGameReplicationInfo KFGRI;
    local byte TraderTimeRemaining;

    KFGRI = KFGameReplicationInfo(Outer.WorldInfo.GRI);
    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    KFPC = KFPlayerController(PRI.Owner);
    if(PRI.bOnlySpectator)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 24);
        return;
    }
    if(!KFGRI.bTraderIsOpen && !KFGRI.bForceShowSkipTrader)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 25);
        return;
    }
    if(bIsKickVoteInProgress || bIsPauseGameVoteInProgress)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 5);
        return;
    }
    TraderTimeRemaining = byte(KFGRI.GetTraderTimeRemaining());
    if(TraderTimeRemaining <= SkipTraderVoteLimit)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 29);
        return;
    }
    if(!bIsSkipTraderVoteInProgress)
    {
        PlayersThatHaveVoted.Length = 0;
        CurrentSkipTraderVote.PlayerID = PRI.UniqueId;
        CurrentSkipTraderVote.PlayerPRI = PRI;
        CurrentSkipTraderVote.PlayerIPAddress = KFPC.GetPlayerNetworkAddress();
        bIsSkipTraderVoteInProgress = true;
        CurrentVoteTime = byte(Min(VoteTime, TraderTimeRemaining - SkipTraderVoteLimit));
        Outer.GetKFPRIArray(PRIs,, false);
        I = 0;
        J0x36D:

        if(I < PRIs.Length)
        {
            PRIs[I].ShowSkipTraderVote(PRI, CurrentVoteTime, !PRIs[I] == PRI && PRI.GetTeamNum() != 255);
            ++ I;
            goto J0x36D;
        }
        KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 20, CurrentSkipTraderVote.PlayerPRI);
        Outer.SetTimer(float(CurrentVoteTime), false, 'ConcludeVoteSkipTrader', self);
        Outer.SetTimer(1, true, 'UpdateTimer', self);
        RecieveVoteSkipTrader(PRI, true);
        KFPlayerReplicationInfo(PRI).bAlreadyStartedASkipTraderVote = true;        
    }
    else
    {
        KFPlayerController(PRI.Owner).ReceiveLocalizedMessage(Class'KFLocalMessage', 26);
    }
}

reliable server function UpdateTimer()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I;

    CurrentVoteTime -= 1;
    Outer.GetKFPRIArray(PRIs,, false);
    I = 0;
    J0x42:

    if(I < PRIs.Length)
    {
        PRIs[I].UpdateSkipTraderTime(CurrentVoteTime);
        ++ I;
        goto J0x42;
    }
}

reliable server function RecieveVoteSkipTrader(PlayerReplicationInfo PRI, bool bSkip)
{
    local KFPlayerController KFPC;

    if(PlayersThatHaveVoted.Find(PRI == -1)
    {
        PlayersThatHaveVoted.AddItem(PRI;
        if(bSkip)
        {
            ++ YesVotes;            
        }
        else
        {
            ++ NoVotes;
        }
        KFPC = KFPlayerController(PRI.Owner);
        if(KFPC != none)
        {
            if(bSkip)
            {
                KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 27);                
            }
            else
            {
                KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 28);
            }
        }
        if(ShouldConcludeSkipTraderVote())
        {
            ConcludeVoteSkipTrader();            
        }
        else
        {
            ReplicateSkipTraderVotes();
        }
    }
}

function ReplicateSkipTraderVotes()
{
    local KFGameReplicationInfo KFGRI;

    Outer.RepSkipTraderYesVotes = YesVotes;
    Outer.RepSkipTraderNoVotes = NoVotes;
    KFGRI = Outer;
    KFGRI.bForceNetUpdate = true;
    LogInternal((("Replicate vote count" @ string(Outer.RepSkipTraderYesVotes)) @ "/") @ string(Outer.RepSkipTraderNoVotes));
    if((Outer.Role == ROLE_Authority) && Outer.WorldInfo.NetMode != NM_DedicatedServer)
    {
        UnPackSkipTraderVotes();
    }
}

function UnPackSkipTraderVotes()
{
    local KFPlayerController KFPC;

    LogInternal((("Unpack vote count" @ string(Outer.RepSkipTraderYesVotes)) @ "/") @ string(Outer.RepSkipTraderNoVotes));
    if((LastSkipTraderYesVoteValue != Outer.RepSkipTraderYesVotes) || LastSkipTraderNoVoteValue != Outer.RepSkipTraderNoVotes)
    {
        NoVotes = Outer.RepSkipTraderNoVotes;
        YesVotes = Outer.RepSkipTraderYesVotes;
        KFPC = KFPlayerController(Outer.GetALocalPlayerController());
        if((KFPC != none) && KFPC.myGfxHUD != none)
        {
            KFPC.myGfxHUD.UpdateSkipTraderVoteCount(YesVotes, NoVotes);
        }
        LastSkipTraderYesVoteValue = Outer.RepSkipTraderYesVotes;
        LastSkipTraderNoVoteValue = Outer.RepSkipTraderNoVotes;
    }
}

function bool ShouldConcludeSkipTraderVote()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int NumPRIs;

    Outer.GetKFPRIArray(PRIs,, false);
    NumPRIs = PRIs.Length;
    if(((YesVotes + NoVotes) >= NumPRIs) || NoVotes > 0)
    {
        return true;
    }
    return false;
}

reliable server function ConcludeVoteSkipTrader()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I, NumPRIs;
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    if(bIsSkipTraderVoteInProgress)
    {
        Outer.GetKFPRIArray(PRIs,, false);
        I = 0;
        J0x88:

        if(I < PRIs.Length)
        {
            PRIs[I].HideSkipTraderVote();
            ++ I;
            goto J0x88;
        }
        NumPRIs = PRIs.Length;
        Outer.SetTimer(0, true, 'UpdateTimer', self);
        if(NoVotes > 0)
        {
            bIsFailedVoteTimerActive = true;
            Outer.SetTimer(KFGI.TimeBetweenFailedVotes, false, 'ClearFailedVoteFlag', self);
            KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 23);            
        }
        else
        {
            if(YesVotes >= NumPRIs)
            {
                SkipTraderTime();
                ResetSkipTraderVote();
                KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 22);                
            }
            else
            {
                bIsFailedVoteTimerActive = true;
                Outer.SetTimer(KFGI.TimeBetweenFailedVotes, false, 'ClearFailedVoteFlag', self);
                KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', 23);
            }
        }
        bIsSkipTraderVoteInProgress = false;
        CurrentSkipTraderVote.PlayerPRI = none;
        CurrentSkipTraderVote.PlayerID = Class'PlayerReplicationInfo'.default.UniqueId;
        YesVotes = 0;
        NoVotes = 0;
    }
}

reliable server function SkipTraderTime()
{
    local KFGameReplicationInfo KFGRI;
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    KFGRI = Outer;
    if(KFGRI.RemainingTime > TimeAfterSkipTrader)
    {
        KFGRI.RemainingTime = TimeAfterSkipTrader;
        KFGRI.RemainingMinute = TimeAfterSkipTrader;
        KFGI.SkipTrader(TimeAfterSkipTrader);
    }
}

reliable server function ResetSkipTraderVote();

function ResetSkipTraderBeforeWaveStarts()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I;

    Outer.GetKFPRIArray(PRIs,, false);
    I = 0;
    J0x35:

    if(I < PRIs.Length)
    {
        PRIs[I].bAlreadyStartedASkipTraderVote = false;
        ++ I;
        goto J0x35;
    }
}

function AddMapOption(string MapOption)
{
    if(Outer.WorldInfo.NetMode != NM_Standalone)
    {
        MapList.AddItem(MapOption;
    }
}

function int GetNextMap()
{
    if(MapVoteList.Length > 0)
    {
        return MapVoteList[0].MapIndex;
    }
    return -1;
}

function SearchAndClearPreviousVote(PlayerReplicationInfo PRI)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < MapVoteList.Length)
    {
        if(MapVoteList[I].VoterPRIList.Find(PRI != -1)
        {
            MapVoteList[I].VoterPRIList.RemoveItem(PRI;
            return;
        }
        ++ I;
        goto J0x0B;
    }
}

reliable server function ReceiveVoteMap(PlayerReplicationInfo PRI, int MapIndex)
{
    local int I;
    local bool bMapFound;
    local MapVote TempMapVote;
    local array<KFPlayerReplicationInfo> PRIs;
    local KFGameInfo KFGI;

    Outer.GetKFPRIArray(PRIs);
    if(MapVoteList.Length > 0)
    {
        SearchAndClearPreviousVote(PRI);
        I = 0;
        J0x58:

        if(I < MapVoteList.Length)
        {
            if(MapVoteList[I].MapIndex == MapIndex)
            {
                bMapFound = true;
                MapVoteList[I].VoterPRIList.AddItem(PRI;
                goto J0xF4;
            }
            ++ I;
            goto J0x58;
        }
    }
    J0xF4:

    if(!bMapFound)
    {
        TempMapVote.MapIndex = MapIndex;
        TempMapVote.VoterPRIList.AddItem(PRI;
        MapVoteList.AddItem(TempMapVote;
    }    
    MapVoteList.Sort(MapVoteSort;
    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    I = 0;
    J0x1E0:

    if(I < TopResultsToShow)
    {
        if(I < MapVoteList.Length)
        {
            switch(I)
            {
                case 0:
                    TopVotesObject.Map1Votes = byte(MapVoteList[I].VoterPRIList.Length);
                    if(Outer.WorldInfo.NetMode == NM_Standalone)
                    {
                        TopVotesObject.Map1Name = MapList[MapIndex];                        
                    }
                    else
                    {
                        TopVotesObject.Map1Name = KFGI.GameMapCycles[KFGI.ActiveMapCycle].Maps[MapVoteList[I].MapIndex];
                    }
                    if(CheckMajorityPlayersVotedOnMap(PRIs, MapVoteList[I].VoterPRIList.Length))
                    {
                        ShortenVoteTime(KFGI);
                    }
                    break;
                case 1:
                    TopVotesObject.Map2Votes = byte(MapVoteList[I].VoterPRIList.Length);
                    if(Outer.WorldInfo.NetMode == NM_Standalone)
                    {
                        TopVotesObject.Map2Name = MapList[MapIndex];                        
                    }
                    else
                    {
                        TopVotesObject.Map2Name = KFGI.GameMapCycles[KFGI.ActiveMapCycle].Maps[MapVoteList[I].MapIndex];
                    }
                    break;
                case 2:
                    TopVotesObject.Map3Votes = byte(MapVoteList[I].VoterPRIList.Length);
                    if(Outer.WorldInfo.NetMode == NM_Standalone)
                    {
                        TopVotesObject.Map3Name = MapList[MapIndex];                        
                    }
                    else
                    {
                        TopVotesObject.Map3Name = KFGI.GameMapCycles[KFGI.ActiveMapCycle].Maps[MapVoteList[I].MapIndex];
                    }
                    break;
                default:
                    break;
            }
        }
        else
        {
            ++ I;
            goto J0x1E0;
        }/* !MISMATCHING REMOVE, tried Loop got Type:Else Position:0x66C! */
        I = 0;
        J0x685:

        if(I < PRIs.Length)
        {
            PRIs[I].RecieveTopMaps(TopVotesObject);
            ++ I;
            goto J0x685;
        }
        if(CheckAllPlayerVoted(PRIs))
        {
            ShortenVoteTime(KFGI);
        }
    }/* !MISMATCHING REMOVE, tried Else got Type:Loop Position:0x1E0! */
}

function ShortenVoteTime(KFGameInfo KFGI)
{
    if(!bAllPlayersVotedOnMap && KFGI != none)
    {
        bAllPlayersVotedOnMap = true;
        KFGI.UpdateCurrentMapVoteTime(ShortenedTime, true);
    }
}

function bool CheckMajorityPlayersVotedOnMap(out array<KFPlayerReplicationInfo> PRIs, int NumOfVotesOnMap)
{
    local float VotePercentage;

    VotePercentage = float(NumOfVotesOnMap) / float(PRIs.Length);
    return VotePercentage > 0.5;
}

function bool CheckAllPlayerVoted(out array<KFPlayerReplicationInfo> PRIs)
{
    local int I, J, PlayerVoteCount;

    I = 0;
    J0x0B:

    if(I < PRIs.Length)
    {
        J = 0;
        J0x2E:

        if(J < MapVoteList.Length)
        {
            if(MapVoteList[J].VoterPRIList.Find(PRIs[I] != -1)
            {
                ++ PlayerVoteCount;
            }
            ++ J;
            goto J0x2E;
        }
        ++ I;
        goto J0x0B;
    }
    return PlayerVoteCount >= PRIs.Length;
}

function int MapVoteSort(MapVote A, MapVote B)
{
    local int Result;

    if(A.VoterPRIList.Length == B.VoterPRIList.Length)
    {
        Result = 0;        
    }
    else
    {
        Result = ((A.VoterPRIList.Length > B.VoterPRIList.Length) ? 1 : -1);
    }
    return Result;
}

function ServerStartVotePauseGame(PlayerReplicationInfo PRI)
{
    local int I;
    local array<KFPlayerReplicationInfo> PRIs;
    local KFGameInfo KFGI;
    local KFPlayerController KFPC;
    local KFGameReplicationInfo KFGRI;
    local byte WaveTimeRemaining;

    KFGRI = KFGameReplicationInfo(Outer.WorldInfo.GRI);
    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    KFPC = KFPlayerController(PRI.Owner);
    if(PRI.bOnlySpectator)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 47 : 36));
        return;
    }
    if(KFGRI.bWaveIsActive)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 51 : 40));
        return;
    }
    if(!KFGRI.bEndlessMode)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 41);
        return;
    }
    if(bIsKickVoteInProgress || bIsSkipTraderVoteInProgress)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', 5);
        return;
    }
    WaveTimeRemaining = byte(KFGRI.GetTraderTimeRemaining());
    if(WaveTimeRemaining <= PauseGameVoteLimit)
    {
        KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 46 : 35));
        return;
    }
    if(!bIsPauseGameVoteInProgress)
    {
        PlayersThatHaveVoted.Length = 0;
        CurrentPauseGameVote.PlayerID = PRI.UniqueId;
        CurrentPauseGameVote.PlayerPRI = PRI;
        CurrentPauseGameVote.PlayerIPAddress = KFPC.GetPlayerNetworkAddress();
        bIsPauseGameVoteInProgress = true;
        CurrentVoteTime = byte(Min(VoteTime, WaveTimeRemaining - PauseGameVoteLimit));
        Outer.GetKFPRIArray(PRIs);
        I = 0;
        J0x40A:

        if(I < PRIs.Length)
        {
            PRIs[I].ShowPauseGameVote(PRI, CurrentVoteTime, !PRIs[I] == PRI);
            ++ I;
            goto J0x40A;
        }
        KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 42 : 31), CurrentPauseGameVote.PlayerPRI);
        Outer.SetTimer(float(CurrentVoteTime), false, 'ConcludeVotePauseGame', self);
        Outer.SetTimer(1, true, 'UpdatePauseGameTimer', self);
        ReceiveVotePauseGame(PRI, true);
        KFPlayerReplicationInfo(PRI).bAlreadyStartedAPauseGameVote = true;        
    }
    else
    {
        KFPlayerController(PRI.Owner).ReceiveLocalizedMessage(Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 43 : 32));
    }
}

reliable server function UpdatePauseGameTimer()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I;

    CurrentVoteTime -= 1;
    Outer.GetKFPRIArray(PRIs);
    I = 0;
    J0x42:

    if(I < PRIs.Length)
    {
        PRIs[I].UpdatePauseGameTime(CurrentVoteTime);
        ++ I;
        goto J0x42;
    }
}

reliable server function ReceiveVotePauseGame(PlayerReplicationInfo PRI, bool bSkip)
{
    local KFPlayerController KFPC;
    local KFGameReplicationInfo KFGRI;

    if(PlayersThatHaveVoted.Find(PRI == -1)
    {
        PlayersThatHaveVoted.AddItem(PRI;
        if(bSkip)
        {
            ++ YesVotes;            
        }
        else
        {
            ++ NoVotes;
        }
        KFPC = KFPlayerController(PRI.Owner);
        if(KFPC != none)
        {
            KFGRI = KFGameReplicationInfo(Outer.WorldInfo.GRI);
            if(bSkip)
            {
                KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 44 : 33));                
            }
            else
            {
                KFPC.ReceiveLocalizedMessage(Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 45 : 34));
            }
        }
        if(ShouldConcludePauseGameVote())
        {
            ConcludeVotePauseGame();            
        }
        else
        {
            ReplicatePauseGameVotes();
        }
    }
}

function ReplicatePauseGameVotes()
{
    local KFGameReplicationInfo KFGRI;

    Outer.RepPauseGameYesVotes = YesVotes;
    Outer.RepPauseGameNoVotes = NoVotes;
    KFGRI = Outer;
    KFGRI.bForceNetUpdate = true;
    if((Outer.Role == ROLE_Authority) && Outer.WorldInfo.NetMode != NM_DedicatedServer)
    {
        UnPackPauseGameVotes();
    }
}

function UnPackPauseGameVotes()
{
    local KFPlayerController KFPC;

    if((LastPauseGameYesVoteValue != Outer.RepPauseGameYesVotes) || LastPauseGameNoVoteValue != Outer.RepPauseGameNoVotes)
    {
        NoVotes = Outer.RepPauseGameNoVotes;
        YesVotes = Outer.RepPauseGameYesVotes;
        KFPC = KFPlayerController(Outer.GetALocalPlayerController());
        if((KFPC != none) && KFPC.myGfxHUD != none)
        {
            KFPC.myGfxHUD.UpdatePauseGameVoteCount(YesVotes, NoVotes);
        }
        LastPauseGameYesVoteValue = Outer.RepPauseGameYesVotes;
        LastPauseGameNoVoteValue = Outer.RepPauseGameNoVotes;
    }
}

function bool ShouldConcludePauseGameVote()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int NumPRIs;

    Outer.GetKFPRIArray(PRIs);
    NumPRIs = PRIs.Length;
    if(((YesVotes + NoVotes) >= NumPRIs) || NoVotes > 0)
    {
        return true;
    }
    return false;
}

reliable server function ConcludeVotePauseGame()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I, NumPRIs;
    local KFGameInfo KFGI;
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(Outer.WorldInfo.GRI);
    KFGI = KFGameInfo(Outer.WorldInfo.Game);
    if(bIsPauseGameVoteInProgress)
    {
        Outer.GetKFPRIArray(PRIs);
        I = 0;
        J0xCE:

        if(I < PRIs.Length)
        {
            PRIs[I].HidePauseGameVote();
            ++ I;
            goto J0xCE;
        }
        NumPRIs = PRIs.Length;
        Outer.SetTimer(0, true, 'UpdatePauseGameTimer', self);
        if(NoVotes > 0)
        {
            bIsFailedVoteTimerActive = true;
            Outer.SetTimer(KFGI.TimeBetweenFailedVotes, false, 'ClearFailedVoteFlag', self);
            KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 50 : 39));            
        }
        else
        {
            if(YesVotes >= NumPRIs)
            {
                if(KFGRI.bIsEndlessPaused)
                {
                    KFGRI.bIsEndlessPaused = false;
                    KFGRI.bStopCountDown = false;
                    KFGI.ResumeEndlessGame();                    
                }
                else
                {
                    KFGRI.bIsEndlessPaused = true;
                    KFGRI.bStopCountDown = true;
                    KFGI.PauseEndlessGame();
                }
                ResetPauseGameVote();
                KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 38 : 49));                
            }
            else
            {
                bIsFailedVoteTimerActive = true;
                Outer.SetTimer(KFGI.TimeBetweenFailedVotes, false, 'ClearFailedVoteFlag', self);
                KFGI.BroadcastLocalized(KFGI, Class'KFLocalMessage', ((KFGRI.bIsEndlessPaused) ? 50 : 39));
            }
        }
        bIsPauseGameVoteInProgress = false;
        CurrentPauseGameVote.PlayerPRI = none;
        CurrentPauseGameVote.PlayerID = Class'PlayerReplicationInfo'.default.UniqueId;
        YesVotes = 0;
        NoVotes = 0;
    }
}

reliable server function ResetPauseGameVote()
{
    local array<KFPlayerReplicationInfo> PRIs;
    local int I;

    Outer.GetKFPRIArray(PRIs);
    I = 0;
    J0x35:

    if(I < PRIs.Length)
    {
        PRIs[I].bAlreadyStartedASkipTraderVote = false;
        ++ I;
        goto J0x35;
    }
}

defaultproperties
{
    VoteTime=30
    ShortenedTime=10
    TopResultsToShow=3
    ActiveTimeUntilVoteEnabled=30
    TimeAfterSkipTrader=5
    SkipTraderVoteLimit=5
    PauseGameVoteLimit=1
    TopVotesObject=(Map1Name="",Map1Votes=255,Map2Name="",Map2Votes=255,Map3Name="",Map3Votes=255)
}