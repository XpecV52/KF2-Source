/*******************************************************************************
 * KFSM_GrappleStart generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_GrappleStart extends KFSM_PlaySingleAnim;

var float MaxGrabDistance;
var float MaxVictimZOffset;
var bool bCanBeBlocked;

protected function bool InternalCanDoSpecialMove()
{
    if(PawnOwner.IsHumanControlled() && PawnOwner.Physics == 2)
    {
        return false;
    }
    return super(KFSpecialMove).InternalCanDoSpecialMove();
}

function bool CanOverrideMoveWith(name NewMove)
{
    if(!bUseRootMotion && (NewMove == 'KFSM_Stunned') || NewMove == 'KFSM_Stumble')
    {
        return true;
    }
    return false;
}

function PlayAnimation()
{
    local float GrabCheckTime;

    if(PawnOwner.Role == ROLE_Authority)
    {
        GrabCheckTime = KFSkeletalMeshComponent(PawnOwner.Mesh).GetAnimInterruptTime(AnimName);
        if(GrabCheckTime <= float(0))
        {
            WarnInternal((((("Failed to play" @ string(AnimName)) @ "on special move") @ string(self)) @ "on Pawn") @ string(PawnOwner));
            PawnOwner.SetTimer(0.25, false, 'AbortSpecialMove', self);
            return;
        }
        PawnOwner.SetTimer(GrabCheckTime, false, 'CheckGrapple', self);
    }
    super.PlayAnimation();
}

function CheckGrapple()
{
    local Vector ToEnemy, Extent, EndTrace, HitLocation, HitNormal;

    local Actor HitActor;
    local KFPawn Victim;
    local byte SpecialMoveFlags;

    if(bPendingStopFire)
    {
        return;
    }
    Extent.X = PawnOwner.GetCollisionRadius() * 0.5;
    Extent.Y = Extent.X;
    Extent.Z = PawnOwner.GetCollisionHeight() * 0.5;
    if(KFPOwner.IsHumanControlled())
    {
        EndTrace = KFPOwner.Location + (vector(KFPOwner.Rotation) * MaxGrabDistance);
        HitActor = KFPOwner.Trace(HitLocation, HitNormal, EndTrace, KFPOwner.Location, true, Extent);
        if(HitActor != none)
        {
            Victim = KFPawn(HitActor);
        }        
    }
    else
    {
        if(AIOwner != none)
        {
            Victim = KFPawn(AIOwner.Enemy);
        }
    }
    if(((Victim != none) && Victim.IsAliveAndWell()) && Victim.GetTeamNum() != KFPOwner.GetTeamNum())
    {
        ToEnemy = PawnOwner.Location - Victim.Location;
        if(((Victim != none) && (bCanBeBlocked && Victim.MyKFWeapon != none) && Victim.MyKFWeapon.IsGrappleBlocked(PawnOwner)) || !Victim.CanBeGrabbed(KFPOwner, true))
        {
            return;
        }
        if(Abs(PawnOwner.Location.Z - Victim.Location.Z) > MaxVictimZOffset)
        {
            return;
        }
        if(VSizeSq(ToEnemy) <= Square(MaxGrabDistance))
        {
            if(!KFPOwner.IsHumanControlled())
            {
                HitActor = PawnOwner.Trace(HitLocation, HitNormal, Victim.Location, PawnOwner.Location, true, Extent);
                if((HitActor != none) && HitActor != Victim)
                {
                    return;
                }
            }
            SpecialMoveFlags = Class'KFSM_GrappleAttack'.static.PackSMFlags();
            KFPOwner.DoSpecialMove(4, true, Victim, SpecialMoveFlags);
        }
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    PawnOwner.ClearTimer('CheckGrapple', self);
    super.SpecialMoveEnded(PrevMove, NextMove);
}

function NotifyOwnerTakeHit(class<KFDamageType> DamageType, Vector HitLoc, Vector HitDir, Controller InstigatedBy)
{
    if(bCanBeInterrupted && IsAnInterruptHit(PawnOwner, DamageType))
    {
        if(KFPOwner.CanDoSpecialMove(5))
        {
            KFPOwner.DoSpecialMove(5,,, Class'KFSM_Stumble'.static.PackBodyHitSMFlags(KFPOwner, HitDir));
        }
    }
}

function SpecialMoveButtonRetriggered()
{
    KFPOwner.DoSpecialMove(KFPOwner.SpecialMove, true,, 253);
    if((KFPOwner.Role < ROLE_Authority) && KFPOwner.IsLocallyControlled())
    {
        KFPOwner.ServerDoSpecialMove(KFPOwner.SpecialMove, true,, 253);
    }
}

function SpecialMoveButtonReleased()
{
    KFPOwner.DoSpecialMove(KFPOwner.SpecialMove, true,, 254);
    if((KFPOwner.Role < ROLE_Authority) && KFPOwner.IsLocallyControlled())
    {
        KFPOwner.ServerDoSpecialMove(KFPOwner.SpecialMove, true,, 254);
    }
}

function SpecialMoveFlagsUpdated()
{
    if(KFPOwner.SpecialMoveFlags == 253)
    {
        bPendingStopFire = false;        
    }
    else
    {
        if(KFPOwner.SpecialMoveFlags == 254)
        {
            bPendingStopFire = true;            
        }
        else
        {
            super(GameSpecialMove).SpecialMoveFlagsUpdated();
        }
    }
}

defaultproperties
{
    MaxGrabDistance=210
    MaxVictimZOffset=128
    bCanBeBlocked=true
    AnimName=Grab
    bCanBeInterrupted=true
    bLockPawnRotation=true
}