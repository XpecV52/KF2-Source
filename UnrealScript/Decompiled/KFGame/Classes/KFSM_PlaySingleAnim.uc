/*******************************************************************************
 * KFSM_PlaySingleAnim generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_PlaySingleAnim extends KFSpecialMove
    abstract
    native(SpecialMoves);

/** Animation to play */
var() name AnimName;
var() KFPawn.EAnimSlotStance AnimStance;
var float BlendInTime;
var float BlendOutTime;
var bool bUseRootMotion;
var bool bCanBeInterrupted;
var float AbortBlendOutTime;

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    PlayAnimation();
    if(bUseRootMotion && AnimStance == 0)
    {
        KFPOwner.BodyStanceNodes[0].SetRootBoneAxisOption(2, 2, 2);
        KFPOwner.Mesh.RootMotionMode = 3;
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    if(bUseRootMotion)
    {
        PawnOwner.Mesh.RootMotionMode = PawnOwner.Mesh.default.RootMotionMode;
        KFPOwner.BodyStanceNodes[0].SetRootBoneAxisOption(1, 1, 1);
    }
    if(bCanBeInterrupted && KFPOwner.BodyStanceNodes[AnimStance].bIsPlayingCustomAnim)
    {
        KFPOwner.StopBodyAnim(AnimStance, AbortBlendOutTime);
    }
    super.SpecialMoveEnded(PrevMove, NextMove);
}

function PlayAnimation()
{
    PlaySpecialMoveAnim(AnimName, AnimStance, BlendInTime, BlendOutTime, 1);
}

function AnimEndNotify(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
    KFPOwner.EndSpecialMove();
}

function NotifyOwnerTakeHit(class<KFDamageType> DamageType, Vector HitLoc, Vector HitDir, Controller InstigatedBy)
{
    if(bCanBeInterrupted && IsAnInterruptHit(PawnOwner, DamageType))
    {
        KFPOwner.EndSpecialMove();
    }
}

static function bool IsAnInterruptHit(Pawn P, class<KFDamageType> DamageType)
{
    local KFPawn_Monster KFPM;
    local byte HitZoneIdx;
    local KFPawn.EHitZoneBodyPart BodyPart;

    if(DamageType != none)
    {
        KFPM = KFPawn_Monster(P);
        if(KFPM != none)
        {
            HitZoneIdx = KFPM.HitFxInfo.HitBoneIndex;
            BodyPart = ((HitZoneIdx != 255) ? KFPM.HitZones[HitZoneIdx].Limb : 2);
            if(KFPM.AfflictionHandler.GetPredictedHitReaction(DamageType, BodyPart) > 0)
            {
                return true;
            }
        }
    }
    return false;
}

defaultproperties
{
    BlendInTime=0.33
    BlendOutTime=0.33
    AbortBlendOutTime=0.33
    bAllowMomentumPush=true
}