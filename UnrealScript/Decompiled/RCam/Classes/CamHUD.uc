/*******************************************************************************
 * CamHUD generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CamHUD extends Interaction
    transient
    config(Engine)
    hidecategories(Object,UIRoot);

var float PauseCamMouseSensitivity;
var float speccamspeed;
var float TimedPathStartTime;
var int dumpframes_fps;
var Actor ap;
var Actor HackLockedSavedActor;
var Actor target_actor;
var Actor Target;
var Actor targeta;
var Actor TA;
var bool bw;
var bool ba;
var bool bs;
var bool bd;
var bool bdown;
var bool bup;
var bool bact;
var bool balternativekey;
var bool bdemo04;
var bool bserverdemo;
var bool behindview;
var bool bdrawadvanced;
var bool bdumpframes;
var bool bFirstPersonMovieMode;
var bool bFlagsAtTarget;
var bool bFollowTarget;
var bool bfollowtarget_lock_rotation;
var bool bfovmode;
var bool bgotoloc;
var bool bhideweapon;
var bool bIncomingCam;
var bool bIsPaused;
var bool waspressed;
var bool bLockRotation;
var bool bnextframe;
var bool bpathedit;
var bool bpcam;
var bool bremovehiteffect;
var bool bshowcoords;
var bool bshowhelp;
var bool bShowHudInfo;
var bool bStartPaused;
var bool bswitched;
var bool bTargetnone;
var bool btimedpath;
var bool btpfastforward;
var bool bTypecoords;
var bool bViewingdemorec;
var bool bDrawdemorec;
var bool bViewingcam;
var bool bViewing_last_set_campoint;
var bool bweaponeffects;
var bool bwh;
var bool drawHelp;
var bool Started;
var bool tanone;
var bool targetlook;
var bool tempbool;
var bool velChanged;
var float dista;
var float followdist;
var float kabstand;
var float mabstand;
var float overlayPositions[12];
var float soundvolume;
var float specfollowdistance;
var float Speed;
var float TempFloat;
var float temptime;
var float tf;
var float TimeCount;
var float v0;
var float T0;
var float velocityDif[2];
var int bmotbur;
var int democount;
var int flagcount;
var int I;
var int Z;
var int lastmouseX;
var int lastmouseY;
var int MouseX;
var int MouseY;
var int maxcampoints;
var int seektime;
var int targetcount;
var int targetcount_anz;
var int typecount;
var int typecount2;
var int veloRelPositionsCount;
var Rotator R;
var Rotator TR;
var Rotator rotat;
var Rotator timedrot;
var Rotator typerot;
var string followtarget_mode;
var string watchedname;
var Texture worldinfotex;
var Vector distancemeter_pos;
var Vector myPawnVelocity;
var Vector TargetLoc;
var Vector tv;
var Vector typeloc;
var Vector veloRelativePositions[5];
var CamControl Other2;
var CamControl CC;
var KFDemoRecSpectator drs;
var Knoten kv;
var Knoten other3;
var Pawn Pawn;
var PlayerController Cntrl;
var PlayerReplicationInfo PRI;
var PlayerReplicationInfo tpri;
var Projectile targeted_proj;
var Projectile tproj;
var RCamDecalManager RCamDecalManager;
var KFHUDBase H;
var KFPawn tp;
var KFPlayerController PC;

exec function seekTo(int Mins, int secs, float fastforwardspeed, optional int fragCount)
{
    seektime = (Mins * 60) + secs;
    PC.WorldInfo.DemoPlayTimeDilation = fastforwardspeed;
}

exec function toggleMovieMode();

function LoadRCamConfig()
{
    LogInternal("***LOADING RYPELCAM CONFIG");
    if(CC != none)
    {
        CC.Destroy();
    }
    foreach PC.DynamicActors(Class'Knoten', other3)
    {
        other3.Destroy();        
    }    
    CC = PC.Spawn(Class'CamControl');
    flagcount = CC.Z;
    kabstand = CC.kabstand;
    mabstand = CC.mabstand;
    CC.calculate_path_length();
}

function startCam()
{
    local Knoten ksc;
    local RotKnoten rksc;

    if((CC != none) && CC.bSpline_update_required)
    {
        CC.updateSplinef(true, true);
        CC.SetTimer(0.004, false);
        CC.calculate_path_length();
    }
    targeta = none;
    tanone = true;
    drs.SetViewTarget(CC);
    behindview = false;
    if(CC.drawcount == 0)
    {
        foreach PC.DynamicActors(Class'Knoten', ksc)
        {
            ksc.SetHidden(false);            
        }        
        foreach PC.DynamicActors(Class'RotKnoten', rksc)
        {
            rksc.SetHidden(true);            
        }        
    }
    v0 = 0;
    T0 = PC.WorldInfo.TimeSeconds;
    CC.startCam = true;
    bViewingcam = true;
    bViewingdemorec = false;
    TimeCount = PC.WorldInfo.TimeSeconds;
}

static function string FormatTime_likeUT(int Seconds)
{
    local int Hours, Mins;
    local string NewTimeString;

    Seconds = int(Abs(float(Seconds)));
    Hours = Seconds / 3600;
    Seconds -= (Hours * 3600);
    Mins = Seconds / 60;
    Seconds -= (Mins * 60);
    NewTimeString = "";
    if(Hours > 0)
    {
        NewTimeString = (NewTimeString $ ((Hours > 9) ? string(Hours) : "0" $ string(Hours))) $ ":";
    }
    NewTimeString = (NewTimeString $ ((Mins > 9) ? string(Mins) : "0" $ string(Mins))) $ ":";
    NewTimeString = NewTimeString $ ((Seconds > 9) ? string(Seconds) : "0" $ string(Seconds));
    return NewTimeString;
}

exec function Update()
{
    if(CC != none)
    {
        if(CC.do_not_update_Spline)
        {
            CC.do_not_update_Spline = false;
            if(CC.bSpline_update_required)
            {
                CC.updateSplinef(true, true);
                CC.SetTimer(0.004, false);
            }
            CC.calculate_path_length();            
        }
        else
        {
            if(!CC.do_not_update_Spline)
            {
                CC.do_not_update_Spline = true;
            }
        }
    }
}

exec function dumpfps(int fps)
{
    dumpframes_fps = fps;
    PC.ClientMessage("dumpframes fps =" @ string(fps));
}

exec function Mouse(int MouseSensitivity)
{
    PauseCamMouseSensitivity = float(MouseSensitivity);
}

exec function tpstart(optional float fastforwardspeed, optional int secsstartlater)
{
    if(flagcount < 1)
    {
        LoadRCamConfig();
        drs.SetViewTarget(CC.viewer01);
    }
    if(btimedpath == false)
    {
        btimedpath = !btimedpath;
        if(CC != none)
        {
            CC.btimedpath = btimedpath;
        }
    }
    if((CC != none) && CC.bSpline_update_required)
    {
        CC.updateSplinef(true, true);
        CC.SetTimer(0.004, false);
        CC.calculate_path_length();
    }
}

function followtarget(int followmode)
{
    I = 0;
    watchedname = "not available";
    bfollowtarget_lock_rotation = false;
    if(followmode == 3)
    {
        foreach PC.DynamicActors(Class'Pawn', Pawn)
        {
            if(Pawn.PlayerReplicationInfo == none)
            {
                continue;                
            }
            if(targetcount == I)
            {
                specfollowdistance = 100;
                drs.SetViewTarget(none);
                Target = Pawn;
                drs.SetLocation(Pawn.Location - (vector(Pawn.Rotation - rot(2048, 0, 0)) * float(100)));
                drs.SetRotation(rotator(Pawn.Location - drs.Location));
                watchedname = Pawn.PlayerReplicationInfo.PlayerName;
                followtarget_mode = "loc_rot";
            }
            ++ I;            
        }        
    }
    if(I != 0)
    {
        ++ targetcount;
        targetcount_anz = I;
        targetcount = targetcount % targetcount_anz;
        drs.bCollideWorld = false;
        bViewingcam = true;
        targeta = none;
        tanone = true;
        bViewingdemorec = false;
        bTargetnone = false;
        bFollowTarget = true;
        waspressed = true;
    }
}

function TimeDilation(float Percentage)
{
    if(PC.WorldInfo.DemoPlayTimeDilation >= float(1))
    {
        PC.WorldInfo.DemoPlayTimeDilation += (PC.WorldInfo.DemoPlayTimeDilation * Percentage);        
    }
    else
    {
        if((PC.WorldInfo.DemoPlayTimeDilation + (PC.WorldInfo.DemoPlayTimeDilation * Percentage)) > float(0))
        {
            PC.WorldInfo.DemoPlayTimeDilation += (PC.WorldInfo.DemoPlayTimeDilation * Percentage);
        }
    }
}

function viewpreviousplayer(int N)
{
    local int ii, CurrentIndex, IndexLength;

    if(PC.RealViewTarget != none)
    {
        ii = 0;
        foreach PC.DynamicActors(Class'Pawn', Pawn)
        {
            if(Pawn.PlayerReplicationInfo != none)
            {
                ++ ii;
                if(PC.RealViewTarget == Pawn.PlayerReplicationInfo)
                {
                    CurrentIndex = ii;
                }
            }            
        }        
        IndexLength = ii;
        if((N == 2) && CurrentIndex == IndexLength)
        {
            CurrentIndex = 0;
        }
        ii = 0;
        foreach PC.DynamicActors(Class'Pawn', Pawn)
        {
            if(Pawn.PlayerReplicationInfo != none)
            {
                ++ ii;
                if(IndexLength < (CurrentIndex + N))
                {
                    PC.SetViewTarget(Pawn);
                    break;
                    continue;
                }
                if(ii == (CurrentIndex + N))
                {
                    PC.SetViewTarget(Pawn);
                    break;
                }
            }            
        }                
    }
    else
    {
        drs.DemoViewNextPlayer();
    }
}

function bool InputAxis(int ControllerId, name Key, float Delta, float DeltaTime, optional bool bGamepad)
{
    local Rotator tr1;

    bGamepad = false;
    switch(Key)
    {
        case 'MouseX':
            tr1 = drs.Rotation;
            tr1.Yaw = int(float(tr1.Yaw) + (Delta * PauseCamMouseSensitivity));
            drs.SetRotation(tr1);
            break;
        case 'MouseY':
            tr1 = drs.Rotation;
            tr1.Pitch = int(float(tr1.Pitch) + (Delta * PauseCamMouseSensitivity));
            drs.SetRotation(tr1);
            break;
        default:
            break;
    }
    return false;
}

function bool InputKey(int ControllerId, name Key, Core.Object.EInputEvent Event, optional float AmountDepressed, optional bool bGamepad)
{
    local Vector V;
    local RotKnoten rk2;
    local Vector tvect;
    local bool ballowedflag;

    AmountDepressed = 1;
    bGamepad = false;
    if(LocalPlayer(PC.Player).ViewportClient.ViewportConsole.IsInState('Typing'))
    {
        return false;
    }
    bact = true;
    if(Event == 0)
    {
        if(CC == none)
        {
            foreach PC.DynamicActors(Class'CamControl', Other2)
            {
                CC = Other2;
                Speed = CC.basic_speed2;
                Other2.FOV = PC.DefaultFOV;
                CC.btimedpath = btimedpath;
                break;                
            }            
        }
        switch(Key)
        {
            case 'X':
                balternativekey = true;
                break;
            case 'T':
                if(!btimedpath)
                {                    
                    PC.ConsoleCommand("tpstart");                    
                }
                else
                {
                    btimedpath = !btimedpath;
                    if(CC != none)
                    {
                        CC.btimedpath = btimedpath;
                    }
                }
                break;
            case 'R':
                bShowHudInfo = !bShowHudInfo;
                break;
            case 'MouseScrollDown':
                if(balternativekey)
                {
                    drs.DemoViewNextPlayer();                    
                }
                else
                {
                    TimeDilation(-0.05);
                }
                break;
            case 'MouseScrollUp':
                if(balternativekey)
                {
                    viewpreviousplayer(1);                    
                }
                else
                {
                    TimeDilation(0.05);
                }
                break;
            case 'PageDown':
                drs.DemoViewNextPlayer();
                break;
            case 'PageUp':
                viewpreviousplayer(1);
                break;
            case 'Up':
                PC.WorldInfo.DemoPlayTimeDilation = 1;
                break;
            case 'Left':
                TimeDilation(-0.2);
                break;
            case 'Right':
                TimeDilation(0.2);
                break;
            case 'Down':
                bIsPaused = !bIsPaused;
                if(PC.PlayerReplicationInfo == none)
                {
                    foreach PC.DynamicActors(Class'PlayerReplicationInfo', tpri)
                    {
                        PC.PlayerReplicationInfo = tpri;
                        break;                        
                    }                    
                }
                if(bIsPaused)
                {
                    PC.WorldInfo.Pauser = PC.PlayerReplicationInfo;                    
                }
                else
                {
                    PC.WorldInfo.Pauser = none;
                }
                break;
            case 'F2':
                bdumpframes = !bdumpframes;
                break;
            case 'F4':
                break;
            case 'F5':
                LoadRCamConfig();
                break;
            case 'W':
                bw = true;
                break;
            case 'S':
                bs = true;
                break;
            case 'A':
                ba = true;
                break;
            case 'D':
                bd = true;
                break;
            case 'LeftShift':
                bdown = true;
                break;
            case 'LeftAlt':
                bup = true;
                break;
            case 'SpaceBar':
                if(bIsPaused && PC.WorldInfo.Pauser != none)
                {
                    bIsPaused = !bIsPaused;
                }
                break;
            case 'Add':
                if((CC != none) && flagcount > 2)
                {
                    if((btimedpath && Started) && drs.ViewTarget == CC)
                    {
                        CC.StartTimedPath_Later_seconds = 0;
                        CC.dif_tpstart_add = true;
                        goto J0x3689;
                    }
                    CC.FOV = drs.DefaultFOV;
                    drs.SetFOV(drs.DefaultFOV);
                    drs.SetViewTarget(CC.viewer01);
                    CC.ssw = false;
                    targeta = none;
                    tanone = true;
                    CC.updateViewer(false);
                    behindview = false;
                    bViewingcam = true;
                    bViewingdemorec = false;
                }
                break;
            case 'Subtract':
                if((CC != none) && flagcount > 2)
                {
                    if((btimedpath && Started) && drs.ViewTarget == CC)
                    {
                        CC.StartTimedPath_Later_seconds = 0;
                        CC.dif_tpstart_subtract = true;
                        goto J0x3689;
                    }
                    CC.FOV = drs.DefaultFOV;
                    drs.SetFOV(drs.DefaultFOV);
                    drs.SetViewTarget(CC.viewer01);
                    CC.ssw = false;
                    targeta = none;
                    tanone = true;
                    CC.updateViewer(true);
                    behindview = false;
                    bViewingcam = true;
                    bViewingdemorec = false;
                }
                break;
            case 'O':
                bfovmode = !bfovmode;
                break;
            case 'Z':
                if(CC != none)
                {
                    Z = 0;
                    CC.set_Flag_Locations(drs.ViewTarget.Location, CC.Viewing);
                    CC.set_Flag_Rotations(drs.ViewTarget.Rotation, CC.Viewing);
                    foreach PC.DynamicActors(Class'Knoten', kv)
                    {
                        CC.get_Flag_Locations(Z, V);
                        if(kv.Location != V)
                        {
                            CC.get_Flag_Rotations(Z, rotat);
                            kv.SetLocation(V);
                            kv.SetRotation(rotat);
                            if(CC.Viewing == Z)
                            {
                                CC.viewer01.SetLocation(V);
                                CC.viewer01.SetRotation(rotat);
                            }
                        }
                        ++ Z;                        
                    }                    
                    CC.updateSplinef(true);
                    kabstand = CC.kabstand;
                    mabstand = CC.mabstand;
                    CC.calculate_path_length();
                }
                break;
            case 'Q':
                drs.bCollideWorld = !drs.bCollideWorld;
                break;
            case 'H':
                PC.myHUD.bShowHUD = !PC.myHUD.bShowHUD;
                break;
            case 'F':
                bIsPaused = !bIsPaused;
                if(PC.PlayerReplicationInfo == none)
                {
                    foreach PC.DynamicActors(Class'PlayerReplicationInfo', tpri)
                    {
                        PC.PlayerReplicationInfo = tpri;
                        break;                        
                    }                    
                }
                if(bIsPaused)
                {
                    PC.WorldInfo.Pauser = PC.PlayerReplicationInfo;                    
                }
                else
                {
                    PC.WorldInfo.Pauser = none;
                }
                break;
            case 'one':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 0;
                    Speed = 0;                    
                }
                else
                {
                    if(drs.ViewTarget == drs)
                    {
                        speccamspeed = 0;
                    }
                }
                break;
            case 'two':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 2;
                    Speed = 2;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 2;
                    }
                }
                break;
            case 'three':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 4;
                    Speed = 4;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 4;
                    }
                }
                break;
            case 'four':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 7;
                    Speed = 7;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 7;
                    }
                }
                break;
            case 'Five':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 12;
                    Speed = 12;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 12;
                    }
                }
                break;
            case 'Six':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 18;
                    Speed = 18;                    
                }
                else
                {
                    if(drs.ViewTarget == drs)
                    {
                        speccamspeed = 18;
                    }
                }
                break;
            case 'Seven':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 26;
                    Speed = 26;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 26;
                    }
                }
                break;
            case 'Eight':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 34;
                    Speed = 34;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 34;
                    }
                }
                break;
            case 'Nine':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = 40;
                    Speed = 40;                    
                }
                else
                {
                    if(PC.ViewTarget == drs)
                    {
                        speccamspeed = 40;
                    }
                }
                break;
            case 'MiddleMouseButton':
                ballowedflag = true;
                if(flagcount >= 2)
                {
                    if(distancemeter_pos == vect(0, 0, 0))
                    {
                        CC.get_Flag_Locations(flagcount - 1, distancemeter_pos);
                    }
                    tvect = distancemeter_pos;
                    if(((VSize(drs.ViewTarget.Location - tvect) / kabstand) > float(15)) || (mabstand / VSize(drs.ViewTarget.Location - tvect)) > float(15))
                    {
                        ballowedflag = false;
                        PC.ClientMessage("RypelCam Error: desired Campointlocation too far or too near to last Campoint!");
                        PC.myHUD.bShowHUD = true;
                    }
                }
                if((drs.ViewTarget.Location - tvect) == vect(0, 0, 0))
                {
                    ballowedflag = false;
                    PC.ClientMessage("RypelCam Error: desired Campointlocation too far or too near to last Campoint!");
                    PC.myHUD.bShowHUD = true;
                }
                if(ballowedflag)
                {
                    if(flagcount >= 1)
                    {
                        tvect = distancemeter_pos;
                        if(flagcount == 1)
                        {
                            kabstand = VSize(drs.ViewTarget.Location - tvect);
                            mabstand = VSize(drs.ViewTarget.Location - tvect);
                        }
                        if(VSize(drs.ViewTarget.Location - tvect) < kabstand)
                        {
                            kabstand = VSize(drs.ViewTarget.Location - tvect);
                        }
                        if(VSize(drs.ViewTarget.Location - tvect) > mabstand)
                        {
                            mabstand = VSize(drs.ViewTarget.Location - tvect);
                        }
                    }
                    PC.Spawn(Class'Knoten',,, drs.ViewTarget.Location).FOV = drs.DefaultFOV;
                    ++ flagcount;
                    if(flagcount >= 4)
                    {
                        foreach PC.DynamicActors(Class'Knoten', other3)
                        {
                            if(other3.zeichner == true)
                            {
                                other3.updateSpline();
                            }                            
                        }                        
                    }
                    distancemeter_pos = drs.ViewTarget.Location;
                    if(flagcount == 1)
                    {
                        TimedPathStartTime = PC.WorldInfo.TimeSeconds;
                    }
                }
                if(CC != none)
                {
                    CC.calculate_path_length();
                }
                break;
            case 'NumPadFive':
                ballowedflag = true;
                if(flagcount >= 2)
                {
                    if(distancemeter_pos == vect(0, 0, 0))
                    {
                        CC.get_Flag_Locations(flagcount - 1, distancemeter_pos);
                    }
                    tvect = distancemeter_pos;
                    if(((VSize(drs.ViewTarget.Location - tvect) / kabstand) > float(15)) || (mabstand / VSize(drs.ViewTarget.Location - tvect)) > float(15))
                    {
                        ballowedflag = false;
                        PC.ClientMessage("RypelCam Error: desired Campointlocation too far or too near to last Campoint!");
                        PC.myHUD.bShowHUD = true;
                    }
                }
                if((drs.ViewTarget.Location - tvect) == vect(0, 0, 0))
                {
                    ballowedflag = false;
                    PC.ClientMessage("RypelCam Error: desired Campointlocation too far or too near to last Campoint!");
                    PC.myHUD.bShowHUD = true;
                }
                if(ballowedflag)
                {
                    if(flagcount >= 1)
                    {
                        tvect = distancemeter_pos;
                        if(flagcount == 1)
                        {
                            kabstand = VSize(drs.ViewTarget.Location - tvect);
                            mabstand = VSize(drs.ViewTarget.Location - tvect);
                        }
                        if(VSize(drs.ViewTarget.Location - tvect) < kabstand)
                        {
                            kabstand = VSize(drs.ViewTarget.Location - tvect);
                        }
                        if(VSize(drs.ViewTarget.Location - tvect) > mabstand)
                        {
                            mabstand = VSize(drs.ViewTarget.Location - tvect);
                        }
                    }
                    PC.Spawn(Class'Knoten',,, drs.ViewTarget.Location).FOV = drs.DefaultFOV;
                    ++ flagcount;
                    if(flagcount >= 4)
                    {
                        foreach PC.DynamicActors(Class'Knoten', other3)
                        {
                            if(other3.zeichner == true)
                            {
                                other3.updateSpline();
                            }                            
                        }                        
                    }
                    distancemeter_pos = drs.ViewTarget.Location;
                    if(flagcount == 1)
                    {
                        TimedPathStartTime = PC.WorldInfo.TimeSeconds;
                    }
                }
                if(CC != none)
                {
                    CC.calculate_path_length();
                }
                break;
                break;
            case 'LeftMouseButton':
                bViewingdemorec = true;
                bViewingcam = false;
                if(CC != none)
                {
                    CC.ssw = false;
                }
                if(bFollowTarget)
                {
                    bFollowTarget = false;
                }
                if(balternativekey)
                {
                    viewpreviousplayer(2);
                }
                break;
            case 'RightMouseButton':
                if(bFollowTarget)
                {
                    bFollowTarget = false;
                }
                if(CC != none)
                {
                    CC.ssw = false;
                }
                bshowcoords = true;
                if(drs.ViewTarget != drs)
                {
                    if((CC != none) && drs.ViewTarget == CC.viewer01)
                    {
                        CC.viewer01.changeView(CC.Viewing, CC.Z, false, false);
                        drs.SetRotation(CC.viewer01.Rotation);
                        drs.SetLocation(CC.viewer01.Location);                        
                    }
                    else
                    {
                        if((CC != none) && drs.ViewTarget == CC)
                        {
                            drs.SetRotation(CC.Rotation);
                            drs.SetLocation(CC.Location);                            
                        }
                        else
                        {
                            if(bserverdemo && drs.ViewTarget != none)
                            {
                                drs.bCollideWorld = false;
                                drs.SetLocation(drs.ViewTarget.Location - (vector(drs.Rotation) * float(200)));
                            }
                        }
                    }
                }
                bViewingcam = true;
                targeta = none;
                tanone = true;
                bViewingdemorec = false;
                behindview = false;
                drs.SetFOV(drs.DefaultFOV);
                PC.SetFOV(PC.DefaultFOV);
                if(CC != none)
                {
                    CC.FOV = PC.DefaultFOV;
                    if(CC.drawcount != 3)
                    {
                        CC.draw_Spline = true;
                        CC.drawSplineWasFalse = true;
                        CC.drawcount = 3;
                    }
                }
                break;
            case 'NumPadThree':
                if(((CC != none) && flagcount > 2) && !CC.bisdrawing)
                {
                    CC.draw_Spline = false;
                    CC.drawSplineWasFalse = false;
                    CC.drawcount = 0;
                    startCam();
                }
                break;
            case 'NumPadNine':
                if(CC != none)
                {
                    CC.Spawn(Class'drawkey');
                }
                break;
            case 'Period':
                bshowcoords = !bshowcoords;
                break;
            case 'NumPadOne':
                if(drs.ViewTarget == CC)
                {
                    if((CC.basic_speed2 - (CC.basic_speed2 / float(5))) > float(0))
                    {
                        CC.basic_speed2 = CC.basic_speed2 - (CC.basic_speed2 / float(5));
                        Speed = CC.basic_speed2;
                    }                    
                }
                else
                {
                    if(drs.ViewTarget == PC)
                    {
                        speccamspeed = speccamspeed - (speccamspeed / float(5));
                        if(speccamspeed < float(0))
                        {
                            speccamspeed = 0;
                        }
                    }
                }
                break;
            case 'NumPadTwo':
                if(drs.ViewTarget == CC)
                {
                    CC.basic_speed2 = CC.basic_speed2 + (CC.basic_speed2 / float(5));
                    Speed = CC.basic_speed2;                    
                }
                else
                {
                    if(drs.ViewTarget == drs)
                    {
                        speccamspeed = speccamspeed + (speccamspeed / float(5));
                    }
                }
                break;
            case 'NumPadZero':
                if(balternativekey)
                {
                    Target = drs.ViewTarget;
                    target_actor = Target;
                    bTargetnone = false;                    
                }
                else
                {
                    followtarget(3);
                }
                break;
            case 'Multiply':
                targetlook = !targetlook;
                PC.ClientMessage("targetlook:" @ string(targetlook));
                if(!bTargetnone)
                {
                    if(targetlook && Target != none)
                    {
                        CC.enable2 = true;                        
                    }
                    else
                    {
                        CC.enable2 = false;
                    }                    
                }
                else
                {
                    CC.enable2 = false;
                }
                break;
            case 'Pause':
                bIsPaused = !bIsPaused;
                break;
            case 'NumPadSix':
                break;
            case 'NumPadSeven':
                if(CC != none)
                {
                    if(bfovmode)
                    {
                        if(CC.fovplus)
                        {
                            CC.fovplus = false;
                            CC.updateSplinef(true);                            
                        }
                        else
                        {
                            CC.fovplus = true;
                        }
                        CC.get_Flag_Fovs(CC.Viewing, tf);                        
                    }
                    else
                    {
                        if(CC.rollplus)
                        {
                            CC.rollplus = false;
                            CC.updateSplinef(true);                            
                        }
                        else
                        {
                            CC.rollplus = true;
                        }
                    }
                }
                break;
            case 'NumPadEight':
                if(CC != none)
                {
                    if(bfovmode)
                    {
                        if(CC.fovminus)
                        {
                            CC.fovminus = false;
                            CC.updateSplinef(true);                            
                        }
                        else
                        {
                            CC.fovminus = true;
                        }                        
                    }
                    else
                    {
                        if(CC.rollminus)
                        {
                            CC.rollminus = false;
                            CC.updateSplinef(true);                            
                        }
                        else
                        {
                            CC.rollminus = true;
                        }
                    }
                }
                break;
            case 'I':
                bhideweapon = !bhideweapon;
                if(KFPawn(PC.ViewTarget).Weapon.bHidden == false)
                {
                    KFPawn(drs.ViewTarget).Weapon.SetHidden(true);                    
                }
                else
                {
                    KFPawn(drs.ViewTarget).Weapon.SetHidden(false);
                }
                break;
            case 'NumPadFour':
                if(flagcount > 0)
                {
                    -- flagcount;
                }
                Z = 0;
                foreach PC.DynamicActors(Class'Knoten', other3)
                {
                    ++ Z;                    
                }                
                I = 1;
                if(Z == 4)
                {
                    CC.Destroy();
                    CC = none;                    
                }
                else
                {
                    if(Z > 4)
                    {
                        CC.SetTimer(0, false);
                        CC.Z = CC.Z - 1;
                    }
                }
                foreach PC.DynamicActors(Class'Knoten', other3)
                {
                    if(I == Z)
                    {
                        other3.Destroy();                        
                    }
                    else
                    {
                        distancemeter_pos = other3.Location;
                    }
                    ++ I;                    
                }                
                if(Z > 4)
                {
                    CC.updateSplinef(true);
                    kabstand = CC.kabstand;
                    mabstand = CC.mabstand;                    
                }
                else
                {
                    foreach PC.DynamicActors(Class'RotKnoten', rk2)
                    {
                        rk2.SetHidden(true);                        
                    }                    
                    tvect = vect(0, 0, 0);
                    kabstand = 0;
                    mabstand = 0;
                    foreach PC.DynamicActors(Class'Knoten', other3)
                    {
                        if(tvect != vect(0, 0, 0))
                        {
                            if((VSize(other3.Location - tvect) < kabstand) || kabstand == float(0))
                            {
                                kabstand = VSize(other3.Location - tvect);
                            }
                            if((VSize(other3.Location - tvect) > mabstand) || mabstand == float(0))
                            {
                                mabstand = VSize(other3.Location - tvect);
                            }
                        }
                        tvect = other3.Location;                        
                    }                    
                }
                if(CC != none)
                {
                    CC.calculate_path_length();
                }
                break;
            default:
                break;
        }
        J0x3689:
        
    }
    else
    {
        if(Event == 1)
        {
            switch(Key)
            {
                case 'W':
                    bw = false;
                    break;
                case 'S':
                    bs = false;
                    break;
                case 'A':
                    ba = false;
                    break;
                case 'D':
                    bd = false;
                    break;
                case 'LeftShift':
                    bdown = false;
                    break;
                case 'LeftAlt':
                    bup = false;
                    break;
                case 'X':
                    balternativekey = false;
                    break;
                case 'Add':
                    if((CC != none) && flagcount > 2)
                    {
                        CC.dif_tpstart_temp = 0;
                        CC.dif_tpstart_add = false;
                    }
                case 'Subtract':
                    if((CC != none) && flagcount > 2)
                    {
                        CC.dif_tpstart_temp = 0;
                        CC.dif_tpstart_subtract = false;
                    }
                case 'NumPadSeven':
                    if(CC != none)
                    {
                        if(bfovmode)
                        {
                            if(CC.fovplus)
                            {
                                CC.fovplus = false;
                                CC.updateSplinef(true);
                            }                            
                        }
                        else
                        {
                            if(CC.rollplus)
                            {
                                CC.rollplus = false;
                                CC.updateSplinef(true);
                            }
                        }
                    }
                    break;
                case 'NumPadEight':
                    if(CC != none)
                    {
                        if(bfovmode)
                        {
                            if(CC.fovminus)
                            {
                                CC.fovminus = false;
                                CC.updateSplinef(true);
                            }                            
                        }
                        else
                        {
                            if(CC.rollminus)
                            {
                                CC.rollminus = false;
                                CC.updateSplinef(true);
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        else
        {
        }
        return false;
    }
}

function NotifyworldinfoChange()
{
    PC.Interactions[0] = none;
    PC = none;
    CC.Destroy();
}

event Tick(float DeltaTime)
{
    if(bLockRotation)
    {
    }
    if(bhideweapon)
    {
        if(KFPawn(drs.ViewTarget).Weapon.bHidden == false)
        {
            KFPawn(drs.ViewTarget).Weapon.SetHidden(true);
        }
    }
    if(bnextframe)
    {
        if(PC.PlayerReplicationInfo == none)
        {
            foreach PC.DynamicActors(Class'PlayerReplicationInfo', tpri)
            {
                PC.PlayerReplicationInfo = tpri;
                break;                
            }            
        }
        PC.WorldInfo.Pauser = PC.PlayerReplicationInfo;
        bnextframe = false;
    }
    if(seektime != 0)
    {
        if(PC.WorldInfo.GRI.RemainingTime <= seektime)
        {
            PC.WorldInfo.Pauser = PC.PlayerReplicationInfo;
            PC.WorldInfo.DemoPlayTimeDilation = 1;
            bIsPaused = true;
            seektime = 0;
        }
    }
    if(CC != none)
    {
        if(btpfastforward == true)
        {
            if(PC.WorldInfo.TimeSeconds >= ((TimedPathStartTime + CC.StartTimedPath_Later_seconds) - float(2)))
            {
                PC.WorldInfo.DemoPlayTimeDilation = 1;
                btpfastforward = false;
            }
        }
        if(btimedpath && !Started)
        {
            if(PC.WorldInfo.TimeSeconds >= (TimedPathStartTime + CC.StartTimedPath_Later_seconds))
            {
                bIsPaused = true;
                if(PC.PlayerReplicationInfo == none)
                {
                    foreach PC.DynamicActors(Class'PlayerReplicationInfo', tpri)
                    {
                        PC.PlayerReplicationInfo = tpri;
                        break;                        
                    }                    
                }
                PC.WorldInfo.Pauser = PC.PlayerReplicationInfo;
                seektime = 0;
                CC.timesangleichen();
                CC.inittimespline();
                startCam();
                Started = true;
                CC.draw_Spline = false;
                CC.drawSplineWasFalse = false;
                CC.drawcount = 0;
                if(bShowHudInfo)
                {
                    bShowHudInfo = false;
                }
            }
        }
    }
    if(bIncomingCam)
    {
        drs.SetViewTarget(PC);
        CC.SetLocation(target_actor.Location);
        drs.SetViewTarget(CC);
        CC.SetRotation(rotator(Target.Location - CC.Location));
    }
}

event PostRender(Canvas Canvas)
{
    local string TimeLeft, viewing_mode_name;
    local float textscale, indent1, indent2, YLine, YPos;

    if(bShowHudInfo)
    {
        textscale = 0.7;
        YPos = 480;
        YLine = 20;
        indent1 = 75;
        indent2 = 200;
        Canvas.Font = Font'SmallFont';
        Canvas.SetDrawColor(0, 255, 0);
        Canvas.SetPos(100, 430);
        Canvas.DrawText("Rypel Cam");
        Canvas.SetPos(115, 460);
        Canvas.DrawText("Hide Info: R",, 0.6, 0.6);
        Canvas.SetPos(indent1, YPos);
        Canvas.DrawText("demo speed:",, textscale, textscale);
        Canvas.SetPos(indent2, YPos);
        if(PC.WorldInfo.DemoPlayTimeDilation <= 0.3)
        {
            Canvas.SetDrawColor(204, 51, 51);            
        }
        else
        {
            if(PC.WorldInfo.DemoPlayTimeDilation <= 0.5)
            {
                Canvas.SetDrawColor(204, 153, 51);                
            }
            else
            {
                if(PC.WorldInfo.DemoPlayTimeDilation <= 0.9)
                {
                    Canvas.SetDrawColor(204, 204, 102);                    
                }
                else
                {
                    if(PC.WorldInfo.DemoPlayTimeDilation == float(1))
                    {
                        Canvas.SetDrawColor(255, 255, 255);                        
                    }
                    else
                    {
                        if(PC.WorldInfo.DemoPlayTimeDilation <= 1.2)
                        {
                            Canvas.SetDrawColor(240, 240, 240);                            
                        }
                        else
                        {
                            if(PC.WorldInfo.DemoPlayTimeDilation <= float(2))
                            {
                                Canvas.SetDrawColor(204, 204, 102);                                
                            }
                            else
                            {
                                if(PC.WorldInfo.DemoPlayTimeDilation <= float(4))
                                {
                                    Canvas.SetDrawColor(204, 153, 51);                                    
                                }
                                else
                                {
                                    if(PC.WorldInfo.DemoPlayTimeDilation <= float(10))
                                    {
                                        Canvas.SetDrawColor(204, 51, 51);                                        
                                    }
                                    else
                                    {
                                        if(PC.WorldInfo.DemoPlayTimeDilation > float(10))
                                        {
                                            Canvas.SetDrawColor(255, 0, 0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        Canvas.DrawText(string(PC.WorldInfo.DemoPlayTimeDilation),, textscale, textscale);
        if(CC != none)
        {
            if(CC.FOV > float(0))
            {
                YPos += YLine;
                Canvas.SetPos(indent1, YPos);
                Canvas.SetDrawColor(0, 255, 0);
                Canvas.DrawText("timed path:",, textscale, textscale);
                Canvas.SetDrawColor(255, 255, 255);
                Canvas.SetPos(indent2, YPos);
                if(btimedpath)
                {
                    if(PC.WorldInfo.TimeSeconds < (TimedPathStartTime + CC.StartTimedPath_Later_seconds))
                    {
                        Canvas.DrawText("enabled, starts in:" @ string((TimedPathStartTime - PC.WorldInfo.TimeSeconds) + CC.StartTimedPath_Later_seconds),, textscale, textscale);                        
                    }
                    else
                    {
                        Canvas.DrawText(("enabled, start:" @ string(float(-1) * ((TimedPathStartTime - PC.WorldInfo.TimeSeconds) + CC.StartTimedPath_Later_seconds))) @ "sec ago",, textscale, textscale);
                    }
                    YPos += YLine;
                    Canvas.SetPos(indent1, YPos);
                    Canvas.SetDrawColor(0, 255, 0);
                    Canvas.DrawText("tp start: ",, textscale, textscale);
                    Canvas.SetPos(indent2, YPos);
                    Canvas.SetDrawColor(255, 255, 255);
                    Canvas.DrawText(((string(TimedPathStartTime) $ "    (currently: ") $ string(PC.WorldInfo.TimeSeconds)) $ ")",, textscale, textscale);                    
                }
                else
                {
                    Canvas.DrawText("disabled",, textscale, textscale);
                }
            }
            if(PC.ViewTarget != CC.viewer01)
            {
                YPos += YLine;
                Canvas.SetPos(indent1, YPos);
                Canvas.SetDrawColor(0, 255, 0);
                Canvas.DrawText("cam points: ",, textscale, textscale);
                Canvas.SetPos(indent2, YPos);
                Canvas.SetDrawColor(255, 255, 255);
                Canvas.DrawText(string(flagcount),, textscale, textscale);
            }
            if(((((CC != none) && !CC.ssw) && PC.ViewTarget == drs) && !CC.do_not_update_Spline) && !bFollowTarget)
            {
                YPos += YLine;
                Canvas.SetPos(indent1, YPos);
                Canvas.SetDrawColor(0, 255, 0);
                Canvas.DrawText("range: ",, textscale, textscale);
                Canvas.SetPos(indent2, YPos);
                if((CC.Z == 4) && CC.path_length == float(0))
                {
                    CC.calculate_path_length();                    
                }
                else
                {
                    if(VSize(PC.ViewTarget.Location) == VSize(distancemeter_pos))
                    {
                        Canvas.SetDrawColor(204, 51, 51, 222);
                        Canvas.DrawText("too close",, textscale, textscale);                        
                    }
                    else
                    {
                        if(VSize(PC.ViewTarget.Location - distancemeter_pos) < (CC.path_length / float(CC.Z)))
                        {
                            if((mabstand / VSize(PC.ViewTarget.Location - distancemeter_pos)) > float(15))
                            {
                                Canvas.SetDrawColor(204, 51, 51, 222);
                                Canvas.DrawText("too close",, textscale, textscale);                                
                            }
                            else
                            {
                                Canvas.SetDrawColor(255, 255, 255, 222);
                                Canvas.DrawText(string(VSize(PC.ViewTarget.Location - distancemeter_pos) / float(int(CC.path_length / float(CC.Z)))),, textscale, textscale);
                            }                            
                        }
                        else
                        {
                            if(VSize(PC.ViewTarget.Location - distancemeter_pos) > (CC.path_length / float(CC.Z)))
                            {
                                if((VSize(PC.ViewTarget.Location - distancemeter_pos) / kabstand) > float(15))
                                {
                                    Canvas.SetDrawColor(204, 51, 51, 222);
                                    Canvas.DrawText("too distant",, textscale, textscale);                                    
                                }
                                else
                                {
                                    Canvas.SetDrawColor(255, 255, 255, 222);
                                    Canvas.DrawText(string(float(1) - (float(int(VSize(PC.ViewTarget.Location - distancemeter_pos) - (CC.path_length / float(CC.Z)))) / ((float(15) * kabstand) - (CC.path_length / float(CC.Z))))),, textscale, textscale);
                                }
                            }
                        }
                    }
                }
            }
        }
        YPos += YLine;
        Canvas.SetPos(indent1, YPos);
        Canvas.SetDrawColor(0, 255, 0);
        Canvas.DrawText("viewing:",, textscale, textscale);
        Canvas.SetDrawColor(255, 255, 255);
        Canvas.SetPos(indent2, YPos);
        if(Pawn(PC.ViewTarget) != none)
        {
            if(Pawn(PC.ViewTarget).PlayerReplicationInfo != none)
            {
                viewing_mode_name = Pawn(PC.ViewTarget).PlayerReplicationInfo.PlayerName;                
            }
            else
            {
                viewing_mode_name = "not available";
            }            
        }
        else
        {
            if(((CC != none) && CC.ssw) && !btimedpath)
            {
                viewing_mode_name = ("rcam mode (progress:" @ string(int((CC.Dist / CC.path_length) * float(100)))) $ "%)";                
            }
            else
            {
                if((CC != none) && CC.ssw)
                {
                    viewing_mode_name = "rcam mode";                    
                }
                else
                {
                    if(bFollowTarget && Target != none)
                    {
                        viewing_mode_name = watchedname;                        
                    }
                    else
                    {
                        if(PC.ViewTarget == drs)
                        {
                            viewing_mode_name = "free camera";                            
                        }
                        else
                        {
                            if((CC != none) && PC.ViewTarget == CC.viewer01)
                            {
                                viewing_mode_name = (("cam point" @ string(CC.Viewing + 1)) $ "/") $ string(flagcount);                                
                            }
                            else
                            {
                                viewing_mode_name = "demorec spectator";
                            }
                        }
                    }
                }
            }
        }
        if(viewing_mode_name != "")
        {
            Canvas.DrawText(viewing_mode_name,, textscale, textscale);
        }
        if((CC != none) && PC.ViewTarget == CC.viewer01)
        {
            YPos += YLine;
            Canvas.SetPos(indent1, YPos);
            if(bfovmode)
            {
                Canvas.SetDrawColor(0, 255, 0);
                Canvas.DrawText("  FOV: ",, textscale, textscale);                
            }
            else
            {
                Canvas.SetDrawColor(0, 255, 0, 90);
                Canvas.DrawText("  FOV(o): ",, textscale, textscale);
            }
            if(bfovmode)
            {
                Canvas.SetDrawColor(255, 255, 255);                
            }
            else
            {
                Canvas.SetDrawColor(255, 255, 255, 90);
            }
            Canvas.SetPos(indent2, YPos);
            Canvas.DrawText(string(CC.FOV),, textscale, textscale);
            YPos += YLine;
            Canvas.SetPos(indent1, YPos);
            if(!bfovmode)
            {
                Canvas.SetDrawColor(0, 255, 0);
                Canvas.DrawText("  Roll?: ",, textscale, textscale);
                goto J0x1B7A;
                Canvas.SetDrawColor(0, 255, 0, 90);
            }
            Canvas.DrawText("  Roll?(o): ",, textscale, textscale);
            if(!bfovmode)
            {
                Canvas.SetDrawColor(255, 255, 255);
                goto J0x1BD9;
                Canvas.SetDrawColor(255, 255, 255, 90);
            }
            Canvas.SetPos(indent2, YPos);
            Canvas.DrawText(string((360 * float(PC.ViewTarget.Rotation.Roll)) / float(65536)),, textscale, textscale);
            Canvas.SetDrawColor(0, 255, 0);
            YPos += YLine;
        }
        Canvas.SetPos(indent1, YPos);
        Canvas.SetDrawColor(0, 255, 0);
        Canvas.DrawText("time:",, textscale, textscale);
        Canvas.SetDrawColor(255, 255, 255);
        Canvas.SetPos(indent2, YPos);
        TimeLeft = FormatTime_likeUT(((PC.WorldInfo.GRI.TimeLimit != 0) ? PC.WorldInfo.GRI.RemainingTime : PC.WorldInfo.GRI.ElapsedTime));
        Canvas.DrawText(TimeLeft,, textscale, textscale);
    }
}

defaultproperties
{
    bShowHudInfo=true
    specfollowdistance=100
    OnReceivedNativeInputKey=InputKey
    OnReceivedNativeInputAxis=InputAxis
}