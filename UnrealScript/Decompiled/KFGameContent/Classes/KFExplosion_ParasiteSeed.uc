/*******************************************************************************
 * KFExplosion_ParasiteSeed generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFExplosion_ParasiteSeed extends KFExplosion_MedicGrenade
    config(Weapon)
    hidecategories(Navigation);

var transient bool FirstExplosion;

protected simulated function AffectsPawn(Pawn Victim, float DamageScale)
{
    local KFPawn_Human HumanVictim;
    local KFPawn_Monster MonsterVictim;
    local KFProj_MedicGrenade OwnerProjectile;
    local bool bCanRepairArmor;
    local Box BBox;
    local Vector BBoxCenter;
    local Actor HitActor;
    local bool bDamageBlocked;

    if((Victim != none) && Victim.IsAliveAndWell())
    {
        MonsterVictim = KFPawn_Monster(Victim);
        if(MonsterVictim != none)
        {
            if(((!FirstExplosion || bWasFadedOut) || bDeleteMe) || bPendingDelete)
            {
                return;
            }
            Victim.GetComponentsBoundingBox(BBox);
            BBoxCenter = (BBox.Min + BBox.Max) * 0.5;
            HitActor = TraceExplosive(BBoxCenter, Location + vect(0, 0, 20));
            bDamageBlocked = (HitActor != none) && HitActor != Victim;
            if(bDamageBlocked && HitActor.IsA('KFDoorActor'))
            {
                bDamageBlocked = false;
            }
            if(!bDamageBlocked)
            {
                Victim.TakeRadiusDamage(InstigatorController, ExplosionTemplate.Damage * DamageScale, ExplosionTemplate.DamageRadius, ExplosionTemplate.MyDamageType, ExplosionTemplate.MomentumTransferScale, Location, bDoFullDamage, ((Owner != none) ? Owner : self), ExplosionTemplate.DamageFalloffExponent);
            }            
        }
        else
        {
            HumanVictim = KFPawn_Human(Victim);
            if((HumanVictim != none) && HumanVictim.GetExposureTo(Location) > float(0))
            {
                OwnerProjectile = KFProj_MedicGrenade(Owner);
                if(OwnerProjectile != none)
                {
                    bCanRepairArmor = OwnerProjectile.HealedPawns.Find(HumanVictim == -1;
                }
                HumanVictim.HealDamage(int(HealingAmount), InstigatorController, HealingDamageType, bCanRepairArmor);
                if(bCanRepairArmor)
                {
                    OwnerProjectile.HealedPawns.AddItem(HumanVictim;
                }
            }
        }
    }
}

simulated function DelayedExplosionDamage()
{
    FirstExplosion = false;
    super(GameExplosionActor).DelayedExplosionDamage();
}

defaultproperties
{
    FirstExplosion=true
    HealingDamageType=Class'KFDT_Healing_ParasiteSeed'
    interval=0.5
    maxTime=5
    bDoFullDamage=false
    LoopStartEvent=AkEvent'WW_WEP_Medic_GrenadeLauncher.Play_WEP_Medic_GrenadeLauncher_Grenade_Smoke_Loop'
    LoopStopEvent=AkEvent'WW_WEP_Medic_GrenadeLauncher.Stop_WEP_Medic_GrenadeLauncher_Grenade_Smoke_Loop'
    LoopingParticleEffect=ParticleSystem'WEP_3P_Medic_Grenade_EMIT.FX_Medic_Grenade_Explosion'
    bExplodeMoreThanOnce=false
}