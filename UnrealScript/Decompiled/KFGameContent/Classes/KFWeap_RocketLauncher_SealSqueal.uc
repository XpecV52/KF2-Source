/*******************************************************************************
 * KFWeap_RocketLauncher_SealSqueal generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_RocketLauncher_SealSqueal extends KFWeap_GrenadeLauncher_Base
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var(Animations) const editconst name DetonateAnim;
var(Animations) const editconst name DetonateAnimLast;
var(Animations) const editconst name DetonateAnimIron;
var(Animations) const editconst name DetonateAnimIronLast;
var array<KFProj_Rocket_SealSqueal> DeployedHarpoons;
var int NumDeployedHarpoons;
var float SelfDamageReductionValue;
var CameraAnim DetonateCameraAnim;
var float DetonateCameraAnimPlayRate;
var float DetonateCameraAnimScale;

replication
{
     if(bNetDirty)
        NumDeployedHarpoons;
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function Projectile ProjectileFire()
{
    local Projectile P;
    local KFProj_Rocket_SealSqueal Harpoon;

    P = super(KFWeapon).ProjectileFire();
    Harpoon = KFProj_Rocket_SealSqueal(P);
    if(Harpoon != none)
    {
        DeployedHarpoons.AddItem(Harpoon;
        NumDeployedHarpoons = DeployedHarpoons.Length;
        bForceNetUpdate = true;
    }
    return P;
}

simulated function name GetReloadAnimName(bool bTacticalReload)
{
    if(AmmoCount[0] > 0)
    {
        return ((bTacticalReload) ? 'Reload_Half_Elite' : 'Reload_Half');        
    }
    else
    {
        return ((bTacticalReload) ? 'Reload_Empty_Elite' : 'Reload_Empty');
    }
}

function AdjustDamage(out int InDamage, class<DamageType> DamageType, Actor DamageCauser)
{
    super(KFWeapon).AdjustDamage(InDamage, DamageType, DamageCauser);
    if(((Instigator != none) && DamageCauser != none) && DamageCauser.Instigator == Instigator)
    {
        InDamage *= SelfDamageReductionValue;
    }
}

simulated function GotoActiveState();

simulated function bool ShouldPlayFireLast(byte FireModeNum)
{
    return super(KFWeapon).ShouldPlayFireLast(FireModeNum);
}

simulated function PrepareAndDetonate()
{
    local name SelectedAnim;
    local float AnimDuration;
    local bool bInSprintState;

    if(bUsingSights)
    {
        SelectedAnim = ((ShouldPlayFireLast(0)) ? DetonateAnimIronLast : DetonateAnimIron);        
    }
    else
    {
        SelectedAnim = ((ShouldPlayFireLast(0)) ? DetonateAnimLast : DetonateAnim);
    }
    AnimDuration = MySkelMesh.GetAnimLength(SelectedAnim);
    bInSprintState = IsInState('WeaponSprinting');
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(NumDeployedHarpoons > 0)
        {
            PlayCameraAnim(DetonateCameraAnim, DetonateCameraAnimScale, DetonateCameraAnimPlayRate, 0.2, 0.2);            
        }
        if(bInSprintState)
        {
            AnimDuration *= 0.25;
            PlayAnimation(SelectedAnim, AnimDuration);            
        }
        else
        {
            PlayAnimation(SelectedAnim);
        }
    }
    if(Role == ROLE_Authority)
    {
        Detonate();
    }
    AnimDuration = 0.75;
    if(bInSprintState)
    {
        SetTimer(AnimDuration * 0.8, false, 'PlaySprintStart');        
    }
    else
    {
        SetTimer(AnimDuration * 0.5, false, 'GotoActiveState');
    }
}

simulated function Detonate()
{
    local int I;

    if(Role == ROLE_Authority)
    {
        I = DeployedHarpoons.Length - 1;
        J0x2B:

        if(I >= 0)
        {
            DeployedHarpoons[I].Detonate();
            -- I;
            goto J0x2B;
        }
        if(!HasAnyAmmo() && NumDeployedHarpoons == 0)
        {
            if(CanSwitchWeapons())
            {
                Instigator.Controller.ClientSwitchToBestWeapon(false);
            }
        }
    }
}

function RemoveDeployedHarpoon(optional int HarpoonIndex, optional Actor HarpoonActor)
{
    HarpoonIndex = -1;    
    if(HarpoonIndex == -1)
    {
        if(HarpoonActor != none)
        {
            HarpoonIndex = DeployedHarpoons.Find(HarpoonActor;
        }
    }
    if(HarpoonIndex != -1)
    {
        DeployedHarpoons.Remove(HarpoonIndex, 1;
        NumDeployedHarpoons = DeployedHarpoons.Length;
        bForceNetUpdate = true;
    }
}

simulated function bool CanOverrideMagReload(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        return true;
    }
    return super(KFWeapon).CanOverrideMagReload(FireModeNum);
}

simulated state WeaponDetonating
{
    ignores AllowSprinting;

    simulated event BeginState(name PreviousStateName)
    {
        PrepareAndDetonate();
    }

    simulated function GotoActiveState()
    {
        GotoState('Active');
    }
    stop;    
}

defaultproperties
{
    DetonateAnim=Alt_Fire
    DetonateAnimLast=Alt_Fire_Last
    DetonateAnimIron=Alt_Fire_Iron
    DetonateAnimIronLast=Alt_Fire_Iron_Last
    SelfDamageReductionValue=0.25
    DetonateCameraAnim=CameraAnim'WEP_1P_Seal_Squeal_ANIM.Shoot_MB500'
    DetonateCameraAnimPlayRate=2
    DetonateCameraAnimScale=0.4
    PackageKey="Seal_Squeal"
    FirstPersonMeshName="wep_1p_seal_squeal_mesh.WEP_1stP_Seal_Squeal_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="wep_3p_seal_squeal_mesh.WEP_3rdP_Seal_Squeal_Pickup"
    AttachmentArchetypeName="wep_seal_squeal_arch.Wep_Seal_Squeal_3P"
    MuzzleFlashTemplateName="WEP_Seal_Squeal_ARCH.Wep_Seal_Squeal_MuzzleFlash"
    bHasIronSights=true
    bWarnAIWhenAiming=true
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=true
    InventorySize=7
    MeshFOV=75
    MeshIronSightFOV=40
    PlayerIronSightFOV=65
    IronSightPosition=(X=10,Y=0,Z=0)
    DOF_FG_MaxNearBlurSize=3.5
    AimWarningDelay=(X=0.4,Y=0.8)
    GroupPriority=75
    WeaponSelectTexture=Texture2D'WEP_UI_Seal_Squeal_TEX.UI_WeaponSelect_SealSqueal'
    MagazineCapacity=5
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=30
    InitialSpareMags=1
    WeaponFireWaveForm=ForceFeedbackWaveform'FX_ForceFeedback_ARCH.Gunfire.Medium_Recoil'
    FireSightedAnims=/* Array type was not detected. */
    BonesToLockOnEmpty=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=11,Y=8,Z=-2)
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_RocketLauncher_SealSqueal.MeleeHelper'
    EjectedShellForegroundDuration=1.5
    maxRecoilPitch=500
    minRecoilPitch=400
    maxRecoilYaw=150
    minRecoilYaw=-150
    RecoilRate=0.08
    RecoilViewRotationScale=0.6
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=1250
    RecoilMinPitchLimit=64785
    RecoilISMaxYawLimit=50
    RecoilISMinYawLimit=65485
    RecoilISMaxPitchLimit=500
    RecoilISMinPitchLimit=65485
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=3,Z=-2.5)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_RocketLauncher_SealSqueal.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Seal Squeal"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_RocketLauncher_SealSqueal.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_RocketLauncher_SealSqueal.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}