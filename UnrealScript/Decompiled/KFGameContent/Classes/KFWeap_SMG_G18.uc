/*******************************************************************************
 * KFWeap_SMG_G18 generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_SMG_G18 extends KFWeap_SMGBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var AkBaseSoundObject BlockSound;
var ParticleSystem BlockParticleSystem;
var name BlockEffectsSocketName;
var array<BlockEffectInfo> BlockTypes;
var float BlockDamageMitigation;
var const name IdleToIronSightAnim;
var const name IronSightToIdleAnim;
var float BlockAngle;
var transient float BlockAngleCos;
var class<KFExplosionActor> ExplosionActorClass;
var() KFGameExplosion ExplosionTemplate;

simulated event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    BlockAngleCos = Cos((BlockAngle / 2) * 0.01745329);
}

simulated function DoBashImpulse()
{
    local KFExplosionActor ExploActor;
    local Vector SpawnLoc;
    local Rotator SpawnRot;

    if(Instigator.Role < ROLE_Authority)
    {
        return;
    }
    SpawnLoc = Instigator.Location;
    SpawnRot = Instigator.Rotation;
    SpawnLoc += vector(SpawnRot);
    ExploActor = Spawn(ExplosionActorClass, self,, SpawnLoc, SpawnRot,, true);
    if(ExploActor != none)
    {
        ExploActor.InstigatorController = Instigator.Controller;
        ExploActor.Instigator = Instigator;
        ExploActor.bReplicateInstigator = true;
        ExploActor.Explode(ExplosionTemplate, vector(SpawnRot));
    }
}

function AdjustDamage(out int InDamage, class<DamageType> DamageType, Actor DamageCauser)
{
    local KFPerk InstigatorPerk;
    local byte BlockTypeIndex;
    local float DmgCauserDot;

    if(!bUsingSights)
    {
        return;
    }
    if(Instigator.IsSameTeam(DamageCauser.Instigator))
    {
        return;
    }
    if(CanBlockDamageType(DamageType, BlockTypeIndex))
    {
        if(ClassIsChildOf(DamageCauser.Class, Class'Projectile'))
        {
            DmgCauserDot = Normal(DamageCauser.Instigator.Location - DamageCauser.Location) Dot vector(Instigator.Rotation);            
        }
        else
        {
            DmgCauserDot = Normal(DamageCauser.Location - Instigator.Location) Dot vector(Instigator.Rotation);
        }
        if(DmgCauserDot > BlockAngleCos)
        {
            InDamage *= (GetUpgradedBlockDamageMitigation(CurrentWeaponUpgradeIndex));
            ClientPlayBlockEffects(BlockTypeIndex);
            InstigatorPerk = GetPerk();
            if(InstigatorPerk != none)
            {
                InstigatorPerk.SetSuccessfullBlock();
            }
        }
    }
}

function bool CanBlockDamageType(class<DamageType> DamageType, optional out byte out_Idx)
{
    local int Idx;

    Idx = 0;
    J0x0C:

    if(Idx < BlockTypes.Length)
    {
        if(ClassIsChildOf(DamageType, BlockTypes[Idx].dmgType))
        {
            out_Idx = byte(Idx);
            return true;
        }
        ++ Idx;
        goto J0x0C;
    }
    out_Idx = 255;
    return false;
}

unreliable client simulated function ClientPlayBlockEffects(optional byte BlockTypeIndex)
{
    local AkBaseSoundObject Sound;
    local ParticleSystem PSTemplate;

    BlockTypeIndex = 255;
    GetBlockEffects(BlockTypeIndex, Sound, PSTemplate);
    PlayLocalBlockEffects(Sound, PSTemplate);
}

simulated function GetBlockEffects(byte BlockIndex, out AkBaseSoundObject outSound, out ParticleSystem outParticleSys)
{
    outSound = BlockSound;
    outParticleSys = BlockParticleSystem;
    if(BlockIndex != 255)
    {
        if(BlockTypes[BlockIndex].BlockSound != none)
        {
            outSound = BlockTypes[BlockIndex].BlockSound;
        }
        if(BlockTypes[BlockIndex].BlockParticleSys != none)
        {
            outParticleSys = BlockTypes[BlockIndex].BlockParticleSys;
        }
    }
}

simulated function PlayLocalBlockEffects(AkBaseSoundObject Sound, ParticleSystem PSTemplate)
{
    local Vector Loc;
    local Rotator Rot;
    local editinline ParticleSystemComponent PSC;

    if(Sound != none)
    {
        PlaySoundBase(Sound, true);
    }
    if(PSTemplate != none)
    {
        if(MySkelMesh.GetSocketWorldLocationAndRotation(BlockEffectsSocketName, Loc, Rot))
        {
            PSC = WorldInfo.MyEmitterPool.SpawnEmitter(PSTemplate, Loc, Rot);
            PSC.SetDepthPriorityGroup(2);            
        }
        else
        {
            LogInternal((string(self) @ string(GetFuncName())) @ "missing BlockEffects Socket!");
        }
    }
}

static simulated function float GetUpgradedBlockDamageMitigation(int UpgradeIndex)
{
    return GetUpgradedStatValue(default.BlockDamageMitigation, 3, UpgradeIndex);
}

simulated state Active
{
    simulated function ZoomIn(bool bAnimateTransition, float ZoomTimeToGo)
    {
        GotoState('ActiveIronSights');
    }
    stop;    
}

simulated state ActiveIronSights extends Active
{
    simulated function BeginState(name PreviousStateName)
    {
        local float ZoomTimeToGo;

        ZoomTimeToGo = MySkelMesh.GetAnimLength(IdleToIronSightAnim);
        global.ZoomIn(true, ZoomTimeToGo);
        PlayAnimation(IdleToIronSightAnim, ZoomTime, false);
    }

    simulated function ZoomOut(bool bAnimateTransition, float ZoomTimeToGo)
    {
        ZoomTimeToGo = MySkelMesh.GetAnimLength(IronSightToIdleAnim);
        global.ZoomOut(true, ZoomTimeToGo);
        PlayAnimation(IronSightToIdleAnim, ZoomTime, false);
        GotoState('Active');
    }
    stop;    
}

simulated state MeleeAttackBasic
{
    simulated function NotifyMeleeCollision(Actor HitActor, optional Vector HitLocation)
    {
        local KFPawn Victim;

        if(Role == ROLE_Authority)
        {
            if(HitActor.bWorldGeometry)
            {
                return;
            }
            Victim = KFPawn(HitActor);
            if(((Victim == none) || Victim.GetTeamNum() == Instigator.GetTeamNum()) || Victim.bPlayedDeath && (WorldInfo.TimeSeconds - Victim.TimeOfDeath) > 0)
            {
                return;
            }
            SetTimer(0.001, false, 'DoBashImpulse');
        }
    }
    stop;    
}

simulated state Reloading
{
    simulated function ZoomIn(bool bAnimateTransition, float ZoomTimeToGo)
    {
        GotoState('ActiveIronSights');
        AbortReload();
    }
    stop;    
}

defaultproperties
{
    BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Hammer'
    BlockParticleSystem=ParticleSystem'FX_Impacts_EMIT.FX_Block_melee_01'
    BlockEffectsSocketName=BlockEffect
    BlockTypes(0)=(dmgType=Class'KFGame.KFDT_Bludgeon',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(1)=(dmgType=Class'KFGame.KFDT_Slashing',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(2)=(dmgType=Class'KFDT_Fire_HuskFireball',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(3)=(dmgType=Class'KFDT_Fire_HuskFlamethrower',BlockSound=none,ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(4)=(dmgType=Class'KFDT_BloatPuke',BlockSound=none,ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(5)=(dmgType=Class'KFDT_EvilDAR_Rocket',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(6)=(dmgType=Class'KFDT_EvilDAR_Laser',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(7)=(dmgType=Class'KFDT_DAR_EMPBlast',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(8)=(dmgType=Class'KFDT_Ballistic_PatMinigun',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(9)=(dmgType=Class'KFDT_Explosive_PatMissile',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(10)=(dmgType=Class'KFDT_Ballistic_HansAK12',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(11)=(dmgType=Class'KFDT_EMP_MatriarchTeslaBlast',BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Bullet_Impact_Metal',ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(12)=(dmgType=Class'KFDT_EMP_MatriarchPlasmaCannon',BlockSound=none,ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockTypes(13)=(dmgType=Class'KFDT_FleshpoundKing_ChestBeam',BlockSound=none,ParrySound=none,BlockParticleSys=none,ParryParticleSys=none)
    BlockDamageMitigation=0.4
    IdleToIronSightAnim=Iron_Shield_Up
    IronSightToIdleAnim=Iron_Shield_Down
    BlockAngle=170
    ExplosionActorClass=Class'KFGame.KFExplosionActorReplicated'
    ExplosionTemplate=KFGameExplosion'WEP_RiotShield_ARCH.Wep_G18_Shield_Impulse'
    PackageKey="RiotShield"
    FirstPersonMeshName="WEP_1P_RiotShield_MESH.Wep_1P_RiotShield_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_RiotShield_MESH.Wep_3P_RiotShield_Pickup"
    AttachmentArchetypeName="WEP_RiotShield_ARCH.Wep_G18_3P"
    MuzzleFlashTemplateName="WEP_RiotShield_ARCH.Wep_G18_MuzzleFlash"
    bHasIronSights=true
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=true
    FireModeIconPaths=/* Array type was not detected. */
    SingleFireSoundIndex=1
    InventorySize=8
    MagazineCapacity=33
    MeshFOV=96
    PlayerIronSightFOV=64
    QuickWeaponDownRotation=(Pitch=-8192,Yaw=0,Roll=0)
    GroupPriority=100
    WeaponSelectTexture=Texture2D'WEP_UI_RiotShield_TEX.UI_WeaponSelect_RiotShield'
    SpareAmmoCapacity=462
    InitialSpareMags=4
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    FireSightedAnims=/* Array type was not detected. */
    BonesToLockOnEmpty=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=10,Y=0,Z=-7)
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_SMG_G18.MeleeHelper'
    maxRecoilPitch=100
    minRecoilPitch=75
    maxRecoilYaw=85
    minRecoilYaw=-85
    RecoilRate=0.045
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=900
    RecoilMinPitchLimit=65035
    RecoilISMaxYawLimit=100
    RecoilISMinYawLimit=65435
    RecoilISMaxPitchLimit=375
    RecoilISMinPitchLimit=65460
    JoggingRecoilModifier=1.2
    WalkingRecoilModifier=1.1
    IronSightMeshFOVCompensationScale=1.65
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitMomentum=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=30,Y=6.5,Z=-4)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_SMG_G18.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Riot Shield & Glock 18"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_SMG_G18.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_SMG_G18.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}