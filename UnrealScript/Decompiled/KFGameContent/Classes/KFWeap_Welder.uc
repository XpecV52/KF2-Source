/*******************************************************************************
 * KFWeap_Welder generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Welder extends KFWeapon
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

/** If set, automatically equip the previous weapon when leaving a door trigger */
var() bool bAutoUnequip;
/** Maximum range to find Door */
var() float WeldingRange;
/** How many points to add to a door's weld integrity per use (use rate determined by FireInterval) */
var() float FastenRate;
/** How many points to subtract from a door's weld integrity per use (use rate determined by FireInterval) */
var() float UnfastenRate;
var const float ExtraWeldingRange;
/** How much ammo each use consumes (use rate determined by FireInterval) */
var() float AmmoCost;
/** How long (in seconds) it takes to recharge ammo by 1 unit */
var() float AmmoRechargeRate;
var name IdleWeldAnim;
var name WeldOpenAnim;
var name WeldCloseAnim;
var KFDoorActor WeldTarget;
var float LastTraceHitTime;
var class<KFGFxWorld_WelderScreen> ScreenUIClass;
var KFGFxWorld_WelderScreen ScreenUI;

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    if(Class'KFGameEngine'.default.bShowWelderInInv)
    {
        InventoryGroup = 3;
    }
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super.AttachWeaponTo(MeshCpnt, SocketName);
    if((Instigator != none) && Instigator.IsLocallyControlled())
    {
        if(ScreenUI == none)
        {
            ScreenUI = new (self) ScreenUIClass;
            ScreenUI.Init();
            ScreenUI.Start(true);
        }
        if(ScreenUI != none)
        {
            ScreenUI.SetPause(false);
            ScreenUI.SetCharge(AmmoCount[0]);
            ScreenUI.SetIntegrity(255);
        }
    }
}

simulated function DetachWeapon()
{
    super.DetachWeapon();
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && ScreenUI != none)
    {
        ScreenUI.SetPause();
    }
}

simulated event Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    UpdateScreenUI();
}

simulated event Destroyed()
{
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && ScreenUI != none)
    {
        ScreenUI.Close();
    }
    super(Weapon).Destroyed();
}

simulated function UpdateScreenUI()
{
    local float WeldPercentageFloat;
    local byte WeldPercentage;

    if(((Instigator != none) && Instigator.IsLocallyControlled()) && Instigator.Weapon == self)
    {
        if(ScreenUI != none)
        {
            if(ScreenUI.CurrentCharge != AmmoCount[0])
            {
                ScreenUI.SetCharge(AmmoCount[0]);
            }
            if(WeldTarget != none)
            {
                WeldPercentageFloat = (float(WeldTarget.WeldIntegrity) / float(WeldTarget.MaxWeldIntegrity)) * 100;
                if((WeldPercentageFloat < 1) && WeldPercentageFloat > 0)
                {
                    WeldPercentageFloat = 1;                    
                }
                else
                {
                    if((WeldPercentageFloat > 99) && WeldPercentageFloat < 100)
                    {
                        WeldPercentageFloat = 99;
                    }
                }
                WeldPercentage = byte(WeldPercentageFloat);
                if(WeldPercentage != ScreenUI.IntegrityPercentage)
                {
                    ScreenUI.SetIntegrity(WeldPercentage);
                }                
            }
            else
            {
                if(ScreenUI.IntegrityPercentage != 255)
                {
                    ScreenUI.SetIntegrity(255);
                }
            }
        }
    }
}

simulated function bool HasAnyAmmo()
{
    return true;
}

simulated function bool HasAmmo(byte FireModeNum, optional int Amount)
{
    Amount = 1;
    if((FireModeNum == 0) || FireModeNum == 1)
    {
        if((float(AmmoCount[0]) - AmmoCost) > float(0))
        {
            return (WeldTarget != none) && CanWeldTarget(FireModeNum);
        }
        return false;
    }
    return super.HasAmmo(FireModeNum, Amount);
}

simulated function bool ShouldAutoReload(byte FireModeNum)
{
    return false;
}

simulated function SetIronSights(bool bNewIronSights)
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    if(bNewIronSights)
    {
        StartFire(1);        
    }
    else
    {
        StopFire(1);
    }
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 0) || FireModeNum == 1)
    {
        if(Role < ROLE_Authority)
        {
            ServerSetWeldTarget(WeldTarget, false);
        }
    }
    super.StartFire(FireModeNum);
}

simulated function CustomFire()
{
    local float CurrentFastenRate, CurrentUnfastenRate;

    WeldTarget = TraceDoorActors();
    if((Role == ROLE_Authority) && WeldTarget != none)
    {
        CurrentFastenRate = FastenRate;
        CurrentUnfastenRate = UnfastenRate;
        GetPerk().ModifyWeldingRate(CurrentFastenRate, CurrentUnfastenRate);
        SetTimer(AmmoRechargeRate, true, 'RechargeAmmo');
        if(CurrentFireMode == 0)
        {
            WeldTarget.FastenDoor(int(CurrentFastenRate), KFPawn(Instigator));            
        }
        else
        {
            WeldTarget.FastenDoor(int(CurrentUnfastenRate), KFPawn(Instigator));
        }
    }
    if(Instigator.IsLocallyControlled())
    {
        if((WeldTarget == none) || !CanWeldTarget())
        {
            StopFire(CurrentFireMode);
        }
    }
}

simulated function bool CanWeldTarget(optional int FireModeNum)
{
    local KFPerk WelderPerk;

    FireModeNum = CurrentFireMode;
    WelderPerk = GetPerk();
    if((FireModeNum == 0) && WeldTarget.WeldIntegrity >= WeldTarget.MaxWeldIntegrity)
    {
        if((WelderPerk != none) && WelderPerk.CanExplosiveWeld())
        {
            return WeldTarget.DemoWeld < WeldTarget.default.DemoWeldRequired;
        }
        return false;        
    }
    else
    {
        if((FireModeNum == 1) && WeldTarget.WeldIntegrity <= 0)
        {
            return false;
        }
    }
    return true;
}

function RechargeAmmo()
{
    if(AmmoCount[0] < MagazineCapacity[0])
    {
        ++ AmmoCount[0];
        if(float(AmmoCount[0]) == AmmoCost)
        {
            Refire();
            if(!Instigator.IsLocallyControlled())
            {
                ClientRefire();
            }
        }        
    }
    else
    {
        ClearTimer('RechargeAmmo');
    }
}

simulated function Refire()
{
    local byte I;

    I = 0;
    J0x0C:

    if(I <= 1)
    {
        if(PendingFire(I))
        {
            SendToFiringState(I);
            goto J0x59;
        }
        ++ I;
        goto J0x0C;
    }
    J0x59:

}

reliable client simulated function ClientRefire()
{
    Refire();
}

simulated function ConsumeAmmo(byte FireModeNum)
{
    if(Role == ROLE_Authority)
    {
        if((MagazineCapacity[0] > 0) && AmmoCount[0] > 0)
        {
            AmmoCount[0] = byte(Max(int(float(AmmoCount[0]) - AmmoCost), 0));
        }
    }
}

simulated function CheckDelayedStartFire()
{
    local bool bNotifyServer;

    if(WeldTarget != none)
    {
        if(PendingFire(0))
        {
            BeginFire(0);
            bNotifyServer = true;            
        }
        else
        {
            if(PendingFire(1))
            {
                BeginFire(1);
                bNotifyServer = true;
            }
        }
        if(bNotifyServer && Role < ROLE_Authority)
        {
            ServerSetWeldTarget(WeldTarget, true);
        }
    }
}

simulated function bool TickWeldTarget()
{
    local KFDoorActor PreviousTarget;

    if((WorldInfo.TimeSeconds - LastTraceHitTime) < 0.2)
    {
        return false;
    }
    PreviousTarget = WeldTarget;
    WeldTarget = TraceDoorActors();
    if(PreviousTarget != WeldTarget)
    {
        return PlayReadyTransition(PreviousTarget);
    }
    return false;
}

simulated function KFDoorActor TraceDoorActors()
{
    local KFDoorActor door;
    local Vector HitLoc, HitNorm, StartTrace, EndTrace, AdjustedAim;

    StartTrace = Instigator.GetWeaponStartTraceLocation();
    AdjustedAim = vector(GetAdjustedAim(StartTrace));
    EndTrace = StartTrace + (AdjustedAim * WeldingRange);
    if(WeldTarget != none)
    {
        EndTrace += (AdjustedAim * ExtraWeldingRange);
    }
    foreach GetTraceOwner().TraceActors(Class'KFDoorActor', door, HitLoc, HitNorm, StartTrace, EndTrace)
    {
        if(!door.bIsDestroyed)
        {
            LastTraceHitTime = WorldInfo.TimeSeconds;            
            return door;
        }        
    }    
    return none;
}

private reliable server final function ServerSetWeldTarget(KFDoorActor NewTarget, bool bDelayedStart)
{
    WeldTarget = NewTarget;
    if(bDelayedStart)
    {
        CheckDelayedStartFire();
    }
}

simulated function bool PlayReadyTransition(KFDoorActor PreviousTarget)
{
    local name AnimName;
    local float Duration;

    if(WeldTarget != none)
    {
        AnimName = WeldOpenAnim;
        if(PreviousTarget == none)
        {
            Duration = MySkelMesh.GetAnimLength(AnimName);
            SetTimer(FMax(Duration - 0.2, 0.01), false, 'CheckDelayedStartFire');
        }        
    }
    else
    {
        if(PreviousTarget != none)
        {
            AnimName = WeldCloseAnim;
        }
    }
    if(AnimName != 'None')
    {
        PlayAnimation(AnimName);
        return true;
    }
    return false;
}

simulated function bool TickAutoUnequip()
{
    local KFDoorTrigger Trigger;
    local KFInventoryManager KFIM;

    foreach Instigator.TouchingActors(Class'KFDoorTrigger', Trigger)
    {        
        return false;        
    }    
    KFIM = KFInventoryManager(Instigator.InvManager);
    if(KFIM != none)
    {
        KFIM.SwitchToLastWeapon();
        return true;
    }
    return false;
}

auto state Inactive
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        WeldTarget = none;
    }
    stop;    
}

simulated state Active
{
    simulated event BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
    }

    simulated event Tick(float DeltaTime)
    {
        global.Tick(DeltaTime);
        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            TickWeldTarget();
            UpdateScreenUI();
            if(bAutoUnequip)
            {
                TickAutoUnequip();
            }
        }
    }

    simulated event OnAnimEnd(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
    {
        local bool bPlayingAnim;

        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            bPlayingAnim = TickWeldTarget();
            if(!bPlayingAnim)
            {
                PlayIdleAnim();
            }
        }
    }

    simulated function PlayIdleAnim()
    {
        local int IdleIndex;

        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            if(WeldTarget != none)
            {
                PlayAnimation(IdleWeldAnim, 0, true, 0.2);                
            }
            else
            {
                IdleIndex = Rand(IdleAnims.Length);
                PlayAnimation(IdleAnims[IdleIndex], 0, true, 0.2);
            }
        }
    }
    stop;    
}

simulated state WeaponWelding extends WeaponFiring
{
    simulated function byte GetWeaponStateId()
    {
        return 30;
    }

    simulated function BeginState(name PrevStateName)
    {
        super.BeginState(PrevStateName);
        NotifyBeginState();
    }

    simulated function EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        NotifyEndState();
    }
    stop;    
}

defaultproperties
{
    bAutoUnequip=true
    WeldingRange=100
    FastenRate=68
    UnfastenRate=-110
    ExtraWeldingRange=10
    AmmoCost=7
    AmmoRechargeRate=0.08
    IdleWeldAnim=Idle_Weld
    WeldOpenAnim=Weld_On
    WeldCloseAnim=Weld_Off
    ScreenUIClass=Class'KFGame.KFGFxWorld_WelderScreen'
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_None
    MagazineCapacity=100
    bTargetAdhesionEnabled=false
    bInfiniteSpareAmmo=true
    bAllowClientAmmoTracking=false
    GroupPriority=5
    WeaponSelectTexture=Texture2D'ui_weaponselect_tex.UI_WeaponSelect_Welder'
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    FireTweenTime=0.2
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=20,Y=10,Z=-10)
    AttachmentArchetype=KFWeaponAttachment'WEP_Welder_ARCH.Welder_3P'
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_Welder.MeleeHelper'
    MuzzleFlashTemplate=KFMuzzleFlash'WEP_Welder_ARCH.Wep_Welder_MuzzleFlash'
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    bCanThrow=false
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        SkeletalMesh=SkeletalMesh'WEP_1P_Welder_MESH.Wep_1stP_Welder_Rig'
        AnimSets(0)=AnimSet'WEP_1P_Welder_ANIM.Wep_1st_Welder_Anim'
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Welder.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Welder"
    bDropOnDeath=false
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Welder.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Welder.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}