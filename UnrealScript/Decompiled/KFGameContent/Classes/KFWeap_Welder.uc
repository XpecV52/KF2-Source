/*******************************************************************************
 * KFWeap_Welder generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Welder extends KFWeapon
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

/** If set, automatically equip the previous weapon when leaving a door trigger */
var() bool bAutoUnequip;
/** Maximum range to find Door */
var() float WeldingRange;
/** How many points to add to a door's weld integrity per use (use rate determined by FireInterval) */
var() float FastenRate;
/** How many points to subtract from a door's weld integrity per use (use rate determined by FireInterval) */
var() float UnfastenRate;
/** Percent repaired per fire interval */
var() float RepairRate;
var const float ExtraWeldingRange;
/** How long (in seconds) it takes to recharge ammo by 1 unit */
var() float AmmoRechargeRate;
var name IdleWeldAnim;
var name WeldOpenAnim;
var name WeldCloseAnim;
var KFWeldableComponent WeldTarget;
var float LastTraceHitTime;
var class<KFGFxWorld_WelderScreen> ScreenUIClass;
var KFGFxWorld_WelderScreen ScreenUI;

simulated event PreBeginPlay()
{
    local KFGameEngine KFGEngine;

    super.PreBeginPlay();
    KFGEngine = KFGameEngine(Class'KFGameEngine'.static.GetEngine());
    if(KFGEngine != none)
    {
        SetShownInInventory(KFGEngine.bShowWelderInInv);
    }
}

simulated function SetShownInInventory(bool bValue)
{
    InventoryGroup = ((bValue) ? 3 : 4);
    bAutoUnequip = !bValue;
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super.AttachWeaponTo(MeshCpnt, SocketName);
    if((Instigator != none) && Instigator.IsLocallyControlled())
    {
        if(ScreenUI == none)
        {
            ScreenUI = new (self) ScreenUIClass;
            ScreenUI.Init();
            ScreenUI.Start(true);
        }
        if(ScreenUI != none)
        {
            ScreenUI.SetPause(false);
            ScreenUI.SetCharge(AmmoCount[0]);
            ScreenUI.SetIntegrity(255);
        }
    }
}

simulated function DetachWeapon()
{
    super.DetachWeapon();
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && ScreenUI != none)
    {
        ScreenUI.SetPause();
    }
}

simulated event Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    UpdateScreenUI();
}

simulated event Destroyed()
{
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && ScreenUI != none)
    {
        ScreenUI.Close();
    }
    super(Weapon).Destroyed();
}

simulated function UpdateScreenUI()
{
    local float WeldPercentageFloat;
    local byte WeldPercentage;

    if(((Instigator != none) && Instigator.IsLocallyControlled()) && Instigator.Weapon == self)
    {
        if(ScreenUI != none)
        {
            if(ScreenUI.CurrentCharge != AmmoCount[0])
            {
                ScreenUI.SetCharge(AmmoCount[0]);
            }
            if(WeldTarget != none)
            {
                WeldPercentageFloat = WeldTarget.GetWeldPct();
                if((WeldPercentageFloat < 1) && WeldPercentageFloat > 0)
                {
                    WeldPercentageFloat = 1;                    
                }
                else
                {
                    if((WeldPercentageFloat > 99) && WeldPercentageFloat < 100)
                    {
                        WeldPercentageFloat = 99;
                    }
                }
                WeldPercentage = byte(WeldPercentageFloat);
                if(WeldPercentage != ScreenUI.IntegrityPercentage)
                {
                    ScreenUI.SetIntegrity(WeldPercentage);
                }                
            }
            else
            {
                if(ScreenUI.IntegrityPercentage != 255)
                {
                    ScreenUI.SetIntegrity(255);
                }
            }
        }
    }
}

simulated function bool HasAnyAmmo()
{
    return true;
}

simulated function bool HasAmmo(byte FireModeNum, optional int Amount)
{
    if((FireModeNum == 0) || FireModeNum == 1)
    {
        if(AmmoCount[0] >= AmmoCost[FireModeNum])
        {
            return (WeldTarget != none) && CanWeldTarget(FireModeNum);
        }
        return false;
    }
    return super.HasAmmo(FireModeNum, Amount);
}

simulated function bool ShouldAutoReload(byte FireModeNum)
{
    return false;
}

simulated function SetIronSights(bool bNewIronSights)
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    if(bNewIronSights)
    {
        StartFire(1);        
    }
    else
    {
        StopFire(1);
    }
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 0) || FireModeNum == 1)
    {
        if(Role < ROLE_Authority)
        {
            ServerSetWeldTarget(WeldTarget, false);
        }
    }
    super.StartFire(FireModeNum);
}

simulated function CustomFire()
{
    local float CurrentFastenRate, CurrentUnfastenRate;

    WeldTarget = TraceWeldables();
    if((Role == ROLE_Authority) && WeldTarget != none)
    {
        CurrentFastenRate = FastenRate;
        CurrentUnfastenRate = UnfastenRate;
        GetPerk().ModifyWeldingRate(CurrentFastenRate, CurrentUnfastenRate);
        SetTimer(AmmoRechargeRate, true, 'RechargeAmmo');
        if(WeldTarget.bIsDestroyed && !WeldTarget.Owner.IsA('KFRepairableActor'))
        {
            WeldTarget.Repair(RepairRate, KFPawn(Instigator));            
        }
        else
        {
            if(CurrentFireMode == 0)
            {
                WeldTarget.Weld(int(CurrentFastenRate), KFPawn(Instigator));                
            }
            else
            {
                WeldTarget.Weld(int(CurrentUnfastenRate), KFPawn(Instigator));
            }
        }
    }
    if(Instigator.IsLocallyControlled())
    {
        if((WeldTarget == none) || !CanWeldTarget())
        {
            StopFire(CurrentFireMode);
        }
    }
}

simulated function bool CanWeldTarget(optional int FireModeNum)
{
    local KFPerk WelderPerk;

    FireModeNum = CurrentFireMode;
    WelderPerk = GetPerk();
    if((FireModeNum == 0) && !WeldTarget.CanBeWelded())
    {
        if((WelderPerk != none) && WelderPerk.CanExplosiveWeld())
        {
            return WeldTarget.CanBeDemoWelded();
        }
        return false;        
    }
    else
    {
        if((FireModeNum == 1) && !WeldTarget.CanBeUnwelded())
        {
            return false;
        }
    }
    return true;
}

function RechargeAmmo()
{
    if(AmmoCount[0] < MagazineCapacity[0])
    {
        ++ AmmoCount[0];
        if(AmmoCount[0] == AmmoCost[0])
        {
            Refire();
            if(!Instigator.IsLocallyControlled())
            {
                ClientRefire();
            }
        }        
    }
    else
    {
        ClearTimer('RechargeAmmo');
    }
}

simulated function Refire()
{
    local byte I;

    I = 0;
    J0x0C:

    if(I <= 1)
    {
        if(PendingFire(I))
        {
            SendToFiringState(I);
            goto J0x59;
        }
        ++ I;
        goto J0x0C;
    }
    J0x59:

}

reliable client simulated function ClientRefire()
{
    Refire();
}

simulated function CheckDelayedStartFire()
{
    local bool bNotifyServer;

    if(WeldTarget != none)
    {
        if(PendingFire(0))
        {
            BeginFire(0);
            bNotifyServer = true;            
        }
        else
        {
            if(PendingFire(1))
            {
                BeginFire(1);
                bNotifyServer = true;
            }
        }
        if(bNotifyServer && Role < ROLE_Authority)
        {
            ServerSetWeldTarget(WeldTarget, true);
        }
    }
}

simulated function bool TickWeldTarget()
{
    local KFWeldableComponent PreviousTarget;

    if((WorldInfo.TimeSeconds - LastTraceHitTime) < 0.2)
    {
        return false;
    }
    PreviousTarget = WeldTarget;
    WeldTarget = TraceWeldables();
    if(PreviousTarget != WeldTarget)
    {
        return PlayReadyTransition(PreviousTarget);
    }
    return false;
}

simulated function KFWeldableComponent TraceWeldables()
{
    local KFWeldableComponent WeldableComponent;
    local Vector HitLoc, HitNorm, StartTrace, EndTrace, AdjustedAim;

    local bool bIsRepairableActor;
    local KFDoorActor WeldableDoor;

    StartTrace = Instigator.GetWeaponStartTraceLocation();
    AdjustedAim = vector(GetAdjustedAim(StartTrace));
    EndTrace = StartTrace + (AdjustedAim * WeldingRange);
    if(WeldTarget != none)
    {
        EndTrace += (AdjustedAim * ExtraWeldingRange);
    }
    foreach GetTraceOwner().TraceActors(Class'KFWeldableComponent', WeldableComponent, HitLoc, HitNorm, EndTrace, StartTrace)
    {
        if(WeldableComponent.Owner == none)
        {
            continue;            
        }
        if(Trace(HitLoc, HitNorm, EndTrace, StartTrace, true) != WeldableComponent.Owner)
        {
            continue;            
        }
        bIsRepairableActor = WeldableComponent.Owner.IsA('KFRepairableActor');
        if(!bIsRepairableActor && WeldableComponent.bIsDestroyed)
        {
            continue;            
        }
        if(bIsRepairableActor && !WeldableComponent.CanBeWelded())
        {
            continue;            
        }
        LastTraceHitTime = WorldInfo.TimeSeconds;        
        return WeldableComponent;        
    }    
    WeldableDoor = FindRepairableDoor();
    return ((WeldableDoor != none) ? WeldableDoor.WeldableComponent : none);
}

simulated function KFDoorActor FindRepairableDoor()
{
    local KFDoorTrigger DoorTrigger;
    local KFInterface_Usable UsableTrigger;
    local float FacingDot;
    local Vector Dir2d;
    local KFPlayerController KFPC;

    if(Instigator.IsLocallyControlled())
    {
        KFPC = KFPlayerController(Instigator.Controller);
        if(KFPC.myGfxHUD.CurrentInteractionIndex != 7)
        {
            return none;
        }
    }
    UsableTrigger = Class'KFPlayerController'.static.GetCurrentUsableActor(Instigator);
    DoorTrigger = KFDoorTrigger(bool(UsableTrigger));
    if(((DoorTrigger != none) && DoorTrigger.DoorActor != none) && DoorTrigger.DoorActor.bIsDestroyed)
    {
        Dir2d = Normal2D(DoorTrigger.DoorActor.Location - Instigator.Location);
        FacingDot = vector(Instigator.Rotation) Dot Dir2d;
        if(FacingDot > 0.87)
        {
            return DoorTrigger.DoorActor;
        }
    }
    return none;
}

private reliable server final function ServerSetWeldTarget(KFWeldableComponent NewTarget, bool bDelayedStart)
{
    WeldTarget = NewTarget;
    if(bDelayedStart)
    {
        CheckDelayedStartFire();
    }
}

simulated function bool PlayReadyTransition(KFWeldableComponent PreviousTarget)
{
    local name AnimName;
    local float Duration;

    if(WeldTarget != none)
    {
        AnimName = WeldOpenAnim;
        if(PreviousTarget == none)
        {
            Duration = MySkelMesh.GetAnimLength(AnimName);
            SetTimer(FMax(Duration - 0.2, 0.01), false, 'CheckDelayedStartFire');
        }        
    }
    else
    {
        if(PreviousTarget != none)
        {
            AnimName = WeldCloseAnim;
        }
    }
    if(AnimName != 'None')
    {
        PlayAnimation(AnimName);
        return true;
    }
    return false;
}

simulated function bool TickAutoUnequip()
{
    local Trigger_PawnsOnly Trigger;
    local KFInventoryManager KFIM;

    foreach Instigator.TouchingActors(Class'Trigger_PawnsOnly', Trigger)
    {
        if((Trigger.IsA('KFDoorTrigger') || Trigger.IsA('KFRepairableActorTrigger')) || Trigger.IsA('KFWeldableTrigger'))
        {            
            return false;
        }        
    }    
    KFIM = KFInventoryManager(Instigator.InvManager);
    if(KFIM != none)
    {
        KFIM.SwitchToLastWeapon();
        return true;
    }
    return false;
}

auto state Inactive
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        WeldTarget = none;
    }
    stop;    
}

simulated state Active
{
    simulated event Tick(float DeltaTime)
    {
        global.Tick(DeltaTime);
        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            TickWeldTarget();
            UpdateScreenUI();
            if(bAutoUnequip)
            {
                TickAutoUnequip();
            }
        }
    }

    simulated event OnAnimEnd(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
    {
        local bool bPlayingAnim;

        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            bPlayingAnim = TickWeldTarget();
            if(!bPlayingAnim)
            {
                PlayIdleAnim();
            }
        }
    }

    simulated function PlayIdleAnim()
    {
        local int IdleIndex;

        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            if(WeldTarget != none)
            {
                PlayAnimation(IdleWeldAnim, 0, true, 0.2);                
            }
            else
            {
                IdleIndex = Rand(IdleAnims.Length);
                PlayAnimation(IdleAnims[IdleIndex], 0, true, 0.2);
            }
        }
    }
    stop;    
}

simulated state WeaponWelding extends WeaponFiring
{
    simulated function byte GetWeaponStateId()
    {
        return 31;
    }

    simulated function BeginState(name PrevStateName)
    {
        super.BeginState(PrevStateName);
        NotifyBeginState();
    }

    simulated function EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        NotifyEndState();
    }
    stop;    
}

simulated state WeaponSprinting
{
    simulated event Tick(float DeltaTime)
    {
        global.Tick(DeltaTime);
        if((Instigator != none) && Instigator.IsLocallyControlled())
        {
            if(bAutoUnequip)
            {
                TickAutoUnequip();
            }
        }
    }
    stop;    
}

defaultproperties
{
    bAutoUnequip=true
    WeldingRange=150
    FastenRate=68
    UnfastenRate=-110
    RepairRate=0.03
    ExtraWeldingRange=10
    AmmoRechargeRate=0.08
    IdleWeldAnim=Idle_Weld
    WeldOpenAnim=Weld_On
    WeldCloseAnim=Weld_Off
    ScreenUIClass=Class'KFGame.KFGFxWorld_WelderScreen'
    PackageKey="Welder"
    FirstPersonMeshName="WEP_1P_Welder_MESH.Wep_1stP_Welder_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    AttachmentArchetypeName="WEP_Welder_ARCH.Welder_3P"
    MuzzleFlashTemplateName="WEP_Welder_ARCH.Wep_Welder_MuzzleFlash"
    bTargetAdhesionEnabled=false
    bInfiniteSpareAmmo=true
    bAllowClientAmmoTracking=false
    bStorePreviouslyEquipped=false
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_None
    MagazineCapacity=100
    GroupPriority=5
    WeaponSelectTexture=Texture2D'ui_weaponselect_tex.UI_WeaponSelect_Welder'
    AmmoCost=/* Array type was not detected. */
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    FireTweenTime=0.2
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=20,Y=10,Z=-10)
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_Welder.MeleeHelper'
    AssociatedPerkClasses=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    bCanThrow=false
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Welder.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Welder"
    bDropOnDeath=false
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Welder.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Welder.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}