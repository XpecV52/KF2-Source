/*******************************************************************************
 * AICommand_Patriarch_MinigunBarrage generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AICommand_Patriarch_MinigunBarrage extends AICommand_SpecialMove within KFAIController_ZedPatriarch;

var bool bIsFanFire;
var bool bBeganFire;

static function bool MinigunBarrage(KFAIController_ZedPatriarch AI)
{
    local AICommand_Patriarch_MinigunBarrage Cmd;

    if(AI != none)
    {
        Cmd = new (AI) default.Class;
        if(Cmd != none)
        {
            AI.PushCommand(Cmd);
            return true;
        }
    }
    return false;
}

function Pushed()
{
    super.Pushed();
    Outer.StopAllLatentMovement();
    Outer.AIZeroMovementVariables();
    if(Outer.Enemy != none)
    {
        Outer.Focus = Outer.Enemy;
    }
    Outer.AIActionStatus = "Starting Minigun Barrage AICommand";
    if(Outer.Focus != none)
    {
        Outer.SetDesiredRotation(rotator(Outer.Focus.Location - Outer.Pawn.Location));
    }
    Outer.DisableMeleeRangeEventProbing();
    Outer.bCanEvaluateAttacks = false;
    bBeganFire = false;
}

function Popped()
{
    Outer.AIActionStatus = "Finished Minigun Barrage AICommand";
    super.Popped();
}

function KFGame.KFPawn.ESpecialMove GetSpecialMove()
{
    return 0;
}

state Command_SpecialMove
{
    function bool IsSpecialMoveComplete()
    {
        if(((!Outer.bPreparingMove || Outer.MyKFPawn == none) || Outer.MyKFPawn.SpecialMove == 0) || Outer.MyKFPawn.SpecialMove != GetSpecialMove())
        {
            return true;
        }
        return false;
    }

    function byte GetSpecialMoveFlags(KFGame.KFPawn.ESpecialMove InSpecialMove)
    {
        local int I, NumNearbyEnemies;
        local KFPawn KFP;
        local Vector Projection;

        bIsFanFire = false;
        if(Outer.RecentlySeenEnemyList.Length > 1)
        {
            I = 0;
            J0x3C:

            if(I < Outer.RecentlySeenEnemyList.Length)
            {
                KFP = Outer.RecentlySeenEnemyList[I].TrackedEnemy;
                if((KFP == none) || !KFP.IsAliveAndWell())
                {                    
                }
                else
                {
                    Projection = KFP.Location - Outer.MyPatPawn.Location;
                    if(((Abs(Outer.MyPatPawn.Location.Z - KFP.Location.Z) > Outer.MyPatPawn.GetCollisionHeight()) || VSizeSq(Projection) > Outer.MaxFanFireRangeSQ) || (vector(Outer.MyPatPawn.Rotation) Dot Normal(Projection)) < 0.5)
                    {                        
                    }
                    else
                    {
                        ++ NumNearbyEnemies;
                        if(NumNearbyEnemies >= 2)
                        {
                            bIsFanFire = true;
                            goto J0x2B0;
                        }
                    }
                }
                ++ I;
                goto J0x3C;
            }
        }
        J0x2B0:

        if((Outer.MyPatPawn != none) && Outer.MyPatPawn.CanDoSpecialMove(InSpecialMove))
        {
            return Class'KFSM_Patriarch_MinigunBarrage'.static.PackSMFlags(bIsFanFire);
        }
        return 255;
    }

    function KFGame.KFPawn.ESpecialMove GetSpecialMove()
    {
        return 20;
    }
    stop;    
}

defaultproperties
{
    bShouldCheckSpecialMove=true
    TimeOutDelaySeconds=25
    bIgnoreNotifies=true
}