/*******************************************************************************
 * KFSM_PlayerHusk_FireBallAttack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_PlayerHusk_FireBallAttack extends KFSM_PlaySingleAnim;

var KFPawn_ZedHusk_Versus MyHuskPawn;
var float HoldStartTime;
var bool bReadyToFire;
var name WindUpAnimName;
var name FireHeldAnimName;
var ParticleSystem LoopingMuzzleEffect;
var export editinline ParticleSystemComponent MuzzlePSC;
var name MuzzleFXSocketName;

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    MyHuskPawn = KFPawn_ZedHusk_Versus(KFPOwner);
    HoldStartTime = MyHuskPawn.WorldInfo.TimeSeconds;
    bReadyToFire = false;
    if(MyHuskPawn.WorldInfo.MyEmitterPool != none)
    {
        MuzzlePSC = MyHuskPawn.WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(LoopingMuzzleEffect, MyHuskPawn.Mesh, MuzzleFXSocketName, true);
    }
    PlayWindUpAnimation();
}

function PlayAnimation();

function PlayWindUpAnimation()
{
    bUseRootMotion = false;
    PlaySpecialMoveAnim(WindUpAnimName, AnimStance, BlendInTime, BlendOutTime, 1);
}

function PlayFireHeldAnimation()
{
    bReadyToFire = true;
    PlaySpecialMoveAnim(FireHeldAnimName, AnimStance, BlendInTime, BlendOutTime, 1, true);
    if(MyHuskPawn != none)
    {
        MyHuskPawn.SetFireLightEnabled(true);
    }
}

function PlayFireAnimation()
{
    bReadyToFire = false;
    bPendingStopFire = false;
    PlaySpecialMoveAnim(AnimName, AnimStance, BlendInTime, BlendOutTime, 1, false);
}

function AnimEndNotify(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
    switch(SeqNode.AnimSeqName)
    {
        case WindUpAnimName:
            if(bPendingStopFire)
            {
                PlayFireAnimation();                
            }
            else
            {
                PlayFireHeldAnimation();
            }
            break;
        case AnimName:
            KFPOwner.EndSpecialMove();
            break;
        default:
            break;
    }
}

simulated function Tick(float DeltaTime)
{
    local float Strength;
    local Vector2D StrengthRange;

    super(KFSpecialMove).Tick(DeltaTime);
    if(MuzzlePSC != none)
    {
        StrengthRange = MyHuskPawn.GetFireballStrengthRange();
        Strength = FClamp((MyHuskPawn.WorldInfo.TimeSeconds - HoldStartTime) * MyHuskPawn.GetFireballStrengthPerSecond(), StrengthRange.X, StrengthRange.Y);
        MuzzlePSC.SetFloatParameter('FX_Size', 1 * (Strength / StrengthRange.Y));
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    if((MuzzlePSC != none) && MuzzlePSC.bIsActive)
    {
        MuzzlePSC.DeactivateSystem();
    }
    super.SpecialMoveEnded(PrevMove, NextMove);
}

function SpecialMoveFlagsUpdated()
{
    if(KFPOwner.SpecialMoveFlags == 254)
    {
        bPendingStopFire = true;
        if(bReadyToFire)
        {
            PlayFireAnimation();
        }        
    }
    else
    {
        if(KFPOwner.SpecialMoveFlags == 253)
        {
            bPendingStopFire = false;            
        }
        else
        {
            super(GameSpecialMove).SpecialMoveFlagsUpdated();
        }
    }
}

function SpecialMoveButtonRetriggered()
{
    KFPOwner.DoSpecialMove(KFPOwner.SpecialMove, true,, 253);
    if((KFPOwner.Role < ROLE_Authority) && KFPOwner.IsLocallyControlled())
    {
        KFPOwner.ServerDoSpecialMove(KFPOwner.SpecialMove, true,, 253);
    }
}

function SpecialMoveButtonReleased()
{
    KFPOwner.DoSpecialMove(KFPOwner.SpecialMove, true,, 254);
    if((KFPOwner.Role < ROLE_Authority) && KFPOwner.IsLocallyControlled())
    {
        KFPOwner.ServerDoSpecialMove(KFPOwner.SpecialMove, true,, 254);
    }
}

defaultproperties
{
    WindUpAnimName=Player_Shoot_Start
    FireHeldAnimName=Player_Shoot_Loop
    LoopingMuzzleEffect=ParticleSystem'ZED_Husk_EMIT.FX_Husk_muzzleflash_Loop_01'
    MuzzleFXSocketName=EMPDisruptSocket
    AnimName=Player_Shoot_End
    bCanBeInterrupted=true
    bUseCustomThirdPersonViewOffset=true
    bDisableMovement=true
    bDisableSteering=false
    bDisableTurnInPlace=true
    CustomThirdPersonViewOffset=(OffsetHigh=(X=-135,Y=75,Z=40),OffsetMid=(X=-120,Y=60,Z=0),OffsetLow=(X=-180,Y=75,Z=50))
    ViewOffsetInterpTime=0.3
    CustomCameraFOV=60
    CameraFOVTransitionTime=0.4
    CustomTurnInPlaceAnimRate=2
    Handle=KFSM_PlayerHusk_FireBallAttack
}