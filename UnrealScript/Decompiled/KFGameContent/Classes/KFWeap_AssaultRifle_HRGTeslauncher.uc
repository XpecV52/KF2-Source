/*******************************************************************************
 * KFWeap_AssaultRifle_HRGTeslauncher generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_AssaultRifle_HRGTeslauncher extends KFWeap_AssaultRifle_M16M203
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var class<KFGFxWorld_MedicOptics> OpticsUIClass;
var KFGFxWorld_MedicOptics OpticsUI;
var byte StoredPrimaryAmmo;
var byte StoredSecondaryAmmo;

simulated event Tick(float DeltaTime)
{
    if((Instigator != none) && Instigator.Weapon == self)
    {
        UpdateOpticsUI(true);
    }
    super(KFWeapon).Tick(DeltaTime);
}

reliable client simulated function ClientWeaponSet(bool bOptionalSet, optional bool bDoNotActivate)
{
    local KFInventoryManager KFIM;

    super(KFWeapon).ClientWeaponSet(bOptionalSet, bDoNotActivate);
    if(OpticsUI == none)
    {
        KFIM = KFInventoryManager(InvManager);
        if(KFIM != none)
        {
            OpticsUI = KFGFxWorld_MedicOptics(KFIM.GetOpticsUIMovie(OpticsUIClass));
        }
    }
}

function ItemRemovedFromInvManager()
{
    local KFInventoryManager KFIM;
    local KFWeap_AssaultRifle_HRGTeslauncher KFW;

    super(KFWeapon).ItemRemovedFromInvManager();
    if(OpticsUI != none)
    {
        KFIM = KFInventoryManager(InvManager);
        if(KFIM != none)
        {
            foreach KFIM.InventoryActors(Class'KFWeap_AssaultRifle_HRGTeslauncher', KFW)
            {
                if((KFW != self) && KFW.OpticsUI.Class == OpticsUI.Class)
                {                    
                    return;
                }                
            }            
            KFIM.RemoveOpticsUIMovie(OpticsUI.Class);
            OpticsUI.Close();
            OpticsUI = none;
        }
    }
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super(KFWeapon).AttachWeaponTo(MeshCpnt, SocketName);
    if(OpticsUI != none)
    {
        OpticsUI.SetPause(false);
        UpdateOpticsUI(true);
        WarnInternal(("AMMOCOST " $ string(AmmoCost[1])) $ "");
        OpticsUI.SetShotPercentCost(float(AmmoCost[1]));
    }
}

simulated function DetachWeapon()
{
    local Pawn OwnerPawn;

    super(KFWeapon).DetachWeapon();
    OwnerPawn = Pawn(Owner);
    if((OwnerPawn != none) && OwnerPawn.Weapon == self)
    {
        if(OpticsUI != none)
        {
            OpticsUI.SetPause();
        }
    }
}

simulated function UpdateOpticsUI(optional bool bForceUpdate)
{
    if((OpticsUI != none) && OpticsUI.OpticsContainer != none)
    {
        if((AmmoCount[0] != StoredPrimaryAmmo) || bForceUpdate)
        {
            StoredPrimaryAmmo = byte(AmmoCount[0]);
            OpticsUI.SetPrimaryAmmo(StoredPrimaryAmmo);
        }
        if((AmmoCount[1] != StoredSecondaryAmmo) || bForceUpdate)
        {
            StoredSecondaryAmmo = byte(AmmoCount[1]);
            OpticsUI.SetHealerCharge(byte(StoredSecondaryAmmo * 100));
        }
        if(OpticsUI.MinPercentPerShot != float(AmmoCost[1]))
        {
            OpticsUI.SetShotPercentCost(float(AmmoCost[1]));
        }
    }
}

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    return 2;
}

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetAltTraderFilter()
{
    return 4;
}

simulated function bool CanLockOnTo(Actor TA)
{
    return false;
}

simulated state FiringSecondaryState
{
    simulated event BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        NotifyBeginState();
    }

    simulated function EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        NotifyEndState();
    }

    simulated event Vector GetMuzzleLoc()
    {
        local Vector MuzzleLocation;

        FireOffset = SecondaryFireOffset;
        MuzzleLocation = global.GetMuzzleLoc();
        FireOffset = default.FireOffset;
        return MuzzleLocation;
    }

    simulated function name GetWeaponFireAnim(byte FireModeNum)
    {
        return ((bUsingSights) ? 'Shoot_Secondary_Iron' : 'Shoot_Secondary');
    }
    stop;    
}

defaultproperties
{
    OpticsUIClass=Class'KFGame.KFGFxWorld_MedicOptics'
    PackageKey="HRG_Teslauncher"
    FirstPersonMeshName="WEP_1P_HRG_Teslauncher_MESH.WEP_1stP_HRG_Teslauncher_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_HRG_Teslauncher_MESH.Wep_3rdP_Medic_GrenadeLauncher_Pickup"
    AttachmentArchetypeName="WEP_HRG_Teslauncher_ARCH.Wep_HRG_Teslauncher_3P"
    MuzzleFlashTemplateName="WEP_HRG_Teslauncher_ARCH.Wep_HRG_Teslauncher_MuzzleFlash"
    InventorySize=7
    PenetrationPower=/* Array type was not detected. */
    GroupPriority=100
    WeaponSelectTexture=Texture2D'WEP_UI_HRG_Teslauncher_TEX.UI_WeaponSelect_HRG_Teslauncher'
    SpareAmmoCapacity[0]=240
    SpareAmmoCapacity[1]=7
    InitialSpareMags[0]=2
    InitialSpareMags[1]=1
    bLoopingFireSnd=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_AssaultRifle_HRGTeslauncher.MeleeHelper'
    maxRecoilPitch=150
    minRecoilPitch=125
    maxRecoilYaw=125
    minRecoilYaw=-125
    RecoilRate=0.11
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_AssaultRifle_HRGTeslauncher.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Teslauncher"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_AssaultRifle_HRGTeslauncher.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_AssaultRifle_HRGTeslauncher.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}