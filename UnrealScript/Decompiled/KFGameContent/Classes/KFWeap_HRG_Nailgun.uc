/*******************************************************************************
 * KFWeap_HRG_Nailgun generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_HRG_Nailgun extends KFWeap_Shotgun_Nailgun
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var(Animations) const editconst name AltFireLoopAnim;
var(Animations) const editconst name AltFireLoopSightedAnim;
var(Animations) const editconst name AltFireLoopStartAnim;
var(Animations) const editconst name AltFireLoopStartSightedAnim;
var(Animations) const editconst name AltFireLoopEndAnim;
var(Animations) const editconst name AltFireLoopEndSightedAnim;

simulated function name GetLoopingFireAnim(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        if(bUsingSights)
        {
            return AltFireLoopSightedAnim;
        }
        return AltFireLoopAnim;
    }
    return super(KFWeapon).GetLoopingFireAnim(FireModeNum);
}

simulated function name GetLoopStartFireAnim(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        if(bUsingSights)
        {
            return AltFireLoopStartSightedAnim;
        }
        return AltFireLoopStartAnim;
    }
    return super(KFWeapon).GetLoopStartFireAnim(FireModeNum);
}

simulated function name GetLoopEndFireAnim(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        if(bUsingSights)
        {
            return AltFireLoopEndSightedAnim;            
        }
        else
        {
            return AltFireLoopEndAnim;
        }
    }
    return super(KFWeapon).GetLoopEndFireAnim(FireModeNum);
}

simulated function ConsumeAmmo(byte FireModeNum)
{
    local KFPerk InstigatorPerk;

    InstigatorPerk = GetPerk();
    if((InstigatorPerk != none) && InstigatorPerk.GetIsUberAmmoActive(self))
    {
        return;
    }
    super.ConsumeAmmo(FireModeNum);
}

simulated state WeaponAltFiringAuto extends WeaponFiring
{
    simulated function ModifyRecoil(out float CurrentRecoilModifier)
    {
        super(KFWeapon).ModifyRecoil(CurrentRecoilModifier);
        CurrentRecoilModifier *= AltFireRecoilModifier;
    }

    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if((RecoilRate > float(0)) && RecoilBlendOutRatio > float(0))
        {
            RecoilYawBlendOutRate = int(((float(maxRecoilYaw) * AltFireRecoilModifier) / RecoilRate) * RecoilBlendOutRatio);
            RecoilPitchBlendOutRate = int(((float(maxRecoilPitch) * AltFireRecoilModifier) / RecoilRate) * RecoilBlendOutRatio);
        }
    }
    stop;    
}

defaultproperties
{
    AltFireLoopAnim=HRG_Alt_ShootLoop
    AltFireLoopSightedAnim=HRG_Alt_ShootLoop_Iron
    AltFireLoopStartAnim=HRG_Alt_ShootLoop_Start
    AltFireLoopStartSightedAnim=HRG_Alt_ShootLoop_Iron_Start
    AltFireLoopEndAnim=HRG_Alt_ShootLoop_End
    AltFireLoopEndSightedAnim=HRG_Alt_ShootLoop_Iron_End
    AltFireRecoilModifier=2.5
    PackageKey="HRG_Nailgun_PDW"
    FirstPersonMeshName="WEP_1P_HRG_Nailgun_PDW_MESH.Wep_1stP_HRG_Nailgun_PDW_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_HRG_Nailgun_PDW_MESH.Wep_HRG_Nailgun_PDW_Pickup"
    AttachmentArchetypeName="WEP_HRG_Nailgun_PDW_ARCH.Wep_HRG_Nailgun_PDW_3P"
    MuzzleFlashTemplateName="WEP_HRG_Nailgun_PDW_ARCH.Wep_HRG_Nailgun_PDW_MuzzleFlash"
    FireModeIconPaths=/* Array type was not detected. */
    GroupPriority=75
    WeaponSelectTexture=Texture2D'WEP_UI_HRG_Nailgun_PDW_TEX.UI_WeaponSelect_HRG_Nailgun_PDW'
    SpareAmmoCapacity=336
    InitialSpareMags=2
    bLoopingFireAnim=/* Array type was not detected. */
    FireLoopAnim=HRG_ShootLoop
    FireLoopSightedAnim=HRG_ShootLoop_Iron
    FireLoopStartAnim=HRG_ShootLoop_Start
    FireLoopStartSightedAnim=HRG_ShootLoop_Iron_Start
    FireLoopEndAnim=HRG_ShootLoop_End
    FireLoopEndSightedAnim=HRG_ShootLoop_Iron_End
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_HRG_Nailgun.MeleeHelper'
    NumPellets=/* Array type was not detected. */
    maxRecoilPitch=100
    minRecoilPitch=85
    maxRecoilYaw=60
    minRecoilYaw=-60
    RecoilRate=0.045
    RecoilMinPitchLimit=65035
    RecoilISMaxYawLimit=100
    RecoilISMinYawLimit=65435
    RecoilISMaxPitchLimit=375
    RecoilISMinPitchLimit=65460
    JoggingRecoilModifier=1.2
    WalkingRecoilModifier=1.1
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_HRG_Nailgun.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Nailgun"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_Nailgun.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_Nailgun.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}