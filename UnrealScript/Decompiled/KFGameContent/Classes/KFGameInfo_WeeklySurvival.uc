/*******************************************************************************
 * KFGameInfo_WeeklySurvival generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameInfo_WeeklySurvival extends KFGameInfo_Survival
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var int CurrentFrameBooms;
var int ActiveEventIdx;

static event class<GameInfo> SetGameType(string MapName, string Options, string Portal)
{
    local KFGameEngine KGE;

    KGE = KFGameEngine(Class'Engine'.static.GetEngine());
    if(KGE != none)
    {
        if(KGE.GetWeeklyEventIndex() >= 0)
        {
            return super(KFGameInfo).SetGameType(MapName, Options, Portal);
        }
    }
    return Class'KFGameInfo_Survival';
}

static function bool GametypeChecksDifficulty()
{
    return false;
}

static function bool GametypeChecksWaveLength()
{
    return false;
}

event InitGame(string Options, out string ErrorMessage)
{
    super(KFGameInfo).InitGame(Options, ErrorMessage);
    SetPickupItemList();
    SetZedTimeOverrides();
    SetSpawnPointOverrides();
    OutbreakEvent.SetWorldInfoOverrides();
}

event PreBeginPlay()
{
    super.PreBeginPlay();
    OutbreakEvent.UpdateGRI();
    if((Role == ROLE_Authority) && MyKFGRI != none)
    {
        MyKFGRI.NotifyWeeklyEventIndex(ActiveEventIdx);
        if(OutbreakEvent.ActiveEvent.bUnlimitedWeaponPickups)
        {
            MyKFGRI.NotifyBrokenTrader();
        }
    }
}

event PostBeginPlay()
{
    super.PostBeginPlay();
    if(OutbreakEvent.ActiveEvent.TimeBetweenWaves >= 0)
    {
        TimeBetweenWaves = int(OutbreakEvent.ActiveEvent.TimeBetweenWaves);
    }
}

function CreateOutbreakEvent()
{
    local KFGameEngine KGE;

    super(KFGameInfo).CreateOutbreakEvent();
    KGE = KFGameEngine(Class'Engine'.static.GetEngine());
    if(KGE != none)
    {
        ActiveEventIdx = KGE.GetWeeklyEventIndex() % OutbreakEvent.SetEvents.Length;
    }
    ActiveEventIdx = OutbreakEvent.SetActiveEvent(ActiveEventIdx);
}

function bool UsesModifiedDifficulty()
{
    return true;
}

function SetModifiedGameDifficulty()
{
    super(KFGameInfo).SetModifiedGameDifficulty();
    if(OutbreakEvent == none)
    {
        CreateOutbreakEvent();
    }
    MinGameDifficulty = OutbreakEvent.ActiveEvent.EventDifficulty;
    MaxGameDifficulty = OutbreakEvent.ActiveEvent.EventDifficulty;
    GameDifficulty = float(Clamp(int(GameDifficulty), MinGameDifficulty, MaxGameDifficulty));
}

function bool UsesModifiedLength()
{
    return true;
}

function SetModifiedGameLength()
{
    GameLength = OutbreakEvent.ActiveEvent.GameLength;
}

function SetPickupItemList()
{
    local STraderItem TraderItem;
    local KFPickupFactory_Item ItemFactory;
    local int Idx;

    if(MyKFGRI.IsGunGameMode())
    {
        foreach AllActors(Class'KFPickupFactory_Item', ItemFactory)
        {
            Idx = ItemFactory.ItemPickups.Length - 1;
            J0x67:

            if(Idx >= 0)
            {
                if(ItemFactory.ItemPickups[Idx].ItemClass.Name != 'KFInventory_Armor')
                {
                    ItemFactory.ItemPickups.Remove(Idx, 1;
                }
                -- Idx;
                goto J0x67;
            }            
        }        
        return;
    }
    if(OutbreakEvent.ActiveEvent.TraderWeaponList != none)
    {
        foreach AllActors(Class'KFPickupFactory_Item', ItemFactory)
        {
            if(OutbreakEvent.ActiveEvent.OverrideItemPickupModifier == float(0))
            {
                ItemFactory.ShutDown();
                ItemFactory.ItemPickups.Remove(0, ItemFactory.ItemPickups.Length;
                continue;                
            }
            foreach OutbreakEvent.ActiveEvent.TraderWeaponList.SaleItems(TraderItem,)
            {
                Idx = ItemFactory.ItemPickups.Length - 1;
                J0x27C:

                if(Idx >= 0)
                {
                    if(ItemFactory.ItemPickups[Idx].ItemClass.Name != TraderItem.ClassName)
                    {
                        ItemFactory.ItemPickups.Remove(Idx, 1;
                    }
                    -- Idx;
                    goto J0x27C;
                }                
            }                        
        }        
    }
}

function SetZedTimeOverrides()
{
    if(ZedTimeSlomoScale != OutbreakEvent.ActiveEvent.OverrideZedTimeSlomoScale)
    {
        ZedTimeSlomoScale = OutbreakEvent.ActiveEvent.OverrideZedTimeSlomoScale;
    }
}

function SetSpawnPointOverrides()
{
    local KFSpawnVolume KFSV;

    foreach WorldInfo.AllActors(Class'KFSpawnVolume', KFSV)
    {
        if(OutbreakEvent.ActiveEvent.OverrideSpawnDerateTime >= 0)
        {
            KFSV.SpawnDerateTime = OutbreakEvent.ActiveEvent.OverrideSpawnDerateTime;
        }
        if(OutbreakEvent.ActiveEvent.OverrideTeleportDerateTime >= 0)
        {
            KFSV.TeleportDerateTime = OutbreakEvent.ActiveEvent.OverrideTeleportDerateTime;
        }        
    }    
}

function SetPermanentZedTime()
{
    local KFPlayerController KFPC;

    if(OutbreakEvent.ActiveEvent.bPermanentZedTime)
    {
        ZedTimeRemaining = 999999;
        bZedTimeBlendingOut = false;
        LastZedTimeEvent = WorldInfo.TimeSeconds;
        SetZedTimeDilation(ZedTimeSlomoScale);
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            if(KFPC != none)
            {
                KFPC.EnterZedTime();
            }            
        }        
    }
}

function ResetPermanentZed()
{
    local KFPlayerController KFPC;
    local KFPawn KFP;

    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        KFP = KFPawn(KFPC.Pawn);
        if((KFPC != none) && KFP != none)
        {
            KFP.bUnaffectedByZedTime = !KFPC.IsAffectedByZedTime();
            if(KFP.bUnaffectedByZedTime)
            {
                KFPC.StartPartialZedTimeSightCounter();
            }
            KFPC.ClientEnterZedTime(KFP.bUnaffectedByZedTime);
        }        
    }    
}

function float GetAdjustedAIDoshValue(class<KFPawn_Monster> MonsterClass)
{
    if(!OutbreakEvent.ActiveEvent.bBossRushMode)
    {
        return super(KFGameInfo).GetAdjustedAIDoshValue(MonsterClass) * OutbreakEvent.ActiveEvent.DoshOnKillGlobalModifier;        
    }
    else
    {
        if((WaveNum - 1) < OutbreakEvent.ActiveEvent.BossRushOverrideParams.PerWaves.Length)
        {
            return super(KFGameInfo).GetAdjustedAIDoshValue(MonsterClass) * OutbreakEvent.ActiveEvent.BossRushOverrideParams.PerWaves[WaveNum - 1].DoshOnKillGlobalModifier;
        }
    }
    return super(KFGameInfo).GetAdjustedAIDoshValue(MonsterClass);
}

protected function ScoreMonsterKill(Controller Killer, Controller Monster, KFPawn_Monster MonsterPawn)
{
    super(KFGameInfo).ScoreMonsterKill(Killer, Monster, MonsterPawn);
    if(OutbreakEvent.ActiveEvent.bHealAfterKill)
    {
        if((MonsterPawn != none) && MonsterPawn.DamageHistory.Length > 0)
        {
            if(OutbreakEvent.ActiveEvent.bHealWithHeadshot)
            {
                if(MonsterPawn.LastHitZoneIndex == 0)
                {
                    HealAfterKilling(MonsterPawn, Killer, false);
                }                
            }
            else
            {
                HealAfterKilling(MonsterPawn, Killer);
            }
        }
    }
    if(OutbreakEvent.ActiveEvent.bGunGameMode)
    {
        GunGameScoreAssistanceAfterKilling(MonsterPawn, Killer);
    }
}

function HealAfterKilling(KFPawn_Monster MonsterPawn, Controller Killer, optional bool bGivePowerUp)
{
    local int I, J;
    local KFPlayerController KFPC;
    local KFPlayerReplicationInfo DamagerKFPRI;
    local array<DamageInfo> DamageHistory;
    local array<KFPlayerController> Attackers;
    local KFPawn_Human PawnHuman;
    local KFGameInfo KFGI;

    bGivePowerUp = true;
    DamageHistory = MonsterPawn.DamageHistory;
    KFGI = KFGameInfo(WorldInfo.Game);
    I = 0;
    J0x69:

    if(I < DamageHistory.Length)
    {
        if((((DamageHistory[I].DamagerController != none) && DamageHistory[I].DamagerController.bIsPlayer) && DamageHistory[I].DamagerPRI.GetTeamNum() == 0) && DamageHistory[I].DamagerPRI != none)
        {
            DamagerKFPRI = KFPlayerReplicationInfo(DamageHistory[I].DamagerPRI);
            if(DamagerKFPRI != none)
            {
                KFPC = KFPlayerController(DamagerKFPRI.Owner);
                if(KFPC != none)
                {
                    if(Attackers.Find(KFPC < 0)
                    {
                        PawnHuman = KFPawn_Human(KFPC.Pawn);
                        Attackers.AddItem(KFPC;
                        if(((KFPC == Killer) && KFGI != none) && KFGI.OutbreakEvent.ActiveEvent.bGoompaJumpEnabled)
                        {
                            J = 0;
                            J0x2CF:

                            if(J < DamageHistory[I].DamageTypes.Length)
                            {
                                if(DamageHistory[I].DamageTypes[J] == Class'KFDT_GoompaStomp')
                                {
                                    PawnHuman.HealDamageForce(MonsterPawn.HealByAssistance, KFPC, Class'KFDT_Healing', false, false);
                                    return;
                                }
                                ++ J;
                                goto J0x2CF;
                            }
                            PawnHuman.HealDamageForce(MonsterPawn.HealByKill, KFPC, Class'KFDT_Healing', false, false);
                            return;
                        }
                        if(KFPC == Killer)
                        {
                            PawnHuman.HealDamageForce(MonsterPawn.HealByKill, KFPC, Class'KFDT_Healing', false, false);
                            if(bGivePowerUp && (KFPawn_ZedFleshpound(MonsterPawn) != none) || KFPawn_ZedScrake(MonsterPawn) != none)
                            {
                                KFPC.ReceivePowerUp(Class'KFPowerUp_HellishRage_NoCostHeal');
                            }                            
                        }
                        else
                        {
                            PawnHuman.HealDamageForce(MonsterPawn.HealByAssistance, KFPC, Class'KFDT_Healing', false, false);
                        }
                    }
                }
            }
        }
        ++ I;
        goto J0x69;
    }
}

function GunGameScoreAssistanceAfterKilling(KFPawn_Monster MonsterPawn, Controller Killer)
{
    local int I;
    local KFPlayerController_WeeklySurvival KFPC_WS;
    local array<DamageInfo> DamageHistory;
    local KFPlayerReplicationInfo DamagerKFPRI;
    local array<KFPlayerController> Attackers;

    DamageHistory = MonsterPawn.DamageHistory;
    I = 0;
    J0x33:

    if(I < DamageHistory.Length)
    {
        if((((DamageHistory[I].DamagerController != none) && DamageHistory[I].DamagerController.bIsPlayer) && DamageHistory[I].DamagerPRI.GetTeamNum() == 0) && DamageHistory[I].DamagerPRI != none)
        {
            DamagerKFPRI = KFPlayerReplicationInfo(DamageHistory[I].DamagerPRI);
            if(DamagerKFPRI != none)
            {
                KFPC_WS = KFPlayerController_WeeklySurvival(DamagerKFPRI.Owner);
                if((KFPC_WS != none) && KFPC_WS != Killer)
                {
                    if(Attackers.Find(KFPC_WS < 0)
                    {
                        Attackers.AddItem(KFPC_WS;
                        if(KFPC_WS.Pawn.Health > 0)
                        {
                            KFPC_WS.GunGameData.Score += MonsterPawn.GunGameAssistanceScore;
                            UpdateGunGameLevel(KFPC_WS);
                        }
                    }
                }
            }
        }
        ++ I;
        goto J0x33;
    }
}

function StartMatch()
{
    super.StartMatch();
    if(OutbreakEvent.ActiveEvent.bForceWWLMusic)
    {
        ForceWWLMusicTrack();
    }
}

function CreateDifficultyInfo(string Options)
{
    super(KFGameInfo).CreateDifficultyInfo(Options);
    if(OutbreakEvent.ActiveEvent.bUseOverrideItemRespawnTime)
    {
        DifficultyInfo.NumPlayers_WeaponPickupRespawnTime = OutbreakEvent.ActiveEvent.OverrideItemRespawnTime;
    }
    if(OutbreakEvent.ActiveEvent.bUseOverrideAmmoRespawnTime)
    {
        DifficultyInfo.NumPlayers_AmmoPickupRespawnTime = OutbreakEvent.ActiveEvent.OverrideAmmoRespawnTime;
    }
}

event PostLogin(PlayerController NewPlayer)
{
    local KFPlayerController_WeeklySurvival KFPC_WS;
    local KFPawn_Customization KFCustomizePawn;

    super(KFGameInfo).PostLogin(NewPlayer);
    KFPC_WS = KFPlayerController_WeeklySurvival(NewPlayer);
    if(KFPC_WS != none)
    {
        KFPC_WS.bUsingPermanentZedTime = OutbreakEvent.ActiveEvent.bPermanentZedTime;
        KFPC_WS.ZedTimeRadius = OutbreakEvent.ActiveEvent.ZedTimeRadius * OutbreakEvent.ActiveEvent.ZedTimeRadius;
        KFPC_WS.ZedTimeBossRadius = OutbreakEvent.ActiveEvent.ZedTimeBossRadius * OutbreakEvent.ActiveEvent.ZedTimeBossRadius;
        KFPC_WS.ZedTimeHeight = OutbreakEvent.ActiveEvent.ZedTimeHeight;
        KFPC_WS.ZedRecheckTime = OutbreakEvent.ActiveEvent.PermanentZedResetTime;
        KFCustomizePawn = KFPawn_Customization(KFPC_WS.Pawn);
        if(KFCustomizePawn != none)
        {
            KFCustomizePawn.IntendedHeadScale = OutbreakEvent.ActiveEvent.PlayerSpawnHeadScale;
            KFCustomizePawn.SetHeadScale(KFCustomizePawn.IntendedHeadScale, KFCustomizePawn.CurrentHeadScale);
        }
    }
    LoadGunGameWeapons(NewPlayer);
}

function SetBossIndex()
{
    local BossSpawnReplacement Replacement;
    local int ReplaceIdx, I;

    if(OutbreakEvent.ActiveEvent.bBossRushMode)
    {
        if(BossRushEnemies.Length == 0)
        {
            I = 0;
            J0x50:

            if(I < default.AIBossClassList.Length)
            {
                BossRushEnemies.AddItem(byte(I);
                ++ I;
                goto J0x50;
            }
        }
    }
    BossIndex = Rand(default.AIBossClassList.Length);
    foreach OutbreakEvent.ActiveEvent.BossSpawnReplacementList(Replacement,)
    {
        if(Replacement.SpawnEntry == BossIndex)
        {
            ReplaceIdx = AIBossClassList.Find(Replacement.NewClass;
            if(ReplaceIdx != -1)
            {
                BossIndex = ReplaceIdx;
                goto J0x16C;
            }
        }        
    }
    J0x16C:
    
    MyKFGRI.CacheSelectedBoss(BossIndex);
}

function Tick(float DeltaTime)
{
    CurrentFrameBooms = 0;
    super(KFGameInfo).Tick(DeltaTime);
}

function TickZedTime(float DeltaTime)
{
    super(KFGameInfo).TickZedTime(DeltaTime);
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime && IsWaveActive())
    {
        if((MyKFGRI.AIRemaining > OutbreakEvent.ActiveEvent.PermanentZedTimeCutoff) || WaveNum == WaveMax)
        {
            ZedTimeRemaining = 999999;            
        }
        else
        {
            if(ZedTimeRemaining > ZedTimeBlendOutTime)
            {
                ZedTimeRemaining = ZedTimeBlendOutTime;
                ClearZedTimePCTimers();
            }
        }
    }
}

function WaveEnded(KFGameInfo_Survival.EWaveEndCondition WinCondition)
{
    local KFPawn_Human Pawn;
    local bool bWasFirstTime;

    bWasFirstTime = bWaveStarted;
    super.WaveEnded(WinCondition);
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime && ZedTimeRemaining > ZedTimeBlendOutTime)
    {
        ClearZedTimePCTimers();
        ZedTimeRemaining = ZedTimeBlendOutTime;
    }
    if(OutbreakEvent.ActiveEvent.bHealPlayerAfterWave)
    {
        foreach WorldInfo.AllPawns(Class'KFPawn_Human', Pawn)
        {
            Pawn.Health = Pawn.HealthMax;            
        }        
    }
    if((WinCondition == 0) && bWasFirstTime)
    {
        GrantExtraDoshOnWaveWon();
    }
    DisableGlobalDamage();
}

function GrantExtraDoshOnWaveWon()
{
    local KFPlayerController KFPC;
    local int ExtraDosh;

    if(OutbreakEvent.ActiveEvent.bBossRushMode && (WaveNum - 1) < OutbreakEvent.ActiveEvent.BossRushOverrideParams.PerWaves.Length)
    {
        ExtraDosh = OutbreakEvent.ActiveEvent.BossRushOverrideParams.PerWaves[WaveNum - 1].ExtraDoshGrantedonWaveWon;
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo).AddDosh(ExtraDosh, true);            
        }        
    }
}

function ClearZedTimePCTimers()
{
    local KFPlayerController_WeeklySurvival KFPC;

    foreach AllActors(Class'KFPlayerController_WeeklySurvival', KFPC)
    {
        KFPC.ClearTimer('RecheckZedTime');        
    }    
}

function EndOfMatch(bool bVictory)
{
    local KFPlayerController KFPC;

    if(bVictory)
    {
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.CompletedWeeklySurvival();            
        }        
    }
    super.EndOfMatch(bVictory);
}

function StartWave()
{
    super.StartWave();
    if(!OutbreakEvent.ActiveEvent.bApplyGlobalDamageBossWave && WaveNum == WaveMax)
    {
        DisableGlobalDamage();        
    }
    else
    {
        if((OutbreakEvent.ActiveEvent.GlobalDamageTickRate > 0) && OutbreakEvent.ActiveEvent.GlobalDamageTickAmount > 0)
        {
            if(!IsTimerActive('EnableGlobalDamage', self))
            {
                SetTimer(OutbreakEvent.ActiveEvent.DamageDelayAfterWaveStarted, false, 'EnableGlobalDamage', self);
            }
            SetTimer(1, true, 'CheckForZedFrustrationMode', self);
        }
    }
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime)
    {
        if(WaveNum == WaveMax)
        {
            SetTimer(0.25, true, 'BossCameraZedTimeRecheck');            
        }
        else
        {
            SetPermanentZedTime();
        }
    }
    if((OutbreakEvent.ActiveEvent.AdditionalBossWaveInfo != none) && WaveNum == WaveMax)
    {
        SetTimer(OutbreakEvent.ActiveEvent.AdditionalBossWaveStartDelay, true, 'SpawnBossWave');
    }
    if(OutbreakEvent.ActiveEvent.bUnlimitedWeaponPickups)
    {
        OverridePickupList();
    }
}

function bool OverridePickupList()
{
    local KFPickupFactory PickupFactory;
    local KFPickupFactory_Item ItemFactory;
    local KFGameReplicationInfo_WeeklySurvival KFGRI_WS;

    KFGRI_WS = KFGameReplicationInfo_WeeklySurvival(MyKFGRI);
    if(KFGRI_WS == none)
    {
        return false;
    }
    foreach ItemPickups(PickupFactory,)
    {
        ItemFactory = KFPickupFactory_Item(PickupFactory);
        if(ItemFactory == none)
        {
            continue;            
        }
        else
        {
            KFGRI_WS.OverrideWeaponPickups(ItemFactory);
            ItemFactory.OverridePickup();            
        }
    }    
    return true;
}

function EnableGlobalDamage()
{
    MyKFGRI.SetGlobalDamage(true);
    SetTimer(OutbreakEvent.ActiveEvent.GlobalDamageTickRate, true, 'ApplyGlobalDamage', OutbreakEvent);
}

function DisableGlobalDamage()
{
    MyKFGRI.SetGlobalDamage(false);
    if(IsTimerActive('ApplyGlobalDamage', OutbreakEvent))
    {
        ClearTimer('ApplyGlobalDamage', OutbreakEvent);
    }
    if(IsTimerActive('EnableGlobalDamage', self))
    {
        ClearTimer('EnableGlobalDamage', self);
    }
}

function CheckForZedFrustrationMode()
{
    if(IsTimerActive('ApplyGlobalDamage', OutbreakEvent))
    {
        if((Class'KFAIController'.default.FrustrationThreshold > 0) && MyKFGRI.AIRemaining <= Class'KFAIController'.default.FrustrationThreshold)
        {
            DisableGlobalDamage();
            ClearTimer('CheckForZedFrustrationMode', self);
        }
    }
}

function BossCameraZedTimeRecheck()
{
    local KFPawn_Monster KFM;
    local KFInterface_MonsterBoss BossRef;

    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFM)
    {
        if(KFM.IsABoss())
        {
            BossRef = KFInterface_MonsterBoss(KFM);
            if(NotEqual_InterfaceInterface(BossRef, (none)))
            {
                if(BossRef.UseAnimatedBossCamera())
                {                    
                    return;
                    continue;
                }
                ClearTimer('BossCameraZedTimeRecheck');
                SetPermanentZedTime();
            }
        }        
    }    
}

function SpawnBossWave()
{
    SetTimer(OutbreakEvent.ActiveEvent.AdditionalBossWaveFrequency, false, 'SpawnBossWave');
    SpawnManager.SummonBossMinions(OutbreakEvent.ActiveEvent.AdditionalBossWaveInfo.Squads, GetAdditionalBossSpawns());
    if(!OutbreakEvent.ActiveEvent.bContinuousAdditionalBossWave)
    {
        SetTimer(2, false, 'PauseAdditionalBossWaves');
    }
}

function PauseAdditionalBossWaves()
{
    SpawnManager.StopSummoningBossMinions();
}

function byte GetAdditionalBossSpawns()
{
    return byte(Lerp(OutbreakEvent.ActiveEvent.AdditionalBossSpawnCount.X, OutbreakEvent.ActiveEvent.AdditionalBossSpawnCount.Y, FMax(float(NumPlayers), 1) / float(MaxPlayers)));
}

function OpenTrader()
{
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime && ZedTimeRemaining > ZedTimeBlendOutTime)
    {
        ClearZedTimePCTimers();
        ZedTimeRemaining = ZedTimeBlendOutTime;
    }
    if(!OutbreakEvent.ActiveEvent.bDisableTraders)
    {
        super.OpenTrader();        
    }
    else
    {
        if(KFGameReplicationInfo(GameReplicationInfo) != none)
        {
            KFGameReplicationInfo(GameReplicationInfo).StartScavengeTime(TimeBetweenWaves);
        }
    }
}

function SetupNextTrader()
{
    if(!OutbreakEvent.ActiveEvent.bDisableTraders)
    {
        super.SetupNextTrader();
    }
}

function InitAllPickups()
{
    super(KFGameInfo).InitAllPickups();
    if((OutbreakEvent.ActiveEvent.OverrideItemPickupModifier >= 0) || OutbreakEvent.ActiveEvent.OverrideAmmoPickupModifier >= 0)
    {
        NumWeaponPickups = byte(float(ItemPickups.Length) * ((OutbreakEvent.ActiveEvent.OverrideItemPickupModifier >= 0) ? OutbreakEvent.ActiveEvent.OverrideItemPickupModifier : DifficultyInfo.GetItemPickupModifier()));
        NumAmmoPickups = byte(float(AmmoPickups.Length) * ((OutbreakEvent.ActiveEvent.OverrideAmmoPickupModifier >= 0) ? OutbreakEvent.ActiveEvent.OverrideAmmoPickupModifier : DifficultyInfo.GetAmmoPickupModifier()));
        if(BaseMutator != none)
        {
            BaseMutator.ModifyPickupFactories();
        }
        ResetAllPickups();
    }
}

function ResetAllPickups()
{
    local bool bCallReset;

    bCallReset = false;
    switch(OutbreakEvent.ActiveEvent.PickupResetTime)
    {
        case 0:
            bCallReset = IsWaveActive();
            break;
        case 1:
            bCallReset = !IsWaveActive();
            break;
        case 2:
            bCallReset = true;
            break;
        case 3:
            bCallReset = false;
            break;
        default:
            break;
    }
    if(bCallReset)
    {
        super.ResetAllPickups();
    }
}

function ResetPickups(array<KFPickupFactory> PickupList, int NumPickups)
{
    if((OutbreakEvent.ActiveEvent.WaveAmmoPickupModifiers.Length >= WaveMax) && KFPickupFactory_Ammo(PickupList[0]) != none)
    {
        NumPickups *= OutbreakEvent.ActiveEvent.WaveAmmoPickupModifiers[WaveNum];
        super(KFGameInfo).ResetPickups(PickupList, NumPickups);        
    }
    else
    {
        if((OutbreakEvent.ActiveEvent.WaveItemPickupModifiers.Length >= WaveMax) && KFPickupFactory_Item(PickupList[0]) != none)
        {
            NumPickups *= OutbreakEvent.ActiveEvent.WaveItemPickupModifiers[WaveNum];
            if(OutbreakEvent.ActiveEvent.OverrideItemPickupModifier == float(0))
            {
                NumPickups = 0;
            }
            super(KFGameInfo).ResetPickups(PickupList, NumPickups);            
        }
        else
        {
            super.ResetPickups(PickupList, NumPickups);
        }
    }
}

function class<KFPawn_Monster> GetAISpawnType(KFGame.KFAISpawnManager.EAIType AIType)
{
    if((WaveNum < WaveMax) || OutbreakEvent.ActiveEvent.bAllowSpawnReplacementDuringBossWave)
    {
        return OutbreakEvent.GetAISpawnOverrirde(AIType);
    }
    return AIClassList[AIType];
}

function bool AllowPrimaryWeapon(string ClassPath)
{
    local STraderItem Item;

    if(OutbreakEvent.ActiveEvent.SpawnWeaponList != none)
    {
        foreach OutbreakEvent.ActiveEvent.SpawnWeaponList.SaleItems(Item,)
        {
            if(name(Item.WeaponDef.default.WeaponClassPath) == name(ClassPath))
            {                
                return true;
            }            
        }        
        return false;
    }
    return true;
}

function bool AllowSecondaryWeapon(string ClassPath)
{
    local STraderItem Item;

    if((OutbreakEvent.ActiveEvent.SpawnWeaponList != none) && OutbreakEvent.ActiveEvent.bSpawnWeaponListAffectsSecondaryWeapons)
    {
        foreach OutbreakEvent.ActiveEvent.SpawnWeaponList.SaleItems(Item,)
        {
            if(name(Item.WeaponDef.default.WeaponClassPath) == name(ClassPath))
            {                
                return true;
            }            
        }        
        return false;
    }
    return true;
}

function int AdjustStartingGrenadeCount(int CurrentCount)
{
    if(OutbreakEvent.ActiveEvent.bDisableGrenades)
    {
        return 0;
    }
    return CurrentCount;
}

function bool IsPerkAllowed(class<KFPerk> PerkClass)
{
    local int Index;

    if(OutbreakEvent.ActiveEvent.PerksAvailableList.Length == 0)
    {
        return true;
    }
    Index = 0;
    J0x45:

    if(Index < OutbreakEvent.ActiveEvent.PerksAvailableList.Length)
    {
        if(OutbreakEvent.ActiveEvent.PerksAvailableList[Index] == PerkClass)
        {
            return true;
        }
        ++ Index;
        goto J0x45;
    }
    return false;
}

function LoadGunGameWeapons(Controller NewPlayer)
{
    local int I, RandomNumber;
    local KFPlayerController_WeeklySurvival KFPC_WS;
    local class<Inventory> InventoryClass;
    local Inventory Inv;
    local KFWeapon Weapon;

    if(OutbreakEvent.ActiveEvent.bGunGameMode && WorldInfo.IsConsoleBuild() == false)
    {
        KFPC_WS = KFPlayerController_WeeklySurvival(NewPlayer);
        if(KFPC_WS == none)
        {
            return;
        }
        I = 0;
        J0x95:

        if(I < OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameLevels.Length)
        {
            RandomNumber = Rand(OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameLevels[I].GrantedWeapons.Length);
            KFPC_WS.GunGameData.GunGamePreselectedWeapons.AddItem(byte(RandomNumber);
            InventoryClass = class<KFWeapon>(DynamicLoadObject(OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameLevels[I].GrantedWeapons[RandomNumber].default.WeaponClassPath, Class'Class'));
            Inv = KFPC_WS.Pawn.InvManager.CreateInventory(InventoryClass, true);
            if(Inv != none)
            {
                Weapon = KFWeapon(Inv);
                if(Weapon != none)
                {
                    Weapon.GunGameRemove();
                }
            }
            ++ I;
            goto J0x95;
        }
    }
}

function RestartPlayer(Controller NewPlayer)
{
    local KFPawn_Human KFPH;

    super.RestartPlayer(NewPlayer);
    KFPH = KFPawn_Human(NewPlayer.Pawn);
    OutbreakEvent.AdjustRestartedPlayer(KFPH);
}

function RestartGunGamePlayerWeapon(KFPlayerController_WeeklySurvival KFPC_WS, byte WaveToUse)
{
    local byte I;
    local int CurrentGunGameWaveLevel;

    super.RestartGunGamePlayerWeapon(KFPC_WS, WaveToUse);
    ResetGunGame(KFPC_WS);
    CurrentGunGameWaveLevel = -1;
    I = 0;
    J0x4A:

    if(I < OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameRespawnLevels.Length)
    {
        if(WaveToUse >= OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameRespawnLevels[I].Wave)
        {
            CurrentGunGameWaveLevel = OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameRespawnLevels[I].Level - 1;
        }
        ++ I;
        goto J0x4A;
    }
    if(CurrentGunGameWaveLevel >= 0)
    {
        KFPC_WS.GunGameData.Score = OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameLevels[CurrentGunGameWaveLevel].RequiredScore;
        UpdateGunGameLevel(KFPC_WS);
    }
}

function DoDeathExplosion(Pawn DeadPawn, KFGameExplosion ExplosionTemplate, class<KFPawn> ExplosionIgnoreClass)
{
    local KFExplosionActorReplicated ExploActor;

    if(CurrentFrameBooms < OutbreakEvent.ActiveEvent.MaxBoomsPerFrame)
    {
        ExploActor = Spawn(Class'KFExplosionActorReplicated', DeadPawn,, DeadPawn.Location);
        if(ExploActor != none)
        {
            ExploActor.InstigatorController = DeadPawn.Controller;
            ExploActor.Instigator = DeadPawn;
            ExploActor.Attachee = DeadPawn;
            ExplosionTemplate.ActorClassToIgnoreForDamage = ExplosionIgnoreClass;
            ExploActor.Explode(ExplosionTemplate, vect(0, 0, 1));
            ++ CurrentFrameBooms;
        }
    }
}

simulated function AddWeaponsFromSpawnList(KFPawn P)
{
    local STraderItem Item;

    if((OutbreakEvent.ActiveEvent.SpawnWeaponList != none) || OutbreakEvent.ActiveEvent.bAddSpawnListToLoadout)
    {
        foreach OutbreakEvent.ActiveEvent.SpawnWeaponList.SaleItems(Item,)
        {
            P.DefaultInventory.AddItem(class<Weapon>(DynamicLoadObject(Item.WeaponDef.default.WeaponClassPath, Class'Class'));            
        }        
    }
}

simulated function OverrideHumanDefaults(KFPawn_Human P)
{
    if(OutbreakEvent.ActiveEvent.JumpZ >= 0)
    {
        P.JumpZ = OutbreakEvent.ActiveEvent.JumpZ;
    }
}

simulated function ModifyDamageGiven(out int InDamage, optional Actor DamageCauser, optional KFPawn_Monster MyKFPM, optional KFPlayerController DamageInstigator, optional class<KFDamageType> DamageType, optional int HitZoneIdx)
{
    local KFPlayerController_WeeklySurvival KFPC;
    local int Streak;

    if(OutbreakEvent.ActiveEvent.bGoompaJumpEnabled)
    {
        KFPC = KFPlayerController_WeeklySurvival(DamageInstigator);
        if(KFPC != none)
        {
            Streak = ((KFPC.GoompaStreakBonus < KFPC.MaxGoompaStreak) ? KFPC.GoompaStreakBonus : KFPC.MaxGoompaStreak);
            InDamage *= (float(1) + (OutbreakEvent.ActiveEvent.GoompaStreakDamage * float(Streak)));
        }
    }
}

function ResetGunGame(KFPlayerController_WeeklySurvival KFPC_WS)
{
    KFPC_WS.GunGameData.Score = 0;
    KFPC_WS.GunGameData.Level = 0;
    KFPC_WS.UpdateGunGameWidget(0, OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameLevels[0].RequiredScore, 0, OutbreakEvent.ActiveEvent.GunGamePerksData.GunGameLevels.Length);
}

function NotifyKilled(Controller Killer, Controller Killed, Pawn KilledPawn, class<DamageType> DamageType)
{
    local KFPawn_Monster KFPM;
    local KFPlayerController_WeeklySurvival KFPC_WS;

    super(GameInfo).NotifyKilled(Killer, Killed, KilledPawn, DamageType);
    if(!OutbreakEvent.ActiveEvent.bGunGameMode)
    {
        return;
    }
    KFPM = KFPawn_Monster(KilledPawn);
    KFPC_WS = KFPlayerController_WeeklySurvival(Killer);
    if((KFPM != none) && KFPC_WS != none)
    {
        if(KFPC_WS.Pawn.Health > 0)
        {
            KFPC_WS.GunGameData.Score += KFPM.GunGameKilledScore;
            UpdateGunGameLevel(KFPC_WS);
        }        
    }
    else
    {
        KFPC_WS = KFPlayerController_WeeklySurvival(Killed);
        if(KFPC_WS != none)
        {
            ResetGunGame(KFPC_WS);
        }
    }
}

function GunGameLevelGrantWeapon(KFPlayerController_WeeklySurvival KFPC_WS, class<KFWeaponDefinition> ToGrantWeaponDefinition)
{
    local class<Inventory> InventoryClass;
    local Inventory Inv;
    local KFWeapon KFW;

    InventoryClass = class<KFWeapon>(DynamicLoadObject(ToGrantWeaponDefinition.default.WeaponClassPath, Class'Class'));
    Inv = KFPC_WS.Pawn.InvManager.CreateInventory(InventoryClass, true);
    if(Inv != none)
    {
        KFW = KFWeapon(Inv);
        if(KFW != none)
        {
            KFW.bDropOnDeath = false;
            KFW.bGivenAtStart = true;
            KFW = KFInventoryManager(KFPC_WS.Pawn.InvManager).CombineWeaponsOnPickup(KFW);
            KFW.NotifyPickedUp();
            KFW.AmmoCount[0] = KFW.MagazineCapacity[0];
            KFW.AddAmmo(KFW.GetMaxAmmoAmount(0));
            KFW.AmmoCount[1] = KFW.MagazineCapacity[1];
            KFW.AddSecondaryAmmo(KFW.GetMaxAmmoAmount(1));
            KFPC_WS.Pawn.InvManager.SetCurrentWeapon(KFW);
        }
    }
}

function UpdateGunGameLevel(KFPlayerController_WeeklySurvival KFPC_WS)
{
    local byte CurrentLevel, InitialLevel, RandomNumber;
    local class<KFWeaponDefinition> ToGrantWeaponDefinition;
    local GunGamePerkData PerkData;
    local KFWeapon CurrentWeapon;
    local bool found_base_weapon;

    if(!OutbreakEvent.ActiveEvent.bGunGameMode)
    {
        return;
    }
    PerkData = OutbreakEvent.ActiveEvent.GunGamePerksData;
    InitialLevel = KFPC_WS.GunGameData.Level;
    CurrentLevel = KFPC_WS.GunGameData.Level;
    J0xEA:

    if((CurrentLevel < PerkData.GunGameLevels.Length) && KFPC_WS.GunGameData.Score >= PerkData.GunGameLevels[CurrentLevel].RequiredScore)
    {
        ++ CurrentLevel;
        goto J0xEA;
    }
    if(CurrentLevel > (PerkData.GunGameLevels.Length - 1))
    {
        KFPC_WS.UpdateGunGameWidget(KFPC_WS.GunGameData.Score, -1, PerkData.GunGameLevels.Length, PerkData.GunGameLevels.Length);        
    }
    else
    {
        KFPC_WS.UpdateGunGameWidget(KFPC_WS.GunGameData.Score, PerkData.GunGameLevels[CurrentLevel].RequiredScore, CurrentLevel, PerkData.GunGameLevels.Length);
    }
    if(InitialLevel != CurrentLevel)
    {
        if(CurrentLevel > (PerkData.GunGameLevels.Length - 1))
        {
            if(bGunGamePlayerOnLastGun == false)
            {
                KFPC_WS.GunGameData.GiveWeaponMaster = true;
            }
            bGunGamePlayerOnLastGun = true;
            KFPC_WS.PlayGunGameMessage(true);            
        }
        else
        {
            KFPC_WS.PlayGunGameMessage(false);
        }
        KFPC_WS.GunGameData.Level = CurrentLevel;
        found_base_weapon = false;
        foreach KFPC_WS.Pawn.InvManager.InventoryActors(Class'KFWeapon', CurrentWeapon)
        {
            if(((!Class'KFPerk'.static.IsKnife(CurrentWeapon) && !Class'KFPerk_SWAT'.static.Is9mm(CurrentWeapon)) && !Class'KFPerk'.static.IsSyringe(CurrentWeapon)) && !Class'KFPerk'.static.IsWelder(CurrentWeapon))
            {
                CurrentWeapon.GunGameRemove();
            }
            if(Class'KFPerk_SWAT'.static.Is9mm(CurrentWeapon))
            {
                found_base_weapon = true;
            }            
        }        
        if((CurrentLevel > 1) && found_base_weapon == false)
        {
            ToGrantWeaponDefinition = PerkData.GunGameLevels[0].GrantedWeapons[0];
            GunGameLevelGrantWeapon(KFPC_WS, ToGrantWeaponDefinition);
        }
        if(WorldInfo.IsConsoleBuild())
        {
            RandomNumber = byte(Rand(PerkData.GunGameLevels[CurrentLevel - 1].GrantedWeapons.Length));            
        }
        else
        {
            RandomNumber = KFPC_WS.GunGameData.GunGamePreselectedWeapons[CurrentLevel - 1];
        }
        ToGrantWeaponDefinition = PerkData.GunGameLevels[CurrentLevel - 1].GrantedWeapons[RandomNumber];
        GunGameLevelGrantWeapon(KFPC_WS, ToGrantWeaponDefinition);
    }
}

state TraderOpen
{
    function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        ResetAllPickups();
    }
    stop;    
}

defaultproperties
{
    OutbreakEventClass=Class'KFOutbreakEvent_Weekly'
    GameName="Weekly Outbreak"
    PlayerControllerClass=Class'KFGame.KFPlayerController_WeeklySurvival'
    GameReplicationInfoClass=Class'KFGameReplicationInfo_WeeklySurvival'
}