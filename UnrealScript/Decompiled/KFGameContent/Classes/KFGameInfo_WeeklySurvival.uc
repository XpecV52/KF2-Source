/*******************************************************************************
 * KFGameInfo_WeeklySurvival generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameInfo_WeeklySurvival extends KFGameInfo_Survival
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var int CurrentFrameBooms;
var int ActiveEventIdx;

static event class<GameInfo> SetGameType(string MapName, string Options, string Portal)
{
    local KFGameEngine KGE;

    KGE = KFGameEngine(Class'Engine'.static.GetEngine());
    if(KGE != none)
    {
        if(KGE.GetWeeklyEventIndex() >= 0)
        {
            return super(KFGameInfo).SetGameType(MapName, Options, Portal);
        }
    }
    return Class'KFGameInfo_Survival';
}

static function bool GametypeChecksDifficulty()
{
    return false;
}

static function bool GametypeChecksWaveLength()
{
    return false;
}

event InitGame(string Options, out string ErrorMessage)
{
    super(KFGameInfo).InitGame(Options, ErrorMessage);
    SetPickupItemList();
    SetZedTimeOverrides();
    SetSpawnPointOverrides();
    OutbreakEvent.SetWorldInfoOverrides();
}

event PreBeginPlay()
{
    super.PreBeginPlay();
    OutbreakEvent.UpdateGRI();
}

function CreateOutbreakEvent()
{
    local KFGameEngine KGE;

    super(KFGameInfo).CreateOutbreakEvent();
    KGE = KFGameEngine(Class'Engine'.static.GetEngine());
    if(KGE != none)
    {
        ActiveEventIdx = KGE.GetWeeklyEventIndex() % OutbreakEvent.SetEvents.Length;
    }
    OutbreakEvent.SetActiveEvent(ActiveEventIdx);
}

function bool UsesModifiedDifficulty()
{
    return true;
}

function SetModifiedGameDifficulty()
{
    super(KFGameInfo).SetModifiedGameDifficulty();
    if(OutbreakEvent == none)
    {
        CreateOutbreakEvent();
    }
    MinGameDifficulty = OutbreakEvent.ActiveEvent.EventDifficulty;
    MaxGameDifficulty = OutbreakEvent.ActiveEvent.EventDifficulty;
    GameDifficulty = float(Clamp(int(GameDifficulty), MinGameDifficulty, MaxGameDifficulty));
}

function bool UsesModifiedLength()
{
    return true;
}

function SetModifiedGameLength()
{
    GameLength = OutbreakEvent.ActiveEvent.GameLength;
}

function SetPickupItemList()
{
    local STraderItem TraderItem;
    local KFPickupFactory_Item ItemFactory;
    local int Idx;

    if(OutbreakEvent.ActiveEvent.TraderWeaponList != none)
    {
        foreach AllActors(Class'KFPickupFactory_Item', ItemFactory)
        {
            foreach OutbreakEvent.ActiveEvent.TraderWeaponList.SaleItems(TraderItem,)
            {
                Idx = ItemFactory.ItemPickups.Length - 1;
                J0xD0:

                if(Idx >= 0)
                {
                    if(ItemFactory.ItemPickups[Idx].ItemClass.Name != TraderItem.ClassName)
                    {
                        ItemFactory.ItemPickups.Remove(Idx, 1;
                    }
                    -- Idx;
                    goto J0xD0;
                }                
            }                        
        }        
    }
}

function SetZedTimeOverrides()
{
    if(ZedTimeSlomoScale != OutbreakEvent.ActiveEvent.OverrideZedTimeSlomoScale)
    {
        ZedTimeSlomoScale = OutbreakEvent.ActiveEvent.OverrideZedTimeSlomoScale;
    }
}

function SetSpawnPointOverrides()
{
    local KFSpawnVolume KFSV;

    foreach WorldInfo.AllActors(Class'KFSpawnVolume', KFSV)
    {
        if(OutbreakEvent.ActiveEvent.OverrideSpawnDerateTime >= 0)
        {
            KFSV.SpawnDerateTime = OutbreakEvent.ActiveEvent.OverrideSpawnDerateTime;
        }
        if(OutbreakEvent.ActiveEvent.OverrideTeleportDerateTime >= 0)
        {
            KFSV.TeleportDerateTime = OutbreakEvent.ActiveEvent.OverrideTeleportDerateTime;
        }        
    }    
}

function SetPermanentZedTime()
{
    local KFPlayerController KFPC;

    if(OutbreakEvent.ActiveEvent.bPermanentZedTime)
    {
        ZedTimeRemaining = 999999;
        bZedTimeBlendingOut = false;
        LastZedTimeEvent = WorldInfo.TimeSeconds;
        SetZedTimeDilation(ZedTimeSlomoScale);
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            if(KFPC != none)
            {
                KFPC.EnterZedTime();
            }            
        }        
    }
}

function ResetPermanentZed()
{
    local KFPlayerController KFPC;
    local KFPawn KFP;

    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        KFP = KFPawn(KFPC.Pawn);
        if((KFPC != none) && KFP != none)
        {
            KFP.bUnaffectedByZedTime = !KFPC.IsAffectedByZedTime();
            if(KFP.bUnaffectedByZedTime)
            {
                KFPC.StartPartialZedTimeSightCounter();
            }
            KFPC.ClientEnterZedTime(KFP.bUnaffectedByZedTime);
        }        
    }    
}

function StartMatch()
{
    super.StartMatch();
    if((OutbreakEvent.ActiveEvent.GlobalDamageTickRate > 0) && OutbreakEvent.ActiveEvent.GlobalDamageTickAmount > 0)
    {
        SetTimer(OutbreakEvent.ActiveEvent.GlobalDamageTickRate, true, 'ApplyGlobalDamage', OutbreakEvent);
    }
}

function CreateDifficultyInfo(string Options)
{
    super(KFGameInfo).CreateDifficultyInfo(Options);
    if(OutbreakEvent.ActiveEvent.bUseOverrideItemRespawnTime)
    {
        DifficultyInfo.NumPlayers_WeaponPickupRespawnTime = OutbreakEvent.ActiveEvent.OverrideItemRespawnTime;
    }
    if(OutbreakEvent.ActiveEvent.bUseOverrideAmmoRespawnTime)
    {
        DifficultyInfo.NumPlayers_AmmoPickupRespawnTime = OutbreakEvent.ActiveEvent.OverrideAmmoRespawnTime;
    }
}

event PostLogin(PlayerController NewPlayer)
{
    local KFPlayerController_WeeklySurvival KFPC;
    local KFPawn_Customization KFCustomizePawn;

    super(KFGameInfo).PostLogin(NewPlayer);
    KFPC = KFPlayerController_WeeklySurvival(NewPlayer);
    if(KFPC != none)
    {
        KFPC.bUsingPermanentZedTime = OutbreakEvent.ActiveEvent.bPermanentZedTime;
        KFPC.ZedTimeRadius = OutbreakEvent.ActiveEvent.ZedTimeRadius * OutbreakEvent.ActiveEvent.ZedTimeRadius;
        KFPC.ZedTimeBossRadius = OutbreakEvent.ActiveEvent.ZedTimeBossRadius * OutbreakEvent.ActiveEvent.ZedTimeBossRadius;
        KFPC.ZedTimeHeight = OutbreakEvent.ActiveEvent.ZedTimeHeight;
        KFPC.ZedRecheckTime = OutbreakEvent.ActiveEvent.PermanentZedResetTime;
        KFCustomizePawn = KFPawn_Customization(KFPC.Pawn);
        if(KFCustomizePawn != none)
        {
            KFCustomizePawn.IntendedHeadScale = OutbreakEvent.ActiveEvent.PlayerSpawnHeadScale;
            KFCustomizePawn.SetHeadScale(KFCustomizePawn.IntendedHeadScale, KFCustomizePawn.CurrentHeadScale);
        }
    }
}

function SetBossIndex()
{
    local BossSpawnReplacement Replacement;
    local int ReplaceIdx;

    BossIndex = Rand(default.AIBossClassList.Length);
    foreach OutbreakEvent.ActiveEvent.BossSpawnReplacementList(Replacement,)
    {
        if(Replacement.SpawnEntry == BossIndex)
        {
            ReplaceIdx = AIBossClassList.Find(Replacement.NewClass;
            if(ReplaceIdx != -1)
            {
                BossIndex = ReplaceIdx;
                goto J0xDE;
            }
        }        
    }
    J0xDE:
    
    MyKFGRI.CacheSelectedBoss(BossIndex);
}

function Tick(float DeltaTime)
{
    CurrentFrameBooms = 0;
    super(KFGameInfo).Tick(DeltaTime);
}

function TickZedTime(float DeltaTime)
{
    super(KFGameInfo).TickZedTime(DeltaTime);
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime && IsWaveActive())
    {
        if((MyKFGRI.AIRemaining > OutbreakEvent.ActiveEvent.PermanentZedTimeCutoff) || WaveNum == WaveMax)
        {
            ZedTimeRemaining = 999999;            
        }
        else
        {
            if(ZedTimeRemaining > ZedTimeBlendOutTime)
            {
                ZedTimeRemaining = ZedTimeBlendOutTime;
                ClearZedTimePCTimers();
            }
        }
    }
}

function WaveEnded(KFGameInfo_Survival.EWaveEndCondition WinCondition)
{
    super.WaveEnded(WinCondition);
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime && ZedTimeRemaining > ZedTimeBlendOutTime)
    {
        ClearZedTimePCTimers();
        ZedTimeRemaining = ZedTimeBlendOutTime;
    }
}

function ClearZedTimePCTimers()
{
    local KFPlayerController_WeeklySurvival KFPC;

    foreach AllActors(Class'KFPlayerController_WeeklySurvival', KFPC)
    {
        KFPC.ClearTimer('RecheckZedTime');        
    }    
}

function EndOfMatch(bool bVictory)
{
    local KFPlayerController KFPC;

    super.EndOfMatch(bVictory);
    if(bVictory)
    {
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.CompletedWeeklySurvival();            
        }        
    }
}

function StartWave()
{
    super.StartWave();
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime)
    {
        if(WaveNum == WaveMax)
        {
            SetTimer(0.25, true, 'BossCameraZedTimeRecheck');            
        }
        else
        {
            SetPermanentZedTime();
        }
    }
    if((OutbreakEvent.ActiveEvent.AdditionalBossWaveInfo != none) && WaveNum == WaveMax)
    {
        SetTimer(OutbreakEvent.ActiveEvent.AdditionalBossWaveStartDelay, true, 'SpawnBossWave');
    }
}

function BossCameraZedTimeRecheck()
{
    local KFPawn_Monster KFM;
    local KFInterface_MonsterBoss BossRef;

    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFM)
    {
        if(KFM.IsABoss())
        {
            BossRef = KFInterface_MonsterBoss(KFM);
            if(NotEqual_InterfaceInterface(BossRef, (none)))
            {
                if(BossRef.UseAnimatedBossCamera())
                {                    
                    return;
                    continue;
                }
                ClearTimer('BossCameraZedTimeRecheck');
                SetPermanentZedTime();
            }
        }        
    }    
}

function SpawnBossWave()
{
    SetTimer(OutbreakEvent.ActiveEvent.AdditionalBossWaveFrequency, false, 'SpawnBossWave');
    SpawnManager.SummonBossMinions(OutbreakEvent.ActiveEvent.AdditionalBossWaveInfo.Squads, GetAdditionalBossSpawns());
    if(!OutbreakEvent.ActiveEvent.bContinuousAdditionalBossWave)
    {
        SetTimer(2, false, 'PauseAdditionalBossWaves');
    }
}

function PauseAdditionalBossWaves()
{
    SpawnManager.StopSummoningBossMinions();
}

function byte GetAdditionalBossSpawns()
{
    return byte(Lerp(OutbreakEvent.ActiveEvent.AdditionalBossSpawnCount.X, OutbreakEvent.ActiveEvent.AdditionalBossSpawnCount.Y, FMax(float(NumPlayers), 1) / float(MaxPlayers)));
}

function OpenTrader()
{
    if(OutbreakEvent.ActiveEvent.bPermanentZedTime && ZedTimeRemaining > ZedTimeBlendOutTime)
    {
        ClearZedTimePCTimers();
        ZedTimeRemaining = ZedTimeBlendOutTime;
    }
    if(!OutbreakEvent.ActiveEvent.bDisableTraders)
    {
        super.OpenTrader();        
    }
    else
    {
        if(KFGameReplicationInfo(GameReplicationInfo) != none)
        {
            KFGameReplicationInfo(GameReplicationInfo).StartScavengeTime(TimeBetweenWaves);
        }
    }
}

function SetupNextTrader()
{
    if(!OutbreakEvent.ActiveEvent.bDisableTraders)
    {
        super.SetupNextTrader();
    }
}

function InitAllPickups()
{
    super(KFGameInfo).InitAllPickups();
    if((OutbreakEvent.ActiveEvent.OverrideItemPickupModifier >= 0) || OutbreakEvent.ActiveEvent.OverrideAmmoPickupModifier >= 0)
    {
        NumWeaponPickups = byte(float(ItemPickups.Length) * ((OutbreakEvent.ActiveEvent.OverrideItemPickupModifier >= 0) ? OutbreakEvent.ActiveEvent.OverrideItemPickupModifier : DifficultyInfo.GetItemPickupModifier()));
        NumAmmoPickups = byte(float(AmmoPickups.Length) * ((OutbreakEvent.ActiveEvent.OverrideAmmoPickupModifier >= 0) ? OutbreakEvent.ActiveEvent.OverrideAmmoPickupModifier : DifficultyInfo.GetAmmoPickupModifier()));
        if(BaseMutator != none)
        {
            BaseMutator.ModifyPickupFactories();
        }
        ResetAllPickups();
    }
}

function ResetAllPickups()
{
    local bool bCallReset;

    bCallReset = false;
    switch(OutbreakEvent.ActiveEvent.PickupResetTime)
    {
        case 0:
            bCallReset = IsWaveActive();
            break;
        case 1:
            bCallReset = !IsWaveActive();
            break;
        case 2:
            bCallReset = true;
            break;
        case 3:
            bCallReset = false;
            break;
        default:
            break;
    }
    if(bCallReset)
    {
        super.ResetAllPickups();
    }
}

function ResetPickups(array<KFPickupFactory> PickupList, int NumPickups)
{
    if((OutbreakEvent.ActiveEvent.WaveAmmoPickupModifiers.Length >= WaveMax) && KFPickupFactory_Ammo(PickupList[0]) != none)
    {
        NumPickups *= OutbreakEvent.ActiveEvent.WaveAmmoPickupModifiers[WaveNum];
        super(KFGameInfo).ResetPickups(PickupList, NumPickups);        
    }
    else
    {
        if((OutbreakEvent.ActiveEvent.WaveItemPickupModifiers.Length >= WaveMax) && KFPickupFactory_Item(PickupList[0]) != none)
        {
            NumPickups *= OutbreakEvent.ActiveEvent.WaveItemPickupModifiers[WaveNum];
            super(KFGameInfo).ResetPickups(PickupList, NumPickups);            
        }
        else
        {
            super.ResetPickups(PickupList, NumPickups);
        }
    }
}

function class<KFPawn_Monster> GetAISpawnType(KFGame.KFAISpawnManager.EAIType AIType)
{
    if((WaveNum < WaveMax) || OutbreakEvent.ActiveEvent.bAllowSpawnReplacementDuringBossWave)
    {
        return OutbreakEvent.GetAISpawnOverrirde(AIType);
    }
    return AIClassList[AIType];
}

function bool AllowPrimaryWeapon(string ClassPath)
{
    local STraderItem Item;

    if(OutbreakEvent.ActiveEvent.SpawnWeaponList != none)
    {
        foreach OutbreakEvent.ActiveEvent.SpawnWeaponList.SaleItems(Item,)
        {
            if(Item.ClassName == name(ClassPath))
            {                
                return true;
            }            
        }        
        return false;
    }
    return true;
}

function int AdjustStartingGrenadeCount(int CurrentCount)
{
    if(OutbreakEvent.ActiveEvent.bDisableGrenades)
    {
        return 0;
    }
    return CurrentCount;
}

function RestartPlayer(Controller NewPlayer)
{
    local KFPawn_Human KFPH;

    super.RestartPlayer(NewPlayer);
    KFPH = KFPawn_Human(NewPlayer.Pawn);
    OutbreakEvent.AdjustRestartedPlayer(KFPH);
}

function DoDeathExplosion(Pawn DeadPawn, KFGameExplosion ExplosionTemplate, class<KFPawn> ExplosionIgnoreClass)
{
    local KFExplosionActorReplicated ExploActor;

    if(CurrentFrameBooms < OutbreakEvent.ActiveEvent.MaxBoomsPerFrame)
    {
        ExploActor = Spawn(Class'KFExplosionActorReplicated', DeadPawn,, DeadPawn.Location);
        if(ExploActor != none)
        {
            ExploActor.InstigatorController = DeadPawn.Controller;
            ExploActor.Instigator = DeadPawn;
            ExploActor.Attachee = DeadPawn;
            ExplosionTemplate.ActorClassToIgnoreForDamage = ExplosionIgnoreClass;
            ExploActor.Explode(ExplosionTemplate, vect(0, 0, 1));
            ++ CurrentFrameBooms;
        }
    }
}

state TraderOpen
{
    function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        ResetAllPickups();
    }
    stop;    
}

defaultproperties
{
    OutbreakEventClass=Class'KFOutbreakEvent_Weekly'
    GameName="Weekly Outbreak"
    PlayerControllerClass=Class'KFGame.KFPlayerController_WeeklySurvival'
    GameReplicationInfoClass=Class'KFGameReplicationInfo_WeeklySurvival'
}