/*******************************************************************************
 * KFMGA_Target generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMGA_Target extends Actor
    notplaceable
    hidecategories(Navigation)
    implements(KFInterface_MinigameTarget);

/** Visual component of the target */
var() export editinline StaticMeshComponent Mesh;
/** Collision cylinder */
var() export editinline CylinderComponent CollisionCylinder;
/** How many hits before the game is notified of "death" */
var() repnotify int NumHits;
var repnotify KFMG_TargetGame SpawnerOwner;
var repnotify int SpawnerOwnerIndex;
/** Whether or not to ignore radius damage sources (ex: grenades) */
var() bool bIgnoreRadiusDamage;
var repnotify bool bActiveTarget;
var array< class<DamageType> > AcceptedDamageTypes;
var name AttachBoneName;
/** ---------------------- Client FX */
var() ParticleSystem DeathVFXTemplate;
var() AkEvent DeathSFX;
var() export editinline AkComponent DeathSFXComponent;
var() AkEvent InvalidHitSFX;

replication
{
     if(bNetDirty)
        NumHits, SpawnerOwner, 
        SpawnerOwnerIndex, bActiveTarget;
}

simulated event ReplicatedEvent(name VarName)
{
    super.ReplicatedEvent(VarName);
    if((VarName == 'SpawnerOwner') || VarName == 'SpawnerOwnerIndex')
    {
        if((SpawnerOwner != none) && SpawnerOwnerIndex >= 0)
        {
            AddToOwnerArray();
        }        
    }
    else
    {
        if(VarName == 'bActiveTarget')
        {
            if(bActiveTarget)
            {
                SetActive();                
            }
            else
            {
                SetInactive();
            }            
        }
        else
        {
            if(VarName == 'NumHits')
            {
                if(NumHits == 0)
                {
                    PlayDeath();
                }
            }
        }
    }
}

simulated function AddToOwnerArray()
{
    if(SpawnerOwner.MinigameTargets.Find(self == -1)
    {
        SpawnerOwner.MinigameTargets[SpawnerOwnerIndex] = self;
        SpawnerOwner.UpdateBase(self);
    }
}

simulated function TakeRadiusDamage(Controller InstigatedBy, float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, Vector HurtOrigin, bool bFullDamage, Actor DamageCauser, optional float DamageFalloffExponent)
{
    DamageFalloffExponent = 1;
    if(!bIgnoreRadiusDamage || AcceptedDamageTypes.Find(DamageType != -1)
    {
        TakeDamage(int(BaseDamage), InstigatedBy, HurtOrigin, vect(0, 0, 0), DamageType,, DamageCauser);
    }
}

simulated event TakeDamage(int DamageAmount, Controller EventInstigator, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)
{
    local int I;

    if(!bActiveTarget)
    {
        return;
    }
    I = 0;
    J0x1E:

    if(I < AcceptedDamageTypes.Length)
    {
        if((DamageType == AcceptedDamageTypes[I]) || ClassIsChildOf(DamageType, AcceptedDamageTypes[I]))
        {
            ValidHit(EventInstigator, DamageCauser);
            return;
        }
        ++ I;
        goto J0x1E;
    }
    InvalidHit(EventInstigator, DamageCauser);
}

function ValidHit(Controller EventInstigator, Actor HitActor)
{
    local KFMG_TargetGame TargetGame;

    if(Role == ROLE_Authority)
    {
        -- NumHits;
        if(NumHits <= 0)
        {
            PlayDeath();
            SetInactive();
            TargetGame = KFMG_TargetGame(Owner);
            if(TargetGame != none)
            {
                TargetGame.TargetHit(self, EventInstigator);
            }
        }
    }
}

simulated function InvalidHit(Controller EventInstigator, Actor HitActor)
{
    if(DeathSFXComponent != none)
    {
        DeathSFXComponent.PlayEvent(InvalidHitSFX,, false, true);
    }
}

simulated event Reset()
{
    super.Reset();
    SetRelativeLocation(vect(0, 0, 0));
    NumHits = default.NumHits;
}

simulated event SetActive()
{
    bActiveTarget = true;
    SetHidden(false);
}

simulated event SetInactive()
{
    bActiveTarget = false;
    SetHidden(true);
}

simulated event Finalize();

simulated event PlayDeath()
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && !IsAlive())
    {
        if(DeathVFXTemplate != none)
        {
            WorldInfo.MyEmitterPool.SpawnEmitter(DeathVFXTemplate, Location);
        }
        if(DeathSFXComponent != none)
        {
            DeathSFXComponent.PlayEvent(DeathSFX,, false, true);
        }
    }
}

simulated function bool IsAlive()
{
    return NumHits > 0;
}

defaultproperties
{
    begin object name=Mesh0 class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFMGA_Target.Mesh0'
    Mesh=Mesh0
    begin object name=Cylinder0 class=CylinderComponent
        CollisionHeight=25
        CollisionRadius=25
        ReplacementPrimitive=none
        CollideActors=true
        BlockActors=true
    object end
    // Reference: CylinderComponent'Default__KFMGA_Target.Cylinder0'
    CollisionCylinder=Cylinder0
    NumHits=1
    SpawnerOwnerIndex=-1
    bIgnoreRadiusDamage=true
    AcceptedDamageTypes(0)=class'KFDT_Ballistic_9mm'
    DeathSFXComponent=AkComponent'Default__KFMGA_Target.DeathSFX0'
    begin object name=Cylinder0 class=CylinderComponent
        CollisionHeight=25
        CollisionRadius=25
        ReplacementPrimitive=none
        CollideActors=true
        BlockActors=true
    object end
    // Reference: CylinderComponent'Default__KFMGA_Target.Cylinder0'
    Components(0)=Cylinder0
    begin object name=Mesh0 class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFMGA_Target.Mesh0'
    Components(1)=Mesh0
    Components(2)=AkComponent'Default__KFMGA_Target.DeathSFX0'
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    CollisionType=ECollisionType.COLLIDE_TouchAll
    bAlwaysRelevant=true
    bCanBeDamaged=true
    bCollideActors=true
    bProjTarget=true
    NetPriority=2.5
    begin object name=Cylinder0 class=CylinderComponent
        CollisionHeight=25
        CollisionRadius=25
        ReplacementPrimitive=none
        CollideActors=true
        BlockActors=true
    object end
    // Reference: CylinderComponent'Default__KFMGA_Target.Cylinder0'
    CollisionComponent=Cylinder0
}