/*******************************************************************************
 * KFOutbreakEvent_Weekly generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFOutbreakEvent_Weekly extends KFOutbreakEvent within KFGameInfo;

function OnScoreKill(Pawn KilledPawn)
{
    local int WaveNum;

    if(!ActiveEvent.bBossRushMode)
    {
        AdjustScoreKill(KilledPawn, ActiveEvent.ZedsToAdjust);        
    }
    else
    {
        WaveNum = KFGameInfo_WeeklySurvival(Outer).WaveNum - 1;
        if(WaveNum < ActiveEvent.BossRushOverrideParams.PerWaves.Length)
        {
            AdjustScoreKill(KilledPawn, ActiveEvent.BossRushOverrideParams.PerWaves[WaveNum].ZedsToAdjust);
        }
    }
}

function AdjustScoreKill(Pawn KilledPawn, array<StatAdjustments> Adjustments)
{
    local StatAdjustments ToAdjust;

    foreach Adjustments(ToAdjust,)
    {
        if(ClassIsChildOf(KilledPawn.Class, ToAdjust.ClassToAdjust))
        {
            if(ToAdjust.bExplosiveDeath && ToAdjust.ExplosionTemplate != none)
            {
                if((KFPawn(KilledPawn) != none) && !KFPawn(KilledPawn).WeeklyShouldExplodeOnDeath())
                {                    
                    return;
                }
                KFGameInfo_WeeklySurvival(Outer).DoDeathExplosion(KilledPawn, ToAdjust.ExplosionTemplate, ToAdjust.ExplosionIgnoreClass);
            }
        }        
    }    
}

function AdjustScoreDamage(Controller InstigatedBy, Pawn DamagedPawn, class<DamageType> DamageType)
{
    super.AdjustScoreDamage(InstigatedBy, DamagedPawn, DamageType);
    if(ActiveEvent.bUseBeefcakeRules)
    {
        if(InstigatedBy != none)
        {
            AdjustForBeefcakeRules(InstigatedBy.Pawn);
        }
        if((DamagedPawn != none) && DamageType == Class'KFDT_Toxic_PlayerCrawlerSuicide')
        {
            AdjustForBeefcakeRules(DamagedPawn, 3);
        }
    }
}

static function int GetOutbreakId(int SetEventsIndex)
{
    if((SetEventsIndex < 0) || SetEventsIndex >= default.SetEvents.Length)
    {
        return -1;
    }
    return SetEventsIndex;
}

defaultproperties
{
    SetEvents=/* Array type was not detected. */
    TestEvents=/* Array type was not detected. */
}