/*******************************************************************************
 * KFObj_Wave_Defend generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFObj_Wave_Defend extends KFObj_Wave
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var float HaxorPower;
var float DfficultyModifier[3];
var float PlayerNumModifier;

function bool ObjectiveComplete()
{
    return RealObjectiveProgress >= float(100);
}

function UpdateObjective()
{
    local byte PrevObjProg;

    if(ObjectiveState == 3)
    {
        RealObjectiveProgress += (float(StartVolume.GetNumPlayersActive()) * HaxorPower);
        PrevObjProg = ObjectiveProgress;
        ObjectiveProgress = byte(RealObjectiveProgress);
        if(bLogObjective)
        {
            LogInternal((((((((("[OBJECTIVE]" @ string(GetFuncName())) @ "HaxorPower =") @ string(HaxorPower)) @ "Player in objective:") @ string(StartVolume.GetNumPlayersActive())) @ "Total Progress:") @ string(ObjectiveProgress)) @ "Progress / second") @ string(HaxorPower * float(StartVolume.GetNumPlayersActive())));
        }
        if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
        {
            KFGameInfo(WorldInfo.Game).DialogManager.PlayDefendObjDialog(PrevObjProg, ObjectiveProgress);
        }
    }
    super(KFObjective).UpdateObjective();
}

simulated function StartObjective()
{
    super.StartObjective();
    PlayerNumModifier = float(GetNumPlayersAccepted());
    HaxorPower = GetHaxPower(float(TimeLimit), DfficultyModifier[ObjectiveDifficulty], PlayerNumModifier);
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayDefendObjDialog(255, 0);
    }
}

simulated function float GetHaxPower(float Time, float DiffyCultyMod, float PlayerMod)
{
    if(bLogObjective)
    {
        LogInternal((("[OBJECTIVE]" @ string(GetFuncName())) @ "HaxorPower =") @ string((float(100) / (Time * DiffyCultyMod)) / PlayerMod));
    }
    return (100 / (Time * DiffyCultyMod)) / PlayerMod;
}

function WinObjective()
{
    local KFPawn_Human KFPH;

    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.IsAliveAndWell() && ActiveObjectivePlayers.Find(KFPH.PlayerReplicationInfo != -1)
        {
            KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo).AddDosh(DoshReward, true);
        }        
    }    
    super.WinObjective();
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayDefendObjDialog(99, 100);
    }
}

simulated function DrawObjectiveHUD(Canvas C)
{
    switch(ObjectiveState)
    {
        case 1:
            DrawObjAlertHUD(C);
            break;
        case 2:
            if(!bHasAccepted)
            {
                DrawObjPrestartHUD(C);
                DrawObjectiveWorldPosition(C);                
            }
            else
            {
                DrawWaitingForPlayersHUD(C);
            }
            break;
        case 3:
            DrawTrackerHUD(C);
            break;
        default:
            break;
    }
}

simulated function DrawWaitingForPlayersHUD(Canvas C)
{
    local float XPos, YPos, CurScale;
    local string TitleString, DescriptionString, ProgressString;
    local int TimeSeconds, TimeMinutes, CurrentTime;

    C.SetDrawColor(255, 255, 255);
    C.bCenter = true;
    CurScale = 1;
    XPos = (float(C.SizeX) - (float(256) * CurScale)) - float(10);
    YPos = 10;
    C.SetPos(XPos, YPos);
    C.DrawTile(ObjRectangleTex, 256 * CurScale, 96 * CurScale, 0, 0, 512, 256);
    XPos += float(16);
    YPos += float(10);
    TitleString = (ObjectiveTypeString @ "-") @ ObjectiveDifficulties[ObjectiveDifficulty];
    DescriptionString = ObjectiveWaitingString;
    CurrentTime = Max(0, int(ObjectiveStartTime - WorldInfo.TimeSeconds));
    TimeMinutes = CurrentTime / 60;
    TimeSeconds = CurrentTime % 60;
    if(TimeSeconds > 9)
    {
        ProgressString = ((string(TimeMinutes) $ ":") $ string(TimeSeconds)) $ "s";        
    }
    else
    {
        ProgressString = ((string(TimeMinutes) $ ":0") $ string(TimeSeconds)) $ "s";
    }
    C.SetPos(XPos, YPos);
    C.DrawText(TitleString);
    YPos += float(20);
    C.SetPos(XPos, YPos);
    C.DrawText(DescriptionString);
    YPos += float(20);
    C.SetPos(XPos, YPos);
    C.SetDrawColor(255, 255, 255, 255);
    C.DrawText(ProgressString);
    C.Reset();
}

defaultproperties
{
    DfficultyModifier[0]=0.7
    DfficultyModifier[1]=0.8
    DfficultyModifier[2]=0.9
}