/*******************************************************************************
 * KFWeap_HRG_Dragonbreath generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_HRG_Dragonbreath extends KFWeap_ShotgunBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

/** How much to scale recoil when firing in double barrel fire. */
var(Recoil) float QuadFireRecoilModifier;
/** Shoot animation to play when shooting both barrels from the hip */
var(Animations) const editconst name FireQuadAnim;
/** How much momentum to apply when fired in double barrel */
var(Recoil) float DoubleBarrelKickMomentum;
/** How much to reduce shoot momentum when falling */
var(Recoil) float FallingMomentumReduction;
var(Spread) const float SpreadWidthDegrees;
var(Spread) const float SpreadWidthDegreesAlt;
var transient float StartingPelletPosition;
var transient float StartingPelletPositionAlt;
var const float BarrelHeatPerProjectile;
var const float MaxBarrelHeat;
var const float BarrelCooldownRate;
var transient float CurrentBarrelHeat;
var transient float LastBarrelHeat;

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    Spread[0] = (SpreadWidthDegrees * 0.01745329) / float(NumPellets[0]);
    Spread[1] = (SpreadWidthDegreesAlt * 0.01745329) / float(NumPellets[1]);
    StartingPelletPosition = (-SpreadWidthDegrees * 0.01745329) / 2;
    StartingPelletPositionAlt = (-SpreadWidthDegreesAlt * 0.01745329) / 2;
}

simulated event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    LastBarrelHeat = MaxBarrelHeat;
    ChangeBarrelMaterial();
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function byte GetNumProjectilesToFire(byte FireModeNum)
{
    return NumPellets[CurrentFireMode];
}

simulated function name GetWeaponFireAnim(byte FireModeNum)
{
    if(bUsingSights)
    {
        return FireSightedAnims[FireModeNum];        
    }
    else
    {
        if(FireModeNum == 1)
        {
            return FireQuadAnim;            
        }
        else
        {
            return FireAnim;
        }
    }
}

simulated function KFProjectile SpawnAllProjectiles(class<KFProjectile> KFProjClass, Vector RealStartLoc, Vector AimDir)
{
    local int ProjectilesToFire, I;
    local float InitialOffset;

    ProjectilesToFire = GetNumProjectilesToFire(CurrentFireMode);
    if((CurrentFireMode == 4) || ProjectilesToFire <= 1)
    {
        return SpawnProjectile(KFProjClass, RealStartLoc, AimDir);
    }
    InitialOffset = ((CurrentFireMode == 0) ? StartingPelletPosition : StartingPelletPositionAlt);
    I = 0;
    J0xA2:

    if(I < ProjectilesToFire)
    {
        SpawnProjectile(KFProjClass, RealStartLoc, CalculateSpread(InitialOffset, Spread[CurrentFireMode], byte(I), CurrentFireMode == 1));
        CurrentBarrelHeat = FMin(CurrentBarrelHeat + BarrelHeatPerProjectile, MaxBarrelHeat);
        ++ I;
        goto J0xA2;
    }
    ChangeBarrelMaterial();
    return none;
}

simulated function Vector CalculateSpread(float InitialOffset, float CurrentSpread, byte PelletNum, bool bHorizontal)
{
    local Vector X, Y, Z, POVLoc;
    local Quat R;
    local Rotator POVRot;

    if((Instigator != none) && Instigator.Controller != none)
    {
        Instigator.Controller.GetPlayerViewPoint(POVLoc, POVRot);
    }
    GetAxes(POVRot, X, Y, Z);
    R = QuatFromAxisAndAngle(((bHorizontal) ? Z : Y), InitialOffset + (CurrentSpread * float(PelletNum)));
    return QuatRotateVector(R, vector(POVRot));
}

simulated function ChangeBarrelMaterial()
{
    local int I;

    if(CurrentBarrelHeat != LastBarrelHeat)
    {
        I = 0;
        J0x22:

        if(I < WeaponMICs.Length)
        {
            if(WeaponMICs[I] != none)
            {
                WeaponMICs[I].SetScalarParameterValue('Barrel_intensity', CurrentBarrelHeat);
                LastBarrelHeat = CurrentBarrelHeat;
            }
            ++ I;
            goto J0x22;
        }
    }
}

simulated function Tick(float Delta)
{
    super(KFWeapon).Tick(Delta);
    CurrentBarrelHeat = FMax(CurrentBarrelHeat - (BarrelCooldownRate * Delta), 0);
    ChangeBarrelMaterial();
}

defaultproperties
{
    QuadFireRecoilModifier=2
    FireQuadAnim=Shoot_Double
    DoubleBarrelKickMomentum=1000
    FallingMomentumReduction=0.5
    SpreadWidthDegrees=7
    SpreadWidthDegreesAlt=15
    BarrelHeatPerProjectile=0.089
    MaxBarrelHeat=5
    BarrelCooldownRate=0.45
    PackageKey="HRG_MegaDragonsbreath"
    FirstPersonMeshName="wep_1p_hrg_megadragonsbreath_mesh.Wep_1stP_HRG_MegaDragonsbreath_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="wep_3p_hrg_megadragonsbreath_mesh.Wep_3rdP_HRG_MegaDragonsbreath_Pickup"
    AttachmentArchetypeName="wep_hrg_megadragonsbreath_arch.Wep_HRG_MegaDragonsbreath_3P"
    MuzzleFlashTemplateName="wep_hrg_megadragonsbreath_arch.Wep_HRG_MegaDragonsbreath_MuzzleFlash"
    bHasIronSights=true
    bNoMagazine=true
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=false
    FireModeIconPaths=/* Array type was not detected. */
    InventorySize=7
    PenetrationPower=/* Array type was not detected. */
    MeshFOV=60
    MeshIronSightFOV=52
    PlayerIronSightFOV=70
    IronSightPosition=(X=3,Y=0,Z=0)
    DOF_FG_FocalRadius=65
    GroupPriority=110
    WeaponSelectTexture=Texture2D'WEP_UI_Quad_Barrel_TEX.UI_WeaponSelect_QuadBarrel'
    MagazineCapacity=4
    SpareAmmoCapacity=48
    InitialSpareMags=3
    AmmoPickupScale=2
    ForceReloadTimeOnEmpty=0.3
    WeaponFireWaveForm=ForceFeedbackWaveform'FX_ForceFeedback_ARCH.Gunfire.Heavy_Recoil_SingleShot'
    FireAnim=Shoot_Single
    FireSightedAnims=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=15,Y=8,Z=-4.5)
    NumBloodMapMaterials=3
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_HRG_Dragonbreath.MeleeHelper'
    NumPellets=/* Array type was not detected. */
    maxRecoilPitch=1200
    minRecoilPitch=775
    maxRecoilYaw=800
    minRecoilYaw=-500
    RecoilRate=0.085
    RecoilBlendOutRatio=1.1
    RecoilViewRotationScale=0.8
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMinPitchLimit=64785
    RecoilISMaxYawLimit=50
    RecoilISMinYawLimit=65485
    RecoilISMaxPitchLimit=500
    RecoilISMinPitchLimit=65485
    HippedRecoilModifier=1.1
    FallingRecoilModifier=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=3.5,Z=-4)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_HRG_Dragonbreath.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Dragonsblaze"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_Dragonbreath.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_Dragonbreath.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}