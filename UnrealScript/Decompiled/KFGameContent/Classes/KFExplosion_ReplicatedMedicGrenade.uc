/*******************************************************************************
 * KFExplosion_ReplicatedMedicGrenade generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFExplosion_ReplicatedMedicGrenade extends KFExplosion_MedicGrenade
    config(Weapon)
    hidecategories(Navigation);

var private repnotify transient GameExplosion ExploTemplateRef;
var bool bTraceForHitActorWhenDirectionalExplosion;
var bool bSyncParticlesToMuzzle;
var repnotify transient Actor BlastAttachee;

replication
{
     if(bNetDirty)
        BlastAttachee, ExploTemplateRef, 
        bSyncParticlesToMuzzle, bTraceForHitActorWhenDirectionalExplosion;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'ExploTemplateRef')
    {
        Explode(ExploTemplateRef, ExplosionDirection);        
    }
    else
    {
        super(Actor).ReplicatedEvent(VarName);
    }
}

simulated function Explode(GameExplosion NewExplosionTemplate, optional Vector ExploDirection)
{
    local Vector MyHitLocation, MyHitNormal, TraceStart, TraceDest;
    local Actor MyHitActor;

    if(NewExplosionTemplate.bDirectionalExplosion && bTraceForHitActorWhenDirectionalExplosion)
    {
        TraceStart = Location;
        TraceDest = Location + (ExploDirection * NewExplosionTemplate.DamageRadius);
        MyHitActor = Trace(MyHitLocation, MyHitNormal, TraceDest, TraceStart, true,,, 1);
        if(MyHitActor != none)
        {
            NewExplosionTemplate.HitLocation = MyHitLocation;
            NewExplosionTemplate.HitNormal = MyHitNormal;
        }
    }
    if(Role == ROLE_Authority)
    {
        BlastAttachee = Attachee;
        ExploTemplateRef = NewExplosionTemplate;
    }
    super.Explode(NewExplosionTemplate, ExploDirection);
    LifeSpan = FMax(LifeSpan, 1);
}

simulated function SpawnExplosionParticleSystem(ParticleSystem Template)
{
    if(BlastAttachee != none)
    {
        WorldInfo.MyEmitterPool.SpawnEmitter(Template, BlastAttachee.Location, Rotation, BlastAttachee);        
    }
    else
    {
        if(bSyncParticlesToMuzzle)
        {
            WorldInfo.MyEmitterPool.SpawnEmitter(Template, GetMuzzleEffectLocation(), Rotation, none);            
        }
        else
        {
            WorldInfo.MyEmitterPool.SpawnEmitter(Template, Location, Rotation, none);
        }
    }
}

simulated function SetSyncToMuzzleLocation(bool bSync)
{
    bSyncParticlesToMuzzle = bSync;
}

simulated function Vector GetMuzzleEffectLocation()
{
    local KFPawn KFP;

    if((WorldInfo.NetMode != NM_DedicatedServer) && Instigator != none)
    {
        if(!Instigator.IsFirstPerson())
        {
            KFP = KFPawn(Instigator);
            if((KFP != none) && KFP.WeaponAttachment != none)
            {
                return KFP.WeaponAttachment.GetMuzzleLocation(0);
            }            
        }
        else
        {
            if(Instigator.Weapon != none)
            {
                return Instigator.Weapon.GetMuzzleLoc();
            }
        }
    }
    return Location;
}

defaultproperties
{
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bNetTemporary=true
    bAlwaysRelevant=true
    bNetInitialRotation=true
}