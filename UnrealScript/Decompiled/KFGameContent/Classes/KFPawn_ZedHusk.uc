/*******************************************************************************
 * KFPawn_ZedHusk generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedHusk extends KFPawn_Monster
    config(Game)
    hidecategories(Navigation);

const BackpackZoneIndex = 3;

struct sHuskFireballSettings
{
    var bool bSpawnGroundFire;
    var float ExplosionMomentum;

    structdefaultproperties
    {
        bSpawnGroundFire=false
        ExplosionMomentum=0
    }
};

var protected const class<KFProj_Husk_Fireball> FireballClass;
var transient sHuskFireballSettings FireballSettings;
var protected Vector PlayerFireOffset;
var protected KFGameExplosion ExplosionTemplate;
var protected transient bool bHasExploded;
var protected bool bUseFireballLightRadius;
var protected export editinline PointLightComponent ChestLightComponent;
var protected const name ChestLightSocketName;
var protected const float FireballChargeLightRadius;
var protected const float AmbientLightRadiusInterpSpeed;
var protected const float FireballLightRadiusInterpSpeed;
var protected const float FireballLightMinBrightness;
var protected const float FireballLightMaxBrightness;

function PossessedBy(Controller C, bool bVehicleTransition)
{
    local KFGameReplicationInfo KFGRI;

    super.PossessedBy(C, bVehicleTransition);
    if(!bVersusZed)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            FireballSettings = class<KFDifficulty_Husk>(DifficultySettings).static.GetFireballSettings(self, KFGRI);
        }
    }
}

simulated function SetCharacterArch(KFCharacterInfoBase Info, optional bool bForce)
{
    super(KFPawn).SetCharacterArch(Info, bForce);
    if(((WorldInfo.NetMode != NM_DedicatedServer) && !ChestLightComponent.bAttached) && WorldInfo.GetDetailMode() > 0)
    {
        Mesh.AttachComponentToSocket(ChestLightComponent, ChestLightSocketName);
        ChestLightComponent.SetEnabled(true);
        KFLightPool(WorldInfo.MyLightPool).RegisterPointLight(ChestLightComponent, 2);
    }
}

simulated function ANIMNOTIFY_FlameThrowerOn()
{
    if(IsDoingSpecialMove(21))
    {
        KFSM_Husk_FlameThrowerAttack(SpecialMoves[SpecialMove]).TurnOnFlamethrower();
    }
}

simulated function ANIMNOTIFY_FlameThrowerOff()
{
    if(IsDoingSpecialMove(21))
    {
        KFSM_Husk_FlameThrowerAttack(SpecialMoves[SpecialMove]).TurnOffFlamethrower();
    }
}

function NotifyAnimInterrupt(optional AnimNodeSequence SeqNode)
{
    if(((MyKFAIC != none) && (IsImpaired()) || IsHeadless()) && !MyKFAIC.GetActiveCommand().IsA('AICommand_HeadlessWander'))
    {
        Class'AICommand_HeadlessWander'.static.HeadlessWander(MyKFAIC);
    }
}

simulated function ANIMNOTIFY_WarnZedsOfFireball()
{
    local Actor HitActor;
    local PlayerController PC;
    local KFPawn_Monster HitMonster;
    local Vector FireLocation, TraceStart, TraceEnd, HitLocation, HitNormal, DangerPoint,
	    AimDirection;

    if(Role == ROLE_Authority)
    {
        if(IsHumanControlled())
        {
            PC = PlayerController(Controller);
            if(PC == none)
            {
                return;
            }
            FireLocation = (GetPawnViewLocation()) + (PlayerFireOffset >> (GetViewRotation()));
            TraceStart = PC.PlayerCamera.CameraCache.POV.Location;
            TraceEnd = PC.PlayerCamera.CameraCache.POV.Location + (vector(PC.PlayerCamera.CameraCache.POV.Rotation) * 5000);
            HitActor = Trace(HitLocation, HitNormal, TraceEnd, TraceStart, true,,, 1);
            if(HitActor != none)
            {
                AimDirection = HitLocation - FireLocation;
                TraceEnd = HitLocation;                
            }
            else
            {
                AimDirection = TraceEnd - FireLocation;
            }            
        }
        else
        {
            AimDirection = MyKFAIC.Enemy.Location - Location;
            FireLocation = MyKFAIC.Enemy.Location;
        }
        foreach TraceActors(Class'KFPawn_Monster', HitMonster, HitLocation, HitNormal, FireLocation, Location, vect(50, 50, 50))
        {
            if(HitMonster.MyKFAIC != none)
            {
                PointDistToLine(HitMonster.Location, AimDirection, Location, DangerPoint);
                HitMonster.MyKFAIC.ReceiveLocationalWarning(DangerPoint, Location);
            }            
        }        
    }
    SetFireLightEnabled(((bVersusZed) ? false : true));
}

simulated function SetFireLightEnabled(bool bEnable)
{
    if((((WorldInfo.NetMode == NM_DedicatedServer) || bPlayedDeath) || ChestLightComponent == none) || !ChestLightComponent.bAttached)
    {
        return;
    }
    bUseFireballLightRadius = (bEnable && !WorldInfo.bDropDetail) && (WorldInfo.TimeSeconds - ChestLightComponent.LastRenderTime) < 0.25;
    if(bEnable)
    {
        ChestLightComponent.MinBrightness = FireballLightMinBrightness;
        ChestLightComponent.MaxBrightness = FireballLightMaxBrightness;        
    }
    else
    {
        ChestLightComponent.MinBrightness = default.ChestLightComponent.MinBrightness;
        ChestLightComponent.MaxBrightness = default.ChestLightComponent.MaxBrightness;
    }
}

simulated event Tick(float DeltaTime)
{
    super(KFPawn).Tick(DeltaTime);
    if((((WorldInfo.NetMode == NM_DedicatedServer) || bPlayedDeath) || ChestLightComponent == none) || !ChestLightComponent.bAttached)
    {
        return;
    }
    if(bUseFireballLightRadius)
    {
        if(ChestLightComponent.Radius < FireballChargeLightRadius)
        {
            ChestLightComponent.SetRadius(FInterpConstantTo(ChestLightComponent.Radius, FireballChargeLightRadius, DeltaTime, FireballLightRadiusInterpSpeed));
        }        
    }
    else
    {
        if(ChestLightComponent.Radius > default.ChestLightComponent.Radius)
        {
            ChestLightComponent.SetRadius(FInterpConstantTo(ChestLightComponent.Radius, default.ChestLightComponent.Radius, DeltaTime, AmbientLightRadiusInterpSpeed));
        }
    }
}

simulated function ANIMNOTIFY_HuskFireballAttack()
{
    local KFAIController_ZedHusk HuskAIC;
    local KFSM_Husk_FireBallAttack FireballSM;

    if(MyKFAIC != none)
    {
        FireballSM = KFSM_Husk_FireBallAttack(SpecialMoves[SpecialMove]);
        if(FireballSM != none)
        {
            FireballSM.NotifyFireballFired();
        }
        HuskAIC = KFAIController_ZedHusk(MyKFAIC);
        if(HuskAIC != none)
        {
            HuskAIC.ShootFireball(FireballClass, FireballSM.GetFireOffset());
        }
    }
    SetFireLightEnabled(false);
}

simulated event Vector GetWeaponStartTraceLocation(optional Weapon CurrentWeapon)
{
    local Vector Loc;
    local Rotator Rot;
    local KFAIController_ZedHusk HuskAIC;

    if(MyKFAIC != none)
    {
        HuskAIC = KFAIController_ZedHusk(MyKFAIC);
        if(HuskAIC != none)
        {
            Mesh.GetSocketWorldLocationAndRotation(HuskAIC.FireballSocketName, Loc, Rot);
            return Loc;
        }
    }
    return super(Pawn).GetWeaponStartTraceLocation();
}

simulated function TerminateEffectsOnDeath()
{
    if(IsDoingSpecialMove(21))
    {
        SpecialMoveHandler.EndSpecialMove();
    }
    if((ChestLightComponent != none) && ChestLightComponent.bAttached)
    {
        ChestLightComponent.DetachFromAny();
        ChestLightComponent = none;
    }
    super(KFPawn).TerminateEffectsOnDeath();
}

simulated function OnAnimNotifyParticleSystemSpawned(const AnimNotify_PlayParticleEffect AnimNotifyData, ParticleSystemComponent PSC)
{
    if(!IsDoingSpecialMove(GetSuicideSM()) && InStr(string(PSC.Template.Name), "suicide",, true) != -1)
    {
        PSC.SetActive(false);
        return;
    }
    super(KFPawn).OnAnimNotifyParticleSystemSpawned(AnimNotifyData, PSC);
}

simulated function KFGame.KFPawn.ESpecialMove GetSuicideSM()
{
    return 22;
}

function ApplySpecialZoneHealthMod(float HealthMod)
{
    super.ApplySpecialZoneHealthMod(HealthMod);
    HitZones[3].GoreHealth = int(float(default.HitZones[3].GoreHealth) * HealthMod);
}

function bool CanInjureHitZone(class<DamageType> DamageType, int HitZoneIdx)
{
    if((HitZoneIdx == 3) && !bPlayedDeath || WorldInfo.TimeSeconds == TimeOfDeath)
    {
        return true;
    }
    return super(KFPawn).CanInjureHitZone(DamageType, HitZoneIdx);
}

simulated function HitZoneInjured(optional int HitZoneIdx)
{
    HitZoneIdx = -1;
    super.HitZoneInjured(HitZoneIdx);
    if((Role == ROLE_Authority) && HitZoneIdx == 3)
    {
        TriggerExplosion(true);
    }
}

function TriggerExplosion(optional bool bIgnoreHumans)
{
    local KFExplosionActorReplicated ExploActor;
    local Controller DamageInstigator, OldController;
    local bool bExplodeOnDeath;

    bExplodeOnDeath = WorldInfo.TimeSeconds == TimeOfDeath;
    if(!bHasExploded && !bPlayedDeath || bExplodeOnDeath)
    {
        OldController = Controller;
        if(Role == ROLE_Authority)
        {
            ExploActor = Spawn(Class'KFExplosionActorReplicated', self);
            if(ExploActor != none)
            {
                DamageInstigator = (((bIgnoreHumans && LastHitBy != none) && KFPlayerController(LastHitBy) != none) ? LastHitBy : MyKFAIC);
                ExploActor.InstigatorController = DamageInstigator;
                ExploActor.Instigator = self;
                ExploActor.Attachee = self;
                if(bIgnoreHumans)
                {
                    ExplosionTemplate.ActorClassToIgnoreForDamage = Class'KFPawn_Human';                    
                }
                else
                {
                    ExplosionTemplate.ActorClassToIgnoreForDamage = none;
                }
                ExploActor.Explode(ExplosionTemplate, vect(0, 0, 1));
            }
            if(!bPlayedDeath || bExplodeOnDeath)
            {
                TakeRadiusDamage(DamageInstigator, 10000, ExplosionTemplate.DamageRadius, ExplosionTemplate.MyDamageType, ExplosionTemplate.MomentumTransferScale, Location, true, self);
            }
        }
        OnExploded(OldController);
        bHasExploded = true;
    }
}

simulated function OnExploded(Controller SuicideController);

function AdjustDamage(out int InDamage, out Vector Momentum, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, TraceHitInfo HitInfo, Actor DamageCauser)
{
    super.AdjustDamage(InDamage, Momentum, InstigatedBy, HitLocation, DamageType, HitInfo, DamageCauser);
    if((((MyKFAIC != none) && MyKFAIC.IsSuicidal()) && InstigatedBy == MyKFAIC) && IsDoingSpecialMove(22))
    {
        InDamage = 10000;
    }
}

function NotifyTakeHit(Controller InstigatedBy, Vector HitLocation, int Damage, class<DamageType> DamageType, Vector Momentum, Actor DamageCauser)
{
    local KFAIDirector KFAID;
    local Pawn NewEnemy;

    if((((Role == ROLE_Authority) && MyKFAIC != none) && MyKFAIC.IsSuicidal()) && AICommand_Husk_Suicide(MyKFAIC.GetActiveCommand()) == none)
    {
        MyKFAIC.AIActionStatus = "Suicidal!";
        bIsSprinting = true;
        if(((FRand() < 0.4) || MyKFAIC.Enemy == none) || MyKFAIC.Enemy.Health <= 0)
        {
            KFAID = KFGameInfo(WorldInfo.Game).GetAIDirector();
            if(KFAID != none)
            {
                NewEnemy = Pawn(KFAID.FindEnemyFor(MyKFAIC, true));
                if(NewEnemy != none)
                {
                    MyKFAIC.SetEnemy(NewEnemy);
                }
            }
        }
    }
    super.NotifyTakeHit(InstigatedBy, HitLocation, Damage, DamageType, Momentum, DamageCauser);
}

function PlayHit(float Damage, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, Vector Momentum, TraceHitInfo HitInfo)
{
    super.PlayHit(Damage, InstigatedBy, HitLocation, DamageType, Momentum, HitInfo);
    if(bEmpDisrupted && IsDoingSpecialMove(22))
    {
        Died(InstigatedBy, DamageType, HitLocation);
    }
}

function OnStackingAfflictionChanged(byte Id)
{
    super.OnStackingAfflictionChanged(Id);
    if((MyKFAIC == none) || !IsAliveAndWell())
    {
        return;
    }
    if(bEmpDisrupted)
    {
        if(IsDoingSpecialMove(20) || IsDoingSpecialMove(21))
        {
            EndSpecialMove();
        }
    }
}

static function int GetTraderAdviceID()
{
    return 45;
}

defaultproperties
{
    FireballClass=Class'KFProj_Husk_Fireball'
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'FX_Impacts_ARCH.Explosions.HuskSuicide_Explosion'
        Damage=190
        DamageFalloffExponent=0.5
        MyDamageType=Class'KFDT_Explosive_HuskSuicide'
        MomentumTransferScale=1
        ExplosionSound=AkEvent'WW_ZED_Husk.ZED_Husk_SFX_Suicide_Explode'
        ExploLight=PointLightComponent'Default__KFPawn_ZedHusk.ExplosionPointLight'
        ExploLightFadeOutTime=0.5
        CamShake=KFCameraShake'FX_CameraShake_Arch.Misc_Explosions.HuskSuicide'
    object end
    // Reference: KFGameExplosion'Default__KFPawn_ZedHusk.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    begin object name=ChestLightComponent0 class=PointLightComponent
        Radius=160
        Brightness=0.5
        LightColor=(B=40,G=155,R=250,A=255)
        bEnabled=false
        CastShadows=false
        LightingChannels=(Outdoor=true)
        MaxBrightness=0.5
        MinBrightness=0.4
        AnimationType=1
        AnimationFrequency=2
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedHusk.ChestLightComponent0'
    ChestLightComponent=ChestLightComponent0
    ChestLightSocketName=ChestLightSocket
    FireballChargeLightRadius=256
    AmbientLightRadiusInterpSpeed=300
    FireballLightRadiusInterpSpeed=100
    FireballLightMinBrightness=1.1
    FireballLightMaxBrightness=1.25
    MonsterArchPath="ZED_ARCH.ZED_Husk_Archetype"
    ParryResistance=2
    MinSpawnSquadSizeType=ESquadType.EST_Medium
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=15
        MyDamageType=Class'KFDT_Slashing_ZedWeak'
        MomentumTransfer=25000
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedHusk.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DoshValue=17
    XPValues[0]=15
    XPValues[1]=20
    XPValues[2]=27
    XPValues[3]=31
    WeakSpotSocketNames=/* Array type was not detected. */
    DamageTypeModifiers=/* Array type was not detected. */
    DifficultySettings=Class'KFDifficulty_Husk'
    LocalizationKey=KFPawn_ZedHusk
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedHusk.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    HitZones=/* Array type was not detected. */
    PenetrationResistance=2
    begin object name=Afflictions class=KFAfflictionManager
        AfflictionClasses=/* Array type was not detected. */
        FireFullyCharredDuration=5
    object end
    // Reference: KFAfflictionManager'Default__KFPawn_ZedHusk.Afflictions'
    AfflictionHandler=Afflictions
    IncapSettings=/* Array type was not detected. */
    KnockdownImpulseScale=1
    SprintSpeed=450
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedHusk.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses=/* Array type was not detected. */
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_ZedHusk.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedHusk.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedHusk.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedHusk.WeaponAmbientEchoHandler'
    FootstepAkComponent=AkComponent'Default__KFPawn_ZedHusk.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_ZedHusk.DialogAkSoundComponent'
    DamageRecoveryTimeHeavy=0.75
    GroundSpeed=170
    Health=462
    ControllerClass=Class'KFAIController_ZedHusk'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedHusk.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedHusk.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedHusk.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedHusk.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedHusk.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedHusk.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedHusk.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedHusk.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedHusk.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedHusk.DialogAkSoundComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedHusk.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    RotationRate=(Pitch=50000,Yaw=66000,Roll=50000)
}