/*******************************************************************************
 * KFPawn_ZedFleshpound generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedFleshpound extends KFPawn_Monster
    config(Game)
    hidecategories(Navigation);

var export editinline AkComponent RageAkComponent;
var AkEvent RageLoopSound;
var AkEvent RageStopSound;
var LinearColor DefaultGlowColor;
var LinearColor EnragedGlowColor;
var() LinearColor DeadGlowColor;
var class<KFDamageType> RageBumpDamageType;
var name BattlePhaseLightFrontSocketName;
var export editinline transient PointLightComponent BattlePhaseLightTemplateYellow;
var export editinline transient PointLightComponent BattlePhaseLightTemplateRed;
var export editinline transient PointLightComponent BattlePhaseLightFront;
var protected const float FootstepCameraShakePitchAmplitude;
var protected const float FootstepCameraShakeRollAmplitude;

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    if((WorldInfo.NetMode != NM_DedicatedServer) && Mesh != none)
    {
        UpdateGameplayMICParams();
    }
}

simulated event ReplicatedEvent(name VarName)
{
    switch(VarName)
    {
        case 'bIsEnraged':
            SetEnraged(bIsEnraged);
            break;
        default:
            break;
    }
    super.ReplicatedEvent(VarName);
}

function OnStackingAfflictionChanged(byte Id)
{
    local KFAIController_ZedFleshpound FpAIC;

    super.OnStackingAfflictionChanged(Id);
    if((bEmpDisrupted && MyKFAIC != none) && IsAliveAndWell())
    {
        if(IsDoingSpecialMove(12))
        {
            EndSpecialMove(12);
        }
        FpAIC = KFAIController_ZedFleshpound(MyKFAIC);
        if((FpAIC != none) && FpAIC.RagePlugin != none)
        {
            FpAIC.RagePlugin.EndRage();
        }
    }
}

simulated function StartSteering();

function SetSprinting(bool bNewSprintStatus)
{
    if((bNewSprintStatus && !IsEnraged()) && (MyKFAIC == none) || !MyKFAIC.bHasDebugCommand)
    {
        return;
    }
    super.SetSprinting(bNewSprintStatus);
}

simulated event PlayFootStepSound(int FootDown)
{
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(IsHumanControlled() && IsLocallyControlled())
        {
            FootstepCameraShake.RotOscillation.Pitch.Amplitude = 0;
            FootstepCameraShake.RotOscillation.Roll.Amplitude = 0;            
        }
        else
        {
            FootstepCameraShake.RotOscillation.Pitch.Amplitude = FootstepCameraShakePitchAmplitude;
            FootstepCameraShake.RotOscillation.Roll.Amplitude = FootstepCameraShakeRollAmplitude;
            FootstepCameraShakeInnerRadius = default.FootstepCameraShakeInnerRadius;
            FootstepCameraShakeOuterRadius = default.FootstepCameraShakeOuterRadius;
            if(!bIsSprinting || VSizeSq(Velocity) < 10000)
            {
                FootstepCameraShake.RotOscillation.Pitch.Amplitude *= 0.75;
                FootstepCameraShake.RotOscillation.Roll.Amplitude *= 0.75;
            }
        }
    }
    super.PlayFootStepSound(FootDown);
}

function CauseHeadTrauma(optional float BleedOutTime)
{
    BleedOutTime = 5;
    super.CauseHeadTrauma(BleedOutTime);
    SetEnraged(false);
}

function bool CanBlock()
{
    return !IsEnraged() && super.CanBlock();
}

simulated function TerminateEffectsOnDeath()
{
    StopRageSound();
    UpdateBattlePhaseLights();
    super(KFPawn).TerminateEffectsOnDeath();
}

simulated function UpdateBattlePhaseLights()
{
    local editinline PointLightComponent LightTemplate;

    if(BattlePhaseLightFront != none)
    {
        BattlePhaseLightFront.DetachFromAny();
        BattlePhaseLightFront = none;
    }
    if(IsAliveAndWell())
    {
        if(bIsEnraged)
        {
            LightTemplate = BattlePhaseLightTemplateRed;            
        }
        else
        {
            LightTemplate = BattlePhaseLightTemplateYellow;
        }
        if(LightTemplate != none)
        {
            BattlePhaseLightFront = new (self) Class'PointLightComponent' (LightTemplate);
        }
        if(BattlePhaseLightFront != none)
        {
            Mesh.AttachComponentToSocket(BattlePhaseLightFront, BattlePhaseLightFrontSocketName);
            BattlePhaseLightFront.SetEnabled(true);
        }
    }
}

function bool ShouldPlaySpecialMeleeAnims()
{
    return IsEnraged();
}

simulated event bool IsEnraged()
{
    return bIsEnraged;
}

simulated function SetEnraged(bool bNewEnraged)
{
    if(!bCanRage || (Role == ROLE_Authority) && bNewEnraged == bIsEnraged)
    {
        return;
    }
    if(Role == ROLE_Authority)
    {
        bIsEnraged = bNewEnraged;
        if(IsDoingSpecialMove(16))
        {
            EndSpecialMove();
        }
        if(!IsHumanControlled())
        {
            SetSprinting(bNewEnraged);
        }
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        UpdateGameplayMICParams();
    }
}

simulated function UpdateGameplayMICParams()
{
    local MaterialInstanceConstant MIC;

    super.UpdateGameplayMICParams();
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        UpdateBattlePhaseLights();
        MIC = CharacterMICs[0];
        if(!IsAliveAndWell())
        {
            MIC.SetVectorParameterValue('Vector_GlowColor', DeadGlowColor);            
        }
        else
        {
            if(bIsEnraged)
            {
                MIC.SetVectorParameterValue('Vector_GlowColor', EnragedGlowColor);                
            }
            else
            {
                MIC.SetVectorParameterValue('Vector_GlowColor', DefaultGlowColor);
            }
        }
    }
}

simulated function StopRageSound()
{
    if(RageAkComponent.IsPlaying(RageLoopSound))
    {
        RageAkComponent.PlayEvent(RageStopSound, true, true);
    }
}

simulated function PlayDying(class<DamageType> DamageType, Vector HitLoc)
{
    super.PlayDying(DamageType, HitLoc);
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        SetEnraged(false);
    }
}

function class<KFDamageType> GetBumpAttackDamageType()
{
    return RageBumpDamageType;
}

simulated function AdjustAffliction(out float AfflictionPower)
{
    if(bIsEnraged)
    {
        AfflictionPower *= 0.25;
    }
}

simulated event Tick(float DeltaTime)
{
    super(KFPawn).Tick(DeltaTime);
    if((WorldInfo.NetMode != NM_DedicatedServer) && IsAliveAndWell())
    {
        if((((bIsSprinting && IsEnraged()) && Physics == 1) && Mesh.RootMotionMode == 2) && VSizeSq(Velocity) > 40000)
        {
            if(!RageAkComponent.IsPlaying(RageLoopSound))
            {
                RageAkComponent.PlayEvent(RageLoopSound, true, true);
            }            
        }
        else
        {
            StopRageSound();
        }
    }
}

simulated function GetOverheadDebugText(KFHUDBase HUD, out array<string> OverheadTexts, out array<Color> OverheadColors)
{
    local string DebugText;
    local float RedScalar, Scalar;
    local Color ModifyTextColor;

    if(HUD.ShouldDisplayDebug('All') || HUD.ShouldDisplayDebug('AISpecial'))
    {
        if(!bIsEnraged)
        {
            Scalar = 1;
            RedScalar = FClamp((1 - Scalar) / 0.5, 0, 1);
            ModifyTextColor.R = FloatToByte(RedScalar);
            ModifyTextColor.B = 0;
            ModifyTextColor.G = FloatToByte(Scalar);
            ModifyTextColor.A = 255;            
        }
        else
        {
            ModifyTextColor.R = 255;
            ModifyTextColor.G = 0;
            ModifyTextColor.B = 0;
            ModifyTextColor.A = 255;
            DebugText = "ENRAGED!!!";
            if(IsDoingSpecialMove())
            {
                DebugText = ((DebugText $ " SPECIALMOVE: ") $ string(SpecialMove)) $ "
";
            }
            if(MyKFAIC.GetActiveCommand() != none)
            {
                DebugText = (((DebugText $ " COMMAND ") $ string(MyKFAIC.GetActiveCommand())) $ "
STATE: ") $ string(MyKFAIC.GetActiveCommand().GetStateName());
            }
        }
    }
    super.GetOverheadDebugText(HUD, OverheadTexts, OverheadColors);
    OverheadTexts[OverheadTexts.Length] = DebugText;
    OverheadColors[OverheadTexts.Length - 1] = ModifyTextColor;
}

function int GetSpotterDialogID()
{
    return 130;
}

static function int GetTraderAdviceID()
{
    return 43;
}

defaultproperties
{
    begin object name=RageAkComponent0 class=AkComponent
        BoneName=Dummy
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.2
    object end
    // Reference: AkComponent'Default__KFPawn_ZedFleshpound.RageAkComponent0'
    RageAkComponent=RageAkComponent0
    RageLoopSound=AkEvent'ww_zed_fleshpound_2.Play_FleshPound_Rage_Start'
    RageStopSound=AkEvent'ww_zed_fleshpound_2.Play_FleshPound_Rage_Stop'
    DefaultGlowColor=(R=1,G=0.35,B=0,A=1)
    EnragedGlowColor=(R=1,G=0,B=0,A=1)
    DeadGlowColor=(R=0,G=0,B=0,A=1)
    RageBumpDamageType=Class'KFDT_HeavyZedBump'
    BattlePhaseLightFrontSocketName=Light
    begin object name=PointLightComponent1 class=PointLightComponent
        Radius=128
        FalloffExponent=4
        LightColor=(B=25,G=200,R=250,A=255)
        CastShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedFleshpound.PointLightComponent1'
    BattlePhaseLightTemplateYellow=PointLightComponent1
    begin object name=PointLightComponent2 class=PointLightComponent
        Radius=128
        FalloffExponent=4
        LightColor=(B=64,G=64,R=255,A=255)
        CastShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedFleshpound.PointLightComponent2'
    BattlePhaseLightTemplateRed=PointLightComponent2
    FootstepCameraShakePitchAmplitude=120
    FootstepCameraShakeRollAmplitude=60
    bLargeZed=true
    bCanRage=true
    bIsFleshpoundClass=true
    MonsterArchPath="ZED_ARCH.ZED_Fleshpound_Archetype"
    HeadlessBleedOutTime=7
    ParryResistance=4
    MinSpawnSquadSizeType=ESquadType.EST_Large
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=55
        MyDamageType=Class'KFDT_Bludgeon_Fleshpound'
        MomentumTransfer=55000
        MaxHitRange=250
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedFleshpound.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DoshValue=200
    XPValues[0]=35
    XPValues[1]=47
    XPValues[2]=63
    XPValues[3]=72
    WeakSpotSocketNames=/* Array type was not detected. */
    DamageTypeModifiers=/* Array type was not detected. */
    ZedBumpDamageScale=0
    DifficultySettings=Class'KFDifficulty_Fleshpound'
    BumpFrequency=0.1
    BumpDamageType=Class'KFGame.KFDT_NPCBump_Large'
    FootstepCameraShakeInnerRadius=200
    FootstepCameraShakeOuterRadius=900
    begin object name=FootstepCameraShake0 class=CameraShake
        bSingleInstance=true
        OscillationDuration=0.25
        RotOscillation=(Pitch=(Amplitude=120,Frequency=60),Roll=(Amplitude=60,Frequency=40))
    object end
    // Reference: CameraShake'Default__KFPawn_ZedFleshpound.FootstepCameraShake0'
    FootstepCameraShake=FootstepCameraShake0
    OnDeathAchievementID=131
    PawnAnimInfo=KFPawnAnimInfo'ZED_Fleshpound_ANIM.Fleshpound_AnimGroup'
    LocalizationKey=KFPawn_ZedFleshpound
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedFleshpound.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    HitZones=/* Array type was not detected. */
    PenetrationResistance=5
    begin object name=Afflictions class=KFAfflictionManager
        AfflictionClasses=/* Array type was not detected. */
        FireFullyCharredDuration=5
    object end
    // Reference: KFAfflictionManager'Default__KFPawn_ZedFleshpound.Afflictions'
    AfflictionHandler=Afflictions
    IncapSettings=/* Array type was not detected. */
    PhysRagdollImpulseScale=1.5
    KnockdownImpulseScale=2
    SprintSpeed=725
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedFleshpound.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses=/* Array type was not detected. */
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_ZedFleshpound.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedFleshpound.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedFleshpound.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedFleshpound.WeaponAmbientEchoHandler'
    FootstepAkComponent=AkComponent'Default__KFPawn_ZedFleshpound.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_ZedFleshpound.DialogAkSoundComponent'
    DamageRecoveryTimeHeavy=0.85
    DamageRecoveryTimeMedium=0.85
    Mass=200
    GroundSpeed=260
    Health=1500
    ControllerClass=Class'KFGame.KFAIController_ZedFleshpound'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bUpdateKinematicBonesFromAnimation=true
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedFleshpound.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionRadius=55
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedFleshpound.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedFleshpound.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionRadius=55
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedFleshpound.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedFleshpound.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bUpdateKinematicBonesFromAnimation=true
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedFleshpound.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedFleshpound.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedFleshpound.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedFleshpound.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedFleshpound.DialogAkSoundComponent'
    begin object name=RageAkComponent0 class=AkComponent
        BoneName=Dummy
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.2
    object end
    // Reference: AkComponent'Default__KFPawn_ZedFleshpound.RageAkComponent0'
    Components(8)=RageAkComponent0
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionRadius=55
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedFleshpound.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    RotationRate=(Pitch=50000,Yaw=40000,Roll=50000)
}