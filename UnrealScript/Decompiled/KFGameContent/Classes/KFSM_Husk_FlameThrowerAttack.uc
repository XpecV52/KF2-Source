/*******************************************************************************
 * KFSM_Husk_FlameThrowerAttack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Husk_FlameThrowerAttack extends KFSM_PlaySingleAnim;

var KFSprayActor FlameSprayArchetype;
var KFSprayActor MyFlameSpray;
var export editinline ParticleSystemComponent PSC_EndSpray;
var bool bFlameThrowerActive;
var AkEvent FlameAttackPlayEvent;
var AkEvent FlameAttackStopEvent;

protected function bool InternalCanDoSpecialMove()
{
    local Vector HitLocation, HitNormal;
    local Actor HitActor;

    if(KFPOwner.IsHumanControlled())
    {
        return KFPOwner.IsCombatCapable();
    }
    if(((AIOwner == none) || AIOwner.MyKFPawn == none) || AIOwner.Enemy == none)
    {
        return false;
    }
    if(!KFPOwner.IsCombatCapable())
    {
        return false;
    }
    HitActor = PawnOwner.Trace(HitLocation, HitNormal, AIOwner.Enemy.Location, PawnOwner.Location, true);
    if((HitActor != none) && HitActor != AIOwner.Enemy)
    {
        return false;
    }
    return super(KFSpecialMove).InternalCanDoSpecialMove();
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    if(AIOwner != none)
    {
        if(!Class'Engine'.static.GetEngine().bDisableAILogging && AIOwner != none)
        {
            AIOwner.AILog_Internal((string(self) @ "started for") @ string(AIOwner), 'Husk');
        }
        AIOwner.AIZeroMovementVariables();
    }
}

simulated function TurnOnFlamethrower()
{
    local KFPawn_ZedHusk HuskOwner;

    HuskOwner = KFPawn_ZedHusk(PawnOwner);
    if(((HuskOwner == none) || !HuskOwner.IsAliveAndWell()) || bFlameThrowerActive)
    {
        return;
    }
    if(MyFlameSpray == none)
    {
        MyFlameSpray = HuskOwner.Spawn(FlameSprayArchetype.Class, HuskOwner,, HuskOwner.Location, HuskOwner.Rotation, FlameSprayArchetype, true);
        MyFlameSpray.ImpactProjectileClass = Class'KFProj_HuskGroundFire';
        MyFlameSpray.OwningKFPawn = HuskOwner;
        MyFlameSpray.SetBase(HuskOwner,, HuskOwner.Mesh, MyFlameSpray.SpraySocketName);
        if((HuskOwner.WorldInfo.NetMode != NM_DedicatedServer) && PSC_EndSpray != none)
        {
            if(PSC_EndSpray != none)
            {
                PSC_EndSpray.SetTemplate(MyFlameSpray.SprayEndEffect);
            }
            HuskOwner.Mesh.AttachComponentToSocket(PSC_EndSpray, MyFlameSpray.SpraySocketName);
        }
        if(HuskOwner.Role < ROLE_Authority)
        {
            MyFlameSpray.bVisualOnly = true;
        }
    }
    bFlameThrowerActive = true;
    if((HuskOwner.Role == ROLE_Authority) || HuskOwner.IsLocallyControlled())
    {
        HuskOwner.SetWeaponAmbientSound(FlameAttackPlayEvent);
    }
    if(MyFlameSpray != none)
    {
        MyFlameSpray.SprayDamage.X = float(HuskOwner.GetRallyBoostDamage(int(MyFlameSpray.default.SprayDamage.X)));
        MyFlameSpray.SprayDamage.Y = float(HuskOwner.GetRallyBoostDamage(int(MyFlameSpray.default.SprayDamage.Y)));
        MyFlameSpray.BeginSpray();
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    TurnOffFlamethrower();
    super.SpecialMoveEnded(PrevMove, NextMove);
    if(AIOwner != none)
    {
        if(!Class'Engine'.static.GetEngine().bDisableAILogging && AIOwner != none)
        {
            AIOwner.AILog_Internal((string(self) @ "ended for") @ string(AIOwner), 'Husk');
        }
    }
}

simulated function TurnOffFlamethrower()
{
    local KFPawn_ZedHusk HuskOwner;

    HuskOwner = KFPawn_ZedHusk(PawnOwner);
    if((HuskOwner == none) || !bFlameThrowerActive)
    {
        return;
    }
    bFlameThrowerActive = false;
    if((HuskOwner.Role == ROLE_Authority) || HuskOwner.IsLocallyControlled())
    {
        HuskOwner.SetWeaponAmbientSound(FlameAttackStopEvent);
    }
    if(PSC_EndSpray != none)
    {
        PSC_EndSpray.ActivateSystem();
    }
    if(MyFlameSpray != none)
    {
        MyFlameSpray.DetachAndFinish();
    }
}

function bool CanOverrideMoveWith(name NewMove)
{
    if(bCanBeInterrupted && (((NewMove == 'KFSM_Stunned') || NewMove == 'KFSM_Stumble') || NewMove == 'KFSM_Knockdown') || NewMove == 'KFSM_Frozen')
    {
        return true;
    }
    return false;
}

defaultproperties
{
    FlameSprayArchetype=SprayActor_Flame'zed_husk_arch.Husk_Flamethrower_Flame'
    begin object name=FlameEndSpray0 class=ParticleSystemComponent
        bAutoActivate=false
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: ParticleSystemComponent'Default__KFSM_Husk_FlameThrowerAttack.FlameEndSpray0'
    PSC_EndSpray=FlameEndSpray0
    FlameAttackPlayEvent=AkEvent'WW_ZED_Husk.ZED_Husk_SFX_Flamethrower_LP'
    FlameAttackStopEvent=AkEvent'WW_ZED_Husk.ZED_Husk_SFX_Flamethrower_Stop'
    AnimName=Player_Flame
    bCanBeInterrupted=true
    bUseCustomRotationRate=true
    bDisableMovement=true
    bDisableSteering=false
    bDisableTurnInPlace=true
    CustomRotationRate=(Pitch=66000,Yaw=100000,Roll=66000)
    CustomTurnInPlaceAnimRate=2
    Handle=KFSM_Husk_FlameThrowerAttack
}