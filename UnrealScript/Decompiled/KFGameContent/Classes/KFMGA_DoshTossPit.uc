/*******************************************************************************
 * KFMGA_DoshTossPit generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMGA_DoshTossPit extends KFMGA_Target
    notplaceable
    hidecategories(Navigation);

/** how much dosh to return to the player per-bucket */
var() const int DoshReward;
/** how long to blend to closed after a bucket is hit */
var() float TimeToBlend;
var AnimNodeBlendPerBone CachedBlendNode;
/** PSC for internal bucket glow - Always on, gets color shifted between states */
var() export editinline ParticleSystemComponent InnerGlowPSC;
/** PSC for external bucket glow - Only on when the box is inactive */
var() export editinline ParticleSystemComponent OuterGlowPSC;
/** Glow Colors */
var() Color ActiveGlowColor;
var() Color InactiveGlowColor;

simulated event TakeDamage(int DamageAmount, Controller EventInstigator, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser);

simulated event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    if(TimeToBlend > 0)
    {
        TimeToBlend -= DeltaTime;
        SetBucketLidState(((TimeToBlend > 0) ? 1 - (TimeToBlend / default.TimeToBlend) : 1));
    }
}

simulated event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    if((KFDroppedPickup_Cash(Other) != none) && KFDroppedPickup_Cash(Other).CollisionComponent.RigidBodyIsAwake())
    {
        KFDroppedPickup_Cash(Other).NotifyMinigameHit((self));
    }
}

function ValidHit(Controller EventInstigator, Actor HitActor)
{
    DoshHit(KFDroppedPickup_Cash(HitActor));
}

function DoshHit(KFDroppedPickup_Cash Cash)
{
    local KFPlayerController KFPC;
    local KFPlayerReplicationInfo KFPRI;

    if((Cash != none) && IsAlive())
    {
        -- NumHits;
        if((NumHits <= 0) && SpawnerOwner != none)
        {
            SpawnerOwner.TargetHit(self, Cash.Instigator.Controller);
            PlayDeath();
            KFPC = KFPlayerController(Cash.Owner);
            if(KFPC != none)
            {
                KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
                if(KFPRI != none)
                {
                    KFPRI.AddDosh(DoshReward);
                }
            }
        }
    }
    Cash.Destroy();
}

simulated event Reset()
{
    local Vector RelativeOffset;

    SetBucketLidState(0);
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        OuterGlowPSC.SetHidden(true);
        OuterGlowPSC.DeactivateSystem();
        InnerGlowPSC.SetHidden(true);
        InnerGlowPSC.DeactivateSystem();
        InnerGlowPSC.SetColorParameter('Glow_Color', InactiveGlowColor);
    }
    super.Reset();
    RelativeOffset.Z = CollisionCylinder.CollisionHeight + float(10);
    SetRelativeLocation(RelativeOffset);
    TimeToBlend = 0;
}

simulated function SetBucketLidState(float BlendAmount)
{
    local name TopName;
    local KFMG_RiggedTargetGame TargetGame;
    local int BoneIndex;

    TargetGame = KFMG_RiggedTargetGame(SpawnerOwner);
    if((AttachBoneName != 'None') && TargetGame != none)
    {
        if(CachedBlendNode == none)
        {
            CachedBlendNode = AnimNodeBlendPerBone(TargetGame.MinigameRig.SkeletalMeshComponent.FindAnimNode('BucketBlend'));
        }
        if(CachedBlendNode != none)
        {
            TopName = name("BucketTop" $ Right(string(AttachBoneName), 2));
            BoneIndex = TargetGame.MinigameRig.SkeletalMeshComponent.MatchRefBone(TopName);
            if(BoneIndex != -1)
            {
                CachedBlendNode.Child2PerBoneWeight[BoneIndex] = BlendAmount;
            }
        }
    }
}

simulated function PlayDeath()
{
    super.PlayDeath();
    TimeToBlend = default.TimeToBlend;
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        OuterGlowPSC.SetHidden(false);
        OuterGlowPSC.ActivateSystem(true);
        InnerGlowPSC.SetHidden(false);
        InnerGlowPSC.SetColorParameter('Glow_Color', InactiveGlowColor);
    }
}

simulated event SetActive()
{
    bActiveTarget = true;
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        OuterGlowPSC.SetHidden(true);
        InnerGlowPSC.SetHidden(false);
        InnerGlowPSC.ActivateSystem(true);
        InnerGlowPSC.SetColorParameter('Glow_Color', ActiveGlowColor);
    }
}

simulated event SetInactive()
{
    bActiveTarget = false;
}

simulated event Finalize()
{
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        OuterGlowPSC.SetHidden(true);
        OuterGlowPSC.DeactivateSystem();
        InnerGlowPSC.SetHidden(true);
        InnerGlowPSC.DeactivateSystem();
        InnerGlowPSC.SetColorParameter('Glow_Color', InactiveGlowColor);
    }
}

defaultproperties
{
    DoshReward=50
    TimeToBlend=0.5
    begin object name=InnerGlow0 class=ParticleSystemComponent
        ReplacementPrimitive=none
        HiddenGame=true
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_DoshTossPit.InnerGlow0'
    InnerGlowPSC=InnerGlow0
    begin object name=OuterGlow0 class=ParticleSystemComponent
        ReplacementPrimitive=none
        HiddenGame=true
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_DoshTossPit.OuterGlow0'
    OuterGlowPSC=OuterGlow0
    ActiveGlowColor=(B=0,G=0,R=50,A=255)
    InactiveGlowColor=(B=0,G=50,R=0,A=255)
    begin object name=Mesh0 class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFMGA_DoshTossPit.Mesh0'
    Mesh=Mesh0
    begin object name=Cylinder0 class=CylinderComponent
        CollisionHeight=30
        CollisionRadius=30
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFMGA_DoshTossPit.Cylinder0'
    CollisionCylinder=Cylinder0
    AcceptedDamageTypes=none
    DeathSFXComponent=AkComponent'Default__KFMGA_DoshTossPit.DeathSFX0'
    begin object name=Cylinder0 class=CylinderComponent
        CollisionHeight=30
        CollisionRadius=30
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFMGA_DoshTossPit.Cylinder0'
    Components(0)=Cylinder0
    begin object name=Mesh0 class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFMGA_DoshTossPit.Mesh0'
    Components(1)=Mesh0
    Components(2)=AkComponent'Default__KFMGA_DoshTossPit.DeathSFX0'
    begin object name=InnerGlow0 class=ParticleSystemComponent
        ReplacementPrimitive=none
        HiddenGame=true
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_DoshTossPit.InnerGlow0'
    Components(3)=InnerGlow0
    begin object name=OuterGlow0 class=ParticleSystemComponent
        ReplacementPrimitive=none
        HiddenGame=true
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_DoshTossPit.OuterGlow0'
    Components(4)=OuterGlow0
    begin object name=Cylinder0 class=CylinderComponent
        CollisionHeight=30
        CollisionRadius=30
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFMGA_DoshTossPit.Cylinder0'
    CollisionComponent=Cylinder0
}