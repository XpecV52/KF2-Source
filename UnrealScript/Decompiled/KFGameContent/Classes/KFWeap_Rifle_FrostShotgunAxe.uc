/*******************************************************************************
 * KFWeap_Rifle_FrostShotgunAxe generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Rifle_FrostShotgunAxe extends KFWeap_MeleeBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var float LastFireInterval;
var int iInstantHitDamageOnEnemyFrozen;
var int iNormalInstantHitDamage;

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    return 2;
}

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    iNormalInstantHitDamage = int(InstantHitDamage[3]);
}

simulated function ProcessInstantHitEx(byte FiringMode, ImpactInfo Impact, optional int NumHits, optional out float out_PenetrationVal, optional int ImpactNum)
{
    local KFPerk InstigatorPerk;

    InstigatorPerk = GetPerk();
    if(InstigatorPerk != none)
    {
        InstigatorPerk.UpdatePerkHeadShots(Impact, InstantHitDamageTypes[FiringMode], ImpactNum);
    }
    super(KFWeapon).ProcessInstantHitEx(FiringMode, Impact, NumHits, out_PenetrationVal, ImpactNum);
}

event RecieveClientImpact(byte FiringMode, const out ImpactInfo Impact, optional out float PenetrationValue, optional int ImpactNum)
{
    super(KFWeapon).RecieveClientImpact(FiringMode, Impact, PenetrationValue, ImpactNum);
}

simulated function SetIronSights(bool bNewIronSights)
{
    super(KFWeapon).SetIronSights(bNewIronSights);
}

simulated function bool ShouldOwnerWalk()
{
    return super(KFWeapon).ShouldOwnerWalk();
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 0) && ShouldAutoReload(FireModeNum))
    {
        FireModeNum = 2;
    }
    if(FireModeNum == 2)
    {
        BeginFire(FireModeNum);
        return;
    }
    if((FireModeNum == 3) && WeaponFireTypes[FireModeNum] == 2)
    {
        StartMeleeFire(FireModeNum, MeleeAttackHelper.ChooseAttackDir(), 0);
        return;
    }
    super.StartFire(FireModeNum);
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    if(bUsingSights)
    {
        SetIronSights(false);
    }
    StartFire(1);
}

simulated function float GetFireInterval(byte FireModeNum)
{
    if((FireModeNum == 0) && AmmoCount[FireModeNum] == 0)
    {
        return LastFireInterval;
    }
    return super(Weapon).GetFireInterval(FireModeNum);
}

simulated function bool CanOverrideMagReload(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        return true;
    }
    return super.CanOverrideMagReload(FireModeNum);
}

simulated function int GetMeleeDamage(byte FireModeNum, optional Vector RayDir)
{
    local KFMeleeHelperWeaponFrostShotgunAxe oHelper;
    local int Damage;

    oHelper = KFMeleeHelperWeaponFrostShotgunAxe(MeleeAttackHelper);
    if(oHelper.IsEnemyIced())
    {
        InstantHitDamage[FireModeNum] = float(iInstantHitDamageOnEnemyFrozen);        
    }
    else
    {
        InstantHitDamage[FireModeNum] = float(iNormalInstantHitDamage);
    }
    Damage = super.GetMeleeDamage(FireModeNum, RayDir);
    return Damage;
}

simulated function int GetModifiedDamage(byte FireModeNum, optional Vector RayDir)
{
    switch(FireModeNum)
    {
        case 0:
            return int(GetUpgradedStatValue(InstantHitDamage[FireModeNum], 5, CurrentWeaponUpgradeIndex));
            break;
        case 1:
            return int(GetUpgradedStatValue(InstantHitDamage[FireModeNum], 6, CurrentWeaponUpgradeIndex));
            break;
        case 3:
            return int(GetUpgradedStatValue(InstantHitDamage[FireModeNum], 7, CurrentWeaponUpgradeIndex));
            break;
        default:
            break;
    }
    return int(GetUpgradedStatValue(InstantHitDamage[FireModeNum], 5, CurrentWeaponUpgradeIndex));
}

static simulated function float CalculateTraderWeaponStatDamage()
{
    local float BaseDamage, DoTDamage;
    local class<KFDamageType> DamageType;

    BaseDamage = default.InstantHitDamage[0];
    DamageType = class<KFDamageType>(default.InstantHitDamageTypes[0]);
    if((DamageType != none) && DamageType.default.DoT_Type != 0)
    {
        DoTDamage = (DamageType.default.DoT_Duration / DamageType.default.DoT_Interval) * (BaseDamage * DamageType.default.DoT_DamageScale);
    }
    return (BaseDamage * float(default.NumPellets[0])) + DoTDamage;
}

static simulated function float CalculateTraderWeaponStatFireRate()
{
    return 60 / default.FireInterval[0];
}

simulated function KFProjectile SpawnAllProjectiles(class<KFProjectile> KFProjClass, Vector RealStartLoc, Vector AimDir)
{
    local KFPerk InstigatorPerk;

    if(CurrentFireMode == 4)
    {
        return SpawnProjectile(KFProjClass, RealStartLoc, AimDir);
    }
    InstigatorPerk = GetPerk();
    if(InstigatorPerk != none)
    {
        Spread[CurrentFireMode] = default.Spread[CurrentFireMode] * InstigatorPerk.GetTightChokeModifier();
    }
    return super(KFWeapon).SpawnAllProjectiles(KFProjClass, RealStartLoc, AimDir);
}

simulated function PlayMeleeSettleAnim()
{
    PlayAnimation(MeleeAttackSettleAnims[0], 0, false, 0.1);
}

simulated state MeleeBlocking
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if(bUsingSights)
        {
            SetIronSights(false);
        }
    }

    simulated function bool AllowIronSights()
    {
        return false;
    }
    stop;    
}

defaultproperties
{
    LastFireInterval=0.5
    iInstantHitDamageOnEnemyFrozen=185
    bHasToBeConsideredAsRangedWeaponForPerks=true
    BlockDamageMitigation=0.6
    ParryDamageMitigationPercent=0.5
    BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Hammer'
    ParrySound=AkEvent'WW_WEP_Bullet_Impacts.Play_Parry_Wood'
    PackageKey="Frost_Shotgun_Axe"
    FirstPersonMeshName="WEP_1P_Frost_Shotgun_Axe_MESH.Wep_1stP_Frost_Shotgun_Axe_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_Frost_Shotgun_Axe_MESH.Wep_3rdP_Frost_Shotgun_Pickup"
    AttachmentArchetypeName="WEP_Frost_Shotgun_Axe_ARCH.Wep_Frost_Shotgun_Axe_3P"
    MuzzleFlashTemplateName="WEP_Frost_Shotgun_Axe_ARCH.Wep_Frost_Shotgun_Axe_MuzzleFlash"
    bHasIronSights=true
    bWarnAIWhenAiming=true
    bCanBeReloaded=true
    bHasFireLastAnims=true
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_Primary
    InventorySize=7
    PenetrationPower=/* Array type was not detected. */
    AimCorrectionSize=40
    MeshFOV=65
    MeshIronSightFOV=45
    PlayerIronSightFOV=65
    DOF_FG_MaxNearBlurSize=3.5
    AimWarningDelay=(X=0.4,Y=0.8)
    GroupPriority=80
    WeaponSelectTexture=Texture2D'WEP_UI_Frost_Shotgun_Axe_TEX.UI_WeaponSelect_FrostGun'
    MagazineCapacity=6
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=66
    InitialSpareMags=4
    WeaponFireWaveForm=ForceFeedbackWaveform'FX_ForceFeedback_ARCH.Gunfire.Medium_Recoil'
    BonesToLockOnEmpty=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=8,Y=7,Z=-3.5)
    begin object name=MeleeHelper class=KFMeleeHelperWeaponFrostShotgunAxe
        bUseDirectionalMelee=true
        bHasChainAttacks=true
        MeleeImpactCamShakeScale=0.03
        MaxHitRange=250
        HitboxChain=/* Array type was not detected. */
        WorldImpactEffects=KFImpactEffectInfo'FX_Impacts_ARCH.Bladed_melee_impact'
    object end
    // Reference: KFMeleeHelperWeaponFrostShotgunAxe'Default__KFWeap_Rifle_FrostShotgunAxe.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    EjectedShellForegroundDuration=1.5
    NumPellets=/* Array type was not detected. */
    maxRecoilPitch=1050
    minRecoilPitch=900
    maxRecoilYaw=350
    minRecoilYaw=-350
    RecoilRate=0.075
    RecoilViewRotationScale=0.6
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=900
    RecoilMinPitchLimit=64785
    RecoilISMaxYawLimit=50
    RecoilISMinYawLimit=65485
    RecoilISMaxPitchLimit=500
    RecoilISMinPitchLimit=65485
    HippedRecoilModifier=1.3
    FallingRecoilModifier=1.5
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitMomentum=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=3,Z=-2.5)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Rifle_FrostShotgunAxe.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Frost Fang"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Rifle_FrostShotgunAxe.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Rifle_FrostShotgunAxe.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}