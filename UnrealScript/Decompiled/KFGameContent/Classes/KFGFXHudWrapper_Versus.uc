/*******************************************************************************
 * KFGFXHudWrapper_Versus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFXHudWrapper_Versus extends KFGFxHudWrapper
    transient
    config(Game)
    hidecategories(Navigation);

const FriendlyZedInfoShowDistanceSQ = 562000;

struct sHiddenHumanPawnInfo
{
    var Pawn HumanPawn;
    var PlayerReplicationInfo HumanPRI;

    structdefaultproperties
    {
        HumanPawn=none
        HumanPRI=none
    }
};

var class<KFGFxMoviePlayer_HUD> HumanHUDClass;
var class<KFGFxMoviePlayer_HUD> ZedHUDClass;
var float HumanPlayerIconInterpMult;
var() float ZedPlayerHudLocX;
var() float ZedPlayerHudLocY;
var int HumanStatusBarLengthMax;
var Texture2D GenericHumanIconTexture;
var Texture2D BossIconTexture;
var Color BossIconColor;

simulated function PostBeginPlay()
{
    local KFPawn_MonsterBoss KFPMB;

    super.PostBeginPlay();
    foreach WorldInfo.AllPawns(Class'KFPawn_MonsterBoss', KFPMB)
    {
        BossPawn = KFPMB;
        break;        
    }    
}

function CreateHUDMovie()
{
    if(!Class'WorldInfo'.static.IsMenuLevel())
    {
        if(HudMovie != none)
        {
            RemoveMovies();
        }
        HudMovie = new GetHUDClass();
        HudMovie.SetTimingMode(1);
        HudMovie.Init(Class'Engine'.static.GetEngine().GamePlayers[HudMovie.LocalPlayerOwnerIndex]);
    }
}

function class<KFGFxMoviePlayer_HUD> GetHUDClass()
{
    if((((KFPlayerOwner != none) && KFPlayerOwner.GetTeamNum() == 255) && KFPlayerOwner.PlayerReplicationInfo != none) && !KFPlayerOwner.PlayerReplicationInfo.bOnlySpectator)
    {
        return ZedHUDClass;
    }
    return HumanHUDClass;
}

function DrawHUD()
{
    local PlayerReplicationInfo PRI;
    local KFPlayerReplicationInfoVersus KFPRIV;
    local float ThisDot;
    local Vector ViewLocation, ViewVector, PawnLocation;
    local Rotator ViewRotation;
    local Pawn TestPawn;
    local KFPawn_Human HumanPawn;
    local array<PlayerReplicationInfo> VisibleHumanPlayers;
    local array<sHiddenHumanPawnInfo> HiddenHumanPlayers;
    local int I, HiddenHumanIndex;

    super.DrawHUD();
    if(KFPlayerOwner.PlayerCamera != none)
    {
        KFPlayerOwner.PlayerCamera.GetCameraViewPoint(ViewLocation, ViewRotation);
    }
    Canvas.EnableStencilTest(true);
    ViewVector = vector(ViewRotation);
    if((KFPlayerOwner != none) && KFPlayerOwner.GetTeamNum() == 255)
    {
        foreach WorldInfo.AllPawns(Class'Pawn', TestPawn)
        {
            if((TestPawn.IsAliveAndWell() && TestPawn != BossPawn) && TestPawn != KFPlayerOwner.Pawn)
            {
                if((TestPawn.Mesh != none) && (WorldInfo.TimeSeconds - TestPawn.Mesh.LastRenderTime) < 0.2)
                {
                    ThisDot = Normal(TestPawn.Location - ViewLocation) Dot ViewVector;
                    if(ThisDot > 0)
                    {
                        HumanPawn = KFPawn_Human(TestPawn);
                        if(HumanPawn != none)
                        {
                            if(DrawPreciseEnemyHumanHUD(HumanPawn))
                            {
                                VisibleHumanPlayers.AddItem(HumanPawn.PlayerReplicationInfo;                                
                            }
                            else
                            {
                                HiddenHumanPlayers.Insert(0, 1;
                                HiddenHumanPlayers[0].HumanPawn = TestPawn;
                                HiddenHumanPlayers[0].HumanPRI = HumanPawn.PlayerReplicationInfo;
                            }                            
                        }
                        else
                        {
                            if(TestPawn.GetTeamNum() == 255)
                            {
                                if(VSizeSq(KFPlayerOwner.ViewTarget.Location - TestPawn.Location) <= float(562000))
                                {
                                    DrawFriendlyZedHUD(TestPawn);
                                }
                            }
                        }
                    }
                    continue;
                }
                if(TestPawn.GetTeamNum() == 0)
                {
                    HiddenHumanPlayers.Insert(0, 1;
                    HiddenHumanPlayers[0].HumanPawn = TestPawn;
                    HiddenHumanPlayers[0].HumanPRI = TestPawn.PlayerReplicationInfo;
                }
            }            
        }        
        I = 0;
        J0x487:

        if(I < WorldInfo.GRI.PRIArray.Length)
        {
            PRI = WorldInfo.GRI.PRIArray[I];
            if((PRI.GetTeamNum() == PlayerOwner.GetTeamNum()) || VisibleHumanPlayers.Find(PRI != -1)
            {                
            }
            else
            {
                HiddenHumanIndex = HiddenHumanPlayers.Find('HumanPRI', PRI;
                if((HiddenHumanIndex != -1) && HiddenHumanPlayers[HiddenHumanIndex].HumanPawn != none)
                {
                    PawnLocation = HiddenHumanPlayers[HiddenHumanIndex].HumanPawn.Location;
                }
                if(IsZero(PawnLocation))
                {
                    KFPRIV = KFPlayerReplicationInfoVersus(PRI);
                    PawnLocation = KFPRIV.GetReplicatedPawnIconLocation(HumanPlayerIconInterpMult);
                    if(IsZero(PawnLocation))
                    {
                        goto J0x6F4;
                    }
                }
                ThisDot = Normal(PawnLocation - ViewLocation) Dot ViewVector;
                if(ThisDot > 0)
                {
                    DrawEnemyHumanHUD(PRI, PawnLocation);
                }
            }
            J0x6F4:

            ++ I;
            goto J0x487;
        }
    }
    if(((((BossPawn != none) && BossPawn != PlayerOwner.Pawn) && BossPawn.IsAliveAndWell()) && (WorldInfo.TimeSeconds - BossPawn.Mesh.LastRenderTime) > 0.2) && (PlayerOwner.GetTeamNum() == 255) || BossPawn.ShouldDrawBossIcon())
    {
        ThisDot = Normal(BossPawn.Location - ViewLocation) Dot ViewVector;
        if(ThisDot > 0)
        {
            DrawBossHUD();
        }
    }
    Canvas.EnableStencilTest(false);
}

function DrawZedPlayerHud();

simulated function DrawFriendlyZedHUD(Pawn MonsterPawn)
{
    local float Percentage, BarHeight, BarLength;
    local Vector ScreenPos, TargetLocation;
    local FontRenderInfo MyFontRenderInfo;
    local float FontScale;

    MyFontRenderInfo = Canvas.CreateFontRenderInfo(true);
    BarLength = FMin(float(HumanStatusBarLengthMax) * (float(Canvas.SizeX) / 1024), float(HumanStatusBarLengthMax)) * FriendlyHudScale;
    BarHeight = FMin(8 * (float(Canvas.SizeX) / 1024), 8) * FriendlyHudScale;
    TargetLocation = MonsterPawn.Location + ((vect(0, 0, 1) * MonsterPawn.GetCollisionHeight()) * 1.2);
    ScreenPos = Canvas.Project(TargetLocation);
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return;
    }
    Percentage = FMin(float(MonsterPawn.Health) / float(MonsterPawn.HealthMax), 100);
    DrawKFBar(Percentage, BarLength, BarHeight, ScreenPos.X - (BarLength * 0.5), ScreenPos.Y, HealthColor);
    FontScale = Class'KFGameEngine'.static.GetKFFontScale();
    Canvas.Font = Class'KFGameEngine'.static.GetKFCanvasFont();
    Canvas.SetDrawColorStruct(PlayerBarTextColor);
    Canvas.SetPos(ScreenPos.X - (BarLength * 0.5), ScreenPos.Y - (BarHeight * float(3)));
    Canvas.DrawText(MonsterPawn.PlayerReplicationInfo.PlayerName,, FontScale * FriendlyHudScale, FontScale * FriendlyHudScale, MyFontRenderInfo);
}

function DrawEnemyHumanHUD(PlayerReplicationInfo PRI, Vector IconWorldLocation)
{
    local Vector ScreenPos;
    local float IconSizeMult;

    ScreenPos = Canvas.Project(IconWorldLocation + ((vect(0, 0, 1) * Class'KFPawn_Human'.default.CylinderComponent.CollisionHeight) * 1.2));
    IconSizeMult = (PlayerStatusIconSize * FriendlyHudScale) * 0.5;
    ScreenPos.X -= IconSizeMult;
    ScreenPos.Y -= IconSizeMult;
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return;
    }
    Canvas.SetDrawColor(255, 255, 255, 255);
    Canvas.SetPos(ScreenPos.X, ScreenPos.Y);
    Canvas.DrawTile(GenericHumanIconTexture, PlayerStatusIconSize * FriendlyHudScale, PlayerStatusIconSize * FriendlyHudScale, 0, 0, 256, 256);
}

function bool DrawPreciseEnemyHumanHUD(KFPawn_Human KFPH)
{
    local float Percentage, BarHeight, BarLength;
    local Vector ScreenPos, TargetLocation;
    local KFPlayerReplicationInfo KFPRI;
    local float IconSizeMult;

    KFPRI = KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo);
    if(KFPRI == none)
    {
        return false;
    }
    BarLength = FMin(float(HumanStatusBarLengthMax) * (float(Canvas.SizeX) / 1024), float(HumanStatusBarLengthMax)) * FriendlyHudScale;
    BarHeight = FMin(8 * (float(Canvas.SizeX) / 1024), 8) * FriendlyHudScale;
    TargetLocation = KFPH.Location + ((vect(0, 0, 1) * KFPH.GetCollisionHeight()) * 1.2);
    ScreenPos = Canvas.Project(TargetLocation);
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return true;
    }
    Percentage = FMin(float(KFPH.Health) / float(KFPH.HealthMax), 100);
    DrawKFBar(Percentage, BarLength, BarHeight, ScreenPos.X - (BarLength * 0.5), ScreenPos.Y, HealthColor);
    Percentage = FMin(float(KFPH.Armor) / float(KFPH.MaxArmor), 100);
    DrawKFBar(Percentage, BarLength, BarHeight, ScreenPos.X - (BarLength * 0.5), ScreenPos.Y - BarHeight, ArmorColor);
    IconSizeMult = (PlayerStatusIconSize * FriendlyHudScale) * 0.5;
    ScreenPos.X -= IconSizeMult;
    ScreenPos.Y -= (IconSizeMult * 2.5);
    Canvas.SetDrawColor(255, 255, 255, 255);
    Canvas.SetPos(ScreenPos.X, ScreenPos.Y);
    Canvas.DrawTile(GenericHumanIconTexture, PlayerStatusIconSize * FriendlyHudScale, PlayerStatusIconSize * FriendlyHudScale, 0, 0, 256, 256);
    return true;
}

function DrawBossHUD()
{
    local Vector ScreenPos, TargetLocation;
    local float IconSizeMult;

    TargetLocation = BossPawn.Location + ((vect(0, 0, 1) * BossPawn.GetCollisionHeight()) * 1.2);
    ScreenPos = Canvas.Project(TargetLocation);
    IconSizeMult = (PlayerStatusIconSize * FriendlyHudScale) * 0.5;
    ScreenPos.X -= IconSizeMult;
    ScreenPos.Y -= IconSizeMult;
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return;
    }
    Canvas.SetDrawColorStruct(BossIconColor);
    Canvas.SetPos(ScreenPos.X, ScreenPos.Y);
    Canvas.DrawTile(BossIconTexture, PlayerStatusIconSize * FriendlyHudScale, PlayerStatusIconSize * FriendlyHudScale, 0, 0, 256, 256);
}

defaultproperties
{
    HumanHUDClass=Class'KFGame.KFGFxMoviePlayer_HUD'
    ZedHUDClass=Class'KFGFxMoviePlayer_HUD_Versus'
    HumanPlayerIconInterpMult=0.007
    ZedPlayerHudLocX=0.25
    ZedPlayerHudLocY=0.85
    HumanStatusBarLengthMax=80
    GenericHumanIconTexture=Texture2D'UI_PerkIcons_TEX.UI_Horzine_H_Logo'
    BossIconTexture=Texture2D'ZED_Patriarch_UI.ZED-VS_Icon_Boss'
    BossIconColor=(B=255,G=255,R=255,A=192)
}