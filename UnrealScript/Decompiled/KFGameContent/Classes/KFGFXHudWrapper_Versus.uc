/*******************************************************************************
 * KFGFXHudWrapper_Versus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFXHudWrapper_Versus extends KFGFxHudWrapper
    transient
    config(Game)
    hidecategories(Navigation);

const FriendlyZedInfoShowDistanceSQ = 562000;

var KFGameReplicationInfoVersus MyKFGRIV;
var class<KFGFxMoviePlayer_HUD> HumanHUDClass;
var class<KFGFxMoviePlayer_HUD> ZedHUDClass;
var() float ZedPlayerHudLocX;
var() float ZedPlayerHudLocY;
var int HumanStatusBarLengthMax;
var const Texture2D BossIconTexture;
var const Color BossIconColor;
var const localized string WaitingToSpawnString;
var const localized string ZedTakeOverActiveString;
var const localized string PerkSwitchAllowedString;
var int LastTeamIndex;

simulated function PostBeginPlay()
{
    local KFPawn_Monster KFP;

    super(KFHUDBase).PostBeginPlay();
    foreach WorldInfo.AllPawns(Class'KFPawn_Monster', KFP)
    {
        if(KFP.IsABoss())
        {
            BossRef = KFInterface_MonsterBoss(KFP);
            break;
        }        
    }    
}

function CreateHUDMovie(optional bool bForce)
{
    if(!Class'WorldInfo'.static.IsMenuLevel())
    {
        if(((KFPlayerOwner != none) && KFPlayerOwner.PlayerReplicationInfo.GetTeamNum() != LastTeamIndex) || bForce)
        {
            LastTeamIndex = KFPlayerOwner.GetTeamNum();
            if(HudMovie != none)
            {
                RemoveMovies();
            }
            HudMovie = new GetHUDClass();
            HudMovie.SetTimingMode(1);
            HudMovie.Init(Class'Engine'.static.GetEngine().GamePlayers[HudMovie.LocalPlayerOwnerIndex]);
        }
    }
}

function class<KFGFxMoviePlayer_HUD> GetHUDClass()
{
    if((((KFPlayerOwner != none) && KFPlayerOwner.GetTeamNum() == 255) && KFPlayerOwner.PlayerReplicationInfo != none) && !KFPlayerOwner.PlayerReplicationInfo.bOnlySpectator)
    {
        return ZedHUDClass;
    }
    return HumanHUDClass;
}

function DrawHUD()
{
    local float ThisDot;
    local Vector ViewLocation, ViewVector, TestPawnLocation;
    local Rotator ViewRotation;
    local Pawn TestPawn;
    local KFPawn_Human HumanPawn;
    local array<PlayerReplicationInfo> VisibleHumanPlayers;
    local array<sHiddenHumanPawnInfo> HiddenHumanPlayers;
    local byte MyTeamNum;

    super.DrawHUD();
    if((WorldInfo.GRI == none) || (KFPlayerOwner != none) && KFPlayerOwner.bCinematicMode)
    {
        return;
    }
    if(KFPlayerOwner.PlayerCamera != none)
    {
        KFPlayerOwner.PlayerCamera.GetCameraViewPoint(ViewLocation, ViewRotation);
    }
    Canvas.EnableStencilTest(true);
    ViewVector = vector(ViewRotation);
    MyTeamNum = KFPlayerOwner.GetTeamNum();
    if(MyKFGRIV == none)
    {
        MyKFGRIV = KFGameReplicationInfoVersus(WorldInfo.GRI);
    }
    if(MyKFGRIV == none)
    {
        return;
    }
    if((KFPlayerOwner != none) && MyTeamNum == 255)
    {
        foreach WorldInfo.AllPawns(Class'Pawn', TestPawn)
        {
            if(TestPawn.PlayerReplicationInfo == none)
            {
                continue;                
            }
            if(((TestPawn.IsAliveAndWell() && TestPawn.Mesh.SkeletalMesh != none) && TestPawn.Mesh.bAnimTreeInitialised) && TestPawn != KFPlayerOwner.Pawn)
            {
                if((TestPawn.Mesh != none) && (WorldInfo.TimeSeconds - TestPawn.Mesh.LastRenderTime) < 0.2)
                {
                    TestPawnLocation = TestPawn.Mesh.GetPosition() + (TestPawn.CylinderComponent.CollisionHeight * vect(0, 0, 1));
                    ThisDot = Normal(TestPawnLocation - ViewLocation) Dot ViewVector;
                    if(ThisDot > 0)
                    {
                        HumanPawn = KFPawn_Human(TestPawn);
                        if(HumanPawn != none)
                        {
                            if(DrawPreciseHumanPlayerInfo(HumanPawn))
                            {
                                VisibleHumanPlayers.AddItem(HumanPawn.PlayerReplicationInfo;                                
                            }
                            else
                            {
                                HiddenHumanPlayers.Insert(0, 1;
                                HiddenHumanPlayers[0].HumanPawn = HumanPawn;
                                HiddenHumanPlayers[0].HumanPRI = HumanPawn.PlayerReplicationInfo;
                            }
                        }
                    }
                    continue;
                }
                if(TestPawn.GetTeamNum() == 0)
                {
                    HiddenHumanPlayers.Insert(0, 1;
                    HiddenHumanPlayers[0].HumanPawn = TestPawn;
                    HiddenHumanPlayers[0].HumanPRI = TestPawn.PlayerReplicationInfo;
                }
            }            
        }        
        if(!KFGRI.bHidePawnIcons)
        {
            CheckAndDrawHiddenPlayerIcons(VisibleHumanPlayers, HiddenHumanPlayers);
        }
    }
    CheckAndDrawBossPawnIcon(ViewLocation, ViewVector);
    Canvas.EnableStencilTest(false);
    if(((((MyTeamNum == 255) || MyKFGRIV.bRoundIsOver) && !MyKFGRIV.bMatchIsOver) && (PlayerOwner.Pawn == none) || PlayerOwner.Pawn.bPlayedDeath) && PlayerOwner.CanRestartPlayer())
    {
        if((MyKFGRIV.TimeUntilNextSpawn != 255) || MyKFGRIV.PlayerZedSpawnWaitTimeData.bTakeOverActive)
        {
            DrawRemainingTimeUntilSpawn(MyKFGRIV.TimeUntilNextSpawn, MyKFGRIV.PlayerZedSpawnWaitTimeData.bTakeOverActive);
        }
    }
}

simulated function CheckAndDrawBossPawnIcon(Vector ViewLocation, Vector ViewVector)
{
    local float ThisDot;
    local Vector BossPawnLocation;
    local KFPawn_Monster BossPawn;

    if(EqualEqual_InterfaceInterface(BossRef, (none)))
    {
        return;
    }
    BossPawn = BossRef.GetMonsterPawn();
    if(((((((BossPawn != none) && BossPawn.Mesh.SkeletalMesh != none) && BossPawn.Mesh.bAnimTreeInitialised) && BossPawn != PlayerOwner.Pawn) && BossPawn.IsAliveAndWell()) && (WorldInfo.TimeSeconds - BossPawn.Mesh.LastRenderTime) > 0.2) && (PlayerOwner.GetTeamNum() == 255) || BossPawn.ShouldDrawBossIcon())
    {
        BossPawnLocation = BossPawn.Mesh.GetPosition();
        ThisDot = Normal((BossPawnLocation + (BossPawn.CylinderComponent.CollisionHeight * vect(0, 0, 1))) - ViewLocation) Dot ViewVector;
        if(ThisDot > 0)
        {
            DrawBossPawnIcon(BossPawnLocation);
        }
    }
}

simulated function DrawFriendlyZedPawnIcon(Pawn MonsterPawn)
{
    local float Percentage, BarHeight, BarLength;
    local Vector ScreenPos, TargetLocation;
    local FontRenderInfo MyFontRenderInfo;
    local float FontScale;

    MyFontRenderInfo = Canvas.CreateFontRenderInfo(true);
    BarLength = FMin(float(HumanStatusBarLengthMax) * (float(Canvas.SizeX) / 1024), float(HumanStatusBarLengthMax)) * FriendlyHudScale;
    BarHeight = FMin(8 * (float(Canvas.SizeX) / 1024), 8) * FriendlyHudScale;
    TargetLocation = MonsterPawn.Mesh.GetPosition() + (MonsterPawn.CylinderComponent.CollisionHeight * vect(0, 0, 2.2));
    ScreenPos = Canvas.Project(TargetLocation);
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return;
    }
    Percentage = FMin(float(MonsterPawn.Health) / float(MonsterPawn.HealthMax), 100);
    DrawKFBar(Percentage, BarLength, BarHeight, ScreenPos.X - (BarLength * 0.5), ScreenPos.Y, HealthColor);
    FontScale = Class'KFGameEngine'.static.GetKFFontScale();
    Canvas.Font = Class'KFGameEngine'.static.GetKFCanvasFont();
    Canvas.SetDrawColorStruct(PlayerBarTextColor);
    Canvas.SetPos(ScreenPos.X - (BarLength * 0.5), ScreenPos.Y - (BarHeight * float(3)));
    Canvas.DrawText(MonsterPawn.PlayerReplicationInfo.PlayerName,, FontScale * FriendlyHudScale, FontScale * FriendlyHudScale, MyFontRenderInfo);
}

function bool DrawPreciseHumanPlayerInfo(KFPawn_Human KFPH)
{
    local float Percentage, BarHeight, BarLength;
    local Vector ScreenPos, TargetLocation;
    local KFPlayerReplicationInfo KFPRI;
    local float IconSizeMult;

    KFPRI = KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo);
    if(KFPRI == none)
    {
        return false;
    }
    BarLength = FMin(float(HumanStatusBarLengthMax) * (float(Canvas.SizeX) / 1024), float(HumanStatusBarLengthMax)) * FriendlyHudScale;
    BarHeight = FMin(8 * (float(Canvas.SizeX) / 1024), 8) * FriendlyHudScale;
    TargetLocation = KFPH.Mesh.GetPosition() + (KFPH.CylinderComponent.CollisionHeight * vect(0, 0, 2.2));
    ScreenPos = Canvas.Project(TargetLocation);
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return true;
    }
    Percentage = FMin(float(KFPH.Health) / float(KFPH.HealthMax), 100);
    DrawKFBar(Percentage, BarLength, BarHeight, ScreenPos.X - (BarLength * 0.5), ScreenPos.Y, HealthColor);
    Percentage = FMin(float(KFPH.Armor) / float(KFPH.MaxArmor), 100);
    DrawKFBar(Percentage, BarLength, BarHeight, ScreenPos.X - (BarLength * 0.5), ScreenPos.Y - BarHeight, ArmorColor);
    IconSizeMult = (PlayerStatusIconSize * FriendlyHudScale) * 0.5;
    ScreenPos.X -= IconSizeMult;
    ScreenPos.Y -= (IconSizeMult * 2.5);
    Canvas.SetDrawColor(255, 255, 255, 255);
    Canvas.SetPos(ScreenPos.X, ScreenPos.Y);
    Canvas.DrawTile(GenericHumanIconTexture, PlayerStatusIconSize * FriendlyHudScale, PlayerStatusIconSize * FriendlyHudScale, 0, 0, 256, 256);
    return true;
}

function DrawBossPawnIcon(Vector BossLocation)
{
    local Vector ScreenPos, TargetLocation;
    local float IconSizeMult;

    if(EqualEqual_InterfaceInterface(BossRef, (none)))
    {
        return;
    }
    TargetLocation = BossLocation + (BossRef.GetMonsterPawn().CylinderComponent.CollisionHeight * vect(0, 0, 2.2));
    ScreenPos = Canvas.Project(TargetLocation);
    IconSizeMult = (PlayerStatusIconSize * FriendlyHudScale) * 0.5;
    ScreenPos.X -= IconSizeMult;
    ScreenPos.Y -= IconSizeMult;
    if((((ScreenPos.X < float(0)) || ScreenPos.X > float(Canvas.SizeX)) || ScreenPos.Y < float(0)) || ScreenPos.Y > float(Canvas.SizeY))
    {
        return;
    }
    Canvas.SetDrawColorStruct(BossIconColor);
    Canvas.SetPos(ScreenPos.X, ScreenPos.Y);
    Canvas.DrawTile(BossIconTexture, PlayerStatusIconSize * FriendlyHudScale, PlayerStatusIconSize * FriendlyHudScale, 0, 0, 256, 256);
}

function DrawRemainingTimeUntilSpawn(byte RemainingTime, bool bTakeOverIsActive)
{
    local Vector2D ScreenPos;
    local int ShadowSize;
    local float textscale, XL, YL;
    local string ActualString;
    local FontRenderInfo MyFontRenderInfo;

    MyFontRenderInfo = Canvas.CreateFontRenderInfo(true);
    if(bTakeOverIsActive && PlayerOwner.GetTeamNum() == 255)
    {
        ActualString = ZedTakeOverActiveString;        
    }
    else
    {
        if((PlayerOwner.GetTeamNum() == 0) && MyKFGRIV.bRoundIsOver)
        {
            ActualString = Repl(PerkSwitchAllowedString, "%x%", string(RemainingTime), true);            
        }
        else
        {
            ActualString = Repl(WaitingToSpawnString, "%x%", string(RemainingTime), true);
        }
    }
    textscale = Class'KFGameEngine'.static.GetKFFontScale() * (Canvas.ClipY / 768);
    Canvas.Font = Class'KFGameEngine'.static.GetKFCanvasFont();
    Canvas.TextSize(Repl(WaitingToSpawnString, "%x%", "00", true), XL, YL, textscale, textscale);
    ScreenPos.X = (Canvas.ClipX * 0.5) - (XL * 0.5);
    ScreenPos.Y = Canvas.ClipY * 0.25;
    ShadowSize = int(Canvas.ClipY / 360);
    Canvas.SetPos(ScreenPos.X + float(ShadowSize), ScreenPos.Y + float(ShadowSize));
    Canvas.SetDrawColor(0, 0, 0, 160);
    Canvas.DrawText(ActualString,, textscale, textscale, MyFontRenderInfo);
    Canvas.SetPos(ScreenPos.X, ScreenPos.Y);
    Canvas.SetDrawColor(255, 255, 255, 255);
    Canvas.DrawText(ActualString,, textscale, textscale, MyFontRenderInfo);
}

defaultproperties
{
    HumanHUDClass=Class'KFGame.KFGFxMoviePlayer_HUD'
    ZedHUDClass=Class'KFGFxMoviePlayer_HUD_Versus'
    ZedPlayerHudLocX=0.25
    ZedPlayerHudLocY=0.85
    HumanStatusBarLengthMax=80
    BossIconTexture=Texture2D'ZED_Patriarch_UI.ZED-VS_Icon_Boss'
    BossIconColor=(B=255,G=255,R=255,A=192)
    WaitingToSpawnString="TIME UNTIL SPAWN: %x% second(s)"
    ZedTakeOverActiveString="SEARCHING FOR ZEDS TO TAKE OVER..."
    PerkSwitchAllowedString="TIME REMAINING TO SELECT YOUR PERK: %x% second(s)"
    LastTeamIndex=-1
}