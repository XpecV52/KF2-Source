/*******************************************************************************
 * KFWeap_HRG_CranialPopper generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_HRG_CranialPopper extends KFWeap_ScopedBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var float AltAmmoFullRechargeSeconds;
var transient float AltAmmoRechargePerSecond;
var transient float AltAmmoIncrement;
var repnotify byte AltAmmo;
var byte StoredPrimaryAmmo;
var byte StoredSecondaryAmmo;
var class<KFGFxWorld_MedicOptics> OpticsUIClass;
var KFGFxWorld_MedicOptics OpticsUI;

replication
{
     if(bNetDirty && Role == ROLE_Authority)
        AltAmmo;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'AltAmmo')
    {
        AmmoCount[1] = AltAmmo;        
    }
    else
    {
        super(KFWeapon).ReplicatedEvent(VarName);
    }
}

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    return 2;
}

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    StartAltAmmoRecharge();
}

function StartAltAmmoRecharge()
{
    local float UsedAltAmmoRechargeTime;

    if(Role == ROLE_Authority)
    {
        UsedAltAmmoRechargeTime = AltAmmoFullRechargeSeconds;
        AltAmmoRechargePerSecond = float(MagazineCapacity[1]) / UsedAltAmmoRechargeTime;
        AltAmmoIncrement = 0;
    }
}

function RechargeAltAmmo(float DeltaTime)
{
    if(Role == ROLE_Authority)
    {
        AltAmmoIncrement += (AltAmmoRechargePerSecond * DeltaTime);
        if((AltAmmoIncrement >= 1) && AmmoCount[1] < MagazineCapacity[1])
        {
            ++ AmmoCount[1];
            AltAmmoIncrement -= 1;
            AltAmmo = byte(AmmoCount[1]);
        }
    }
}

function GivenTo(Pawn thisPawn, optional bool bDoNotActivate)
{
    super(KFWeapon).GivenTo(thisPawn, bDoNotActivate);
    if((Role == ROLE_Authority) && !thisPawn.IsLocallyControlled())
    {
        StartAltAmmoRecharge();
    }
}

simulated event Tick(float DeltaTime)
{
    if(AmmoCount[1] < MagazineCapacity[1])
    {
        RechargeAltAmmo(DeltaTime);
    }
    if((Instigator != none) && Instigator.Weapon == self)
    {
        UpdateOpticsUI();
    }
    super.Tick(DeltaTime);
}

simulated function bool CanOverrideMagReload(byte FireModeNum)
{
    return (FireModeNum == 1) || super(KFWeapon).CanOverrideMagReload(FireModeNum);
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function bool HasAnyAmmo()
{
    return (HasSpareAmmo()) || HasAmmo(0);
}

simulated function bool ShouldAutoReload(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        return false;
    }
    return super(KFWeapon).ShouldAutoReload(FireModeNum);
}

reliable client simulated function ClientWeaponSet(bool bOptionalSet, optional bool bDoNotActivate)
{
    local KFInventoryManager KFIM;

    super.ClientWeaponSet(bOptionalSet, bDoNotActivate);
    if((OpticsUI == none) && OpticsUIClass != none)
    {
        KFIM = KFInventoryManager(InvManager);
        if(KFIM != none)
        {
            OpticsUI = KFGFxWorld_MedicOptics(KFIM.GetOpticsUIMovie(OpticsUIClass));
        }
    }
}

simulated function UpdateOpticsUI(optional bool bForceUpdate)
{
    if((OpticsUI != none) && OpticsUI.OpticsContainer != none)
    {
        if((AmmoCount[0] != StoredPrimaryAmmo) || bForceUpdate)
        {
            StoredPrimaryAmmo = byte(AmmoCount[0]);
            OpticsUI.SetPrimaryAmmo(StoredPrimaryAmmo);
        }
        if((AmmoCount[1] != StoredSecondaryAmmo) || bForceUpdate)
        {
            StoredSecondaryAmmo = byte(AmmoCount[1]);
            OpticsUI.SetHealerCharge(StoredSecondaryAmmo);
        }
        if(OpticsUI.MinPercentPerShot != float(AmmoCost[1]))
        {
            OpticsUI.SetShotPercentCost(float(AmmoCost[1]));
        }
    }
}

function ItemRemovedFromInvManager()
{
    local KFInventoryManager KFIM;
    local KFWeap_MedicBase KFW;

    super(KFWeapon).ItemRemovedFromInvManager();
    if(OpticsUI != none)
    {
        KFIM = KFInventoryManager(InvManager);
        if(KFIM != none)
        {
            foreach KFIM.InventoryActors(Class'KFWeap_MedicBase', KFW)
            {
                if(KFW.OpticsUI.Class == OpticsUI.Class)
                {                    
                    return;
                }                
            }            
            KFIM.RemoveOpticsUIMovie(OpticsUI.Class);
            OpticsUI.Close();
            OpticsUI = none;
        }
    }
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super.AttachWeaponTo(MeshCpnt, SocketName);
    if(OpticsUI != none)
    {
        OpticsUI.SetPause(false);
        OpticsUI.ClearLockOn();
        UpdateOpticsUI(true);
        OpticsUI.SetShotPercentCost(float(AmmoCost[1]));
    }
}

simulated function DetachWeapon()
{
    local Pawn OwnerPawn;

    super.DetachWeapon();
    OwnerPawn = Pawn(Owner);
    if((OwnerPawn != none) && OwnerPawn.Weapon == self)
    {
        if(OpticsUI != none)
        {
            OpticsUI.SetPause();
        }
    }
}

defaultproperties
{
    AltAmmoFullRechargeSeconds=3.5
    AltAmmo=100
    OpticsUIClass=Class'KFGame.KFGFxWorld_MedicOptics'
    begin object name=SceneCapture2DComponent0 class=TWSceneCapture2DDPGComponent
        FieldOfView=12.5
    object end
    // Reference: TWSceneCapture2DDPGComponent'Default__KFWeap_HRG_CranialPopper.SceneCapture2DComponent0'
    SceneCapture=SceneCapture2DComponent0
    ScopeLenseMICTemplate=MaterialInstanceConstant'WEP_1P_HRG_CranialPopper_MAT.WEP_1P_Cranial_zoomed_Scope_MAT'
    ScopedSensitivityMod=8
    PackageKey="HRG_CranialPopper"
    FirstPersonMeshName="WEP_1P_HRG_CranialPopper_MESH.Wep_1stP_HRG_CranialPopper_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_HRG_CranialPopper_MESH.Wep_3rdP_HRG_CranialPopper_Pickup"
    AttachmentArchetypeName="WEP_HRG_CranialPopper_ARCH.Wep_HRG_CrannialPopper_3P"
    MuzzleFlashTemplateName="WEP_HRG_CranialPopper_ARCH.Wep_HRG_CranialPopper_MuzzleFlash"
    bHasIronSights=true
    bWarnAIWhenAiming=true
    bCanRefillSecondaryAmmo=false
    bCanBeReloaded=true
    bReloadFromMagazine=true
    InventorySize=7
    MeshFOV=60
    MeshIronSightFOV=27
    PlayerIronSightFOV=70
    IronSightPosition=(X=-7,Y=0.07,Z=0.05)
    DOF_BlendInSpeed=3
    DOF_FG_FocalRadius=0
    DOF_FG_MaxNearBlurSize=3.5
    AimWarningDelay=(X=0.4,Y=0.8)
    GroupPriority=75
    WeaponSelectTexture=Texture2D'wep_ui_hrg_cranialpopper_tex.UI_WeaponSelect_HRG_CranialPopper'
    SecondaryAmmoTexture=Texture2D'ui_firemodes_tex.UI_FireModeSelect_Electricity'
    MagazineCapacity[0]=7
    MagazineCapacity[1]=100
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=112
    InitialSpareMags=5
    AmmoPickupScale=2
    WeaponFireWaveForm=ForceFeedbackWaveform'FX_ForceFeedback_ARCH.Gunfire.Heavy_Recoil'
    FireSightedAnims=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=15,Y=11.5,Z=-4)
    NumBloodMapMaterials=3
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_HRG_CranialPopper.MeleeHelper'
    LaserSightTemplate=KFLaserSightAttachment'FX_LaserSight_ARCH.LaserSight_WithAttachment_1P'
    maxRecoilPitch=225
    minRecoilPitch=200
    maxRecoilYaw=200
    minRecoilYaw=-200
    RecoilRate=0.08
    RecoilViewRotationScale=0.6
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=900
    RecoilMinPitchLimit=65035
    RecoilISMaxYawLimit=150
    RecoilISMinYawLimit=65385
    RecoilISMaxPitchLimit=375
    RecoilISMinPitchLimit=65460
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=30,Y=3,Z=-2.5)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_HRG_CranialPopper.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Head Hunter"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_CranialPopper.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_CranialPopper.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
    begin object name=SceneCapture2DComponent0 class=TWSceneCapture2DDPGComponent
        FieldOfView=12.5
    object end
    // Reference: TWSceneCapture2DDPGComponent'Default__KFWeap_HRG_CranialPopper.SceneCapture2DComponent0'
    Components(0)=SceneCapture2DComponent0
}