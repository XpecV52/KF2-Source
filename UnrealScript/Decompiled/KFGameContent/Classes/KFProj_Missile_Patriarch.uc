/*******************************************************************************
 * KFProj_Missile_Patriarch generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Missile_Patriarch extends KFProjectile
    hidecategories(Navigation);

var KFProj_Missile_Patriarch Flock[2];
var float InitialSpeed;
var float FlockRadius;
var float FlockStiffness;
var float FlockMaxForce;
var float FlockCurlForce;
var repnotify byte bCurl;
var float VelocityScale;
var Vector Dir;
var bool bWobble;
var float WobbleForce;
var float SeekDelay;
var float SeekForce;
var float GravForce;
var float DistToApplyGravitySQ;
var Vector TargetImpactLoc;
var export editinline PointLightComponent FlightLight;

replication
{
     if(bNetInitial && Role == ROLE_Authority)
        DistToApplyGravitySQ, FlockCurlForce, 
        GravForce, InitialSpeed, 
        SeekDelay, SeekForce, 
        TargetImpactLoc, VelocityScale, 
        bCurl;
}

protected simulated function PrepareExplosionTemplate()
{
    super.PrepareExplosionTemplate();
    ExplosionTemplate.bIgnoreInstigator = true;
}

function InitEx(Vector AimDir, float CurlForceMultiplier, Vector TargetLoc, float InitialMissileSpeed, float NewSeekDelay, float NewSeekForce, float NewGravForce, float NewDistToApplyGravitySQ)
{
    Init(AimDir);
    InitialSpeed = InitialMissileSpeed;
    Speed = InitialSpeed;
    FlockCurlForce = (default.FlockCurlForce * (0.95 + (FRand() * 0.1))) * CurlForceMultiplier;
    VelocityScale = 0.95 + (FRand() * 0.1);
    TargetImpactLoc = TargetLoc;
    SeekDelay = NewSeekDelay;
    SeekForce = NewSeekForce;
    GravForce = NewGravForce;
    DistToApplyGravitySQ = NewDistToApplyGravitySQ;
}

simulated function StartCurlTimer()
{
    SetTimer(0.06, true, 'CurlTimer');
}

simulated event ReplicatedEvent(name VarName)
{
    local KFProj_Missile_Patriarch R;
    local int I;

    if(VarName == 'bCurl')
    {
        StartCurlTimer();
        if((bCurl < 3) && Flock[1] == none)
        {
            foreach DynamicActors(Class'KFProj_Missile_Patriarch', R)
            {
                if(R.Instigator == Instigator)
                {
                    Flock[I] = R;
                    if(R.Flock[0] == none)
                    {
                        R.Flock[0] = self;                        
                    }
                    else
                    {
                        if(R.Flock[0] != self)
                        {
                            R.Flock[1] = self;
                        }
                    }
                    ++ I;
                    if(I == 2)
                    {
                        break;
                    }
                }                
            }            
        }        
    }
    else
    {
        super.ReplicatedEvent(VarName);
    }
}

simulated event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    if((FlightLight != none) && WorldInfo.NetMode != NM_DedicatedServer)
    {
        FlightLight.Radius = 120 + (FlightLight.default.Radius * Abs(Cos(WorldInfo.TimeSeconds * (DeltaTime * 800))));
    }
    SetRotation(rotator(Velocity));
}

simulated function CurlTimer()
{
    local Vector TargetVec, SeekDir, X, Y, Z;

    if(SeekForce > 0)
    {
        if((bCurl == 3) || IsZero(Dir))
        {
            Dir = Normal(Velocity);
        }
        if(bCurl < 3)
        {
            Velocity = (InitialSpeed * Normal(((Dir * 0.5) * InitialSpeed) + Velocity)) * VelocityScale;
        }
        TargetVec = TargetImpactLoc - Location;
        if((WorldInfo.TimeSeconds - CreationTime) >= SeekDelay)
        {
            SeekDir = Normal(TargetVec);
            if(GravForce > 0)
            {
                SeekDir.Z = 0;
            }
            Velocity += (SeekDir * SeekForce);
            if((GravForce > 0) && TargetVec.Z < Location.Z)
            {
                TargetVec.Z = 0;
                if(VSizeSq(TargetVec) <= DistToApplyGravitySQ)
                {
                    Velocity += (vect(0, 0, -1) * GravForce);                    
                }
                else
                {
                    Velocity += ((vect(0, 0, -1) * GravForce) * 0.1);
                }
            }
        }
        if(bCurl < 3)
        {
            DoFlocking();
        }
        SetRotation(rotator(Velocity));
    }
    GetAxes(Rotation, X, Y, Z);
    Velocity += (((bWobble) ? Z * WobbleForce : -Z * WobbleForce) + ((bWobble) ? Y * WobbleForce : -Y * WobbleForce));
    bWobble = !bWobble;
}

simulated function DoFlocking()
{
    local int I;
    local Vector ForceDir, CurlDir;
    local float ForceMag;

    I = 0;
    J0x0B:

    if(I < 2)
    {
        if(Flock[I] == none)
        {            
        }
        else
        {
            ForceDir = Flock[I].Location - Location;
            ForceMag = FlockStiffness * ((float(2) * FlockRadius) - VSize(ForceDir));
            Acceleration = Normal(ForceDir) * float(Min(int(ForceMag), int(FlockMaxForce * VelocityScale)));
            CurlDir = Flock[I].Velocity Cross ForceDir;
            if(bCurl == Flock[I].bCurl)
            {
                Acceleration += (Normal(CurlDir) * FlockCurlForce);                
            }
            else
            {
                Acceleration -= (Normal(CurlDir) * FlockCurlForce);
            }
        }
        ++ I;
        goto J0x0B;
    }
}

simulated function bool TraceProjHitZones(Pawn P, Vector EndTrace, Vector StartTrace, out array<ImpactInfo> out_Hits)
{
    if(P != none)
    {
        P.TakeDamage(int(Damage), InstigatorController, StartTrace, MomentumTransfer * Normal(Velocity), MyDamageType,, self);
        return true;
    }
    return false;
}

protected simulated function StopSimulating()
{
    super.StopSimulating();
    FlightLight.SetEnabled(false);
    DetachComponent(FlightLight);
    FlightLight = none;
}

simulated function Destroyed()
{
    ClearTimer('CurlTimer');
    super.Destroyed();
}

defaultproperties
{
    FlockRadius=10
    FlockStiffness=-20
    FlockMaxForce=700
    FlockCurlForce=3600
    WobbleForce=120
    SeekForce=10
    begin object name=FlightPointLight class=PointLightComponent
        Radius=120
        FalloffExponent=10
        Brightness=1.5
        LightColor=(B=150,G=205,R=255,A=255)
        CastShadows=false
        CastStaticShadows=false
        CastDynamicShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFProj_Missile_Patriarch.FlightPointLight'
    FlightLight=FlightPointLight
    bAutoStartAmbientSound=true
    bStopAmbientSoundOnExplode=true
    ExplosionActorClass=Class'KFGame.KFExplosionActor'
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'WEP_Patriarch_ARCH.Missile_Explosion'
        Damage=70
        DamageRadius=650
        DamageFalloffExponent=2
        MyDamageType=Class'KFDT_Explosive_PatMissile'
        ExplosionSound=AkEvent'WW_WEP_SA_RPG7.Play_WEP_SA_RPG7_Explosion'
        ExploLight=PointLightComponent'Default__KFProj_Missile_Patriarch.ExplosionPointLight'
        ExploLightFadeOutTime=0.5
        CamShake=KFCameraShake'FX_CameraShake_Arch.Grenades.Default_Grenade'
        CamShakeInnerRadius=200
        CamShakeOuterRadius=700
    object end
    // Reference: KFGameExplosion'Default__KFProj_Missile_Patriarch.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    ProjFlightTemplate=ParticleSystem'ZED_Patriarch_EMIT.FX_Patriarch_Rocket_Projectile'
    AmbientSoundPlayEvent=AkEvent'WW_ZED_Patriarch.Play_Mini_Rocket_Trail_1'
    begin object name=AmbientAkSoundComponent class=AkComponent
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.1
    object end
    // Reference: AkComponent'Default__KFProj_Missile_Patriarch.AmbientAkSoundComponent'
    AmbientComponent=AmbientAkSoundComponent
    Speed=2000
    MaxSpeed=2000
    Damage=200
    MomentumTransfer=1000
    MyDamageType=Class'KFDT_Explosive_PatMissile'
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=5
        CollisionRadius=5
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=false
    object end
    // Reference: CylinderComponent'Default__KFProj_Missile_Patriarch.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=5
        CollisionRadius=5
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=false
    object end
    // Reference: CylinderComponent'Default__KFProj_Missile_Patriarch.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=FlightPointLight class=PointLightComponent
        Radius=120
        FalloffExponent=10
        Brightness=1.5
        LightColor=(B=150,G=205,R=255,A=255)
        CastShadows=false
        CastStaticShadows=false
        CastDynamicShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFProj_Missile_Patriarch.FlightPointLight'
    Components(1)=FlightPointLight
    begin object name=AmbientAkSoundComponent class=AkComponent
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.1
    object end
    // Reference: AkComponent'Default__KFProj_Missile_Patriarch.AmbientAkSoundComponent'
    Components(2)=AmbientAkSoundComponent
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=5
        CollisionRadius=5
        ReplacementPrimitive=none
        CollideActors=true
        BlockNonZeroExtent=false
    object end
    // Reference: CylinderComponent'Default__KFProj_Missile_Patriarch.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    RotationRate=(Pitch=0,Yaw=0,Roll=50000)
}