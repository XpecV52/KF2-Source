/*******************************************************************************
 * KFObj_Coop_PayDay generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFObj_Coop_PayDay extends KFObj_Coop
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var array<KFPawn_Human> DoshTargets;

simulated event ReplicatedEvent(name VarName)
{
    if(bLogObjective)
    {
        LogInternal((("[OBJECTIVE]" @ string(GetFuncName())) @ "Replicated variable:") @ string(VarName));
    }
    if(VarName == 'ObjectiveState')
    {
        if(bLogObjective)
        {
            LogInternal((("[OBJECTIVE]" @ string(GetFuncName())) @ "ObjectiveState =") @ string(ObjectiveState));
        }
        if(ObjectiveState == 3)
        {
            StartObjective();            
        }
        else
        {
            super(KFObjective).ReplicatedEvent(VarName);
        }        
    }
    else
    {
        super(KFObjective).ReplicatedEvent(VarName);
    }
}

simulated function StartObjective()
{
    local KFPlayerController KFPC;
    local KFPawn_Human KFPH;

    MyKFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    foreach LocalPlayerControllers(Class'KFPlayerController', KFPC)
    {
        KFPH = KFPawn_Human(KFPC.Pawn);
        if((KFPH != none) && KFPH.bObjectivePlayer)
        {
            bNoLocalObjective = true;
            break;
        }        
    }    
    super(KFObjective).StartObjective();
}

function UpdateObjective()
{
    if(ObjectiveState == 3)
    {
        if((MyKFGRI != none) && !MyKFGRI.bTraderIsOpen)
        {
            FailObjective(4);
        }
    }
}

function SetLowDoshPawns(array<KFPawn_Human> LowDoshPawns)
{
    local int I;

    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    I = 0;
    J0x36:

    if(I < LowDoshPawns.Length)
    {
        LowDoshPawns[I].bAlwaysRelevant = true;
        DoshTargets.AddItem(LowDoshPawns[I];
        ++ I;
        goto J0x36;
    }
    StartObjective();
}

function int GetPayDayBonusDosh(int DoshSpend)
{
    if(ObjectiveState == 3)
    {
        if(bLogObjective)
        {
            LogInternal((("[OBJECTIVE]" @ string(GetFuncName())) @ "CASH BACK AMOUNT:") @ string(Round(float(DoshSpend) * 0.3)));
        }
        return Round(float(DoshSpend) * 0.3);
    }
    if(bLogObjective)
    {
        LogInternal(("[OBJECTIVE]" @ string(GetFuncName())) @ "NO CASH BACK!");
    }
    return super(KFObjective).GetPayDayBonusDosh(DoshSpend);
}

function CheckForPayDayPawn(Pawn P)
{
    local KFPawn_Human KFPH;
    local int Idx;

    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    if(ObjectiveState == 3)
    {
        KFPH = KFPawn_Human(P);
        Idx = DoshTargets.Find(KFPH;
        if(((KFPH != none) && KFPH.bObjectivePlayer) && Idx != -1)
        {
            KFPH.bObjectivePlayer = false;
            CheckEndConditions();
        }
    }
}

function CheckEndConditions()
{
    local KFPawn_Human KFPH;
    local bool bNoDoshTargets;

    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    bNoDoshTargets = true;
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.bObjectivePlayer)
        {
            bNoDoshTargets = false;
            break;
        }        
    }    
    if(bNoDoshTargets)
    {
        FailObjective(5);
    }
}

simulated function EndObjective()
{
    local int I;

    if(Role == ROLE_Authority)
    {
        I = 0;
        J0x1F:

        if(I < DoshTargets.Length)
        {
            DoshTargets[I].bAlwaysRelevant = false;
            ++ I;
            goto J0x1F;
        }
    }
    DoshTargets.Remove(0, DoshTargets.Length;
    super(KFObjective).EndObjective();
}

simulated function DrawObjectiveHUD(Canvas C)
{
    if(bNoLocalObjective)
    {
        return;
    }
    switch(ObjectiveState)
    {
        case 0:
            break;
        case 3:
            DrawObjectiveTargets(C);
            DrawTrackerHUD(C);
            break;
        case 5:
            DrawObjEndHUD(C);
            break;
        default:
            break;
    }
}

simulated function DrawTrackerHUD(Canvas C)
{
    local float XPos, YPos, CurScale;
    local string TitleString, DescriptionString, ProgressString, TimeString;
    local int TimeSeconds, TimeMinutes, CurrentTime;

    C.SetDrawColor(255, 255, 255);
    C.bCenter = true;
    CurScale = 1;
    XPos = (float(C.SizeX) - (float(256) * CurScale)) - float(10);
    YPos = 10;
    C.SetPos(XPos, YPos);
    C.DrawTile(ObjRectangleTex, 256 * CurScale, 96 * CurScale, 0, 0, 512, 256);
    XPos += float(16);
    YPos += float(10);
    TitleString = ObjectiveTypeString;
    if(ObjectiveState == 3)
    {
        DescriptionString = ObjectiveTargetTitle;
        CurrentTime = Max(0, MyKFGRI.RemainingTime);
    }
    ProgressString = ObjectiveStatusTitle;
    TimeMinutes = CurrentTime / 60;
    TimeSeconds = CurrentTime % 60;
    if(TimeSeconds > 9)
    {
        TimeString = (string(TimeMinutes) $ ":") $ string(TimeSeconds);        
    }
    else
    {
        TimeString = (string(TimeMinutes) $ ":0") $ string(TimeSeconds);
    }
    TimeString = TimeString $ ObjectiveTimeString;
    C.SetPos(XPos, YPos);
    C.DrawText(TitleString);
    YPos += float(16);
    C.SetPos(XPos, YPos);
    C.DrawText(DescriptionString);
    YPos += float(20);
    C.SetPos(XPos, YPos);
    C.DrawText(ProgressString);
    YPos += float(20);
    C.SetPos(XPos, YPos);
    C.DrawText(TimeString);
    C.Reset();
}

simulated function DrawObjEndHUD(Canvas C)
{
    local float XPos, YPos, CurScale;
    local string TempString;

    C.SetDrawColor(255, 255, 255);
    C.bCenter = true;
    CurScale = 1;
    XPos = (float(C.SizeX) - (float(256) * CurScale)) - float(10);
    YPos = 10;
    C.SetPos(XPos, YPos);
    C.DrawTile(ObjRectangleTex, 256 * CurScale, 128 * CurScale, 0, 0, 512, 256);
    YPos += float(16);
    C.SetPos(XPos, YPos);
    TempString = ObjectiveTypeString;
    C.DrawText(TempString);
    YPos += float(30);
    C.SetPos(XPos, YPos);
    if(ObjectiveFailReason == 5)
    {
        TempString = ObjectiveFailedString;        
    }
    else
    {
        TempString = ObjectiveEndedString;
    }
    C.DrawText(TempString);
    YPos += float(40);
    C.SetPos(XPos, YPos);
    TempString = ObjectiveFailReasons[ObjectiveFailReason];
    C.DrawText(TempString);
    C.Reset();
}

defaultproperties
{
    ObjWorldTex=Texture2D'UI_Objective_Tex.UI_Obj_Dosh_Loc'
}