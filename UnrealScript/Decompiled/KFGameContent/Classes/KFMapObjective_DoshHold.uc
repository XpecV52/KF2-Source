/*******************************************************************************
 * KFMapObjective_DoshHold generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_DoshHold extends KFMapObjective_AreaDefense
    hidecategories(Navigation,Object,Movement,Display);

struct WaveLengthPctChances
{
    var() float PctChances[11];

    structdefaultproperties
    {
        PctChances[0]=1
        PctChances[1]=1
        PctChances[2]=1
        PctChances[3]=1
        PctChances[4]=1
        PctChances[5]=1
        PctChances[6]=1
        PctChances[7]=1
        PctChances[8]=1
        PctChances[9]=1
        PctChances[10]=1
    }
};

/** Timer before penalty check starts */
var() const float PenaltyStartupTimer;
/** Timer length for checking the dosh penalty rule set */
var() const float DoshPenaltyCheckTimer;
/** Penalties for various states of the volume */
var() const int NoHumansPenalty;
var() const int ZedsPenalty;
/** Whether the trail shows up during the previous trader time */
var() bool bUseEarlyTrail;
var transient bool bRemindPlayers;
/** Percentage of the wave's zeds that needs to be killed to obtain the max reward */
var() const float PctOfWaveZedsKilledForMaxReward;
var transient float RewardPerZed;
var() WaveLengthPctChances ActivatePctChances[3];
/** Sound event to play when objective is activated (overrides default trader dialog for this event) */
var() AkEvent ActivationSoundEventOverride;
/** A sound to play when the objective is fully complete (overrides default trader dialog for this event) */
var() AkEvent SuccessSoundEvent100pctOverride;
/** A sound to play when the objective is mostly complete (overrides default trader dialog for this event) */
var() AkEvent SuccessSoundEvent85pctOverride;
/** A sound to play when the objective is adequately complete (overrides default trader dialog for this event) */
var() AkEvent SuccessSoundEvent50pctOverride;
/** A sound to play when the objective is barely complete (overrides default trader dialog for this event) */
var() AkEvent SuccessSoundEvent25pctOverride;
/** A sound to play when the objective is failed (overrides default trader dialog for this event) */
var() AkEvent FailureSoundEventOverride;
/** Sound event to play when wave is 25% complete */
var() AkEvent WaveProgressSoundEvent25pct;
/** Sound event to play when wave is 50% complete */
var() AkEvent WaveProgressSoundEvent50pct;
/** Sound event to play when wave is 75% complete */
var() AkEvent WaveProgressSoundEvent75pct;
/** Sound event to play when wave is 90% complete */
var() AkEvent WaveProgressSoundEvent90pct;
/** Sound event to play to remind players about the objective */
var() AkEvent RemindPlayersSoundEvent;
/** How often to remind players about the objective if they aren't engaged in completing it */
var() float RemindPlayersTime;
var transient float PrevWaveProgress;

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'bActive')
    {
        if(!bActive)
        {
            DeactivateObjective();
        }
    }
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    local int PlayerCount;

    super.Touch(Other, OtherComp, HitLocation, HitNormal);
    if((KFPawn_Human(Other) != none) && TouchingHumans.Find(Other == -1)
    {
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        if((TouchingHumans.Length >= PlayerThresholds[PlayerCount]) && IsTimerActive('StartPenaltyCheck'))
        {
            StartPenaltyCheck();
        }
    }
}

function NotifyZedKilled(Controller Killer, Pawn KilledPawn, bool bIsBoss)
{
    local int I;
    local KFGameInfo KFGI;
    local KFGameReplicationInfo KFGRI;

    if(Role == ROLE_Authority)
    {
        if(bActive)
        {
            KFGI = KFGameInfo(WorldInfo.Game);
            if(KFGI != none)
            {
                I = 0;
                J0x6C:

                if(I < TouchingHumans.Length)
                {
                    if(Killer == TouchingHumans[I].Controller)
                    {
                        if(RewardPerZed == float(0))
                        {
                            KFGRI = KFGameReplicationInfo(WorldInfo.Game.GameReplicationInfo);
                            RewardPerZed = float(GetMaxDoshReward()) / (PctOfWaveZedsKilledForMaxReward * float(KFGRI.WaveTotalAICount));
                        }
                        CurrentRewardAmount = FMin(CurrentRewardAmount + RewardPerZed, float(GetMaxDoshReward()));
                        goto J0x191;
                    }
                    ++ I;
                    goto J0x6C;
                }
            }
            J0x191:

            if((GetProgress()) >= 1)
            {
                DeactivateObjective();
            }
        }
    }
}

function CheckBonusState()
{
    local int I, PlayerCount;

    bDangerState = false;
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if(TouchingHumans.Length < PlayerThresholds[PlayerCount])
    {
        bDangerState = true;
        if(bRemindPlayers)
        {
            if(RemindPlayersSoundEvent != none)
            {
                PlaySoundBase(RemindPlayersSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                SetTimer(RemindPlayersTime, false, 'Timer_AllowRemindPlayers');
            }
            bRemindPlayers = false;
        }        
    }
    else
    {
        if(TouchingZeds.Length > 0)
        {
            I = TouchingZeds.Length - 1;
            J0x130:

            if(I >= 0)
            {
                if(!IsValidZed(TouchingZeds[I]))
                {
                    TouchingZeds.Remove(I, 1;
                }
                -- I;
                goto J0x130;
            }
        }
    }
    UpdateMeshArrayState();
}

simulated function Timer_AllowRemindPlayers()
{
    bRemindPlayers = true;
}

function StartPenaltyCheck()
{
    ClearTimer('StartPenaltyCheck');
    if(bActive)
    {
        SetTimer(DoshPenaltyCheckTimer, true, 'CheckBonusState');
    }
}

function ActivationVO()
{
    if(ActivationSoundEventOverride != none)
    {
        PlaySoundBase(ActivationSoundEventOverride, false, WorldInfo.NetMode == NM_DedicatedServer);        
    }
    else
    {
        Class'KFTraderDialogManager'.static.PlayGlobalDialog(57, WorldInfo, true);
    }
}

simulated function ActivateObjective()
{
    local int PlayerCount;

    super.ActivateObjective();
    if(Role == ROLE_Authority)
    {
        CurrentRewardAmount = 0;
        RewardPerZed = 0;
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        if(TouchingHumans.Length >= PlayerThresholds[PlayerCount])
        {
            StartPenaltyCheck();            
        }
        else
        {
            SetTimer(PenaltyStartupTimer, false, 'StartPenaltyCheck');
        }
        SetTimer(0.01, false, 'ActivationVO');
        SetTimer(1, true, 'Timer_CheckPawnCount');
        SetTimer(1, true, 'Timer_CheckWaveProgress');
        PrevWaveProgress = 0;
        bRemindPlayers = true;
    }
}

simulated function Timer_CheckWaveProgress()
{
    local KFGameReplicationInfo KFGRI;
    local float WaveProgress;

    KFGRI = KFGameReplicationInfo(WorldInfo.Game.GameReplicationInfo);
    if(KFGRI != none)
    {
        WaveProgress = 1 - (float(KFGRI.AIRemaining) / float(KFGRI.WaveTotalAICount));
        if((PrevWaveProgress < 0.25) && WaveProgress >= 0.25)
        {
            PlaySoundBase(WaveProgressSoundEvent25pct, false, WorldInfo.NetMode == NM_DedicatedServer);            
        }
        else
        {
            if((PrevWaveProgress < 0.5) && WaveProgress >= 0.5)
            {
                PlaySoundBase(WaveProgressSoundEvent50pct, false, WorldInfo.NetMode == NM_DedicatedServer);                
            }
            else
            {
                if((PrevWaveProgress < 0.75) && WaveProgress >= 0.75)
                {
                    PlaySoundBase(WaveProgressSoundEvent75pct, false, WorldInfo.NetMode == NM_DedicatedServer);                    
                }
                else
                {
                    if((PrevWaveProgress < 0.9) && WaveProgress >= 0.9)
                    {
                        PlaySoundBase(WaveProgressSoundEvent90pct, false, WorldInfo.NetMode == NM_DedicatedServer);
                    }
                }
            }
        }
        PrevWaveProgress = WaveProgress;
    }
}

simulated function Timer_CheckPawnCount()
{
    local int PlayerCount;

    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    bTooFewPlayers = TouchingHumans.Length < PlayerThresholds[PlayerCount];
    bTooManyZeds = TouchingZeds.Length > ZedThresholds[PlayerCount];
}

simulated function DeactivateObjective()
{
    local KFPawn_Human KFPH;
    local KFPlayerController KFPC;
    local bool bOneHumanAlive;

    super.DeactivateObjective();
    if(Role == ROLE_Authority)
    {
        ClearTimer('CheckBonusState');
        ClearTimer('StartPenaltyCheck');
        ClearTimer('Timer_AllowRemindPlayers');
        ClearTimer('Timer_CheckWaveProgress');
        ClearTimer('Timer_CheckPawnCount');
        bOneHumanAlive = false;
        foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
        {
            if(KFPH.IsAliveAndWell())
            {
                bOneHumanAlive = true;
            }            
        }        
        if((CurrentRewardAmount > float(0)) && bOneHumanAlive)
        {
            foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
            {
                GrantReward(KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo), KFPC);                
            }            
        }
        if(bOneHumanAlive)
        {
            PlayDeactivationDialog();
        }
    }
    KFPC = KFPlayerController(GetALocalPlayerController());
    if((KFPC != none) && KFPC.myGfxHUD != none)
    {
        KFPC.myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetFailState(CurrentRewardAmount <= float(0));
    }
}

function PlayDeactivationDialog()
{
    if(CurrentRewardAmount <= float(0))
    {
        if(FailureSoundEventOverride != none)
        {
            PlaySoundBase(FailureSoundEventOverride, false, WorldInfo.NetMode == NM_DedicatedServer);            
        }
        else
        {
            Class'KFTraderDialogManager'.static.PlayGlobalDialog(60, WorldInfo, true);
        }
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 6);        
    }
    else
    {
        if((GetProgress()) <= JustWinThreshold)
        {
            if(SuccessSoundEvent25pctOverride != none)
            {
                PlaySoundBase(SuccessSoundEvent25pctOverride, false, WorldInfo.NetMode == NM_DedicatedServer);                
            }
            else
            {
                Class'KFTraderDialogManager'.static.PlayGlobalDialog(111, WorldInfo, true);
            }            
        }
        else
        {
            if((GetProgress()) <= StandardWinThreshold)
            {
                if(SuccessSoundEvent50pctOverride != none)
                {
                    PlaySoundBase(SuccessSoundEvent50pctOverride, false, WorldInfo.NetMode == NM_DedicatedServer);                    
                }
                else
                {
                    Class'KFTraderDialogManager'.static.PlayGlobalDialog(58, WorldInfo, true);
                }                
            }
            else
            {
                if((GetProgress()) <= GoodWinThreshold)
                {
                    if(SuccessSoundEvent85pctOverride != none)
                    {
                        PlaySoundBase(SuccessSoundEvent85pctOverride, false, WorldInfo.NetMode == NM_DedicatedServer);                        
                    }
                    else
                    {
                        Class'KFTraderDialogManager'.static.PlayGlobalDialog(112, WorldInfo, true);
                    }                    
                }
                else
                {
                    if(SuccessSoundEvent100pctOverride != none)
                    {
                        PlaySoundBase(SuccessSoundEvent100pctOverride, false, WorldInfo.NetMode == NM_DedicatedServer);                        
                    }
                    else
                    {
                        Class'KFTraderDialogManager'.static.PlayGlobalDialog(113, WorldInfo, true);
                    }
                }
            }
        }
    }
}

simulated function int GetDoshReward()
{
    return int(CurrentRewardAmount);
}

simulated function float GetProgress()
{
    local int MaxDoshReward;

    MaxDoshReward = GetMaxDoshReward();
    if(MaxDoshReward == 0)
    {
        return 0;
    }
    return CurrentRewardAmount / float(MaxDoshReward);
}

simulated function bool IsComplete()
{
    return ((GetProgress()) > 0) && !bActive;
}

simulated function float GetActivationPctChance()
{
    local KFGameReplicationInfo KFGRI;
    local int ArrayEnd;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(KFGRI != none)
    {
        ArrayEnd = Clamp(KFGRI.WaveMax - 2, 0, 11 - 1);
        return ActivatePctChances[KFGRI.GameLength].PctChances[Clamp(KFGRI.WaveNum - 1, 0, ArrayEnd)];
    }
    return 1;
}

simulated function string GetLocalizedRequirements()
{
    local int PlayerCount;

    PlayerCount = Clamp(KFGameReplicationInfo(WorldInfo.GRI).GetNumPlayers(), 1, 6) - 1;
    return (Localize("Objectives", default.RequirementsLocKey, "KFGame")) @ string(PlayerThresholds[PlayerCount]);
}

simulated function GetLocalizedStatus(out string StatusMessage, out int bWarning, out int bNotification);

simulated function string GetProgressText()
{
    return string(GetMaxDoshReward());
}

simulated function bool GetProgressTextIsDosh()
{
    return true;
}

simulated function bool ShouldShowObjectiveHUD()
{
    return !IsComplete();
}

defaultproperties
{
    PenaltyStartupTimer=20
    DoshPenaltyCheckTimer=0.25
    NoHumansPenalty=5
    ZedsPenalty=1
    PctOfWaveZedsKilledForMaxReward=0.75
    ActivatePctChances[0]=(PctChances=0,PctChances[1]=0.35,PctChances[2]=0.35,PctChances[3]=0.35,PctChances[4]=1,PctChances[5]=1,PctChances[6]=1,PctChances[7]=1,PctChances[8]=1,PctChances[9]=1,PctChances[10]=1)
    ActivatePctChances[1]=(PctChances=0,PctChances[1]=0.35,PctChances[2]=0.35,PctChances[3]=0.35,PctChances[4]=0.35,PctChances[5]=0.35,PctChances[6]=0.35,PctChances[7]=1,PctChances[8]=1,PctChances[9]=1,PctChances[10]=1)
    ActivatePctChances[2]=(PctChances=0,PctChances[1]=0.35,PctChances[2]=0.35,PctChances[3]=0.35,PctChances[4]=0.35,PctChances[5]=0.35,PctChances[6]=0.35,PctChances[7]=0.35,PctChances[8]=0.35,PctChances[9]=0.35,PctChances[10]=0.35)
    RemindPlayersTime=30
    PlayerThresholds[0]=1
    PlayerThresholds[1]=1
    PlayerThresholds[2]=1
    PlayerThresholds[3]=1
    PlayerThresholds[4]=1
    PlayerThresholds[5]=1
    LocalizationKey="DoshHold"
    NameShortLocKey="DoshHold"
    DescriptionLocKey="DescriptionDoshHold"
    DescriptionShortLocKey="DescriptionDoshHoldShort"
    RequirementsLocKey="RequiredDoshHold"
    DoshRewards=/* Array type was not detected. */
    XPRewards=/* Array type was not detected. */
    DoshDifficultyScalars=/* Array type was not detected. */
    XPDifficultyScalars=/* Array type was not detected. */
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_DoshHold.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_DoshHold.BrushComponent0'
    Components(0)=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_DoshHold.BrushComponent0'
    CollisionComponent=BrushComponent0
}