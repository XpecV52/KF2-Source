/*******************************************************************************
 * KFTargetingWeaponComponent_HRGIncision generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFTargetingWeaponComponent_HRGIncision extends KFTargetingWeaponComponent
    hidecategories(Navigation);

simulated function bool AllowTargetLockOn(byte TargetingMode)
{
    local bool bAllowLockOn;

    bAllowLockOn = super.AllowTargetLockOn(TargetingMode);
    if(bAllowLockOn)
    {
        if(TargetingMode == 0)
        {
            bAllowLockOn = KFW.bUsingSights;
        }
    }
    return bAllowLockOn;
}

simulated function bool CanLockOnTo(byte TargetingMode, Actor TA)
{
    local KFPawn PawnTarget;
    local bool bCanLockOnTo;

    bCanLockOnTo = super.CanLockOnTo(TargetingMode, TA);
    if(bCanLockOnTo)
    {
        if(TargetingMode == 1)
        {
            PawnTarget = KFPawn(TA);
            bCanLockOnTo = PawnTarget.Health < PawnTarget.HealthMax;
        }
    }
    return bCanLockOnTo;
}

simulated function Actor DetermineBestTarget(byte TargetingMode)
{
    local int I;
    local Vector StartTrace, EndTrace;
    local Rotator ViewRotation;
    local array<Actor> HitActors;
    local array<Vector> HitLocations;
    local Actor HitActor;

    StartTrace = Instigator.GetWeaponStartTraceLocation();
    ViewRotation = Instigator.GetViewRotation();
    ViewRotation += KFPlayerController(Instigator.Controller).WeaponBufferRotation;
    EndTrace = StartTrace + (vector(ViewRotation) * (GetLockRange()));
    HitActors = KFW.BeamLineCheck(EndTrace, StartTrace, vect(0, 0, 0), HitLocations);
    I = 0;
    J0x123:

    if(I < HitActors.Length)
    {
        HitActor = HitActors[I];
        if(CanLockOnTo(TargetingMode, HitActor))
        {
            return HitActor;            
        }
        else
        {
            if(Pawn(HitActor) == none)
            {
                goto J0x1AD;
            }
        }
        ++ I;
        goto J0x123;
    }
    J0x1AD:

    return none;
}

defaultproperties
{
    TargetingModeFlags=3
    LockRange=200000
    LockAcquireTime=0.01
    LockAcquireTime_Large=0.01
    LockAcquireTime_Boss=0.01
    LockAcquireTime_Versus=0.01
    LockTolerance=0.4
    LockAim=0.987
    LockTargetingSoundInterval=0.09
    LockAcquiredSoundFirstPerson=AkEvent'WW_WEP_SA_Railgun.Play_Railgun_Scope_Locked'
    LockLostSoundFirstPerson=AkEvent'WW_WEP_SA_Railgun.Play_Railgun_Scope_Lost'
    LockTargetingSoundFirstPerson=AkEvent'WW_WEP_SA_Railgun.Play_Railgun_Scope_Locking'
    HumanTargetableBoneNames=/* Array type was not detected. */
    TargetLocationReplicationInterval=0.016
}