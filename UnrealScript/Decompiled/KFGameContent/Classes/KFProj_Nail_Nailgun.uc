/*******************************************************************************
 * KFProj_Nail_Nailgun generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Nail_Nailgun extends KFProj_PinningBullet
    hidecategories(Navigation);

simulated event HitWall(Vector HitNormal, Actor Wall, PrimitiveComponent WallComp)
{
    if(bSpawnedForPin)
    {
        BouncesLeft = 0;
    }
    SetRotation(rotator(Normal(Velocity)));
    SetPhysics(2);
    if(!Bounce(HitNormal, Wall))
    {
        if((WorldInfo.NetMode != NM_DedicatedServer) && ProjEffects != none)
        {
            ProjEffects.DeactivateSystem();
        }
        if((!Wall.bStatic && !Wall.bWorldGeometry) && Wall.bProjTarget)
        {
            Explode(Location, HitNormal);
            ImpactedActor = none;            
        }
        else
        {
            if(WorldInfo.NetMode != NM_DedicatedServer)
            {
                KFImpactEffectManager(WorldInfo.MyImpactEffectManager).PlayImpactEffects(Location, Instigator, HitNormal);
            }
            SetPhysics(0);
            LifeSpan = 5;
            if(bStopAmbientSoundOnExplode)
            {
                StopAmbientSound();
            }
        }
        bBounce = false;
    }
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    if(((Other != Instigator) && !Other.bWorldGeometry) && Other.bCanBeDamaged)
    {
        if(Pawn(Other) != none)
        {
            super(KFProj_Bullet).ProcessTouch(Other, HitLocation, HitNormal);            
        }
        else
        {
            ProcessDestructibleTouchOnBounce(Other, HitLocation, HitNormal);
        }        
    }
    else
    {
        super(KFProj_Bullet).ProcessTouch(Other, HitLocation, HitNormal);
    }
}

simulated function Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    if((WorldInfo.NetMode != NM_DedicatedServer) && Physics != 0)
    {
        SetRotation(rotator(Normal(Velocity)));
    }
}

simulated function Landed(Vector HitNormal, Actor FloorActor)
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && ProjEffects != none)
    {
        ProjEffects.DeactivateSystem();
    }
    SetPhysics(0);
    LifeSpan = 5;
    if(bStopAmbientSoundOnExplode)
    {
        StopAmbientSound();
    }
}

defaultproperties
{
    RicochetEffects=KFImpactEffectInfo'WEP_Nail_Shotgun_ARCH.NailBulletImpacts'
    bWarnAIWhenFired=true
    ProjFlightTemplate=ParticleSystem'WEP_1P_Nail_Shotgun_EMIT.FX_Nail_Shotgun_Tracer'
    ProjFlightTemplateZedTime=ParticleSystem'WEP_1P_Nail_Shotgun_EMIT.FX_Nail_Shotgun_Tracer_ZEDTime'
    AmbientComponent=AkComponent'Default__KFProj_Nail_Nailgun.AmbientAkSoundComponent'
    Speed=7000
    MaxSpeed=7000
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Nail_Nailgun.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Nail_Nailgun.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFProj_Nail_Nailgun.AmbientAkSoundComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Nail_Nailgun.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}