/*******************************************************************************
 * KFGFxTutorialContainer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGFxTutorialContainer extends KFGFxObject_Menu within GFxMoviePlayer;

var const string ControllerStringPrefix;
var const localized string BackString;
var const localized string NextString;
var const localized string DoneString;
var const localized string SkipString;
var KFTutorialSectionInfo TutorialArch;
var string KeyReplaceString;
var KFPlayerInput KFPI;

function InitMenu()
{
    KFPI = KFPlayerInput(Outer.GetPC().PlayerInput);
    LocalizeText();
    if(Outer.GetPC().WorldInfo.IsConsoleBuild())
    {
        UpdateUsingGamePad(true);        
    }
    else
    {
        if(KFPI != none)
        {
            UpdateUsingGamePad(KFPI.bUsingGamepad);
        }
    }
}

function UpdateUsingGamePad(bool bValue)
{
    SetBool("bUsingGamepad", bValue);
}

function LocalizeText()
{
    local GFxObject LocalizedObject;

    LocalizedObject = Outer.CreateObject("Object");
    LocalizedObject.SetString("back", BackString);
    LocalizedObject.SetString("next", NextString);
    LocalizedObject.SetString("done", DoneString);
    LocalizedObject.SetString("skip", SkipString);
    SetObject("localizedText", LocalizedObject);
}

function SetPopUpData(const out array<STutorialSlide> TutorialArray)
{
    local GFxObject DataObject, DataProvider;
    local int I, J;
    local string DescriptionString;
    local KeyBind BoundKey;
    local array<string> KeyStrings;

    DataProvider = Outer.CreateArray();
    I = 0;
    J0x34:

    if(I < TutorialArray.Length)
    {
        DescriptionString = Localize("KFTutorial", TutorialArray[I].DescriptionKey, "KFGameContent");
        if(KFPI != none)
        {
            J = 0;
            J0xBB:

            if(J < TutorialArray[I].KeyGBAs.Length)
            {
                KFPI.GetKeyBindFromCommand(BoundKey, TutorialArray[I].KeyGBAs[J], false);
                KeyStrings[J] = KFPI.GetBindDisplayName(BoundKey);
                if((Class'Actor'.static.Len(KeyStrings[J]) - Class'Actor'.static.Len(ControllerStringPrefix)) > 1)
                {
                    Class'Actor'.static.ReplaceText(KeyStrings[J], ControllerStringPrefix, "");
                }
                ++ J;
                goto J0xBB;
            }
            ReplaceTextArray(DescriptionString, KeyReplaceString, KeyStrings);
        }
        DataObject = Outer.CreateObject("Object");
        DataObject.SetString("title", Localize("KFTutorial", TutorialArray[I].TitleKey, "KFGameContent"));
        DataObject.SetString("description", DescriptionString);
        if(TutorialArray[I].UIImage != none)
        {
            DataObject.SetString("image", "img://" $ PathName(TutorialArray[I].UIImage));
        }
        DataProvider.SetElementObject(I, DataObject);
        ++ I;
        goto J0x34;
    }
    SetObject("data", DataProvider);
}

static function ReplaceTextArray(out string Text, string Replace, array<string> With)
{
    local int I, J;
    local string Input;

    Input = Text;
    Text = "";
    I = InStr(Input, Replace);
    J0x40:

    if(I != -1)
    {
        Text = (Text $ Left(Input, I)) $ With[J];
        if(J < (With.Length - 1))
        {
            ++ J;
        }
        Input = Mid(Input, I + Len(Replace));
        I = InStr(Input, Replace);
        goto J0x40;
    }
    Text = Text $ Input;
}

defaultproperties
{
    ControllerStringPrefix="XboxTypeS_"
    BackString="BACK"
    NextString="NEXT"
    DoneString="DONE"
    SkipString="SKIP"
    KeyReplaceString="%x%"
}