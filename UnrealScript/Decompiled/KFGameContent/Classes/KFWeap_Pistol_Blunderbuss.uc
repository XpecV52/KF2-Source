/*******************************************************************************
 * KFWeap_Pistol_Blunderbuss generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Pistol_Blunderbuss extends KFWeap_PistolBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var array<KFProj_Cannonball_Blunderbuss> DeployedCannonballs;
var int NumDeployedCannonballs;
var bool bDeployedCannonball;
var bool bCannonballWasDetonated;
var bool bCannonballConvertedToTimeBomb;
var bool bForceStandardCannonbal;
var transient bool bWaitingForServer;
var bool bLastAnim;
var float SelfDamageReductionValue;
var transient float FireHoldTime;
var transient float TimedDetonationThresholdTime;
var(Animations) const editconst name FireLoopStartLastSightedAnim;
var(Animations) const editconst name FireLoopStartLastAnim;
var(Animations) const editconst name FireLoopLastSightedAnim;

replication
{
     if(bNetDirty)
        NumDeployedCannonballs, bCannonballWasDetonated, 
        bDeployedCannonball;
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function Projectile ProjectileFire()
{
    local Projectile P;
    local KFProj_Cannonball_Blunderbuss Cannonball;

    P = super(KFWeapon).ProjectileFire();
    Cannonball = KFProj_Cannonball_Blunderbuss(P);
    if(Cannonball != none)
    {
        DeployedCannonballs.AddItem(Cannonball;
        NumDeployedCannonballs = DeployedCannonballs.Length;
        bForceNetUpdate = true;
    }
    return P;
}

function RemoveDeployedCannonball(optional int CannonballIndex, optional Actor CannonballActor)
{
    CannonballIndex = -1;    
    if(CannonballIndex == -1)
    {
        if(CannonballActor != none)
        {
            CannonballIndex = DeployedCannonballs.Find(CannonballActor;
        }
    }
    if(CannonballIndex != -1)
    {
        DeployedCannonballs.Remove(CannonballIndex, 1;
        NumDeployedCannonballs = DeployedCannonballs.Length;
        bForceNetUpdate = true;
    }
}

simulated function StartFire(byte FireModeNum)
{
    if(bWaitingForServer && FireModeNum <= 1)
    {
        return;
    }
    super(KFWeapon).StartFire(FireModeNum);
}

simulated function EndFire(byte FireModeNum)
{
    bForceStandardCannonbal = true;
    super(Weapon).EndFire(FireModeNum);
}

simulated function ResetFireState()
{
    FireHoldTime = 0;
    bForceStandardCannonbal = false;
    bCannonballWasDetonated = false;
    bCannonballConvertedToTimeBomb = false;
}

reliable client simulated function ClientResetFire()
{
    bWaitingForServer = false;
}

reliable client simulated function ClientResetFireInterval()
{
    if(IsTimerActive('RefireCheckTimer'))
    {
        ClearTimer('RefireCheckTimer');
    }
    SetTimer(GetFireInterval(0), true, 'RefireCheckTimer');
}

simulated function HandleProjectileImpact(byte ProjectileFireMode, ImpactInfo Impact, optional float PenetrationValue)
{
    if((Instigator != none) && Instigator.Role == ROLE_Authority)
    {
        ProcessInstantHitEx(ProjectileFireMode, Impact,, PenetrationValue, 0);
    }
}

function AdjustDamage(out int InDamage, class<DamageType> DamageType, Actor DamageCauser)
{
    super(KFWeapon).AdjustDamage(InDamage, DamageType, DamageCauser);
    if(((Instigator != none) && DamageCauser != none) && DamageCauser.Instigator == Instigator)
    {
        InDamage *= SelfDamageReductionValue;
    }
}

simulated function KFProjectile SpawnAllProjectiles(class<KFProjectile> KFProjClass, Vector RealStartLoc, Vector AimDir)
{
    local KFPerk InstigatorPerk;

    if(CurrentFireMode == 1)
    {
        InstigatorPerk = GetPerk();
        if(InstigatorPerk != none)
        {
            Spread[CurrentFireMode] = default.Spread[CurrentFireMode] * InstigatorPerk.GetTightChokeModifier();
        }
    }
    return super(KFWeapon).SpawnAllProjectiles(KFProjClass, RealStartLoc, AimDir);
}

simulated function name GetLoopStartFireAnim(byte FireModeNum)
{
    if(bUsingSights)
    {
        if((AmmoCount[GetAmmoType(FireModeNum)] <= 1) && FireModeNum == 0)
        {
            return FireLoopStartLastSightedAnim;            
        }
        else
        {
            return FireLoopStartSightedAnim;
        }
    }
    if((AmmoCount[GetAmmoType(FireModeNum)] <= 1) && FireModeNum == 0)
    {
        return FireLoopStartLastAnim;        
    }
    else
    {
        return FireLoopStartAnim;
    }
}

simulated function name GetLoopingFireAnim(byte FireModeNum)
{
    if(bUsingScopePosition)
    {
        return FireLoopScopedAnim;        
    }
    else
    {
        if(bUsingSights)
        {
            if((AmmoCount[GetAmmoType(FireModeNum)] < 1) && FireModeNum == 0)
            {
                return FireLoopLastSightedAnim;                
            }
            else
            {
                return FireLoopSightedAnim;
            }
        }
    }
    return FireLoopAnim;
}

simulated state WeaponSingleFiring
{
    simulated function FireAmmunition()
    {
        super.FireAmmunition();
        if(Role != ROLE_Authority)
        {
            bWaitingForServer = true;
        }
    }

    simulated function bool ShouldRefire()
    {
        return super(Weapon).ShouldRefire() && !bWaitingForServer;
    }
    stop;    
}

simulated state Active
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if(Role == ROLE_Authority)
        {
            ClientResetFire();
        }
    }
    stop;    
}

simulated state BlunderbussDeployAndDetonate extends WeaponSingleFiring
{
    simulated event BeginState(name PreviousStateName)
    {
        if(!IsTimerActive('TryDetonateCannonBall'))
        {
            SetTimer(0.05, true, 'TryDetonateCannonBall');
        }
        super(WeaponFiring).BeginState(PreviousStateName);
        ResetFireState();
    }

    simulated event EndState(name NextStateName)
    {
        local int iNumOfCannonballs, I;

        if(Role == ROLE_Authority)
        {
            iNumOfCannonballs = DeployedCannonballs.Length;
            I = 0;
            J0x33:

            if(I < iNumOfCannonballs)
            {
                DeployedCannonballs[0].Detonate();
                ++ I;
                goto J0x33;
            }
        }
        bDeployedCannonball = false;
        ClearTimer('TryDetonateCannonBall');
        super(WeaponFiring).EndState(NextStateName);
    }

    simulated function PutDownWeapon()
    {
        local KFProj_Cannonball_Blunderbuss Cannonball;

        if(((Role == ROLE_Authority) && bDeployedCannonball) && DeployedCannonballs.Length > 0)
        {
            Cannonball = DeployedCannonballs[DeployedCannonballs.Length - 1];
            if(Cannonball.bIsTimedExplosive)
            {
                Cannonball.Detonate();
                bCannonballWasDetonated = true;
            }
        }
        if(Role == ROLE_Authority)
        {
            ClientResetFire();
            bDeployedCannonball = false;
        }
        global.PutDownWeapon();
    }

    simulated function TryDetonateCannonBall()
    {
        if((bCannonballWasDetonated || bWeaponPutDown) || ShouldRefire())
        {
            return;
        }
        DetonateCannonball();
    }

    simulated event Tick(float DeltaTime)
    {
        local KFProj_Cannonball_Blunderbuss Cannonball;

        global.Tick(DeltaTime);
        if(((Role == ROLE_Authority) && bForceStandardCannonbal) && !bCannonballConvertedToTimeBomb)
        {
            bDeployedCannonball = false;
            bNetDirty = true;
            return;
        }
        if(PendingFire(CurrentFireMode) && FireHoldTime < TimedDetonationThresholdTime)
        {
            FireHoldTime += DeltaTime;
        }
        if(Role == ROLE_Authority)
        {
            if(DeployedCannonballs.Length > 0)
            {
                Cannonball = DeployedCannonballs[DeployedCannonballs.Length - 1];
                if((!Cannonball.bIsTimedExplosive && FireHoldTime >= TimedDetonationThresholdTime) && !bCannonballConvertedToTimeBomb)
                {
                    bCannonballConvertedToTimeBomb = true;
                    Cannonball.bIsTimedExplosive = true;
                    Cannonball.bNetDirty = true;
                }
            }
        }
    }

    simulated function FireAmmunition()
    {
        if(!bDeployedCannonball)
        {
            if(Role != ROLE_Authority)
            {
                bWaitingForServer = true;
            }
            super.FireAmmunition();
            ResetFireState();
            bNetDirty = true;
        }
        bDeployedCannonball = true;
        SetPendingFire(CurrentFireMode);
    }

    simulated function bool ShouldRefire()
    {
        return !bCannonballWasDetonated && StillFiring(CurrentFireMode);
    }

    simulated function DetonateCannonball()
    {
        local KFProj_Cannonball_Blunderbuss Cannonball;

        if(Role == ROLE_Authority)
        {
            if(bDeployedCannonball && DeployedCannonballs.Length > 0)
            {
                Cannonball = DeployedCannonballs[DeployedCannonballs.Length - 1];
                if(Cannonball.bIsTimedExplosive)
                {
                    Cannonball.Detonate();
                    bCannonballWasDetonated = true;
                    ClientResetFireInterval();
                    if(IsTimerActive('RefireCheckTimer'))
                    {
                        ClearTimer('RefireCheckTimer');
                    }
                    SetTimer(GetFireInterval(0), true, 'RefireCheckTimer');
                    bDeployedCannonball = false;
                }
            }
        }
    }

    simulated function HandleFinishedFiring()
    {
        if(Role == ROLE_Authority)
        {
            if(!HasAnyAmmo() && NumDeployedCannonballs == 0)
            {
                if(CanSwitchWeapons())
                {
                    Instigator.Controller.ClientSwitchToBestWeapon(false);
                }
            }
        }
        super(Weapon).HandleFinishedFiring();
    }
    stop;    
}

defaultproperties
{
    SelfDamageReductionValue=0.5
    TimedDetonationThresholdTime=0.01
    FireLoopStartLastSightedAnim=ShootLoop_Iron_Start_Last
    FireLoopStartLastAnim=ShootLoop_Start_Last
    FireLoopLastSightedAnim=ShootLoop_Iron_Last
    bRevolver=true
    bUseDefaultResetOnReload=false
    CylinderRotInfo=(InC=120,Time=0.2)
    PackageKey="Blunderbuss"
    FirstPersonMeshName="WEP_1P_Blunderbuss_MESH.Wep_1stP_Blunderbuss_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_Blunderbuss_MESH.Wep_3rdP_Blunderbuss_Pickup"
    AttachmentArchetypeName="WEP_Blunderbuss_ARCH.Wep_Blunderbuss_3P"
    MuzzleFlashTemplateName="WEP_Blunderbuss_ARCH.Wep_Blunderbuss_MuzzleFlash"
    bHasIronSights=true
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=true
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_Primary
    InventorySize=7
    PenetrationPower=/* Array type was not detected. */
    IronSightPosition=(X=-3,Y=0,Z=0)
    GroupPriority=100
    WeaponSelectTexture=Texture2D'WEP_UI_Blunderbuss_TEX.UI_WeaponSelect_BlunderBluss'
    MagazineCapacity=3
    SpareAmmoCapacity=39
    InitialSpareMags=4
    bLoopingFireAnim=/* Array type was not detected. */
    BonesToLockOnEmpty=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=-15,Y=12,Z=-6)
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_Pistol_Blunderbuss.MeleeHelper'
    NumPellets=/* Array type was not detected. */
    maxRecoilPitch=900
    minRecoilPitch=775
    maxRecoilYaw=500
    minRecoilYaw=-500
    RecoilRate=0.085
    RecoilBlendOutRatio=1.1
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMinPitchLimit=64785
    RecoilISMaxYawLimit=50
    RecoilISMinYawLimit=65485
    RecoilISMaxPitchLimit=500
    RecoilISMinPitchLimit=65485
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=39,Y=5,Z=-5)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        AnimTreeTemplate=AnimTree'CHR_1P_Arms_ARCH.WEP_1stP_Animtree_Master_Revolver'
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Pistol_Blunderbuss.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Blunderbuss"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Pistol_Blunderbuss.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Pistol_Blunderbuss.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}