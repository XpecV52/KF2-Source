/*******************************************************************************
 * KFvolume_RagdollThrow generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFvolume_RagdollThrow extends KFDynamicPhysicsVolume
    hidecategories(Navigation,Object,Display);

struct HitTracking
{
    var Actor HitActor;
    var float HitTime;

    structdefaultproperties
    {
        HitActor=none
        HitTime=0
    }
};

var array<HitTracking> TrackedHits;
/** Rate that limits how often a single zed can be hit */
var() float RateLimiter;
/** Whether or not to knockdown zeds */
var() bool bKnockdownZeds;
/** Whether or not to use a fixed direction for the throw. Uses Vector from center of Volume if false */
var() bool bFixedThrowVector;
/** Hard exclusion for anything listed as a boss (useful for weekly events where we may have non-boss bosses) */
var() bool bExcludeAnyBoss;
/** Vector to use for throwing a zed in a fixed direction */
var() Vector ThrowDirection<EditCondition=bFixedThrowVector>;
/** List of classes to exclude from being hit */
var() array< class<KFPawn> > HitExclusionList;

simulated event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    local KFPawn_Human KFPH;
    local KFPawn_Monster KFPM;
    local Vector HitDirection;
    local int LastHitIdx;
    local HitTracking NewHit;

    super(PhysicsVolume).Touch(Other, OtherComp, HitLocation, HitNormal);
    if(Role != ROLE_Authority)
    {
        return;
    }
    LastHitIdx = TrackedHits.Find('HitActor', Other;
    if(LastHitIdx != -1)
    {
        if((WorldInfo.TimeSeconds - TrackedHits[LastHitIdx].HitTime) < RateLimiter)
        {
            return;
        }
        TrackedHits.Remove(LastHitIdx, 1;
    }
    LastHitIdx = HitExclusionList.Find(Other.Class;
    if(LastHitIdx != -1)
    {
        return;
    }
    KFPH = KFPawn_Human(Other);
    KFPM = KFPawn_Monster(Other);
    if((KFPH != none) || KFPM != none)
    {
        if(bFixedThrowVector)
        {
            HitDirection = Normal(ThrowDirection);            
        }
        else
        {
            HitDirection = Other.Location - Location;
            HitDirection.Z = DamageType.default.KDeathUpKick;
            HitDirection = Normal(HitDirection);
        }
        if(KFPH != none)
        {
            KFPH.HandleMomentum(HitDirection * DamageType.default.KDamageImpulse, HitLocation, DamageType);            
        }
        else
        {
            if(KFPM != none)
            {
                if(bExcludeAnyBoss && KFPM.IsABoss())
                {
                    return;
                }
                if(bKnockdownZeds)
                {
                    KFPM.Knockdown(HitDirection * DamageType.default.KDamageImpulse, vect(1, 1, 1),,,, DamageType.default.KDamageImpulse * HitDirection, Location);                    
                }
                else
                {
                    KFPM.HandleMomentum(HitDirection * DamageType.default.KDamageImpulse, HitLocation, DamageType);
                }
            }
        }
        NewHit.HitActor = Other;
        NewHit.HitTime = WorldInfo.TimeSeconds;
        TrackedHits.AddItem(NewHit;
    }
}

defaultproperties
{
    RateLimiter=0.1
    bKnockdownZeds=true
    bExcludeAnyBoss=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFvolume_RagdollThrow.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFvolume_RagdollThrow.BrushComponent0'
    Components(0)=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFvolume_RagdollThrow.BrushComponent0'
    CollisionComponent=BrushComponent0
}