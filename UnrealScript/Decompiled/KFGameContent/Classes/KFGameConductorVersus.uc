/*******************************************************************************
 * KFGameConductorVersus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameConductorVersus extends KFGameConductor within KFGameInfo;

/** How much to scale the zed's health based on the human team players average perk rank */
var() InterpCurveFloat HumanRankZedHealthScaleCurve;
/** How much to scale the zed's health based on the human team players average perk rank */
var() InterpCurveFloat HumanRankZedDamageScaleCurve;

function TimerUpdate()
{
    UpdatePlayerAccuracyStats();
    UpdateZedLifespanStats();
    UpdatePlayersStatus();
    UpdatePlayersAggregateSkill();
    UpdateOverallStatus();
}

function UpdateOverallStatus()
{
    local int I;

    if(!bBypassGameConductor)
    {
        CurrentVersusZedHealthMod = EvalInterpCurveFloat(HumanRankZedHealthScaleCurve, AveragePlayerPerkRank);
        CurrentVersusZedDamageMod = EvalInterpCurveFloat(HumanRankZedDamageScaleCurve, AveragePlayerPerkRank);        
    }
    else
    {
        CurrentVersusZedHealthMod = default.CurrentVersusZedHealthMod;
        CurrentVersusZedDamageMod = default.CurrentVersusZedDamageMod;
    }
    Outer.MyKFGRI.VersusZedHealthMod = CurrentVersusZedHealthMod;
    Outer.MyKFGRI.VersusZedDamageMod = CurrentVersusZedDamageMod;
    if(bLogGameConductor)
    {
        LogInternal((("CurrentVersusZedHealthMod = " $ string(CurrentVersusZedHealthMod)) $ " CurrentVersusZedDamageMod = ") $ string(CurrentVersusZedDamageMod));
    }
    if((GameConductorStatus == 1) && (Outer.WorldInfo.TimeSeconds - PlayerDeathForceLullTime) > PlayerDeathForceLullLength)
    {
        GameConductorStatus = 0;
        if(bLogGameConductor)
        {
            LogInternal("Forced lull completed");
        }
    }
    Outer.MyKFGRI.CurrentGameConductorStatus = GameConductorStatus;
    Outer.MyKFGRI.CurrentParZedLifeSpan = GetParZedLifeSpan();
    I = 0;
    J0x282:

    if(I < (10 - 1))
    {
        Outer.MyKFGRI.OverallRankAndSkillModifierTracker[I] = Outer.MyKFGRI.OverallRankAndSkillModifierTracker[I + 1];
        ++ I;
        goto J0x282;
    }
    OverallRankAndSkillModifier = 0.5;
    if(bLogGameConductor)
    {
        LogInternal("Bypassing GameConductor adjustment OverallRankAndSkillModifier = " $ string(OverallRankAndSkillModifier));
    }
    Outer.MyKFGRI.OverallRankAndSkillModifierTracker[10 - 1] = OverallRankAndSkillModifier;
    return;
}

defaultproperties
{
    HumanRankZedHealthScaleCurve=(Points=/* Array type was not detected. */,InVal=0,OutVal=0.7,ArriveTangent=0,LeaveTangent=0,InterpMode=EInterpCurveMode.CIM_Linear)
    HumanRankZedDamageScaleCurve=(Points=/* Array type was not detected. */,InVal=0,OutVal=0.5,ArriveTangent=0,LeaveTangent=0,InterpMode=EInterpCurveMode.CIM_Linear)
    TargetPerkRankRange=(X=0,Y=25)
    CurrentSpawnRateModification=1.3
}