/*******************************************************************************
 * KFGameInfo_VersusSurvival generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameInfo_VersusSurvival extends KFGameInfo_Survival
    config(Game)
    hidecategories(Navigation,Movement,Collision);

const MaxActivePukeMines = 30;
const ANTI_GRIEF_DELAY = 30.f;
const ANTI_GRIEF_INTERVAL = 2.f;
const ANTI_GRIEF_DAMAGE_PERCENTAGE = 10.f;

var config bool bTeamBalanceEnabled;
var transient array<KFProj_BloatPukeMine> ActivePukeMines;
var config float ScoreRadius;
var protected const array< class<KFPawn_Monster> > PlayerZedClasses;
var class<KFDamageType> AntiGriefDamageTypeClass;

event PreBeginPlay()
{
    super.PreBeginPlay();
    CreateTeam(1);
}

function InitGRIVariables()
{
    super(KFGameInfo).InitGRIVariables();
    KFGameReplicationInfoVersus(MyKFGRI).bTeamBalanceEnabled = bTeamBalanceEnabled;
}

function bool IsPlayerReady(KFPlayerReplicationInfo PRI)
{
    if(Class'KFGameEngine'.static.CheckSkipLobby() || Class'Engine'.static.IsEditor())
    {
        return true;
    }
    return super(KFGameInfo).IsPlayerReady(PRI);
}

function StartMatch()
{
    local KFPlayerController KFPC;
    local array<KFPlayerController> PlayerControllers;

    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        PlayerControllers[PlayerControllers.Length] = KFPC;
        if((KFPC.GetTeamNum() == 255) && (KFPC.Pawn == none) || KFPawn_Customization(KFPC.Pawn) != none)
        {
            if(KFPC.Pawn != none)
            {
                KFPC.Pawn.Destroy();
            }
            KFPC.StartSpectate();
        }        
    }    
    if(PlayerControllers.Length == 1)
    {
        SetTeam(PlayerControllers[0], Teams[0]);
    }
    super.StartMatch();
}

function BalanceTeams()
{
    local int Delta, AutoBalanceRemaining, I;
    local TeamInfo TI;
    local array<PlayerReplicationInfo> AutoBalanceList;
    local KFGameReplicationInfoVersus KFGRIV;
    local PlayerReplicationInfo PRI;

    KFGRIV = KFGameReplicationInfoVersus(MyKFGRI);
    Delta = Teams[1].Size - Teams[0].Size;
    if(Delta == 0)
    {
        return;
    }
    TI = ((Delta > 0) ? Teams[1] : Teams[0]);
    I = 0;
    J0xB5:

    if(I < KFGRIV.PRIArray.Length)
    {
        PRI = KFGRIV.PRIArray[I];
        if(PRI.Team == TI)
        {
            AutoBalanceList.AddItem(PRI;
        }
        ++ I;
        goto J0xB5;
    }
    AutoBalanceRemaining = Min(int(Abs(float(Delta))), KFGRIV.TeamBalanceDelta);
    J0x19F:

    if((AutoBalanceRemaining > 0) || TI.Size > (MaxPlayersAllowed / 2))
    {
        I = Rand(AutoBalanceList.Length);
        SwapTeamFor(AutoBalanceList[I]);
        AutoBalanceList.Remove(I, 1;
        -- AutoBalanceRemaining;
        goto J0x19F;
    }
}

function SwapTeamFor(PlayerReplicationInfo PRI)
{
    local KFPlayerControllerVersus KFPC;

    KFPC = KFPlayerControllerVersus(PRI.Owner);
    if(KFPC != none)
    {
        KFPC.NotifyOfAutoBalance();
        SetTeam(KFPC, ((PRI.GetTeamNum() == 255) ? Teams[0] : Teams[1]));
    }
}

function CreateTeam(int TeamIndex)
{
    switch(TeamIndex)
    {
        case 0:
            Teams[TeamIndex] = Spawn(Class'KFTeamInfo_Human');
            GameReplicationInfo.SetTeam(TeamIndex, Teams[TeamIndex]);
            break;
        case 1:
            Teams[TeamIndex] = Spawn(Class'KFTeamInfo_Zeds');
            GameReplicationInfo.SetTeam(TeamIndex, Teams[TeamIndex]);
            break;
        default:
            break;
    }
}

function byte PickTeam(byte Current, Controller C)
{
    if((Teams[1].Size < Teams[0].Size) || ((Teams[0].Size > 0) && Teams[1].Size == Teams[0].Size) && FRand() < 0.5)
    {
        return 1;        
    }
    else
    {
        return 0;
    }
}

function bool ChangeTeam(Controller Other, int N, bool bNewTeam)
{
    LogInternal("******CHANGE TEAM!!!");
    if((PlayerController(Other) == none) || (((Other.PlayerReplicationInfo != none) && !Other.PlayerReplicationInfo.bOnlySpectator) && 2 > N) && Other.PlayerReplicationInfo.Team != Teams[N])
    {
        SetTeam(Other, Teams[N]);
        return true;
    }
    return false;
}

function SetTeam(Controller Other, KFTeamInfo_Human NewTeam)
{
    local KFPlayerControllerVersus KFPC;
    local TeamInfo OldTeam;
    local NavigationPoint Start;

    if((Other == none) || Other.PlayerReplicationInfo == none)
    {
        super(KFGameInfo).SetTeam(Other, NewTeam);
        return;
    }
    OldTeam = Other.PlayerReplicationInfo.Team;
    super(KFGameInfo).SetTeam(Other, NewTeam);
    if(NewTeam != OldTeam)
    {
        if(Other.PlayerReplicationInfo.bWaitingPlayer)
        {
            KFPC = KFPlayerControllerVersus(Other);
            if(KFPC != none)
            {
                if(NewTeam.TeamIndex == 255)
                {
                    if((KFPC.Pawn != none) && KFPawn_Customization(KFPC.Pawn) != none)
                    {
                        KFPawn_Customization(KFPC.Pawn).SetServerHidden(true);
                    }
                    KFPC.SetCameraMode('PlayerZedWaiting');                    
                }
                else
                {
                    if(KFPC.Pawn != none)
                    {
                        KFPawn_Customization(KFPC.Pawn).SetServerHidden(false);
                        if(!KFPawn_Customization(KFPC.Pawn).MoveToCustomizationPoint())
                        {
                            Start = KFPC.GetBestCustomizationStart(self);
                            if(Start != none)
                            {
                                KFPawn_Customization(KFPC.Pawn).SetUpdatedMovementData(Start.Location, Start.Rotation);
                            }
                        }
                        KFPC.SetViewTarget(KFPC.Pawn);
                        KFPC.SetCameraMode('Customization');
                    }
                }
                KFPC.ServerNotifyTeamChanged();
            }            
        }
        else
        {
            if((OldTeam.TeamIndex == 255) && KFPC.PlayerZedSpawnInfo.PendingZedPawnClass != none)
            {
                if(SpawnManager != none)
                {
                    KFAISpawnManager_Versus(SpawnManager).RecyclePendingZedPawnClass(KFPC);
                }
            }
        }
    }
}

function Logout(Controller Exiting)
{
    local KFPlayerController KFPC;

    if(Exiting != none)
    {
        KFPC = KFPlayerController(Exiting);
        if(((KFPC != none) && KFPC.GetTeamNum() == 255) && KFPC.PlayerZedSpawnInfo.PendingZedPawnClass != none)
        {
            if(SpawnManager != none)
            {
                KFAISpawnManager_Versus(SpawnManager).RecyclePendingZedPawnClass(KFPC);
            }
        }
    }
    super(KFGameInfo).Logout(Exiting);
}

function RestartPlayer(Controller NewPlayer)
{
    local int PlayerTeamIndex;
    local KFPawn_Monster MonsterPawn;

    if((NewPlayer.PlayerReplicationInfo == none) || NewPlayer.PlayerReplicationInfo.bOnlySpectator)
    {
        return;
    }
    PlayerTeamIndex = NewPlayer.GetTeamNum();
    if((NewPlayer.Pawn != none) && KFPawn_Customization(NewPlayer.Pawn) != none)
    {
        NewPlayer.Pawn.Destroy();
    }
    if(PlayerTeamIndex != 255)
    {
        super.RestartPlayer(NewPlayer);        
    }
    else
    {
        if((NewPlayer.Pawn == none) && PlayerTeamIndex == 255)
        {
            super(GameInfo).RestartPlayer(NewPlayer);
        }
    }
    MonsterPawn = KFPawn_Monster(NewPlayer.Pawn);
    if((MonsterPawn != none) && MonsterPawn.IsHumanControlled())
    {
        MonsterPawn.UpdateLastTimeDamageHappened();
    }
}

function int GetAIControlledMonsterAliveCount()
{
    local AIController AIP;
    local int UsedLivingAIMonsterCount;

    foreach WorldInfo.AllControllers(Class'AIController', AIP)
    {
        if(((AIP != none) && AIP.Pawn != none) && AIP.Pawn.IsAliveAndWell())
        {
            if(KFPawn_Monster(AIP.Pawn) != none)
            {
                ++ UsedLivingAIMonsterCount;
            }
        }        
    }    
    return UsedLivingAIMonsterCount;
}

function class<Pawn> GetDefaultPlayerClass(Controller C)
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(C);
    if(KFPC.GetTeamNum() == 255)
    {
        if((WaveNum == WaveMax) && AIAliveCount == 0)
        {
            return Class'KFPawn_ZedPatriarch_Versus';            
        }
        else
        {
            if(KFPC.PlayerZedSpawnInfo.PendingZedPawnClass != none)
            {
                return KFPC.PlayerZedSpawnInfo.PendingZedPawnClass;
            }
        }
        return none;
    }
    return super(GameInfo).GetDefaultPlayerClass(C);
}

function int GetLivingPlayerCount()
{
    local Controller P;
    local int UsedLivingHumanPlayersCount;

    foreach WorldInfo.AllControllers(Class'Controller', P)
    {
        if(((P != none) && P.Pawn != none) && P.Pawn.IsAliveAndWell())
        {
            if(P.GetTeamNum() != 255)
            {
                ++ UsedLivingHumanPlayersCount;
            }
        }        
    }    
    return UsedLivingHumanPlayersCount;
}

function ReduceDamage(out int Damage, Pawn injured, Controller InstigatedBy, Vector HitLocation, out Vector Momentum, class<DamageType> DamageType, Actor DamageCauser)
{
    local KFPawn InstigatorPawn, InjuredPawn;

    InstigatorPawn = KFPawn(InstigatedBy.Pawn);
    InjuredPawn = KFPawn(injured);
    if(DamageType != AntiGriefDamageTypeClass)
    {
        if(((InstigatorPawn != none) && InjuredPawn != none) && InstigatorPawn.GetTeamNum() != InjuredPawn.GetTeamNum())
        {
            InstigatorPawn.UpdateLastTimeDamageHappened();
            InjuredPawn.UpdateLastTimeDamageHappened();
        }
    }
    if((((InstigatedBy != none) && injured != none) && injured.Controller != InstigatedBy) && injured.GetTeamNum() == InstigatedBy.GetTeamNum())
    {
        Damage = 0;
        Momentum = vect(0, 0, 0);        
    }
    else
    {
        super.ReduceDamage(Damage, injured, InstigatedBy, HitLocation, Momentum, DamageType, DamageCauser);
    }
}

function ScoreDamage(int DamageAmount, Controller Damager, Controller Damagee, Pawn DamagedPawn)
{
    local KFPlayerControllerVersus KFPCV;
    local float ScoreRadiusSQ;

    ScoreRadiusSQ = Square(ScoreRadius);
    foreach WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
    {
        if((((KFPCV.Pawn != none) && KFPCV.GetTeamNum() == 255) && KFPCV.Pawn.IsAliveAndWell()) && VSizeSq(KFPCV.Pawn.Location - DamagedPawn.Location) <= ScoreRadiusSQ)
        {
            if(DamagedPawn.FastTrace(KFPCV.Pawn.Location, DamagedPawn.Location))
            {
                KFPCV.AwardZedDamage(DamageAmount, Damager == KFPCV);
            }
        }        
    }    
}

function EndOfMatch(bool bVictory)
{
    local KFPlayerController KFPC;

    if(WorldInfo.GRI.GameClass.static.AllowAnalyticsLogging())
    {
        WorldInfo.TWLogEvent("match_end", none, "#" $ string(WaveNum), "#" $ ((bVictory) ? "1" : "0"), "#" $ string(GameConductor.ZedVisibleAverageLifespan));
    }
    if(bVictory)
    {
        SetTimer(EndCinematicDelay, false, 'SetWonGameCamera');
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.ClientWonGame(WorldInfo.GetMapName(true), byte(GameDifficulty), byte(GameLength), IsMultiplayerGame());            
        }        
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 13);        
    }
    else
    {
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 12);
        SetZedsToVictoryState();
    }
    WorldInfo.TWRefreshTweakParams();
    WorldInfo.TWPushLogs();
    GotoState('MatchEnded');
}

function Killed(Controller Killer, Controller KilledPlayer, Pawn KilledPawn, class<DamageType> DamageType)
{
    super.Killed(Killer, KilledPlayer, KilledPawn, DamageType);
    if(((IsWaveActive()) && (GetAIControlledMonsterAliveCount()) <= 0) && SpawnManager.IsFinishedSpawning())
    {
        CheckPawnsForGriefing(true);
    }
}

function WaveEnded(KFGameInfo_Survival.EWaveEndCondition WinCondition)
{
    ClearTimer('CheckPawnsForGriefing');
    super.WaveEnded(WinCondition);
}

protected function CheckPawnsForGriefing(optional bool bInitial)
{
    local Pawn TestPawn;
    local KFPawn_Monster MonsterTestPawn;

    bInitial = false;
    foreach WorldInfo.AllPawns(Class'Pawn', TestPawn)
    {
        if(((TestPawn.IsAliveAndWell() && TestPawn.Controller != none) && TestPawn.Controller.bIsPlayer) && TestPawn.GetTeamNum() == 255)
        {
            MonsterTestPawn = KFPawn_Monster(TestPawn);
            if(MonsterTestPawn != none)
            {
                if(bInitial)
                {
                    MonsterTestPawn.LastTimeDamageHappened = WorldInfo.TimeSeconds;
                    continue;
                }
                if(((WorldInfo.TimeSeconds - MonsterTestPawn.LastTimeDamageHappened) >= 30) && MonsterTestPawn.LastTimeDamageHappened != float(0))
                {
                    MonsterTestPawn.MotivatePlayerToAttack(10, AntiGriefDamageTypeClass);
                }
            }
        }        
    }    
    if(IsWaveActive())
    {
        SetTimer(2, false, 'CheckPawnsForGriefing');
    }
}

function ResetPickups(array<KFPickupFactory> PickupList, int NumPickups)
{
    local byte I;

    I = 0;
    J0x0C:

    if(I < PickupList.Length)
    {
        PickupList[I].Reset();
        ++ I;
        goto J0x0C;
    }
}

defaultproperties
{
    bTeamBalanceEnabled=true
    ScoreRadius=1000
    PlayerZedClasses(0)=none
    PlayerZedClasses(1)=class'KFPawn_ZedClot_Slasher_Versus'
    PlayerZedClasses(2)=class'KFPawn_ZedClot_Alpha_Versus'
    PlayerZedClasses(3)=class'KFPawn_ZedCrawler_Versus'
    PlayerZedClasses(4)=class'KFPawn_ZedGorefast_Versus'
    PlayerZedClasses(5)=class'KFPawn_ZedStalker_Versus'
    PlayerZedClasses(6)=class'KFPawn_ZedScrake_Versus'
    PlayerZedClasses(7)=class'KFPawn_ZedFleshPound_Versus'
    PlayerZedClasses(8)=class'KFPawn_ZedBloat_Versus'
    PlayerZedClasses(9)=class'KFPawn_ZedSiren_Versus'
    PlayerZedClasses(10)=class'KFPawn_ZedHusk_Versus'
    AntiGriefDamageTypeClass=Class'KFGame.KFDT_NoGoVolume'
    bIsVersusGame=true
    KFGFxManagerClass=Class'KFGame.KFGFxMoviePlayer_Manager_Versus'
    DifficultyTemplate=KFDifficultyInfo'GP_Difficulty_ARCH.Difficulty_Versus'
    MaxGameDifficulty=0
    SpawnManagerClasses=/* Array type was not detected. */
    GameConductorClass=Class'KFGameConductorVersus'
    AIBossClassList=/* Array type was not detected. */
    InValidMaps=/* Array type was not detected. */
    DefaultPawnClass=Class'KFPawn_Human_Versus'
    HUDType=Class'KFGFXHudWrapper_Versus'
    MaxPlayers=12
    MaxPlayersAllowed=12
    GameName="VS Survival"
    PlayerControllerClass=Class'KFPlayerControllerVersus'
    PlayerReplicationInfoClass=Class'KFGame.KFPlayerReplicationInfoVersus'
    GameReplicationInfoClass=Class'KFGameReplicationInfoVersus'
    OnlineGameSettingsClass=Class'KFGame.KFOnlineGameSettingsVersus'
}