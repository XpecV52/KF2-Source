/*******************************************************************************
 * KFMapObjective_ActivateTrigger generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_ActivateTrigger extends KFMapObjective_AreaDefense
    hidecategories(Navigation,Object,Movement,Display);

var repnotify int TriggerPulls;
/** How many times a trigger has to be pulled until the objective is complete, per number of players */
var() const int TriggerPullsRequiredForPlayerCount[6];
var int TriggerPullsRequired;
/** Reference to the trigger that we may need to override. */
var() KFTrigger_ObjectiveLever ObjectiveLever;
/** A delay from the the start of an objective, so the player can't automatically pull the lever. */
var() float ActivationDelay;
/** A sound to play when the trigger is ready to be triggered (e.g. after activation delay or trigger reset delay) */
var() array<AkEvent> TriggerReadySoundEvents;
/** A sound to play when the trigger is pulled */
var() array<AkEvent> TriggerPulledSoundEvents;
/** A sound to play when the objective is fully complete */
var() AkEvent SuccessSoundEvent100pct;
/** A sound to play when the objective is mostly complete */
var() AkEvent SuccessSoundEvent85pct;
/** A sound to play when the objective is adequately complete */
var() AkEvent SuccessSoundEvent50pct;
/** A sound to play when the objective is barely complete */
var() AkEvent SuccessSoundEvent25pct;
/** Sound event to play when players are engaged with too many zeds in the zone */
var() AkEvent TooManyZedsSoundEvent;
/** Sound event to play when too few players are in the zone */
var() AkEvent TooFewPlayersSoundEvent;
/** How often to remind players about the objective if they aren't engaged in completing it */
var() float RemindPlayersTime;
/** A sound to play when enough players are in the zone, few enough zeds are in the zone, and players are still not pulling the readied trigger */
var() array<AkEvent> TriggerReminderSoundEvents;
/** How often to remind players that the trigger is ready to be pulled */
var() float ReadyTriggerReminderTime;
var transient bool bObjectiveLeverActiveBefore;
var transient bool bObjectiveLeverBlessedBefore;
var bool bLeverReady;
var repnotify bool bNoPlayers;
var bool bInteractable;
var repnotify int nNumLeversActivated;
var const Color ReadyIconColor;
var const Color NotReadyIconColor;

replication
{
     if(bNetDirty)
        TriggerPulls, TriggerPullsRequired, 
        bInteractable, bNoPlayers, 
        nNumLeversActivated;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'TriggerPulls')
    {
        if(TriggerPulls != 0)
        {
            TriggerObjectiveProgressEvent(0, float(TriggerPulls) / float(TriggerPullsRequired));
            bLeverReady = false;
        }        
    }
    else
    {
        if(VarName == 'nNumLeversActivated')
        {
            TriggerObjectiveProgressEvent(1);
            bLeverReady = true;            
        }
        else
        {
            super.ReplicatedEvent(VarName);
        }
    }
}

simulated function ActivateObjective()
{
    local int PlayerCount;

    if(ObjectiveLever != none)
    {
        ObjectiveLever.OwningObjective = self;
    }
    super.ActivateObjective();
    if(Role == ROLE_Authority)
    {
        TriggerPulls = 0;
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        TriggerPullsRequired = TriggerPullsRequiredForPlayerCount[PlayerCount];
        LogInternal((((string(self) @ "-") @ string(GetFuncName())) @ "- ActivationDelay:") @ string(ActivationDelay));
        if(ObjectiveLever != none)
        {
            ObjectiveLever.SetFathersBlessing(false);
        }
        bInteractable = false;
        if(ActivationDelay > 0)
        {
            SetTimer(ActivationDelay, false, 'ActivateTrigger');            
        }
        else
        {
            ActivateTrigger();
        }
        CurrentRewardAmount = 0;
        bObjectiveLeverActiveBefore = false;
        bObjectiveLeverBlessedBefore = false;
        SetTimer(RemindPlayersTime, false, 'Timer_TooFewPlayersReminderCooldown');
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        CheckTriggerActivation();
    }
}

simulated function DeactivateObjective()
{
    local KFPlayerController KFPC;
    local KFPawn_Human KFPH;

    super.DeactivateObjective();
    if(Role == ROLE_Authority)
    {
        ClearTimer('Timer_CheckObjective');
        bInteractable = false;
        if(ObjectiveLever != none)
        {
            ObjectiveLever.SetFathersBlessing(true);
        }
        if(CurrentRewardAmount > float(0))
        {
            foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
            {
                GrantReward(KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo), KFPlayerController(KFPH.Controller));                
            }            
        }
        PlayDeactivationDialog();
    }
    KFPC = KFPlayerController(GetALocalPlayerController());
    if((KFPC != none) && KFPC.myGfxHUD != none)
    {
        KFPC.myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetFailState(CurrentRewardAmount <= float(0));
    }
}

function PlayDeactivationDialog()
{
    if(CurrentRewardAmount <= float(0))
    {
        PlaySoundBase(FailureSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 6);        
    }
    else
    {
        if((GetProgress()) <= JustWinThreshold)
        {
            PlaySoundBase(SuccessSoundEvent25pct, false, WorldInfo.NetMode == NM_DedicatedServer);            
        }
        else
        {
            if((GetProgress()) <= StandardWinThreshold)
            {
                PlaySoundBase(SuccessSoundEvent50pct, false, WorldInfo.NetMode == NM_DedicatedServer);                
            }
            else
            {
                if((GetProgress()) <= GoodWinThreshold)
                {
                    PlaySoundBase(SuccessSoundEvent85pct, false, WorldInfo.NetMode == NM_DedicatedServer);                    
                }
                else
                {
                    PlaySoundBase(SuccessSoundEvent100pct, false, WorldInfo.NetMode == NM_DedicatedServer);
                }
            }
        }
    }
}

simulated function ActivateTrigger()
{
    local int PlayerCount;

    LogInternal((string(self) @ "-") @ string(GetFuncName()));
    bInteractable = true;
    if(ObjectiveLever != none)
    {
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        ObjectiveLever.SetFathersBlessing((TouchingZeds.Length < ZedThresholds[PlayerCount]) && TouchingHumans.Length >= PlayerThresholds[PlayerCount]);
    }
    ++ nNumLeversActivated;
    TriggerObjectiveProgressEvent(1);
    SetTimer(0.25, true, 'Timer_CheckObjective');
    SetTimer(ReadyTriggerReminderTime, false, 'Timer_TriggerReadyReminderCooldown');
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    local int PlayerCount;

    super.Touch(Other, OtherComp, HitLocation, HitNormal);
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if(TouchingZeds.Length >= ZedThresholds[PlayerCount])
    {
        if(((ObjectiveLever != none) && bActive) && bInteractable)
        {
            ObjectiveLever.SetFathersBlessing(false);
            CheckTriggerActivation();
        }        
    }
    else
    {
        if(TouchingHumans.Length >= PlayerThresholds[PlayerCount])
        {
            if(((ObjectiveLever != none) && bActive) && bInteractable)
            {
                ObjectiveLever.SetFathersBlessing(true);
                CheckTriggerActivation();
            }
        }
    }
}

event UnTouch(Actor Other)
{
    local int PlayerCount;

    super.UnTouch(Other);
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if(TouchingHumans.Length < PlayerThresholds[PlayerCount])
    {
        if(((ObjectiveLever != none) && bActive) && bInteractable)
        {
            ObjectiveLever.SetFathersBlessing(false);
            CheckTriggerActivation();
        }        
    }
    else
    {
        if(TouchingZeds.Length < ZedThresholds[PlayerCount])
        {
            if(((ObjectiveLever != none) && bActive) && bInteractable)
            {
                ObjectiveLever.SetFathersBlessing(true);
                CheckTriggerActivation();
            }
        }
    }
}

simulated function Timer_CheckObjective()
{
    local int I, PlayerCount;

    I = 0;
    J0x0B:

    if(I < TouchingZeds.Length)
    {
        if(!IsValidZed(TouchingZeds[I]))
        {
            TouchingZeds.Remove(I, 1;
        }
        ++ I;
        goto J0x0B;
    }
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if((bActive && bInteractable) && ObjectiveLever != none)
    {
        ObjectiveLever.SetFathersBlessing((TouchingZeds.Length < ZedThresholds[PlayerCount]) && TouchingHumans.Length >= PlayerThresholds[PlayerCount]);
        CheckTriggerActivation();
    }
    if(((ObjectiveLever != none) && ObjectiveLever.bAllowActivation) && !bObjectiveLeverActiveBefore)
    {
        SetTimer(ReadyTriggerReminderTime, false, 'Timer_TriggerReadyReminderCooldown');
        if(TriggerReadySoundEvents.Length > TriggerPulls)
        {
            PlaySoundBase(TriggerReadySoundEvents[TriggerPulls],, WorldInfo.NetMode == NM_DedicatedServer);
        }
    }
    bObjectiveLeverActiveBefore = ObjectiveLever.bAllowActivation;
    if(Role == ROLE_Authority)
    {
        bNoPlayers = TouchingHumans.Length <= 0;
        if(bActive && bInteractable)
        {
            PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
            if(TouchingHumans.Length < PlayerThresholds[PlayerCount])
            {
                if(!IsTimerActive('Timer_TooFewPlayersReminderCooldown'))
                {
                    if(TooFewPlayersSoundEvent != none)
                    {
                        PlaySoundBase(TooFewPlayersSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                    }
                    SetTimer(RemindPlayersTime, false, 'Timer_TooFewPlayersReminderCooldown');
                }
            }
            if(TouchingZeds.Length > ZedThresholds[PlayerCount])
            {
                if(!IsTimerActive('Timer_TooManyZedsReminderCooldown'))
                {
                    if(TooManyZedsSoundEvent != none)
                    {
                        PlaySoundBase(TooManyZedsSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                    }
                    SetTimer(RemindPlayersTime, false, 'Timer_TooManyZedsReminderCooldown');
                }
            }
            bTooFewPlayers = TouchingHumans.Length < PlayerThresholds[PlayerCount];
            bTooManyZeds = TouchingZeds.Length > ZedThresholds[PlayerCount];
            if((ObjectiveLever != none) && ObjectiveLever.bAllowActivation)
            {
                if(((TriggerPulls < TriggerReminderSoundEvents.Length) && TriggerReminderSoundEvents[TriggerPulls] != none) && !IsTimerActive('Timer_TriggerReadyReminderCooldown'))
                {
                    if(TriggerReminderSoundEvents[TriggerPulls] != none)
                    {
                        PlaySoundBase(TriggerReminderSoundEvents[TriggerPulls],, WorldInfo.NetMode == NM_DedicatedServer);
                    }
                    SetTimer(ReadyTriggerReminderTime, false, 'Timer_TriggerReadyReminderCooldown');
                }
            }
        }
    }
}

simulated function Timer_TooFewPlayersReminderCooldown();

simulated function Timer_TooManyZedsReminderCooldown();

simulated function Timer_TriggerReadyReminderCooldown();

simulated function OnTriggerActivated()
{
    local KFGameReplicationInfo KFGRI;

    if(!bActive || !bInteractable)
    {
        return;
    }
    ++ TriggerPulls;
    TriggerObjectiveProgressEvent(0, float(TriggerPulls) / float(TriggerPullsRequired));
    if(Role == ROLE_Authority)
    {
        CurrentRewardAmount = float(GetMaxDoshReward()) * (GetProgress());
        if(TriggerPulls <= TriggerPulledSoundEvents.Length)
        {
            PlaySoundBase(TriggerPulledSoundEvents[TriggerPulls - 1],, WorldInfo.NetMode == NM_DedicatedServer);
        }
    }
    if((GetProgress()) >= 1)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            KFGRI.DeactivateObjective();
        }
    }
}

simulated function OnTriggerReactivated()
{
    CheckTriggerActivation();
    ++ nNumLeversActivated;
    TriggerObjectiveProgressEvent(1);
}

simulated function CheckTriggerActivation()
{
    bDangerState = false;
    if(ObjectiveLever != none)
    {
        bDangerState = !ObjectiveLever.bFathersBlessing;
        UpdateMeshArrayState();
        ObjectiveLever.BroadcastInteractionMessages();
    }
}

simulated function float GetProgress()
{
    if(TriggerPullsRequired == 0)
    {
        return 0;
    }
    return float(TriggerPulls) / float(TriggerPullsRequired);
}

simulated function bool IsComplete()
{
    return (GetProgress()) >= 1;
}

simulated function string GetLocalizedRequirements()
{
    return (Localize("Objectives", default.RequirementsLocKey, "KFGame")) @ string(TriggerPullsRequired);
}

simulated function string GetProgressText()
{
    if(!bActive)
    {
        return "";
    }
    return (string(TriggerPulls) $ "/") $ string(TriggerPullsRequired);
}

simulated function GetLocalizedStatus(out string StatusMessage, out int bWarning, out int bNotification)
{
    StatusMessage = "";
    super.GetLocalizedStatus(StatusMessage, bWarning, bNotification);
    if(StatusMessage == "")
    {
        if(ObjectiveLever.ReadyToActivate() || bLeverReady)
        {
            StatusMessage = Localize("Objectives", "Ready", LocalizationPackageName);
            bNotification = 1;
            bWarning = 0;
            return;            
        }
        else
        {
            StatusMessage = Localize("Objectives", "NotReady", LocalizationPackageName);
            bNotification = 0;
            bWarning = 1;
            return;
        }
    }
}

simulated function Color GetIconColor()
{
    if(bTooManyZeds || bTooFewPlayers && !bNoPlayers)
    {
        return NotReadyIconColor;
    }
    if(((Role == ROLE_Authority) && TouchingHumans.Length <= 0) || bNoPlayers)
    {
        return ObjectiveIconColor;
    }
    if(ObjectiveLever.ReadyToActivate() || bLeverReady)
    {
        return ReadyIconColor;
    }
    return ObjectiveIconColor;
}

defaultproperties
{
    TriggerPullsRequired=6
    ActivationDelay=5
    RemindPlayersTime=30
    ReadyIconColor=(B=0,G=255,R=0,A=255)
    NotReadyIconColor=(B=0,G=0,R=255,A=255)
    PlayerThresholds[0]=1
    PlayerThresholds[1]=1
    PlayerThresholds[2]=2
    PlayerThresholds[3]=2
    PlayerThresholds[4]=3
    PlayerThresholds[5]=3
    ZedThresholds[0]=6
    ZedThresholds[1]=5
    ZedThresholds[2]=4
    ZedThresholds[3]=3
    ZedThresholds[4]=2
    ZedThresholds[5]=1
    LocalizationKey="ActivateTrigger"
    NameShortLocKey="ActivateTrigger"
    DescriptionLocKey="DescriptionActivateTrigger"
    DescriptionShortLocKey="DescriptionActivateTriggerShort"
    RequirementsLocKey="RequiredActivateTrigger"
    GameModeBlacklist=/* Array type was not detected. */
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_ActivateTrigger.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_ActivateTrigger.BrushComponent0'
    Components(0)=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_ActivateTrigger.BrushComponent0'
    CollisionComponent=BrushComponent0
    SupportedEvents=/* Array type was not detected. */
}