/*******************************************************************************
 * KFMapObjective_ActivateTrigger generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_ActivateTrigger extends KFMapObjective_AreaDefense
    hidecategories(Navigation,Object,Movement,Display);

var int TriggerPulls;
/** How many times a trigger has to be pulled until the objective is complete, per number of players */
var() const int TriggerPullsRequiredForPlayerCount[6];
var int TriggerPullsRequired;
/** Reference to the trigger that we may need to override. */
var() KFTrigger_ObjectiveLever ObjectiveLever;
/** A delay from the the start of an objective, so the player can't automatically pull the lever. */
var() float ActivationDelay;
/** A sound to play when this objective is activated */
var() AkEvent ActivationSoundEvent;
/** A sound to play when the trigger is ready to be triggered (e.g. after activation delay or trigger reset delay) */
var() array<AkEvent> TriggerReadySoundEvents;
/** A sound to play when the objective is fully complete */
var() AkEvent SuccessSoundEvent100pct;
/** A sound to play when the objective is mostly complete */
var() AkEvent SuccessSoundEvent85pct;
/** A sound to play when the objective is adequately complete */
var() AkEvent SuccessSoundEvent50pct;
/** A sound to play when the objective is barely complete */
var() AkEvent SuccessSoundEvent25pct;
/** A sound to play when the objective is failed */
var() AkEvent FailureSoundEvent;
/** Sound event to play when players are engaged with too many zeds in the zone */
var() AkEvent TooManyZedsSoundEvent;
/** Sound event to play when too few players are in the zone */
var() AkEvent TooFewPlayersSoundEvent;
/** How often to remind players about the objective if they aren't engaged in completing it */
var() float RemindPlayersTime;
var transient bool bRemindPlayers;
var transient bool bObjectiveLeverActiveBefore;

replication
{
     if(bNetDirty)
        TriggerPulls, TriggerPullsRequired;
}

simulated event ReplicatedEvent(name VarName)
{
    local KFPlayerController KFPC;

    if(VarName == 'bActive')
    {
        KFPC = KFPlayerController(GetALocalPlayerController());
        if((KFPC != none) && KFPC.myGfxHUD != none)
        {
            KFPC.myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetActive(bActive);
        }        
    }
    else
    {
        super.ReplicatedEvent(VarName);
    }
}

simulated function ActivateObjective()
{
    local int PlayerCount;

    if(ObjectiveLever != none)
    {
        ObjectiveLever.OwningObjective = self;
    }
    super.ActivateObjective();
    if(Role == ROLE_Authority)
    {
        TriggerPulls = 0;
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        TriggerPullsRequired = TriggerPullsRequiredForPlayerCount[PlayerCount];
        LogInternal((((string(self) @ "-") @ string(GetFuncName())) @ "- ActivationDelay:") @ string(ActivationDelay));
        if(ObjectiveLever != none)
        {
            ObjectiveLever.bFathersBlessing = false;
        }
        bActive = false;
        if(ActivationDelay > 0)
        {
            SetTimer(ActivationDelay, false, 'ActivateTrigger');            
        }
        else
        {
            ActivateTrigger();
        }
        CurrentRewardAmount = 0;
        bObjectiveLeverActiveBefore = false;
        bRemindPlayers = true;
        PlaySoundBase(ActivationSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        CheckTriggerActivation();
    }
}

simulated function SetTrailActorType()
{
    if(TrailActor != none)
    {
        TrailActor.SetObjeciveType(3);
    }
}

simulated function DeactivateObjective()
{
    local KFPlayerController KFPC;
    local KFPawn_Human KFPH;

    super.DeactivateObjective();
    if(Role == ROLE_Authority)
    {
        ClearTimer('Timer_CheckObjective');
        if(ObjectiveLever != none)
        {
            ObjectiveLever.bFathersBlessing = true;
        }
        if(CurrentRewardAmount > float(0))
        {
            foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
            {
                GrantReward(KFPH);                
            }            
        }
        PlayDeactivationDialog();
    }
    KFPC = KFPlayerController(GetALocalPlayerController());
    if((KFPC != none) && KFPC.myGfxHUD != none)
    {
        KFPC.myGfxHUD.WaveInfoWidget.ObjectiveContainer.SetFailState(CurrentRewardAmount <= float(0));
    }
}

function PlayDeactivationDialog()
{
    if(CurrentRewardAmount <= float(0))
    {
        PlaySoundBase(FailureSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 6);        
    }
    else
    {
        if((GetProgress()) <= JustWinThreshold)
        {
            PlaySoundBase(SuccessSoundEvent25pct, false, WorldInfo.NetMode == NM_DedicatedServer);            
        }
        else
        {
            if((GetProgress()) <= StandardWinThreshold)
            {
                PlaySoundBase(SuccessSoundEvent50pct, false, WorldInfo.NetMode == NM_DedicatedServer);                
            }
            else
            {
                if((GetProgress()) <= GoodWinThreshold)
                {
                    PlaySoundBase(SuccessSoundEvent85pct, false, WorldInfo.NetMode == NM_DedicatedServer);                    
                }
                else
                {
                    PlaySoundBase(SuccessSoundEvent100pct, false, WorldInfo.NetMode == NM_DedicatedServer);
                }
            }
        }
    }
}

simulated function ActivateTrigger()
{
    local KFPlayerController KFPC;

    LogInternal((string(self) @ "-") @ string(GetFuncName()));
    bActive = true;
    if(ObjectiveLever != none)
    {
        ObjectiveLever.bFathersBlessing = true;
    }
    SetTimer(0.25, true, 'Timer_CheckObjective');
    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        if((KFPC != none) && KFPC.myGfxHUD != none)
        {
            KFPC.SetObjectiveUIActive(bActive);
        }        
    }    
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    local int PlayerCount;

    super.Touch(Other, OtherComp, HitLocation, HitNormal);
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if(TouchingZeds.Length >= ZedThresholds[PlayerCount])
    {
        if((ObjectiveLever != none) && bActive)
        {
            ObjectiveLever.bFathersBlessing = false;
            CheckTriggerActivation();
        }
    }
}

event UnTouch(Actor Other)
{
    local int PlayerCount;

    super.UnTouch(Other);
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if(TouchingZeds.Length < ZedThresholds[PlayerCount])
    {
        if((ObjectiveLever != none) && bActive)
        {
            ObjectiveLever.bFathersBlessing = true;
            CheckTriggerActivation();
        }
    }
}

simulated function Timer_CheckObjective()
{
    local int I, PlayerCount;

    I = 0;
    J0x0B:

    if(I < TouchingZeds.Length)
    {
        if(!IsValidZed(TouchingZeds[I]))
        {
            TouchingZeds.Remove(I, 1;
        }
        ++ I;
        goto J0x0B;
    }
    PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
    if((bActive && TouchingZeds.Length < ZedThresholds[PlayerCount]) && ObjectiveLever != none)
    {
        ObjectiveLever.bFathersBlessing = true;
        CheckTriggerActivation();
    }
    if(Role == ROLE_Authority)
    {
        if(((ObjectiveLever != none) && ObjectiveLever.bAllowActivation) && !bObjectiveLeverActiveBefore)
        {
            if(TriggerReadySoundEvents.Length > TriggerPulls)
            {
                PlaySoundBase(TriggerReadySoundEvents[TriggerPulls], false, WorldInfo.NetMode == NM_DedicatedServer);
            }
        }
        bObjectiveLeverActiveBefore = ObjectiveLever.bAllowActivation;
        if(bActive)
        {
            PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
            if(TouchingHumans.Length < PlayerThresholds[PlayerCount])
            {
                if(bRemindPlayers)
                {
                    if(TooFewPlayersSoundEvent != none)
                    {
                        PlaySoundBase(TooFewPlayersSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                        SetTimer(RemindPlayersTime, false, 'Timer_AllowRemindPlayers');
                    }
                    bRemindPlayers = false;
                }                
            }
            else
            {
                if(TouchingZeds.Length > ZedThresholds[PlayerCount])
                {
                    if(bRemindPlayers)
                    {
                        if(TooManyZedsSoundEvent != none)
                        {
                            PlaySoundBase(TooManyZedsSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                            SetTimer(RemindPlayersTime, false, 'Timer_AllowRemindPlayers');
                        }
                        bRemindPlayers = false;
                    }
                }
            }
        }
    }
}

simulated function Timer_AllowRemindPlayers()
{
    bRemindPlayers = true;
}

simulated function OnTriggerActivated()
{
    local KFGameReplicationInfo KFGRI;

    if(!bActive)
    {
        return;
    }
    ++ TriggerPulls;
    if(Role == ROLE_Authority)
    {
        CurrentRewardAmount = float(GetMaxDoshReward()) * (GetProgress());
    }
    if((GetProgress()) >= 1)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            KFGRI.DeactivateObjective();
        }
    }
}

simulated function OnTriggerReactivated()
{
    CheckTriggerActivation();
}

simulated function CheckTriggerActivation()
{
    bDangerState = false;
    if(ObjectiveLever != none)
    {
        bDangerState = !ObjectiveLever.bFathersBlessing;
        UpdateMeshArrayState();
        ObjectiveLever.BroadcastInteractionMessages();
    }
}

simulated function float GetProgress()
{
    if(TriggerPullsRequired == 0)
    {
        return 0;
    }
    return float(TriggerPulls) / float(TriggerPullsRequired);
}

simulated function string GetLocalizedRequirements()
{
    return (Localize("Objectives", default.RequirementsLocKey, "KFGame")) @ string(TriggerPullsRequired);
}

simulated function bool HasFailedObjective()
{
    return false;
}

simulated function bool UsesMultipleActors()
{
    return true;
}

simulated function string GetActorCount()
{
    if(!bActive)
    {
        return "";
    }
    return (string(TriggerPulls) $ "/") $ string(TriggerPullsRequired);
}

defaultproperties
{
    TriggerPullsRequired=6
    ActivationDelay=5
    RemindPlayersTime=30
    LocalizationKey="ActivateTrigger"
    DescriptionLocKey="DescriptionActivateTrigger"
    RequirementsLocKey="RequiredActivateTrigger"
    PlayerThresholds[0]=1
    PlayerThresholds[1]=1
    PlayerThresholds[2]=2
    PlayerThresholds[3]=2
    PlayerThresholds[4]=3
    PlayerThresholds[5]=3
    ZedThresholds[0]=6
    ZedThresholds[1]=5
    ZedThresholds[2]=4
    ZedThresholds[3]=3
    ZedThresholds[4]=2
    ZedThresholds[5]=1
    MaxRewards[0]=(WaveMaxReward[1]=200,WaveMaxReward[2]=350,WaveMaxReward[3]=500)
    MaxRewards[1]=(WaveMaxReward[1]=200,WaveMaxReward[2]=250,WaveMaxReward[3]=300,WaveMaxReward[4]=350,WaveMaxReward[5]=400,WaveMaxReward[6]=500)
    MaxRewards[2]=(WaveMaxReward[1]=200,WaveMaxReward[2]=250,WaveMaxReward[3]=300,WaveMaxReward[4]=350,WaveMaxReward[5]=400,WaveMaxReward[6]=450,WaveMaxReward[7]=500,WaveMaxReward[8]=500,WaveMaxReward[9]=500,WaveMaxReward[10]=500)
    XPRewards[0]=(WaveMaxReward[1]=150,WaveMaxReward[2]=200,WaveMaxReward[3]=300)
    XPRewards[1]=(WaveMaxReward[1]=150,WaveMaxReward[2]=150,WaveMaxReward[3]=200,WaveMaxReward[4]=200,WaveMaxReward[5]=300,WaveMaxReward[6]=300)
    XPRewards[2]=(WaveMaxReward[1]=100,WaveMaxReward[2]=150,WaveMaxReward[3]=150,WaveMaxReward[4]=200,WaveMaxReward[5]=200,WaveMaxReward[6]=250,WaveMaxReward[7]=250,WaveMaxReward[8]=300,WaveMaxReward[9]=300,WaveMaxReward[10]=300)
    GameModeBlacklist(0)=class'KFGameInfo_Endless'
    GameModeBlacklist(1)=class'KFGameInfo_WeeklySurvival'
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_ActivateTrigger.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_ActivateTrigger.BrushComponent0'
    Components(0)=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_ActivateTrigger.BrushComponent0'
    CollisionComponent=BrushComponent0
}