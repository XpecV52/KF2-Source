/*******************************************************************************
 * KFSM_Patriarch_MissileAttack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Patriarch_MissileAttack extends KFSM_PlaySingleAnim;

var KFPawn_ZedPatriarch MyPatPawn;
var KFAIController_ZedPatriarch MyPatController;
var class<KFProj_Missile_Patriarch> MissileClass;
var name LoadAnimNames[2];
var name LoadAnim;
var name WindDownAnimName;
var string BaseSocketName;
var Rotator MissileFireRotationRate;
var bool bAllowGunTracking;
var bool bMissileFlocking;
var float InitialMissileSpeed;
var float SeekDelay;
var float SeekForce;
var float GravForce;
var float DistToApplyGravitySQ;
var AkEvent FireSound;

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    MyPatPawn = KFPawn_ZedPatriarch(KFPOwner);
    MissileClass = GetProjectileClass();
    if(MyPatPawn.SpecialMoveFlags == 1)
    {
        LoadAnim = LoadAnimNames[1];        
    }
    else
    {
        LoadAnim = LoadAnimNames[0];
    }
    MyPatPawn.SetCloaked(false);
    MyPatPawn.ZeroMovementVariables();
    PlayLoadAnimation();
    MyPatController = KFAIController_ZedPatriarch(MyPatPawn.Controller);
    if(bAllowGunTracking && MyPatPawn.Role == ROLE_Authority)
    {
        MyPatPawn.SetTimer(KFSkeletalMeshComponent(MyPatPawn.Mesh).GetAnimInterruptTime(LoadAnim), false, 'StartGunTracking', self);
    }
}

function class<KFProj_Missile_Patriarch> GetProjectileClass()
{
    return MyPatPawn.GetMissileClass();
}

function PlayAnimation();

function PlayLoadAnimation()
{
    bUseRootMotion = false;
    AnimStance = 0;
    AnimName = LoadAnim;
    PlaySpecialMoveAnim(AnimName, AnimStance, BlendInTime, 0, 1);
}

function StartGunTracking()
{
    if(MyPatPawn != none)
    {
        MyPatPawn.SetGunTracking(true);
    }
}

function PlayFireAnimation()
{
    if(MyPatPawn == none)
    {
        return;
    }
    bUseRootMotion = false;
    DisableRootMotion();
    MyPatPawn.RotationRate = MissileFireRotationRate;
    AnimStance = 1;
    AnimName = default.AnimName;
    PlaySpecialMoveAnim(AnimName, AnimStance, 0, BlendOutTime, 1);
    if(MyPatPawn.Role == ROLE_Authority)
    {
        FireMissiles();
    }
    MyPatPawn.PostAkEventOnBone(FireSound, 'BarrelSpinner', true, true);
}

function GetAimDirAndTargetLoc(int MissileNum, Vector MissileLoc, Rotator MissileRot, out Vector AimDir, out Vector TargetLoc)
{
    MyPatPawn.GetMissileAimDirAndTargetLoc(MissileNum, MissileLoc, MissileRot, AimDir, TargetLoc);
}

function Tick(float DeltaTime)
{
    super(KFSpecialMove).Tick(DeltaTime);
    if((((MyPatPawn != none) && MyPatPawn.Role == ROLE_Authority) && !MyPatPawn.bPlayedDeath) && MyPatPawn.Physics == 1)
    {
        MyPatPawn.ZeroMovementVariables();
    }
}

function FireMissiles()
{
    local KFProj_Missile_Patriarch Missile;
    local array<KFProj_Missile_Patriarch> FiredMissiles;
    local Vector SpawnLoc, TargetLoc, AimDir;
    local Rotator SpawnRot;
    local int I, J, K;
    local bool bCurl;
    local float CurlForceMultiplier;

    CurlForceMultiplier = 1 + (FRand() * 0.1);
    I = 0;
    J0x25:

    if(I < 3)
    {
        MyPatPawn.Mesh.GetSocketWorldLocationAndRotation(name(BaseSocketName $ string(I + 1)), SpawnLoc, SpawnRot);
        Missile = MyPatPawn.Spawn(MissileClass, MyPatPawn,, SpawnLoc, SpawnRot,, true);
        GetAimDirAndTargetLoc(I, SpawnLoc, SpawnRot, AimDir, TargetLoc);
        if(!bMissileFlocking)
        {
            Missile.bCurl = 3;
            Missile.StartCurlTimer();
        }
        Missile.InitEx(AimDir, CurlForceMultiplier, TargetLoc, InitialMissileSpeed, SeekDelay, SeekForce, GravForce, DistToApplyGravitySQ);
        FiredMissiles[FiredMissiles.Length] = Missile;
        ++ I;
        goto J0x25;
    }
    if(bMissileFlocking)
    {
        bCurl = false;
        I = 0;
        J0x224:

        if(I < 3)
        {
            if(FiredMissiles[I] != none)
            {
                J = 0;
                K = 0;
                J0x263:

                if(K < 3)
                {
                    if((I != K) && FiredMissiles[K] != none)
                    {
                        FiredMissiles[I].Flock[J] = FiredMissiles[K];
                        ++ J;
                    }
                    ++ K;
                    goto J0x263;
                }
                FiredMissiles[I].bCurl = byte(1 + byte(bCurl));
                FiredMissiles[I].StartCurlTimer();
                bCurl = !bCurl;
            }
            ++ I;
            goto J0x224;
        }
    }
}

function PlayWindDownAnimation()
{
    MyPatPawn.StopBodyAnim(AnimStance, 0.33);
    bUseRootMotion = true;
    EnableRootMotion();
    AnimStance = 0;
    AnimName = WindDownAnimName;
    PlaySpecialMoveAnim(AnimName, AnimStance, 0.33, BlendOutTime, 1);
}

function AnimEndNotify(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
    local name SeqNodeName;

    SeqNodeName = ((bShouldDeferToPostTick) ? DeferredSeqName : SeqNode.AnimSeqName);
    switch(SeqNodeName)
    {
        case LoadAnim:
            PlayFireAnimation();
            break;
        case default.AnimName:
            MyPatPawn.EndSpecialMove();
            break;
        case WindDownAnimName:
            MyPatPawn.EndSpecialMove();
            break;
        default:
            break;
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    if(MyPatPawn != none)
    {
        MyPatPawn.StartWeaponCooldown();
        if(bAllowGunTracking)
        {
            MyPatPawn.ClearTimer('StartGunTracking');
            MyPatPawn.SetGunTracking(false);
        }
        MyPatPawn.RotationRate = MyPatPawn.default.RotationRate;
    }
    if((KFPOwner.BodyStanceNodes[AnimStance].bIsPlayingCustomAnim && KFPOwner.BodyStanceNodes[AnimStance].GetCustomAnimNodeSeq() != none) && KFPOwner.BodyStanceNodes[AnimStance].GetCustomAnimNodeSeq().AnimSeqName == AnimName)
    {
        MyPatPawn.StopBodyAnim(AnimStance, 0.1);
    }
    MyPatPawn = none;
    MyPatController = none;
    super.SpecialMoveEnded(PrevMove, NextMove);
}

defaultproperties
{
    LoadAnimNames[0]=Rocket_TO_Load
    LoadAnimNames[1]=Rocket_TO_LoadQ
    WindDownAnimName=Rocket_TO_Idle
    BaseSocketName="Missile"
    MissileFireRotationRate=(Pitch=15000,Yaw=15000,Roll=15000)
    bAllowGunTracking=true
    bMissileFlocking=true
    InitialMissileSpeed=2000
    SeekForce=15
    FireSound=AkEvent'WW_ZED_Patriarch.Play_Mini_Rocket_Fire'
    AnimName=Rocket_Shoot
    BlendInTime=0.15
    BlendOutTime=0.25
    AbortBlendOutTime=0.1
    bDisableMovement=true
    bDisableSteering=false
    bShouldDeferToPostTick=true
    Handle=KFSM_Patriarch_MissileAttack
}