/*******************************************************************************
 * KFWeap_Edged_IonThruster generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Edged_IonThruster extends KFWeap_MeleeBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var repnotify float UltimateCharge;
var float MaxUltimateCharge;
var float DecayInterval;
var float DecayAmount;
var array<float> UltimateChargePerHit;
var float UltimateChargePerBlock;
var float UltimateChargePerParry;
var name UltimateAttackAnim;
var array<MeleeHitboxInfo> DefaultHitboxChain;
var array<MeleeHitboxInfo> UltimateHitboxChain;
var int DefaultMaxHitRange;
var int UltimateMaxHitRange;
var float UltimateRangeScale;
var float UltimateWidthScale;
var Vector DefaultHitboxExtent;
var Vector UltimateHitboxExtent;
var export editinline transient KFParticleSystemComponent PersistentBasePSC;
var const ParticleSystem PersistentBaseEffect;
var int PanelCount;
var export editinline KFParticleSystemComponent PersistentPanelPSC[12];
var const ParticleSystem PersistentPanelEffect;
var export editinline transient KFParticleSystemComponent ChargedPSC;
var const ParticleSystem ChargedEffect;
var AkEvent IdleSoundLoop;
var AkEvent IdleSoundStop;
var AkEvent ChargedSoundLoop;
var AkEvent ChargedSoundStop;
var export editinline PointLightComponent BladeLight;
var name LightAttachBone;

replication
{
     if(bNetDirty)
        UltimateCharge;
}

simulated event ReplicatedEvent(name VarName)
{
    switch(VarName)
    {
        case 'UltimateCharge':
            AdjustChargeFX();
            break;
        default:
            super(KFWeapon).ReplicatedEvent(VarName);
            break;
    }
}

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    SetupHitboxes();
}

simulated function SetupHitboxes()
{
    SetupChain(DefaultHitboxChain, DefaultMaxHitRange, DefaultHitboxExtent);
    UltimateMaxHitRange = int(UltimateRangeScale * float(DefaultMaxHitRange));
    UltimateHitboxExtent.X = UltimateWidthScale;
    UltimateHitboxExtent.Y = UltimateWidthScale;
    UltimateHitboxExtent.Z = UltimateWidthScale;
    SetupChain(UltimateHitboxChain, UltimateMaxHitRange, UltimateHitboxExtent);
    MeleeAttackHelper.HitboxExtent = DefaultHitboxExtent;
    MeleeAttackHelper.SetHitboxChain(DefaultHitboxChain);
    MeleeAttackHelper.SetMeleeRange(float(DefaultMaxHitRange));
}

simulated function SetupChain(out array<MeleeHitboxInfo> OutputChain, int InputHitRange, Vector HitboxExtent)
{
    local Vector BoneAxis;
    local float Dist;
    local MeleeHitboxInfo TempHitBoxInfo;

    BoneAxis = vect(0, 0, 1);
    Dist = float(InputHitRange);
    J0x2C:

    if(Dist > float(0))
    {
        TempHitBoxInfo.BoneOffset = (Dist - HitboxExtent.X) * BoneAxis;
        OutputChain.AddItem(TempHitBoxInfo;
        Dist -= MeleeAttackHelper.HitboxSpacing;
        goto J0x2C;
    }
}

simulated function Timer_UltimateChargeDecay()
{
    if(UltimateCharge != MaxUltimateCharge)
    {
        AdjustUltimateCharge(DecayAmount * float(-1));
    }
}

simulated function string GetSpecialAmmoForHUD()
{
    return string(int(UltimateCharge)) $ "%";
}

simulated function NotifyMeleeCollision(Actor HitActor, optional Vector HitLocation)
{
    local KFPawn_Monster Victim;

    if(HitActor.bWorldGeometry)
    {
        return;
    }
    Victim = KFPawn_Monster(HitActor);
    if((Victim == none) || Victim.bPlayedDeath && (WorldInfo.TimeSeconds - Victim.TimeOfDeath) > 0)
    {
        return;
    }
    if(Victim != none)
    {
        AdjustUltimateCharge(UltimateChargePerHit[CurrentFireMode]);
    }
}

simulated function NotifyAttackParried()
{
    AdjustUltimateCharge(UltimateChargePerParry);
}

simulated function NotifyAttackBlocked()
{
    AdjustUltimateCharge(UltimateChargePerBlock);
}

simulated function bool IsFullyCharged()
{
    return UltimateCharge >= MaxUltimateCharge;
}

simulated function AdjustUltimateCharge(float AdjustAmount)
{
    if(!IsFullyCharged())
    {
        UltimateCharge = FClamp(UltimateCharge + AdjustAmount, 0, MaxUltimateCharge);
        AdjustChargeFX();
    }
}

simulated function AdjustChargeFX()
{
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        KFPawn(Instigator).SetWeaponComponentRTPCValue("Weapon_Charge", UltimateCharge / MaxUltimateCharge);
        Instigator.SetRTPCValue('Weapon_Charge', UltimateCharge / MaxUltimateCharge);
        if(IsFullyCharged())
        {
            ActivatePSC(ChargedPSC, ChargedEffect, 'Hand_FX_Start_R');
            AdjustLoopingWeaponSound(true);
        }
    }
}

simulated function AdjustLoopingWeaponSound(bool bShouldPlay)
{
    local KFPawn InstigatorPawn;

    if(Instigator != none)
    {
        InstigatorPawn = KFPawn(Instigator);
        if(InstigatorPawn != none)
        {
            if(bShouldPlay)
            {
                if(IsFullyCharged())
                {
                    InstigatorPawn.PlayWeaponSoundEvent(IdleSoundStop);
                    InstigatorPawn.PlayWeaponSoundEvent(ChargedSoundLoop);                    
                }
                else
                {
                    InstigatorPawn.PlayWeaponSoundEvent(ChargedSoundStop);
                    InstigatorPawn.PlayWeaponSoundEvent(IdleSoundLoop);
                }                
            }
            else
            {
                InstigatorPawn.PlayWeaponSoundEvent(IdleSoundStop);
                InstigatorPawn.PlayWeaponSoundEvent(ChargedSoundStop);
            }
        }
    }
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 2) && IsFullyCharged())
    {
        FireModeNum = 6;
    }
    super.StartFire(FireModeNum);
}

simulated function ActivatePSC(out KFParticleSystemComponent OutPSC, ParticleSystem ParticleEffect, name SocketName)
{
    if(MySkelMesh != none)
    {
        MySkelMesh.AttachComponentToSocket(OutPSC, SocketName);
        OutPSC.SetFOV(MySkelMesh.FOV);        
    }
    else
    {
        AttachComponent(OutPSC);
    }
    OutPSC.ActivateSystem();
    if(OutPSC != none)
    {
        OutPSC.SetTemplate(ParticleEffect);
        OutPSC.SetDepthPriorityGroup(2);
    }
}

simulated function DetachWeapon()
{
    AdjustLoopingWeaponSound(false);
    super(KFWeapon).DetachWeapon();
}

simulated event bool HasAmmo(byte FireModeNum, optional int Amount)
{
    if(FireModeNum == 6)
    {
        return IsFullyCharged();
    }
    return super(KFWeapon).HasAmmo(FireModeNum, Amount);
}

simulated state UltimateAttackState extends MeleeHeavyAttacking
{
    simulated function bool TryPutDown()
    {
        return false;
    }

    simulated event BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        StartFireDisabled = true;
        MeleeAttackHelper.HitboxExtent = UltimateHitboxExtent;
        MeleeAttackHelper.SetHitboxChain(UltimateHitboxChain);
        MeleeAttackHelper.SetMeleeRange(float(UltimateMaxHitRange));
        MeleeAttackHelper.bUseDirectionalMelee = false;
        MeleeAttackHelper.bHasChainAttacks = false;
    }

    simulated function name GetMeleeAnimName(KFGame.KFPawn.EPawnOctant AtkDir, KFGame.KFMeleeHelperWeapon.EMeleeAttackType AtkType)
    {
        return UltimateAttackAnim;
    }

    simulated event EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        UltimateCharge = 0;
        AdjustLoopingWeaponSound(true);
        KFPawn(Instigator).SetWeaponComponentRTPCValue("Weapon_Charge", 0);
        Instigator.SetRTPCValue('Weapon_Charge', 0);
        if(ChargedPSC != none)
        {
            ChargedPSC.DeactivateSystem();
        }
        StartFireDisabled = false;
        MeleeAttackHelper.HitboxExtent = DefaultHitboxExtent;
        MeleeAttackHelper.SetHitboxChain(DefaultHitboxChain);
        MeleeAttackHelper.SetMeleeRange(float(DefaultMaxHitRange));
        MeleeAttackHelper.bUseDirectionalMelee = true;
        MeleeAttackHelper.bHasChainAttacks = true;
    }
    stop;    
}

simulated state WeaponEquipping
{
    simulated event BeginState(name PreviousStateName)
    {
        local int I;
        local name PSCSocketName;

        super.BeginState(PreviousStateName);
        ActivatePSC(PersistentBasePSC, PersistentBaseEffect, 'Hand_FX_Start_R');
        I = 0;
        J0x43:

        if(I < PanelCount)
        {
            PSCSocketName = 'RW_HeatShield';
            if((I + 1) < 10)
            {
                PSCSocketName = name(string(PSCSocketName) $ string('0'));
            }
            PSCSocketName = name(string(PSCSocketName) $ string(I + 1));
            ActivatePSC(PersistentPanelPSC[I], PersistentPanelEffect, PSCSocketName);
            ++ I;
            goto J0x43;
        }
        AdjustLoopingWeaponSound(true);
        if(MySkelMesh != none)
        {
            MySkelMesh.AttachComponentToSocket(BladeLight, LightAttachBone);
            BladeLight.SetEnabled(true);
        }
    }
    stop;    
}

simulated state Inactive
{
    simulated event BeginState(name PreviousStateName)
    {
        local int I;

        super.BeginState(PreviousStateName);
        if(PersistentBasePSC != none)
        {
            PersistentBasePSC.DeactivateSystem();
        }
        I = 0;
        J0x4C:

        if(I < PanelCount)
        {
            PersistentPanelPSC[I].DeactivateSystem();
            ++ I;
            goto J0x4C;
        }
        AdjustLoopingWeaponSound(false);
        BladeLight.SetEnabled(false);
    }
    stop;    
}

simulated state WeaponPuttingDown
{
    simulated event BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        AdjustLoopingWeaponSound(false);
    }
    stop;    
}

simulated state WeaponAbortEquip
{
    simulated event BeginState(name PreviousStateName)
    {
        super(WeaponPuttingDown).BeginState(PreviousStateName);
        AdjustLoopingWeaponSound(false);
    }
    stop;    
}

defaultproperties
{
    MaxUltimateCharge=100
    DecayInterval=1
    DecayAmount=1
    UltimateChargePerHit(0)=1
    UltimateChargePerHit(1)=0
    UltimateChargePerHit(2)=0
    UltimateChargePerHit(3)=1
    UltimateChargePerHit(4)=0
    UltimateChargePerHit(5)=3
    UltimateChargePerHit(6)=0
    UltimateChargePerBlock=1
    UltimateChargePerParry=5
    UltimateAttackAnim=Super_Attack
    DefaultMaxHitRange=240
    UltimateRangeScale=2
    UltimateWidthScale=70
    begin object name=BasePSC class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.BasePSC'
    PersistentBasePSC=BasePSC
    PersistentBaseEffect=ParticleSystem'WEP_Ion_Sword_EMIT.FX_ION_Idle_Heat_Base_01'
    PanelCount=12
    begin object name=[0]PanelPSC0 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC0'
    PersistentPanelPSC=PanelPSC0
    begin object name=PanelPSC1 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC1'
    PersistentPanelPSC=PanelPSC1
    begin object name=PanelPSC2 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC2'
    PersistentPanelPSC=PanelPSC2
    begin object name=PanelPSC3 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC3'
    PersistentPanelPSC=PanelPSC3
    begin object name=PanelPSC4 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC4'
    PersistentPanelPSC=PanelPSC4
    begin object name=PanelPSC5 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC5'
    PersistentPanelPSC=PanelPSC5
    begin object name=PanelPSC6 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC6'
    PersistentPanelPSC=PanelPSC6
    begin object name=PanelPSC7 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC7'
    PersistentPanelPSC=PanelPSC7
    begin object name=PanelPSC8 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC8'
    PersistentPanelPSC=PanelPSC8
    begin object name=PanelPSC9 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC9'
    PersistentPanelPSC=PanelPSC9
    begin object name=PanelPSC10 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC10'
    PersistentPanelPSC=PanelPSC10
    begin object name=PanelPSC11 class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.PanelPSC11'
    PersistentPanelPSC=PanelPSC11
    PersistentPanelEffect=ParticleSystem'WEP_Ion_Sword_EMIT.FX_ION_Idle_Heat_Panel_01'
    begin object name=ChargedParticleSystem class=KFParticleSystemComponent
        ReplacementPrimitive=none
        TickGroup=ETickingGroup.TG_PostUpdateWork
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeap_Edged_IonThruster.ChargedParticleSystem'
    ChargedPSC=ChargedParticleSystem
    ChargedEffect=ParticleSystem'WEP_Ion_Sword_EMIT.FX_ION_Charged_Ring_01'
    IdleSoundLoop=AkEvent'WW_WEP_MEL_IonThruster.Play_WEP_IonThruster_Handling_Idle_LP'
    IdleSoundStop=AkEvent'WW_WEP_MEL_IonThruster.Stop_WEP_IonThruster_Handling_Idle_LP'
    ChargedSoundLoop=AkEvent'WW_WEP_MEL_IonThruster.Play_WEP_IonThruster_Handling_Idle_Super_LP'
    ChargedSoundStop=AkEvent'WW_WEP_MEL_IonThruster.Stop_WEP_IonThruster_Handling_Idle_Super_LP'
    begin object name=BladePointLight class=PointLightComponent
        Radius=128
        FalloffExponent=4
        Brightness=0.125
        LightColor=(B=85,G=150,R=250,A=255)
        CastShadows=false
        CastStaticShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFWeap_Edged_IonThruster.BladePointLight'
    BladeLight=BladePointLight
    LightAttachBone=Hand_FX_Start_R
    ParryStrength=5
    ParryDamageMitigationPercent=0.4
    BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Katana'
    ParrySound=AkEvent'WW_WEP_Bullet_Impacts.Play_Parry_Metal'
    PackageKey="Ion_Sword"
    FirstPersonMeshName="WEP_1P_Ion_Sword_MESH.Wep_1stP_Ion_Sword_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_Ion_Sword_MESH.Wep_3rdP_Ion_Sword_Pickup"
    AttachmentArchetypeName="WEP_Ion_Sword_ARCH.Wep_Ion_Thruster_3P"
    InventorySize=8
    GroupPriority=125
    WeaponSelectTexture=Texture2D'WEP_UI_Ion_Sword_TEX.UI_WeaponSelect_IonSword'
    PlayerViewOffset=(X=2,Y=0,Z=0)
    begin object name=MeleeHelper class=KFMeleeHelperWeapon
        MeleeImpactCamShakeScale=0.03
        WorldImpactEffects=KFImpactEffectInfo'FX_Impacts_ARCH.Bladed_melee_impact'
    object end
    // Reference: KFMeleeHelperWeapon'Default__KFWeap_Edged_IonThruster.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    AssociatedPerkClasses=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitMomentum=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Edged_IonThruster.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Ion Thruster"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Edged_IonThruster.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Edged_IonThruster.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}