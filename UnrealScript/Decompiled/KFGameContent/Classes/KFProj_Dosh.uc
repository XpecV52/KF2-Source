/*******************************************************************************
 * KFProj_Dosh generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Dosh extends KFProj_RicochetBullet
    hidecategories(Navigation);

var export editinline PrimitiveComponent DroppedPickupMesh;
/** Dampen amount for every bounce */
var() float DampenFactor;
/** Dampen amount for parallel angle to velocity */
var() float DampenFactorParallel;
var transient Vector PreviousLocations[20];
var transient Rotator PreviousRotations[20];
var transient Vector Ceiling;

simulated event PostBeginPlay()
{
    super(KFProjectile).PostBeginPlay();
}

event Tick(float DeltaTime)
{
    local int I;

    I = 20 - 1;
    J0x0F:

    if(I > 0)
    {
        PreviousLocations[I] = PreviousLocations[I - 1];
        PreviousRotations[I] = PreviousRotations[I - 1];
        -- I;
        goto J0x0F;
    }
    if(20 > 0)
    {
        PreviousLocations[0] = Location;
        PreviousRotations[0] = Rotation;
    }
}

simulated event HitWall(Vector HitNormal, Actor Wall, PrimitiveComponent WallComp)
{
    local TraceHitInfo HitInfo;

    if(Pawn(Wall) == none)
    {
        if(((!Wall.bStatic && Wall.bCanBeDamaged) && (DamageRadius == float(0)) || bDamageDestructiblesOnTouch) && !CheckRepeatingTouch(Wall))
        {
            HitInfo.HitComponent = WallComp;
            HitInfo.Item = -1;
            Wall.TakeDamage(int(Damage), InstigatorController, Location, MomentumTransfer * Normal(Velocity), MyDamageType, HitInfo, self);
        }
    }
    Bounce(HitNormal, Wall);
}

simulated function bool Bounce(Vector HitNormal, Actor BouncedOff)
{
    Velocity = DampingFactor * (Velocity - ((2 * HitNormal) * (Velocity Dot HitNormal)));
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        KFImpactEffectManager(WorldInfo.MyImpactEffectManager).PlayImpactEffects(Location, Instigator, HitNormal, ImpactEffects);
    }
    LastBounced.Actor = BouncedOff;
    LastBounced.Time = WorldInfo.TimeSeconds;
    SpawnDosh(BouncedOff);
    Destroy();
    return true;
}

function SpawnDosh(Actor BouncedOff)
{
    local KFDroppedPickup_Cash P;
    local int I;
    local Vector pos;
    local Rotator Rot;

    if(WorldInfo.NetMode == NM_Client)
    {
        return;
    }
    if(Pawn(BouncedOff) == none)
    {
        pos = Location;
        Rot = Rotation;
        P = Spawn(Class'KFDroppedPickup_Cash',,, pos, Rot,, false);
        if(P == none)
        {
            I = 0;
            J0xB6:

            if(I < 20)
            {
                pos = PreviousLocations[I];
                Rot = PreviousRotations[I];
                P = Spawn(Class'KFDroppedPickup_Cash',,, pos, Rot,, false);
                if(P != none)
                {
                    goto J0x153;
                }
                ++ I;
                goto J0xB6;
            }
        }
        J0x153:

        if((P != none) && RelocateFromCeiling(pos))
        {
            P.Destroy();
            if(Ceiling.Z > float(-10000))
            {
                P = Spawn(Class'KFDroppedPickup_Cash',,, Ceiling, Rot,, false);
                Velocity = vect(0, 0, 0);
            }
        }        
    }
    else
    {
        P = Spawn(Class'KFDroppedPickup_Cash',,, Location, Rotation,, true);
    }
    if(P == none)
    {
        Destroy();        
    }
    else
    {
        P.SetPhysics(2);
        P.InventoryClass = Class'KFInventory_Money';
        P.Inventory = Instigator.CreateInventory(P.InventoryClass);
        P.Velocity = Velocity;
        P.Instigator = Instigator;
        P.SetPickupMesh(DroppedPickupMesh);
        P.SetPickupParticles(none);
        P.CashAmount = Class'KFWeap_AssaultRifle_Doshinegun'.default.DoshCost;
    }
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    local KFPawn KFP;
    local KFPawn_Human KFPH;
    local KFPlayerReplicationInfo KFPRI;
    local TraceHitInfo HitInfo;

    KFPH = KFPawn_Human(Other);
    if((KFPH != none) && KFPH != Instigator)
    {
        KFPRI = KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo);
        if(KFPRI != none)
        {
            KFPRI.AddDosh(Class'KFWeap_AssaultRifle_Doshinegun'.default.DoshCost);
            Destroy();
            return;
        }        
    }
    else
    {
        if((Other != Instigator) && Other.bCanBeDamaged)
        {
            KFP = KFPawn(Other);
            if(KFP != none)
            {
                if(CheckRepeatingTouch(Other))
                {
                    return;
                }
                ProcessBulletTouch(Other, HitLocation, HitNormal);
                Bounce(HitNormal, Other);
                return;                
            }
            else
            {
                HitInfo.HitComponent = LastTouchComponent;
                HitInfo.Item = -1;
                Other.TakeDamage(int(Damage), InstigatorController, HitLocation, MomentumTransfer * Normal(Velocity), MyDamageType, HitInfo, self);
                return;
            }
        }
    }
    super(KFProj_Bullet).ProcessTouch(Other, HitLocation, HitNormal);
}

simulated function SyncOriginalLocation()
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;
    local TraceHitInfo HitInfo;

    if(((Role < ROLE_Authority) && Instigator != none) && Instigator.IsLocallyControlled())
    {
        HitActor = Trace(HitLocation, HitNormal, OriginalLocation, Location,,, HitInfo, 1);
        if(HitActor != none)
        {
            Bounce(HitNormal, HitActor);
        }
    }
    super(KFProjectile).SyncOriginalLocation();
}

simulated function bool RelocateFromCeiling(Vector pos)
{
    local Actor HitActorVolume, HitActorWorld, HitActorVolumeBack;
    local Vector HitLocationVolume, HitLocationWorld, HitNormalUnused;

    HitActorWorld = Owner.Trace(HitLocationWorld, HitNormalUnused, pos - vect(0, 0, 10000), pos, false,,, 1);
    if(HitActorWorld != none)
    {
        HitActorVolume = KFWeapon(Owner).DoTraceNative(HitLocationVolume, pos, pos - vect(0, 0, 10000));
        if(((HitActorVolume == none) || (HitLocationWorld.Z + float(80)) > HitLocationVolume.Z) || IsZero(HitLocationVolume - pos))
        {
            return false;
        }
        HitLocationWorld += vect(0, 0, 1);
        HitActorVolumeBack = KFWeapon(Owner).DoTraceNative(HitLocationVolume, HitLocationWorld, HitLocationWorld + vect(0, 0, 10000));
        if((HitActorVolumeBack != none) && !IsZero(HitLocationVolume - HitLocationWorld))
        {
            Ceiling = HitLocationVolume - vect(0, 0, 10);
            return true;
        }
    }
    Ceiling = vect(0, 0, -10000);
    return true;
}

defaultproperties
{
    begin object name=PickupMesh0 class=SkeletalMeshComponent
        SkeletalMesh=SkeletalMesh'GP_Mesh.dosh_SM'
        PhysicsAsset=PhysicsAsset'GP_Mesh.dosh_SM_Physics'
        ReplacementPrimitive=none
        CastShadow=false
    object end
    // Reference: SkeletalMeshComponent'Default__KFProj_Dosh.PickupMesh0'
    DroppedPickupMesh=PickupMesh0
    DampenFactor=0.25
    DampenFactorParallel=0.4
    BouncesLeft=1
    DampingFactor=0.1
    bWarnAIWhenFired=true
    TossZ=100
    GravityScale=0.57
    ProjFlightTemplate=ParticleSystem'WEP_Doshinegun_EMIT.PS_Trail'
    ProjFlightTemplateZedTime=ParticleSystem'WEP_Doshinegun_EMIT.PS_Trail'
    AmbientComponent=AkComponent'Default__KFProj_Dosh.AmbientAkSoundComponent'
    ImpactEffects=KFImpactEffectInfo'WEP_Doshinegun_ARCH.Dosh_Impact'
    Speed=7500
    MaxSpeed=7500
    MomentumTransfer=50000
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Dosh.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Dosh.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFProj_Dosh.AmbientAkSoundComponent'
    Physics=EPhysics.PHYS_Falling
    bNetTemporary=false
    NetUpdateFrequency=200
    NetPriority=5
    LifeSpan=120
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Dosh.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}