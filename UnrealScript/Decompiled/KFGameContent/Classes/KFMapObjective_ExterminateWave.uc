/*******************************************************************************
 * KFMapObjective_ExterminateWave generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_ExterminateWave extends KFMapObjective_ActorBase
    hidecategories(Navigation);

/** ============================================================================= KFMapObjective_ExterminateWave variables============================================================================= */
var() bool bBossWave;
var() bool bShowBossSpawnTheatrics<EditCondition=bBossWave>;
var() bool bRandomBoss<EditCondition=bBossWave>;
var() KFGame.KFAISpawnManager.EBossAIType BossType<EditCondition=bBossWave>;
var repnotify float BossHealthPct;
var repnotify transient int WaveProgressIdx;
var repnotify transient int BossProgressIdx;

replication
{
     if(bNetInitial)
        bBossWave, bShowBossSpawnTheatrics;

     if(bNetDirty && !bBossWave)
        WaveProgressIdx;

     if(bNetDirty && bBossWave)
        BossHealthPct, BossProgressIdx;
}

simulated event ReplicatedEvent(name VarName)
{
    switch(VarName)
    {
        case 'WaveProgressIdx':
            TriggerWavePctProgress();
            break;
        case 'BossProgressIdx':
            TriggerBossHealthPctProgress();
            break;
        default:
            super(Actor).ReplicatedEvent(VarName);
            break;
    }
}

function NotifyZedKilled(bool bIsBoss)
{
    local float OldWavePct, NewWavePct;
    local KFGameReplicationInfo KFGRI;
    local int PrevWaveProgressIdx, GenEvtIdx, I;
    local KFSeqEvent_ExterminateWavePct GenEvt;

    PrevWaveProgressIdx = WaveProgressIdx;
    if(bIsBoss)
    {
        BossHealthPct = 0;
    }
    GenEvtIdx = 0;
    J0x3A:

    if(GenEvtIdx < GeneratedEvents.Length)
    {
        GenEvt = KFSeqEvent_ExterminateWavePct(GeneratedEvents[GenEvtIdx]);
        if(GenEvt != none)
        {
            KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
            OldWavePct = float(KFGRI.WaveTotalAICount - (KFGRI.AIRemaining + 1)) / float(KFGRI.WaveTotalAICount);
            NewWavePct = float(KFGRI.WaveTotalAICount - KFGRI.AIRemaining) / float(KFGRI.WaveTotalAICount);
            I = 0;
            J0x19E:

            if(I < GenEvt.ProgressThresholds.Length)
            {
                if((OldWavePct < GenEvt.ProgressThresholds[I]) && NewWavePct >= GenEvt.ProgressThresholds[I])
                {
                    WaveProgressIdx = GenEvt.ProgressOutputStartIndex + I;
                    goto J0x27D;
                }
                ++ I;
                goto J0x19E;
            }
            J0x27D:

            goto J0x28E;
        }
        ++ GenEvtIdx;
        goto J0x3A;
    }
    J0x28E:

    if(WaveProgressIdx != PrevWaveProgressIdx)
    {
        TriggerWavePctProgress();
    }
}

simulated function TriggerWavePctProgress()
{
    local int GenEvtIdx;
    local KFSeqEvent_ExterminateWavePct GenEvt;
    local array<int> ActivateIndices;

    ActivateIndices.AddItem(WaveProgressIdx;
    GenEvtIdx = 0;
    J0x21:

    if(GenEvtIdx < GeneratedEvents.Length)
    {
        GenEvt = KFSeqEvent_ExterminateWavePct(GeneratedEvents[GenEvtIdx]);
        if(GenEvt != none)
        {
            GenEvt.Reset();
            GenEvt.CheckActivate(self, self,, ActivateIndices);
        }
        ++ GenEvtIdx;
        goto J0x21;
    }
}

function NotifyBossDamaged(KFPawn_Monster Boss, int Damage)
{
    local float OldHealthPct, NewHealthPct;
    local int PrevBossProgressIdx, GenEvtIdx, I;
    local KFSeqEvent_ExterminateBossHealthPct GenEvt;

    PrevBossProgressIdx = BossProgressIdx;
    OldHealthPct = float(Boss.Health + Damage) / float(Boss.HealthMax);
    NewHealthPct = float(Boss.Health) / float(Boss.HealthMax);
    BossHealthPct = NewHealthPct;
    GenEvtIdx = 0;
    J0xD4:

    if(GenEvtIdx < GeneratedEvents.Length)
    {
        GenEvt = KFSeqEvent_ExterminateBossHealthPct(GeneratedEvents[GenEvtIdx]);
        if(GenEvt != none)
        {
            I = 0;
            J0x12C:

            if(I < GenEvt.ProgressThresholds.Length)
            {
                if((OldHealthPct >= GenEvt.ProgressThresholds[I]) && NewHealthPct < GenEvt.ProgressThresholds[I])
                {
                    BossProgressIdx = GenEvt.ProgressOutputStartIndex + I;
                    goto J0x20B;
                }
                ++ I;
                goto J0x12C;
            }
            J0x20B:

            goto J0x21C;
        }
        ++ GenEvtIdx;
        goto J0xD4;
    }
    J0x21C:

    if(BossProgressIdx != PrevBossProgressIdx)
    {
        TriggerBossHealthPctProgress();
    }
}

simulated function TriggerBossHealthPctProgress()
{
    local int GenEvtIdx;
    local KFSeqEvent_ExterminateBossHealthPct GenEvt;
    local array<int> ActivateIndices;

    ActivateIndices.AddItem(BossProgressIdx;
    GenEvtIdx = 0;
    J0x21:

    if(GenEvtIdx < GeneratedEvents.Length)
    {
        GenEvt = KFSeqEvent_ExterminateBossHealthPct(GeneratedEvents[GenEvtIdx]);
        if(GenEvt != none)
        {
            GenEvt.Reset();
            GenEvt.CheckActivate(self, self,, ActivateIndices);
        }
        ++ GenEvtIdx;
        goto J0x21;
    }
}

simulated function ActivateObjective()
{
    super.ActivateObjective();
    if(Role == ROLE_Authority)
    {
        BossHealthPct = 1;
        bIsActive = true;
        if(bBossWave)
        {
            if(KFGameInfo_Objective(WorldInfo.Game) != none)
            {
                KFGameInfo_Objective(WorldInfo.Game).SetBossIndex();
            }
        }
    }
}

simulated function DeactivateObjective()
{
    local KFPawn_Human KFPH;

    super.DeactivateObjective();
    if(Role == ROLE_Authority)
    {
        if((GetProgress()) < 1)
        {
            if(FailureSoundEvent != none)
            {
                PlaySoundBase(FailureSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
            }            
        }
        else
        {
            foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
            {
                GrantReward(KFPH);                
            }            
        }
        bIsActive = false;
    }
}

simulated function bool IsActive()
{
    return bIsActive;
}

simulated function bool UsesProgress()
{
    return true;
}

simulated function bool IsBonus();

function bool CanActivateObjective()
{
    return !IsCurrentGameModeBlacklisted();
}

function bool IsCurrentGameModeBlacklisted()
{
    local class<KFGameInfo> CurrGameClass;

    foreach GameModeBlacklist(CurrGameClass,)
    {
        if(CurrGameClass == WorldInfo.GRI.GameClass)
        {            
            return true;
        }        
    }    
    return false;
}

simulated function float GetProgress()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(bBossWave)
    {
        return FClamp(1 - BossHealthPct, 0, 1);
    }
    return FClamp(float(KFGRI.WaveTotalAICount - KFGRI.AIRemaining) / float(KFGRI.WaveTotalAICount), 0, 1);
}

simulated function bool IsComplete()
{
    return false;
}

simulated function float GetActivationPctChance()
{
    return 1;
}

simulated function string GetProgressText()
{
    return string(int((GetProgress()) * float(100))) $ "%";
}

simulated function string GetLocalizedRequirements()
{
    local KFGameReplicationInfo KFGRI;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    return (Localize("Objectives", default.RequirementsLocKey, "KFGame")) @ string(KFGRI.WaveTotalAICount);
}

simulated function bool GetIsMissionCritical()
{
    return bIsMissionCriticalObjective;
}

simulated function bool ShouldDrawIcon()
{
    return false;
}

simulated function Vector GetIconLocation();

simulated function DrawHUD(KFHUDBase HUD, Canvas DrawCanvas);

defaultproperties
{
    BossHealthPct=1
    WaveProgressIdx=-1
    BossProgressIdx=-1
    LocalizationKey="ExterminateWaveObjective"
    NameShortLocKey="ExterminateWaveObjective"
    DescriptionLocKey="ExterminateWaveDescription"
    DescriptionShortLocKey="ExterminateWaveDescriptionShort"
    LocalizationPackageName="KFGame"
    RequirementsLocKey="ExterminateWaveRequired"
    GameModeBlacklist=/* Array type was not detected. */
    PerPlayerSpawnRateMod=/* Array type was not detected. */
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__KFMapObjective_ExterminateWave.Sprite'
    Components(0)=Sprite
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bAlwaysRelevant=true
    SupportedEvents=/* Array type was not detected. */
}