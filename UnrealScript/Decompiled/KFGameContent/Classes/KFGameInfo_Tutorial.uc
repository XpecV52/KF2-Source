/*******************************************************************************
 * KFGameInfo_Tutorial generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameInfo_Tutorial extends KFGameInfo_Survival
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var class<KFGFxMoviePlayer_Tutorial> MoviePlayerTutorialClass;
var KFGFxMoviePlayer_Tutorial MyGFXTutorial;
var KFTutorialSectionInfo LobbyStartInfo;
var KFTutorialSectionInfo StartMatchInfo;
var KFTutorialSectionInfo Wave1EndInfo;
var KFTutorialSectionInfo TraderCloseInfo;
var KFTutorialSectionInfo VictoryInfo;
var KFTutorialSectionInfo HealSelfInfo;
var KFTutorialSectionInfo ZedTimeInfo;
var KFTutorialSectionInfo MeleeTutorial;
var KFTutorialSectionInfo TraderMenuTutorial;
var KFTutorialSectionInfo PerkMenuTutorial;
var KFTutorialSectionInfo GearMenuTutorial;
var KFTutorialSectionInfo InventoryMenuTutorial;
var KFTutorialSectionInfo StoreMenuTutorial;
var bool bShowedHealSelf;
var bool bShowedZedTime;
var bool bShowedTraderTutorial;
var bool bShowedMeleeTutorial;
var bool bShowedPerkMenuTutorial;
var bool bShowedGearMenuTutorial;
var bool bShowedInventoryMenuTutorial;
var bool bShowedStoreMenuTutorial;
var bool bShowedTraderCloseInfo;
var int TimeAfterTrading;
var int StartingDosh;
var KFPlayerController MyPC;
var Weapon CurrentWeapon;

event InitGame(string Options, out string ErrorMessage)
{
    if(WorldInfo.NetMode != NM_Standalone)
    {        
        ConsoleCommand("open" @ WorldInfo.GetMapName(true));
        return;
    }
    super(KFGameInfo).InitGame(Options, ErrorMessage);
}

event PostBeginPlay()
{
    super.PostBeginPlay();
    TimeBetweenWaves = default.TimeBetweenWaves;
    if(((WorldInfo.NetMode != NM_DedicatedServer) && KFGameReplicationInfo(WorldInfo.GRI) != none) && KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager != none)
    {
        KFGameReplicationInfo(WorldInfo.GRI).TraderDialogManager.bEnabled = false;
    }
}

event PostLogin(PlayerController NewPlayer)
{
    super(KFGameInfo).PostLogin(NewPlayer);
    if(NewPlayer.IsLocalController())
    {
        MyPC = KFPlayerController(NewPlayer);
        CreateTutorialHUD(LobbyStartInfo);
    }
}

function RestartPlayer(Controller NewPlayer)
{
    super.RestartPlayer(NewPlayer);
    if(NewPlayer.PlayerReplicationInfo != none)
    {
        NewPlayer.PlayerReplicationInfo.Score = float(StartingDosh);
        CreateTutorialHUD(StartMatchInfo);
    }
}

function ReduceDamage(out int Damage, Pawn injured, Controller InstigatedBy, Vector HitLocation, out Vector Momentum, class<DamageType> DamageType, Actor DamageCauser, TraceHitInfo HitInfo)
{
    if(injured.IsHumanControlled())
    {
        if(!bShowedHealSelf)
        {
            if(float(injured.Health) <= (float(injured.HealthMax) * 0.9))
            {
                CreateTutorialHUD(HealSelfInfo);
                bShowedHealSelf = true;
            }
        }
    }
    super.ReduceDamage(Damage, injured, InstigatedBy, HitLocation, Momentum, DamageType, DamageCauser, HitInfo);
}

function bool PreventDeath(Pawn KilledPawn, Controller Killer, class<DamageType> DamageType, Vector HitLocation)
{
    if(KilledPawn.IsHumanControlled())
    {
        KilledPawn.Health = int(float(KilledPawn.HealthMax) * 0.25);
        return true;
    }
    return super(GameInfo).PreventDeath(KilledPawn, Killer, DamageType, HitLocation);
}

function WaveEnded(KFGameInfo_Survival.EWaveEndCondition WinCondition)
{
    if(WaveNum == (WaveMax - 1))
    {
        WaveNum = WaveMax;
    }
    super.WaveEnded(WinCondition);
}

function EndOfMatch(bool bVictory)
{
    super.EndOfMatch(bVictory);
    if(bVictory)
    {
        if(WorldInfo.IsConsoleBuild())
        {
            PlayfabInter.AddOnCloudScriptExecutionCompleteDelegate(OnTutorialRewardsComplete);
            PlayfabInter.ExecuteCloudScript("ClaimTutorialRewards", none);
        }
        CreateTutorialHUD(VictoryInfo);
    }
}

function OnTutorialRewardsComplete(bool bWasSuccessful, string FunctionName, JsonObject FunctionResult)
{
    PlayfabInter.ClearOnCloudScriptExecutionCompleteDelegate(OnTutorialRewardsComplete);
    if(bWasSuccessful && FunctionName == "ClaimTutorialRewards")
    {
        Class'GameEngine'.static.GetPlayfabInterface().ReadInventory();
    }
}

function ShowPostGameMenu()
{
    ConsoleCommand("disconnect");
}

function byte DetermineNextTraderIndex()
{
    local int Index;
    local KFTraderTrigger Trader;

    foreach TraderList(Trader, Index)
    {
        if(Trader.Name == 'KFTraderTrigger_17')
        {            
            return byte(Index);
        }        
    }    
    return super.DetermineNextTraderIndex();
}

function ResetPickups(array<KFPickupFactory> PickupList, int NumPickups)
{
    if(WaveNum == 1)
    {
        super(KFGameInfo).ResetPickups(PickupList, 0);
    }
    super.ResetPickups(PickupList, NumPickups);
}

function SetZedTimeDilation(float NewTimeDilation)
{
    super(KFGameInfo).SetZedTimeDilation(NewTimeDilation);
    if(NewTimeDilation == ZedTimeSlomoScale)
    {
        if(!bShowedZedTime)
        {
            CreateTutorialHUD(ZedTimeInfo);
            bShowedZedTime = true;
        }
    }
}

function NotifyMenuOpened(byte MenuIndex)
{
    switch(MenuIndex)
    {
        case 1:
            if(!bShowedPerkMenuTutorial)
            {
                CreateTutorialHUD(PerkMenuTutorial);
                bShowedPerkMenuTutorial = true;
                return;
            }
            break;
        case 2:
            if(!bShowedGearMenuTutorial)
            {
                CreateTutorialHUD(GearMenuTutorial);
                bShowedGearMenuTutorial = true;
                return;
            }
            break;
        case 3:
            if(!bShowedInventoryMenuTutorial)
            {
                CreateTutorialHUD(InventoryMenuTutorial);
                bShowedInventoryMenuTutorial = true;
                return;
            }
            break;
        case 4:
            if(!bShowedStoreMenuTutorial)
            {
                CreateTutorialHUD(StoreMenuTutorial);
                bShowedStoreMenuTutorial = true;
                return;
            }
            break;
        default:
            break;
    }
}

function bool AllowUnpause()
{
    if(MyGFXTutorial != none)
    {
        return false;
    }
    return true;
}

function CreateTutorialHUD(KFTutorialSectionInfo TutorialSectionInfo, optional bool bViaTimer)
{
    local PlayerController PC;

    if(!bViaTimer && TutorialSectionInfo.OpenDelay > float(0))
    {
        SetTimer(TutorialSectionInfo.OpenDelay, false, 'OpenDelayTimer', TutorialSectionInfo);
        return;
    }
    PC = GetALocalPlayerController();
    PC.PlayerInput.ResetInput();
    if((MyGFXTutorial == none) && MoviePlayerTutorialClass != none)
    {
        MyGFXTutorial = new MoviePlayerTutorialClass;
        MyGFXTutorial.SetTimingMode(1);
        MyGFXTutorial.TutorialSectionInfo = TutorialSectionInfo;
        MyGFXTutorial.TargetTutorialArray = TutorialSectionInfo.GetSlides(PC);
    }
    if((PC != none) && MyGFXTutorial != none)
    {
        MyGFXTutorial.Init(Class'Engine'.static.GetEngine().GamePlayers[MyGFXTutorial.LocalPlayerOwnerIndex]);
        PC.SetPause(true, AllowUnpause);
        if(MyGFXTutorial.TutorialSectionInfo.VoiceOverOpenEvent != none)
        {
            PC.PlaySoundBase(MyGFXTutorial.TutorialSectionInfo.VoiceOverOpenEvent, true, false, false);
        }
    }
}

function RemoveTutorialHud()
{
    local PlayerController PC;

    if(MyGFXTutorial != none)
    {
        PC = GetALocalPlayerController();
        if(PC != none)
        {
            if(MyGFXTutorial.TutorialSectionInfo.VoiceOverOpenEvent != none)
            {
                PC.PlaySoundBase(MyGFXTutorial.TutorialSectionInfo.VoiceOverCloseEvent, true, false, false);
            }
            MyGFXTutorial.Close(true);
            MyGFXTutorial = none;
            PC.SetPause(false);
        }
    }
}

function NotifyControllerDisconnected()
{
    if(MyGFXTutorial != none)
    {
        MyGFXTutorial.SetVisibility(false);
        MyGFXTutorial.SetPriority(1);
        KFPlayerController(GetALocalPlayerController()).MyGFxManager.SetPriority(2);
    }
}

function NotifyControllerReconnected()
{
    if(MyGFXTutorial != none)
    {
        MyGFXTutorial.SetVisibility(true);
        MyGFXTutorial.SetPriority(2);
        KFPlayerController(GetALocalPlayerController()).MyGFxManager.SetPriority(1);
    }
}

function Tick(float DeltaTime)
{
    super(KFGameInfo).Tick(DeltaTime);
    CheckPlayerAction();
}

function CheckPlayerAction()
{
    if((!bShowedMeleeTutorial && MyPC.Pawn != none) && CurrentWeapon != MyPC.Pawn.Weapon)
    {
        if(MyPC.Pawn.Weapon.IsA('KFWeap_MeleeBase'))
        {
            CreateTutorialHUD(MeleeTutorial);
            bShowedMeleeTutorial = true;
        }
        CurrentWeapon = MyPC.Pawn.Weapon;
    }
}

function OnTraderMenuClosed()
{
    if(MyKFGRI.RemainingTime > TimeAfterTrading)
    {
        MyKFGRI.RemainingTime = TimeAfterTrading;
        MyKFGRI.RemainingMinute = TimeAfterTrading;
        if(!bShowedTraderCloseInfo)
        {
            CreateTutorialHUD(TraderCloseInfo);
            bShowedTraderCloseInfo = true;
        }
        SetTimer(float(TimeAfterTrading), false, 'CloseTraderTimer');
    }
}

state TraderOpen
{
    function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        CreateTutorialHUD(Wave1EndInfo);
    }

    function CheckPlayerAction()
    {
        if(MyKFGRI.RemainingTime > TimeAfterTrading)
        {
            if((MyPC != none) && MyPC.MyGFxManager.TraderMenu != none)
            {
                if(!MyPC.bClientTraderMenuOpen)
                {
                    OnTraderMenuClosed();
                    return;                    
                }
                else
                {
                    if(!bShowedTraderTutorial)
                    {
                        CreateTutorialHUD(TraderMenuTutorial);
                        bShowedTraderTutorial = true;
                        return;                        
                    }
                    else
                    {
                        MyKFGRI.RemainingTime = TimeBetweenWaves;
                        MyKFGRI.RemainingMinute = TimeBetweenWaves;
                    }
                }
            }            
        }
        if(MyPC.bClientTraderMenuOpen)
        {
            MyKFGRI.RemainingTime = TimeBetweenWaves;
            MyKFGRI.RemainingMinute = TimeBetweenWaves;
        }
        global.CheckPlayerAction();
    }
    stop;    
}

defaultproperties
{
    MoviePlayerTutorialClass=Class'KFGFxMoviePlayer_Tutorial'
    LobbyStartInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.LobbyStartArch'
    StartMatchInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.StartMatchArch'
    Wave1EndInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.Wave1EndArch'
    TraderCloseInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.TraderCloseArch'
    VictoryInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.VictoryArch'
    HealSelfInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.HealSelfArch'
    ZedTimeInfo=KFTutorialSectionInfo'GP_Tutorial_ARCH.ZedTimeArch'
    MeleeTutorial=KFTutorialSectionInfo'GP_Tutorial_ARCH.MeleeArch'
    TraderMenuTutorial=KFTutorialSectionInfo'GP_Tutorial_ARCH.TraderOpenArch'
    PerkMenuTutorial=KFTutorialSectionInfo'GP_Tutorial_ARCH.PerkMenuArch'
    GearMenuTutorial=KFTutorialSectionInfo'GP_Tutorial_ARCH.GearMenuArch'
    InventoryMenuTutorial=KFTutorialSectionInfo'GP_Tutorial_ARCH.InventoryMenuArch'
    StoreMenuTutorial=KFTutorialSectionInfo'GP_Tutorial_ARCH.StoreMenuArch'
    TimeAfterTrading=30
    StartingDosh=2000
    TimeBetweenWaves=600
    KFGFxManagerClass=Class'KFGFxMoviePlayer_Manager_Tutorial'
    MaxGameDifficulty=0
    SpawnManagerClasses=/* Array type was not detected. */
    GameName="Basic Training"
}