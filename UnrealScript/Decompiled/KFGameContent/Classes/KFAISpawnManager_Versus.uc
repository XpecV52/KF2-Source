/*******************************************************************************
 * KFAISpawnManager_Versus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAISpawnManager_Versus extends KFAISpawnManager within KFGameInfo_VersusSurvival
    config(Game);

var protected array<KFAISpawnSquad> PlayerZedSquads;
var const array<KFAIWaveInfo> PlayerZedWaves;
var array<float> PlayerZedSpawnInterval;
var float FirstWaveStartSpawnWaitTime;
var float LaterWaveStartSpawnWaitTime;
var bool bSpawnedSpecialSquad;
var protected bool bBossSpawned;
var float SpecialSquadRandomChance;
var array<int> MaxPlayerSpecialSquadSpawns;
var int NumPlayerSpecialSquadSpawns;
var float AdditionalSpecialSquadChancePerSpawn;
var protected array< class<KFPawn_Monster> > ReservedPlayerZeds;
var const int ReservedZedQueueLimit;
var const int MaxActivePlayerScrakes;
var const int MaxActivePlayerFleshpounds;
var protected int NumScrakesThisSpawnCycle;
var protected int NumFleshpoundsThisSpawnCycle;
var protected float BossSpawnPlayerInterval;
var protected float FinalSurvivorBossSpawnPlayerInterval;
var protected int LargestSquadSize;

function int GetAIAliveCount()
{
    return super.GetAIAliveCount() + ReservedPlayerZeds.Length;
}

function SetupNextWave(byte NextWaveIndex, optional int TimeToNextWaveBuffer)
{
    local int I, J, SquadZedCount;
    local array<KFAISpawnSquad> SquadList;
    local KFPlayerControllerVersus KFPCV;
    local float SpawnWaitTime;

    TimeToNextWaveBuffer = 0;
    super.SetupNextWave(NextWaveIndex, TimeToNextWaveBuffer);
    LargestSquadSize = 0;
    WaveSettings.Waves[NextWaveIndex].GetNewSquadList(SquadList);
    I = 0;
    J0x7E:

    if(I < AvailableSquads.Length)
    {
        SquadZedCount = 0;
        J = 0;
        J0xAC:

        if(J < AvailableSquads[I].MonsterList.Length)
        {
            SquadZedCount += AvailableSquads[I].MonsterList[J].Num;
            ++ J;
            goto J0xAC;
        }
        if(SquadZedCount > LargestSquadSize)
        {
            LargestSquadSize = SquadZedCount;
        }
        ++ I;
        goto J0x7E;
    }
    if(NextWaveIndex < PlayerZedWaves.Length)
    {
        PlayerZedWaves[NextWaveIndex].GetNewSquadList(PlayerZedSquads);
        SpawnWaitTime = ((NextWaveIndex == 0) ? FirstWaveStartSpawnWaitTime : LaterWaveStartSpawnWaitTime);
        Outer.SetTimer(SpawnWaitTime, false, 'Timer_SpawnPlayerZeds', self);
        Outer.MyKFGRIV.SetPlayerZedSpawnTime(byte(SpawnWaitTime), false);        
    }
    else
    {
        Outer.SetTimer(5, false, 'Timer_SpawnPlayerZeds', self);
        Outer.MyKFGRIV.SetPlayerZedSpawnTime(255, false);
    }
    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
    {
        KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass = none;
        KFPCV.PlayerZedSpawnInfo.PendingZedSpawnLocation = vect(0, 0, 0);        
    }    
    bSpawnedSpecialSquad = false;
    SpecialSquadRandomChance = 0.1;
    NumPlayerSpecialSquadSpawns = 0;
}

function int SpawnSquad(out array< class<KFPawn_Monster> > AIToSpawn, optional bool bSkipHumanZedSpawning)
{
    local int NumSpawned;

    bSkipHumanZedSpawning = false;
    NumSpawned = super.SpawnSquad(AIToSpawn, bSkipHumanZedSpawning);
    if((NumSpawned > 0) && DesiredSquadType == 0)
    {
        bBossSpawned = true;
    }
    return NumSpawned;
}

function Timer_SpawnPlayerZeds()
{
    local int RandNum;
    local array< class<KFPawn_Monster> > NewSquad;
    local float SpawnTimer;

    if((Outer.IsTimerActive('Timer_CheckForZedTakeovers', self) || !IsPlayerZedSpawnAllowed()) || CheckForTakeoverTimer())
    {
        if(Outer.MyKFGRI.WaveNum == Outer.MyKFGRI.WaveMax)
        {
            RespawnZedHumanPlayers(none);            
        }
        else
        {
            Outer.MyKFGRIV.SetPlayerZedSpawnTime(255, true);
        }
        return;
    }
    if(!HaveZedPlayers())
    {
        SpawnRemainingReservedZeds();
        return;
    }
    NumScrakesThisSpawnCycle = 0;
    NumFleshpoundsThisSpawnCycle = 0;
    if(Outer.WorldInfo.Game.IsInState('PlayingWave'))
    {
        CheckForSpecialSquadSpawn();
        RandNum = Rand(PlayerZedSquads.Length);
        GetSpawnListFromSquad(byte(RandNum), PlayerZedSquads, NewSquad);
        PlayerZedSquads.Remove(RandNum, 1;
        AssignZedsToPlayers(NewSquad);
        RespawnZedHumanPlayers(LastAISpawnVolume);
    }
    SpawnTimer = PlayerZedSpawnInterval[Outer.MyKFGRI.WaveNum - 1];
    Outer.SetTimer(SpawnTimer, false, 'Timer_SpawnPlayerZeds', self);
    Outer.MyKFGRIV.SetPlayerZedSpawnTime(byte(SpawnTimer), false);
}

function CheckForSpecialSquadSpawn()
{
    local int WaveArrayNum;
    local bool bRequireEndWaveSpecialSquadSpawn;

    WaveArrayNum = Outer.MyKFGRI.WaveNum - 1;
    if((MaxPlayerSpecialSquadSpawns[WaveArrayNum] == 0) || NumPlayerSpecialSquadSpawns >= MaxPlayerSpecialSquadSpawns[WaveArrayNum])
    {
        if(PlayerZedSquads.Length == 0)
        {
            PlayerZedWaves[WaveArrayNum].GetNewSquadList(PlayerZedSquads);
        }
        return;
    }
    bRequireEndWaveSpecialSquadSpawn = (WaveTotalAI - Outer.NumAISpawnsQueued) <= (LargestSquadSize * 3);
    if(bRequireEndWaveSpecialSquadSpawn || (NumPlayerSpecialSquadSpawns == 0) && float(Outer.NumAISpawnsQueued) >= (float(WaveTotalAI) * 0.5))
    {
        GetSpecialSquad(WaveArrayNum);
    }
    if(PlayerZedSquads.Length == 0)
    {
        if(bSpawnedSpecialSquad)
        {
            bSpawnedSpecialSquad = false;
            SpecialSquadRandomChance = 0;            
        }
        else
        {
            GetSpecialSquad(WaveArrayNum);
        }
    }
    if(!bSpawnedSpecialSquad)
    {
        SpecialSquadRandomChance += AdditionalSpecialSquadChancePerSpawn;
        if(FRand() < SpecialSquadRandomChance)
        {
            GetSpecialSquad(WaveArrayNum);
        }
    }
    if(PlayerZedSquads.Length == 0)
    {
        PlayerZedWaves[WaveArrayNum].GetNewSquadList(PlayerZedSquads);
    }
}

function GetSpecialSquad(int WaveArrayNum)
{
    PlayerZedSquads.Length = 0;
    PlayerZedWaves[WaveArrayNum].GetSpecialSquad(PlayerZedSquads);
    bSpawnedSpecialSquad = true;
    SpecialSquadRandomChance = 0;
    ++ NumPlayerSpecialSquadSpawns;
}

function AssignZedsToPlayers(out array< class<KFPawn_Monster> > NewZeds)
{
    local KFPlayerControllerVersus KFPCV;

    Outer.RefreshMonsterAliveCount();
    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
    {
        if((((KFPCV.GetTeamNum() == 255) && (KFPCV.Pawn == none) || !KFPCV.Pawn.IsAliveAndWell()) && KFPCV.CanRestartPlayer()) && KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass == none)
        {
            if(ReservedPlayerZeds.Length > 0)
            {
                GiveAvailableZedClass(KFPCV, ReservedPlayerZeds,, true);
                if(KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass != none)
                {
                    continue;                    
                }
            }
            if(NewZeds.Length == 0)
            {
                continue;                
            }
            GiveAvailableZedClass(KFPCV, NewZeds);
        }        
    }    
    ReserveStrongZedsForPlayers(NewZeds);
}

function GiveAvailableZedClass(KFPlayerControllerVersus KFPCV, out array< class<KFPawn_Monster> > AvailableZeds, optional bool bSecondPass, optional bool bReservedCheck)
{
    local int I, J, ZedIndex;
    local array<int> PassedOnZeds;
    local array< class<KFPawn_Monster> > PossibleZeds;

    if(KFPCV.HasSpawnedZeds.Length >= (Outer.PlayerZedClasses.Length - 3))
    {
        KFPCV.HasSpawnedZeds.Length = 0;
    }
    I = 0;
    J0x75:

    if(I < AvailableZeds.Length)
    {
        if(AvailableZeds[I] == Outer.AIClassList[6])
        {
            if((NumScrakesThisSpawnCycle >= MaxActivePlayerScrakes) || (GetNumActiveZedsOfClass(Class'KFPawn_ZedScrake')) >= MaxActivePlayerScrakes)
            {
                goto J0x299;
            }            
        }
        else
        {
            if(AvailableZeds[I] == Outer.AIClassList[7])
            {
                if((NumFleshpoundsThisSpawnCycle >= MaxActivePlayerFleshpounds) || (GetNumActiveZedsOfClass(Class'KFPawn_ZedFleshpound')) >= MaxActivePlayerFleshpounds)
                {
                    goto J0x299;
                }
            }
        }
        J = 0;
        J0x187:

        if(J < Outer.PlayerZedClasses.Length)
        {
            if(ClassIsChildOf(Outer.PlayerZedClasses[J], AvailableZeds[I]))
            {
                if((J < KFPCV.HasSpawnedZeds.Length) && KFPCV.HasSpawnedZeds[J])
                {
                    PassedOnZeds.AddItem(J;
                    goto J0x299;
                }
                PossibleZeds.AddItem(AvailableZeds[I];
                goto J0x299;
            }
            ++ J;
            goto J0x187;
        }
        J0x299:

        ++ I;
        goto J0x75;
    }
    if(PossibleZeds.Length == 0)
    {
        if(!bReservedCheck)
        {
            if(!bSecondPass && PassedOnZeds.Length > 1)
            {
                KFPCV.HasSpawnedZeds.Remove(PassedOnZeds[Rand(PassedOnZeds.Length)], 1;
                GiveAvailableZedClass(KFPCV, AvailableZeds, true);
                return;
            }
            FindTakeoverZed(KFPCV);
        }
        return;
    }
    ZedIndex = Rand(PossibleZeds.Length);
    I = 0;
    J0x374:

    if(I < Outer.PlayerZedClasses.Length)
    {
        if(ClassIsChildOf(Outer.PlayerZedClasses[I], PossibleZeds[ZedIndex]))
        {
            if(PossibleZeds[ZedIndex] == Outer.AIClassList[6])
            {
                ++ NumScrakesThisSpawnCycle;                
            }
            else
            {
                if(PossibleZeds[ZedIndex] == Outer.AIClassList[7])
                {
                    ++ NumFleshpoundsThisSpawnCycle;
                }
            }
            KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[I];
            AvailableZeds.Remove(AvailableZeds.Find(PossibleZeds[ZedIndex], 1;
            KFPCV.HasSpawnedZeds[I] = true;
            if(!bReservedCheck)
            {
                ++ Outer.NumAISpawnsQueued;
            }
            return;
        }
        ++ I;
        goto J0x374;
    }
}

function ReserveStrongZedsForPlayers(out array< class<KFPawn_Monster> > LeftoverZeds)
{
    local int I;
    local class<KFPawn_Monster> LeftoverZedClass;

    I = 0;
    J0x0B:

    if(I < LeftoverZeds.Length)
    {
        LeftoverZedClass = LeftoverZeds[I];
        if(ClassIsChildOf(Outer.PlayerZedClasses[7], LeftoverZedClass) || ClassIsChildOf(Outer.PlayerZedClasses[6], LeftoverZedClass))
        {
            LeftoverZeds.Remove(I, 1;
            ReservedPlayerZeds.Insert(0, 1;
            ReservedPlayerZeds[0] = LeftoverZedClass;
            ++ Outer.NumAISpawnsQueued;
            -- I;            
        }
        ++ I;
        goto J0x0B;
    }
}

function Vector GetSpawnLocation(class<KFPawn_Monster> MonsterPawnClass, KFSpawnVolume SpawnVolume)
{
    SpawnVolume.SetLastSpawnTime(Outer.WorldInfo.TimeSeconds);
    return SpawnVolume.FindSpawnLocation(MonsterPawnClass);
}

protected function RespawnZedHumanPlayers(KFSpawnVolume SpawnVolume, optional bool bIsTakeOverSpawn)
{
    local KFPlayerController KFPC;
    local Vector SpawnLocation;
    local KFGame.KFSpawnVolume.ESquadType SquadType;
    local array<KFPlayerController> CrawlerPlayers, MediumPlayers, LargePlayers, BossPlayers;
    local int NumSpawned, NumSquadMembers;
    local array< class<KFPawn_Monster> > TempPawnClasses, CrawlerPawnClasses, MediumPawnClasses, LargePawnClasses, BossPawnClasses;

    local int I;
    local bool bStopSpawning;

    if(!Outer.IsWaveActive())
    {
        return;
    }
    if((Outer.MyKFGRI.WaveNum == Outer.MyKFGRI.WaveMax) && !bBossSpawned)
    {
        if(Outer.IsTimerActive('Timer_CheckForZedTakeovers', self))
        {
            Outer.ClearTimer('Timer_CheckForZedTakeovers', self);
        }
        ReservedPlayerZeds.Length = 0;
        foreach Outer.WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = none;
            KFPC.PlayerZedSpawnInfo.PendingZedSpawnLocation = vect(0, 0, 0);
            if(KFPC.CanRestartPlayer() && KFPC.GetTeamNum() == 255)
            {
                BossPlayers.AddItem(KFPC;
            }            
        }        
        KFPC = BossPlayers[Rand(BossPlayers.Length)];
        if(KFPC != none)
        {
            KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerBossClassList[Rand(Outer.PlayerBossClassList.Length)];
            BossPawnClasses[0] = KFPC.PlayerZedSpawnInfo.PendingZedPawnClass;
            if((SpawnVolume == none) || SpawnVolume.bNoPlayers)
            {
                SetDesiredSquadTypeForZedList(BossPawnClasses);
                SpawnVolume = GetBestSpawnVolume(BossPawnClasses,, KFPC);
            }
            if(KFPC.Pawn != none)
            {
                KFPC.Pawn.Destroy();
            }
            Outer.RestartPlayer(KFPC);
            if(KFPC.Pawn != none)
            {
                bBossSpawned = true;
                SpawnLocation = GetSpawnLocation(class<KFPawn_Monster>(KFPC.Pawn.Class), SpawnVolume);
                KFPC.SetLocation(SpawnLocation);
                KFPC.Pawn.SetLocation(SpawnLocation);
                KFPC.InitGameplayPostProcessFX();
                KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = none;
                KFPC.PlayerZedSpawnInfo.PendingZedSpawnLocation = vect(0, 0, 0);
                ++ Outer.NumAISpawnsQueued;
                Outer.RefreshMonsterAliveCount();                
            }
            else
            {
                RespawnZedHumanPlayers(none);
                return;
            }
        }
        Outer.SetTimer(BossSpawnPlayerInterval, false, 'Timer_SpawnBossPlayerZeds', self);
        return;
    }
    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        if((KFPC.Pawn != none) && KFPC.Pawn.IsAliveAndWell())
        {
            continue;            
        }
        if(((KFPC.PlayerZedSpawnInfo.PendingZedPawnClass != none) && KFPC.CanRestartPlayer()) && KFPC.GetTeamNum() == 255)
        {
            TempPawnClasses[0] = KFPC.PlayerZedSpawnInfo.PendingZedPawnClass;
            SquadType = GetDesiredSquadTypeForZedList(TempPawnClasses);
            if(SquadType == 4)
            {
                CrawlerPlayers.AddItem(KFPC;
                CrawlerPawnClasses.AddItem(KFPC.PlayerZedSpawnInfo.PendingZedPawnClass;
                continue;
            }
            if((SquadType == 3) || SquadType == 2)
            {
                MediumPlayers.AddItem(KFPC;
                MediumPawnClasses.AddItem(KFPC.PlayerZedSpawnInfo.PendingZedPawnClass;
                continue;
            }
            LargePlayers.AddItem(KFPC;
            LargePawnClasses.AddItem(KFPC.PlayerZedSpawnInfo.PendingZedPawnClass;
        }        
    }    
    if(((CrawlerPlayers.Length == 0) && MediumPlayers.Length == 0) && LargePlayers.Length == 0)
    {
        CheckForTakeoverTimer();
        return;
    }
    Outer.RefreshMonsterAliveCount();
    if(CrawlerPlayers.Length > 0)
    {
        SetDesiredSquadTypeForZedList(CrawlerPawnClasses);
        SpawnVolume = GetBestSpawnVolume(CrawlerPawnClasses,, CrawlerPlayers[0]);
        I = 0;
        J0x963:

        if(I < CrawlerPlayers.Length)
        {
            if(!Outer.IsWaveActive())
            {
                return;
            }
            if((Outer.MyKFGRI.WaveNum < Outer.MyKFGRI.WaveMax) && ((Outer.AIAliveCount + NumSpawned) + 1) > Outer.MyKFGRI.AIRemaining)
            {
                bStopSpawning = true;
                goto J0xB60;
            }
            if((NumSquadMembers % 3) == 0)
            {
                SetDesiredSquadTypeForZedList(CrawlerPawnClasses);
                SpawnVolume = GetBestSpawnVolume(CrawlerPawnClasses,, CrawlerPlayers[I]);
            }
            if(RestartPlayerZed(CrawlerPlayers[I], SpawnVolume))
            {
                ++ NumSpawned;
                ++ NumSquadMembers;
            }
            CrawlerPlayers.Remove(I, 1;
            CrawlerPawnClasses.Remove(I, 1;
            -- I;
            ++ I;
            goto J0x963;
        }
    }
    J0xB60:

    if(!bStopSpawning && MediumPlayers.Length > 0)
    {
        NumSquadMembers = 0;
        SetDesiredSquadTypeForZedList(MediumPawnClasses);
        SpawnVolume = GetBestSpawnVolume(MediumPawnClasses,, MediumPlayers[0]);
        I = 0;
        J0xBD5:

        if(I < MediumPlayers.Length)
        {
            if(!Outer.IsWaveActive())
            {
                return;
            }
            if((Outer.MyKFGRI.WaveNum < Outer.MyKFGRI.WaveMax) && ((Outer.AIAliveCount + NumSpawned) + 1) > Outer.MyKFGRI.AIRemaining)
            {
                bStopSpawning = true;
                goto J0xDD2;
            }
            if((NumSquadMembers % 3) == 0)
            {
                SetDesiredSquadTypeForZedList(MediumPawnClasses);
                SpawnVolume = GetBestSpawnVolume(MediumPawnClasses,, MediumPlayers[I]);
            }
            if(RestartPlayerZed(MediumPlayers[I], SpawnVolume))
            {
                ++ NumSpawned;
                ++ NumSquadMembers;
            }
            MediumPlayers.Remove(I, 1;
            MediumPawnClasses.Remove(I, 1;
            -- I;
            ++ I;
            goto J0xBD5;
        }
    }
    J0xDD2:

    if(!bStopSpawning && LargePlayers.Length > 0)
    {
        NumSquadMembers = 0;
        SetDesiredSquadTypeForZedList(LargePawnClasses);
        SpawnVolume = GetBestSpawnVolume(LargePawnClasses,, LargePlayers[0]);
        I = 0;
        J0xE47:

        if(I < LargePlayers.Length)
        {
            if(!Outer.IsWaveActive())
            {
                return;
            }
            if((Outer.MyKFGRI.WaveNum < Outer.MyKFGRI.WaveMax) && ((Outer.AIAliveCount + NumSpawned) + 1) > Outer.MyKFGRI.AIRemaining)
            {
                bStopSpawning = true;
                goto J0x1044;
            }
            if((NumSquadMembers % 3) == 0)
            {
                SetDesiredSquadTypeForZedList(LargePawnClasses);
                SpawnVolume = GetBestSpawnVolume(LargePawnClasses,, LargePlayers[I]);
            }
            if(RestartPlayerZed(LargePlayers[I], SpawnVolume))
            {
                ++ NumSpawned;
                ++ NumSquadMembers;
            }
            LargePlayers.Remove(I, 1;
            LargePawnClasses.Remove(I, 1;
            -- I;
            ++ I;
            goto J0xE47;
        }
    }
    J0x1044:

    Outer.AIAliveCount += NumSpawned;
    Outer.NumAIFinishedSpawning += NumSpawned;
    Outer.UpdateAIRemaining();
    if(bStopSpawning)
    {
        foreach Outer.WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = none;            
        }        
    }
    CheckForTakeoverTimer();
}

function bool CheckForTakeoverTimer()
{
    local KFPlayerControllerVersus KFPCV;
    local int ZedPlayers;

    if(!IsPlayerZedSpawnAllowed())
    {
        if(Outer.IsTimerActive('Timer_CheckForZedTakeovers', self))
        {
            Outer.ClearTimer('Timer_CheckForZedTakeovers', self);
        }
        return false;
    }
    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
    {
        if(!KFPCV.CanRestartPlayer())
        {
            continue;            
        }
        if(KFPCV.GetTeamNum() == 255)
        {
            ++ ZedPlayers;
        }        
    }    
    if((WaveTotalAI - Outer.NumAISpawnsQueued) <= (LargestSquadSize + ZedPlayers))
    {
        if(!Outer.IsTimerActive('Timer_CheckForZedTakeovers', self))
        {
            Outer.MyKFGRIV.SetPlayerZedSpawnTime(255, true);
            Outer.SetTimer(1, true, 'Timer_CheckForZedTakeovers', self);
        }
        return true;
    }
    return false;
}

function Timer_CheckForZedTakeovers()
{
    local KFPlayerControllerVersus KFPCV;
    local bool bNeedRespawn;
    local array<KFPlayerControllerVersus> ZedPlayers;
    local int I, LivingPlayerCount, DesiredTakeovers;

    Outer.RefreshMonsterAliveCount();
    if(!IsPlayerZedSpawnAllowed())
    {
        Outer.ClearTimer('Timer_CheckForZedTakeovers', self);
        return;
    }
    SpawnRemainingReservedZeds();
    DesiredTakeovers = 0;
    bNeedRespawn = false;
    LivingPlayerCount = Outer.GetLivingPlayerCount();
    if(LivingPlayerCount < 3)
    {
        DesiredTakeovers = ((LivingPlayerCount == 2) ? 4 : 3);
        foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
        {
            if(KFPCV.GetTeamNum() == 255)
            {
                if((KFPCV.Pawn != none) && KFPCV.Pawn.IsAliveAndWell())
                {
                    -- DesiredTakeovers;
                    if(DesiredTakeovers == 0)
                    {                        
                        return;
                    }
                    continue;
                }
                if(KFPCV.CanRestartPlayer())
                {
                    if(KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass != none)
                    {
                        bNeedRespawn = true;
                        continue;                        
                    }
                    if(ReservedPlayerZeds.Length > 0)
                    {
                        GiveAvailableZedClass(KFPCV, ReservedPlayerZeds,, true);
                    }
                    if(KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass == none)
                    {
                        ZedPlayers.AddItem(KFPCV;
                        continue;
                    }
                    bNeedRespawn = true;
                }
            }            
        }                
    }
    else
    {
        foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
        {
            if((KFPCV.GetTeamNum() != 255) || !KFPCV.CanRestartPlayer())
            {
                continue;                
            }
            if(KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass != none)
            {
                bNeedRespawn = true;
                continue;                
            }
            if((KFPCV.Pawn == none) || !KFPCV.Pawn.IsAliveAndWell())
            {
                if(ReservedPlayerZeds.Length > 0)
                {
                    GiveAvailableZedClass(KFPCV, ReservedPlayerZeds,, true);
                }
                if(KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass == none)
                {
                    ZedPlayers.AddItem(KFPCV;
                    continue;
                }
                bNeedRespawn = true;
            }            
        }        
    }
    if((ZedPlayers.Length == 0) && !bNeedRespawn)
    {
        return;
    }
    if(ZedPlayers.Length > 0)
    {
        if(DesiredTakeovers > 0)
        {
            J0x4CD:

            if(ZedPlayers.Length > DesiredTakeovers)
            {
                ZedPlayers.Remove(Rand(ZedPlayers.Length), 1;
                goto J0x4CD;
            }
        }
        I = 0;
        J0x50B:

        if(I < ZedPlayers.Length)
        {
            KFPCV = ZedPlayers[I];
            FindTakeoverZed(KFPCV);
            if(KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass != none)
            {
                bNeedRespawn = true;
            }
            ++ I;
            goto J0x50B;
        }
    }
    if(bNeedRespawn)
    {
        RespawnZedHumanPlayers(none);
    }
}

function bool NeedPlayerSpawnVolume()
{
    return Outer.IsTimerActive('Timer_CheckForZedTakeovers', self);
}

function SpawnRemainingReservedZeds(optional bool bSpawnAllReservedZeds)
{
    local int NumWaitingZedPlayers;
    local array< class<KFPawn_Monster> > TempSquad;

    if((ReservedPlayerZeds.Length == 0) || !IsPlayerZedSpawnAllowed())
    {
        ReservedPlayerZeds.Length = 0;
        return;
    }
    Outer.RefreshMonsterAliveCount();
    if((Outer.AIAliveCount + 1) > Outer.MyKFGRI.AIRemaining)
    {
        ReservedPlayerZeds.Length = 0;
        return;        
    }
    else
    {
        J0xB9:

        if((ReservedPlayerZeds.Length > 0) && (Outer.AIAliveCount + ReservedPlayerZeds.Length) > Outer.MyKFGRI.AIRemaining)
        {
            ReservedPlayerZeds.Remove(0, 1;
            goto J0xB9;
        }
        if(ReservedPlayerZeds.Length == 0)
        {
            return;
        }
    }
    NumWaitingZedPlayers = GetNumWaitingZedPlayers();
    if(NumWaitingZedPlayers == 0)
    {
        TempSquad = ReservedPlayerZeds;
        ReservedPlayerZeds.Length = 0;        
    }
    else
    {
        J0x194:

        if(ReservedPlayerZeds.Length > NumWaitingZedPlayers)
        {
            TempSquad.AddItem(ReservedPlayerZeds[0];
            ReservedPlayerZeds.Remove(0, 1;
            goto J0x194;
        }
    }
    if(TempSquad.Length > 0)
    {
        J0x1E4:

        if((TempSquad.Length > 0) && ((Outer.AIAliveCount + ReservedPlayerZeds.Length) + TempSquad.Length) > Outer.MyKFGRI.AIRemaining)
        {
            TempSquad.Remove(0, 1;
            goto J0x1E4;
        }
        if(TempSquad.Length > 0)
        {
            SpawnSquad(TempSquad, true);
        }
    }
}

function FindTakeoverZed(KFPlayerControllerVersus KFPCV)
{
    local KFPawn_Monster KFPM;
    local Controller C;
    local bool bNextZed;
    local class<KFPawn_Monster> AliveClass;
    local int I;

    if(!IsPlayerZedSpawnAllowed())
    {
        return;
    }
    foreach Outer.WorldInfo.AllPawns(Class'KFPawn_Monster', KFPM)
    {
        if(!KFPM.CanTakeOver())
        {
            continue;            
        }
        bNextZed = false;
        foreach Outer.WorldInfo.AllControllers(Class'Controller', C)
        {
            if(((!C.bIsPlayer || C.GetTeamNum() == 255) || C.Pawn == none) || !C.Pawn.IsAliveAndWell())
            {
                continue;                
            }
            if(VSizeSq(C.Pawn.Location - KFPM.Location) < 640000)
            {
                bNextZed = true;
                break;
            }            
        }        
        if(bNextZed)
        {
            continue;            
        }
        AliveClass = KFPM.Class;
        I = 0;
        J0x242:

        if(I < Outer.PlayerZedClasses.Length)
        {
            if(ClassIsChildOf(Outer.PlayerZedClasses[I], AliveClass))
            {
                KFPM.TakeRadiusDamage(none, 100000, 1000, Class'KFDT_Explosive_PlayerZedTakeover', 1, KFPM.Location, true, none);
                if(((((KFPM == none) || KFPM.Health <= 0) || KFPM.bPlayedDeath) || KFPM.bPendingDelete) || KFPM.bDeleteMe)
                {
                    KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[I];
                    KFPCV.PlayerZedSpawnInfo.PendingZedSpawnLocation = KFPM.Location;
                    KFPCV.HasSpawnedZeds[I] = true;
                    Outer.MyKFGRI.AIRemaining += 1;
                    Outer.NumAIFinishedSpawning -= 1;
                }                
                return;
            }
            ++ I;
            goto J0x242;
        }        
    }    
}

function Timer_SpawnBossPlayerZeds()
{
    local KFPlayerController KFPC, BestPlayer, SecondBestPlayer;
    local int LivingPlayerCount;
    local float LongestSpawnTime, TimeSinceSpawn, RandomFloat;
    local bool bNeedRespawn;

    if(Outer.MyKFGRI.bMatchIsOver)
    {
        Outer.ClearTimer('Timer_SpawnBossPlayerZeds', self);
        return;
    }
    LivingPlayerCount = Outer.GetLivingPlayerCount();
    if((LivingPlayerCount == 1) && Outer.GetMonsterAliveCount() > 1)
    {
        return;
    }
    BestPlayer = none;
    bNeedRespawn = false;
    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        if((KFPC.GetTeamNum() != 255) || !KFPC.CanRestartPlayer())
        {
            continue;            
        }
        KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = none;
        if((KFPC.Pawn == none) || !KFPC.Pawn.IsAliveAndWell())
        {
            if(LivingPlayerCount == 1)
            {
                TimeSinceSpawn = Outer.WorldInfo.TimeSeconds - KFPC.PlayerZedSpawnInfo.LastSpawnedTime;
                if((LongestSpawnTime == float(0)) || TimeSinceSpawn > LongestSpawnTime)
                {
                    LongestSpawnTime = TimeSinceSpawn;
                    SecondBestPlayer = BestPlayer;
                    BestPlayer = KFPC;
                    bNeedRespawn = true;
                }
                continue;
            }
            RandomFloat = FRand();
            if(RandomFloat < 0.33)
            {
                KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[3];                
            }
            else
            {
                if(RandomFloat < 0.66)
                {
                    KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[1];                    
                }
                else
                {
                    KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[4];
                }
            }
            bNeedRespawn = true;
        }        
    }    
    if(BestPlayer != none)
    {
        if(FRand() < 0.5)
        {
            BestPlayer.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[1];            
        }
        else
        {
            BestPlayer.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[4];
        }
        if(SecondBestPlayer != none)
        {
            if(FRand() < 0.5)
            {
                SecondBestPlayer.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[1];                
            }
            else
            {
                SecondBestPlayer.PlayerZedSpawnInfo.PendingZedPawnClass = Outer.PlayerZedClasses[4];
            }
        }
    }
    if(bNeedRespawn)
    {
        RespawnZedHumanPlayers(none);
    }
    if(LivingPlayerCount == 1)
    {
        Outer.SetTimer(FinalSurvivorBossSpawnPlayerInterval, false, 'Timer_SpawnBossPlayerZeds', self);        
    }
    else
    {
        Outer.SetTimer(BossSpawnPlayerInterval, false, 'Timer_SpawnBossPlayerZeds', self);
    }
}

function RecyclePendingZedPawnClass(KFPlayerController KFPC)
{
    local int I;

    if(KFPC.PlayerZedSpawnInfo.PendingZedPawnClass == none)
    {
        return;
    }
    I = 0;
    J0x44:

    if(I < Outer.AIClassList.Length)
    {
        if(ClassIsChildOf(KFPC.PlayerZedSpawnInfo.PendingZedPawnClass, Outer.AIClassList[I]))
        {
            ReservedPlayerZeds.AddItem(Outer.AIClassList[I];
            goto J0x116;
        }
        ++ I;
        goto J0x44;
    }
    J0x116:

}

function bool RestartPlayerZed(KFPlayerController KFPC, KFSpawnVolume SpawnVolume)
{
    local Vector SpawnLocation;
    local Rotator SpawnRotation;

    if(!Outer.IsWaveActive())
    {
        return false;
    }
    Outer.RestartPlayer(KFPC);
    if(KFPC.Pawn != none)
    {
        SpawnLocation = ((!IsZero(KFPC.PlayerZedSpawnInfo.PendingZedSpawnLocation)) ? KFPC.PlayerZedSpawnInfo.PendingZedSpawnLocation : GetSpawnLocation(class<KFPawn_Monster>(KFPC.Pawn.Class), SpawnVolume));
        KFPC.SetLocation(SpawnLocation);
        KFPC.Pawn.SetLocation(SpawnLocation);
        SpawnRotation = RotRand(false);
        SpawnRotation.Roll = 0;
        KFPC.SetRotation(SpawnRotation);
        SpawnRotation.Pitch = 0;
        KFPC.Pawn.SetRotation(SpawnRotation);
        KFPC.ServerCamera('ThirdPerson');
        KFPC.InitGameplayPostProcessFX();
        KFPC.ClientSetCameraFade(true, MakeColor(255, 255, 255, 255), vect2d(1, 0), 0.6, true);
        KFPC.PlayerZedSpawnInfo.PendingZedPawnClass = none;
        KFPC.PlayerZedSpawnInfo.PendingZedSpawnLocation = vect(0, 0, 0);
        KFPC.PlayerZedSpawnInfo.LastSpawnedTime = Outer.WorldInfo.TimeSeconds;
        return true;
    }
    return false;
}

protected function bool IsPlayerZedSpawnAllowed()
{
    return ((!Outer.MyKFGRIV.bTraderIsOpen && !Outer.MyKFGRIV.bMatchIsOver) && !Outer.MyKFGRIV.bRoundIsOver) && Outer.MyKFGRIV.WaveNum < Outer.MyKFGRIV.WaveMax;
}

protected function bool HaveZedPlayers()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < Outer.MyKFGRI.PRIArray.Length)
    {
        if(!Outer.MyKFGRI.PRIArray[I].bOnlySpectator && Outer.MyKFGRI.PRIArray[I].GetTeamNum() == 255)
        {
            return true;
        }
        ++ I;
        goto J0x0B;
    }
    return false;
}

protected function int GetNumWaitingZedPlayers()
{
    local KFPlayerControllerVersus KFPCV;
    local int NumWaiting;

    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
    {
        if((((KFPCV.PlayerZedSpawnInfo.PendingZedPawnClass == none) && KFPCV.GetTeamNum() == 255) && KFPCV.CanRestartPlayer()) && (KFPCV.Pawn == none) || !KFPCV.Pawn.IsAliveAndWell())
        {
            ++ NumWaiting;
        }        
    }    
    return NumWaiting;
}

protected function int GetNumActiveZedsOfClass(class<KFPawn_Monster> ZedClass)
{
    local KFPawn_Monster MonsterPawn;
    local int NumZeds;

    foreach Outer.WorldInfo.AllPawns(Class'KFPawn_Monster', MonsterPawn)
    {
        if(!MonsterPawn.IsAliveAndWell())
        {
            continue;            
        }
        if(ClassIsChildOf(MonsterPawn.Class, ZedClass))
        {
            ++ NumZeds;
        }        
    }    
    return NumZeds;
}

protected function bool CanSpawnPlayerBoss()
{
    local KFPlayerControllerVersus KFPCV;

    if(bBossSpawned)
    {
        return true;
    }
    foreach Outer.WorldInfo.AllControllers(Class'KFPlayerControllerVersus', KFPCV)
    {
        if(((KFPCV.GetTeamNum() == 255) && KFPCV.CanRestartPlayer()) && (KFPCV.Pawn == none) || !KFPCV.Pawn.IsAliveAndWell())
        {            
            return true;
        }        
    }    
    return false;
}

function ResetSpawnManager()
{
    bBossSpawned = false;
    ReservedPlayerZeds.Length = 0;
}

defaultproperties
{
    PlayerZedWaves(0)=KFAIWaveInfo'GP_Spawning_ARCH.Versus.PlayerZED_Wave1'
    PlayerZedWaves(1)=KFAIWaveInfo'GP_Spawning_ARCH.Versus.PlayerZED_Wave2'
    PlayerZedWaves(2)=KFAIWaveInfo'GP_Spawning_ARCH.Versus.PlayerZED_Wave3'
    PlayerZedWaves(3)=KFAIWaveInfo'GP_Spawning_ARCH.Versus.PlayerZED_Wave4'
    PlayerZedSpawnInterval(0)=20
    PlayerZedSpawnInterval(1)=27
    PlayerZedSpawnInterval(2)=30
    PlayerZedSpawnInterval(3)=35
    FirstWaveStartSpawnWaitTime=15
    LaterWaveStartSpawnWaitTime=10
    MaxPlayerSpecialSquadSpawns(0)=0
    MaxPlayerSpecialSquadSpawns(1)=0
    MaxPlayerSpecialSquadSpawns(2)=2
    MaxPlayerSpecialSquadSpawns(3)=2
    AdditionalSpecialSquadChancePerSpawn=0.1
    ReservedZedQueueLimit=5
    MaxActivePlayerScrakes=2
    MaxActivePlayerFleshpounds=2
    BossSpawnPlayerInterval=40
    FinalSurvivorBossSpawnPlayerInterval=20
    DifficultyWaveSettings=/* Array type was not detected. */
    SoloWaveSpawnRateModifier[0]=RateModifier=/* Array type was not detected. */,
/* Exception thrown while deserializing SoloWaveSpawnRateModifier
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    SoloWaveSpawnRateModifier[1]=RateModifier=/* Array type was not detected. */,
/* Exception thrown while deserializing SoloWaveSpawnRateModifier
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    SoloWaveSpawnRateModifier[2]=RateModifier=/* Array type was not detected. */,
/* Exception thrown while deserializing SoloWaveSpawnRateModifier
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    EarlyWaveSpawnRateModifier=2.1
    EarlyWaveIndex=2
    LateWavesSpawnTimeModByPlayers[0]=1.8
    LateWavesSpawnTimeModByPlayers[1]=1.7
    LateWavesSpawnTimeModByPlayers[2]=1.6
    LateWavesSpawnTimeModByPlayers[3]=1.5
    LateWavesSpawnTimeModByPlayers[4]=1.17
    LateWavesSpawnTimeModByPlayers[5]=1
    bRecycleSpecialSquad=true
    RecycleSpecialSquad=/* Array type was not detected. */
    MaxSpecialSquadRecycles=1
}