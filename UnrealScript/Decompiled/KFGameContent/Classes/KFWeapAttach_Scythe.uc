/*******************************************************************************
 * KFWeapAttach_Scythe generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_Scythe extends KFWeaponAttachment
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

const FoldAnim = 'Clean_NoBlood';

var const float UnfoldBlendingDuration;
var const float UnfoldedAnimRateModifier;
var AnimTree CustomAnimTree;
var AnimNodeBlendPerBone FoldBlendNode;
var transient bool bIsFolded;

event PreBeginPlay()
{
    super.PreBeginPlay();
    if(CustomAnimTree != none)
    {
        WeapMesh.SetAnimTreeTemplate(CustomAnimTree);
        WeapAnimNode = AnimNodeSequence(WeapMesh.FindAnimNode('WeaponSeq'));
        FoldBlendNode = AnimNodeBlendPerBone(WeapMesh.FindAnimNode('FoldBlendNode'));
        if((KFPawn(Owner) != none) && FoldBlendNode != none)
        {
            bIsFolded = KFPawn(Owner).WeaponSpecialAction == 0;
            FoldBlendNode.SetBlendTarget(((bIsFolded) ? 1 : 0), 0);
        }
    }
}

simulated function ChangeMode()
{
    bIsFolded = !bIsFolded;
    if(FoldBlendNode != none)
    {
        FoldBlendNode.SetBlendTarget(((bIsFolded) ? 1 : 0), 0);
    }
}

simulated function UpdateThirdPersonWeaponAction(KFGame.KFWeaponAttachment.EWeaponState NewWeaponState, KFPawn P, byte ThirdPersonAnimRateByte)
{
    super.UpdateThirdPersonWeaponAction(NewWeaponState, P, byte(ThirdPersonAnimRate));
    if(NewWeaponState == 27)
    {
        if(WeapAnimNode != none)
        {
            if(WeapAnimNode.AnimSeq == none)
            {
                WeapAnimNode.SetAnim('Clean_NoBlood');
            }
            WeapAnimNode.PlayAnim();
        }
    }
}

simulated function ANIMNOTIFY_ShellEject()
{
    ChangeMode();
}

simulated function float PlayCharacterMeshAnim(KFPawn P, name AnimName, optional bool bPlaySynchedWeaponAnim, optional bool bLooping)
{
    local float AnimRate, Duration;
    local KFGame.KFPawn.EAnimSlotStance Stance;
    local string AnimStr;

    if(P.IsDoingSpecialMove() && !P.SpecialMoves[P.SpecialMove].bAllowThirdPersonWeaponAnims)
    {
        return 0;
    }
    Stance = ((!P.bIsCrouched) ? 1 : 4);
    AnimRate = ThirdPersonAnimRate;
    AnimStr = Caps(string(AnimName));
    if(!bIsFolded && (InStr(AnimStr, "ATK") != -1) || InStr(string(AnimName), "COMB") != -1)
    {
        AnimRate *= UnfoldedAnimRateModifier;
    }
    Duration = P.PlayBodyAnim(AnimName, Stance, AnimRate, DefaultBlendInTime, DefaultBlendOutTime, bLooping);
    if((Duration > float(0)) && bPlaySynchedWeaponAnim)
    {
        PlayWeaponMeshAnim(AnimName, P.BodyStanceNodes[Stance], bLooping);
    }
    if(bDebug)
    {
        LogInternal((((((string(GetFuncName()) @ "called on:") $ string(P)) @ "Anim:") $ string(AnimName)) @ "Duration:") $ string(Duration));
    }
    return Duration;
}

function OnSpecialEvent(int Arg)
{
    bIsFolded = Arg == 0;
    if(FoldBlendNode != none)
    {
        FoldBlendNode.SetBlendTarget(((bIsFolded) ? 1 : 0), 0);
    }
}

defaultproperties
{
    UnfoldBlendingDuration=0.25
    UnfoldedAnimRateModifier=0.7
    CustomAnimTree=AnimTree'WEP_Scythe_ARCH.3P_Scythe_Animtree'
    bIsFolded=true
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_Scythe.SkeletalMeshComponent0.MeshSequenceA'
        bForceRefpose=0
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_Scythe.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}