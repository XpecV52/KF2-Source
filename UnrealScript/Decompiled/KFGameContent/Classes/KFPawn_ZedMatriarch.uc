/*******************************************************************************
 * KFPawn_ZedMatriarch generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedMatriarch extends KFPawn_MonsterBoss
    config(Game)
    hidecategories(Navigation);

const HEAD_ARMOR_IDX = 0;
const CLAW_ARMOR_IDX = 1;
const BATTLE_PHASE_SHIELD = 0;
const BATTLE_PHASE_ARMOR = 1;
const BATTLE_PHASE_FLESH = 2;
const BATTLE_PHASE_CLOAK = 3;

struct BattleDamageFXInfo
{
    var ParticleSystem Template;
    var array<name> Sockets;

    structdefaultproperties
    {
        Template=none
        Sockets=none
    }
};

struct BattleDamageInfo
{
    var array<BattleDamageFXInfo> FXInfo;
    var export editinline transient array<export editinline ParticleSystemComponent> FXComponents;

    structdefaultproperties
    {
        FXInfo=none
        FXComponents=none
    }
};

struct MatriarchBattlePhaseInfo
{
    var float NextPhaseHealthPctThreshold;
    var bool bCanUseSweepingClaw;
    var bool bCanUseTeslaBlast;
    var bool bCanUsePlasmaCannon;
    var bool bCanUseLightningStorm;
    var bool bCanUseWarningSiren;
    var bool bCanUseScorpionWhip;
    var int TentacleDamage;
    var float MeleeBaseDamage;
    var float MeleeDamageScale;
    var float GroundSpeedScale;
    var float SprintSpeedScale;
    var bool bCanCloak;
    var bool bUseAltSprintAnim;
    var bool bShouldTaunt;
    var array<IncapSettingsInfo> IncapSettings;
    var BattleDamageInfo DamageFX;

    structdefaultproperties
    {
        NextPhaseHealthPctThreshold=0
        bCanUseSweepingClaw=false
        bCanUseTeslaBlast=false
        bCanUsePlasmaCannon=false
        bCanUseLightningStorm=false
        bCanUseWarningSiren=false
        bCanUseScorpionWhip=false
        TentacleDamage=0
        MeleeBaseDamage=0
        MeleeDamageScale=0
        GroundSpeedScale=0
        SprintSpeedScale=0
        bCanCloak=false
        bUseAltSprintAnim=false
        bShouldTaunt=false
        IncapSettings=none
        DamageFX=(FXInfo=none,FXComponents=none)
    }
};

var array<MatriarchBattlePhaseInfo> BattlePhases;
var int TentacleDamage;
var class<KFDamageType> TentacleDamageType;
var bool bUseAltSprintAnim;
var bool bShouldTaunt;
var protected const bool bUseServerSideGunTracking;
var bool bGunTracking;
var repnotify bool bShieldUp;
var bool bShieldBroken;
var float TickDialogInterval;
var export editinline AkComponent BeamHitAC;
var name LightSocketFront;
var name LightSocketBack;
var export editinline transient PointLightComponent LightTemplate_Phase1;
var export editinline transient PointLightComponent LightTemplate_Phase2;
var export editinline transient PointLightComponent LightTemplate_Phase3;
var export editinline transient PointLightComponent LightTemplate_Phase4;
var export editinline transient PointLightComponent BattlePhaseLightFront;
var export editinline transient PointLightComponent BattlePhaseLightBack;
var LinearColor GlowColor_Phase1;
var LinearColor GlowColor_Phase2;
var LinearColor GlowColor_Phase3;
var LinearColor GlowColor_Phase4;
var SkelControlLookAt GunTrackingSkelCtrl;
var repnotify Pawn GunTarget;
var name GunTargetBoneName;
var Pawn BeamTarget;
var float ShieldHealth;
var float ShieldHealthMax;
var const array<float> ShieldHealthMaxDefaults;
var float ShieldHealthScale;
var float ShieldBreakPawnHealthPct;
var repnotify byte ShieldHealthPctByte;
var float LastShieldHealthPct;
var ParticleSystem InvulnerableShieldFX;
var export editinline ParticleSystemComponent InvulnerableShieldPSC;
var name ShieldSocketName;
var KFSkinTypeEffects ShieldImpactEffects;
var KFGameExplosion ShieldShatterExplosionTemplate;
var const Color ShieldColorGreen;
var const Color ShieldCoreColorGreen;
var const Color ShieldColorYellow;
var const Color ShieldCoreColorYellow;
var const Color ShieldColorOrange;
var const Color ShieldCoreColorOrange;
var const Color ShieldColorRed;
var const Color ShieldCoreColorRed;
var ParticleSystem CloakFX;
var name CloakFXSocketName;
var export editinline AkComponent CloakedAkComponent;
var AkEvent CloakedLoop;
var AkEvent CloakedLoopEnd;
var float CloakPercent;
var float CloakSpeed;
var float DeCloakSpeed;
var float CloakShimmerAmount;
var float LastCloakShimmerTime;
var float MinionSpawnDuration;
var class<KFDamageType> HeavyBumpDamageType;

replication
{
     if(bNetDirty)
        BeamTarget, GunTarget, 
        ShieldHealthPctByte, bShieldUp, 
        bUseAltSprintAnim;
}

simulated event ReplicatedEvent(name VarName)
{
    switch(VarName)
    {
        case 'ShieldHealthPctByte':
            UpdateShield();
            break;
        case 'bIsCloakingSpottedByTeam':
            UpdateGameplayMICParams();
            break;
        case 'bShieldUp':
            SetShieldUp(bShieldUp);
            break;
        case 'bIsCloaking':
            ClientCloakingStateUpdated();
            break;
        case 'GunTarget':
            SetGunTracking(GunTarget != none);
            break;
        case 'ArmorZoneStatus':
            super.ReplicatedEvent(VarName);
            OnArmorZoneStatusUpdated();
            break;
        default:
            super.ReplicatedEvent(VarName);
            break;
    }
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    AddDefaultInventory();
    if(Weapon != none)
    {
        Weapon.GotoState('Active');
    }
    if(WorldInfo.NetMode != NM_Client)
    {
        SetTimer(2, false, 'Timer_TickDialog');
    }
}

simulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)
{
    super(KFPawn_Monster).PostInitAnimTree(SkelComp);
    if((WorldInfo.NetMode != NM_DedicatedServer) || bUseServerSideGunTracking)
    {
        GunTrackingSkelCtrl = SkelControlLookAt(SkelComp.FindSkelControl('GunTracking'));
        GunTrackingSkelCtrl.SetSkelControlActive(false);
    }
}

function PossessedBy(Controller C, bool bVehicleTransition)
{
    super.PossessedBy(C, bVehicleTransition);
    InitializeCurrentBattlePhase();
}

event TakeDamage(int Damage, Controller InstigatedBy, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)
{
    local float HealthPct;

    super(KFPawn_Monster).TakeDamage(Damage, InstigatedBy, HitLocation, Momentum, DamageType, HitInfo, DamageCauser);
    HealthPct = float(Health) / float(HealthMax);
    if(HealthPct <= BattlePhases[CurrentBattlePhase].NextPhaseHealthPctThreshold)
    {
        IncrementBattlePhase();
    }
}

function AdjustDamage(out int InDamage, out Vector Momentum, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, TraceHitInfo HitInfo, Actor DamageCauser)
{
    if(bShieldUp && ShieldHealth > float(0))
    {
        ShieldHealth -= float(InDamage);
        if(ShieldHealth < float(0))
        {
            InDamage = int(Abs(ShieldHealth));
            ShieldHealth = 0;            
        }
        else
        {
            InDamage = 0;
        }
        ShieldHealthPctByte = FloatToByte(FClamp(ShieldHealth / ShieldHealthMax, 0, 1));
        UpdateShield();
    }
    super(KFPawn_Monster).AdjustDamage(InDamage, Momentum, InstigatedBy, HitLocation, DamageType, HitInfo, DamageCauser);
}

simulated event Tick(float DeltaTime)
{
    local int I;
    local float MinCloakPct;
    local KFCharacterInfo_Monster MonsterInfo;

    super(KFPawn_Monster).Tick(DeltaTime);
    UpdateGunTrackingSkelCtrl(DeltaTime);
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        MonsterInfo = GetCharacterMonsterInfo();
        if(CharacterMICs[0].Parent != MonsterInfo.SpottedSkins[0])
        {
            MinCloakPct = GetMinCloakPct();
            if(!bIsCloaking)
            {
                if(CloakPercent < 1)
                {
                    CloakPercent = FMin(CloakPercent + (DeltaTime * DeCloakSpeed), 1);
                    if(CloakPercent == 1)
                    {
                        UpdateGameplayMICParams();                        
                    }
                    else
                    {
                        I = 0;
                        J0x139:

                        if(I < CharacterMICs.Length)
                        {
                            CharacterMICs[I].SetScalarParameterValue('Transparency', CloakPercent);
                            ++ I;
                            goto J0x139;
                        }
                    }
                }                
            }
            else
            {
                if(CloakPercent > MinCloakPct)
                {
                    CloakPercent = FMax(CloakPercent - (DeltaTime * CloakSpeed), MinCloakPct);
                    I = 0;
                    J0x1F3:

                    if(I < CharacterMICs.Length)
                    {
                        CharacterMICs[I].SetScalarParameterValue('Transparency', CloakPercent);
                        ++ I;
                        goto J0x1F3;
                    }
                }
            }
        }
    }
}

protected simulated function float GetMinCloakPct()
{
    return 0;
}

simulated function SetShieldUp(bool bUp)
{
    if(bShieldBroken)
    {
        return;
    }
    if((Role == ROLE_Authority) && ShieldHealth > float(0))
    {
        bShieldUp = bUp;
        if(Role == ROLE_Authority)
        {
            if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
            {
                KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchShieldUpEvent(self);
            }
        }
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(bShieldUp)
        {
            ActivateShieldFX();            
        }
        else
        {
            InvulnerableShieldPSC.DeactivateSystem();
            InvulnerableShieldPSC = none;
        }
    }
}

function ActivateShield()
{
    local KFGameInfo KFGI;
    local float HealthMod, HeadHealthMod;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        HealthMod = 1;
        KFGI.DifficultyInfo.GetAIHealthModifier(self, float(KFGI.GetModifiedGameDifficulty()), byte(KFGI.GetLivingPlayerCount()), HealthMod, HeadHealthMod);
        ShieldHealth = (ShieldHealthMaxDefaults[KFGI.GetModifiedGameDifficulty()] * HealthMod) * ShieldHealthScale;
        if((KFGI.OutbreakEvent != none) && KFGI.OutbreakEvent.ActiveEvent.bBossRushMode)
        {
            ShieldHealth = ShieldHealth * ArmorInfo.ArmorScale;
        }
        ShieldHealthMax = ShieldHealth;
        ShieldHealthPctByte = FloatToByte(FClamp(ShieldHealth / ShieldHealthMax, 0, 1));
        UpdateShield();
    }
}

simulated function ActivateShieldFX()
{
    if(InvulnerableShieldPSC == none)
    {
        InvulnerableShieldPSC = WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(InvulnerableShieldFX, Mesh, ShieldSocketName, true);
        InvulnerableShieldPSC.SetAbsolute(false, true, true);
    }
}

simulated function UpdateShield()
{
    local float ShieldHealthPct;

    if(bShieldBroken)
    {
        return;
    }
    ShieldHealthPct = ByteToFloat(ShieldHealthPctByte);
    if(ShieldHealthPctByte == 0)
    {
        BreakShield();
    }
    if(WorldInfo.NetMode == NM_DedicatedServer)
    {
        return;
    }
    if((ShieldHealthPct > 0) && LastShieldHealthPct <= 0)
    {
        ActivateShieldFX();
    }
    if(InvulnerableShieldPSC != none)
    {
        if(ShieldHealthPct >= 0.75)
        {
            if(LastShieldHealthPct < 0.75)
            {
                InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorGreen));
                InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorGreen));
            }            
        }
        else
        {
            if(ShieldHealthPct >= 0.5)
            {
                if((LastShieldHealthPct >= 0.75) || LastShieldHealthPct < 0.5)
                {
                    InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorYellow));
                    InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorYellow));
                }                
            }
            else
            {
                if(ShieldHealthPct >= 0.25)
                {
                    if((LastShieldHealthPct >= 0.5) || LastShieldHealthPct < 0.25)
                    {
                        InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorOrange));
                        InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorOrange));
                    }                    
                }
                else
                {
                    if(LastShieldHealthPct >= 0.25)
                    {
                        InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorRed));
                        InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorRed));
                    }
                }
            }
        }
    }
    LastShieldHealthPct = ShieldHealthPct;
    UpdateShieldUI();
}

simulated function Vector MakeVectorFromColor(Color InColor)
{
    local LinearColor LinColor;
    local Vector ColorVec;

    LinColor = ColorToLinearColor(InColor);
    ColorVec.X = LinColor.R;
    ColorVec.Y = LinColor.G;
    ColorVec.Z = LinColor.B;
    return ColorVec;
}

simulated function BreakShield()
{
    local KFExplosionActor ExplosionActor;

    if(bShieldBroken)
    {
        return;
    }
    bShieldBroken = true;
    bShieldUp = false;
    ExplosionActor = Spawn(Class'KFExplosionActor', self,, Location, rotator(vect(0, 0, 1)));
    if(ExplosionActor != none)
    {
        ExplosionActor.Explode(ShieldShatterExplosionTemplate);
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        DetachShieldFX();
    }
    if(Role == ROLE_Authority)
    {
        SetBattlePhase(1);
    }
}

simulated function DetachShieldFX()
{
    LastShieldHealthPct = 0;
    DetachEmitter(InvulnerableShieldPSC);
    UpdateShieldUI();
}

simulated function UpdateShieldUI()
{
    if((KFPC != none) && KFPC.IsLocalController())
    {
        if((KFPC.myGfxHUD != none) && KFPC.myGfxHUD.bossHealthBar != none)
        {
            KFPC.myGfxHUD.bossHealthBar.UpdateBossShield(LastShieldHealthPct);
        }
    }
}

simulated function SetGunTracking(bool bEnableTracking)
{
    if((WorldInfo.NetMode != NM_DedicatedServer) || bUseServerSideGunTracking)
    {
        bGunTracking = bEnableTracking;
        GunTrackingSkelCtrl.SetSkelControlActive(bEnableTracking);
    }
    if(Role == ROLE_Authority)
    {
        if((bEnableTracking && Controller != none) && Controller.Enemy != none)
        {
            GunTarget = Controller.Enemy;            
        }
        else
        {
            GunTarget = none;
        }
    }
    bForceNetUpdate = true;
}

simulated function UpdateGunTrackingSkelCtrl(float DeltaTime)
{
    if(GunTrackingSkelCtrl != none)
    {
        if(bGunTracking && GunTarget != none)
        {
            GunTrackingSkelCtrl.DesiredTargetLocation = GunTarget.Mesh.GetBoneLocation(GunTargetBoneName);
            GunTrackingSkelCtrl.InterpolateTargetLocation(DeltaTime);            
        }
        else
        {
            GunTrackingSkelCtrl.SetSkelControlActive(false);
        }
    }
}

function bool CanUseSweepingClaw()
{
    return BattlePhases[CurrentBattlePhase].bCanUseSweepingClaw && CanDoSpecialMove(44);
}

function bool CanUseTeslaBlast()
{
    return (BattlePhases[CurrentBattlePhase].bCanUseTeslaBlast && CanDoSpecialMove(22)) && PowerClawIsFunctional();
}

function bool CanUsePlasmaCannon()
{
    return (BattlePhases[CurrentBattlePhase].bCanUsePlasmaCannon && CanDoSpecialMove(23)) && PowerClawIsFunctional();
}

function bool CanUseLightningStorm()
{
    return BattlePhases[CurrentBattlePhase].bCanUseLightningStorm && CanDoSpecialMove(45);
}

function bool CanUseWarningSiren()
{
    return BattlePhases[CurrentBattlePhase].bCanUseWarningSiren && CanDoSpecialMove(21);
}

function bool CanUseScorpionWhip()
{
    return !PowerClawIsFunctional() && CanDoSpecialMove(3);
}

function SetBattlePhase(int Phase)
{
    if((Phase > CurrentBattlePhase) && Phase < BattlePhases.Length)
    {
        CurrentBattlePhase = Phase;
        if(CurrentBattlePhase > 0)
        {
            ShieldHealthPctByte = 0;
            UpdateShield();
        }
        if(CurrentBattlePhase > 1)
        {
            ArmorInfo.ExplodeArmor(0);
            ArmorInfo.ExplodeArmor(1);
            ArmorInfo.UpdateArmorUI();
            OnArmorZoneStatusUpdated();
        }
        DoStumble();
        SummonMinions();
        InitializeCurrentBattlePhase();
        OnBattlePhaseChanged();
        bForceNetUpdate = true;
    }
}

function IncrementBattlePhase()
{
    SetBattlePhase(CurrentBattlePhase + 1);
}

function InitializeCurrentBattlePhase()
{
    local int I;

    TentacleDamage = BattlePhases[CurrentBattlePhase].TentacleDamage;
    MeleeAttackHelper.BaseDamage = MeleeAttackHelper.default.BaseDamage * BattlePhases[CurrentBattlePhase].MeleeDamageScale;
    InitialGroundSpeedModifier = BattlePhases[CurrentBattlePhase].GroundSpeedScale;
    bCanCloak = BattlePhases[CurrentBattlePhase].bCanCloak;
    bUseAltSprintAnim = BattlePhases[CurrentBattlePhase].bUseAltSprintAnim;
    bShouldTaunt = BattlePhases[CurrentBattlePhase].bShouldTaunt;
    IncapSettings = BattlePhases[CurrentBattlePhase].IncapSettings;
    I = 0;
    J0x196:

    if(I < 16)
    {
        if((I < AfflictionHandler.Afflictions.Length) && AfflictionHandler.Afflictions[I] != none)
        {
            AfflictionHandler.Afflictions[I].Init(self, byte(I), none);
        }
        ++ I;
        goto J0x196;
    }
    if(bCanCloak)
    {
        SetCloaked(true);
    }
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchBattlePhaseDialog(self, CurrentBattlePhase);
    }
    bNetDirty = true;
}

function SummonMinions()
{
    local KFAIWaveInfo MinionWave;
    local KFGameInfo MyKFGameInfo;
    local KFAIController_ZedBoss MyBossAIController;

    MyKFGameInfo = KFGameInfo(WorldInfo.Game);
    MyKFGameInfo.GetAIDirector().bForceFrustration = true;
    MinionWave = GetWaveInfo(CurrentBattlePhase, MyKFGameInfo.GetModifiedGameDifficulty());
    if(MinionWave != none)
    {
        if(MyKFGameInfo.SpawnManager != none)
        {
            MyKFGameInfo.SpawnManager.LeftoverSpawnSquad.Length = 0;
            MyKFGameInfo.SpawnManager.SummonBossMinions(MinionWave.Squads, GetNumMinionsToSpawn());
        }
    }
    MyBossAIController = KFAIController_ZedBoss(Controller);
    if(MyBossAIController != none)
    {
        MyBossAIController.SetTimer(MinionSpawnDuration, false, 'Timer_StopSummoningZeds');
    }
}

simulated function OnBattlePhaseChanged()
{
    if((WorldInfo.NetMode == NM_DedicatedServer) || Health <= 0)
    {
        return;
    }
    super.OnBattlePhaseChanged();
    UpdateBattlePhaseLights();
    UpdateBattlePhaseMaterials();
    UpdateBattlePhaseParticles();
}

simulated function UpdateBattlePhaseLights()
{
    local editinline PointLightComponent LightTemplate;

    if(BattlePhaseLightFront != none)
    {
        BattlePhaseLightFront.DetachFromAny();
        BattlePhaseLightFront = none;
    }
    if(BattlePhaseLightBack != none)
    {
        BattlePhaseLightBack.DetachFromAny();
        BattlePhaseLightBack = none;
    }
    switch(CurrentBattlePhase)
    {
        case 0:
            LightTemplate = LightTemplate_Phase1;
            break;
        case 1:
            LightTemplate = LightTemplate_Phase2;
            break;
        case 2:
            LightTemplate = LightTemplate_Phase3;
            break;
        case 3:
            if(IsAliveAndWell())
            {
                LightTemplate = LightTemplate_Phase4;
            }
            break;
        default:
            break;
    }
    if(LightTemplate != none)
    {
        BattlePhaseLightFront = new (self) Class'PointLightComponent' (LightTemplate);
        BattlePhaseLightBack = new (self) Class'PointLightComponent' (LightTemplate);
    }
    if(BattlePhaseLightFront != none)
    {
        Mesh.AttachComponentToSocket(BattlePhaseLightFront, LightSocketFront);
        BattlePhaseLightFront.SetEnabled(true);
    }
    if(BattlePhaseLightBack != none)
    {
        Mesh.AttachComponentToSocket(BattlePhaseLightBack, LightSocketBack);
        BattlePhaseLightBack.SetEnabled(true);
    }
}

simulated function UpdateBattlePhaseMaterials()
{
    local MaterialInstanceConstant MIC;

    foreach CharacterMICs(MIC,)
    {
        switch(CurrentBattlePhase)
        {
            case 1:
                MIC.SetScalarParameterValue('Scalar_BattleGrime', 0);
                MIC.SetScalarParameterValue('Scalar_Damage_Blood_Contrast', 1);
                MIC.SetScalarParameterValue('Scalar_GlowFlashing', 0);
                MIC.SetVectorParameterValue('Vector_GlowColor', GlowColor_Phase1);
                break;
            case 2:
                MIC.SetScalarParameterValue('Scalar_BattleGrime', 0.25);
                MIC.SetScalarParameterValue('Scalar_Damage_Blood_Contrast', 1.48);
                MIC.SetScalarParameterValue('Scalar_GlowFlashing', 0);
                MIC.SetVectorParameterValue('Vector_GlowColor', GlowColor_Phase2);
                break;
            case 3:
                MIC.SetScalarParameterValue('Scalar_BattleGrime', 0.25);
                MIC.SetScalarParameterValue('Scalar_Damage_Blood_Contrast', 1.49);
                MIC.SetScalarParameterValue('Scalar_GlowFlashing', 0);
                MIC.SetVectorParameterValue('Vector_GlowColor', GlowColor_Phase3);
                break;
            case 4:
                MIC.SetScalarParameterValue('Scalar_BattleGrime', 0.5);
                MIC.SetScalarParameterValue('Scalar_Damage_Blood_Contrast', 1.6);
                MIC.SetScalarParameterValue('Scalar_GlowFlashing', ((IsAliveAndWell()) ? 1 : 0));
                MIC.SetVectorParameterValue('Vector_GlowColor', GlowColor_Phase4);
                break;
            default:
                break;
        }        
    }    
}

simulated function UpdateBattlePhaseParticles()
{
    local int I, J;
    local ParticleSystem PS;
    local name Socket;
    local editinline ParticleSystemComponent PSC;

    if(CurrentBattlePhase > 0)
    {
        I = 0;
        J0x1A:

        if(I < BattlePhases[CurrentBattlePhase - 1].DamageFX.FXComponents.Length)
        {
            BattlePhases[CurrentBattlePhase - 1].DamageFX.FXComponents[I].DeactivateSystem();
            ++ I;
            goto J0x1A;
        }
        BattlePhases[CurrentBattlePhase - 1].DamageFX.FXComponents.Length = 0;
    }
    I = 0;
    J0x119:

    if(I < BattlePhases[CurrentBattlePhase].DamageFX.FXInfo.Length)
    {
        PS = BattlePhases[CurrentBattlePhase].DamageFX.FXInfo[I].Template;
        J = 0;
        J0x1CC:

        if(J < BattlePhases[CurrentBattlePhase].DamageFX.FXInfo[I].Sockets.Length)
        {
            Socket = BattlePhases[CurrentBattlePhase].DamageFX.FXInfo[I].Sockets[J];
            PSC = WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(PS, Mesh, Socket, true);
            BattlePhases[CurrentBattlePhase].DamageFX.FXComponents.AddItem(PSC;
            ++ J;
            goto J0x1CC;
        }
        ++ I;
        goto J0x119;
    }
}

simulated function DoStumble()
{
    if(IsIncapacitated())
    {
        return;
    }
    if(IsDoingSpecialMove())
    {
        EndSpecialMove();
    }
    DoSpecialMove(4,,, Class'KFSM_Stumble'.static.PackBodyHitSMFlags(self, -vector(Rotation)));
}

function SetCloaked(bool bNewCloaking)
{
    if(bCanCloak && bNewCloaking != bIsCloaking)
    {
        if(bNewCloaking && (IsImpaired()) || IsIncapacitated())
        {
            return;
        }
        if(((MaxHeadChunkGoreWhileAlive == 0) && bIsCloaking != bNewCloaking) && IsAliveAndWell())
        {
            if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
            {
                KFGameInfo(WorldInfo.Game).DialogManager.PlaySpotCloakDialog(self, bNewCloaking);
            }
        }
        bIsCloaking = bNewCloaking;
        if(bIsCloaking)
        {
            bIsCloakingSpottedByLP = false;
            bIsCloakingSpottedByTeam = false;
            LastSpottedStatusUpdate = WorldInfo.TimeSeconds - 0.2;
        }
        if(WorldInfo.NetMode != NM_DedicatedServer)
        {
            UpdateGameplayMICParams();
            HideBattleDamageFX(bIsCloaking);
        }
        super(KFPawn_Monster).SetCloaked(bNewCloaking);
        if((Role == ROLE_Authority) && bIsCloaking)
        {
            if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
            {
                KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchCloakedEvent(self);
            }
        }
    }
}

simulated function HideBattleDamageFX(bool bHide)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < BattlePhases[CurrentBattlePhase].DamageFX.FXComponents.Length)
    {
        BattlePhases[CurrentBattlePhase].DamageFX.FXComponents[I].SetHidden(bHide);
        ++ I;
        goto J0x0B;
    }
}

simulated function ClientCloakingStateUpdated()
{
    if(bIsCloaking)
    {
        ClearBloodDecals();
        bIsCloakingSpottedByLP = false;
        bIsCloakingSpottedByTeam = false;
        LastSpottedStatusUpdate = WorldInfo.TimeSeconds - 0.2;
    }
    UpdateGameplayMICParams();
    HideBattleDamageFX(bIsCloaking);
}

simulated event UpdateSpottedStatus()
{
    local bool bOldSpottedByLP;
    local KFPlayerController LocalPC;
    local KFPerk LocalPerk;
    local float DistanceSq, Range;

    if(WorldInfo.NetMode == NM_DedicatedServer)
    {
        return;
    }
    bOldSpottedByLP = bIsCloakingSpottedByLP;
    bIsCloakingSpottedByLP = false;
    LocalPC = KFPlayerController(GetALocalPlayerController());
    if(LocalPC != none)
    {
        LocalPerk = LocalPC.GetPerk();
    }
    if((((((LocalPC != none) && LocalPC.Pawn != none) && LocalPC.Pawn.IsAliveAndWell()) && LocalPerk != none) && LocalPerk.bCanSeeCloakedZeds) && (WorldInfo.TimeSeconds - LastRenderTime) < 1)
    {
        DistanceSq = VSizeSq(LocalPC.Pawn.Location - Location);
        Range = LocalPerk.GetCloakDetectionRange();
        if(DistanceSq < Square(Range))
        {
            bIsCloakingSpottedByLP = true;
            if(LocalPerk.IsCallOutActive())
            {
                LocalPC.ServerCallOutPawnCloaking(self);
            }
        }
    }
    if(!bIsCloakingSpottedByTeam)
    {
        if(bIsCloakingSpottedByLP != bOldSpottedByLP)
        {
            UpdateGameplayMICParams();
        }
    }
}

function CallOutCloaking(optional KFPlayerController CallOutController)
{
    bIsCloakingSpottedByTeam = true;
    UpdateGameplayMICParams();
    SetTimer(2, false, 'CallOutCloakingExpired');
}

function CallOutCloakingExpired()
{
    bIsCloakingSpottedByTeam = false;
    UpdateGameplayMICParams();
}

simulated function UpdateGameplayMICParams()
{
    local int I;
    local bool bIsSpotted, bWasCloaked;
    local KFCharacterInfo_Monster MonsterInfo;

    super(KFPawn_Monster).UpdateGameplayMICParams();
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        MonsterInfo = GetCharacterMonsterInfo();
        bIsSpotted = bIsCloakingSpottedByLP || bIsCloakingSpottedByTeam;
        if((!bIsCloaking || IsImpaired()) && CharacterMICs[0].Parent != MonsterInfo.Skins[0])
        {
            I = 0;
            J0xDB:

            if(I < MonsterInfo.Skins.Length)
            {
                bWasCloaked = (bWasCloaked || CharacterMICs[I].Parent == MonsterInfo.CloakedSkins[I]) || CharacterMICs[I].Parent == MonsterInfo.SpottedSkins[I];
                CharacterMICs[I].SetParent(MonsterInfo.Skins[I]);
                ++ I;
                goto J0xDB;
            }
            Mesh.CastShadow = true;
            Mesh.SetPerObjectShadows(true);
            if(bWasCloaked)
            {
                PlayStealthSoundLoopEnd();
                DoCloakFX();
            }
            I = 0;
            J0x297:

            if(I < 3)
            {
                if(ThirdPersonAttachments[I] != none)
                {
                    ThirdPersonAttachments[I].SetHidden(false);
                }
                ++ I;
                goto J0x297;
            }            
        }
        else
        {
            if((bIsCloaking && bIsSpotted) && CharacterMICs[0].Parent != MonsterInfo.SpottedSkins[0])
            {
                I = 0;
                J0x369:

                if(I < MonsterInfo.SpottedSkins.Length)
                {
                    CharacterMICs[I].SetParent(MonsterInfo.SpottedSkins[I]);
                    ++ I;
                    goto J0x369;
                }
                CloakPercent = 1;
                Mesh.CastShadow = false;
                Mesh.SetPerObjectShadows(false);
                I = 0;
                J0x450:

                if(I < 3)
                {
                    if(ThirdPersonAttachments[I] != none)
                    {
                        ThirdPersonAttachments[I].SetHidden(true);
                    }
                    ++ I;
                    goto J0x450;
                }                
            }
            else
            {
                if((bIsCloaking && !bIsSpotted) && CharacterMICs[0].Parent != MonsterInfo.CloakedSkins[0])
                {
                    I = 0;
                    J0x524:

                    if(I < MonsterInfo.CloakedSkins.Length)
                    {
                        CharacterMICs[I].SetParent(MonsterInfo.CloakedSkins[I]);
                        ++ I;
                        goto J0x524;
                    }
                    PlayStealthSoundLoop();
                    DoCloakFX();
                    Mesh.CastShadow = false;
                    Mesh.SetPerObjectShadows(false);
                    I = 0;
                    J0x610:

                    if(I < 3)
                    {
                        if(ThirdPersonAttachments[I] != none)
                        {
                            ThirdPersonAttachments[I].SetHidden(true);
                        }
                        ++ I;
                        goto J0x610;
                    }
                }
            }
        }
    }
}

simulated function DoCloakFX()
{
    local editinline ParticleSystemComponent CloakPSC;

    CloakPSC = WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(CloakFX, Mesh, CloakFXSocketName, true);
    CloakPSC.SetAbsolute(false, true, false);
}

simulated function PlayStealthSoundLoop()
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && !CloakedAkComponent.IsPlaying(CloakedLoop))
    {
        CloakedAkComponent.PlayEvent(CloakedLoop, true, true);
    }
}

simulated function PlayStealthSoundLoopEnd()
{
    if((WorldInfo.NetMode != NM_DedicatedServer) && CloakedAkComponent.IsPlaying(CloakedLoop))
    {
        CloakedAkComponent.PlayEvent(CloakedLoopEnd, true, true);
    }
}

simulated function PlayDying(class<DamageType> DamageType, Vector HitLoc)
{
    SetCloaked(false);
    bCanCloak = false;
    super(KFPawn_Monster).PlayDying(DamageType, HitLoc);
}

function int GetKillerDialogID()
{
    return 67;
}

function int GetSpotterDialogID()
{
    if(bIsCloaking && MaxHeadChunkGoreWhileAlive == 0)
    {
        return 135;
    }
    return 125;
}

function Timer_TickDialog()
{
    if(!IsAliveAndWell())
    {
        return;
    }
    if(!IsDoingSpecialMove())
    {
        if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
        {
            KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchTickDialog(self, ArmorZoneStatus, CurrentBattlePhase);
        }
    }
    SetTimer(TickDialogInterval, false, 'Timer_TickDialog');
}

function PlayPlasmaCannonDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchPlasmaCannonEvent(self);
    }
}

function PlaySweepingClawDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchSweepingClawEvent(self);
    }
}

function PlayTeslaBlastDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchTeslaBlastEvent(self);
    }
}

function PlayLightningStormDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchLightningStormEvent(self);
    }
}

function PlayScorpionWhipDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchScorpionWhipEvent(self);
    }
}

function PlayWarningSirenDialog()
{
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchWarningSirenEvent(self);
    }
}

function ZedExplodeArmor(int ArmorZoneIdx, name ArmorZoneName)
{
    super(KFPawn_Monster).ZedExplodeArmor(ArmorZoneIdx, ArmorZoneName);
    OnArmorZoneStatusUpdated();
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlayMatriarchExplodeArmorDialog(self, ArmorZoneName);
    }
    if(Role == ROLE_Authority)
    {
        if(ArmorZoneStatus == 0)
        {
            SetBattlePhase(2);            
        }
        else
        {
            DoStumble();
        }
    }
}

function bool PowerClawIsFunctional()
{
    return bool(ArmorZoneStatus & (1 << 1));
}

simulated function OnArmorZoneStatusUpdated()
{
    local int Idx;

    if((ArmorZoneStatus & (1 << 0)) == 0)
    {
        Idx = HitZones.Find('BoneName', 'dome';
        if(Idx != -1)
        {
            HitZones.Remove(Idx, 1;
        }
    }
    if((ArmorZoneStatus & (1 << 1)) == 0)
    {
        Idx = HitZones.Find('BoneName', 'LeftHandCap';
        if(Idx != -1)
        {
            HitZones.Remove(Idx, 1;
        }
    }
    DialogAkComponent.SetRTPCValue("Matriarch_Helmet", float(int(bool(ArmorZoneStatus & (1 << 0)))));
}

simulated function ApplyHeadChunkGore(class<KFDamageType> dmgType, Vector HitLocation, Vector HitDirection)
{
    return;
}

function int GetHitZoneIndex(name BoneName)
{
    if(BoneName == 'KBArmor')
    {
        return OverrideArmorFXIndex;
    }
    return super(KFPawn).GetHitZoneIndex(BoneName);
}

simulated function KFSkinTypeEffects GetHitZoneSkinTypeEffects(int HitZoneIdx)
{
    if(bShieldUp)
    {
        return ShieldImpactEffects;        
    }
    else
    {
        if(bIsCloaking)
        {
            return CharacterArch.ImpactSkins[4];            
        }
        else
        {
            if(HitZoneIdx == OverrideArmorFXIndex)
            {
                return CharacterArch.ImpactSkins[5];                
            }
            else
            {
                return super(KFPawn).GetHitZoneSkinTypeEffects(HitZoneIdx);
            }
        }
    }
}

function AdjustMovementSpeed(float SpeedAdjust)
{
    DesiredAdjustedGroundSpeed = (default.GroundSpeed * SpeedAdjust) * BattlePhases[CurrentBattlePhase].GroundSpeedScale;
    DesiredAdjustedSprintSpeed = (default.SprintSpeed * SpeedAdjust) * BattlePhases[CurrentBattlePhase].SprintSpeedScale;
    DesiredAdjustedSprintSpeed *= ((IsDoingSpecialMove()) ? SpecialMoves[SpecialMove].GetSprintSpeedModifier() : 1);
    DesiredAdjustedSprintSpeed = FMax(DesiredAdjustedSprintSpeed, DesiredAdjustedGroundSpeed);
    if(bPlayPanicked)
    {
        DesiredAdjustedGroundSpeed = float(Min(int(DesiredAdjustedGroundSpeed), int(MovementAnimNode.Constraints[1])));
    }
    NormalGroundSpeed = DesiredAdjustedGroundSpeed;
    NormalSprintSpeed = DesiredAdjustedSprintSpeed;
}

function class<KFDamageType> GetBumpAttackDamageType()
{
    return HeavyBumpDamageType;
}

function PlayBossMusic()
{
    if(KFGameInfo(WorldInfo.Game) != none)
    {
        KFGameInfo(WorldInfo.Game).ForceMatriarchMusicTrack();
    }
}

defaultproperties
{
    BattlePhases(0)=NextPhaseHealthPctThreshold=0.75,bCanUseSweepingClaw=true,bCanUseTeslaBlast=true,bCanUsePlasmaCannon=true,bCanUseLightningStorm=true,bCanUseWarningSiren=false,bCanUseScorpionWhip=false,TentacleDamage=0,MeleeBaseDamage=0,MeleeDamageScale=1,GroundSpeedScale=1,SprintSpeedScale=1,bCanCloak=false,bUseAltSprintAnim=false,bShouldTaunt=false,IncapSettings=(Duration=2.5,Cooldown=10,ChildAfflictionCooldown=0,Vulnerability=/* Array type was not detected. */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '0_4778' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '0_1067030937' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,Cooldown=15,ChildAfflictionCooldown=0,Vulnerability=/* Array type was not detected. */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '0_4260' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '0_3' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value 'Cooldown' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '__Delegate_OnHealDamage__Delegate' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '0_3' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value 'Vulnerability' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '__Delegate_OnPawnStartedRoute__Delegate' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */,3P_Sawblade_Animtree=/* Unknown default property type! */,
/* Exception thrown while deserializing IncapSettings
System.ArgumentException: Requested value '__Delegate_OnHealDamage__Delegate' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */),
/* Exception thrown while deserializing BattlePhases
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    BattlePhases(1)=
/* Exception thrown while deserializing BattlePhases
System.ArgumentException: Requested value '0_3' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    BattlePhases(2)=
/* Exception thrown while deserializing BattlePhases
System.ArgumentException: Requested value 'ChildAfflictionCooldown' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    BattlePhases(3)=
/* Exception thrown while deserializing BattlePhases
System.ArgumentException: Requested value '__Delegate_OnHealDamage__Delegate' was not found.
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    TentacleDamageType=Class'KFDT_Slashing_MatriarchTentacle'
    bUseServerSideGunTracking=true
    bShieldUp=true
    TickDialogInterval=0.5
    begin object name=BeamHitAC0 class=AkComponent
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPawn_ZedMatriarch.BeamHitAC0'
    BeamHitAC=BeamHitAC0
    LightSocketFront=FX_Armor_Chest
    LightSocketBack=FX_Armor_Back
    begin object name=PointLightComponent0 class=PointLightComponent
        Radius=128
        LightColor=(B=173,G=222,R=168,A=255)
        CastShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedMatriarch.PointLightComponent0'
    LightTemplate_Phase1=PointLightComponent0
    begin object name=PointLightComponent1 class=PointLightComponent
        Radius=128
        LightColor=(B=161,G=215,R=231,A=255)
        CastShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedMatriarch.PointLightComponent1'
    LightTemplate_Phase2=PointLightComponent1
    begin object name=PointLightComponent2 class=PointLightComponent
        Radius=128
        LightColor=(B=0,G=144,R=231,A=255)
        CastShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedMatriarch.PointLightComponent2'
    LightTemplate_Phase3=PointLightComponent2
    begin object name=PointLightComponent3 class=PointLightComponent
        Radius=128
        Brightness=2
        LightColor=(B=64,G=64,R=255,A=255)
        CastShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
        MaxBrightness=2
        MinBrightness=1
        AnimationType=1
        AnimationFrequency=5
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedMatriarch.PointLightComponent3'
    LightTemplate_Phase4=PointLightComponent3
    GlowColor_Phase1=(R=0.1,G=1,B=0,A=1)
    GlowColor_Phase2=(R=1,G=0.5,B=0,A=1)
    GlowColor_Phase3=(R=1,G=0.1,B=0,A=1)
    GlowColor_Phase4=(R=2,G=0,B=0,A=1)
    GunTargetBoneName=Spine2
    ShieldHealthMaxDefaults(0)=2000
    ShieldHealthMaxDefaults(1)=3000
    ShieldHealthMaxDefaults(2)=4500
    ShieldHealthMaxDefaults(3)=5600
    ShieldHealthScale=1
    ShieldBreakPawnHealthPct=0.75
    InvulnerableShieldFX=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield'
    ShieldSocketName=Root
    begin object name=ShieldEffects class=KFSkinTypeEffects_InvulnerabilityShield
        ImpactFXArray[0]=(DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[1]=(Type=EEffectDamageGroup.FXG_Bludgeon,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[2]=(Type=EEffectDamageGroup.FXG_Piercing,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[3]=(Type=EEffectDamageGroup.FXG_Slashing,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[4]=(Type=EEffectDamageGroup.FXG_Fire,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[5]=(Type=EEffectDamageGroup.FXG_Toxic,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[6]=(Type=EEffectDamageGroup.FXG_Healing,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[7]=(Type=EEffectDamageGroup.FXG_Sawblade,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[8]=(Type=EEffectDamageGroup.FXG_DrainLife,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[9]=(Type=EEffectDamageGroup.FXG_IncendiaryRound,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[10]=(Type=EEffectDamageGroup.FXG_UnexplodedGrenade,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[11]=(Type=EEffectDamageGroup.FXG_MicrowaveBlast,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[12]=(Type=EEffectDamageGroup.FXG_ShieldBash,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[13]=(Type=EEffectDamageGroup.FXG_MetalMace,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[14]=(Type=EEffectDamageGroup.FXG_Flare,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[15]=(Type=EEffectDamageGroup.FXG_Freeze,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[16]=(Type=EEffectDamageGroup.FXG_Bludgeon_Chains,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[17]=(Type=EEffectDamageGroup.FXG_MicrowaveProj,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[18]=(Type=EEffectDamageGroup.FXG_Electricity,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[19]=(Type=EEffectDamageGroup.FXG_Slashing_Ion,DefaultParticle=ParticleSystem'ZED_Matriarch_EMIT.FX_Matriarch_Shield_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[20]=(Type=EEffectDamageGroup.FXG_Energy_Yellow)
        ImpactFXArray[21]=(Type=EEffectDamageGroup.FXG_Energy_Magenta)
    object end
    // Reference: KFSkinTypeEffects_InvulnerabilityShield'Default__KFPawn_ZedMatriarch.ShieldEffects'
    ShieldImpactEffects=ShieldEffects
    begin object name=ShatterExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'ZED_Matriarch_ARCH.Matriarch_Shield_Explosion_Arch'
        Damage=0
        KnockDownStrength=0
        ExplosionSound=AkEvent'WW_ZED_Matriarch.Play_Matriarch_SFX_Shield_Break'
        FractureMeshRadius=500
        CamShake=KFCameraShake'FX_CameraShake_Arch.Grenades.Default_Grenade'
        CamShakeFalloff=0.5
    object end
    // Reference: KFGameExplosion'Default__KFPawn_ZedMatriarch.ShatterExploTemplate0'
    ShieldShatterExplosionTemplate=ShatterExploTemplate0
    ShieldColorGreen=(B=50,G=255,R=50,A=0)
    ShieldCoreColorGreen=(B=0,G=255,R=0,A=0)
    ShieldColorYellow=(B=20,G=255,R=255,A=0)
    ShieldCoreColorYellow=(B=0,G=255,R=255,A=0)
    ShieldColorOrange=(B=10,G=110,R=255,A=0)
    ShieldCoreColorOrange=(B=0,G=105,R=255,A=0)
    ShieldColorRed=(B=20,G=20,R=255,A=0)
    ShieldCoreColorRed=(B=10,G=10,R=255,A=0)
    begin object name=CloakedAkComponent0 class=AkComponent
        BoneName=Dummy
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.2
    object end
    // Reference: AkComponent'Default__KFPawn_ZedMatriarch.CloakedAkComponent0'
    CloakedAkComponent=CloakedAkComponent0
    CloakedLoop=AkEvent'WW_ZED_Matriarch.Play_Matriarch_SFX_Cloak'
    CloakedLoopEnd=AkEvent'WW_ZED_Matriarch.Stop_Matriarch_SFX_Cloak'
    CloakPercent=1
    CloakSpeed=3
    DeCloakSpeed=4.5
    CloakShimmerAmount=0.6
    MinionSpawnDuration=30
    HeavyBumpDamageType=Class'KFDT_HeavyZedBump'
    SummonWaves[0]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Normal_One',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Normal_Two',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Normal_Three')
    SummonWaves[1]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Hard_One',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Hard_Two',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Hard_Three')
    SummonWaves[2]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Suicidal_One',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Suicidal_Two',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_Suicidal_Three')
    SummonWaves[3]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_HOE_One',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_HOE_Two',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Matriarch.Mat_Minions_HOE_Three')
    NumMinionsToSpawn=(X=3,Y=5)
    BossCaptionStrings=/* Array type was not detected. */
    bCloakOnMeleeEnd=true
    MonsterArchPath="ZED_ARCH.ZED_Matriarch_Archetype"
    ParryResistance=4
    RepArmorPct[0]=255
    RepArmorPct[1]=255
    ArmorZoneStatus=3
    PreviousArmorZoneStatus=3
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=55
        MyDamageType=Class'KFDT_Bludgeon_Matriarch'
        MomentumTransfer=40000
        MaxHitRange=375
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedMatriarch.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DoshValue=500
    XPValues[0]=1291
    XPValues[1]=1694
    XPValues[2]=1790
    XPValues[3]=1843
    WeakSpotSocketNames=/* Array type was not detected. */
    ZEDCowboyHatAttachName=Hat_Attach
    DamageTypeModifiers=/* Array type was not detected. */
    DifficultySettings=Class'KFDifficulty_Matriarch'
    BumpDamageType=Class'KFGame.KFDT_NPCBump_Large'
    SprintAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.SprintAkComponent0'
    HeadShotAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.HeadshotAkComponent0'
    OnDeathAchievementID=267
    ArmorInfoClass=Class'KFZedArmorInfo_Matriarch'
    OverrideArmorFXIndex=200
    PawnAnimInfo=KFPawnAnimInfo'ZED_Matriarch_ANIM.Matriarch_AnimGroup'
    LocalizationKey=KFPawn_ZedMatriarch
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedMatriarch.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    bEnableAimOffset=true
    bCanCloak=true
    HitZones=/* Array type was not detected. */
    PenetrationResistance=4
    AfflictionHandler=KFAfflictionManager'Default__KFPawn_ZedMatriarch.Afflictions'
    KnockdownImpulseScale=1
    SprintSpeed=650
    DefaultInventory=/* Array type was not detected. */
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedMatriarch.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses=/* Array type was not detected. */
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_ZedMatriarch.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedMatriarch.WeaponAmbientEchoHandler'
    SecondaryWeaponAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.SecondaryWeaponAkSoundComponent'
    FootstepAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.DialogAkSoundComponent'
    PowerUpAkComponent=AkComponent'Default__KFPawn_ZedMatriarch.PowerUpAkSoundComponent'
    DamageRecoveryTimeHeavy=0.65
    DamageRecoveryTimeMedium=0.85
    Mass=200
    GroundSpeed=300
    Health=7000
    ControllerClass=Class'KFAIController_ZedMatriarch'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bIgnoreControllersWhenNotRendered=false
        ReplacementPrimitive=none
        BlockNonZeroExtent=true
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedMatriarch.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionRadius=55
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedMatriarch.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedMatriarch.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionRadius=55
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedMatriarch.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedMatriarch.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bIgnoreControllersWhenNotRendered=false
        ReplacementPrimitive=none
        BlockNonZeroExtent=true
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedMatriarch.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedMatriarch.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedMatriarch.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedMatriarch.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedMatriarch.DialogAkSoundComponent'
    Components(8)=AkComponent'Default__KFPawn_ZedMatriarch.PowerUpAkSoundComponent'
    Components(9)=AkComponent'Default__KFPawn_ZedMatriarch.SecondaryWeaponAkSoundComponent'
    Components(10)=AkComponent'Default__KFPawn_ZedMatriarch.SprintAkComponent0'
    Components(11)=AkComponent'Default__KFPawn_ZedMatriarch.HeadshotAkComponent0'
    begin object name=CloakedAkComponent0 class=AkComponent
        BoneName=Dummy
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.2
    object end
    // Reference: AkComponent'Default__KFPawn_ZedMatriarch.CloakedAkComponent0'
    Components(12)=CloakedAkComponent0
    begin object name=BeamHitAC0 class=AkComponent
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPawn_ZedMatriarch.BeamHitAC0'
    Components(13)=BeamHitAC0
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionRadius=55
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedMatriarch.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    RotationRate=(Pitch=50000,Yaw=50000,Roll=50000)
}