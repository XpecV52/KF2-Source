/*******************************************************************************
 * KFWeap_Thrown_C4 generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Thrown_C4 extends KFWeap_ThrownBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

const DETONATE_FIREMODE = 5;

/** NEW - IronSights Key */
var(Animations) const editconst name DetonateAnim;
var(Animations) const editconst name DetonateLastAnim;
var array<KFProj_Thrown_C4> DeployedCharges;
var class<KFGFxWorld_C4Screen> ScreenUIClass;
var KFGFxWorld_C4Screen ScreenUI;
var float TimeSinceLastUpdate;
var float UpdateInterval;
var() AkEvent DetonateAkEvent;
/** Sound to play upon attempted but unsuccessful detonation */
var() AkEvent DryFireAkEvent;
var int NumDeployedCharges;

replication
{
     if(bNetDirty)
        NumDeployedCharges;
}

simulated function SetIronSights(bool bNewIronSights)
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    if(bNewIronSights)
    {
        StartFire(5);        
    }
    else
    {
        StopFire(5);
    }
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super(KFWeapon).AttachWeaponTo(MeshCpnt, SocketName);
    if((Instigator != none) && Instigator.IsLocallyControlled())
    {
        if(ScreenUI == none)
        {
            ScreenUI = new (self) ScreenUIClass;
            ScreenUI.Init();
            ScreenUI.Start(true);
        }
        if(ScreenUI != none)
        {
            ScreenUI.SetPause(false);
        }
    }
}

simulated function DetachWeapon()
{
    super(KFWeapon).DetachWeapon();
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && ScreenUI != none)
    {
        ScreenUI.SetPause();
    }
}

simulated event Destroyed()
{
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && ScreenUI != none)
    {
        ScreenUI.Close();
    }
    super(Weapon).Destroyed();
}

simulated event Tick(float DeltaTime)
{
    super(KFWeapon).Tick(DeltaTime);
    TimeSinceLastUpdate += DeltaTime;
    if(TimeSinceLastUpdate > UpdateInterval)
    {
        UpdateScreenUI();
    }
}

simulated function UpdateScreenUI()
{
    if(((Instigator != none) && Instigator.IsLocallyControlled()) && Instigator.Weapon == self)
    {
        if(ScreenUI != none)
        {
            ScreenUI.SetMaxCharges(MaxSpareAmmo[0]);
            ScreenUI.SetActiveCharges(NumDeployedCharges);
            TimeSinceLastUpdate = 0;
        }
    }
}

simulated function Projectile ProjectileFire()
{
    local Projectile P;
    local KFProj_Thrown_C4 Charge;

    P = super(KFWeapon).ProjectileFire();
    Charge = KFProj_Thrown_C4(P);
    if(Charge != none)
    {
        DeployedCharges.AddItem(Charge;
        NumDeployedCharges = DeployedCharges.Length;
    }
    return P;
}

simulated function bool HasAmmo(byte FireModeNum, optional int Amount)
{
    if(FireModeNum == 5)
    {
        return true;
    }
    return super(KFWeapon).HasAmmo(FireModeNum, Amount);
}

simulated function Detonate()
{
    if(Role == ROLE_Authority)
    {
        if(DeployedCharges.Length > 0)
        {
            DeployedCharges[0].Detonate();
            RemoveDeployedCharge(0);
        }
        if(!HasAnyAmmo() && NumDeployedCharges == 0)
        {
            if(CanSwitchWeapons())
            {
                Instigator.Controller.ClientSwitchToBestWeapon(false);
            }
        }
    }
}

function RemoveDeployedCharge(optional int ChargeIndex, optional Actor ChargeActor)
{
    ChargeIndex = -1;    
    if(ChargeIndex == -1)
    {
        if(ChargeActor != none)
        {
            ChargeIndex = DeployedCharges.Find(ChargeActor;
        }
    }
    if(ChargeIndex != -1)
    {
        DeployedCharges.Remove(ChargeIndex, 1;
        NumDeployedCharges = DeployedCharges.Length;
    }
}

function SetOriginalValuesFromPickup(KFWeapon PickedUpWeapon)
{
    local int I;

    super(KFWeapon).SetOriginalValuesFromPickup(PickedUpWeapon);
    DeployedCharges = KFWeap_Thrown_C4(PickedUpWeapon).DeployedCharges;
    NumDeployedCharges = DeployedCharges.Length;
    I = 0;
    J0x63:

    if(I < NumDeployedCharges)
    {
        DeployedCharges[I].Instigator = Instigator;
        if(Instigator.Controller != none)
        {
            DeployedCharges[I].InstigatorController = Instigator.Controller;
        }
        ++ I;
        goto J0x63;
    }
}

static simulated event bool UsesAmmo()
{
    return true;
}

simulated function AltFireMode();

simulated function GotoActiveState();

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    return 6;
}

simulated state Active
{
    simulated function bool CanPlayIdleFidget(optional bool bOnReload)
    {
        if(!HasAmmo(0))
        {
            return false;
        }
        return super.CanPlayIdleFidget(bOnReload);
    }
    stop;    
}

simulated state WeaponDetonating
{
    ignores AllowSprinting;

    simulated event BeginState(name PreviousStateName)
    {
        local name DetonateAnimName;
        local float AnimDuration;

        DetonateAnimName = ((ShouldPlayLastAnims()) ? DetonateLastAnim : DetonateAnim);
        AnimDuration = MySkelMesh.GetAnimLength(DetonateAnimName);
        if(WorldInfo.NetMode != NM_DedicatedServer)
        {
            if(NumDeployedCharges > 0)
            {
                PlaySoundBase(DetonateAkEvent, true);                
            }
            else
            {
                PlaySoundBase(DryFireAkEvent, true);
            }
            PlayAnimation(DetonateAnimName);
        }
        if(Role == ROLE_Authority)
        {
            Detonate();
        }
        IncrementFlashCount();
        SetTimer(AnimDuration / 2, false, 'GotoActiveState');
    }

    simulated function GotoActiveState()
    {
        GotoState('Active');
    }
    stop;    
}

simulated state WeaponThrowing
{
    simulated function bool ShouldRefire()
    {
        return false;
    }
    stop;    
}

simulated state WeaponEquipping
{
    simulated event BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if(!HasAmmo(0) && HasSpareAmmo())
        {
            PerformArtificialReload();
        }
    }
    stop;    
}

simulated state WeaponPuttingDown
{
    ignores SetIronSights;
    stop;    
}

defaultproperties
{
    DetonateAnim=Detonate
    DetonateLastAnim=Detonate_Last
    ScreenUIClass=Class'KFGame.KFGFxWorld_C4Screen'
    UpdateInterval=0.25
    DetonateAkEvent=AkEvent'WW_WEP_EXP_C4.Play_WEP_EXP_C4_Handling_Detonate'
    DryFireAkEvent=AkEvent'WW_WEP_EXP_C4.Play_WEP_EXP_C4_DryFire'
    FireModeIconPaths=/* Array type was not detected. */
    InventorySize=3
    MagazineCapacity=1
    GroupPriority=50
    WeaponSelectTexture=Texture2D'WEP_UI_C4_TEX.UI_WeaponSelect_C4'
    MaxSpareAmmo=1
    InitialSpareMags=1
    FireAnim=C4_Throw
    FireLastAnim=C4_Throw_Last
    PlayerViewOffset=(X=6,Y=2,Z=-4)
    AttachmentArchetype=KFWeapAttach_Dual_C4'WEP_C4_ARCH.Wep_C4_3P'
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_Thrown_C4.MeleeHelper'
    AssociatedPerkClass=Class'KFGame.KFPerk_Demolitionist'
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=15,Z=0)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        SkeletalMesh=SkeletalMesh'Wep_1P_C4_MESH.Wep_1stP_C4_Rig'
        AnimSets(0)=AnimSet'Wep_1P_C4_ANIM.Wep_1P_C4_ANIM'
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Thrown_C4.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="C4 Explosives"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'WEP_3P_C4_MESH.Wep_C4_Pickup'
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Thrown_C4.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'WEP_3P_C4_MESH.Wep_C4_Pickup'
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Thrown_C4.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}