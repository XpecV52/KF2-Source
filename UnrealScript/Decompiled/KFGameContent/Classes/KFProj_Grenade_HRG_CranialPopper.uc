/*******************************************************************************
 * KFProj_Grenade_HRG_CranialPopper generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Grenade_HRG_CranialPopper extends KFProj_BallisticExplosive
    hidecategories(Navigation);

var float WaveDuration;
var float WaveRadius;
var float WaveRadiusMax;
var float WaveTime;
var protected transient bool bWaveActive;
var array<Actor> VictimsList;
var Vector WaveImpactMomentum;
var GameExplosion VFXExplosionTemplate;

function Init(Vector Direction)
{
    super(KFProjectile).Init(Direction);
    if(Instigator.Role < ROLE_Authority)
    {
        return;
    }
    GotoState('WaveState');
    TriggerVFXExplosion();
}

simulated function TriggerVFXExplosion()
{
    local KFExplosionActorReplicated ExploActor;
    local float ModifiedDamage, OriginalDamage, OriginalDamageRadius;

    if(VFXExplosionTemplate != none)
    {
        ExploActor = Spawn(Class'KFExplosionActorReplicated', self,, Location, Rotation,, true);
        if(ExploActor != none)
        {
            ExploActor.InstigatorController = Instigator.Controller;
            ExploActor.Instigator = Instigator;
            ExploActor.bReplicateInstigator = true;
            ExploActor.bSyncParticlesToMuzzle = true;
            ModifiedDamage = 0;
            OriginalDamage = VFXExplosionTemplate.Damage;
            OriginalDamageRadius = VFXExplosionTemplate.DamageRadius;
            VFXExplosionTemplate.Damage *= ModifiedDamage;
            VFXExplosionTemplate.DamageRadius *= ModifiedDamage;
            ExploActor.Explode(VFXExplosionTemplate);
            VFXExplosionTemplate.Damage = OriginalDamage;
            VFXExplosionTemplate.DamageRadius = OriginalDamageRadius;
        }
    }
}

simulated function Explode(Vector HitLocation, Vector HitNormal);

simulated function Timer_EndWave()
{
    bWaveActive = false;
    DeferredDestroy(0.15);
}

simulated function MakeHeadExplode(KFPawn_Monster Victim)
{
    local KFPlayerController KFPC;

    if(Victim == none)
    {
        return;
    }
    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        if(KFPC != none)
        {
            KFPC.ForceMonsterHeadExplode(Victim);
        }        
    }    
}

state WaveState
{
    simulated event BeginState(name PrevStateName)
    {
        super(Object).BeginState(PrevStateName);
        bWaveActive = true;
        if(Role == ROLE_Authority)
        {
            SetTimer(WaveDuration, false, 'Timer_EndWave');
        }
    }

    simulated event Tick(float DeltaTime)
    {
        local KFPawn_Monster Victim;
        local TraceHitInfo HitInfo;
        local float Radius, DamageHead;

        if(bWaveActive)
        {
            WaveTime += DeltaTime;
            Radius = Lerp(WaveRadius, WaveRadiusMax, WaveTime / WaveDuration);
            foreach CollidingActors(Class'KFPawn_Monster', Victim, Radius, Location, true,, HitInfo)
            {
                if(((Victim != none) && Victim.CollisionComponent != none) && VictimsList.Find(Victim == -1)
                {
                    VictimsList[VictimsList.Length] = Victim;
                    DamageHead = Victim.AfflictionHandler.GetBigHeadAfflictionDamageModifier();
                    if(DamageHead > float(0))
                    {
                        Victim.TakeDamage(int(DamageHead * UpgradeDamageMod), InstigatorController, Victim.Location, Normal(Victim.Location - Instigator.Location), MyDamageType, HitInfo, ((Owner != none) ? Owner : self));
                        if(Victim.Health <= 0)
                        {
                            MakeHeadExplode(Victim);
                        }
                    }
                }                
            }            
        }
    }
    stop;    
}

defaultproperties
{
    WaveDuration=2
    WaveRadius=10
    WaveRadiusMax=15000
    begin object name=ExploTemplate0 class=KFGameExplosion
        Damage=0
        DamageRadius=2
        MyDamageType=Class'KFDT_Blast_HRG_CranialPopper'
        KnockDownStrength=0
        MomentumTransferScale=0
        ParticleEmitterTemplate=ParticleSystem'WEP_HRG_CranialPopper_EMIT.PS_Expansion_Wave'
        ExplosionSound=AkEvent'WW_WEP_HRG_CranialPopper.Play_WEP_HRG_CranialPopper_AltFire_3P'
        ExploLight=PointLightComponent'Default__KFProj_Grenade_HRG_CranialPopper.ExplosionPointLight'
        ExploLightFadeOutTime=0.3
        FractureMeshRadius=0
        FracturePartVel=0
        CamShake=KFCameraShake'FX_CameraShake_Arch.Misc_Explosions.Light_Explosion_Rumble'
        CamShakeInnerRadius=0
        CamShakeOuterRadius=300
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFProj_Grenade_HRG_CranialPopper.ExploTemplate0'
    VFXExplosionTemplate=ExploTemplate0
    bWarnAIWhenFired=true
    TouchTimeThreshhold=60
    GravityScale=0
    AmbientComponent=AkComponent'Default__KFProj_Grenade_HRG_CranialPopper.AmbientAkSoundComponent'
    Speed=0
    MaxSpeed=0
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Grenade_HRG_CranialPopper.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Grenade_HRG_CranialPopper.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFProj_Grenade_HRG_CranialPopper.AmbientAkSoundComponent'
    Physics=EPhysics.PHYS_Falling
    LifeSpan=0
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Grenade_HRG_CranialPopper.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}