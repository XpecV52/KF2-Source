/*******************************************************************************
 * KFSeasonalEventStats_Spring2021 generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSeasonalEventStats_Spring2021 extends KFSeasonalEventStats within KFOnlineStatsWrite;

var private const transient int BossKillsRequired;
var private const transient int EDARKillsRequired;
var private const transient int WavesWithoutDamageRequired;
var private const transient int EndlessWaveRequired;
var transient bool bHitTakenThisWave;

private final event Initialize(string MapName)
{
    local string CapsMapName;

    CapsMapName = Caps(MapName);
    bObjectiveIsValidForMap[0] = 1;
    bObjectiveIsValidForMap[1] = 0;
    bObjectiveIsValidForMap[2] = 0;
    bObjectiveIsValidForMap[3] = 0;
    bObjectiveIsValidForMap[4] = 0;
    if(CapsMapName == "KF-DYSTOPIA2029")
    {
        bObjectiveIsValidForMap[1] = 1;
        bObjectiveIsValidForMap[2] = 1;
        bObjectiveIsValidForMap[3] = 1;
        bObjectiveIsValidForMap[4] = 1;
    }
    SetSeasonalEventStatsMax(BossKillsRequired, 0, EDARKillsRequired, WavesWithoutDamageRequired, 0);
}

private final event GrantEventItems()
{
    if((((Outer.IsEventObjectiveComplete(0) && Outer.IsEventObjectiveComplete(1)) && Outer.IsEventObjectiveComplete(2)) && Outer.IsEventObjectiveComplete(3)) && Outer.IsEventObjectiveComplete(4))
    {
        GrantEventItem(8716);
    }
}

simulated event OnGameWon(class<GameInfo> GameClass, int Difficulty, int GameLength, bool bCoop)
{
    if(bObjectiveIsValidForMap[1] != 0)
    {
        if(GameClass == Class'KFGameInfo_WeeklySurvival')
        {
            FinishedObjective(1, 1);
        }
    }
}

simulated function OnBossDied()
{
    local int ObjIdx;

    ObjIdx = 0;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        IncrementSeasonalEventStat(ObjIdx, 1);
        if(Outer.GetSeasonalEventStatValue(ObjIdx) >= BossKillsRequired)
        {
            FinishedObjective(1, ObjIdx);
        }
    }
}

simulated function OnZedKilled(class<KFPawn_Monster> MonsterClass, int Difficulty, class<DamageType> DT)
{
    local int ObjIdx;

    ObjIdx = 2;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        if(ClassIsChildOf(MonsterClass, Class'KFPawn_ZedDAR'))
        {
            IncrementSeasonalEventStat(ObjIdx, 1);
            if(Outer.GetSeasonalEventStatValue(ObjIdx) >= EDARKillsRequired)
            {
                FinishedObjective(1, ObjIdx);
            }
        }
    }
}

simulated function OnHitTaken()
{
    bHitTakenThisWave = true;
}

simulated event OnWaveCompleted(class<GameInfo> GameClass, int Difficulty, int WaveNum)
{
    local int ObjIdx;

    ObjIdx = 3;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        if(!bHitTakenThisWave)
        {
            IncrementSeasonalEventStat(ObjIdx, 1);
            if(Outer.GetSeasonalEventStatValue(ObjIdx) >= WavesWithoutDamageRequired)
            {
                FinishedObjective(1, ObjIdx);
            }
        }
        bHitTakenThisWave = false;
    }
    ObjIdx = 4;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        if(((WaveNum >= EndlessWaveRequired) && GameClass == Class'KFGameInfo_Endless') && float(Difficulty) >= 1)
        {
            FinishedObjective(1, ObjIdx);
        }
    }
}

defaultproperties
{
    BossKillsRequired=15
    EDARKillsRequired=50
    WavesWithoutDamageRequired=10
    EndlessWaveRequired=15
}