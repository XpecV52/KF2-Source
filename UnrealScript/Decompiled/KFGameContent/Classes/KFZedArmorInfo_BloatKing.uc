/*******************************************************************************
 * KFZedArmorInfo_BloatKing generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFZedArmorInfo_BloatKing extends KFZedArmorInfo within KFPawn_Monster;

var KFPlayerController KFPC;

simulated function KFPlayerController GetKFPC()
{
    if(KFPC == none)
    {
        KFPC = KFPlayerController(Outer.GetALocalPlayerController());
    }
    return KFPC;
}

function ExplodeArmor(int ArmorZoneIdx, name ArmorZoneName)
{
    local byte StatusField;

    switch(ArmorZoneName)
    {
        case 'head':
            StatusField = byte(2 | 4);
            break;
        case 'Front':
            StatusField = byte(1 | 4);
            break;
        case 'back':
            StatusField = byte(2 | 1);
            break;
        default:
            break;
    }
    Outer.ArmorZoneStatus = byte(Outer.ArmorZoneStatus & StatusField);
    UpdateArmorPieces();
}

simulated function UpdateArmorUI()
{
    local SCompressedArmorInfo CompressedArmorInfoList[3];
    local int I;

    if((GetKFPC()) == none)
    {
        return;
    }
    I = 0;
    J0x1D:

    if(I < ArmorZones.Length)
    {
        CompressedArmorInfoList[I].Percentage = ByteToFloat(Outer.RepArmorPct[I]);
        CompressedArmorInfoList[I].IconTexture = default.ArmorZones[I].ZoneIcon;
        ++ I;
        goto J0x1D;
    }
    if((KFPC.myGfxHUD != none) && KFPC.myGfxHUD.bossHealthBar != none)
    {
        KFPC.myGfxHUD.bossHealthBar.UpdateArmorUI(CompressedArmorInfoList);
    }
}

simulated function UpdateArmorPieces()
{
    local int I;
    local Vector SocketLocation;
    local Rotator SocketRotation;
    local KFCharacterInfo_Monster MonsterArch;

    if(Outer.WorldInfo.NetMode != NM_DedicatedServer)
    {
        MonsterArch = Outer.GetCharacterMonsterInfo();
        switch(Outer.ArmorZoneStatus ^ Outer.PreviousArmorZoneStatus)
        {
            case 1:
                I = Min(1, Outer.StaticAttachList.Length - 1);
                J0xE6:

                if(I >= 0)
                {
                    Outer.Mesh.DetachComponent(Outer.StaticAttachList[I]);
                    Outer.DetachComponent(Outer.StaticAttachList[I]);
                    Outer.StaticAttachList.Remove(I, 1;
                    -- I;
                    goto J0xE6;
                }
                Outer.Mesh.GetSocketWorldLocationAndRotation(default.ArmorZones[0].SocketName, SocketLocation, SocketRotation);
                Outer.WorldInfo.MyEmitterPool.SpawnEmitter(MonsterArch.ExtraVFX[0], SocketLocation, SocketRotation);
                Outer.PlaySoundBase(default.ArmorZones[0].ExplosionSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
                break;
            case 2:
                Outer.DetachComponent(Outer.ThirdPersonAttachments[1]);
                Outer.Mesh.GetSocketWorldLocationAndRotation(default.ArmorZones[1].SocketName, SocketLocation, SocketRotation);
                Outer.WorldInfo.MyEmitterPool.SpawnEmitter(MonsterArch.ExtraVFX[1], SocketLocation, SocketRotation);
                Outer.PlaySoundBase(default.ArmorZones[1].ExplosionSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
                Outer.ThirdPersonAttachments[1] = none;
                break;
            case 4:
                Outer.DetachComponent(Outer.ThirdPersonAttachments[2]);
                Outer.Mesh.GetSocketWorldLocationAndRotation(default.ArmorZones[2].SocketName, SocketLocation, SocketRotation);
                Outer.WorldInfo.MyEmitterPool.SpawnEmitter(MonsterArch.ExtraVFX[2], SocketLocation, SocketRotation);
                Outer.PlaySoundBase(default.ArmorZones[2].ExplosionSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
                Outer.ThirdPersonAttachments[2] = none;
                break;
            default:
                break;
                break;
        }
        UpdateArmorUI();
    }
    Outer.PreviousArmorZoneStatus = Outer.ArmorZoneStatus;
}

defaultproperties
{
    ArmorHitzoneNames=/* Array type was not detected. */
    ArmorZones=/* Array type was not detected. */
    ArmorScale=1
}