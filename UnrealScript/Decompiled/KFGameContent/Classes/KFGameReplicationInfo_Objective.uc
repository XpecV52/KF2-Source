/*******************************************************************************
 * KFGameReplicationInfo_Objective generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameReplicationInfo_Objective extends KFGameReplicationInfo
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var KFMapInfo MyKFMI;
var bool bIsBossWave;

replication
{
     if(bNetDirty)
        bIsBossWave;
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    MyKFMI = KFMapInfo(WorldInfo.GetMapInfo());
}

simulated function bool ShouldSetBossCamOnBossSpawn()
{
    local KFMapObjective_ExterminateWave ExterminateObj;

    ExterminateObj = KFMapObjective_ExterminateWave(CurrentObjective);
    if((ExterminateObj != none) && ExterminateObj.bBossWave)
    {
        return ExterminateObj.bShowBossSpawnTheatrics;
    }
    return false;
}

simulated function bool ShouldSetBossCamOnBossDeath()
{
    return WaveNum == WaveMax;
}

simulated function bool IsObjectiveMode()
{
    return true;
}

function bool StartNextObjective()
{
    return StartNextPresetObjective(MyKFMI);
}

function bool StartNextPresetObjective(KFMapInfo KFMI)
{
    local array<KFInterface_MapObjective> PossibleObjectives;
    local bool bUseEndlessSpawning;

    PossibleObjectives = KFMI.ObjectiveModeObjectives[WaveNum - 1].PossibleObjectives;
    bUseEndlessSpawning = KFMI.ObjectiveModeObjectives[WaveNum - 1].bUseEndlessSpawning;
    return (AttemptObjectiveActivation(PossibleObjectives, bUseEndlessSpawning)) != -1;
}

function ActivateObjective(KFInterface_MapObjective NewObjective, optional bool bUseEndlessSpawning)
{
    local KFMapObjective_ExterminateWave ExterminateObj;

    bUseEndlessSpawning = false;
    bIsBossWave = false;
    if(NotEqual_InterfaceInterface(NewObjective, (none)))
    {
        ExterminateObj = KFMapObjective_ExterminateWave(bool(NewObjective));
        if(ExterminateObj != none)
        {
            bIsBossWave = ExterminateObj.bBossWave;
        }
    }
    super.ActivateObjective(NewObjective, bUseEndlessSpawning);
}

function int GetPresetObjectiveLength(KFMapInfo KFMI)
{
    return 0;
}

function bool StartNextRandomObjective(KFMapInfo KFMI)
{
    return false;
}

simulated function bool IsFinalWave()
{
    return false;
}

simulated function bool IsBossWave()
{
    return bIsBossWave;
}

simulated function bool IsInfiniteWave()
{
    return true;
}

simulated function bool IsBossWaveNext()
{
    return false;
}

simulated function int GetFinalWaveNum()
{
    return WaveMax;
}
