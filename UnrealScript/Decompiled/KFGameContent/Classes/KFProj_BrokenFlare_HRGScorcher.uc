/*******************************************************************************
 * KFProj_BrokenFlare_HRGScorcher generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_BrokenFlare_HRGScorcher extends KFProjectile
    hidecategories(Navigation);

var Vector SpeedDirectionResidualFlames;
var int AmountResidualFlamesDuringFlight;
var float TimeDelayStartDroppingResidualFlames;
var class<KFProjectile> ResidualFlameProjClass;
/**  
 *Number of lingering flames to spawn when projectile hits environment or a pawn before reaching max
 *  Note: one flame will always spawn in the place or pawn hit.
 */
var() int AmountResidualFlamesInExplosion;
var float MagnitudeVelocityResidualFlamesInExplosion;
var Vector OffsetVelocityResidualFlamesInExplosion;
var Vector LastVelocity;
var float IntervalDroppingResidualFlames;
var float TimeAlive;

protected simulated function StopSimulating()
{
    if((Instigator != none) && Instigator.Role == ROLE_Authority)
    {
        ClearTimer('Timer_SpawningResidualFlamesDuringFlight');
        ClearTimer('Timer_StartSpawningResidualFlamesDuringFlight');
    }
    ClearTimer('Timer_Shutdown');
    super.StopSimulating();
}

simulated function PostBeginPlay()
{
    IntervalDroppingResidualFlames = ((TimeAlive - 0.005) - TimeDelayStartDroppingResidualFlames) / float(AmountResidualFlamesDuringFlight - 1);
    if((Instigator != none) && Instigator.Role == ROLE_Authority)
    {
        SetTimer(TimeDelayStartDroppingResidualFlames, false, 'Timer_StartSpawningResidualFlamesDuringFlight');
    }
    SetTimer(TimeAlive, false, 'Timer_Shutdown');
    super.PostBeginPlay();
}

simulated function Init(Vector Direction)
{
    super.Init(Direction);
    SpeedDirectionResidualFlames = Velocity / float(5);
}

simulated function Timer_SpawningResidualFlamesDuringFlight()
{
    SpawnResidualFlame(ResidualFlameProjClass, Location, SpeedDirectionResidualFlames);
}

simulated function Timer_StartSpawningResidualFlamesDuringFlight()
{
    SpawnResidualFlame(ResidualFlameProjClass, Location, SpeedDirectionResidualFlames);
    SetTimer(IntervalDroppingResidualFlames, true, 'Timer_SpawningResidualFlamesDuringFlight');
}

simulated function Timer_Shutdown()
{
    ShutDown();
}

function SpawnResidualFlames(Vector HitLocation, Vector HitNormal, Vector HitVelocity)
{
    local int I;
    local Vector HitVelDir;
    local float HitVelMag;
    local Vector SpawnLoc, SpawnVel;

    HitVelMag = VSize(HitVelocity) * MagnitudeVelocityResidualFlamesInExplosion;
    HitVelDir = Normal(HitVelocity);
    SpawnLoc = HitLocation + (HitNormal * 10);
    I = 0;
    J0x65:

    if(I < AmountResidualFlamesInExplosion)
    {
        SpawnVel = CalculateResidualFlameVelocity(HitNormal, HitVelDir, HitVelMag);
        SpawnVel = SpawnVel + OffsetVelocityResidualFlamesInExplosion;
        SpawnResidualFlame(ResidualFlameProjClass, SpawnLoc, SpawnVel);
        ++ I;
        goto J0x65;
    }
}

simulated function TriggerExplosion(Vector HitLocation, Vector HitNormal, Actor HitActor)
{
    local bool bDoExplosion;

    if(bHasDisintegrated)
    {
        return;
    }
    bDoExplosion = !bHasExploded && Instigator.Role == ROLE_Authority;
    if(bDoExplosion)
    {
        SpawnResidualFlames(HitLocation, HitNormal, LastVelocity);
        SpawnResidualFlame(ResidualFlameProjClass, Location, LastVelocity);
    }
    super.TriggerExplosion(HitLocation, HitNormal, HitActor);
}

simulated function Explode(Vector HitLocation, Vector HitNormal)
{
    LastVelocity = Velocity;
    super.Explode(HitLocation, HitNormal);
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    ProcessBulletTouch(Other, HitLocation, HitNormal);
    super.ProcessTouch(Other, HitLocation, HitNormal);
}

simulated function SpawnFlightEffects()
{
    super.SpawnFlightEffects();
    if(ProjEffects != none)
    {
        ProjEffects.SetFloatParameter('FlareLifetime', LifeSpan);
    }
}

simulated function SyncOriginalLocation()
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;
    local TraceHitInfo HitInfo;

    if(((Role < ROLE_Authority) && Instigator != none) && Instigator.IsLocallyControlled())
    {
        HitActor = Trace(HitLocation, HitNormal, OriginalLocation, Location,,, HitInfo, 1);
        if(HitActor != none)
        {
            Explode(HitLocation, HitNormal);
        }
    }
    super.SyncOriginalLocation();
}

defaultproperties
{
    AmountResidualFlamesDuringFlight=8
    TimeDelayStartDroppingResidualFlames=0.005
    ResidualFlameProjClass=Class'KFProj_BrokenFlare_HRGScorcherSplash'
    AmountResidualFlamesInExplosion=3
    MagnitudeVelocityResidualFlamesInExplosion=0.5
    OffsetVelocityResidualFlamesInExplosion=(X=0,Y=0,Z=200)
    TimeAlive=0.5
    bDamageDestructiblesOnTouch=true
    bWarnAIWhenFired=true
    GravityScale=0.4
    TerminalVelocity=7000
    ExplosionActorClass=Class'KFGame.KFExplosionActor'
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'WEP_HRGScorcher_Pistol_ARCH.HRGScorcher_Pistol_Grenade_Explosion'
        Damage=0
        MyDamageType=Class'KFDT_Fire_HRGScorcherDoT'
        KnockDownStrength=0
        MomentumTransferScale=0
        ExplosionSound=AkEvent'WW_WEP_HRG_Scorcher.Play_WEP_HRG_Scorcher_AltFire_Explosion'
        ExploLight=PointLightComponent'Default__KFProj_BrokenFlare_HRGScorcher.ExplosionPointLight'
        ExploLightFadeOutTime=0.2
        CamShake=KFCameraShake'FX_CameraShake_Arch.Misc_Explosions.Light_Explosion_Rumble'
        CamShakeInnerRadius=200
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFProj_BrokenFlare_HRGScorcher.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    ProjFlightTemplate=ParticleSystem'WEP_HRGScorcher_Pistol_EMIT.FX_HRGScorcher_Projectile_01_ALT'
    ProjEffectsFadeOutDuration=5
    begin object name=PointLight0 class=PointLightComponent
        Radius=500
        FalloffExponent=10
        Brightness=0.5
        LightColor=(B=80,G=25,R=250,A=255)
        CastShadows=false
        CastStaticShadows=false
        CastDynamicShadows=false
        bCastPerObjectShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFProj_BrokenFlare_HRGScorcher.PointLight0'
    ProjFlightLight=PointLight0
    AssociatedPerkClass=Class'KFGame.KFPerk_Firebug'
    Speed=3000
    MaxSpeed=7000
    DamageRadius=0
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_BrokenFlare_HRGScorcher.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_BrokenFlare_HRGScorcher.CollisionCylinder'
    Components(0)=CollisionCylinder
    Physics=EPhysics.PHYS_Falling
    bCollideComplex=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_BrokenFlare_HRGScorcher.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}