/*******************************************************************************
 * KFMapObjective_EscortPawns generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_EscortPawns extends Actor
    placeable
    hidecategories(Navigation)
    implements(KFInterface_MapObjective);

var() string LocalizationKey;
var() string DescriptionLocKey;
var() string LocalizationPackageName;
var bool bIsActive;
var() bool bIsMissionCriticalObjective;
/** Whether or not to use the trader trail to lead players to the objective */
var() bool bUseTrailToObjective;
var Texture2D DefaultIcon;
/** Scripted pawn spawners that will spawn the escorts related to this objective */
var() array<KFScriptedPawnSpawner> EscortPawnSpawners;
/** How many escorts need to be escorted successfully for the objective to be completed. */
var() int NumEscortsRequired;
var int NumEscortsAccomplished;
var int NumEscortsFinished;
var float Progress;
var repnotify transient Actor ActiveEscortActor;
var float CompletionPct;
var transient KFReplicatedShowPathActor TrailActor;
/** Texture to use for the actor icon */
var() Texture2D ObjectiveIcon;
/** Which game modes should this objective not support. */
var() array< class<KFGameInfo> > GameModeBlacklist;
/** Modify Spawn Rate based on how many players are alive. */
var() array<float> PerPlayerSpawnRateMod;
/** A sound to play when this objective is activated */
var() AkEvent ActivationSoundEvent;
/** A sound to play when the objective is failed */
var() AkEvent FailureSoundEvent;
/** Sound to play when escort is 100% done and in perfect health */
var() AkEvent ProgressSoundEvent100pctPerfect;
/** Sound to play when escort is 100% done */
var() AkEvent ProgressSoundEvent100pct;
/** Sound to play when escort is 100% done and in poor health */
var() AkEvent ProgressSoundEvent100pctPoor;
/** Sound to play when escort is 85% done and in perfect health */
var() AkEvent ProgressSoundEvent85pctPerfect;
/** Sound to play when escort is 85% done */
var() AkEvent ProgressSoundEvent85pct;
/** Sound to play when escort is 85% done and in poor health */
var() AkEvent ProgressSoundEvent85pctPoor;
/** Sound to play when escort is 50% done and in perfect health */
var() AkEvent ProgressSoundEvent50pctPerfect;
/** Sound to play when escort is 50% done */
var() AkEvent ProgressSoundEvent50pct;
/** Sound to play when escort is 50% done and in poor health */
var() AkEvent ProgressSoundEvent50pctPoor;
/** Sound to play when escort is 25% done and in perfect health */
var() AkEvent ProgressSoundEvent25pctPerfect;
/** Sound to play when escort is 25% done */
var() AkEvent ProgressSoundEvent25pct;
/** Sound to play when escort is 25% done and in poor health */
var() AkEvent ProgressSoundEvent25pctPoor;
/** Percentage of escort health considered to be "poor," used for the "poor" progress sound events */
var() float PoorHealthPctThreshold;
/** Sound to play when escort takes damage */
var() AkEvent EscortPawnTakeDamageEvent;
/** Cooldown period for the "take damage" sound event */
var() float EscortPawnTakeDamageEventCooldown;
/** Sound to play to remind players that escort is in critical condition */
var() AkEvent EscortPawnCriticalReminderEvent;
/** How frequently to remind players that escort is in critical condition */
var() float EscortPawnCriticalReminderEventInterval;

replication
{
     if(bNetDirty)
        ActiveEscortActor, CompletionPct, 
        Progress, bIsActive;

     if(bNetInitial)
        DescriptionLocKey, LocalizationKey, 
        LocalizationPackageName, ObjectiveIcon, 
        bIsMissionCriticalObjective, bUseTrailToObjective;
}

simulated function ReplicatedEvent(name VarName)
{
    if(VarName == 'ActiveEscortActor')
    {
        UpdateTrailActor();        
    }
    else
    {
        super.ReplicatedEvent(VarName);
    }
}

simulated function ActivateObjective()
{
    local KFScriptedPawnSpawner EscortPawnStart;

    if(Role == ROLE_Authority)
    {
        bIsActive = true;
        NumEscortsAccomplished = 0;
        NumEscortsFinished = 0;
        foreach EscortPawnSpawners(EscortPawnStart,)
        {
            EscortPawnStart.__Delegate_OnPawnStartedRoute__Delegate = OnEscortStarted;
            EscortPawnStart.__Delegate_OnPawnReachedRouteMarker__Delegate = OnEscortReachedRouteMarker;
            EscortPawnStart.__Delegate_OnPawnReachedGoal__Delegate = OnEscortReachedGoal;
            EscortPawnStart.__Delegate_OnPawnEndedRoute__Delegate = OnEscortEndedRoute;
            if((EscortPawnStart.Pawn != none) && EscortPawnStart.bReachedStart)
            {
                OnEscortStarted(EscortPawnStart.Pawn);
            }            
        }        
        if(ActivationSoundEvent != none)
        {
            PlaySoundBase(ActivationSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
        }
    }
}

simulated function DeactivateObjective()
{
    local KFPawn_Human KFPH;

    if(Role == ROLE_Authority)
    {
        bIsActive = false;
        if(NumEscortsAccomplished >= NumEscortsRequired)
        {
            foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
            {
                if(KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo) == none)
                {
                    continue;                    
                }
                if(KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo).bOnlySpectator)
                {
                    continue;                    
                }
                KFPlayerReplicationInfo(KFPH.PlayerReplicationInfo).AddDosh(GetDoshReward());
                KFPlayerController(KFPH.Controller).ClientMapObjectiveCompleted(float(GetXPReward()));                
            }                        
        }
        else
        {
            if(FailureSoundEvent != none)
            {
                PlaySoundBase(FailureSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
            }
        }
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(TrailActor != none)
        {
            TrailActor.Destroy();
            TrailActor = none;
        }
        if(ActiveEscortActor != none)
        {
            KFPawn_Scripted(ActiveEscortActor).RemoveEscortPawnOnHud();
        }
    }
}

simulated function bool IsActive()
{
    return bIsActive;
}

simulated function bool UsesProgress()
{
    return true;
}

simulated function int GetDoshReward()
{
    local int MaxDosh;

    MaxDosh = GetMaxDoshReward();
    if(MaxDosh == 0)
    {
        return MaxDosh;
    }
    return int(float(MaxDosh) * (GetProgress()));
}

simulated function int GetMaxDoshReward()
{
    return 400;
}

simulated function int GetVoshReward()
{
    local int MaxDosh;

    MaxDosh = GetMaxVoshReward();
    if(MaxDosh == 0)
    {
        return MaxDosh;
    }
    return int(float(MaxDosh) * (GetProgress()));
}

simulated function int GetMaxVoshReward()
{
    return 2000;
}

simulated function int GetXPReward()
{
    local int MaxXP;

    MaxXP = GetMaxXPReward();
    if(MaxXP == 0)
    {
        return MaxXP;
    }
    return int(float(MaxXP) * (GetProgress()));
}

simulated function int GetMaxXPReward()
{
    return 330;
}

simulated function bool IsBonus();

function bool CanActivateObjective()
{
    return !IsCurrentGameModeBlacklisted();
}

function bool IsCurrentGameModeBlacklisted()
{
    local class<KFGameInfo> CurrGameClass;

    foreach GameModeBlacklist(CurrGameClass,)
    {
        if(CurrGameClass == WorldInfo.GRI.GameClass)
        {            
            return true;
        }        
    }    
    return false;
}

simulated function float GetProgress()
{
    return Progress;
}

simulated function bool IsComplete()
{
    return (GetProgress()) >= 1;
}

simulated function bool HasFailedObjective();

simulated function float GetActivationPctChance()
{
    return 1;
}

simulated function float GetSpawnRateMod()
{
    local KFGameReplicationInfo KFGRI;
    local int NumPlayersAlive;

    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(KFGRI != none)
    {
        NumPlayersAlive = Clamp(KFGRI.GetNumPlayersAlive(), 1, PerPlayerSpawnRateMod.Length) - 1;
        return PerPlayerSpawnRateMod[NumPlayersAlive];
    }
    return 1;
}

simulated function bool UsesMultipleActors()
{
    return false;
}

simulated function string GetActorCount();

simulated function string GetLocalizedDescription()
{
    return Localize("Objectives", DescriptionLocKey, LocalizationPackageName);
}

simulated function string GetLocalizedRequirements()
{
    return "";
}

simulated function string GetLocalizedName()
{
    return Localize("Objectives", LocalizationKey, LocalizationPackageName);
}

simulated function bool ShouldDrawIcon();

simulated function Vector GetIconLocation();

simulated function Texture2D GetIcon()
{
    if(ActiveEscortActor != none)
    {
        return KFPawn_Scripted(ActiveEscortActor).GetStateIconTexture();
    }
    return DefaultIcon;
}

function OnEscortStarted(KFPawn_Scripted StartedPawn)
{
    ActiveEscortActor = StartedPawn;
    StartedPawn.SetActive(true);
    UpdateTrailActor();
    StartedPawn.__Delegate_OnTakeDamage__Delegate = OnEscortTakeDamage;
    StartedPawn.__Delegate_OnChangeState__Delegate = OnEscortChangeState;
    OnEscortChangeState(0, 0);
}

function OnEscortReachedRouteMarker(int MarkerIdx, SplineActor Marker, int SubIdx)
{
    local float PawnsProgress;
    local KFScriptedPawnSpawner EscortPawnSpawner;
    local float ActivePawnHealthPct;

    foreach EscortPawnSpawners(EscortPawnSpawner,)
    {
        PawnsProgress += (EscortPawnSpawner.GetProgress() / float(EscortPawnSpawners.Length));        
    }    
    ActivePawnHealthPct = float(KFPawn_Scripted(ActiveEscortActor).Health) / float(KFPawn_Scripted(ActiveEscortActor).HealthMax);
    CompletionPct = ActivePawnHealthPct;
    if((Progress < 0.25) && PawnsProgress >= 0.25)
    {
        if((ActivePawnHealthPct > 0.99) && ProgressSoundEvent25pctPerfect != none)
        {
            PlaySoundBase(ProgressSoundEvent25pctPerfect, false, WorldInfo.NetMode == NM_DedicatedServer);            
        }
        else
        {
            if((ActivePawnHealthPct > PoorHealthPctThreshold) && ProgressSoundEvent25pct != none)
            {
                PlaySoundBase(ProgressSoundEvent25pct, false, WorldInfo.NetMode == NM_DedicatedServer);                
            }
            else
            {
                if(ProgressSoundEvent25pctPoor != none)
                {
                    PlaySoundBase(ProgressSoundEvent25pctPoor, false, WorldInfo.NetMode == NM_DedicatedServer);
                }
            }
        }        
    }
    else
    {
        if((Progress < 0.5) && PawnsProgress >= 0.5)
        {
            if((ActivePawnHealthPct > 0.99) && ProgressSoundEvent50pctPerfect != none)
            {
                PlaySoundBase(ProgressSoundEvent50pctPerfect, false, WorldInfo.NetMode == NM_DedicatedServer);                
            }
            else
            {
                if((ActivePawnHealthPct > PoorHealthPctThreshold) && ProgressSoundEvent50pct != none)
                {
                    PlaySoundBase(ProgressSoundEvent50pct, false, WorldInfo.NetMode == NM_DedicatedServer);                    
                }
                else
                {
                    if(ProgressSoundEvent50pctPoor != none)
                    {
                        PlaySoundBase(ProgressSoundEvent50pctPoor, false, WorldInfo.NetMode == NM_DedicatedServer);
                    }
                }
            }            
        }
        else
        {
            if((Progress < 0.85) && PawnsProgress >= 0.85)
            {
                if((ActivePawnHealthPct > 0.99) && ProgressSoundEvent85pctPerfect != none)
                {
                    PlaySoundBase(ProgressSoundEvent85pctPerfect, false, WorldInfo.NetMode == NM_DedicatedServer);                    
                }
                else
                {
                    if((ActivePawnHealthPct > PoorHealthPctThreshold) && ProgressSoundEvent85pct != none)
                    {
                        PlaySoundBase(ProgressSoundEvent85pct, false, WorldInfo.NetMode == NM_DedicatedServer);                        
                    }
                    else
                    {
                        if(ProgressSoundEvent85pctPoor != none)
                        {
                            PlaySoundBase(ProgressSoundEvent85pctPoor, false, WorldInfo.NetMode == NM_DedicatedServer);
                        }
                    }
                }                
            }
            else
            {
                if((Progress < 1) && PawnsProgress >= 1)
                {
                    if((ActivePawnHealthPct > 0.99) && ProgressSoundEvent100pctPerfect != none)
                    {
                        PlaySoundBase(ProgressSoundEvent100pctPerfect, false, WorldInfo.NetMode == NM_DedicatedServer);                        
                    }
                    else
                    {
                        if((ActivePawnHealthPct > PoorHealthPctThreshold) && ProgressSoundEvent100pct != none)
                        {
                            PlaySoundBase(ProgressSoundEvent100pct, false, WorldInfo.NetMode == NM_DedicatedServer);                            
                        }
                        else
                        {
                            if(ProgressSoundEvent100pctPoor != none)
                            {
                                PlaySoundBase(ProgressSoundEvent100pctPoor, false, WorldInfo.NetMode == NM_DedicatedServer);
                            }
                        }
                    }
                    CompletionPct = ActivePawnHealthPct;
                }
            }
        }
    }
    Progress = PawnsProgress;
}

function OnEscortReachedGoal()
{
    OnEscortEndedRoute(true);
}

function OnEscortEndedRoute(bool bSuccess)
{
    local KFGameReplicationInfo KFGRI;

    ++ NumEscortsFinished;
    if(bSuccess)
    {
        ++ NumEscortsAccomplished;
    }
    if(((NumEscortsAccomplished >= NumEscortsRequired) || NumEscortsFinished == EscortPawnSpawners.Length) || ((EscortPawnSpawners.Length - NumEscortsFinished) + NumEscortsAccomplished) < NumEscortsRequired)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            KFGRI.DeactivateObjective();
        }
    }
    ActiveEscortActor = none;
    UpdateTrailActor();
    ClearTimer('Timer_EscortPawnTakeDamageEventCooldown');
    ClearTimer('Timer_EscortPawnCriticalReminderEventInterval');
}

function OnEscortTakeDamage()
{
    if((EscortPawnTakeDamageEvent != none) && !IsTimerActive('Timer_EscortPawnTakeDamageEventCooldown'))
    {
        PlaySoundBase(EscortPawnTakeDamageEvent,, WorldInfo.NetMode == NM_DedicatedServer);
        SetTimer(EscortPawnTakeDamageEventCooldown, false, 'Timer_EscortPawnTakeDamageEventCooldown');
    }
}

function Timer_EscortPawnTakeDamageEventCooldown();

function OnEscortChangeState(int CurrState, int PrevState)
{
    if(KFPawn_Scripted(ActiveEscortActor).IsInCriticalCondition())
    {
        if((EscortPawnCriticalReminderEvent != none) && !IsTimerActive('Timer_EscortPawnCriticalReminderEventInterval'))
        {
            SetTimer(EscortPawnCriticalReminderEventInterval, true, 'Timer_EscortPawnCriticalReminderEventInterval');
        }        
    }
    else
    {
        ClearTimer('Timer_EscortPawnCriticalReminderEventInterval');
    }
}

function Timer_EscortPawnCriticalReminderEventInterval()
{
    PlaySoundBase(EscortPawnCriticalReminderEvent,, WorldInfo.NetMode == NM_DedicatedServer);
}

simulated function UpdateTrailActor()
{
    if(bUseTrailToObjective && WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(TrailActor == none)
        {
            TrailActor = Class'WorldInfo'.static.GetWorldInfo().Spawn(Class'KFReplicatedShowPathActor', none);
            TrailActor.SetEmitterTemplate(ParticleSystem'FX_Objective_Cart_Trail');
        }
        TrailActor.SetPathTarget(ActiveEscortActor);
    }
}

simulated function bool GetIsMissionCritical()
{
    return bIsMissionCriticalObjective;
}

defaultproperties
{
    LocalizationKey="EscortPawnsObjective"
    DescriptionLocKey="EscortPawnsDescription"
    LocalizationPackageName="KFGame"
    bIsMissionCriticalObjective=true
    DefaultIcon=Texture2D'Objectives_UI.UI_Objectives_Xmas_UI_CartObjective'
    GameModeBlacklist(0)=class'KFGameInfo_Endless'
    GameModeBlacklist(1)=class'KFGameInfo_WeeklySurvival'
    PerPlayerSpawnRateMod(0)=1
    PerPlayerSpawnRateMod(1)=1
    PerPlayerSpawnRateMod(2)=1
    PerPlayerSpawnRateMod(3)=1
    PerPlayerSpawnRateMod(4)=1
    PerPlayerSpawnRateMod(5)=1
    PoorHealthPctThreshold=0.5
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__KFMapObjective_EscortPawns.Sprite'
    Components(0)=Sprite
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bAlwaysRelevant=true
}