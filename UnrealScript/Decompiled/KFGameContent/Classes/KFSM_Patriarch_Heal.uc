/*******************************************************************************
 * KFSM_Patriarch_Heal generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Patriarch_Heal extends KFSM_PlaySingleAnim;

var KFPawn_ZedPatriarch MyPatPawn;
var int BattlePhase;
var array<name> HealAnimNames;

static function byte PackSMFlags(int inBattlePhase)
{
    return byte(inBattlePhase - 1);
}

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    MyPatPawn = KFPawn_ZedPatriarch(KFPOwner);
    BattlePhase = MyPatPawn.SpecialMoveFlags;
    AnimName = HealAnimNames[BattlePhase];
    super.SpecialMoveStarted(bForced, PrevMove);
    MyPatPawn.SetTimer(KFSkeletalMeshComponent(MyPatPawn.Mesh).GetAnimInterruptTime(AnimName), false, 'DoHeal', self);
    MyPatPawn.RotationRate = rot(0, 0, 0);
}

function DoHeal()
{
    local float HealPercent;
    local int HealAmount, MyDifficulty;

    if((MyPatPawn != none) && MyPatPawn.WorldInfo.Game != none)
    {
        MyDifficulty = MyPatPawn.WorldInfo.Game.GetModifiedGameDifficulty();
        HealPercent = MyPatPawn.BattlePhases[BattlePhase].HealAmounts[MyDifficulty];
        HealPercent *= (1 + ((FRand() < 0.5) ? float(-Rand(50)) * 0.001 : float(Rand(50)) * 0.001));
        HealAmount = int(float(MyPatPawn.HealthMax) * (HealPercent - MyPatPawn.GetHealthPercentage()));
        if(HealAmount > 0)
        {
            MyPatPawn.HealDamage(HealAmount, MyPatPawn.Controller, Class'KFDT_Healing');
            MyPatPawn.DisablebOnDeathAchivement();
        }
        MyPatPawn.SetFleeAndHealMode(false);
    }
    if(MyPatPawn.WorldInfo.NetMode != NM_DedicatedServer)
    {
        MyPatPawn.ActiveSyringe = MyPatPawn.CurrentSyringeMeshNum;
        MyPatPawn.SyringeInjectTimeRemaining = MyPatPawn.SyringeInjectTimeDuration;
    }
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    if(MyPatPawn != none)
    {
        MyPatPawn.RotationRate = MyPatPawn.default.RotationRate;
        MyPatPawn.ClearTimer('DoHeal');
    }
    super.SpecialMoveEnded(PrevMove, NextMove);
    MyPatPawn = none;
}

defaultproperties
{
    HealAnimNames(0)=Heal_V1
    HealAnimNames(1)=Heal_V2
    HealAnimNames(2)=Heal_V3
    bUseRootMotion=true
    BlendInTime=0.15
    BlendOutTime=0.1
    bDisableMovement=true
    bDisableTurnInPlace=true
    Handle=KFSM_Patriarch_Heal
}