/*******************************************************************************
 * KFSM_Patriarch_MortarAttack generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_Patriarch_MortarAttack extends KFSM_Patriarch_MissileAttack;

var bool bIsBarrage;
var int NumBarrages;
var int MaxBarrages;
var name BarrageFireAnimName;

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    bIsBarrage = MyPatPawn.SpecialMoveFlags == 2;
    NumBarrages = 0;
    MyPatPawn.PreMortarAttack();
}

function class<KFProj_Missile_Patriarch> GetProjectileClass()
{
    return MyPatPawn.GetMortarClass();
}

function GetAimDirAndTargetLoc(int MissileNum, Vector MissileLoc, Rotator MissileRot, out Vector AimDir, out Vector TargetLoc)
{
    MyPatPawn.GetMortarAimDirAndTargetLoc(MissileNum, MissileLoc, MissileRot, AimDir, TargetLoc, InitialMissileSpeed);
}

function PlayFireAnimation()
{
    local AnimNodeSequence AnimNodeSeq;

    if(MyPatPawn == none)
    {
        return;
    }
    if(bIsBarrage)
    {
        BlendOutTime = 0;
        AnimName = BarrageFireAnimName;        
    }
    else
    {
        AnimName = default.AnimName;
    }
    bUseRootMotion = false;
    DisableRootMotion();
    MyPatPawn.RotationRate = MissileFireRotationRate;
    AnimStance = 1;
    PlaySpecialMoveAnim(AnimName, AnimStance, 0, BlendOutTime, 1);
    AnimNodeSeq = MyPatPawn.BodyStanceNodes[AnimStance].GetCustomAnimNodeSeq();
    if(AnimNodeSeq != none)
    {
        AnimNodeSeq.SetPosition(0, false);
    }
    if(MyPatPawn.Role == ROLE_Authority)
    {
        FireMissiles();
    }
    MyPatPawn.PostAkEventOnBone(FireSound, 'BarrelSpinner', true, true);
    MyPatPawn.ZeroMovementVariables();
    if(bIsBarrage && !MyPatPawn.IsTimerActive('Timer_FireBarrage', self))
    {
        MyPatPawn.SetTimer(0.75, true, 'Timer_FireBarrage', self);
    }
}

function FireMissiles()
{
    if(MyPatPawn != none)
    {
        if(!bIsBarrage)
        {
            MyPatPawn.ClearMortarTargets();
            MyPatPawn.CollectMortarTargets(true, true);
        }
        MyPatPawn.CollectMortarTargets();
        if(MyPatPawn.MortarTargets.Length == 0)
        {
            MyPatPawn.EndSpecialMove();
            return;
        }
    }
    super.FireMissiles();
    MyPatPawn.ClearMortarTargets();
}

function Timer_FireBarrage()
{
    ++ NumBarrages;
    MyPatPawn.CollectMortarTargets(true, true);
    if(NumBarrages >= MaxBarrages)
    {
        MyPatPawn.ClearTimer('Timer_FireBarrage', self);
        bIsBarrage = false;
        AnimName = default.AnimName;
        BlendOutTime = default.BlendOutTime;
    }
    PlayFireAnimation();
}

function AnimEndNotify(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
    if(MyPatPawn.IsTimerActive('Timer_FireBarrage', self))
    {
        return;
    }
    super.AnimEndNotify(SeqNode, PlayedTime, ExcessTime);
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    if(MyPatPawn != none)
    {
        MyPatPawn.ClearTimer('Timer_FireBarrage', self);
        MyPatPawn.RotationRate = MyPatPawn.default.RotationRate;
        MyPatPawn.ClearMortarTargets();
    }
    super.SpecialMoveEnded(PrevMove, NextMove);
}

defaultproperties
{
    MaxBarrages=5
    BarrageFireAnimName=Mortar_rapidfire
    MissileClass=Class'KFProj_Mortar_Patriarch'
    LoadAnimNames[0]=Mortar_TO_Load
    LoadAnimNames[1]=Mortar_TO_LoadQ
    bAllowGunTracking=false
    bMissileFlocking=false
    SeekDelay=0.1
    SeekForce=25
    FireSound=AkEvent'WW_ZED_Patriarch.Play_Mortar_Shot'
    AnimName=Mortar_Shoot
    bDisableSteering=true
    bDisableTurnInPlace=true
    Handle=KFSM_Patriarch_MortarAttack
}