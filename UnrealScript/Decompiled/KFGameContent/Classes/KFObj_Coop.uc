/*******************************************************************************
 * KFObj_Coop generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFObj_Coop extends KFObjective
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var int ObjDoshReward;
var int ObjExpReward;

simulated function HideObj();

function CheckEndConditions();

simulated function DrawObjectiveTargets(Canvas C)
{
    local Vector ScreenPos;
    local string Distance;
    local KFPawn_Human KFPH, MyKFPH;
    local KFPlayerController KFPC;
    local float Dim, StringSizeX, StringSizeY;

    Dim = 48;
    C.SetDrawColor(0, 230, 255);
    foreach LocalPlayerControllers(Class'KFPlayerController', KFPC)
    {
        MyKFPH = KFPawn_Human(KFPC.Pawn);
        if(MyKFPH != none)
        {
            break;
        }        
    }    
    if(MyKFPH.bObjectivePlayer)
    {
        return;
    }
    foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
    {
        if(KFPH.bObjectivePlayer && KFPH.IsAliveAndWell())
        {
            ScreenPos = C.Project(KFPH.Location);
            if(ScreenPos.Z > float(0))
            {
                if(ScreenPos.X >= C.ClipX)
                {
                    ScreenPos.X = C.ClipX - (Dim / float(2));                    
                }
                else
                {
                    if(ScreenPos.X <= float(0))
                    {
                        ScreenPos.X = Dim / float(2);
                    }
                }                
            }
            else
            {
                if(ScreenPos.X >= float(C.SizeX / 2))
                {
                    ScreenPos.X = Dim / float(2);                    
                }
                else
                {
                    ScreenPos.X = C.ClipX - (Dim / float(2));
                }
            }
            if(ScreenPos.Y >= C.ClipY)
            {
                ScreenPos.Y = C.ClipY - (Dim / float(2));                
            }
            else
            {
                if(ScreenPos.Y <= float(0))
                {
                    ScreenPos.Y = Dim / float(2);
                }
            }
            Distance = string(Round(VSize(KFPH.Location - MyKFPH.Location) / float(100))) $ "m";
            C.StrLen(Distance, StringSizeX, StringSizeY);
            C.SetPos(ScreenPos.X - (Dim / float(2)), ScreenPos.Y - (Dim / float(2)));
            C.DrawTile(ObjWorldTex, Dim, Dim, 0, 0, 256, 256);
            C.SetPos(ScreenPos.X - (StringSizeX / float(2)), ScreenPos.Y + (Dim / float(2)));
            C.DrawText(Distance, false);
        }        
    }    
    C.Reset();
}

defaultproperties
{
    bIsCoopObjective=true
}