/*******************************************************************************
 * KFWeapAttach_HRG_BarrierRifle generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_HRG_BarrierRifle extends KFWeaponAttachment
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

var protected transient bool bActivatingShield;
var protected transient float FXDelta;
var protected transient float ShieldFXDuration;
var protected transient float OverlayDelta;
var protected transient float OverlayMax;
var protected transient float OverlayMin;
var protected transient float ShieldBlockVFXDuration;

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    if(WorldInfo.NetMode == NM_DedicatedServer)
    {
        return;
    }
    ShieldFXDuration = Class'KFWeap_HRG_BarrierRifle'.default.ShieldFXDuration;
    OverlayMax = Class'KFWeap_HRG_BarrierRifle'.default.RedOverlayMax;
    OverlayMin = Class'KFWeap_HRG_BarrierRifle'.default.RedOverlayMin;
    ShieldBlockVFXDuration = Class'KFWeap_HRG_BarrierRifle'.default.ShieldBlockVFXDuration;
    UpdateShieldFXValue(0);
}

simulated function UpdateShieldFXValue(float Value)
{
    if((WeaponMIC == none) && WeapMesh != none)
    {
        WeaponMIC = WeapMesh.CreateAndSetMaterialInstanceConstant(0);
    }
    WeaponMIC.SetScalarParameterValue('Opacity', Value);
}

unreliable client simulated function SetShieldActive(bool bActive)
{
    bActivatingShield = bActive;
}

function OnSpecialEvent(int Arg)
{
    if(Arg < 2)
    {
        SetShieldActive(((Arg == 1) ? true : false));        
    }
    else
    {
        if(Arg == 3)
        {
            UpdateShieldBlockVFX(OverlayMax);
            OverlayDelta = OverlayMax;
        }
    }
}

simulated function UpdateShieldBlockVFX(float Value)
{
    if((WeaponMIC == none) && WeapMesh != none)
    {
        WeaponMIC = WeapMesh.CreateAndSetMaterialInstanceConstant(0);
    }
    WeaponMIC.SetScalarParameterValue('RedOverlay', Value);
}

simulated event Tick(float DeltaTime)
{
    if(bActivatingShield && FXDelta < Class'KFWeap_HRG_BarrierRifle'.default.ShieldFXDuration)
    {
        FXDelta = FMin(FXDelta + DeltaTime, ShieldFXDuration);
        UpdateShieldFXValue(FXDelta / ShieldFXDuration);        
    }
    else
    {
        if(!bActivatingShield && FXDelta > 0)
        {
            FXDelta = FMax(FXDelta - DeltaTime, 0);
            UpdateShieldFXValue(FXDelta / ShieldFXDuration);
        }
    }
    if(OverlayDelta > 0)
    {
        OverlayDelta = FMax(OverlayDelta - DeltaTime, OverlayMin);
        UpdateShieldBlockVFX(OverlayMax * (OverlayDelta / ShieldBlockVFXDuration));
    }
}

defaultproperties
{
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_HRG_BarrierRifle.SkeletalMeshComponent0.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_HRG_BarrierRifle.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}