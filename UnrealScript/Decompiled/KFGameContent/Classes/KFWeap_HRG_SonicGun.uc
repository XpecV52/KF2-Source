/*******************************************************************************
 * KFWeap_HRG_SonicGun generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_HRG_SonicGun extends KFWeapon
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

struct MomentumMultiplierByZed
{
    var name ZedClassName;
    var float MomentumMultiplier;

    structdefaultproperties
    {
        ZedClassName=None
        MomentumMultiplier=0
    }
};

var(Animations) const editconst name ChargeAnim;
var(Animations) const editconst name ChargeAnimLast;
var(Animations) const editconst name ChargeAnimIron;
var(Animations) const editconst name ChargeAnimIronLast;
/** How long to wait after firing to force reload */
var() float ForceReloadTime;
var transient int CurrentChargeLevel;
var int MaxChargeLevel;
var array<float> SonicBlastDamageByChargeLevel;
var array<float> SonicBlastMomentumByChargeLevel;
var array<float> SonicBlastPenetrationPowerByChargeLevel;
var array< class<DamageType> > SonicBlastDamageTypeByChargeLevel;
var array< class<KFProjectile> > SonicBlastProjectileClassByChargeLevel;
var array<WeaponFireSndInfo> SonicBlastFireSoundByChargeLevel;
var array<WeaponFireSndInfo> SonicBlastFireSoundCharge;
var array<AkEvent> ChargeSoundByChargeLevel;
/** How much momentum to apply when fired in double barrel */
var(Recoil) float FullyChargedKickMomentum;
/** How much to reduce shoot momentum when falling */
var(Recoil) float FallingMomentumReduction;
var ParticleSystem MuzzleEffectDefaultFire;
var ParticleSystem MuzzleEffectChargedFire;
var array<MomentumMultiplierByZed> MomentumMultiplierByZedArray;
var const array<LinearColor> HolographicSightByChargeLevel;
var const array<LinearColor> HolographicSightScanlineByChargeLevel;
var array<bool> HolographicSightUseDefaultByChargeLevel;

simulated function PostBeginPlay()
{
    CurrentChargeLevel = 0;
    if(WeaponMICs.Length > 1)
    {
        if(!HolographicSightUseDefaultByChargeLevel[0])
        {
            WeaponMICs[1].SetVectorParameterValue('Vector_Center_Color_A', HolographicSightByChargeLevel[0]);
            WeaponMICs[1].SetVectorParameterValue('Vector_Scanline_Color_Mult', HolographicSightScanlineByChargeLevel[0]);            
        }
        else
        {
            WeaponMICs[1].ClearParameterValues();
        }
    }
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    StartFire(1);
}

simulated function Projectile ProjectileFire()
{
    local Projectile P;

    P = super.ProjectileFire();
    return P;
}

simulated function name GetReloadAnimName(bool bTacticalReload)
{
    if(AmmoCount[0] > 0)
    {
        return ((bTacticalReload) ? 'Reload_Half_Elite' : 'Reload_Half');        
    }
    else
    {
        return ((bTacticalReload) ? 'Reload_Empty_Elite' : 'Reload_Empty');
    }
}

simulated function StartFire(byte FireModeNum)
{
    if(FireModeNum == 1)
    {
        if(!IsCanIncrementCharge())
        {
            return;
        }
    }
    super.StartFire(FireModeNum);
}

simulated function GotoActiveState();

simulated function bool ShouldPlayFireLast(byte FireModeNum)
{
    return super.ShouldPlayFireLast(FireModeNum);
}

simulated function bool IsCanIncrementCharge()
{
    return (CurrentChargeLevel < MaxChargeLevel) && AmmoCount[0] > 0;
}

simulated function IncrementChargeAndPlayAnimation()
{
    local name SelectedAnim;
    local float AnimDuration;
    local bool bInSprintState;

    if(bUsingSights)
    {
        SelectedAnim = ((ShouldPlayFireLast(0)) ? ChargeAnimIronLast : ChargeAnimIron);        
    }
    else
    {
        SelectedAnim = ((ShouldPlayFireLast(0)) ? ChargeAnimLast : ChargeAnim);
    }
    AnimDuration = MySkelMesh.GetAnimLength(SelectedAnim);
    bInSprintState = IsInState('WeaponSprinting');
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(KFPawn(Owner).IsLocallyControlled())
        {
            PlaySoundBase(SonicBlastFireSoundCharge[CurrentChargeLevel].FirstPersonCue);
        }
        if(bInSprintState)
        {
            AnimDuration *= 0.25;
            PlayAnimation(SelectedAnim, AnimDuration);            
        }
        else
        {
            PlayAnimation(SelectedAnim);
        }
    }
    AnimDuration = 0.75;
    if(bInSprintState)
    {
        SetTimer(AnimDuration * 0.8, false, 'PlaySprintStart');        
    }
    else
    {
        SetTimer(AnimDuration * 0.5, false, 'GotoActiveState');
    }
    ++ CurrentChargeLevel;
    if(WeaponMICs.Length > 1)
    {
        if(!HolographicSightUseDefaultByChargeLevel[CurrentChargeLevel])
        {
            WeaponMICs[1].SetVectorParameterValue('Vector_Center_Color_A', HolographicSightByChargeLevel[CurrentChargeLevel]);
            WeaponMICs[1].SetVectorParameterValue('Vector_Scanline_Color_Mult', HolographicSightScanlineByChargeLevel[CurrentChargeLevel]);            
        }
        else
        {
            WeaponMICs[1].ClearParameterValues();
        }
    }
}

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    return 6;
}

simulated function float GetForceReloadDelay()
{
    return FMax(ForceReloadTime - FireInterval[CurrentFireMode], 0);
}

simulated function KFProjectile SpawnProjectile(class<KFProjectile> KFProjClass, Vector RealStartLoc, Vector AimDir)
{
    local KFProjectile SpawnedProjectile;
    local int ProjDamage;

    SpawnedProjectile = Spawn(KFProjClass, self,, RealStartLoc,,, true);
    if((SpawnedProjectile != none) && !SpawnedProjectile.bDeleteMe)
    {
        if((InstantHitDamage.Length > CurrentFireMode) && InstantHitDamageTypes.Length > CurrentFireMode)
        {
            InstantHitDamage[0] = SonicBlastDamageByChargeLevel[CurrentChargeLevel];
            InstantHitMomentum[0] = SonicBlastMomentumByChargeLevel[CurrentChargeLevel];
            InstantHitDamageTypes[0] = SonicBlastDamageTypeByChargeLevel[CurrentChargeLevel];
            ProjDamage = GetModifiedDamage(CurrentFireMode);
            SpawnedProjectile.Damage = float(ProjDamage);
            SpawnedProjectile.MyDamageType = InstantHitDamageTypes[0];
        }
        PenetrationPower[0] = SonicBlastPenetrationPowerByChargeLevel[CurrentChargeLevel];
        SpawnedProjectile.InitialPenetrationPower = GetInitialPenetrationPower(CurrentFireMode);
        SpawnedProjectile.PenetrationPower = SpawnedProjectile.InitialPenetrationPower;
        SpawnedProjectile.UpgradeDamageMod = GetUpgradeDamageMod();
        SpawnedProjectile.Init(AimDir);
    }
    return SpawnedProjectile;
}

simulated function class<KFProjectile> GetKFProjectileClass()
{
    if(CurrentFireMode == 0)
    {
        return SonicBlastProjectileClassByChargeLevel[CurrentChargeLevel];
    }
    return super.GetKFProjectileClass();
}

simulated function float GetUpgradedPenetration(optional int FireMode, optional int UpgradeIndex)
{
    FireMode = 0;
    UpgradeIndex = -1;
    if(UpgradeIndex == -1)
    {
        UpgradeIndex = CurrentWeaponUpgradeIndex;
    }
    return float(int(GetUpgradedStatValue(PenetrationPower[FireMode], byte(17 + UpgradeFireModes[FireMode]), UpgradeIndex)));
}

simulated function PlayFireEffects(byte FireModeNum, optional Vector HitLocation)
{
    WeaponFireSnd[0] = SonicBlastFireSoundByChargeLevel[CurrentChargeLevel];
    super.PlayFireEffects(FireModeNum, HitLocation);
}

simulated function ProcessInstantHitEx(byte FiringMode, ImpactInfo Impact, optional int NumHits, optional out float out_PenetrationVal, optional int ImpactNum)
{
    local KFPerk InstigatorPerk;
    local int IndexMomentumMultiplierByZed;

    InstigatorPerk = GetPerk();
    if(InstigatorPerk != none)
    {
        InstigatorPerk.UpdatePerkHeadShots(Impact, InstantHitDamageTypes[FiringMode], ImpactNum);
    }
    if((Impact.HitActor != none) && KFPawn_Monster(Impact.HitActor) != none)
    {
        IndexMomentumMultiplierByZed = MomentumMultiplierByZedArray.Find('ZedClassName', Impact.HitActor.Class.Name;
        if(IndexMomentumMultiplierByZed != -1)
        {
            InstantHitMomentum[0] *= MomentumMultiplierByZedArray[IndexMomentumMultiplierByZed].MomentumMultiplier;
        }
    }
    super.ProcessInstantHitEx(FiringMode, Impact, NumHits, out_PenetrationVal, ImpactNum);
}

simulated function CauseMuzzleFlash(byte FireModeNum)
{
    if(MuzzleFlash == none)
    {
        AttachMuzzleFlash();
    }
    if(CurrentChargeLevel > 0)
    {
        MuzzleFlash.MuzzleFlash.ParticleSystemTemplate = MuzzleEffectChargedFire;
        MuzzleFlash.MuzzleFlash.PSC.SetTemplate(MuzzleEffectChargedFire);        
    }
    else
    {
        MuzzleFlash.MuzzleFlash.ParticleSystemTemplate = MuzzleEffectDefaultFire;
        MuzzleFlash.MuzzleFlash.PSC.SetTemplate(MuzzleEffectDefaultFire);
    }
    super.CauseMuzzleFlash(FireModeNum);
}

simulated state WeaponSonicGunCharging
{
    ignores AllowSprinting;

    simulated event BeginState(name PreviousStateName)
    {
        local KFPerk InstigatorPerk;

        if(!IsCanIncrementCharge())
        {
            ClearPendingFire(CurrentFireMode);
            GotoActiveState();
            return;
        }
        InstigatorPerk = GetPerk();
        if(InstigatorPerk != none)
        {
            SetZedTimeResist(InstigatorPerk.GetZedTimeModifier(self));
        }
        IncrementChargeAndPlayAnimation();
    }

    simulated function GotoActiveState()
    {
        GotoState('Active');
    }
    stop;    
}

simulated state WeaponSonicGunSingleFiring extends WeaponSingleFiring
{
    simulated function BeginState(name PreviousStateName)
    {
        local Vector UsedKickMomentum;

        if((Instigator != none) && CurrentChargeLevel == 1)
        {
            UsedKickMomentum.X = -FullyChargedKickMomentum;
            if(Instigator.Physics == 2)
            {
                UsedKickMomentum = UsedKickMomentum >> Instigator.GetViewRotation();
                UsedKickMomentum *= FallingMomentumReduction;                
            }
            else
            {
                UsedKickMomentum = UsedKickMomentum >> Instigator.Rotation;
                UsedKickMomentum.Z = 0;
            }
            Instigator.AddVelocity(UsedKickMomentum, Instigator.Location, none);
        }
        super(WeaponFiring).BeginState(PreviousStateName);
    }

    simulated function FireAmmunition()
    {
        super.FireAmmunition();
        CurrentChargeLevel = 0;
        if(WeaponMICs.Length > 1)
        {
            if(!HolographicSightUseDefaultByChargeLevel[0])
            {
                WeaponMICs[1].SetVectorParameterValue('Vector_Center_Color_A', HolographicSightByChargeLevel[0]);
                WeaponMICs[1].SetVectorParameterValue('Vector_Scanline_Color_Mult', HolographicSightScanlineByChargeLevel[0]);                
            }
            else
            {
                WeaponMICs[1].ClearParameterValues();
            }
        }
    }
    stop;    
}

defaultproperties
{
    ChargeAnim=Alt_Fire
    ChargeAnimLast=Alt_Fire_Last
    ChargeAnimIron=Alt_Fire_Iron
    ChargeAnimIronLast=Alt_Fire_Iron_Last
    ForceReloadTime=0.3
    MaxChargeLevel=1
    SonicBlastDamageByChargeLevel(0)=110
    SonicBlastDamageByChargeLevel(1)=280
    SonicBlastMomentumByChargeLevel(0)=100000
    SonicBlastMomentumByChargeLevel(1)=40000
    SonicBlastPenetrationPowerByChargeLevel(0)=4
    SonicBlastPenetrationPowerByChargeLevel(1)=2
    SonicBlastDamageTypeByChargeLevel(0)=class'KFDT_Ballistic_HRG_SonicGun_SonicBlastUncharged'
    SonicBlastDamageTypeByChargeLevel(1)=class'KFDT_Ballistic_HRG_SonicGun_SonicBlastFullyCharged'
    SonicBlastProjectileClassByChargeLevel(0)=class'KFProj_SonicBlastUncharged_HRG_SonicGun'
    SonicBlastProjectileClassByChargeLevel(1)=class'KFProj_SonicBlastFullyCharged_HRG_SonicGun'
    SonicBlastFireSoundByChargeLevel(0)=(DefaultCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_3P_Fire_Bass',FirstPersonCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_1P_Fire_Bass')
    SonicBlastFireSoundByChargeLevel(1)=(DefaultCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_3P_Fire_High',FirstPersonCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_1P_Fire_High')
    SonicBlastFireSoundCharge(0)=(DefaultCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_Charge_Once',FirstPersonCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_Charge_Once')
    SonicBlastFireSoundCharge(1)=(DefaultCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_Charge_Twice',FirstPersonCue=AkEvent'WW_WEP_HRG_SonicGun.Play_WEP_HRG_SonicGun_Charge_Twice')
    ChargeSoundByChargeLevel(0)=AkEvent'WW_WEP_Seeker_6.Play_Seeker_6_Reload_1'
    ChargeSoundByChargeLevel(1)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LaserCutter_Handling_Equip'
    FallingMomentumReduction=0.5
    MuzzleEffectDefaultFire=ParticleSystem'WEP_HRG_SonicGun_EMIT.FX_SonicGun_Muzzle'
    MuzzleEffectChargedFire=ParticleSystem'WEP_HRG_SonicGun_EMIT.FX_SonicGun_Muzzle_AltFire'
    MomentumMultiplierByZedArray(0)=(ZedClassName=KFPawn_ZedClot_Cyst,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(1)=(ZedClassName=KFPawn_ZedClot_Alpha,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(2)=(ZedClassName=KFPawn_ZedClot_Slasher,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(3)=(ZedClassName=KFPawn_ZedCrawler,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(4)=(ZedClassName=KFPawn_ZedGorefast,MomentumMultiplier=1.2)
    MomentumMultiplierByZedArray(5)=(ZedClassName=KFPawn_ZedStalker,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(6)=(ZedClassName=KFPawn_ZedScrake,MomentumMultiplier=1.2)
    MomentumMultiplierByZedArray(7)=(ZedClassName=KFPawn_ZedFleshpound,MomentumMultiplier=1.3)
    MomentumMultiplierByZedArray(8)=(ZedClassName=KFPawn_ZedFleshpoundMini,MomentumMultiplier=1.3)
    MomentumMultiplierByZedArray(9)=(ZedClassName=KFPawn_ZedBloat,MomentumMultiplier=1.7)
    MomentumMultiplierByZedArray(10)=(ZedClassName=KFPawn_ZedSiren,MomentumMultiplier=0.8)
    MomentumMultiplierByZedArray(11)=(ZedClassName=KFPawn_ZedHusk,MomentumMultiplier=0.8)
    MomentumMultiplierByZedArray(12)=(ZedClassName=KFPawn_ZedClot_AlphaKing,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(13)=(ZedClassName=KFPawn_ZedCrawlerKing,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(14)=(ZedClassName=KFPawn_ZedGorefastDualBlade,MomentumMultiplier=1.3)
    MomentumMultiplierByZedArray(15)=(ZedClassName=KFPawn_ZedDAR_EMP,MomentumMultiplier=1.4)
    MomentumMultiplierByZedArray(16)=(ZedClassName=KFPawn_ZedDAR_Laser,MomentumMultiplier=1.4)
    MomentumMultiplierByZedArray(17)=(ZedClassName=KFPawn_ZedDAR_Rocket,MomentumMultiplier=1.4)
    MomentumMultiplierByZedArray(18)=(ZedClassName=KFPawn_ZedBloatKingSubspawn,MomentumMultiplier=1)
    MomentumMultiplierByZedArray(19)=(ZedClassName=KFPawn_ZedHans,MomentumMultiplier=1.2)
    MomentumMultiplierByZedArray(20)=(ZedClassName=KFPawn_ZedPatriarch,MomentumMultiplier=1.2)
    MomentumMultiplierByZedArray(21)=(ZedClassName=KFPawn_ZedFleshpoundKing,MomentumMultiplier=1.2)
    MomentumMultiplierByZedArray(22)=(ZedClassName=KFPawn_ZedBloatKing,MomentumMultiplier=1.2)
    MomentumMultiplierByZedArray(23)=(ZedClassName=KFPawn_ZedMatriarch,MomentumMultiplier=1.2)
    HolographicSightByChargeLevel(0)=
/* Exception thrown while deserializing HolographicSightByChargeLevel
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    HolographicSightByChargeLevel(1)=
/* Exception thrown while deserializing HolographicSightByChargeLevel
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    HolographicSightScanlineByChargeLevel(0)=
/* Exception thrown while deserializing HolographicSightScanlineByChargeLevel
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    HolographicSightScanlineByChargeLevel(1)=
/* Exception thrown while deserializing HolographicSightScanlineByChargeLevel
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    HolographicSightUseDefaultByChargeLevel(0)=
/* Exception thrown while deserializing HolographicSightUseDefaultByChargeLevel
System.InvalidOperationException: Nullable object must have a value.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    HolographicSightUseDefaultByChargeLevel(1)=
/* Exception thrown while deserializing HolographicSightUseDefaultByChargeLevel
System.InvalidOperationException: Nullable object must have a value.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    PackageKey="HRG_SonicGun"
    FirstPersonMeshName="wep_1p_hrg_sonicgun_mesh.WEP_1stP_HRG_SonicGun_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="wep_3p_hrg_sonicgun_mesh.WEP_3rdP_HRG_SonicGun_Pickup"
    AttachmentArchetypeName="wep_hrg_sonicgun_arch.Wep_HRG_SonicGun_3P"
    MuzzleFlashTemplateName="WEP_HRG_SonicGun_ARCH.Wep_HRG_SonicGun_MuzzleFlash"
    bHasIronSights=true
    bWarnAIWhenAiming=true
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=true
    InventorySize=7
    PenetrationPower=/* Array type was not detected. */
    MeshFOV=75
    MeshIronSightFOV=40
    PlayerIronSightFOV=65
    IronSightPosition=(X=10,Y=-0.1,Z=-0.2)
    DOF_FG_MaxNearBlurSize=3.5
    AimWarningDelay=(X=0.4,Y=0.8)
    GroupPriority=75
    WeaponSelectTexture=Texture2D'WEP_UI_HRG_SonicGun_TEX.UI_WeaponSelect_HRG_SonicGun'
    MagazineCapacity=12
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=96
    InitialSpareMags=1
    WeaponFireWaveForm=ForceFeedbackWaveform'FX_ForceFeedback_ARCH.Gunfire.Medium_Recoil'
    FireSightedAnims=/* Array type was not detected. */
    BonesToLockOnEmpty=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=11,Y=8,Z=-2)
    NumBloodMapMaterials=2
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_HRG_SonicGun.MeleeHelper'
    EjectedShellForegroundDuration=1.5
    maxRecoilPitch=200
    minRecoilPitch=150
    maxRecoilYaw=50
    minRecoilYaw=-50
    RecoilRate=0.08
    RecoilViewRotationScale=0.6
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=1250
    RecoilMinPitchLimit=64785
    RecoilISMaxYawLimit=50
    RecoilISMinYawLimit=65485
    RecoilISMaxPitchLimit=500
    RecoilISMinPitchLimit=65485
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitMomentum=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=3,Z=-2.5)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_HRG_SonicGun.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Beluga Beat"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_SonicGun.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_SonicGun.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}