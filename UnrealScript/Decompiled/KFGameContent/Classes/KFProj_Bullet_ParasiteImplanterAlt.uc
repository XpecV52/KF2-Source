/*******************************************************************************
 * KFProj_Bullet_ParasiteImplanterAlt generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Bullet_ParasiteImplanterAlt extends KFProjectile
    hidecategories(Navigation);

var float FuseTime;
/** This is the effect indicator that is played for the current user */
var(Projectile) ParticleSystem ProjIndicatorTemplate;
var export editinline ParticleSystemComponent ProjIndicatorEffects;
var bool IndicatorActive;
var transient bool bShouldEnableIndicator;
var class<GameExplosionActor> HumanExplosionActorClass;
var KFGameExplosion HumanExplosionTemplate;
var private AkEvent SeedTimerOutEvent;

simulated function TryActivateIndicator()
{
    if(!IndicatorActive && Instigator != none)
    {
        IndicatorActive = true;
        if(((WorldInfo.NetMode == NM_Standalone) || Instigator.Role == ROLE_AutonomousProxy) || ((Instigator.Role == ROLE_Authority) && WorldInfo.NetMode == NM_ListenServer) && Instigator.IsLocallyControlled())
        {
            if(ProjIndicatorTemplate != none)
            {
                ProjIndicatorEffects = WorldInfo.MyEmitterPool.SpawnEmitterCustomLifetime(ProjIndicatorTemplate);
            }
            if(ProjIndicatorEffects != none)
            {
                ProjIndicatorEffects.SetAbsolute(false, false, false);
                ProjIndicatorEffects.SetLODLevel(((WorldInfo.bDropDetail) ? 1 : 0));
                ProjIndicatorEffects.bUpdateComponentInTick = true;
                AttachComponent(ProjIndicatorEffects);
            }
        }
    }
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    if(Role == ROLE_Authority)
    {
        SetTimer(FuseTime, false, 'Timer_Detonate');
    }
    AdjustCanDisintigrate();
}

function Timer_Detonate()
{
    Detonate();
}

simulated function OnInstigatorControllerLeft()
{
    if(WorldInfo.NetMode != NM_Client)
    {
        SetTimer((1 + float(Rand(5))) + FRand(), false, 'Timer_Detonate');
    }
}

simulated function GetExplodeEffectLocation(out Vector HitLocation, out Vector HitRotation, out Actor HitActor)
{
    local Vector EffectStartTrace, EffectEndTrace;
    local TraceHitInfo HitInfo;

    EffectStartTrace = Location + (vect(0, 0, 1) * 4);
    EffectEndTrace = EffectStartTrace - (vect(0, 0, 1) * 32);
    HitActor = Trace(HitLocation, HitRotation, EffectEndTrace, EffectStartTrace, false,, HitInfo, 1);
    if(IsZero(HitLocation))
    {
        HitLocation = Location;
    }
    if(IsZero(HitRotation))
    {
        HitRotation = vect(0, 0, 1);
    }
}

simulated event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    StickHelper.Tick(DeltaTime);
    if(!IsZero(Velocity))
    {
        SetRelativeRotation(rotator(Velocity));
    }
    if(bShouldEnableIndicator)
    {
        TryActivateIndicator();
    }
}

simulated function Explode(Vector HitLocation, Vector HitNormal)
{
    StickHelper.UnPin();
    super.Explode(HitLocation, HitNormal);
}

simulated function SyncOriginalLocation()
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal;
    local TraceHitInfo HitInfo;

    if(((Role < ROLE_Authority) && Instigator != none) && Instigator.IsLocallyControlled())
    {
        HitActor = Trace(HitLocation, HitNormal, OriginalLocation, Location,,, HitInfo, 1);
        if(HitActor != none)
        {
            StickHelper.TryStick(HitNormal, HitLocation, HitActor);
        }
    }
}

protected simulated function StopSimulating()
{
    super.StopSimulating();
    if(ProjIndicatorEffects != none)
    {
        ProjIndicatorEffects.DeactivateSystem();
    }
}

function Detonate()
{
    local KFPawn_Monster KFPM;

    if(StuckToActor != none)
    {
        KFPM = KFPawn_Monster(StuckToActor);
        if(KFPM != none)
        {
            KFPM.ParasiteSeeds.RemoveItem(self;
        }
    }
    StickHelper.UnPin();
    ShutDown();
}

simulated function OnActorSticked(Actor TargetActor)
{
    local KFPawn_Monster KFPM;

    KFPM = KFPawn_Monster(TargetActor);
    if(KFPM != none)
    {
        if(Role == ROLE_Authority)
        {
            KFPM.AddParasiteSeed(self);
            PlaySoundBase(SeedTimerOutEvent, false, false);
        }
        if((WorldInfo.NetMode == NM_Client) || WorldInfo.NetMode == NM_Standalone)
        {
            bShouldEnableIndicator = true;
        }
    }
}

simulated function ExplodeOnHuman(Vector HitLocation, Vector HitNormal, Actor HitActor)
{
    local Vector NudgedHitLocation, ExplosionDirection;

    if(HumanExplosionTemplate != none)
    {
        StopSimulating();
        NudgedHitLocation = HitLocation + (HitNormal * 32);
        ExplosionActor = Spawn(HumanExplosionActorClass, self,, NudgedHitLocation, rotator(HitNormal));
        if(ExplosionActor != none)
        {
            ExplosionActor.Instigator = Instigator;
            ExplosionActor.InstigatorController = InstigatorController;
            PrepareExplosionTemplate();
            if(IsZero(HitLocation))
            {
                HitLocation = Location;
            }
            if(IsZero(HitNormal))
            {
                HitNormal = vect(0, 0, 1);
            }
            HumanExplosionTemplate.HitLocation = HitLocation;
            HumanExplosionTemplate.HitNormal = HitNormal;
            if(bAttachExplosionToHitMover && InterpActor(HitActor) != none)
            {
                ExplosionActor.Attachee = HitActor;
                HumanExplosionTemplate.bAttachExplosionEmitterToAttachee = true;
                ExplosionActor.SetBase(HitActor);
            }
            if(HumanExplosionTemplate.bDirectionalExplosion)
            {
                ExplosionDirection = GetExplosionDirection(HitNormal);
            }
            PrepareExplosionActor(ExplosionActor);
            ExplosionActor.Explode(HumanExplosionTemplate, ExplosionDirection);
        }
        if(!bPendingDelete && !bDeleteMe)
        {
            DeferredDestroy(PostExplosionLifetime);
        }
    }
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    if((KFPawn_Human(Other) != none) && Other != Instigator)
    {
        ExplodeOnHuman(HitLocation, HitNormal, Other);        
    }
    else
    {
        super.ProcessTouch(Other, HitLocation, HitNormal);
    }
}

defaultproperties
{
    FuseTime=6
    ProjIndicatorTemplate=ParticleSystem'WEP_ParasiteImplanter_EMIT.FX_Seed_Projectile_Indicator'
    HumanExplosionActorClass=Class'KFExplosion_ParasiteSeedHuman'
    begin object name=ExploTemplate1 class=KFGameExplosion
        Damage=1
        DamageRadius=100
        DamageFalloffExponent=0.5
        KnockDownStrength=0
        MomentumTransferScale=0
        ExplosionSound=AkEvent'WW_WEP_Medic_GrenadeLauncher.Play_WEP_Medic_GrenadeLauncher_Grenade_Explosion'
        FractureMeshRadius=0
        FracturePartVel=0
        CamShake=none
        CamShakeInnerRadius=0
        CamShakeOuterRadius=0
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFProj_Bullet_ParasiteImplanterAlt.ExploTemplate1'
    HumanExplosionTemplate=ExploTemplate1
    SeedTimerOutEvent=AkEvent'WW_WEP_ParasiteImplanter.Play_WEP_ParasiteImplanter_Seed_Timer_Out'
    bSyncToOriginalLocation=true
    bSyncToThirdPersonMuzzleLocation=true
    bUseClientSideHitDetection=true
    bAlwaysReplicateExplosion=true
    bCanDisintegrate=true
    bWarnAIWhenFired=true
    bCanStick=true
    bCanPin=true
    GlassShatterType=FracturedMeshGlassShatterType.FMGS_ShatterAll
    GravityScale=0
    TerminalVelocity=15000
    ExplosionActorClass=Class'KFExplosion_ParasiteSeed'
    begin object name=ExploTemplate0 class=KFGameExplosion
        Damage=300
        DamageRadius=450
        DamageFalloffExponent=0.5
        MyDamageType=Class'KFDT_Toxic_ParasiteSeedExplosion'
        KnockDownStrength=0
        MomentumTransferScale=0
        ExplosionSound=AkEvent'WW_WEP_Medic_GrenadeLauncher.Play_WEP_Medic_GrenadeLauncher_Grenade_Explosion'
        FractureMeshRadius=0
        FracturePartVel=0
        CamShake=none
        CamShakeInnerRadius=0
        CamShakeOuterRadius=0
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFProj_Bullet_ParasiteImplanterAlt.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    ProjDisintegrateTemplate=ParticleSystem'ZED_Siren_EMIT.FX_Siren_grenade_disable_01'
    ProjFlightTemplate=ParticleSystem'WEP_ParasiteImplanter_EMIT.FX_Seed_Projectile'
    ImpactEffects=KFImpactEffectInfo'WEP_ParasiteImplanter_ARCH.Wep_Parasite_Impact_Alt'
    PinBoneIdx=-1
    StickHelper=KFProjectileStickHelper_ParasiteImplanter'Default__KFProj_Bullet_ParasiteImplanterAlt.StickHelper0'
    Speed=15000
    MaxSpeed=15000
    bBlockedByInstigator=false
    bIgnoreFoliageTouch=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Bullet_ParasiteImplanterAlt.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Bullet_ParasiteImplanterAlt.CollisionCylinder'
    Components(0)=CollisionCylinder
    Physics=EPhysics.PHYS_Falling
    bNetTemporary=false
    bUpdateSimulatedPosition=true
    bCollideComplex=true
    NetUpdateFrequency=200
    NetPriority=5
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Bullet_ParasiteImplanterAlt.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}