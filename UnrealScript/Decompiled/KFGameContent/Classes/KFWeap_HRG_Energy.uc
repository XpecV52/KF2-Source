/*******************************************************************************
 * KFWeap_HRG_Energy generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_HRG_Energy extends KFWeap_PistolBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var class<KFGFxWorld_MedicOptics> OpticsUIClass;
var KFGFxWorld_MedicOptics OpticsUI;
var byte StoredPrimaryAmmo;
var byte StoredSecondaryAmmo;
var transient float AltFireMaxShots;
var float SecondaryFireAnimRateModifier;
var LinearColor DefaultFireMaterialColor;
var LinearColor AltFireMaterialColor;
var protected const float AltFireRecoilScale;

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    AltFireMaxShots = float(MagazineCapacity[0] / AmmoCost[1]);
}

simulated function Activate()
{
    super(KFWeapon).Activate();
    UpdateMaterial(byte(((bUseAltFireMode) ? 1 : 0)));
}

simulated function UpdateMaterial(byte FireMode)
{
    local LinearColor MatColor;

    MatColor = ((FireMode == 0) ? DefaultFireMaterialColor : AltFireMaterialColor);
    if(WeaponMICs.Length > 0)
    {
        WeaponMICs[0].SetVectorParameterValue('Vector_GlowColor', MatColor);
    }
    if(WeaponMICs.Length > 1)
    {
        WeaponMICs[1].SetVectorParameterValue('Color_override', MatColor);
    }
    if(WeaponMICs.Length > 2)
    {
        WeaponMICs[2].SetVectorParameterValue('Vector_GlowColor', MatColor);
    }
}

simulated event Tick(float DeltaTime)
{
    if((Instigator != none) && Instigator.Weapon == self)
    {
        UpdateOpticsUI();
    }
    super(KFWeapon).Tick(DeltaTime);
}

reliable client simulated function ClientWeaponSet(bool bOptionalSet, optional bool bDoNotActivate)
{
    local KFInventoryManager KFIM;

    super(KFWeapon).ClientWeaponSet(bOptionalSet, bDoNotActivate);
    if(OpticsUI == none)
    {
        KFIM = KFInventoryManager(InvManager);
        if(KFIM != none)
        {
            OpticsUI = KFGFxWorld_MedicOptics(KFIM.GetOpticsUIMovie(OpticsUIClass));
        }
    }
}

function ItemRemovedFromInvManager()
{
    local KFInventoryManager KFIM;
    local KFWeap_MedicBase KFW;

    super(KFWeapon).ItemRemovedFromInvManager();
    if(OpticsUI != none)
    {
        KFIM = KFInventoryManager(InvManager);
        if(KFIM != none)
        {
            foreach KFIM.InventoryActors(Class'KFWeap_MedicBase', KFW)
            {
                if(KFW.OpticsUI.Class == OpticsUI.Class)
                {                    
                    return;
                }                
            }            
            KFIM.RemoveOpticsUIMovie(OpticsUI.Class);
            OpticsUI.Close();
            OpticsUI = none;
        }
    }
}

simulated function AttachWeaponTo(SkeletalMeshComponent MeshCpnt, optional name SocketName)
{
    super(KFWeapon).AttachWeaponTo(MeshCpnt, SocketName);
    if(OpticsUI != none)
    {
        OpticsUI.SetPause(false);
        OpticsUI.ClearLockOn();
        UpdateOpticsUI(true);
        OpticsUI.SetShotPercentCost(float(AmmoCost[1]));
    }
}

simulated function DetachWeapon()
{
    local Pawn OwnerPawn;

    super(KFWeapon).DetachWeapon();
    OwnerPawn = Pawn(Owner);
    if((OwnerPawn != none) && OwnerPawn.Weapon == self)
    {
        if(OpticsUI != none)
        {
            OpticsUI.SetPause();
        }
    }
}

simulated function UpdateOpticsUI(optional bool bForceUpdate)
{
    if((OpticsUI != none) && OpticsUI.OpticsContainer != none)
    {
        if((AmmoCount[0] != StoredPrimaryAmmo) || bForceUpdate)
        {
            StoredPrimaryAmmo = byte(AmmoCount[0]);
            OpticsUI.SetPrimaryAmmo(StoredPrimaryAmmo);
            if(AmmoCount[0] < AmmoCost[1])
            {
                OpticsUI.SetHealerCharge(0);                
            }
            else
            {
                OpticsUI.SetHealerCharge(byte((float(AmmoCount[0] / AmmoCost[1]) / AltFireMaxShots) * float(100)));
            }
        }
        if(OpticsUI.MinPercentPerShot != float(AmmoCost[1]))
        {
            OpticsUI.SetShotPercentCost(float(AmmoCost[1]));
        }
    }
}

simulated function bool HasAnyAmmo()
{
    return (((HasSpareAmmo()) || HasAmmo(0)) || HasSpareAmmo(1)) || HasAmmo(1);
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 0) && bUseAltFireMode)
    {
        if((AmmoCount[FireModeNum] < AmmoCost[1]) && SpareAmmoCount[FireModeNum] > 0)
        {
            BeginFire(2);
            return;
        }
    }
    super(KFWeapon).StartFire(FireModeNum);
}

simulated function AltFireMode()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    if(!bUseAltFireMode && (SpareAmmoCount[0] + AmmoCount[0]) < AmmoCost[1])
    {
        return;
    }
    super(KFWeapon).AltFireMode();
    UpdateMaterial(byte(((bUseAltFireMode) ? 1 : 0)));
    NotifyAltFireUsage();
}

simulated function PlayWeaponAnimation(name Sequence, float fDesiredDuration, optional bool bLoop, optional SkeletalMeshComponent SkelMesh)
{
    local float DesiredRate;

    if(((Mesh != none) && Instigator != none) && WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(WeaponAnimSeqNode != none)
        {
            if((WeaponAnimSeqNode.AnimSeq == none) || WeaponAnimSeqNode.AnimSeq.SequenceName != Sequence)
            {
                WeaponAnimSeqNode.SetAnim(Sequence);
            }
            if((fDesiredDuration > 0) && WeaponAnimSeqNode.AnimSeq.RateScale > 0)
            {
                DesiredRate = WeaponAnimSeqNode.AnimSeq.SequenceLength / (fDesiredDuration * WeaponAnimSeqNode.AnimSeq.RateScale);
                WeaponAnimSeqNode.PlayAnim(bLoop, DesiredRate);                
            }
            else
            {
                WeaponAnimSeqNode.PlayAnim(bLoop, DefaultAnimSpeed);
            }
        }
    }
}

simulated function PlayFireEffects(byte FireModeNum, optional Vector HitLocation)
{
    local name WeaponFireAnimName;
    local KFPerk CurrentPerk;
    local float TempTweenTime, AdjustedAnimLength;

    if(((FireModeNum < bLoopingFireSnd.Length) && bLoopingFireSnd[FireModeNum]) && !bPlayingLoopingFireSnd)
    {
        StartLoopingFireSound(FireModeNum);
    }
    PlayFiringSound(CurrentFireMode);
    if(Instigator != none)
    {
        UpdateWeaponAttachmentAnimRate(GetThirdPersonAnimRate());
        if(Instigator.IsLocallyControlled())
        {
            if(Instigator.IsFirstPerson())
            {
                if(!bPlayingLoopingFireAnim)
                {
                    WeaponFireAnimName = GetWeaponFireAnim(FireModeNum);
                    if(WeaponFireAnimName != 'None')
                    {
                        AdjustedAnimLength = MySkelMesh.GetAnimLength(WeaponFireAnimName);
                        TempTweenTime = FireTweenTime;
                        if(FireModeNum == 1)
                        {
                            AdjustedAnimLength *= SecondaryFireAnimRateModifier;
                        }
                        CurrentPerk = GetPerk();
                        if(CurrentPerk != none)
                        {
                            CurrentPerk.ModifyRateOfFire(AdjustedAnimLength, self);
                            if((((EmptyMagBlendNode != none) && BonesToLockOnEmpty.Length > 0) && AmmoCount[GetAmmoType(FireModeNum)] == 0) && CurrentPerk.GetIsUberAmmoActive(self))
                            {
                                EmptyMagBlendNode.SetBlendTarget(0, 0);
                                TempTweenTime = 0;
                            }
                        }
                        PlayAnimation(WeaponFireAnimName, AdjustedAnimLength,, TempTweenTime);
                    }
                }
                CauseMuzzleFlash(FireModeNum);
            }
            HandleRecoil();
            ShakeView();
            if((AmmoCount[0] == 0) && ForceReloadTimeOnEmpty > float(0))
            {
                SetTimer(ForceReloadTimeOnEmpty, false, 'ForceReload');
            }
        }
    }
}

simulated function ModifyRecoil(out float CurrentRecoilModifier)
{
    if(CurrentFireMode == 1)
    {
        CurrentRecoilModifier *= AltFireRecoilScale;
    }
    super(KFWeapon).ModifyRecoil(CurrentRecoilModifier);
}

simulated function NotifyAltFireUsage()
{
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(Instigator);
    if(KFPH != none)
    {
        KFPH.SetUsingAltFireMode(bUseAltFireMode, true);
        KFPH.bNetDirty = true;
    }
}

simulated function name GetReloadAnimName(bool bTacticalReload)
{
    return ((bTacticalReload) ? 'Reload_Half_Elite' : 'Reload_Half');
}

simulated function ConsumeAmmo(byte FireModeNum)
{
    super.ConsumeAmmo(FireModeNum);
    if(bUseAltFireMode && (SpareAmmoCount[0] + AmmoCount[0]) < AmmoCost[1])
    {
        bUseAltFireMode = false;
        UpdateMaterial(0);
        NotifyAltFireUsage();
    }
}

simulated state WeaponEquipping
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if((WorldInfo.NetMode == NM_Client) || WorldInfo.NetMode == NM_Standalone)
        {
            SetTimer(1, false, 'NotifyAltFireUsage');
        }
    }
    stop;    
}

defaultproperties
{
    OpticsUIClass=Class'KFGame.KFGFxWorld_MedicOptics'
    SecondaryFireAnimRateModifier=2
    DefaultFireMaterialColor=(R=0.9,G=0.26,B=0,A=1)
    AltFireMaterialColor=(R=0.7,G=0.04,B=0.9,A=1)
    AltFireRecoilScale=2
    PackageKey="HRG_Energy"
    FirstPersonMeshName="WEP_1P_HRG_Energy_MESH.Wep_1stP_HRG_Energy_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="wep_3p_HRG_Energy_mesh.Wep_HRG_Energy_Pickup"
    AttachmentArchetypeName="WEP_HRG_Energy_ARCH.Wep_HRG_Energy_3P"
    MuzzleFlashTemplateName="WEP_HRG_Energy_ARCH.Wep_HRG_Energy_MuzzleFlash"
    bHasIronSights=true
    bCanRefillSecondaryAmmo=false
    bCanBeReloaded=true
    bReloadFromMagazine=true
    FireModeIconPaths=/* Array type was not detected. */
    InventorySize=4
    PenetrationPower=/* Array type was not detected. */
    MeshIronSightFOV=77
    PlayerIronSightFOV=77
    IronSightPosition=(X=15,Y=0,Z=0)
    DOF_FG_FocalRadius=40
    DOF_FG_MaxNearBlurSize=3.5
    GroupPriority=125
    WeaponSelectTexture=Texture2D'WEP_UI_HRG_Energy_TEX.UI_WeaponSelect_HRG_Energy'
    SecondaryAmmoTexture=Texture2D'UI_SecondaryAmmo_TEX.MedicDarts'
    MagazineCapacity=15
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=120
    InitialSpareMags=2
    FireSightedAnims=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=29,Y=13,Z=-4)
    NumBloodMapMaterials=3
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_HRG_Energy.MeleeHelper'
    maxRecoilPitch=475
    minRecoilPitch=425
    maxRecoilYaw=130
    minRecoilYaw=-130
    RecoilRate=0.07
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=900
    RecoilMinPitchLimit=65035
    RecoilISMaxYawLimit=50
    RecoilISMinYawLimit=65485
    RecoilISMaxPitchLimit=250
    RecoilISMinPitchLimit=65485
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=20,Y=4,Z=-3)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_HRG_Energy.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Disrupter"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_Energy.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_Energy.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}