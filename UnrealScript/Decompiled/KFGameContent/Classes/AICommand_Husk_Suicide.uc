/*******************************************************************************
 * AICommand_Husk_Suicide generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AICommand_Husk_Suicide extends AICommand_SpecialMove within KFAIController_ZedHusk;

static function bool Suicide(KFAIController_ZedHusk AI)
{
    local AICommand_Husk_Suicide Cmd;

    if(AI != none)
    {
        Cmd = new (AI) default.Class;
        if(Cmd != none)
        {
            AI.PushCommand(Cmd);
            return true;
        }
    }
    return false;
}

function Pushed()
{
    super.Pushed();
    Outer.DisableMeleeRangeEventProbing();
    if(Outer.Pawn != none)
    {
        Outer.Pawn.ZeroMovementVariables();
    }
    Outer.MoveTimer = -1;
    Outer.StopAllLatentMovement();
    LockdownAI();
    Outer.AILog_Internal(string(self) @ "Pushed", 'Husk_Suicide');
    Outer.AIActionStatus = "Executing suicide AICommand";
}

function Resumed(name OldCommandName)
{
    Outer.AILog_Internal((string(self) @ "Resumed, previous command: ") $ string(OldCommandName), 'Husk_Suicide');
    super.Resumed(OldCommandName);
    LockdownAI();
}

function Paused(GameAICommand NewCommand)
{
    Outer.AILog_Internal(((string(self) @ "Paused by command") @ string(NewCommand)) $ ", WTF!", 'Husk_Suicide');
    super.Paused(NewCommand);
    UnlockAI();
}

function Popped()
{
    super.Popped();
    Outer.AILog_Internal(string(self) @ "Popped()", 'Husk_Suicide');
    if(Outer.Pawn != none)
    {
        Outer.AIActionStatus = "Finished suicide AICommand, health:" $ string(Outer.Pawn.Health);
    }
}

function KFGame.KFPawn.ESpecialMove GetSpecialMove();

state Command_SpecialMove
{
    function KFGame.KFPawn.ESpecialMove GetSpecialMove()
    {
        return 18;
    }

    function bool ExecuteSpecialMove()
    {
        local KFAIController KFAIC;
        local bool bExecuted;

        bExecuted = super.ExecuteSpecialMove();
        if(bExecuted)
        {
            foreach Outer.WorldInfo.AllControllers(Class'KFAIController', KFAIC)
            {
                if((KFAIC != Outer) && KFAIC.MyKFPawn != none)
                {
                    if(KFAIC.CanSee(Outer.MyKFPawn))
                    {
                        KFAIC.NotifyHuskSuicide(Outer.MyKFPawn);
                    }
                }                
            }            
        }
        return bExecuted;
    }
    stop;    
}
