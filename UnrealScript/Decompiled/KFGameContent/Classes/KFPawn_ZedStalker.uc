/*******************************************************************************
 * KFPawn_ZedStalker generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedStalker extends KFPawn_Monster
    config(Game)
    hidecategories(Navigation);

var MaterialInstanceConstant SpottedMaterial;
var AkBaseSoundObject CloakedLoop;
var AkBaseSoundObject CloakedLoopEnd;
var float CloakPercent;
var KFPlayerController ViewerPlayer;
var float CloakSpeed;
var float DeCloakSpeed;

simulated event PostBeginPlay()
{
    super(KFPawn).PostBeginPlay();
    SetCloaked(true);
    PlayStealthSoundLoop();
}

simulated event ReplicatedEvent(name VarName)
{
    switch(VarName)
    {
        case 'bIsCloakingSpottedByTeam':
            SetGameplayMICParams();
            break;
        case 'bIsCloaking':
            ClientCloakingStateUpdated();
            break;
        default:
            break;
    }
    super.ReplicatedEvent(VarName);
}

function SetCloaked(bool bNewCloaking)
{
    if(bCanCloak)
    {
        if((IsImpaired()) && bNewCloaking)
        {
            return;
        }
        if(((MaxHeadChunkGoreWhileAlive == 0) && bIsCloaking != bNewCloaking) && IsAliveAndWell())
        {
            if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
            {
                KFGameInfo(WorldInfo.Game).DialogManager.PlaySpotCloakDialog(self, bNewCloaking);
            }
        }
        bIsCloaking = bNewCloaking;
        if(WorldInfo.NetMode != NM_DedicatedServer)
        {
            SetGameplayMICParams();
            Mesh.SetPerObjectShadows(!bNewCloaking);
        }
        super.SetCloaked(bNewCloaking);
    }
}

simulated function ClientCloakingStateUpdated()
{
    if(bIsCloaking)
    {
        ClearBloodDecals();
    }
    SetGameplayMICParams();
    Mesh.SetPerObjectShadows(!bIsCloaking);
}

simulated function SetGameplayMICParams()
{
    local bool bIsSpotted;

    super.SetGameplayMICParams();
    if(!bIsGoreMesh && WorldInfo.NetMode != NM_DedicatedServer)
    {
        bIsSpotted = bIsCloakingSpottedByLP || bIsCloakingSpottedByTeam;
        if(bIsSpotted && bIsCloaking)
        {
            BodyMIC.SetParent(SpottedMaterial);            
        }
        else
        {
            if(BodyMIC.Parent == SpottedMaterial)
            {
                BodyMIC.SetParent(Mesh.SkeletalMesh.Materials[0]);
                PlayStealthSoundLoop();
            }
        }
    }
}

simulated event NotifyGoreMeshActive()
{
    super.NotifyGoreMeshActive();
    if(((Role == ROLE_Authority) && KFGameInfo(WorldInfo.Game) != none) && KFGameInfo(WorldInfo.Game).DialogManager != none)
    {
        KFGameInfo(WorldInfo.Game).DialogManager.PlaySpotCloakDialog(self, false);
    }
    PlayStealthSoundLoopEnd();
    bIsCloaking = false;
    bIsCloakingSpottedByLP = false;
    bIsCloakingSpottedByTeam = false;
    if((PlayerReplicationInfo == none) && Mesh.SkeletalMesh.Materials.Length > 2)
    {
        BodyMIC.SetParent(Mesh.SkeletalMesh.Materials[2]);
    }
}

simulated function PlayStealthSoundLoop()
{
    PlaySoundBase(CloakedLoop, true);
}

simulated function PlayStealthSoundLoopEnd()
{
    PlaySoundBase(CloakedLoopEnd, true);
}

simulated event Tick(float DeltaTime)
{
    local float MinCloakPct;

    super(KFPawn).Tick(DeltaTime);
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(ViewerPlayer == none)
        {
            ViewerPlayer = KFPlayerController(WorldInfo.GetALocalPlayerController());
        }
        MinCloakPct = GetMinCloakPct();
        if(!bIsCloaking)
        {
            if(CloakPercent < 1)
            {
                CloakPercent = FMin(CloakPercent + (DeltaTime * DeCloakSpeed), 1);
                BodyMIC.SetScalarParameterValue('Transparency', CloakPercent);
            }            
        }
        else
        {
            if(CloakPercent > MinCloakPct)
            {
                CloakPercent = FMax(CloakPercent - (DeltaTime * CloakSpeed), MinCloakPct);
                BodyMIC.SetScalarParameterValue('Transparency', CloakPercent);
            }
        }
    }
}

protected simulated function float GetMinCloakPct()
{
    if((ViewerPlayer != none) && (ViewerPlayer.GetTeamNum() == GetTeamNum()) || ViewerPlayer.PlayerReplicationInfo.bOnlySpectator)
    {
        return 0.5;
    }
    return 0;
}

simulated event UpdateSpottedStatus()
{
    local bool bOldSpottedByLP;
    local KFPlayerController LocalPC;
    local KFPerk LocalPerk;
    local float DistanceSq, Range;

    if(WorldInfo.NetMode == NM_DedicatedServer)
    {
        return;
    }
    bOldSpottedByLP = bIsCloakingSpottedByLP;
    bIsCloakingSpottedByLP = false;
    if(!IsHumanControlled() || bIsSprinting)
    {
        LocalPC = KFPlayerController(GetALocalPlayerController());
        if(LocalPC != none)
        {
            LocalPerk = LocalPC.GetPerk();
        }
        if((((((LocalPC != none) && LocalPC.Pawn != none) && LocalPC.Pawn.IsAliveAndWell()) && LocalPerk != none) && LocalPerk.bCanSeeCloakedZeds) && (WorldInfo.TimeSeconds - LastRenderTime) < 1)
        {
            DistanceSq = VSizeSq(LocalPC.Pawn.Location - Location);
            Range = LocalPerk.GetCloakDetectionRange();
            if(DistanceSq < Square(Range))
            {
                bIsCloakingSpottedByLP = true;
                if(LocalPerk.IsCallOutActive())
                {
                    LocalPC.ServerCallOutPawnCloaking(self);
                }
            }
        }
    }
    if(!bIsCloakingSpottedByTeam)
    {
        if(bIsCloakingSpottedByLP != bOldSpottedByLP)
        {
            SetGameplayMICParams();
        }
    }
}

function CallOutCloaking(optional KFPlayerController CallOutController)
{
    bIsCloakingSpottedByTeam = true;
    LastStoredCC = CallOutController;
    SetGameplayMICParams();
    SetTimer(2, false, 'CallOutCloakingExpired');
}

function CallOutCloakingExpired()
{
    bIsCloakingSpottedByTeam = false;
    LastStoredCC = none;
    SetGameplayMICParams();
}

simulated function SpawnRallyEffect(ParticleSystem RallyEffect, name EffectBoneName, Vector EffectOffset)
{
    local PlayerController PC;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        PC = WorldInfo.GetALocalPlayerController();
        if(((((bIsCloaking && !bIsCloakingSpottedByLP) && !bIsCloakingSpottedByTeam) && PC.GetTeamNum() < 255) && PC.Pawn != none) && PC.Pawn.IsAliveAndWell())
        {
            return;
        }
    }
    super.SpawnRallyEffect(RallyEffect, EffectBoneName, EffectOffset);
}

simulated function PlayDying(class<DamageType> DamageType, Vector HitLoc)
{
    SetCloaked(false);
    bCanCloak = false;
    super(KFPawn).PlayDying(DamageType, HitLoc);
}

function CauseHeadTrauma(optional float BleedOutTime)
{
    BleedOutTime = 5;
    super.CauseHeadTrauma(BleedOutTime);
    if((bIsHeadless && IsAliveAndWell()) && !IsDoingSpecialMove())
    {
        SetCloaked(false);
    }
}

function OnStackingAfflictionChanged(byte Id)
{
    super.OnStackingAfflictionChanged(Id);
    if((Role == ROLE_Authority) && IsAliveAndWell())
    {
        if((Id == 0) || Id == 4)
        {
            SetCloaked(!bEmpPanicked && !bEmpDisrupted);
        }
    }
}

function PlayHit(float Damage, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, Vector Momentum, TraceHitInfo HitInfo)
{
    super.PlayHit(Damage, InstigatedBy, HitLocation, DamageType, Momentum, HitInfo);
    SetCloaked(false);
    if((HitFxInfo.DamageType != none) && HitFxInfo.DamageType.default.MeleeHitPower > 0)
    {
        SetTimer(1, false, 'ReCloakTimer');        
    }
    else
    {
        SetTimer(0.35, false, 'ReCloakTimer');
    }
}

simulated function PlayHeadAsplode()
{
    if(bIsCloaking)
    {
        SetCloaked(false);
    }
    bCanCloak = false;
    super.PlayHeadAsplode();
}

simulated function ReCloakTimer()
{
    SetCloaked(true);
}

static function bool IsStalkerPawn()
{
    return true;
}

function int GetKillerDialogID()
{
    return 66;
}

function int GetSpotterDialogID()
{
    if(bIsCloaking && MaxHeadChunkGoreWhileAlive == 0)
    {
        return 135;
    }
    return 125;
}

static function int GetTraderAdviceID()
{
    return 40;
}

defaultproperties
{
    SpottedMaterial=MaterialInstanceConstant'ZED_Stalker_MAT.ZED_Stalker_Visible_MAT'
    CloakedLoop=AkEvent'WW_ZED_Stalker.ZED_Stalker_SFX_Stealth_LP'
    CloakedLoopEnd=AkEvent'WW_ZED_Stalker.ZED_Stalker_SFX_Stealth_LP_Stop'
    CloakPercent=1
    CloakSpeed=4
    DeCloakSpeed=4.5
    bCloakOnMeleeEnd=true
    bIsStalkerClass=true
    CharacterMonsterArch=KFCharacterInfo_Monster'ZED_Stalker_ARCH.ZED_Stalker_Archetype'
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=9
        MyDamageType=Class'KFDT_Slashing_ZedWeak'
        MomentumTransfer=25000
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedStalker.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DoshValue=15
    XPValues[0]=8
    XPValues[1]=10
    XPValues[2]=10
    XPValues[3]=10
    ResistantDamageTypes=/* Array type was not detected. */
    PawnAnimInfo=KFPawnAnimInfo'ZED_Stalker_ANIM.Stalker_AnimGroup'
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedStalker.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    bCanCloak=true
    bIsCloaking=true
    PenetrationResistance=0.5
    AfflictionHandler=KFPawnAfflictions'Default__KFPawn_ZedStalker.Afflictions'
    InstantIncaps=/* Array type was not detected. */
    StackingIncaps=/* Array type was not detected. */
    PhysRagdollImpulseScale=0.9
    KnockdownImpulseScale=0.9
    SprintSpeed=500
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedStalker.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses=/* Array type was not detected. */
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_ZedStalker.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedStalker.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedStalker.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedStalker.WeaponAmbientEchoHandler'
    FootstepAkComponent=AkComponent'Default__KFPawn_ZedStalker.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_ZedStalker.DialogAkSoundComponent'
    DamageRecoveryTimeHeavy=0.2
    Mass=50
    GroundSpeed=400
    Health=75
    ControllerClass=Class'KFAIController_ZedStalker'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bUpdateKinematicBonesFromAnimation=true
        ReplacementPrimitive=none
        bAllowPerObjectShadows=false
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedStalker.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedStalker.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedStalker.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedStalker.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedStalker.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        bUpdateKinematicBonesFromAnimation=true
        ReplacementPrimitive=none
        bAllowPerObjectShadows=false
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedStalker.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedStalker.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedStalker.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedStalker.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedStalker.DialogAkSoundComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedStalker.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    RotationRate=(Pitch=50000,Yaw=45000,Roll=50000)
}