/*******************************************************************************
 * KFProj_BloodBall_HRG_Vampire generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_BloodBall_HRG_Vampire extends KFProjectile
    hidecategories(Navigation);

struct BloodBallChargeInfo
{
    var float ChargePercentage;
    var float DamageByChargePercentage;

    structdefaultproperties
    {
        ChargePercentage=0
        DamageByChargePercentage=0
    }
};

var float DampenFactor;
var float DampenFactorParallel;
var float SpawnCollisionOffsetAmt;
var Vector LandedFXOffset;
var MaterialInterface ImpactDecalMaterial;
var float ImpactDecalWidth;
var float ImpactDecalHeight;
var float ImpactDecalThickness;
var float MaxExplodeTriggerHeightPerPercentage;
var float MinExplodeTriggerHeightPerPercentage;
var float MaxDamageRadiusPerPercentage;
var float MinDamageRadiusPerPercentage;
var float MaxCollisionRadius;
var float MinCollisionRadius;
var float MaxCollisionHeight;
var float MinCollisionHeight;
var float MaxDamagePerPercentage;
var float MinDamagePerPercentage;
var repnotify BloodBallChargeInfo BloodBallCharge;
var float fCachedCylinderWidth;
var float fCachedCylinderHeight;
var bool bCantBeTouchedByInstigator;
var bool bManuallyDetonated;
var bool bCantDetonateOnFullHP;

replication
{
     if(bNetDirty && Role == ROLE_Authority)
        BloodBallCharge;
}

simulated event ReplicatedEvent(name VarName)
{
    super.ReplicatedEvent(VarName);
    if(VarName == 'BloodBallCharge')
    {
        ScalingExplosionTemplateByBloodBallCharge();
        ScalingProjEffectsByBloodBallCharge();
    }
}

simulated function SetInheritedScale(float NewChargePercentage, float NewDamageByChargePercentage)
{
    BloodBallCharge.DamageByChargePercentage = NewDamageByChargePercentage;
    BloodBallCharge.ChargePercentage = FMax(0.1, NewChargePercentage);
    ScalingExplosionTemplateByBloodBallCharge();
    ScalingProjEffectsByBloodBallCharge();
    bNetDirty = true;
}

simulated function ScalingExplosionTemplateByBloodBallCharge()
{
    fCachedCylinderWidth = Lerp(MinCollisionRadius, MaxCollisionRadius, BloodBallCharge.ChargePercentage);
    fCachedCylinderHeight = Lerp(MinCollisionHeight, MaxCollisionHeight, BloodBallCharge.ChargePercentage);
    CylinderComponent(CollisionComponent).SetCylinderSize(fCachedCylinderWidth, fCachedCylinderHeight);
    ExplosionTemplate.DamageRadius = FMax(MinDamageRadiusPerPercentage, Lerp(MinDamageRadiusPerPercentage, MaxDamageRadiusPerPercentage, BloodBallCharge.DamageByChargePercentage));
    ExplosionTemplate.Damage = FMax(MinDamagePerPercentage, Lerp(MinDamagePerPercentage, MaxDamagePerPercentage, BloodBallCharge.DamageByChargePercentage));
}

simulated function ScalingProjEffectsByBloodBallCharge()
{
    local Vector ChargePercentageVector;

    ChargePercentageVector.X = BloodBallCharge.ChargePercentage;
    ChargePercentageVector.Y = BloodBallCharge.ChargePercentage;
    ChargePercentageVector.Z = BloodBallCharge.ChargePercentage;
    if(ProjEffects != none)
    {
        ProjEffects.SetVectorParameter(name("BlobCharge"), ChargePercentageVector);
        ProjEffects.SetFloatParameter(name("MineFxControlParam"), BloodBallCharge.ChargePercentage);
    }
}

simulated event PostBeginPlay()
{
    local Vector HitLocation, HitNormal;

    super.PostBeginPlay();
    BloodBallCharge.ChargePercentage = 0;
    BloodBallCharge.DamageByChargePercentage = 0;
    if(Role == ROLE_Authority)
    {
        Instigator.Trace(HitLocation, HitNormal, Location, Instigator.Location, false,,, 1);
        if(!IsZero(HitLocation))
        {
            SetLocation(HitLocation + (HitNormal * SpawnCollisionOffsetAmt));
        }
    }
}

simulated function SpawnFlightEffects()
{
    super.SpawnFlightEffects();
}

protected simulated function PrepareExplosionTemplate()
{
    local Weapon OwnerWeapon;
    local Pawn OwnerPawn;

    super.PrepareExplosionTemplate();
    OwnerWeapon = Weapon(Owner);
    if(OwnerWeapon != none)
    {
        OwnerPawn = Pawn(OwnerWeapon.Owner);
        if(OwnerPawn != none)
        {
            ExplosionTemplate.DamageRadius *= KFPawn(OwnerPawn).GetPerk().GetAoERadiusModifier();
        }
    }
}

protected simulated function PrepareExplosionActor(GameExplosionActor GEA)
{
    KFExplosion_HRG_Vampire_BloodBall(GEA).ChargePercentage = BloodBallCharge.ChargePercentage;
    KFExplosion_HRG_Vampire_BloodBall(GEA).DamageByChargePercentage = BloodBallCharge.DamageByChargePercentage;
    super.PrepareExplosionActor(GEA);
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    if((Other == Instigator) || CheckRepeatingTouch(Other))
    {
        return;
    }
    if(IgnoreTouchActor != Other)
    {
        ProcessBulletTouch(Other, HitLocation, HitNormal);
    }
    super.ProcessTouch(Other, HitLocation, HitNormal);
}

defaultproperties
{
    DampenFactor=0.125
    DampenFactorParallel=0.175
    SpawnCollisionOffsetAmt=28
    LandedFXOffset=(X=0,Y=0,Z=2)
    ImpactDecalWidth=178
    ImpactDecalHeight=178
    ImpactDecalThickness=28
    MaxExplodeTriggerHeightPerPercentage=22
    MinExplodeTriggerHeightPerPercentage=11
    MaxDamageRadiusPerPercentage=280
    MinDamageRadiusPerPercentage=130
    MaxCollisionRadius=20
    MinCollisionRadius=10
    MaxCollisionHeight=20
    MinCollisionHeight=10
    MaxDamagePerPercentage=150
    MinDamagePerPercentage=15
    bCantBeTouchedByInstigator=true
    bCantDetonateOnFullHP=true
    bSyncToOriginalLocation=true
    bSyncToThirdPersonMuzzleLocation=true
    bUseClientSideHitDetection=true
    bStopAmbientSoundOnExplode=true
    GlassShatterType=FracturedMeshGlassShatterType.FMGS_ShatterAll
    TouchTimeThreshhold=0.05
    TossZ=150
    GravityScale=0.5
    ExtraLineCollisionOffsets=/* Array type was not detected. */
    TerminalVelocity=2000
    ExplosionActorClass=Class'KFExplosion_HRG_Vampire_BloodBall'
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'WEP_HRG_Vampire_Arch.HRG_Vampire_BlobFireImpacts'
        bAllowPerMaterialFX=true
        DamageRadius=200
        DamageFalloffExponent=0.5
        MyDamageType=Class'KFDT_Toxic_HRG_Vampire_BloodBall'
        KnockDownStrength=0
        MomentumTransferScale=45000
        FractureMeshRadius=0
        FracturePartVel=0
        CamShake=KFCameraShake'WEP_Mine_Reconstructor_Arch.Camera_Shake'
        CamShakeInnerRadius=200
        CamShakeOuterRadius=400
    object end
    // Reference: KFGameExplosion'Default__KFProj_BloodBall_HRG_Vampire.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    ProjFlightTemplate=ParticleSystem'WEP_HRG_Vampire_EMIT.FX_HRG_Vampire_BlobProjectile_01'
    begin object name=AmbientAkSoundComponent class=AkComponent
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.25
    object end
    // Reference: AkComponent'Default__KFProj_BloodBall_HRG_Vampire.AmbientAkSoundComponent'
    AmbientComponent=AmbientAkSoundComponent
    AssociatedPerkClass=Class'KFGame.KFPerk_FieldMedic'
    Speed=2000
    MaxSpeed=2000
    MomentumTransfer=50000
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=10
        CollisionRadius=10
        ReplacementPrimitive=none
        CollideActors=true
    object end
    // Reference: CylinderComponent'Default__KFProj_BloodBall_HRG_Vampire.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=10
        CollisionRadius=10
        ReplacementPrimitive=none
        CollideActors=true
    object end
    // Reference: CylinderComponent'Default__KFProj_BloodBall_HRG_Vampire.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=AmbientAkSoundComponent class=AkComponent
        bStopWhenOwnerDestroyed=true
        bForceOcclusionUpdateInterval=true
        OcclusionUpdateInterval=0.25
    object end
    // Reference: AkComponent'Default__KFProj_BloodBall_HRG_Vampire.AmbientAkSoundComponent'
    Components(1)=AmbientAkSoundComponent
    Physics=EPhysics.PHYS_Falling
    bPushedByEncroachers=false
    bNetTemporary=false
    bCanBeDamaged=false
    bCollideComplex=true
    bProjTarget=true
    bNoEncroachCheck=true
    bBounce=true
    LifeSpan=300
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=10
        CollisionRadius=10
        ReplacementPrimitive=none
        CollideActors=true
    object end
    // Reference: CylinderComponent'Default__KFProj_BloodBall_HRG_Vampire.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}