/*******************************************************************************
 * KFWeap_HRG_BlastBrawlers generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_HRG_BlastBrawlers extends KFWeap_Blunt_PowerGloves
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var name ReloadAnimation;
var float ReloadAnimRateModifier;
var float ReloadAnimRateModifierElite;
var protected transient bool bWaitingForSecondShot;
var protected transient int NumAttacks;
var KFMuzzleFlash LeftMuzzleFlash;

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
}

simulated function Shoot()
{
    if(!Instigator.IsLocallyControlled())
    {
        return;
    }
    if(Role < ROLE_Authority)
    {
        ServerShoot();
    }
    ProcessShoot();
}

reliable server function bool ServerShoot()
{
    return ProcessShoot();
}

simulated function bool ProcessShoot()
{
    if(CurrentFireMode != 0)
    {
        return false;
    }
    CustomFire();
    if(!bWaitingForSecondShot)
    {
        DecrementAmmo();
    }
    bWaitingForSecondShot = !bWaitingForSecondShot;
    return true;
}

simulated function DecrementAmmo()
{
    AmmoCount[0] = Max(AmmoCount[0] - 1, 0);
}

static simulated event bool UsesAmmo()
{
    return true;
}

simulated function CustomFire()
{
    local byte CachedFireMode;

    CachedFireMode = CurrentFireMode;
    CurrentFireMode = 6;
    ProjectileFire();
    HandleWeaponShotTaken(CurrentFireMode);
    NotifyWeaponFired(CurrentFireMode);
    PlayFireEffects(CurrentFireMode, vect(0, 0, 0));
    CurrentFireMode = CachedFireMode;
}

simulated function KFProjectile SpawnAllProjectiles(class<KFProjectile> KFProjClass, Vector RealStartLoc, Vector AimDir)
{
    local KFPerk InstigatorPerk;

    if(CurrentFireMode == 6)
    {
        InstigatorPerk = GetPerk();
        if(InstigatorPerk != none)
        {
            Spread[CurrentFireMode] = default.Spread[CurrentFireMode] * InstigatorPerk.GetTightChokeModifier();
        }
    }
    return super(KFWeapon).SpawnAllProjectiles(KFProjClass, RealStartLoc, AimDir);
}

simulated function PlayFireEffects(byte FireModeNum, optional Vector HitLocation)
{
    if(((FireModeNum < bLoopingFireSnd.Length) && bLoopingFireSnd[FireModeNum]) && !bPlayingLoopingFireSnd)
    {
        StartLoopingFireSound(FireModeNum);
    }
    PlayFiringSound(CurrentFireMode);
    if(Instigator != none)
    {
        if(Instigator.IsLocallyControlled())
        {
            if(Instigator.IsFirstPerson())
            {
                CauseMuzzleFlash(FireModeNum);
            }
            ShakeView();
        }
    }
}

simulated function StartFire(byte FireModeNum)
{
    if(StartFireDisabled)
    {
        return;
    }
    if(FireModeNum == 0)
    {
        if(AmmoCount[0] > 0)
        {
            StartMeleeFire(FireModeNum, 0, 0);            
        }
        else
        {
            super(KFWeap_MeleeBase).StartFire(2);
            ClearPendingFire(2);
        }
        return;
    }
    super(KFWeap_MeleeBase).StartFire(FireModeNum);
}

simulated function AttachMuzzleFlash()
{
    super(KFWeapon).AttachMuzzleFlash();
    if(MySkelMesh != none)
    {
        if(MuzzleFlashTemplate != none)
        {
            LeftMuzzleFlash = new (self) Class'KFMuzzleFlash' (MuzzleFlashTemplate);
            LeftMuzzleFlash.AttachMuzzleFlash(MySkelMesh, 'MuzzleFlash_L');
        }
    }
}

simulated function CauseMuzzleFlash(byte FireModeNum)
{
    if((MuzzleFlash == none) || LeftMuzzleFlash == none)
    {
        AttachMuzzleFlash();
    }
    if(bWaitingForSecondShot)
    {
        if(MuzzleFlash != none)
        {
            MuzzleFlash.CauseMuzzleFlash(FireModeNum);
        }        
    }
    else
    {
        if(LeftMuzzleFlash != none)
        {
            LeftMuzzleFlash.CauseMuzzleFlash(FireModeNum);
        }
    }
}

simulated function DetachMuzzleFlash()
{
    super(KFWeapon).DetachMuzzleFlash();
    if((MySkelMesh != none) && LeftMuzzleFlash != none)
    {
        LeftMuzzleFlash.DetachMuzzleFlash(MySkelMesh);
        LeftMuzzleFlash = none;
    }
}

simulated event SetFOV(float NewFOV)
{
    super(KFWeapon).SetFOV(NewFOV);
    if(LeftMuzzleFlash != none)
    {
        LeftMuzzleFlash.SetFOV(NewFOV);
    }
}

simulated function StopFireEffects(byte FireModeNum)
{
    super(KFWeapon).StopFireEffects(FireModeNum);
    if(LeftMuzzleFlash != none)
    {
        LeftMuzzleFlash.StopMuzzleFlash();
    }
}

simulated function bool CanReload(optional byte FireModeNum)
{
    if(FiringStatesArray[2] == 'WeaponUpkeep')
    {
        return true;
    }
    if(FireModeNum == 6)
    {
        FireModeNum = 0;
    }
    return super(KFWeap_MeleeBase).CanReload(FireModeNum);
}

simulated function name GetReloadAnimName(bool bTacticalReload)
{
    return ReloadAnimation;
}

simulated function KFGame.KFWeapon.EReloadStatus GetNextReloadStatus(optional byte FireModeNum)
{
    switch(ReloadStatus)
    {
        case 0:
        case 2:
            if((HasSpareAmmo(FireModeNum)) && ReloadAmountLeft > 0)
            {
                return 2;
            }
        default:
            return 4;
            break;
    }
}

simulated function float GetReloadRateScale()
{
    local float Modifier;

    Modifier = ((UseTacticalReload()) ? ReloadAnimRateModifierElite : ReloadAnimRateModifier);
    return super(KFWeapon).GetReloadRateScale() * Modifier;
}

simulated function bool HasAnyAmmo()
{
    return (AmmoCount[0] != 0) && SpareAmmoCount[0] != 0;
}

simulated state Active
{
    simulated function WeaponEmpty()
    {
        local int I;

        I = 0;
        J0x0B:

        if(I < GetPendingFireLength())
        {
            if(PendingFire(I))
            {
                BeginFire(byte(I));
                goto J0x5F;
            }
            ++ I;
            goto J0x0B;
        }
        J0x5F:

    }
    stop;    
}

simulated state MeleeChainAttacking
{
    simulated function BeginState(name PrevStateName)
    {
        local KFPerk InstigatorPerk;

        if(CurrentFireMode == 0)
        {
            StartFireDisabled = true;
            bWaitingForSecondShot = false;
            NumAttacks = 0;
        }
        InstigatorPerk = GetPerk();
        if(InstigatorPerk != none)
        {
            SetZedTimeResist(InstigatorPerk.GetZedTimeModifier(self));
        }
        super.BeginState(PrevStateName);
    }

    simulated function EndState(name NextStateName)
    {
        super.EndState(NextStateName);
        if(CurrentFireMode == 0)
        {
            StartFireDisabled = false;
        }
        ClearZedTimeResist();
    }

    simulated function bool ShouldContinueMelee(optional int ChainCount)
    {
        if(CurrentFireMode == 0)
        {
            return false;
        }
        return super.ShouldContinueMelee(ChainCount);
    }
    stop;    
}

defaultproperties
{
    ReloadAnimation=Atk_B
    ReloadAnimRateModifier=1.6
    ReloadAnimRateModifierElite=1
    PackageKey="HRG_BlastBrawlers"
    FirstPersonMeshName="WEP_1P_HRG_BlastBrawlers_MESH.WEP_1stP_HRG_Blast_Brawlers_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_HRG_BlastBrawlers_MESH.Wep_HRG_Blast_Brawlers_Pickup"
    AttachmentArchetypeName="WEP_HRG_BlastBrawlers_ARCH.Wep_HRG_BlastBrawlers_3P"
    MuzzleFlashTemplateName="WEP_HRG_BlastBrawlers_ARCH.Wep_HRG_BlastBrawler_MuzzleFlash"
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bAllowClientAmmoTracking=false
    FireModeIconPaths=/* Array type was not detected. */
    InventorySize=9
    PenetrationDamageReductionCurve=/* Array type was not detected. */
    WeaponSelectTexture=Texture2D'WEP_UI_HRG_BlastBrawlers_TEX.UI_WeaponSelect_HRG_BlastBrawlers'
    MagazineCapacity=4
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=36
    InitialSpareMags=2
    AmmoPickupScale=1.5
    WeaponFireSnd=/* Array type was not detected. */
    begin object name=MeleeHelper class=KFMeleeHelperWeaponBlastBrawlers
        bUseDirectionalMelee=true
        ChainSequence_F=none
        ChainSequence_B=none
        ChainSequence_L=none
        ChainSequence_R=none
        MeleeImpactCamShakeScale=0.035
        MaxHitRange=230
        HitboxChain=/* Array type was not detected. */
        bAllowMeleeToFracture=false
    object end
    // Reference: KFMeleeHelperWeaponBlastBrawlers'Default__KFWeap_HRG_BlastBrawlers.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    NumPellets=/* Array type was not detected. */
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitMomentum=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_HRG_BlastBrawlers.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="HRG Blast Brawlers"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_BlastBrawlers.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_HRG_BlastBrawlers.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}