/*******************************************************************************
 * KFWeap_AssaultRifle_Doshinegun generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_AssaultRifle_Doshinegun extends KFWeap_RifleBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var int DoshCost;
var transient KFPlayerReplicationInfo KFPRI;
var transient bool bIsBeingDropped;

simulated function Activate()
{
    local KFPawn KFP;

    super(KFWeapon).Activate();
    if(KFPRI == none)
    {
        KFP = KFPawn(Instigator);
        if(KFP != none)
        {
            KFPRI = KFPlayerReplicationInfo(KFP.PlayerReplicationInfo);
        }
    }
}

simulated function bool HasAnyAmmo()
{
    return ((bIsBeingDropped) ? AmmoCount[0] > 0 : (AmmoCount[0] > 0) || KFPRI.Score >= float(DoshCost));
}

simulated function bool CanReload(optional byte FireModeNum)
{
    return (KFPRI.Score >= float(DoshCost)) && AmmoCount[FireModeNum] < MagazineCapacity[FireModeNum];
}

simulated function PerformReload(optional byte FireModeNum)
{
    local int ReloadAmount, AmmoType;

    AmmoType = GetAmmoType(FireModeNum);
    if(bInfiniteSpareAmmo)
    {
        AmmoCount[AmmoType] = MagazineCapacity[AmmoType];
        ReloadAmountLeft = 0;
        return;
    }
    if(((Role == ROLE_Authority) && !bAllowClientAmmoTracking) || Instigator.IsLocallyControlled() && bAllowClientAmmoTracking)
    {
        ReloadAmount = Min(MagazineCapacity[0] - AmmoCount[0], int(KFPRI.Score / float(DoshCost)));
        AmmoCount[AmmoType] = Min(AmmoCount[AmmoType] + ReloadAmount, MagazineCapacity[AmmoType]);
        KFPRI.AddDosh(-ReloadAmount * DoshCost);
    }
    ReloadAmountLeft = 0;
    ShotsHit = 0;
}

function int AddAmmo(int Amount)
{
    return 0;
}

simulated function bool CanBuyAmmo()
{
    return false;
}

static simulated event bool UsesAmmo()
{
    return true;
}

function DropFrom(Vector StartLocation, Vector StartVelocity)
{
    bIsBeingDropped = true;
    super(KFWeapon).DropFrom(StartLocation, StartVelocity);
}

function SetOriginalValuesFromPickup(KFWeapon PickedUpWeapon)
{
    local KFPawn KFP;

    bIsBeingDropped = false;
    KFP = KFPawn(Instigator);
    if(KFP != none)
    {
        KFPRI = KFPlayerReplicationInfo(KFP.PlayerReplicationInfo);
    }
    super(KFWeapon).SetOriginalValuesFromPickup(PickedUpWeapon);
}

simulated state Reloading
{
    simulated function EndState(name NextStateName)
    {
        local int ActualReloadAmount;

        ClearZedTimeResist();
        ClearTimer('ReloadStatusTimer');
        ClearTimer('ReloadAmmoTimer');
        ClearPendingFire(2);
        if(bAllowClientAmmoTracking && Role < ROLE_Authority)
        {
            ActualReloadAmount = InitialReloadAmount - ReloadAmountLeft;
            ServerSyncReload(InitialReloadSpareAmmo - ActualReloadAmount);
        }
        CheckBoltLockPostReload();
        NotifyEndState();
        CurrentFireMode = 0;
        ReloadStatus = 0;
    }
    stop;    
}

defaultproperties
{
    DoshCost=20
    PackageKey="Doshinegun"
    FirstPersonMeshName="WEP_1P_Doshinegun_MESH.Wep_1stP_Doshinegun_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="WEP_3P_Doshinegun_MESH.Wep_Doshinegun_Pickup"
    AttachmentArchetypeName="WEP_Doshinegun_ARCH.Wep_Doshinegun_3P"
    MuzzleFlashTemplateName="WEP_Doshinegun_ARCH.Wep_Doshinegun_MuzzleFlash"
    bHasIronSights=true
    bUsesSecondaryAmmoAltHUD=true
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bAllowClientAmmoTracking=false
    FireModeIconPaths=/* Array type was not detected. */
    SingleFireSoundIndex=1
    InventorySize=4
    MeshFOV=65
    MeshIronSightFOV=45
    PlayerIronSightFOV=70
    IronSightPosition=(X=5,Y=0.05,Z=-1.2)
    DOF_FG_FocalRadius=150
    DOF_FG_MaxNearBlurSize=1
    GroupPriority=50
    WeaponSelectTexture=Texture2D'WEP_UI_Doshinegun_TEX.UI_Weapon_Select_Doshinegun'
    MagazineCapacity=20
    AmmoPickupScale=0
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=1,Y=8.5,Z=-3)
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_AssaultRifle_Doshinegun.MeleeHelper'
    maxRecoilPitch=250
    minRecoilPitch=200
    maxRecoilYaw=115
    minRecoilYaw=-115
    RecoilRate=0.085
    RecoilViewRotationScale=0.25
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=900
    RecoilMinPitchLimit=65035
    RecoilISMaxYawLimit=75
    RecoilISMinYawLimit=65460
    RecoilISMaxPitchLimit=375
    RecoilISMinPitchLimit=65460
    HippedRecoilModifier=1.5
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=30,Y=4.5,Z=-5)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_AssaultRifle_Doshinegun.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Doshinegun"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_AssaultRifle_Doshinegun.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_AssaultRifle_Doshinegun.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}