/*******************************************************************************
 * KFPlayerControllerVersus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPlayerControllerVersus extends KFPlayerController
    config(Game)
    hidecategories(Navigation);

var string BossName;
var protected transient array<KFProj_BloatPukeMine> MyActivePukeMines;
var array<bool> HasSpawnedZeds;
var int ZedXPAmount;
var byte ZedXPLevel;

replication
{
     if(bNetDirty)
        ZedXPAmount, ZedXPLevel;
}

function Restart(bool bVehicleTransition)
{
    super(PlayerController).Restart(bVehicleTransition);
    if(GetTeamNum() == 255)
    {
        KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(KFPawn_Monster(Pawn).ThirdPersonViewOffset);
        if(PlayerCamera.CameraStyle != 'Boss')
        {
            ServerCamera('ThirdPerson');
        }
    }
}

reliable client simulated function ClientRestart(Pawn NewPawn)
{
    local KFGFxHudWrapper GFxHUDWrapper;

    super.ClientRestart(NewPawn);
    if(NewPawn == none)
    {
        return;
    }
    if((Role < ROLE_Authority) && GetTeamNum() == )
    {
        KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(KFPawn_Monster(Pawn).ThirdPersonViewOffset);
        if(PlayerCamera.CameraStyle != 'Boss')
        {
            SetCameraMode('ThirdPerson');
        }
    }
    GFxHUDWrapper = KFGFxHudWrapper(myHUD);
    if(GFxHUDWrapper != none)
    {
        GFxHUDWrapper.CreateHUDMovie();
    }
}

exec function StartAltFire(optional byte FireModeNum)
{
    if((Pawn != none) && (Pawn.Weapon == none) || Pawn.Weapon.ShouldWeaponIgnoreStartFire())
    {
        Pawn.StartFire(4);
        return;
    }
    super.StartAltFire();
}

exec function StopAltFire(optional byte FireModeNum)
{
    if((Pawn != none) && (Pawn.Weapon == none) || Pawn.Weapon.ShouldWeaponIgnoreStartFire())
    {
        Pawn.StopFire(4);
        return;
    }
    super(PlayerController).StopAltFire();
}

function AwardZedDamage(int DamageAmount, bool bDamagerIsMe)
{
    ZedXPAmount += DamageAmount;
}

function bool ShouldDisplayGameplayPostProcessFX()
{
    return super.ShouldDisplayGameplayPostProcessFX() || ((GetTeamNum() == 255) && Pawn != none) && ((float(Pawn.Health) / float(Pawn.HealthMax)) * 100) <= float(default.LowHealthThreshold);
}

function AddPukeMineToPool(KFProj_BloatPukeMine PukeMine)
{
    local KFGameInfo_VersusSurvival KFGIVS;
    local KFProj_BloatPukeMine OldestMine;

    KFGIVS = KFGameInfo_VersusSurvival(WorldInfo.Game);
    if(KFGIVS != none)
    {
        if(KFGIVS.ActivePukeMines.Length >= KFGIVS.30)
        {
            if((MyActivePukeMines.Length > 0) && MyActivePukeMines[0] != none)
            {
                OldestMine = MyActivePukeMines[0];
                MyActivePukeMines.Remove(0, 1;
                KFGIVS.ActivePukeMines.Remove(KFGIVS.ActivePukeMines.Find(OldestMine, 1;                
            }
            else
            {
                OldestMine = KFGIVS.ActivePukeMines[0];
                KFGIVS.ActivePukeMines.Remove(0, 1;
            }            
        }
        else
        {
            if(MyActivePukeMines.Length >= (GetMaxPlayerPukeMineNum()))
            {
                OldestMine = MyActivePukeMines[0];
                MyActivePukeMines.Remove(0, 1;
                KFGIVS.ActivePukeMines.Remove(KFGIVS.ActivePukeMines.Find(OldestMine, 1;
            }
        }
        if(OldestMine != none)
        {
            OldestMine.TriggerExplosion(OldestMine.Location, vect(0, 0, 1), none);
        }
        MyActivePukeMines[MyActivePukeMines.Length] = PukeMine;
        KFGIVS.ActivePukeMines[KFGIVS.ActivePukeMines.Length] = PukeMine;
    }
}

function RemovePukeMineFromPool(KFProj_BloatPukeMine PukeMine)
{
    local KFGameInfo_VersusSurvival KFGIVS;
    local int PukeMineIndex;

    PukeMineIndex = MyActivePukeMines.Find(PukeMine;
    MyActivePukeMines.Remove(PukeMineIndex, 1;
    KFGIVS = KFGameInfo_VersusSurvival(WorldInfo.Game);
    if(KFGIVS != none)
    {
        PukeMineIndex = KFGIVS.ActivePukeMines.Find(PukeMine;
        if(PukeMineIndex != -1)
        {
            KFGIVS.ActivePukeMines.Remove(PukeMineIndex, 1;
        }
    }
}

function int GetMaxPlayerPukeMineNum()
{
    local KFGameInfo_VersusSurvival KFGIVS;
    local KFPawn_ZedBloat_Versus BloatPawn;
    local int NumBloatPlayers;

    KFGIVS = KFGameInfo_VersusSurvival(WorldInfo.Game);
    foreach WorldInfo.AllPawns(Class'KFPawn_ZedBloat_Versus', BloatPawn)
    {
        ++ NumBloatPlayers;        
    }    
    NumBloatPlayers = ((NumBloatPlayers == 0) ? 1 : NumBloatPlayers);
    return KFGIVS.30 / NumBloatPlayers;
}

function string GetTeamTag(PlayerReplicationInfo PRI)
{
    if(PRI == none)
    {
        return "";
    }
    if(!PRI.bOnlySpectator)
    {
        if(PRI.GetTeamNum() == 255)
        {
            return ("<" $ Class'KFCommon_LocalizedStrings'.default.ZedString) $ ">";            
        }
        else
        {
            return ("<" $ Class'KFCommon_LocalizedStrings'.default.HumanString) $ ">";
        }        
    }
    else
    {
        return ("<" $ Class'KFCommon_LocalizedStrings'.default.SpectatorString) $ ">";
    }
}

function RecieveChatMessage(PlayerReplicationInfo PRI, string ChatMessage, name Type, optional float MsgLifeTime)
{
    if(PRI.bAdmin)
    {
        ChatMessage = Class'KFLocalMessage'.default.AdminString $ ChatMessage;
        MyGFxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.PriorityColor);        
    }
    else
    {
        if(Type == 'TeamSay')
        {
            MyGFxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.TeamSayColor);            
        }
        else
        {
            MyGFxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.SayColor);
        }
    }
}

unreliable client simulated function NotifyOfAutoBalance()
{
    MyGFxManager.OpenPopup(2, "NOTICE", "You have been team swapped", "OK");
    MyGFxHUD.ShowNonCriticalMessage("You have been team swapped");
}

exec function RequestSwitchTeam()
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    if((KFPRI != none) && !KFPRI.bOnlySpectator)
    {
        KFPRI.ServerSwitchTeam();
    }
}

function ServerNotifyTeamChanged()
{
    if(Role == ROLE_Authority)
    {
        if(GetTeamNum() > ROLE_None)
        {
            ServerSelectPerk(, ROLE_None, true);            
        }
        else
        {
            if((CurrentPerk != none) && CurrentPerk.Class == MonsterPerkClass)
            {
                ServerSelectPerk(SavedPerkIndex, PerkList[SavedPerkIndex].PerkLevel, true);
            }
        }
    }
}

simulated event Destroyed()
{
    local int I;

    super.Destroyed();
    I = 0;
    J0x15:

    if(I < MyActivePukeMines.Length)
    {
        if(MyActivePukeMines[I] != none)
        {
            MyActivePukeMines[I].SetTimer((1 + float(Rand(5))) + FRand(), false, 'Timer_Explode');
        }
        ++ I;
        goto J0x15;
    }
    MyActivePukeMines.Length = 0;
}

state Dead
{
    event BeginState(name PreviousStateName)
    {
        local ViewOffsetData DefaultViewOffset;

        super.BeginState(PreviousStateName);
        if(GetTeamNum() == 255)
        {
            KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(DefaultViewOffset);
        }
    }
    stop;    
}

defaultproperties
{
    MonsterPerkClass=Class'KFGame.KFPerk_Monster'
    StingerAkComponent=AkComponent'Default__KFPlayerControllerVersus.AkComponent'
    AmplificationLightTemplate=PointLightComponent'Default__KFPlayerControllerVersus.AmplificationLightTemplate'
    NVGLightTemplate=PointLightComponent'Default__KFPlayerControllerVersus.NVGLightTemplate'
    CameraClass=Class'KFPlayerCamera_Versus'
    InputClass=Class'KFPlayerInputVersus'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerControllerVersus.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerControllerVersus.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFPlayerControllerVersus.AkComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerControllerVersus.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}