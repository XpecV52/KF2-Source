/*******************************************************************************
 * KFPlayerControllerVersus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPlayerControllerVersus extends KFPlayerController
    config(Game)
    hidecategories(Navigation);

var string BossName;
var array<bool> HasSpawnedZeds;
var int ZedXPAmount;
var byte ZedXPLevel;

replication
{
     if(bNetDirty)
        ZedXPAmount, ZedXPLevel;
}

function Restart(bool bVehicleTransition)
{
    super(PlayerController).Restart(bVehicleTransition);
    if(GetTeamNum() == 255)
    {
        KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(KFPawn_Monster(Pawn).ThirdPersonViewOffset);
        if(PlayerCamera.CameraStyle != 'Boss')
        {
            ServerCamera('ThirdPerson');
        }
    }
}

reliable client simulated function ClientRestart(Pawn NewPawn)
{
    super.ClientRestart(NewPawn);
    if(NewPawn == none)
    {
        return;
    }
    if((Role < ROLE_Authority) && GetTeamNum() == )
    {
        KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(KFPawn_Monster(Pawn).ThirdPersonViewOffset);
        if(PlayerCamera.CameraStyle != 'Boss')
        {
            SetCameraMode('ThirdPerson');
        }
    }
}

exec function StartAltFire(optional byte FireModeNum)
{
    if((Pawn != none) && (Pawn.Weapon == none) || Pawn.Weapon.ShouldWeaponIgnoreStartFire())
    {
        Pawn.StartFire(4);
        return;
    }
    super.StartAltFire();
}

exec function StopAltFire(optional byte FireModeNum)
{
    if((Pawn != none) && (Pawn.Weapon == none) || Pawn.Weapon.ShouldWeaponIgnoreStartFire())
    {
        Pawn.StopFire(4);
        return;
    }
    super(PlayerController).StopAltFire();
}

function AwardZedDamage(int DamageAmount, bool bDamagerIsMe)
{
    ZedXPAmount += DamageAmount;
}

function bool ShouldDisplayGameplayPostProcessFX()
{
    return super.ShouldDisplayGameplayPostProcessFX() || ((GetTeamNum() == 255) && Pawn != none) && ((float(Pawn.Health) / float(Pawn.HealthMax)) * 100) <= float(default.LowHealthThreshold);
}

function RecieveChatMessage(PlayerReplicationInfo PRI, string ChatMessage, name Type, optional float MsgLifeTime)
{
    if(PRI.bAdmin)
    {
        ChatMessage = Class'KFLocalMessage'.default.AdminString $ ChatMessage;
        MyGFxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.PriorityColor);        
    }
    else
    {
        if(Type == 'TeamSay')
        {
            MyGFxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.TeamSayColor);            
        }
        else
        {
            MyGFxHUD.HudChatBox.AddChatMessage(ChatMessage, Class'KFLocalMessage'.default.SayColor);
        }
    }
}

unreliable client simulated function NotifyOfAutoBalance()
{
    MyGFxManager.DelayedOpenPopup(2, 0, Class'KFCommon_LocalizedStrings'.default.NoticeString, Class'KFCommon_LocalizedStrings'.default.TeamSwappedString, Class'KFCommon_LocalizedStrings'.default.OKString);
    MyGFxHUD.ShowNonCriticalMessage(Class'KFCommon_LocalizedStrings'.default.TeamSwappedString);
}

exec function ChangeTeam(optional string TeamName)
{
    RequestSwitchTeam();
}

exec function RequestSwitchTeam()
{
    local KFPlayerReplicationInfo KFPRI;

    KFPRI = KFPlayerReplicationInfo(PlayerReplicationInfo);
    if((KFPRI != none) && !KFPRI.bOnlySpectator)
    {
        KFPRI.ServerSwitchTeam();
    }
}

function ServerNotifyTeamChanged()
{
    if((Role == ROLE_Authority) && MonsterPerkClass != none)
    {
        if(GetTeamNum() > 0)
        {
            ServerSelectPerk(255, 0, true);            
        }
        else
        {
            if((CurrentPerk != none) && CurrentPerk.Class == MonsterPerkClass)
            {
                ServerSelectPerk(SavedPerkIndex, PerkList[SavedPerkIndex].PerkLevel, true);
            }
        }
    }
}

function ClientRecieveNewTeam()
{
    if(MyGFxManager != none)
    {
        MyGFxManager.ClientRecieveNewTeam();
    }
}

function NotifyChangeSpectateViewTarget()
{
    local KFPawn_Monster KFPM;

    super.NotifyChangeSpectateViewTarget();
    KFPM = KFPawn_Monster(ViewTarget);
    if(KFPM != none)
    {
        KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(KFPM.default.ThirdPersonViewOffset);
    }
}

function Reset()
{
    if(CanRestartPlayer())
    {
        SetViewTarget(self);
        ResetCameraMode();
        FixFOV();
        AcknowledgedPawn = none;
        PlayerZedSpawnInfo.PendingZedPawnClass = none;
        PlayerZedSpawnInfo.PendingZedSpawnLocation = vect(0, 0, 0);
    }
}

reliable client simulated function ClientReset()
{
    local Actor A;
    local array<Actor> BloodSplatActors;
    local int I;

    if(!IsLocalPlayerController())
    {
        return;
    }
    foreach AllActors(Class'Actor', A)
    {
        if(A.IsA('KFPersistentBloodActor'))
        {
            BloodSplatActors.AddItem(A;
            continue;            
        }
        if((WorldInfo.NetMode == NM_Client) && !A.IsA('Controller'))
        {
            A.Reset();
        }        
    }    
    I = 0;
    J0xE3:

    if(I < BloodSplatActors.Length)
    {
        BloodSplatActors[I].Reset();
        ++ I;
        goto J0xE3;
    }
}

event InitInputSystem()
{
    super.InitInputSystem();
    KFPlayerInput(PlayerInput).bVersusInput = true;
}

event SetHaveUpdatePerk(bool bUsedUpdate)
{
    super.SetHaveUpdatePerk(((KFGameReplicationInfoVersus(WorldInfo.GRI).bRoundIsOver) ? false : bUsedUpdate));
}

state Dead
{
    event BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if(GetTeamNum() == 255)
        {
            KFThirdPersonCamera(KFPlayerCamera(PlayerCamera).ThirdPersonCam).SetViewOffset(Class'KFThirdPersonCameraMode'.static.GetDefaultOffset());
        }
    }
    stop;    
}

defaultproperties
{
    MonsterPerkClass=Class'KFGame.KFPerk_Monster'
    PostRoundMenuClass=Class'KFGame.KFGFxMoviePlayer_PostRoundMenu'
    StingerAkComponent=AkComponent'Default__KFPlayerControllerVersus.AkComponent'
    AmplificationLightTemplate=PointLightComponent'Default__KFPlayerControllerVersus.AmplificationLightTemplate'
    NVGLightTemplate=PointLightComponent'Default__KFPlayerControllerVersus.NVGLightTemplate'
    CameraClass=Class'KFPlayerCamera_Versus'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerControllerVersus.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerControllerVersus.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFPlayerControllerVersus.AkComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPlayerControllerVersus.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}