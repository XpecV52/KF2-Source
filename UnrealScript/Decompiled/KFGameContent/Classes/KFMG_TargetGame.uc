/*******************************************************************************
 * KFMG_TargetGame generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMG_TargetGame extends Actor
    placeable
    hidecategories(Navigation)
    implements(KFInterface_MinigameActor);

var repnotify bool bGameRunning;
/** Whether or not controller list should be cleared on round finish */
var() bool bClearControllerOnCompletion;
var KFTrigger_MinigameButton Activator;
var array<Controller> KillerControllers;
var array<Actor> MinigameTargets;
/** Event index (Ex: 1 = Summer sideshow) for stat tracking */
var() int EventIndex;
/** Objective index (Ex: 1 = pop the clot) for stat tracking */
var() int ObjectiveIndex;

replication
{
     if(bNetDirty)
        bGameRunning;
}

function Activated(KFTrigger_MinigameButton ActivationSource)
{
    bGameRunning = true;
    Activator = ActivationSource;
}

function Deactivated()
{
    if(bGameRunning)
    {
        MinigameComplete(false);
    }
}

function bool CanBeActivated(KFTrigger_MinigameButton ActivationSource)
{
    return !bGameRunning;
}

simulated function UpdateBase(KFMGA_Target Target);

simulated event bool CanPlayAkEvent(Actor InOwner, name BoneName)
{
    return true;
}

function TargetHit(Actor Target, Controller HitInstigator)
{
    if(bGameRunning)
    {
        if((HitInstigator != none) && KillerControllers.Find(HitInstigator == -1)
        {
            KillerControllers.AddItem(HitInstigator;
        }
        MinigameComplete(true);
    }
}

simulated function FinalizeGame()
{
    if(Role == ROLE_Authority)
    {
        bGameRunning = false;
        if(bClearControllerOnCompletion)
        {
            KillerControllers.Length = 0;
        }
    }
}

function ResetGame()
{
    KillerControllers.Length = 0;
}

function MinigameComplete(bool bVictory)
{
    local KFSeqEvent_MinigameEndCondition EndCondEvent;
    local int I;

    if(bVictory && Role == ROLE_Authority)
    {
        NotifyWinners();
    }
    FinalizeGame();
    I = 0;
    J0x42:

    if(I < GeneratedEvents.Length)
    {
        EndCondEvent = KFSeqEvent_MinigameEndCondition(GeneratedEvents[I]);
        if(EndCondEvent != none)
        {
            EndCondEvent.MinigameComplete(self, bVictory);
        }
        ++ I;
        goto J0x42;
    }
    if((Role == ROLE_Authority) && Activator != none)
    {
        Activator.DeActivate();
    }
}

private final function NotifyWinners()
{
    local Controller Controller;

    foreach KillerControllers(Controller,)
    {
        if(KFPlayerController(Controller) != none)
        {
        }        
    }    
}

defaultproperties
{
    bClearControllerOnCompletion=true
    EventIndex=-1
    ObjectiveIndex=-1
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.S_Trigger'
        SpriteCategoryName=Triggers
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__KFMG_TargetGame.Sprite'
    Components(0)=Sprite
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bAlwaysRelevant=true
    NetPriority=2.5
    SupportedEvents=/* Array type was not detected. */
}