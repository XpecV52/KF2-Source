/*******************************************************************************
 * KFWeapAttach_HRG_Dragonbreath generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_HRG_Dragonbreath extends KFWeaponAttachment
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

var transient float BarrelHeatPerProjectile;
var transient float MaxBarrelHeat;
var transient float BarrelCooldownRate;
var transient float CurrentBarrelHeat;
var transient float LastBarrelHeat;
var transient int NumPelletsDefault;
var transient int NumPelletsAlt;

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    BarrelHeatPerProjectile = Class'KFWeap_HRG_Dragonbreath'.default.BarrelHeatPerProjectile;
    MaxBarrelHeat = Class'KFWeap_HRG_Dragonbreath'.default.MaxBarrelHeat;
    BarrelCooldownRate = Class'KFWeap_HRG_Dragonbreath'.default.BarrelCooldownRate;
    NumPelletsDefault = Class'KFWeap_HRG_Dragonbreath'.default.NumPellets[0];
    NumPelletsAlt = Class'KFWeap_HRG_Dragonbreath'.default.NumPellets[1];
}

simulated event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    LastBarrelHeat = MaxBarrelHeat;
    ChangeBarrelMaterial();
}

simulated function ChangeBarrelMaterial()
{
    if(CurrentBarrelHeat != LastBarrelHeat)
    {
        if((WeaponMIC == none) && WeapMesh != none)
        {
            WeaponMIC = WeapMesh.CreateAndSetMaterialInstanceConstant(0);
        }
        WeaponMIC.SetScalarParameterValue('Barrel_intensity', CurrentBarrelHeat);
    }
}

simulated function Tick(float Delta)
{
    super.Tick(Delta);
    CurrentBarrelHeat = FMax(CurrentBarrelHeat - (BarrelCooldownRate * Delta), 0);
    ChangeBarrelMaterial();
}

simulated function PlayWeaponFireAnim()
{
    local float BarrelHeatPerShot;
    local KFPawn OwnerPawn;

    super.PlayWeaponFireAnim();
    OwnerPawn = KFPawn(Owner);
    BarrelHeatPerShot = BarrelHeatPerProjectile * float(((OwnerPawn.FiringMode == 0) ? NumPelletsDefault : NumPelletsAlt));
    CurrentBarrelHeat = FMin(CurrentBarrelHeat + BarrelHeatPerShot, MaxBarrelHeat);
}

defaultproperties
{
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_HRG_Dragonbreath.SkeletalMeshComponent0.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_HRG_Dragonbreath.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}