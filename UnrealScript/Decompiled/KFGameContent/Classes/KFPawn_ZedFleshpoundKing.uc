/*******************************************************************************
 * KFPawn_ZedFleshpoundKing generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedFleshpoundKing extends KFPawn_ZedFleshpound
    config(Game)
    hidecategories(Navigation)
    implements(KFInterface_MonsterBoss);

var protected KFGameExplosion RagePoundExplosionTemplate;
var protected KFGameExplosion RagePoundFinalExplosionTemplate;
var const LinearColor BeamAttackGlowColor;
var export editinline transient PointLightComponent BattlePhaseLightTemplateBlue;
var int CurrentPhase;
var const int RageExplosionMinPhase;
var BossMinionWaveInfo SummonWaves[4];
var Vector2D NumMinionsToSpawn;
var export editinline AkComponent BeamHitAC;
var float ShieldHealth;
var float ShieldHealthMax;
var const array<float> ShieldHealthMaxDefaults;
var float ShieldHealthScale;
var repnotify byte ShieldHealthPctByte;
var float LastShieldHealthPct;
var ParticleSystem InvulnerableShieldFX;
var export editinline ParticleSystemComponent InvulnerableShieldPSC;
var name ShieldSocketName;
var KFSkinTypeEffects ShieldImpactEffects;
var KFGameExplosion ShieldShatterExplosionTemplate;
var const Color ShieldColorGreen;
var const Color ShieldCoreColorGreen;
var const Color ShieldColorYellow;
var const Color ShieldCoreColorYellow;
var const Color ShieldColorOrange;
var const Color ShieldCoreColorOrange;
var const Color ShieldColorRed;
var const Color ShieldCoreColorRed;
var const localized array<localized string> BossCaptionStrings;
var bool bUseAnimatedCamera;
var Vector AnimatedBossCameraOffset;

replication
{
     if(bNetDirty)
        CurrentPhase, ShieldHealthPctByte;
}

simulated function KFPawn_Monster GetMonsterPawn()
{
    return self;
}

simulated function string GetRandomBossCaption()
{
    if(default.BossCaptionStrings.Length <= 0)
    {
        return "";
    }
    return default.BossCaptionStrings[Rand(default.BossCaptionStrings.Length)];
}

static simulated event bool IsABoss()
{
    return true;
}

simulated function float GetHealthPercent()
{
    return float(Health) / float(HealthMax);
}

simulated function SetAnimatedBossCamera(bool bEnable, optional Vector CameraOffset)
{
    bUseAnimatedCamera = bEnable;
    if(bUseAnimatedCamera)
    {
        AnimatedBossCameraOffset = CameraOffset;        
    }
    else
    {
        AnimatedBossCameraOffset = vect(0, 0, 0);
    }
}

simulated function bool UseAnimatedBossCamera()
{
    return bUseAnimatedCamera;
}

simulated function name GetBossCameraSocket()
{
    return 'TheatricCameraRootSocket';
}

simulated function Vector GetBossCameraOffset()
{
    return AnimatedBossCameraOffset;
}

function OnZedDied(Controller Killer)
{
    super(KFPawn_Monster).OnZedDied(Killer);
    StopBossWave();
    KFGameInfo(WorldInfo.Game).BossDied(Killer);
}

function KFAIWaveInfo GetWaveInfo(int BattlePhase, int Difficulty)
{
    switch(BattlePhase)
    {
        case 1:
            return SummonWaves[Difficulty].PhaseTwoWave;
            break;
        case 2:
            return SummonWaves[Difficulty].PhaseThreeWave;
            break;
        case 3:
            return SummonWaves[Difficulty].PhaseFourWave;
            break;
        case 0:
        default:
            return SummonWaves[Difficulty].PhaseOneWave;
            break;
    }
    return none;
}

function byte GetNumMinionsToSpawn()
{
    if(KFGameInfo(WorldInfo.Game) != none)
    {
        return byte(Lerp(NumMinionsToSpawn.X, NumMinionsToSpawn.Y, float(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount()) / float(WorldInfo.Game.MaxPlayers)));
    }
    return byte(Lerp(NumMinionsToSpawn.X, NumMinionsToSpawn.Y, FMax(float(WorldInfo.Game.NumPlayers), 1) / float(WorldInfo.Game.MaxPlayers)));
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'ShieldHealthPctByte')
    {
        UpdateShield();        
    }
    else
    {
        super.ReplicatedEvent(VarName);
    }
}

function PossessedBy(Controller C, bool bVehicleTransition)
{
    super(KFPawn_Monster).PossessedBy(C, bVehicleTransition);
    PlayBossMusic();
    Class'KFPawn_MonsterBoss'.static.PlayBossEntranceTheatrics((self));
}

function PlayBossMusic()
{
    if(KFGameInfo(WorldInfo.Game) != none)
    {
        KFGameInfo(WorldInfo.Game).ForceKingFPMusicTrack();
    }
}

function CauseHeadTrauma(optional float BleedOutTime)
{
    BleedOutTime = 5;
    return;
}

simulated function bool PlayDismemberment(int InHitZoneIndex, class<KFDamageType> InDmgType, optional Vector HitDirection)
{
    return false;
}

simulated function PlayHeadAsplode()
{
    return;
}

simulated function ApplyHeadChunkGore(class<KFDamageType> dmgType, Vector HitLocation, Vector HitDirection)
{
    return;
}

simulated function ANIMNOTIFY_ChestBeamStart()
{
    ToggleSMBeam(true);
}

simulated function ANIMNOTIFY_ChestBeamEnd()
{
    ToggleSMBeam(false);
}

simulated function ToggleSMBeam(bool bEnable)
{
    local KFSM_FleshpoundKing_ChestBeam BeamSM;

    if(SpecialMove != 23)
    {
        return;
    }
    BeamSM = KFSM_FleshpoundKing_ChestBeam(SpecialMoves[SpecialMove]);
    if(BeamSM != none)
    {
        BeamSM.ToggleBeam(bEnable);
    }
}

simulated function UpdateGameplayMICParams()
{
    local MaterialInstanceConstant MIC;

    if(!IsAliveAndWell())
    {
        super.UpdateGameplayMICParams();
        return;
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(IsDoingSpecialMove())
        {
            super(KFPawn_Monster).UpdateGameplayMICParams();
            UpdateBattlePhaseLights();
            MIC = CharacterMICs[0];
            MIC.SetVectorParameterValue('Vector_GlowColor', BeamAttackGlowColor);
            return;
        }
    }
    super.UpdateGameplayMICParams();
}

simulated function UpdateBattlePhaseLights()
{
    local editinline PointLightComponent LightTemplate;

    if(!IsAliveAndWell())
    {
        super.UpdateBattlePhaseLights();
        return;
    }
    if(IsDoingSpecialMove(23))
    {
        if(BattlePhaseLightFront != none)
        {
            BattlePhaseLightFront.DetachFromAny();
            BattlePhaseLightFront = none;
        }
        LightTemplate = BattlePhaseLightTemplateBlue;
        if(LightTemplate != none)
        {
            BattlePhaseLightFront = new (self) Class'PointLightComponent' (LightTemplate);
        }
        if(BattlePhaseLightFront != none)
        {
            Mesh.AttachComponentToSocket(BattlePhaseLightFront, BattlePhaseLightFrontSocketName);
            BattlePhaseLightFront.SetEnabled(true);
        }
        return;
    }
    super.UpdateBattlePhaseLights();
}

simulated function ANIMNOTIFY_RagePoundLeft()
{
    local Vector ExploLocation;

    if(CurrentPhase < RageExplosionMinPhase)
    {
        return;
    }
    Mesh.GetSocketWorldLocationAndRotation('FX_Root', ExploLocation);
    TriggerRagePoundExplosion(ExploLocation);
}

simulated function ANIMNOTIFY_RagePoundRight()
{
    local Vector ExploLocation;

    if(CurrentPhase < RageExplosionMinPhase)
    {
        return;
    }
    Mesh.GetSocketWorldLocationAndRotation('FX_Root', ExploLocation);
    TriggerRagePoundExplosion(ExploLocation);
}

simulated function ANIMNOTIFY_RagePoundRightFinal()
{
    local Vector ExploLocation;

    if(CurrentPhase < RageExplosionMinPhase)
    {
        return;
    }
    Mesh.GetSocketWorldLocationAndRotation('FX_Root', ExploLocation);
    TriggerRagePoundExplosion(ExploLocation, true);
}

function SpawnSubWave()
{
    local KFAIWaveInfo SpawnInfo;
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    SpawnInfo = GetWaveInfo(CurrentPhase, KFGI.GetModifiedGameDifficulty());
    KFGI.SpawnManager.SummonBossMinions(SpawnInfo.Squads, GetNumMinionsToSpawn(), false);
    SetTimer(2, true, 'PauseBossWave');
}

function PauseBossWave()
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI.SpawnManager.GetNumAINeeded() <= 0)
    {
        StopBossWave();
    }
}

function StopBossWave()
{
    local KFGameInfo KFGI;

    KFGI = KFGameInfo(WorldInfo.Game);
    ClearTimer('PauseBossWave');
    KFGI.SpawnManager.StopSummoningBossMinions();
}

simulated function TriggerRagePoundExplosion(Vector ExploLocation, optional bool bIsFinalPound)
{
    local KFExplosionActor ExploActor;

    bIsFinalPound = false;
    ExploActor = Spawn(Class'KFExplosionActor', self,, ExploLocation);
    ExploActor.InstigatorController = Controller;
    ExploActor.Instigator = self;
    ExploActor.Explode(((bIsFinalPound) ? RagePoundFinalExplosionTemplate : RagePoundExplosionTemplate), vect(0, 0, 1));
}

function AdjustDamage(out int InDamage, out Vector Momentum, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, TraceHitInfo HitInfo, Actor DamageCauser)
{
    super(KFPawn_Monster).AdjustDamage(InDamage, Momentum, InstigatedBy, HitLocation, DamageType, HitInfo, DamageCauser);
    if(ShieldHealth > float(0))
    {
        ShieldHealth -= float(InDamage);
        if(ShieldHealth < float(0))
        {
            InDamage = int(Abs(ShieldHealth));
            ShieldHealth = 0;            
        }
        else
        {
            InDamage = 0;
        }
        ShieldHealthPctByte = FloatToByte(FClamp(ShieldHealth / ShieldHealthMax, 0, 1));
        UpdateShield();
    }
}

function HandleAfflictionsOnHit(Controller DamageInstigator, Vector HitDir, class<DamageType> DamageType, Actor DamageCauser)
{
    if(ShieldHealthPctByte == 0)
    {
        super(KFPawn).HandleAfflictionsOnHit(DamageInstigator, HitDir, DamageType, DamageCauser);
    }
}

function SetShieldScale(float InScale)
{
    ShieldHealthScale = InScale;
}

function ActivateShield()
{
    local KFGameInfo KFGI;
    local float HealthMod, HeadHealthMod;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        HealthMod = 1;
        KFGI.DifficultyInfo.GetAIHealthModifier(self, float(KFGI.GetModifiedGameDifficulty()), byte(KFGI.GetLivingPlayerCount()), HealthMod, HeadHealthMod);
        ShieldHealth = (ShieldHealthMaxDefaults[KFGI.GetModifiedGameDifficulty()] * HealthMod) * ShieldHealthScale;
        ShieldHealthMax = ShieldHealth;
        ShieldHealthPctByte = 1;
        UpdateShield();
    }
}

simulated function ActivateShieldFX()
{
    InvulnerableShieldPSC = WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(InvulnerableShieldFX, Mesh, ShieldSocketName, true);
    InvulnerableShieldPSC.SetAbsolute(false, true, true);
}

simulated function UpdateShield()
{
    local float ShieldHealthPct;

    if(WorldInfo.NetMode == NM_DedicatedServer)
    {
        return;
    }
    ShieldHealthPct = ByteToFloat(ShieldHealthPctByte);
    if((ShieldHealthPct > 0) && LastShieldHealthPct <= 0)
    {
        ActivateShieldFX();
    }
    if((((ShieldHealthPct == 0) && InvulnerableShieldPSC != none) && InvulnerableShieldPSC.bIsActive) && InvulnerableShieldPSC.bAttached)
    {
        BreakShield();        
    }
    else
    {
        if(InvulnerableShieldPSC != none)
        {
            if(ShieldHealthPct >= 0.75)
            {
                if(LastShieldHealthPct < 0.75)
                {
                    InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorGreen));
                    InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorGreen));
                }                
            }
            else
            {
                if(ShieldHealthPct >= 0.5)
                {
                    if((LastShieldHealthPct >= 0.75) || LastShieldHealthPct < 0.5)
                    {
                        InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorYellow));
                        InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorYellow));
                    }                    
                }
                else
                {
                    if(ShieldHealthPct >= 0.25)
                    {
                        if((LastShieldHealthPct >= 0.5) || LastShieldHealthPct < 0.25)
                        {
                            InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorOrange));
                            InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorOrange));
                        }                        
                    }
                    else
                    {
                        if(LastShieldHealthPct >= 0.25)
                        {
                            InvulnerableShieldPSC.SetVectorParameter('Shield_Color', MakeVectorFromColor(ShieldColorRed));
                            InvulnerableShieldPSC.SetVectorParameter('Shield_CoreColor', MakeVectorFromColor(ShieldCoreColorRed));
                        }
                    }
                }
            }
            CharacterMICs[0].SetScalarParameterValue('Scalar_DamageResist', ShieldHealthPct);
            LastShieldHealthPct = ShieldHealthPct;
            UpdateShieldUI();
        }
    }
}

simulated function Vector MakeVectorFromColor(Color InColor)
{
    local LinearColor LinColor;
    local Vector ColorVec;

    LinColor = ColorToLinearColor(InColor);
    ColorVec.X = LinColor.R;
    ColorVec.Y = LinColor.G;
    ColorVec.Z = LinColor.B;
    return ColorVec;
}

simulated function BreakShield()
{
    local KFExplosionActor ExplosionActor;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        DetachShieldFX();
        CharacterMICs[0].SetScalarParameterValue('Scalar_DamageResist', 0);
        ExplosionActor = Spawn(Class'KFExplosionActor', self,, Location, rotator(vect(0, 0, 1)));
        if(ExplosionActor != none)
        {
            ExplosionActor.Explode(ShieldShatterExplosionTemplate);
        }
    }
}

simulated function DetachShieldFX()
{
    LastShieldHealthPct = 0;
    DetachEmitter(InvulnerableShieldPSC);
    UpdateShieldUI();
}

simulated function UpdateShieldUI()
{
    local KFPlayerController KFPC;

    KFPC = KFPlayerController(GetALocalPlayerController());
    if((KFPC != none) && KFPC.IsLocalController())
    {
        if((KFPC.myGfxHUD != none) && KFPC.myGfxHUD.bossHealthBar != none)
        {
            KFPC.myGfxHUD.bossHealthBar.UpdateBossShield(LastShieldHealthPct);
        }
    }
}

simulated function string GetIconPath()
{
    return "ZED_Patriarch_UI.ZED-VS_Icon_Boss";
}

defaultproperties
{
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'zed_fleshpound_king_emit.King_Pound_Explosion_Light'
        Damage=44
        DamageRadius=900
        DamageFalloffExponent=2
        MyDamageType=Class'KFDT_Explosive_FleshpoundKingRage_Light'
        KnockDownStrength=0
        ExplosionSound=AkEvent'ww_zed_fleshpound_2.Play_King_FP_Rage_Hit'
        CamShake=KFCameraShake'FX_CameraShake_Arch.Grenades.Default_Grenade'
        CamShakeInnerRadius=200
        CamShakeOuterRadius=1200
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFPawn_ZedFleshpoundKing.ExploTemplate0'
    RagePoundExplosionTemplate=ExploTemplate0
    begin object name=ExploTemplate1 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'zed_fleshpound_king_emit.King_Pound_Explosion_Heavy'
        Damage=55
        DamageRadius=900
        DamageFalloffExponent=2
        MyDamageType=Class'KFDT_Explosive_FleshpoundKingRage_Heavy'
        KnockDownStrength=0
        ExplosionSound=AkEvent'ww_zed_fleshpound_2.Play_King_FP_Rage_Hit'
        CamShake=KFCameraShake'FX_CameraShake_Arch.Grenades.Default_Grenade'
        CamShakeInnerRadius=200
        CamShakeOuterRadius=1200
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFPawn_ZedFleshpoundKing.ExploTemplate1'
    RagePoundFinalExplosionTemplate=ExploTemplate1
    BeamAttackGlowColor=(R=0.17,G=0.22,B=1,A=1)
    begin object name=PointLightComponent3 class=PointLightComponent
        Radius=128
        FalloffExponent=4
        Brightness=2
        LightColor=(B=255,G=168,R=148,A=255)
        CastShadows=false
        LightingChannels=(Outdoor=true)
    object end
    // Reference: PointLightComponent'Default__KFPawn_ZedFleshpoundKing.PointLightComponent3'
    BattlePhaseLightTemplateBlue=PointLightComponent3
    RageExplosionMinPhase=1
    SummonWaves[0]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseFourWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave')
    SummonWaves[1]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseFourWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave')
    SummonWaves[2]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseFourWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave')
    SummonWaves[3]=(PhaseOneWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseTwoWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseThreeWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave',PhaseFourWave=KFAIWaveInfo'GP_Spawning_ARCH.Outbreak.KingFleshpoundSubWave')
    NumMinionsToSpawn=(X=1,Y=6)
    begin object name=BeamHitAC0 class=AkComponent
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPawn_ZedFleshpoundKing.BeamHitAC0'
    BeamHitAC=BeamHitAC0
    ShieldHealthMaxDefaults(0)=1800
    ShieldHealthMaxDefaults(1)=2700
    ShieldHealthMaxDefaults(2)=4000
    ShieldHealthMaxDefaults(3)=5000
    ShieldHealthScale=1.1
    InvulnerableShieldFX=ParticleSystem'zed_fleshpound_king_emit.FX_King_Fleshpound_Shield'
    ShieldSocketName=hips
    begin object name=ShieldEffects class=KFSkinTypeEffects_InvulnerabilityShield
        ImpactFXArray[0]=(DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[1]=(Type=EEffectDamageGroup.FXG_Bludgeon,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[2]=(Type=EEffectDamageGroup.FXG_Piercing,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[3]=(Type=EEffectDamageGroup.FXG_Slashing,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[4]=(Type=EEffectDamageGroup.FXG_Fire,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[5]=(Type=EEffectDamageGroup.FXG_Toxic,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[6]=(Type=EEffectDamageGroup.FXG_Healing,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[7]=(Type=EEffectDamageGroup.FXG_Sawblade,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[8]=(Type=EEffectDamageGroup.FXG_DrainLife,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[9]=(Type=EEffectDamageGroup.FXG_IncendiaryRound,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[10]=(Type=EEffectDamageGroup.FXG_UnexplodedGrenade,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[11]=(Type=EEffectDamageGroup.FXG_MicrowaveBlast,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[12]=(Type=EEffectDamageGroup.FXG_ShieldBash,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[13]=(Type=EEffectDamageGroup.FXG_MetalMace,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[14]=(Type=EEffectDamageGroup.FXG_Flare,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[15]=(Type=EEffectDamageGroup.FXG_Freeze,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[16]=(Type=EEffectDamageGroup.FXG_Bludgeon_Chains,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[17]=(Type=EEffectDamageGroup.FXG_MicrowaveProj,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[18]=(Type=EEffectDamageGroup.FXG_Electricity,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[19]=(Type=EEffectDamageGroup.FXG_Slashing_Ion,DefaultParticle=ParticleSystem'ZED_Hans_EMIT.FX_Hans_invulnerable_Hit',DefaultSound=AkEvent'WW_Skin_Impacts.Play_IMP_Ballistic_Machine_Local')
        ImpactFXArray[20]=(Type=EEffectDamageGroup.FXG_Energy_Yellow)
        ImpactFXArray[21]=(Type=EEffectDamageGroup.FXG_Energy_Magenta)
    object end
    // Reference: KFSkinTypeEffects_InvulnerabilityShield'Default__KFPawn_ZedFleshpoundKing.ShieldEffects'
    ShieldImpactEffects=ShieldEffects
    begin object name=ShatterExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'zed_fleshpound_king_emit.King_Pound_Shield_Explosion'
        Damage=30
        KnockDownStrength=0
        ExplosionSound=AkEvent'WW_ZED_Hans.Play_Hans_Shield_Break'
        FractureMeshRadius=500
        CamShake=KFCameraShake'FX_CameraShake_Arch.Grenades.Default_Grenade'
        CamShakeFalloff=0.5
    object end
    // Reference: KFGameExplosion'Default__KFPawn_ZedFleshpoundKing.ShatterExploTemplate0'
    ShieldShatterExplosionTemplate=ShatterExploTemplate0
    ShieldColorGreen=(B=50,G=255,R=50,A=0)
    ShieldCoreColorGreen=(B=0,G=255,R=0,A=0)
    ShieldColorYellow=(B=20,G=255,R=255,A=0)
    ShieldCoreColorYellow=(B=0,G=255,R=255,A=0)
    ShieldColorOrange=(B=10,G=110,R=255,A=0)
    ShieldCoreColorOrange=(B=0,G=105,R=255,A=0)
    ShieldColorRed=(B=20,G=20,R=255,A=0)
    ShieldCoreColorRed=(B=10,G=10,R=255,A=0)
    BossCaptionStrings(0)="The more you hurt the King Fleshpound, the faster he calls in more Quarter Pounds. Pace yourself, don?t get overwhelmed!"
    BossCaptionStrings(1)="Get down! The King Fleshpound?s chest beam has trouble hitting targets low to the ground."
    BossCaptionStrings(2)="Don?t think the fight is almost over just because the King Fleshpound is badly hurt. He activates a shield when low on Health. "
    BossCaptionStrings(3)="The King Fleshpound?s chest beam can hurt other Zeds if you can get them into his line of fire."
    BossCaptionStrings(4)="The King Fleshpound has the same weakpoints as normal fleshpounds, just bigger."
    BossCaptionStrings(5)="The King Fleshpound always has more Quarter Pounds. Ignore them at your peril!"
    RageAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.RageAkComponent0'
    BattlePhaseLightTemplateYellow=PointLightComponent'Default__KFPawn_ZedFleshpoundKing.PointLightComponent1'
    BattlePhaseLightTemplateRed=PointLightComponent'Default__KFPawn_ZedFleshpoundKing.PointLightComponent2'
    MonsterArchPath="ZED_ARCH.ZED_FleshpoundKing_Archetype"
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=75
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedFleshpoundKing.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DoshValue=500
    XPValues[0]=1291
    XPValues[1]=1694
    XPValues[2]=1790
    XPValues[3]=1843
    DamageTypeModifiers=/* Array type was not detected. */
    DifficultySettings=Class'KFDifficulty_FleshpoundKing'
    MinBlockFOV=0.2
    FootstepCameraShake=CameraShake'Default__KFPawn_ZedFleshpoundKing.FootstepCameraShake0'
    SprintAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.SprintAkComponent0'
    HeadShotAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.HeadshotAkComponent0'
    PawnAnimInfo=KFPawnAnimInfo'ZED_Fleshpound_ANIM.King_Fleshpound_AnimGroup'
    LocalizationKey=KFPawn_ZedFleshpoundKing
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedFleshpoundKing.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    bCanBePinned=false
    HitZones=/* Array type was not detected. */
    AfflictionHandler=KFAfflictionManager'Default__KFPawn_ZedFleshpoundKing.Afflictions'
    IncapSettings=/* Array type was not detected. */
    SprintSpeed=805
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedFleshpoundKing.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses=/* Array type was not detected. */
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_ZedFleshpoundKing.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedFleshpoundKing.WeaponAmbientEchoHandler'
    SecondaryWeaponAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.SecondaryWeaponAkSoundComponent'
    begin object name=BeamHitAC0 class=AkComponent
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPawn_ZedFleshpoundKing.BeamHitAC0'
    FootstepAkComponent=BeamHitAC0
    DialogAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.DialogAkSoundComponent'
    PowerUpAkComponent=AkComponent'Default__KFPawn_ZedFleshpoundKing.PowerUpAkSoundComponent'
    GroundSpeed=345
    Health=8750
    ControllerClass=Class'KFAIController_ZedFleshpoundKing'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedFleshpoundKing.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedFleshpoundKing.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedFleshpoundKing.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedFleshpoundKing.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedFleshpoundKing.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedFleshpoundKing.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedFleshpoundKing.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedFleshpoundKing.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedFleshpoundKing.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedFleshpoundKing.DialogAkSoundComponent'
    Components(8)=AkComponent'Default__KFPawn_ZedFleshpoundKing.PowerUpAkSoundComponent'
    Components(9)=AkComponent'Default__KFPawn_ZedFleshpoundKing.SecondaryWeaponAkSoundComponent'
    Components(10)=AkComponent'Default__KFPawn_ZedFleshpoundKing.SprintAkComponent0'
    Components(11)=AkComponent'Default__KFPawn_ZedFleshpoundKing.HeadshotAkComponent0'
    Components(12)=AkComponent'Default__KFPawn_ZedFleshpoundKing.RageAkComponent0'
    begin object name=BeamHitAC0 class=AkComponent
        bStopWhenOwnerDestroyed=true
    object end
    // Reference: AkComponent'Default__KFPawn_ZedFleshpoundKing.BeamHitAC0'
    Components(13)=BeamHitAC0
    bAlwaysRelevant=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedFleshpoundKing.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}