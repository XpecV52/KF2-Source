/*******************************************************************************
 * KFCarryableObject_Collectible generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFCarryableObject_Collectible extends KFCarryableObject
    abstract
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var KFObjectiveCollectActor ParentCollectActor;
var float StartingOverrideGroundSpeed;
var float StartingOverrideSprintSpeed;

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    UpdateSpeedOverride();
}

simulated function NotifyRemovedPending()
{
    if((Instigator.Weapon != none) && Instigator.Weapon != self)
    {
        TossIfInactive();
    }
}

simulated function UpdateSpeedOverride()
{
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(Instigator);
    if(KFPH != none)
    {
        if(KFGameReplicationInfo(WorldInfo.GRI).GetNumPlayersAlive() <= 1)
        {
            OverrideGroundSpeed = -1;
            OverrideSprintSpeed = -1;            
        }
        else
        {
            OverrideGroundSpeed = StartingOverrideGroundSpeed;
            OverrideSprintSpeed = StartingOverrideSprintSpeed;
        }
        KFPH.UpdateGroundSpeed();
    }
}

simulated function TossIfInactive()
{
    local KFWeap_HealerBase QuickHealWeapon;

    if(Role == ROLE_Authority)
    {
        QuickHealWeapon = KFWeap_HealerBase(Instigator.Weapon);
        if((QuickHealWeapon == none) || !QuickHealWeapon.IsInState('WeaponQuickHeal') && !QuickHealWeapon.IsInState('Inactive'))
        {
            Instigator.TossInventory(self);
        }
    }
}

simulated function UpdateReplicationInfo(bool bCarried)
{
    local KFPawn_Human KFPH;
    local KFPlayerReplicationInfo KFPRI;
    local KFPlayerController KFPC;

    KFPH = KFPawn_Human(Owner);
    KFPC = KFPlayerController(KFPH.Controller);
    KFPRI = KFPlayerReplicationInfo(KFPC.PlayerReplicationInfo);
    KFPRI.bCarryingCollectible = bCarried;
}

simulated function NotifyPickedUp()
{
    UpdateReplicationInfo(true);
    if(ParentCollectActor != none)
    {
        ParentCollectActor.SetCollectibleState(1);
    }
    UpdateSpeedOverride();
    super(KFWeapon).NotifyPickedUp();
}

function DropFrom(Vector StartLocation, Vector StartVelocity)
{
    UpdateReplicationInfo(false);
    if(ParentCollectActor != none)
    {
        ParentCollectActor.OnCarryableDropped();
    }
    super(KFWeapon).DropFrom(StartLocation, StartVelocity);
}

function SetupDroppedPickup(out DroppedPickup P, Vector StartVelocity)
{
    local KFDroppedPickup_Carryable Pickup;

    Pickup = KFDroppedPickup_Carryable(P);
    if(Pickup != none)
    {
        Pickup.ParentCollectActor = ParentCollectActor;
    }
    super(KFWeapon).SetupDroppedPickup(P, StartVelocity);
}

function SetOriginalValuesFromPickup(KFWeapon PickedUpWeapon)
{
    local KFCarryableObject_Collectible PickedUpCollectible;

    PickedUpCollectible = KFCarryableObject_Collectible(PickedUpWeapon);
    if(PickedUpCollectible != none)
    {
        ParentCollectActor = PickedUpCollectible.ParentCollectActor;
    }
    super(KFWeapon).SetOriginalValuesFromPickup(PickedUpWeapon);
}

simulated state Inactive
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        SetTimer(1, true, 'NotifyRemovedPending');
    }

    simulated function EndState(name NextStateName)
    {
        super(Object).EndState(NextStateName);
        ClearTimer('NotifyRemovedPending');
    }
    stop;    
}

defaultproperties
{
    StartingOverrideGroundSpeed=203
    StartingOverrideSprintSpeed=280
    BlockDamageMitigation=0.6
    ParryDamageMitigationPercent=0.5
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_Equipment
    GroupPriority=100
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFCarryableObject_Collectible.MeleeHelper'
    FiringStatesArray=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitMomentum=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFCarryableObject_Collectible.FirstPersonMesh'
    Mesh=FirstPersonMesh
    DroppedPickupClass=Class'KFDroppedPickup_Carryable'
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFCarryableObject_Collectible.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFCarryableObject_Collectible.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}