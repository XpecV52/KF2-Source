/*******************************************************************************
 * KFWeapAttach_LazerCutter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_LazerCutter extends KFWeapAttach_SprayBase
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

const WeaponChargeAnim = 'Charge_Beam';
const WeaponBeamAnim = 'Shoot_Beam';
const PawnChargeAnim = 'ADD_Charge_Beam';
const PawnChargeAnimCrouch = 'ADD_CH_Charge_Beam';
const PawnChargeAnimIron = 'ADD_Iron_Charge_Beam';
const PawnBeamAnim = 'ADD_Shoot_Beam';
const PawnBeamAnimCrouch = 'ADD_CH_Shoot_Beam';
const PawnBeamAnimIron = 'ADD_Iron_Shoot_Beam';

var float StartFireTime;
var float ChargeTime;
var bool bIsFullyCharged;
var bool bIsCharging;
var bool bPlayMuzzleFlash;
var array<AkEvent> FireLoopSounds;
var AkEvent FireLoopStop;
var array<AkEvent> ChargeSounds;
var export editinline transient ParticleSystemComponent ChargingPSC;
var ParticleSystem ChargingEffect;
var const ParticleSystem MuzzleFlashEffectL1;
var const ParticleSystem MuzzleFlashEffectL2;
var const ParticleSystem MuzzleFlashEffectL3;
var LinearColor DefaultFireModeColor;
var LinearColor EnergyColorL0;
var LinearColor EnergyColorL1;
var LinearColor EnergyColorL2;
var LinearColor EnergyColorL3;
var int WeaponMaterialCount;
var array<MaterialInstanceConstant> WeaponMICs;

simulated function PlayWeaponFireAnim()
{
    local float Duration;

    if(bIsCharging)
    {
        Duration = WeapMesh.GetAnimLength('Charge_Beam');
        WeapMesh.PlayAnim('Charge_Beam', Duration / ThirdPersonAnimRate, true, false);        
    }
    else
    {
        if(Instigator.FiringMode == 6)
        {
            Duration = WeapMesh.GetAnimLength('Shoot_Beam');
            WeapMesh.PlayAnim('Shoot_Beam', Duration / ThirdPersonAnimRate,, false);            
        }
        else
        {
            super(KFWeaponAttachment).PlayWeaponFireAnim();
        }
    }
}

simulated function PlayPawnFireAnim(KFPawn P, KFGame.KFPawn.EAnimSlotStance AnimType)
{
    if(bIsCharging)
    {
        if(P.bIsCrouched)
        {
            P.PlayBodyAnim('ADD_CH_Charge_Beam', AnimType, ThirdPersonAnimRate, ShootBlendInTime, ShootBlendOutTime, true, false);            
        }
        else
        {
            if(P.bIsWalking)
            {
                P.PlayBodyAnim('ADD_Iron_Charge_Beam', AnimType, ThirdPersonAnimRate, ShootBlendInTime, ShootBlendOutTime, true, false);                
            }
            else
            {
                P.PlayBodyAnim('ADD_Charge_Beam', AnimType, ThirdPersonAnimRate, ShootBlendInTime, ShootBlendOutTime, true, false);
            }
        }        
    }
    else
    {
        if(Instigator.FiringMode == 6)
        {
            if(P.bIsCrouched)
            {
                P.PlayBodyAnim('ADD_CH_Shoot_Beam', AnimType, ThirdPersonAnimRate, ShootBlendInTime, ShootBlendOutTime,, false);                
            }
            else
            {
                if(P.bIsWalking)
                {
                    P.PlayBodyAnim('ADD_Iron_Shoot_Beam', AnimType, ThirdPersonAnimRate, ShootBlendInTime, ShootBlendOutTime,, false);                    
                }
                else
                {
                    P.PlayBodyAnim('ADD_Shoot_Beam', AnimType, ThirdPersonAnimRate, ShootBlendInTime, ShootBlendOutTime,, false);
                }
            }            
        }
        else
        {
            super(KFWeaponAttachment).PlayPawnFireAnim(P, AnimType);
        }
    }
}

simulated function StartFire()
{
    local int ChargeLevel;

    StartFireTime = WorldInfo.TimeSeconds;
    ChargeTime = 0;
    bIsFullyCharged = false;
    bIsCharging = true;
    if(!Instigator.IsFirstPerson())
    {
        ChargeLevel = GetChargeFXLevel();
        if((ChargeLevel >= 0) && ChargeLevel < ChargeSounds.Length)
        {
            KFPawn(Instigator).PlayWeaponSoundEvent(ChargeSounds[ChargeLevel]);
        }
    }
    if(ChargingPSC == none)
    {
        ChargingPSC = new (self) Class'ParticleSystemComponent';
        if(WeapMesh != none)
        {
            WeapMesh.AttachComponentToSocket(ChargingPSC, 'MuzzleFlash');            
        }
        else
        {
            AttachComponent(ChargingPSC);
        }        
    }
    else
    {
        ChargingPSC.ActivateSystem();
    }
    if(ChargingPSC != none)
    {
        ChargingPSC.SetTemplate(ChargingEffect);
    }
}

simulated function SpawnTracer(Vector EffectLocation, Vector HitLocation)
{
    local editinline ParticleSystemComponent E;
    local Vector Dir;
    local float DistSq, TracerDuration;
    local KFTracerInfo TracerInfo;

    if((Instigator == none) || Instigator.FiringMode >= TracerInfos.Length)
    {
        return;
    }
    if(Instigator.FiringMode != 0)
    {
        return;
    }
    bIsCharging = false;
    ChargeTime = 0;
    TracerInfo = TracerInfos[Instigator.FiringMode];
    if(((!self.WorldInfo.TimeDilation < 1 && TracerInfo.bDoTracerDuringNormalTime) || (self.WorldInfo.TimeDilation < 1) && TracerInfo.bDoTracerDuringZedTime) && TracerInfo.TracerTemplate != none)
    {
        Dir = HitLocation - EffectLocation;
        DistSq = VSizeSq(Dir);
        if(DistSq > float(TracerInfo.MinTracerEffectDistanceSquared))
        {
            TracerDuration = FMin((Sqrt(DistSq) - 100) / float(TracerInfo.TracerVelocity), 1);
            if(TracerDuration > 0)
            {
                E = WorldInfo.MyEmitterPool.SpawnEmitter(TracerInfo.TracerTemplate, EffectLocation, rotator(Dir));
                E.SetVectorParameter('Shotend', HitLocation);
                E.SetFloatParameter('Tracer_Lifetime', TracerDuration);
            }
        }
    }
}

simulated function SetBeamColor(int ChargeLevel)
{
    local LinearColor BeamColor;
    local int I;

    if(WeaponMICs.Length == 0)
    {
        I = 1;
        J0x1B:

        if(I < WeaponMaterialCount)
        {
            WeaponMICs.AddItem(WeapMesh.CreateAndSetMaterialInstanceConstant(I);
            ++ I;
            goto J0x1B;
        }
    }
    if(Instigator.FiringMode == 0)
    {
        BeamColor = DefaultFireModeColor;        
    }
    else
    {
        switch(ChargeLevel)
        {
            case 3:
                BeamColor = EnergyColorL3;
                break;
            case 2:
                BeamColor = EnergyColorL2;
                break;
            case 1:
                BeamColor = EnergyColorL1;
                break;
            default:
                BeamColor = EnergyColorL0;
                break;
                break;
        }
    }
    WeaponMIC.SetVectorParameterValue('Energy_Color', BeamColor);
    I = 0;
    J0x16C:

    if(I < WeaponMICs.Length)
    {
        WeaponMICs[I].SetVectorParameterValue('Energy_Color', BeamColor);
        ++ I;
        goto J0x16C;
    }
}

simulated event Tick(float DeltaTime)
{
    local int StartChargeLevel, EndChargeLevel;

    if(bIsCharging && !bIsFullyCharged)
    {
        StartChargeLevel = GetChargeFXLevel();
        ChargeTime = WorldInfo.TimeSeconds - StartFireTime;
        EndChargeLevel = GetChargeFXLevel();
        if(!Instigator.IsFirstPerson() && StartChargeLevel != EndChargeLevel)
        {
            if((EndChargeLevel >= 0) && EndChargeLevel < ChargeSounds.Length)
            {
                KFPawn(Instigator).PlayWeaponSoundEvent(ChargeSounds[EndChargeLevel]);
            }
        }
    }
    if((bIsCharging && !bIsFullyCharged) && (GetChargeFXLevel()) == Class'KFWeap_AssaultRifle_LazerCutter'.default.MaxChargeLevel)
    {
        bIsFullyCharged = true;
    }
    if(bIsCharging)
    {
        SetBeamColor(GetChargeFXLevel());        
    }
    else
    {
        if(Instigator.FiringMode == 0)
        {
            SetBeamColor(0);
        }
    }
    super.Tick(DeltaTime);
}

simulated function bool ThirdPersonFireEffects(Vector HitLocation, KFPawn P, byte ThirdPersonAnimRateByte)
{
    local bool bResult;
    local int ChargeLevel;

    bResult = super(KFWeaponAttachment).ThirdPersonFireEffects(HitLocation, P, ThirdPersonAnimRateByte);
    if((P.FiringMode == 6) && P.ActorEffectIsRelevant(P, false, 15000, 2000))
    {
        if(!bFireSpraying)
        {
            ChargeLevel = GetChargeFXLevel();
            if((ChargeLevel >= 0) && ChargeLevel < FireLoopSounds.Length)
            {
                KFPawn(Instigator).PlayWeaponSoundEvent(FireLoopSounds[ChargeLevel]);
            }
            bPlayMuzzleFlash = true;
        }
        if(ChargingPSC != none)
        {
            ChargingPSC.DeactivateSystem();
        }
        TurnOnFireSpray();
        bIsCharging = false;
        bResult = true;
    }
    return bResult;
}

simulated function ResetAnimationState()
{
    local KFPawn P;

    P = KFPawn(Instigator);
    if(P != none)
    {
        P.StopBodyAnim(0, 0.1);
    }
    InterruptWeaponAnim();
}

simulated function StopThirdPersonFireEffects()
{
    if(bFireSpraying)
    {
        ResetAnimationState();
        KFPawn(Instigator).PlayWeaponSoundEvent(FireLoopStop);
    }
    SetBeamColor(0);
    super.StopThirdPersonFireEffects();
}

simulated function FirstPersonFireEffects(Weapon W, Vector HitLocation)
{
    super(KFWeaponAttachment).FirstPersonFireEffects(W, HitLocation);
    if(Instigator.FiringMode == 6)
    {
        bIsCharging = false;
    }
    if(ChargingPSC != none)
    {
        ChargingPSC.DeactivateSystem();
    }
}

simulated function CauseMuzzleFlash(byte FiringMode)
{
    if(FiringMode != 1)
    {
        if(FiringMode == 6)
        {
            if((MuzzleFlash == none) && MuzzleFlashTemplate != none)
            {
                AttachMuzzleFlash();
            }
            if(bPlayMuzzleFlash)
            {
                switch(GetChargeFXLevel())
                {
                    case 0:
                    case 1:
                        MuzzleFlash.MuzzleFlash.ParticleSystemTemplate = MuzzleFlashEffectL1;
                        MuzzleFlash.MuzzleFlash.PSC.SetTemplate(MuzzleFlashEffectL1);
                        break;
                    case 2:
                        MuzzleFlash.MuzzleFlash.ParticleSystemTemplate = MuzzleFlashEffectL2;
                        MuzzleFlash.MuzzleFlash.PSC.SetTemplate(MuzzleFlashEffectL2);
                        break;
                    case 3:
                        MuzzleFlash.MuzzleFlash.ParticleSystemTemplate = MuzzleFlashEffectL3;
                        MuzzleFlash.MuzzleFlash.PSC.SetTemplate(MuzzleFlashEffectL3);
                        break;
                    default:
                        break;
                }
                bPlayMuzzleFlash = false;
                MuzzleFlash.MuzzleFlash.Duration = 0;
                super(KFWeaponAttachment).CauseMuzzleFlash(FiringMode);
            }            
        }
        else
        {
            MuzzleFlash.MuzzleFlash.ParticleSystemTemplate = MuzzleFlashTemplate.MuzzleFlash.ParticleSystemTemplate;
            MuzzleFlash.MuzzleFlash.PSC.SetTemplate(MuzzleFlashTemplate.MuzzleFlash.ParticleSystemTemplate);
            MuzzleFlash.MuzzleFlash.Duration = MuzzleFlashTemplate.MuzzleFlash.Duration;
            super(KFWeaponAttachment).CauseMuzzleFlash(FiringMode);
        }
    }
}

function int GetChargeFXLevel()
{
    return Min(int(ChargeTime / Class'KFWeap_AssaultRifle_LazerCutter'.default.ChargeTimePerLevel), Class'KFWeap_AssaultRifle_LazerCutter'.default.MaxChargeLevel);
}

defaultproperties
{
    FireLoopSounds(0)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LazerCutter_Beam_Shoot_LP_Level_0_3P'
    FireLoopSounds(1)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LazerCutter_Beam_Shoot_LP_Level_1_3P'
    FireLoopSounds(2)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LazerCutter_Beam_Shoot_LP_Level_2_3P'
    FireLoopSounds(3)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LazerCutter_Beam_Shoot_LP_Level_3_3P'
    FireLoopStop=AkEvent'WW_WEP_Lazer_Cutter.Stop_WEP_LazerCutter_Beam_Shoot_Loop_3P'
    ChargeSounds(0)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LaserCutter_Beam_Charged_LP_Level_0_3P'
    ChargeSounds(1)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LaserCutter_Beam_Charged_LP_Level_1_3P'
    ChargeSounds(2)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LaserCutter_Beam_Charged_LP_Level_2_3P'
    ChargeSounds(3)=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LaserCutter_Beam_Charged_LP_Level_3_3P'
    ChargingEffect=ParticleSystem'WEP_Laser_Cutter_EMIT.FX_Laser_Cutter_Beam_Charge_00'
    MuzzleFlashEffectL1=ParticleSystem'WEP_Laser_Cutter_EMIT.FX_Laser_Cutter_Beam_Muzzleflash_01'
    MuzzleFlashEffectL2=ParticleSystem'WEP_Laser_Cutter_EMIT.FX_Laser_Cutter_Beam_Muzzleflash_02'
    MuzzleFlashEffectL3=ParticleSystem'WEP_Laser_Cutter_EMIT.FX_Laser_Cutter_Beam_Muzzleflash_03'
    DefaultFireModeColor=(R=5,G=1,B=20,A=1)
    EnergyColorL0=(R=5,G=1,B=20,A=1)
    EnergyColorL1=(R=20,G=5,B=200,A=1)
    EnergyColorL2=(R=5,G=25,B=200,A=1)
    EnergyColorL3=(R=20,G=50,B=200,A=1)
    WeaponMaterialCount=5
    PilotLightPlayEvent=AkEvent'WW_WEP_Lazer_Cutter.Play_WEP_LazerCutter_Idle_LP'
    PilotLightStopEvent=AkEvent'WW_WEP_Lazer_Cutter.Stop_WEP_LazerCutter_Idle_LP'
    begin object name=PilotLight0 class=KFParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFParticleSystemComponent'Default__KFWeapAttach_LazerCutter.PilotLight0'
    PSC_PilotLight=PilotLight0
    begin object name=FlameEndSpray0 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFWeapAttach_LazerCutter.FlameEndSpray0'
    PSC_EndSpray=FlameEndSpray0
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_LazerCutter.SkeletalMeshComponent0.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_LazerCutter.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}