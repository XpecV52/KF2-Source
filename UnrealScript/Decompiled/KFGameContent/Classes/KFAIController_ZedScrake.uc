/*******************************************************************************
 * KFAIController_ZedScrake generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAIController_ZedScrake extends KFAIController_Monster
    config(AI)
    hidecategories(Navigation);

/** Threshold of health below which the Scrake will start rage charging */
var(RageCharge) float RageHealthThreshold;

function bool AmIAllowedToSuicideWhenStuck()
{
    return false;
}

event Possess(Pawn inPawn, bool bVehicleTransition)
{
    if(KFPawn_ZedScrake(inPawn) != none)
    {
        if(Skill == Class'KFDifficultyInfo'.static.GetDifficultyValue(0))
        {
            RageHealthThreshold = KFPawn_ZedScrake(inPawn).RageHealthThresholdNormal;            
        }
        else
        {
            if(Skill <= Class'KFDifficultyInfo'.static.GetDifficultyValue(1))
            {
                RageHealthThreshold = KFPawn_ZedScrake(inPawn).RageHealthThresholdHard;                
            }
            else
            {
                if(Skill <= Class'KFDifficultyInfo'.static.GetDifficultyValue(2))
                {
                    RageHealthThreshold = KFPawn_ZedScrake(inPawn).RageHealthThresholdSuicidal;                    
                }
                else
                {
                    RageHealthThreshold = KFPawn_ZedScrake(inPawn).RageHealthThresholdHellOnEarth;
                }
            }
        }
    }
    super.Possess(inPawn, bVehicleTransition);
}

function NotifyTakeHit(Controller InstigatedBy, Vector HitLocation, int Damage, class<DamageType> DamageType, Vector Momentum)
{
    if((ShouldSprint()) && MyKFPawn != none)
    {
        MyKFPawn.SetSprinting(true);
    }
    super(Controller).NotifyTakeHit(InstigatedBy, HitLocation, Damage, DamageType, Momentum);
}

function bool ShouldSprint()
{
    if((((MyKFPawn == none) || (Enemy == none) && DoorEnemy == none) || !MyKFPawn.IsAliveAndWell()) || !Enemy.IsAliveAndWell())
    {
        return false;
    }
    if((IsEnraged()) || IsFrustrated())
    {
        return true;
    }
    return false;
}

function bool IsEnraged()
{
    return GetHealthPercentage() < RageHealthThreshold;
}

function UpdateSprintFrustration(optional byte bForceFrustration)
{
    bForceFrustration = 255;
    super(KFAIController).UpdateSprintFrustration(((IsEnraged()) ? 1 : bForceFrustration));
}

function bool IsFrustrated()
{
    return (IsEnraged()) || super(KFAIController).IsFrustrated();
}

function bool CanEvadeGrenade()
{
    if((MyKFPawn == none) || MyKFPawn.bIsSprinting)
    {
        return false;
    }
    return super(KFAIController).CanEvadeGrenade();
}

defaultproperties
{
    bCanTeleportCloser=false
    TeleportCooldown=10
    HiddenRelocateTeleportThreshold=7
    EvadeGrenadeChance=0.75
    FrustrationDelay=5
}