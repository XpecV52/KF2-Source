/*******************************************************************************
 * KFGameInfo_Objective generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameInfo_Objective extends KFGameInfo_Survival
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var KFMapInfo MyKFMI;

event InitGame(string Options, out string ErrorMessage)
{
    super(KFGameInfo).InitGame(Options, ErrorMessage);
    GameLength = 2;
}

static function bool GametypeChecksWaveLength()
{
    return false;
}

event PreBeginPlay()
{
    MyKFMI = KFMapInfo(WorldInfo.GetMapInfo());
    super.PreBeginPlay();
}

function InitSpawnManager()
{
    SpawnManager = new (self) SpawnManagerClasses[GameLength];
    SpawnManager.Initialize();
    WaveMax = byte(MyKFMI.ObjectiveModeObjectives.Length);
    MyKFGRI.WaveMax = WaveMax;
}

function SetBossIndex()
{
    if(MyKFGRI.IsBossWave())
    {
        if(KFMapObjective_ExterminateWave(MyKFGRI.CurrentObjective).bRandomBoss)
        {
            BossIndex = Rand(4);            
        }
        else
        {
            BossIndex = KFMapObjective_ExterminateWave(MyKFGRI.CurrentObjective).BossType;
        }
        MyKFGRI.CacheSelectedBoss(BossIndex);        
    }
    else
    {
        if(BossIndex == -1)
        {
            super(KFGameInfo).SetBossIndex();
        }
    }
}

function byte GetGameIntensityForMusic()
{
    local int AppliedWaveNum;

    AppliedWaveNum = MyKFMI.GetAppliedWaveNum();
    if(AppliedWaveNum <= 1)
    {
        return 1;        
    }
    else
    {
        if(AppliedWaveNum <= 3)
        {
            return 4;            
        }
        else
        {
            if(AppliedWaveNum <= 5)
            {
                return 7;                
            }
            else
            {
                return 10;
            }
        }
    }
}

function int CalculateLateJoinerStartingDosh(int MinimumRespawnDosh)
{
    if(((default.LateArrivalStarts.Length > 0) && GameLength >= 0) && GameLength < default.LateArrivalStarts.Length)
    {
        if(((default.LateArrivalStarts[GameLength].StartingDosh.Length > 0) && (WaveNum - 1) >= 0) && (WaveNum - 1) < default.LateArrivalStarts[GameLength].StartingDosh.Length)
        {
            LogInternal("SCORING: Late joiner received" @ string(LateArrivalStarts[GameLength].StartingDosh[WaveNum - 1]));
            return default.LateArrivalStarts[GameLength].StartingDosh[WaveNum - 1];
        }
    }
    if(bLogScoring)
    {
        LogInternal("SCORING: Late joiner - invalid parameters to properly award late joiner dosh. Will instead receive Minimum Respawn Dosh of" @ string(MinimumRespawnDosh));
    }
    return MinimumRespawnDosh;
}

function SetupNextWave(int WaveBuffer)
{
    if(MyKFGRI.IsBossWave())
    {
        SpawnManager.SetupNextWave(10, WaveBuffer);        
    }
    else
    {
        SpawnManager.SetupNextWave(byte(MyKFMI.GetAppliedWaveNum()), WaveBuffer);
    }
}

function class<KFPawn_Monster> GetAISpawnType(KFGame.KFAISpawnManager.EAIType AIType)
{
    local array<SpawnReplacement> SpawnReplacements;
    local int I;

    if(MyKFMI != none)
    {
        SpawnReplacements = MyKFMI.ObjectiveModeObjectives[WaveNum - 1].SpawnReplacements;
        if(SpawnReplacements.Length > 0)
        {
            I = 0;
            J0x72:

            if(I < SpawnReplacements.Length)
            {
                if((SpawnReplacements[I].SpawnEntry == AIType) && FRand() < SpawnReplacements[I].PercentChance)
                {
                    if(SpawnReplacements[I].NewClass.Length > 0)
                    {
                        return SpawnReplacements[I].NewClass[Rand(SpawnReplacements[I].NewClass.Length)];
                    }
                }
                ++ I;
                goto J0x72;
            }
        }
    }
    return AIClassList[AIType];
}

function float GetTotalWaveCountScale()
{
    local float WaveScale;

    WaveScale = super.GetTotalWaveCountScale();
    if(MyKFMI != none)
    {
        WaveScale *= MyKFMI.ObjectiveModeObjectives[WaveNum - 1].WaveScale;
    }
    return WaveScale;
}

function float GetGameInfoSpawnRateMod()
{
    local float SpawnRateMod;
    local KFGameReplicationInfo KFGRI;
    local int NumPlayersAlive;

    SpawnRateMod = super.GetGameInfoSpawnRateMod();
    KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
    if(KFGRI == none)
    {
        return SpawnRateMod;
    }
    if(MyKFMI == none)
    {
        return SpawnRateMod;
    }
    NumPlayersAlive = Clamp(KFGRI.GetNumPlayersAlive(), 1, MyKFMI.ObjectiveModeObjectives[WaveNum - 1].PerPlayerSpawnRateMod.Length) - 1;
    SpawnRateMod *= MyKFMI.ObjectiveModeObjectives[WaveNum - 1].PerPlayerSpawnRateMod[NumPlayersAlive];
    return SpawnRateMod;
}

function Killed(Controller Killer, Controller KilledPlayer, Pawn KilledPawn, class<DamageType> DamageType)
{
    local KFMapObjective_ExterminateWave ExterminateObj;

    super.Killed(Killer, KilledPlayer, KilledPawn, DamageType);
    if(KilledPawn.IsA('KFPawn_Monster'))
    {
        ExterminateObj = KFMapObjective_ExterminateWave(MyKFGRI.CurrentObjective);
        if(ExterminateObj != none)
        {
            ExterminateObj.NotifyZedKilled(NotEqual_InterfaceInterface(KFInterface_MonsterBoss(KilledPawn), (none)));
        }
    }
}

function NotifyTakeHit(KFPawn Pawn, Controller InstigatedBy, Vector HitLocation, int Damage, class<DamageType> DamageType, Vector Momentum, Actor DamageCauser)
{
    local KFPawn_Monster KFPM;
    local KFMapObjective_ExterminateWave ExterminateObj;

    super(KFGameInfo).NotifyTakeHit(Pawn, InstigatedBy, HitLocation, Damage, DamageType, Momentum, DamageCauser);
    KFPM = KFPawn_Monster(Pawn);
    if((KFPM != none) && KFPM.IsABoss())
    {
        ExterminateObj = KFMapObjective_ExterminateWave(MyKFGRI.CurrentObjective);
        if(ExterminateObj != none)
        {
            ExterminateObj.NotifyBossDamaged(KFPM, Damage);
        }
    }
}

function EndOfMatch(bool bVictory)
{
    local KFPlayerController KFPC;

    if((WorldInfo.GRI != none) && WorldInfo.GRI.GameClass.static.AllowAnalyticsLogging())
    {
        WorldInfo.TWLogEvent("match_end", none, "#" $ string(WaveNum), "#" $ ((bVictory) ? "1" : "0"), "#" $ string(GameConductor.ZedVisibleAverageLifespan));
    }
    if(bVictory)
    {
        SetTimer(EndCinematicDelay, false, 'SetWonGameCamera');
        foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
        {
            KFPC.ClientWonGame(WorldInfo.GetMapName(true), byte(GameDifficulty), byte(GameLength), IsMultiplayerGame());            
        }        
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 2);        
    }
    else
    {
        BroadcastLocalizedMessage(Class'KFLocalMessage_Priority', 3);
        SetZedsToVictoryState();
    }
    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        KFPC.ClientGameOver(WorldInfo.GetMapName(true), byte(GameDifficulty), byte(GameLength), IsMultiplayerGame(), byte(WaveNum));        
    }    
    GotoState('MatchEnded');
}

function float GetAdjustedAIDoshValue(class<KFPawn_Monster> MonsterClass)
{
    local float TempValue;

    if(!ShouldOverrideDoshOnKill(MonsterClass, TempValue))
    {
        TempValue = float(MonsterClass.static.GetDoshValue());
    }
    TempValue *= DifficultyInfo.GetKillCashModifier();
    ModifyAIDoshValueForPlayerCount(TempValue);
    TempValue *= GameLengthDoshScale[GameLength];
    KFMapInfo(WorldInfo.GetMapInfo()).ModifyAIDoshValue(TempValue);
    if(MyKFGRI.CurrentObjective != none)
    {
        TempValue *= KFInterface_MapObjective(MyKFGRI.CurrentObjective).GetDoshValueModifier();
    }
    return TempValue;
}

function StartWave()
{
    if((MyKFMI != none) && MyKFMI.ObjectiveModeObjectives[WaveNum].bShouldAutoStartWave)
    {
        super.StartWave();        
    }
    else
    {
        if(MyKFGRI.OpenedTrader != none)
        {
            MyKFGRI.CloseTrader();
            NotifyTraderClosed();
        }
    }
}

simulated function SeqActStartWave()
{
    if(IsInState('PlayingWave') && MyKFGRI != none)
    {
        if((MyKFGRI.CurrentObjective == none) || !KFInterface_MapObjective(MyKFGRI.CurrentObjective).IsActive())
        {
            StartWave();
        }
    }
}

defaultproperties
{
    DifficultyInfoClass=Class'KFGameDifficulty_Objective'
    DifficultyInfoConsoleClass=Class'KFGameDifficulty_Objective_Console'
    GameName="Objective"
    GameReplicationInfoClass=Class'KFGameReplicationInfo_Objective'
}