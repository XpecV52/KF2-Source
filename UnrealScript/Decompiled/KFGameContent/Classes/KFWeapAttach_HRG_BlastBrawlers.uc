/*******************************************************************************
 * KFWeapAttach_HRG_BlastBrawlers generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_HRG_BlastBrawlers extends KFWeapAttach_DualBase
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

var protected transient bool bUsingLeftWeapon;
var protected transient name ReloadAnimName;
var protected transient float ReloadAnimRateMod;

simulated function PlayWeaponFireAnim();

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    ReloadAnimName = Class'KFWeap_HRG_BlastBrawlers'.default.ReloadAnimation;
    ReloadAnimRateMod = Class'KFWeap_HRG_BlastBrawlers'.default.ReloadAnimRateModifier;
}

simulated function bool ThirdPersonFireEffects(Vector HitLocation, KFPawn P, byte ThirdPersonAnimRateByte)
{
    SpawnTracer(GetMuzzleLocation(), HitLocation);
    if(!ActorEffectIsRelevant(P, false, MaxFireEffectDistance))
    {
        return false;
    }
    CauseMuzzleFlash(P.FiringMode);
    P.LastWeaponFireTime = -1;
    return true;
}

simulated function Vector GetMuzzleLocation(optional byte MuzzleID)
{
    local Vector SocketLocation;

    if(bUsingLeftWeapon)
    {
        if((LeftMuzzleFlash == none) && MuzzleFlashTemplate != none)
        {
            AttachMuzzleFlash();
        }
        if(LeftMuzzleFlash != none)
        {
            LeftWeapMesh.GetSocketWorldLocationAndRotation(LeftMuzzleFlash.GetSocketName(), SocketLocation);
            return SocketLocation;
        }
    }
    return super.GetMuzzleLocation(MuzzleID);
}

simulated function CauseMuzzleFlash(byte FiringMode)
{
    if(bUsingLeftWeapon)
    {
        if((LeftMuzzleFlash == none) && MuzzleFlashTemplate != none)
        {
            AttachMuzzleFlash();
        }
        if(LeftMuzzleFlash != none)
        {
            LeftMuzzleFlash.CauseMuzzleFlash(FiringMode);
            if(LeftMuzzleFlash.bAutoActivateShellEject)
            {
                LeftMuzzleFlash.CauseShellEject();
            }
        }        
    }
    else
    {
        super.CauseMuzzleFlash(FiringMode);
        bUsingLeftWeapon = true;
    }
}

simulated function UpdateThirdPersonWeaponAction(KFGame.KFWeaponAttachment.EWeaponState NewWeaponState, KFPawn P, byte ThirdPersonAnimRateByte)
{
    bUsingLeftWeapon = false;
    super(KFWeaponAttachment).UpdateThirdPersonWeaponAction(NewWeaponState, P, ThirdPersonAnimRateByte);
}

simulated function PlayReloadMagazineAnim(KFGame.KFWeaponAttachment.EWeaponState NewWeaponState, KFPawn P)
{
    PlayCharacterMeshAnim(P, ReloadAnimName, true);
}

simulated function PlayWeaponMeshAnim(name AnimName, AnimNodeSlot SyncNode, bool bLoop)
{
    local float Duration;

    if(!IsAnimationValid(AnimName))
    {
        return;
    }
    if(!bWeapMeshIsPawnMesh)
    {
        Duration = WeapMesh.GetAnimLength(AnimName);
        if(AnimName == ReloadAnimName)
        {
            Duration *= ReloadAnimRateMod;
        }
        WeapMesh.PlayAnim(AnimName, Duration / ThirdPersonAnimRate, bLoop);
        if(SyncNode != none)
        {
            bSynchronizeWeaponAnim = true;
            SyncPawnNode = SyncNode;
            SyncAnimName = AnimName;
            bSyncAnimCheckRelevance = false;
        }
    }
}

simulated function bool IsAnimationValid(name AnimName)
{
    return AnimName == ReloadAnimName;
}

defaultproperties
{
    begin object name=SkeletalMeshComponent1 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_HRG_BlastBrawlers.SkeletalMeshComponent1.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_HRG_BlastBrawlers.SkeletalMeshComponent1'
    LeftWeapMesh=SkeletalMeshComponent1
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_HRG_BlastBrawlers.SkeletalMeshComponent0.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_HRG_BlastBrawlers.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}