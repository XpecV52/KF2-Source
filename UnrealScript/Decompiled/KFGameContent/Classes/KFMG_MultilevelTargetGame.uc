/*******************************************************************************
 * KFMG_MultilevelTargetGame generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMG_MultilevelTargetGame extends KFMG_RiggedTargetGame
    placeable
    hidecategories(Navigation);

/** List of starter buttons.  Once all of these are cleared, the game is "won" */
var() array<KFTrigger_MinigameButton> StarterButtons;
var array<bool> LevelsCleared;

event PostBeginPlay()
{
    super.PostBeginPlay();
    LevelsCleared.Length = StarterButtons.Length;
}

function bool CanBeActivated(KFTrigger_MinigameButton ActivationSource)
{
    local int Idx;

    Idx = StarterButtons.Find(ActivationSource;
    if(Idx == -1)
    {
        return false;        
    }
    else
    {
        if(LevelsCleared[Idx])
        {
            return false;
        }
    }
    return !bGameRunning;
}

function Activated(KFTrigger_MinigameButton ActivationSource)
{
    RigIndex = StarterButtons.Find(ActivationSource;
    super.Activated(ActivationSource);
}

function Deactivated()
{
    RigIndex = -1;
    super(KFMG_TargetGame).Deactivated();
}

function MinigameComplete(bool bVictory)
{
    local int Idx;
    local KFSeqEvent_MinigameEndCondition EndCondEvent;
    local int I;

    EndGameState = ((bVictory) ? 0 : 1);
    FinalizeGame();
    Idx = StarterButtons.Find(Activator;
    if(Idx >= 0)
    {
        I = 0;
        J0x5F:

        if(I < GeneratedEvents.Length)
        {
            EndCondEvent = KFSeqEvent_MinigameEndCondition(GeneratedEvents[I]);
            if(EndCondEvent != none)
            {
                EndCondEvent.MinigameComplete(self, bVictory, Idx);
            }
            ++ I;
            goto J0x5F;
        }
        if(((Role == ROLE_Authority) && bVictory) && Activator != none)
        {
            Activator.DeActivate();
        }
        LevelsCleared[Idx] = bVictory;
        CheckFullCompletion();
    }
}

function CheckFullCompletion()
{
    local bool bComplete;
    local KFSeqEvent_MinigameEndCondition EndCondEvent;
    local int I;

    foreach LevelsCleared(bComplete,)
    {
        if(!bComplete)
        {            
            return;
        }        
    }    
    LogInternal("*** Complete victory!");
    I = 0;
    J0x51:

    if(I < GeneratedEvents.Length)
    {
        EndCondEvent = KFSeqEvent_MinigameEndCondition(GeneratedEvents[I]);
        if(EndCondEvent != none)
        {
            EndCondEvent.AllLevelsComplete(self);
        }
        ++ I;
        goto J0x51;
    }
    ResetGame();
}

function ResetGame()
{
    super(KFMG_TargetGame).ResetGame();
    LevelsCleared.Length = 0;
    LevelsCleared.Length = StarterButtons.Length;
}

defaultproperties
{
    RigIndex=-1
    bClearControllerOnCompletion=false
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFMG_MultilevelTargetGame.Sprite'
    Components(0)=Sprite
}