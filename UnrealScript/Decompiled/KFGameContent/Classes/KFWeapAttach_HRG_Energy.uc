/*******************************************************************************
 * KFWeapAttach_HRG_Energy generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeapAttach_HRG_Energy extends KFWeaponAttachment
    hidecategories(Navigation,Object,Movement,Attachment,Collision,Physics,Advanced,Debug,Mobile);

var MaterialInstanceConstant WeaponMIC_2;
var MaterialInstanceConstant WeaponMICScreen;

simulated function SetWeaponAltFireMode(bool bUsingAltFireMode)
{
    super.SetWeaponAltFireMode(bUsingAltFireMode);
    UpdateMaterial(((bUsingAltFireMode) ? 1 : 0));
}

simulated function UpdateMaterial(byte FireMode)
{
    local LinearColor MatColor;

    if(WeapMesh == none)
    {
        return;
    }
    MatColor = ((FireMode == 0) ? Class'KFWeap_HRG_Energy'.default.DefaultFireMaterialColor : Class'KFWeap_HRG_Energy'.default.AltFireMaterialColor);
    if(WeaponMIC == none)
    {
        WeaponMIC = WeapMesh.CreateAndSetMaterialInstanceConstant(0);
    }
    if(WeaponMIC_2 == none)
    {
        WeaponMIC_2 = WeapMesh.CreateAndSetMaterialInstanceConstant(2);
    }
    if(WeaponMICScreen == none)
    {
        WeaponMICScreen = WeapMesh.CreateAndSetMaterialInstanceConstant(1);
    }
    WeaponMIC.SetVectorParameterValue('Vector_GlowColor', MatColor);
    WeaponMIC_2.SetVectorParameterValue('Vector_GlowColor', MatColor);
    WeaponMICScreen.SetVectorParameterValue('Color_override', MatColor);
}

simulated function PlayWeaponFireAnim()
{
    local float Duration, AnimRateModifier;
    local name animation;
    local KFPawn_Human KFPH;

    KFPH = KFPawn_Human(Instigator);
    AnimRateModifier = (((KFPH != none) && KFPH.bUsingAltFireMode) ? Class'KFWeap_HRG_Energy'.default.SecondaryFireAnimRateModifier : 1);
    if(Instigator.bIsWalking)
    {
        Duration = WeapMesh.GetAnimLength('Iron_Shoot');
        animation = 'Iron_Shoot';        
    }
    else
    {
        Duration = WeapMesh.GetAnimLength('Shoot');
        animation = 'Shoot';
        WeapMesh.PlayAnim('Shoot', Duration / ThirdPersonAnimRate,, true);
    }
    WeapMesh.PlayAnim(animation, (Duration / ThirdPersonAnimRate) * AnimRateModifier,, true);
}

simulated function PlayReloadMagazineAnim(KFGame.KFWeaponAttachment.EWeaponState NewWeaponState, KFPawn P)
{
    local name AnimName;

    switch(NewWeaponState)
    {
        case 1:
        case 2:
            AnimName = ((!P.bIsCrouched) ? 'Reload_Half' : 'Reload_Half_CH');
            break;
        case 3:
        case 4:
            AnimName = ((!P.bIsCrouched) ? 'Reload_Half_Elite' : 'Reload_Half_Elite_CH');
            break;
        default:
            break;
    }
    PlayCharacterMeshAnim(P, AnimName, true);
}

defaultproperties
{
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFWeapAttach_HRG_Energy.SkeletalMeshComponent0.MeshSequenceA'
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFWeapAttach_HRG_Energy.SkeletalMeshComponent0'
    WeapMesh=SkeletalMeshComponent0
}