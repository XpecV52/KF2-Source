/*******************************************************************************
 * KFBloodRainVolume generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFBloodRainVolume extends Volume
    hidecategories(Navigation,Object,Movement,Display);

/** How many seconds should pass between blood splats */
var() float Frequency<ClampMin=0.05>;
/** How many blood splats to apply per frequency interval (limited by config: [KFGame.KFGoreManager] MaxPersistentSplatsPerFrame) */
var() int SplatsPerInterval<ClampMin=1>;
/** How much to scale the default blood splat size */
var() float Scale<ClampMin=0.01>;
/** How far below the volume to check for surfaces to splatter */
var() float TraceLength<ClampMin=100>;
var transient Box AABB;
var transient KFGoreManager GoreMan;

simulated event PostBeginPlay()
{
    if(BrushComponent != none)
    {
        AABB.Min = BrushComponent.Bounds.Origin - BrushComponent.Bounds.BoxExtent;
        AABB.Max = BrushComponent.Bounds.Origin + BrushComponent.Bounds.BoxExtent;
        GoreMan = KFGoreManager(WorldInfo.MyGoreEffectManager);
    }
}

simulated function AddSplatter()
{
    local Vector V, D;
    local int SplatCount;

    D = AABB.Max - AABB.Min;
    V.Z = AABB.Min.Z + (D.Z / 2);
    J0xB5:

    if(SplatCount < SplatsPerInterval)
    {
        V.X = AABB.Min.X + (D.X * FRand());
        V.Y = AABB.Min.Y + (D.Y * FRand());
        J0x1A8:

        if(!EncompassesPoint(V))
        {
            V.X = AABB.Min.X + (D.X * FRand());
            V.Y = AABB.Min.Y + (D.Y * FRand());
            goto J0x1A8;
        }
        GoreMan.LeaveAPersistentBloodSplat(V, vect(0, 0, -1), Scale,,, TraceLength);
        ++ SplatCount;
        goto J0xB5;
    }
}

simulated function SetActive(bool bActive)
{
    if(GoreMan == none)
    {
        WarnInternal(("Cannot set " $ string(self)) $ " active - incomplete initialization");
        return;
    }
    if(bActive)
    {
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(FRand() * 2, false, 'Timer_SetActive', self);        
    }
    else
    {
        Class'WorldInfo'.static.GetWorldInfo().TimerHelper.ClearTimer('AddSplatter', self);
    }
}

protected simulated function Timer_SetActive()
{
    Class'WorldInfo'.static.GetWorldInfo().TimerHelper.SetTimer(Frequency, true, 'AddSplatter', self);
}

defaultproperties
{
    Frequency=1
    SplatsPerInterval=1
    Scale=1
    TraceLength=10000
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bAcceptsLights=false
        CollideActors=false
        BlockNonZeroExtent=false
        AlwaysLoadOnServer=false
    object end
    // Reference: BrushComponent'Default__KFBloodRainVolume.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bAcceptsLights=false
        CollideActors=false
        BlockNonZeroExtent=false
        AlwaysLoadOnServer=false
    object end
    // Reference: BrushComponent'Default__KFBloodRainVolume.BrushComponent0'
    Components(0)=BrushComponent0
    CollisionType=ECollisionType.COLLIDE_NoCollision
    bPushedByEncroachers=false
    bCanStepUpOn=false
    bReplicateMovement=false
    bMovable=false
    bCollideActors=false
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bAcceptsLights=false
        CollideActors=false
        BlockNonZeroExtent=false
        AlwaysLoadOnServer=false
    object end
    // Reference: BrushComponent'Default__KFBloodRainVolume.BrushComponent0'
    CollisionComponent=BrushComponent0
}