/*******************************************************************************
 * KFAIController_HansFriendlyTest generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFAIController_HansFriendlyTest extends KFAIController_Hans
    config(AI)
    hidecategories(Navigation);

var float EnemyVisionCheckInterval;
var float LastEnemyVisionCheckTime;

function InitPlayerReplicationInfo();

simulated event byte ScriptGetTeamNum()
{
    return 0;
}

function bool ShouldSprint()
{
    local float RangeToEnemy;

    if((((Enemy != none) && MyHansPawn != none) && !MyHansPawn.bIsHeadless) && !MyHansPawn.bEmpPanicked)
    {
        if(MyHansPawn.bInHuntAndHealMode)
        {
            return true;
        }
        if((LastEnemySightedTime == float(0)) && (LastEnemyVisionCheckTime == float(0)) || (WorldInfo.TimeSeconds - LastEnemyVisionCheckTime) > EnemyVisionCheckInterval)
        {
            LastEnemyVisionCheckTime = WorldInfo.TimeSeconds;
            if(CanSee(Enemy))
            {
                LastEnemySightedTime = WorldInfo.TimeSeconds;
            }
        }
        if((LastEnemySightedTime == float(0)) || (WorldInfo.TimeSeconds - LastEnemySightedTime) > LostSightSprintDelay)
        {
            if((LastEnemyVisionCheckTime == float(0)) || (WorldInfo.TimeSeconds - LastEnemyVisionCheckTime) > EnemyVisionCheckInterval)
            {
                LastEnemyVisionCheckTime = WorldInfo.TimeSeconds;
                if(CanSee(Enemy))
                {
                    LastEnemySightedTime = WorldInfo.TimeSeconds;
                    return false;
                }
            }
            return true;
        }
        if(MyHansPawn.bGunsEquipped)
        {
            RangeToEnemy = VSize(Enemy.Location - Pawn.Location);
            if((RangeToEnemy > StartShootingRange) || RangeToEnemy < MinShootingRange)
            {
                return true;                
            }
            else
            {
                return false;
            }
        }
        return MyHansPawn.DesireSprintingInThisPhase();
    }
    return false;
}

function NotifyTakeHit(Controller InstigatedBy, Vector HitLocation, int Damage, class<DamageType> DamageType, Vector Momentum)
{
    super(Controller).NotifyTakeHit(InstigatedBy, HitLocation, Damage, DamageType, Momentum);
}

defaultproperties
{
    EnemyVisionCheckInterval=0.1
    MaxGunAttackLength=30
    MinShootingRange=100
    ShootingCooldown=3
    bAllowScriptTeamCheck=true
}