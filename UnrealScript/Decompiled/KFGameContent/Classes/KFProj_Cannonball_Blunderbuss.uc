/*******************************************************************************
 * KFProj_Cannonball_Blunderbuss generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFProj_Cannonball_Blunderbuss extends KFProj_BallisticExplosive
    hidecategories(Navigation);

/** Additional X Axis velocity to apply when launching this projectile */
var(Projectile) float TossX;
/** Factor added to the rolling speed of the ball when bouncing */
var(Projectilve) float RollingFactor;
var transient bool bIsRolling;
var transient bool bReadyToDetonate;
var bool IndicatorActive;
var transient float CurrentRoll;
var export editinline ParticleSystemComponent ProjIndicatorEffects;
/** This is the effect indicator that is played for the current user */
var(Projectile) ParticleSystem ProjIndicatorTemplate;
/** This is the effect indicator that is played for the current user in zed time */
var(Projectile) ParticleSystem ProjIndicatorTemplateZedTime;

function Init(Vector Direction)
{
    super(KFProjectile).Init(Direction);
}

simulated function PreBeginPlay()
{
    super.PreBeginPlay();
}

simulated function TryActivateIndicator()
{
    if(!IndicatorActive && Instigator != none)
    {
        IndicatorActive = true;
        if(((WorldInfo.NetMode == NM_Standalone) || Instigator.Role == ROLE_AutonomousProxy) || ((Instigator.Role == ROLE_Authority) && WorldInfo.NetMode == NM_ListenServer) && Instigator.IsLocallyControlled())
        {
            if((self.WorldInfo.TimeDilation < 1) && ProjIndicatorTemplateZedTime != none)
            {
                ProjIndicatorEffects = WorldInfo.MyEmitterPool.SpawnEmitterCustomLifetime(ProjIndicatorTemplateZedTime);                
            }
            else
            {
                if(ProjIndicatorTemplate != none)
                {
                    ProjIndicatorEffects = WorldInfo.MyEmitterPool.SpawnEmitterCustomLifetime(ProjIndicatorTemplate);
                }
            }
            if(ProjIndicatorEffects != none)
            {
                ProjIndicatorEffects.SetAbsolute(false, false, false);
                ProjIndicatorEffects.SetLODLevel(((WorldInfo.bDropDetail) ? 1 : 0));
                ProjIndicatorEffects.bUpdateComponentInTick = true;
                AttachComponent(ProjIndicatorEffects);
            }
        }
    }
}

simulated function OnInstigatorControllerLeft()
{
    if(WorldInfo.NetMode != NM_Client)
    {
        SetTimer((1 + float(Rand(5))) + FRand(), false, 'Timer_Detonate');
    }
}

function Timer_Detonate()
{
    Detonate();
}

function Detonate()
{
    local Vector ExplosionNormal;

    if((bIsRolling && !bHasExploded) && !bHasDisintegrated)
    {
        ExplosionNormal = vect(0, 0, 1) >> Rotation;
        CallExplode(Location, ExplosionNormal);        
    }
    else
    {
        bIsTimedExplosive = false;
        bNetDirty = true;
    }
}

simulated function TriggerExplosion(Vector HitLocation, Vector HitNormal, Actor HitActor)
{
    local KFWeap_Pistol_Blunderbuss Blunderbuss;

    if(Role == ROLE_Authority)
    {
        Blunderbuss = KFWeap_Pistol_Blunderbuss(Owner);
        if(Blunderbuss != none)
        {
            Blunderbuss.RemoveDeployedCannonball(,, self);
        }
    }
    super(KFProjectile).TriggerExplosion(HitLocation, HitNormal, HitActor);
}

simulated function Disintegrate(Rotator InDisintegrateEffectRotation)
{
    local KFWeap_Pistol_Blunderbuss Blunderbuss;

    if(Role == ROLE_Authority)
    {
        Blunderbuss = KFWeap_Pistol_Blunderbuss(Owner);
        if(Blunderbuss != none)
        {
            Blunderbuss.RemoveDeployedCannonball(,, self);
        }
    }
    super(KFProjectile).Disintegrate(InDisintegrateEffectRotation);
}

simulated function SetIsDud(bool bWantsClientSideDudHit, Vector HitNormal);

simulated event Tick(float DeltaTime)
{
    local Vector RollDelta;
    local Rotator NewRotation;

    if(((bIsRolling && WorldInfo.NetMode != NM_DedicatedServer) && Physics != 0) && (Velocity.X != float(0)) || Velocity.Y != float(0))
    {
        CurrentRoll -= (((Abs(Velocity.X) + Abs(Velocity.Y)) * DeltaTime) * RollingFactor);
        RollDelta = (vect(1, 0, 0) * Velocity.X) + (vect(0, 1, 0) * Velocity.Y);
        NewRotation = rotator(RollDelta);
        NewRotation.Pitch += int(CurrentRoll);
        SetRotation(NewRotation);
    }
    TryActivateIndicator();
    super(Actor).Tick(DeltaTime);
}

simulated event HitWall(Vector HitNormal, Actor Wall, PrimitiveComponent WallComp)
{
    bIsRolling = true;
    super.HitWall(HitNormal, Wall, WallComp);
}

simulated function ProcessTouch(Actor Other, Vector HitLocation, Vector HitNormal)
{
    local bool bWantsClientSideDudHit;
    local float TraveledDistance;
    local Vector VNorm;

    if(Other.IsA('KFTrigger_SirenProjectileShield'))
    {
        return;
    }
    if(!bCollideWithTeammates && Pawn(Other) != none)
    {
        if(Other.GetTeamNum() == GetTeamNum())
        {
            return;
        }
    }
    if((Instigator != none) && Instigator.Role < ROLE_Authority)
    {
        bWantsClientSideDudHit = true;
    }
    TraveledDistance = (WorldInfo.TimeSeconds - CreationTime) * Speed;
    TraveledDistance *= TraveledDistance;
    if((!bDud || bWantsClientSideDudHit && !bClientDudHit) && ((TraveledDistance < ArmDistSquared) || bIsTimedExplosive) || (OriginalLocation == vect(0, 0, 0)) && ArmDistSquared > float(0))
    {
        if(((LastTouched.Actor == Other) && TouchTimeThreshhold > float(0)) && (WorldInfo.TimeSeconds - LastTouched.Time) <= TouchTimeThreshhold)
        {
            return;
        }
        SetIsDud(bWantsClientSideDudHit, HitNormal);
        if((((Other != Instigator) && !Other.bStatic) && Other.GetTeamNum() != GetTeamNum()) && !CheckRepeatingTouch(Other))
        {
            ProcessBulletTouch(Other, HitLocation, HitNormal);
        }
        VNorm = (Velocity Dot HitNormal) * HitNormal;
        Velocity = (-VNorm * DampenFactor) + ((Velocity - VNorm) * DampenFactorParallel);
        Speed = VSize(Velocity);
    }
    if(!bDud && !bIsTimedExplosive)
    {
        if((Other != Instigator) && !Other.bStatic)
        {
            if(!CheckRepeatingTouch(Other) && Other.GetTeamNum() != GetTeamNum())
            {
                ProcessBulletTouch(Other, HitLocation, HitNormal);
            }
        }
        if((WorldInfo.NetMode == NM_Standalone) || ((WorldInfo.NetMode == NM_ListenServer) && Instigator != none) && Instigator.IsLocallyControlled())
        {
            super.ProcessTouch(Other, HitLocation, HitNormal);
            return;
        }
        if(((Owner != none) && KFWeapon(Owner) != none) && Instigator != none)
        {
            if((Instigator.Role < ROLE_Authority) && Instigator.IsLocallyControlled())
            {
                KFWeapon(Owner).HandleClientProjectileExplosion(HitLocation, self);
                super.ProcessTouch(Other, HitLocation, HitNormal);
                return;
            }
        }
        StopSimulating();
    }
}

protected simulated function StopSimulating()
{
    if(bHasExploded || Instigator.Role < ROLE_Authority)
    {
        Velocity = vect(0, 0, 0);
        Acceleration = vect(0, 0, 0);
        RotationRate = rot(0, 0, 0);
        SetPhysics(0);
        SetCollision(false, false);
        StopFlightEffects();
        bRotationFollowsVelocity = false;        
    }
    else
    {
        super(KFProjectile).StopSimulating();
    }
    if(ProjIndicatorEffects != none)
    {
        ProjIndicatorEffects.DeactivateSystem();
    }
}

defaultproperties
{
    TossX=150
    RollingFactor=1100
    ProjIndicatorTemplate=ParticleSystem'WEP_Blunderbuss_EMIT.FX_Cannonball_Projectile_Indicator'
    ProjIndicatorTemplateZedTime=ParticleSystem'WEP_Blunderbuss_EMIT.FX_Cannonball_Projectile_Indicator_ZEDTIME'
    ResetRotationOnStop=false
    GrenadeBounceEffectInfo=KFImpactEffectInfo'FX_Impacts_ARCH.DefaultGrenadeImpacts'
    DampenFactor=0.1
    DampenFactorParallel=0
    WallHitDampenFactor=0.5
    WallHitDampenFactorParallel=0.5
    MinSpeedBeforeStop=5
    bWarnAIWhenFired=true
    TossZ=150
    TerminalVelocity=3200
    ExplosionActorClass=Class'KFExplosion_BlunderbussCannonball'
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'WEP_Blunderbuss_ARCH.Cannonball_Explosion'
        Damage=250
        DamageRadius=750
        DamageFalloffExponent=2
        MyDamageType=Class'KFDT_Explosive_Blunderbuss'
        KnockDownStrength=0
        ExplosionSound=AkEvent'WW_WEP_SA_M79.Play_WEP_SA_M79_Explosion'
        ExploLight=PointLightComponent'Default__KFProj_Cannonball_Blunderbuss.ExplosionPointLight'
        ExploLightFadeOutTime=0.2
        CamShake=KFCameraShake'FX_CameraShake_Arch.Misc_Explosions.Light_Explosion_Rumble'
        CamShakeInnerRadius=200
        CamShakeFalloff=1.5
    object end
    // Reference: KFGameExplosion'Default__KFProj_Cannonball_Blunderbuss.ExploTemplate0'
    ExplosionTemplate=ExploTemplate0
    ProjDisintegrateTemplate=ParticleSystem'ZED_Siren_EMIT.FX_Siren_grenade_disable_01'
    AltExploEffects=KFImpactEffectInfo'WEP_Blunderbuss_ARCH.Cannonball_Explosion_Concussive_Force'
    ProjFlightTemplate=ParticleSystem'WEP_Blunderbuss_EMIT.FX_Cannonball_Projectile'
    ProjFlightTemplateZedTime=ParticleSystem'WEP_Blunderbuss_EMIT.FX_Cannonball_Projectile_ZEDTIME'
    AmbientSoundPlayEvent=AkEvent'WW_WEP_SA_M79.Play_WEP_SA_M79_Projectile_Loop'
    AmbientSoundStopEvent=AkEvent'WW_WEP_SA_M79.Stop_WEP_SA_M79_Projectile_Loop'
    AmbientComponent=AkComponent'Default__KFProj_Cannonball_Blunderbuss.AmbientAkSoundComponent'
    Speed=3200
    MaxSpeed=3200
    MomentumTransfer=50000
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=0
        CollisionRadius=0
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Cannonball_Blunderbuss.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=0
        CollisionRadius=0
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Cannonball_Blunderbuss.CollisionCylinder'
    Components(0)=CollisionCylinder
    Components(1)=AkComponent'Default__KFProj_Cannonball_Blunderbuss.AmbientAkSoundComponent'
    Physics=EPhysics.PHYS_Falling
    bUpdateSimulatedPosition=true
    LifeSpan=0
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=0
        CollisionRadius=0
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFProj_Cannonball_Blunderbuss.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}