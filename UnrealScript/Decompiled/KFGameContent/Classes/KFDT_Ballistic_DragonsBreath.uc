/*******************************************************************************
 * KFDT_Ballistic_DragonsBreath generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFDT_Ballistic_DragonsBreath extends KFDT_Ballistic
    abstract;

var class<KFDamageType> BurnDamageType;

static simulated function GetBoneToDismember(KFPawn_Monster inPawn, Vector HitDirection, name InHitZoneName, out name OutBoneName)
{
    local KFCharacterInfo_Monster MonsterInfo;

    MonsterInfo = inPawn.GetCharacterMonsterInfo();
    if(MonsterInfo != none)
    {
        if(InHitZoneName == 'chest')
        {
            OutBoneName = ((Rand(2) == 0) ? MonsterInfo.SpecialMeleeDismemberment.LeftShoulderBoneName : MonsterInfo.SpecialMeleeDismemberment.RightShoulderBoneName);
        }
    }
}

static simulated function bool CanDismemberHitZone(name InHitZoneName)
{
    if(super.CanDismemberHitZone(InHitZoneName))
    {
        return true;
    }
    switch(InHitZoneName)
    {
        case 'lupperarm':
        case 'rupperarm':
        case 'chest':
        case 'heart':
            return true;
        default:
            return false;
            break;
    }
}

static function float GetGoreDamageScale(Vector Location, Vector InstigatorLocation)
{
    local float DistSq;

    DistSq = VSizeSq(InstigatorLocation - Location);
    if(DistSq > float(1000000))
    {
        return 0.25;        
    }
    else
    {
        if(DistSq > float(160000))
        {
            return 0.5;            
        }
        else
        {
            return 1;
        }
    }
}

static function PlayImpactHitEffects(KFPawn P, Vector HitLocation, Vector HitDirection, byte HitZoneIndex, optional Pawn HitInstigator)
{
    if(P.bPlayedDeath && P.WorldInfo.TimeSeconds > P.TimeOfDeath)
    {
        default.BurnDamageType.static.PlayImpactHitEffects(P, HitLocation, HitDirection, HitZoneIndex, HitInstigator);
        return;
    }
    super(KFDamageType).PlayImpactHitEffects(P, HitLocation, HitDirection, HitZoneIndex, HitInstigator);
}

static function bool CanApplyDamageOverTime(out int InDamage, out class<KFDamageType> KFDT, optional Controller InstigatedBy)
{
    KFDT = default.BurnDamageType;
    return KFDT.default.DoT_Type != 0;
}

defaultproperties
{
    BurnDamageType=Class'KFDT_Fire_DragonsBreathDoT'
    AARWeaponID=47
    StumblePower=53
    LegStumblePower=53
    GunHitPower=30
    EffectGroup=EEffectDamageGroup.FXG_IncendiaryRound
    GoreDamageGroup=EGoreDamageGroup.DGT_Shotgun
    BurnPower=0.5
    ModifierPerkList=/* Array type was not detected. */
    CameraLensEffectTemplate=Class'KFGame.KFCameraLensEmit_Fire'
    BloodSpread=0.4
    BloodScale=0.6
    KDamageImpulse=350
    KDeathVel=10
    KDeathUpKick=120
}