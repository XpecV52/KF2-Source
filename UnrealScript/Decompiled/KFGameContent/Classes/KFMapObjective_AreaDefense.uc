/*******************************************************************************
 * KFMapObjective_AreaDefense generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_AreaDefense extends KFMapObjective_VolumeBase
    abstract
    hidecategories(Navigation,Object,Movement,Display);

var array<KFPawn_Human> TouchingHumans;
var array<KFPawn_Monster> TouchingZeds;
/** Per-player thresholds for amount of players needed in the volume */
var() const int PlayerThresholds[6];
/** Per-player count thresholds for amount of zeds allowed in volume */
var() const int ZedThresholds[6];
/** Whether or not the zone is in the danger state */
var() repnotify bool bDangerState;
var repnotify bool bTooFewPlayers;
var repnotify bool bTooManyZeds;
var float CurrentRewardAmount;
var float JustWinThreshold;
var float StandardWinThreshold;
var float GoodWinThreshold;

replication
{
     if(Role == ROLE_Authority)
        CurrentRewardAmount, bDangerState, 
        bTooFewPlayers, bTooManyZeds;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'bDangerState')
    {
        UpdateMeshArrayState();        
    }
    else
    {
        super(Actor).ReplicatedEvent(VarName);
    }
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    super(Actor).Touch(Other, OtherComp, HitLocation, HitNormal);
    if((KFPawn_Human(Other) != none) && TouchingHumans.Find(Other == -1)
    {
        TouchingHumans.AddItem(KFPawn_Human(Other);        
    }
    else
    {
        if((IsValidZed(Other)) && TouchingZeds.Find(Other == -1)
        {
            TouchingZeds.AddItem(KFPawn_Monster(Other);
        }
    }
}

event UnTouch(Actor Other)
{
    super(Actor).UnTouch(Other);
    if(TouchingHumans.Find(Other != -1)
    {
        TouchingHumans.RemoveItem(Other;        
    }
    else
    {
        if(TouchingZeds.Find(Other != -1)
        {
            TouchingZeds.RemoveItem(Other;
        }
    }
}

simulated function UpdateMeshArrayState()
{
    local int I, J, K;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        I = 0;
        J0x34:

        if(I < ZoneBoundaryMeshes.Length)
        {
            J = 0;
            J0x57:

            if(ZoneBoundaryMeshes[I].StaticMeshComponent.GetMaterial(J) != none)
            {
                MaterialInstance(ZoneBoundaryMeshes[I].StaticMeshComponent.GetMaterial(J)).SetScalarParameterValue(ZoneDangerMaterialParamName, ((bDangerState) ? 1 : 0));
                ++ J;
                goto J0x57;
            }
            ++ I;
            goto J0x34;
        }
        I = 0;
        J0x153:

        if(I < ZoneBoundarySplines.Length)
        {
            if(ZoneBoundarySplines[I] != none)
            {
                J = 0;
                J0x18F:

                if(J < ZoneBoundarySplines[I].SplineMeshComps.Length)
                {
                    if(ZoneBoundarySplines[I].SplineMeshComps[J] != none)
                    {
                        K = 0;
                        J0x209:

                        if(ZoneBoundarySplines[I].SplineMeshComps[J].GetMaterial(K) != none)
                        {
                            MaterialInstance(ZoneBoundarySplines[I].SplineMeshComps[J].GetMaterial(K)).SetScalarParameterValue(ZoneDangerMaterialParamName, ((bDangerState) ? 1 : 0));
                            ++ K;
                            goto J0x209;
                        }
                    }
                    ++ J;
                    goto J0x18F;
                }
            }
            ++ I;
            goto J0x153;
        }
    }
}

function bool IsValidZed(Actor PotentialZed)
{
    local KFPawn_Monster KFPM;

    KFPM = KFPawn_Monster(PotentialZed);
    if(KFPM == none)
    {
        return false;
    }
    if((KFPM.Health <= 0) || KFPM.IsHeadless())
    {
        return false;
    }
    return true;
}

simulated function ActivateObjective()
{
    super.ActivateObjective();
    if(Role == ROLE_Authority)
    {
        bActive = true;
        CurrentRewardAmount = float(GetMaxDoshReward());
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        UpdateMeshArrayState();
        if(bUseTrailToVolume)
        {
            TrailActor = Class'WorldInfo'.static.GetWorldInfo().Spawn(Class'KFReplicatedShowPathActor', none);
            if(TrailActor != none)
            {
                TrailActor.SetEmitterTemplate(ParticleSystem'FX_Objective_White_Trail');
                TrailActor.SetPathTarget(self, self, 2);
            }
        }
    }
}

simulated function DeactivateObjective()
{
    super.DeactivateObjective();
    if(Role == ROLE_Authority)
    {
        bActive = false;
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        UpdateMeshArrayState();
        if(bUseTrailToVolume && TrailActor != none)
        {
            TrailActor.Destroy();
            TrailActor = none;
        }
    }
}

simulated function bool IsActive()
{
    return bActive;
}

function bool CanActivateObjective()
{
    return !IsCurrentGameModeBlacklisted();
}

function bool IsCurrentGameModeBlacklisted()
{
    local class<KFGameInfo> CurrGameClass;

    foreach GameModeBlacklist(CurrGameClass,)
    {
        if(CurrGameClass == WorldInfo.GRI.GameClass)
        {            
            return true;
        }        
    }    
    return false;
}

simulated function bool UsesProgress()
{
    return false;
}

simulated function float GetProgress();

simulated function bool IsComplete()
{
    return (GetProgress()) >= 1;
}

simulated function float GetActivationPctChance()
{
    return 1;
}

simulated function bool IsBonus()
{
    return true;
}

simulated function int GetPlayersInObjective()
{
    return 0;
}

simulated function int GetVoshReward()
{
    local int MaxDoshReward;

    MaxDoshReward = GetMaxDoshReward();
    if(MaxDoshReward == 0)
    {
        return 0;
    }
    return int((float(GetMaxVoshReward()) * float(GetDoshReward())) / float(MaxDoshReward));
}

simulated function int GetXPReward()
{
    local int MaxDoshReward;

    MaxDoshReward = GetMaxDoshReward();
    if(MaxDoshReward == 0)
    {
        return 0;
    }
    return int((float(GetMaxXPReward()) * float(GetDoshReward())) / float(MaxDoshReward));
}

simulated function bool ShouldDrawIcon()
{
    return true;
}

simulated function Vector GetIconLocation()
{
    return Location;
}

simulated function string GetLocalizedRequirements();

simulated function GetLocalizedStatus(out string StatusMessage, out int bWarning, out int bNotification)
{
    StatusMessage = "";
    if((GetProgress()) >= 1)
    {
        StatusMessage = Localize("Objectives", "KillRemainingZeds", LocalizationPackageName);
        bWarning = 0;
        bNotification = 0;
        return;
    }
    if(bTooFewPlayers)
    {
        StatusMessage = Localize("Objectives", "TooFewPlayers", LocalizationPackageName);
        bWarning = 1;
        return;        
    }
    else
    {
        if(bTooManyZeds)
        {
            StatusMessage = Localize("Objectives", "TooManyZeds", LocalizationPackageName);
            bWarning = 1;
            return;
        }
    }
}

simulated function string GetProgressText();

simulated function bool GetIsMissionCritical()
{
    return bIsMissionCriticalObjective;
}

defaultproperties
{
    JustWinThreshold=0.25
    StandardWinThreshold=0.5
    GoodWinThreshold=0.85
    LocalizationPackageName="KFGame"
    PerPlayerSpawnRateMod=/* Array type was not detected. */
    ZoneDangerMaterialParamName=Danger
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_AreaDefense.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_AreaDefense.BrushComponent0'
    Components(0)=BrushComponent0
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bStatic=false
    bAlwaysRelevant=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_AreaDefense.BrushComponent0'
    CollisionComponent=BrushComponent0
}