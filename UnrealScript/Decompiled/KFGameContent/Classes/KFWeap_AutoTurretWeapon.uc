/*******************************************************************************
 * KFWeap_AutoTurretWeapon generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_AutoTurretWeapon extends KFWeap_SMGBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

var KFPawn_AutoTurret InstigatorDrone;
var transient bool bFiring;

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    StartLoadWeaponContent();
}

simulated function FireAmmunition()
{
    CurrentFireMode = 0;
    super(KFWeapon).FireAmmunition();
}

simulated function GetMuzzleLocAndRot(out Vector MuzzleLoc, out Rotator MuzzleRot)
{
    if(KFSkeletalMeshComponent(Mesh).GetSocketWorldLocationAndRotation('MuzzleFlash', MuzzleLoc, MuzzleRot) == false)
    {
        LogInternal("MuzzleFlash not found!");
    }
}

simulated function InstantFireClient()
{
    local Vector StartTrace, EndTrace;
    local Rotator AimRot;
    local array<ImpactInfo> ImpactList;
    local int Idx;
    local ImpactInfo RealImpact;
    local float CurPenetrationValue;
    local KFPawn KFPOwner;

    bInstantHit = true;
    GetMuzzleLocAndRot(StartTrace, AimRot);
    EndTrace = StartTrace + (vector(Owner.Rotation) * (GetTraceRange()));
    bInstantHit = false;
    PenetrationPowerRemaining = GetInitialPenetrationPower(CurrentFireMode);
    CurPenetrationValue = PenetrationPowerRemaining;
    RealImpact = CalcWeaponFire(StartTrace, EndTrace, ImpactList);
    KFPOwner = KFPawn(Owner);
    if(KFPOwner != none)
    {
        KFPOwner.SetFlashLocation(self, CurrentFireMode, RealImpact.HitLocation);
    }
    InstantFireClient_AddImpacts(StartTrace, AimRot, ImpactList);
    Idx = 0;
    J0x175:

    if(Idx < ImpactList.Length)
    {
        ProcessInstantHitEx(CurrentFireMode, ImpactList[Idx],, CurPenetrationValue, Idx);
        ++ Idx;
        goto J0x175;
    }
    if(Instigator.Role < ROLE_Authority)
    {
        SendClientImpactList(CurrentFireMode, ImpactList);
    }
}

simulated function Projectile ProjectileFire()
{
    local Vector StartTrace, RealStartLoc, AimDir;
    local Rotator AimRot;
    local class<KFProjectile> MyProjectileClass;

    if(ShouldIncrementFlashCountOnFire())
    {
        IncrementFlashCount();
    }
    MyProjectileClass = GetKFProjectileClass();
    if((Role == ROLE_Authority) || ((MyProjectileClass.default.bUseClientSideHitDetection && MyProjectileClass.default.bNoReplicationToInstigator) && Instigator != none) && Instigator.IsLocallyControlled())
    {
        GetMuzzleLocAndRot(StartTrace, AimRot);
        AimDir = vector(Owner.Rotation);
        RealStartLoc = StartTrace;
        return SpawnAllProjectiles(MyProjectileClass, RealStartLoc, AimDir);
    }
    return none;
}

simulated function IncrementFlashCount()
{
    local KFPawn P;

    P = KFPawn(Owner);
    if(P != none)
    {
        P.IncrementFlashCount(self, CurrentFireMode);
    }
}

simulated function fire()
{
    if(bFiring)
    {
        return;
    }
    if(HasAmmo(0))
    {
        SendToFiringState(0);
    }
    bFiring = true;
}

simulated function StopFire(byte FireModeNum)
{
    if(!bFiring)
    {
        return;
    }
    bFiring = false;
    super(KFWeapon).StopFire(FireModeNum);
    GotoState('Inactive');
}

simulated function bool ShouldRefire()
{
    if(!HasAmmo(CurrentFireMode))
    {
        return false;
    }
    return bFiring;
}

simulated function StartLoopingFireSound(byte FireModeNum)
{
    if(((FireModeNum < bLoopingFireSnd.Length) && bLoopingFireSnd[FireModeNum]) && !ShouldForceSingleFireSound())
    {
        bPlayingLoopingFireSnd = true;
        KFPawn(Owner).SetWeaponAmbientSound(WeaponFireSnd[FireModeNum].DefaultCue, WeaponFireSnd[FireModeNum].FirstPersonCue);
    }
}

simulated function StopLoopingFireSound(byte FireModeNum)
{
    if(bPlayingLoopingFireSnd)
    {
        KFPawn(Owner).SetWeaponAmbientSound(none);
        if(FireModeNum < WeaponFireLoopEndSnd.Length)
        {
            WeaponPlayFireSound(WeaponFireLoopEndSnd[FireModeNum].DefaultCue, WeaponFireLoopEndSnd[FireModeNum].FirstPersonCue);
        }
        bPlayingLoopingFireSnd = false;
    }
}

simulated function PlayFireEffects(byte FireModeNum, optional Vector HitLocation)
{
    local name WeaponFireAnimName;
    local KFPerk CurrentPerk;
    local float TempTweenTime, AdjustedAnimLength;
    local KFPawn KFPO;

    if(((FireModeNum < bLoopingFireSnd.Length) && bLoopingFireSnd[FireModeNum]) && !bPlayingLoopingFireSnd)
    {
        StartLoopingFireSound(FireModeNum);
    }
    PlayFiringSound(CurrentFireMode);
    KFPO = KFPawn(Owner);
    if(KFPO != none)
    {
        UpdateWeaponAttachmentAnimRate(GetThirdPersonAnimRate());
        if(KFPO.IsLocallyControlled())
        {
            if(KFPO.IsFirstPerson())
            {
                if(!bPlayingLoopingFireAnim)
                {
                    WeaponFireAnimName = GetWeaponFireAnim(FireModeNum);
                    if(WeaponFireAnimName != 'None')
                    {
                        AdjustedAnimLength = MySkelMesh.GetAnimLength(WeaponFireAnimName);
                        TempTweenTime = FireTweenTime;
                        CurrentPerk = GetPerk();
                        if(CurrentPerk != none)
                        {
                            CurrentPerk.ModifyRateOfFire(AdjustedAnimLength, self);
                            if((((EmptyMagBlendNode != none) && BonesToLockOnEmpty.Length > 0) && AmmoCount[GetAmmoType(FireModeNum)] == 0) && CurrentPerk.GetIsUberAmmoActive(self))
                            {
                                EmptyMagBlendNode.SetBlendTarget(0, 0);
                                TempTweenTime = 0;
                            }
                        }
                        PlayAnimation(WeaponFireAnimName, AdjustedAnimLength,, TempTweenTime);
                    }
                }
                CauseMuzzleFlash(FireModeNum);
            }
            HandleRecoil();
            ShakeView();
            if((AmmoCount[0] == 0) && ForceReloadTimeOnEmpty > float(0))
            {
                SetTimer(ForceReloadTimeOnEmpty, false, 'ForceReload');
            }
        }
    }
}

simulated function bool ShouldForceSingleFireSound()
{
    if((Instigator.WorldInfo.TimeDilation < 1) && SingleFireSoundIndex != 255)
    {
        return true;
    }
    return false;
}

simulated state WeaponFiring
{
    simulated function EndState(name NextStateName)
    {
        local Pawn OriginalInstigator;

        OriginalInstigator = Instigator;
        Instigator = InstigatorDrone;
        super.EndState(NextStateName);
        Instigator = OriginalInstigator;
    }
    stop;    
}

defaultproperties
{
    PackageKey="AutoTurretWeapon"
    FirstPersonMeshName="wep_1p_autoturretWeapon_mesh.Wep_1stP_AutoTurretWeapon_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    PickupMeshName="wep_3p_autoturretWeapon_mesh.Wep_AutoTurretWeapon_Pickup"
    AttachmentArchetypeName="WEP_AutoTurretWeapon_ARCH.AutoTurretWeaponAttachment"
    MuzzleFlashTemplateName="wep_autoturretWeapon_arch.Wep_AutoTurretWeapon_MuzzleFlash"
    FireModeIconPaths=/* Array type was not detected. */
    SingleFireSoundIndex=1
    InventorySize=5
    MeshIronSightFOV=52
    PlayerIronSightFOV=70
    IronSightPosition=(X=7,Y=0,Z=0)
    DOF_FG_FocalRadius=75
    DOF_FG_MaxNearBlurSize=3.5
    GroupPriority=25
    WeaponSelectTexture=Texture2D'WEP_UI_AutoTurret_TEX.UI_WeaponSelect_AutoTurret'
    MagazineCapacity=150
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    FireSightedAnims=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    PlayerViewOffset=(X=9,Y=10,Z=-4)
    MeleeAttackHelper=KFMeleeHelperWeapon'Default__KFWeap_AutoTurretWeapon.MeleeHelper'
    maxRecoilPitch=225
    minRecoilPitch=150
    maxRecoilYaw=150
    minRecoilYaw=-150
    RecoilRate=0.085
    RecoilViewRotationScale=0.25
    RecoilMaxYawLimit=500
    RecoilMinYawLimit=65035
    RecoilMaxPitchLimit=900
    RecoilMinPitchLimit=65035
    RecoilISMaxYawLimit=75
    RecoilISMinYawLimit=65460
    RecoilISMaxPitchLimit=195
    RecoilISMinPitchLimit=65460
    IronSightMeshFOVCompensationScale=1.5
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=30,Y=4.5,Z=-4)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_AutoTurretWeapon.FirstPersonMesh'
    Mesh=FirstPersonMesh
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_AutoTurretWeapon.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_AutoTurretWeapon.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}