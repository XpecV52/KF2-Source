/*******************************************************************************
 * KFPawn_ZedClot_AlphaKing generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedClot_AlphaKing extends KFPawn_ZedClot_Alpha
    config(Game)
    hidecategories(Navigation);

var protected float SelfRallyDealtDamageModifier;
var protected float SelfRallyTakenDamageModifier;
var protected bool bWasSelfRally;
var const AkEvent EnragedSoundEvent;

simulated event PostBeginPlay()
{
    local class<KFDifficulty_ClotAlphaKing> MyDifficultySettings;
    local KFGameReplicationInfo KFGRI;
    local byte GameDifficulty;

    super(KFPawn_Monster).PostBeginPlay();
    MyDifficultySettings = class<KFDifficulty_ClotAlphaKing>(DifficultySettings);
    if(MyDifficultySettings != none)
    {
        KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
        if(KFGRI != none)
        {
            GameDifficulty = byte(Clamp(KFGRI.GetModifiedGameDifficulty(), 0, MyDifficultySettings.default.RallyTriggerSettings.Length - 1));
            SelfRallyDealtDamageModifier = MyDifficultySettings.default.RallyTriggerSettings[GameDifficulty].SelfDealtDamageModifier;
            SelfRallyTakenDamageModifier = MyDifficultySettings.default.RallyTriggerSettings[GameDifficulty].SelfTakenDamageModifier;
        }
    }
}

event PossessedBy(Controller C, bool bVehicleTransition)
{
    local KFAIController_ZedClot_AlphaKing AlphaController;

    super(KFPawn_Monster).PossessedBy(C, bVehicleTransition);
    AlphaController = KFAIController_ZedClot_AlphaKing(MyKFAIC);
    if(AlphaController != none)
    {
        AlphaController.InitRallySettings();
    }
}

simulated function bool Rally(KFPawn RallyInstigator, ParticleSystem RallyEffect, name EffectBoneName, Vector EffectOffset, ParticleSystem AltRallyEffect, name AltEffectBoneNames[2], Vector AltEffectOffset, optional bool bSkipEffects)
{
    bSkipEffects = false;
    if(RallyInstigator == self)
    {
        bWasSelfRally = true;        
    }
    else
    {
        bWasSelfRally = false;
    }
    return super(KFPawn_Monster).Rally(RallyInstigator, RallyEffect, EffectBoneName, EffectOffset, AltRallyEffect, AltEffectBoneNames, AltEffectOffset, bSkipEffects);
}

simulated function int GetRallyBoostDamage(int NewDamage)
{
    if(bWasSelfRally && SelfRallyDealtDamageModifier > 0)
    {
        return int(float(NewDamage) * ((IsTimerActive('Timer_EndRallyBoost')) ? SelfRallyDealtDamageModifier : 1));        
    }
    else
    {
        return super(KFPawn_Monster).GetRallyBoostDamage(NewDamage);
    }
}

simulated function int GetRallyBoostResistance(int NewDamage)
{
    if(bWasSelfRally && SelfRallyTakenDamageModifier > 0)
    {
        return int(float(NewDamage) * ((IsTimerActive('Timer_EndRallyBoost')) ? SelfRallyTakenDamageModifier : 1));        
    }
    else
    {
        return GetRallyBoostDamage(NewDamage);
    }
}

function int GetHitZoneIndex(name BoneName)
{
    if(BoneName == 'KBArmor')
    {
        return OverrideArmorFXIndex;
    }
    return super(KFPawn).GetHitZoneIndex(BoneName);
}

simulated function KFSkinTypeEffects GetHitZoneSkinTypeEffects(int HitZoneIdx)
{
    if(HitZoneIdx == OverrideArmorFXIndex)
    {
        return CharacterArch.ImpactSkins[2];
    }
    return super(KFPawn).GetHitZoneSkinTypeEffects(HitZoneIdx);
}

function ZedExplodeArmor(int ArmorZoneIdx, name ArmorZoneName)
{
    super(KFPawn_Monster).ZedExplodeArmor(ArmorZoneIdx, ArmorZoneName);
    KFAIController_ZedClot_AlphaKing(Controller).StartArmorLoss();
}

simulated function bool SetEnraged(bool bNewEnraged)
{
    local bool bSuccess;

    bSuccess = super(KFPawn_Monster).SetEnraged(bNewEnraged);
    if((bSuccess && Role == ROLE_Authority) && bNewEnraged)
    {
        PlaySoundBase(EnragedSoundEvent);
    }
    return bSuccess;
}

function SetSprinting(bool bNewSprintStatus)
{
    if((bNewSprintStatus == false) || (MyKFAIC != none) && MyKFAIC.bCanSprint)
    {
        super(KFPawn_Monster).SetSprinting(bNewSprintStatus);
    }
}

defaultproperties
{
    EnragedSoundEvent=AkEvent'WW_ZED_Clot_Alpha.Play_Alpha_Clot_Special_Enrage'
    bCanRage=true
    MonsterArchPath="ZED_ARCH.ZED_Clot_AlphaKing_Archetype"
    MinSpawnSquadSizeType=ESquadType.EST_Medium
    RepArmorPct[0]=255
    RepArmorPct[1]=255
    ArmorZoneStatus=3
    PreviousArmorZoneStatus=3
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=8
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedClot_AlphaKing.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DamageTypeModifiers=/* Array type was not detected. */
    DifficultySettings=Class'KFDifficulty_ClotAlphaKing'
    SprintAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.SprintAkComponent0'
    HeadShotAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.HeadshotAkComponent0'
    ArmorInfoClass=Class'KFZedArmorInfo_ClotKing'
    OverrideArmorFXIndex=200
    ShrinkEffectModifier=0.4
    LocalizationKey=KFPawn_ZedClot_AlphaKing
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedClot_AlphaKing.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    HitZones=/* Array type was not detected. */
    AfflictionHandler=KFAfflictionManager'Default__KFPawn_ZedClot_AlphaKing.Afflictions'
    SprintSpeed=450
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedClot_AlphaKing.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    SpecialMoveHandler=KFSpecialMoveHandler'Default__KFPawn_ZedClot_AlphaKing.SpecialMoveHandler'
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedClot_AlphaKing.WeaponAmbientEchoHandler'
    SecondaryWeaponAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.SecondaryWeaponAkSoundComponent'
    FootstepAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.DialogAkSoundComponent'
    PowerUpAkComponent=AkComponent'Default__KFPawn_ZedClot_AlphaKing.PowerUpAkSoundComponent'
    GroundSpeed=180
    Health=300
    ControllerClass=Class'KFAIController_ZedClot_AlphaKing'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedClot_AlphaKing.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedClot_AlphaKing.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedClot_AlphaKing.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedClot_AlphaKing.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedClot_AlphaKing.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedClot_AlphaKing.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.DialogAkSoundComponent'
    Components(8)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.PowerUpAkSoundComponent'
    Components(9)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.SecondaryWeaponAkSoundComponent'
    Components(10)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.SprintAkComponent0'
    Components(11)=AkComponent'Default__KFPawn_ZedClot_AlphaKing.HeadshotAkComponent0'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedClot_AlphaKing.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}