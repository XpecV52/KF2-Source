/*******************************************************************************
 * KFSeasonalEventStats_Summer2020 generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSeasonalEventStats_Summer2020 extends KFSeasonalEventStats within KFOnlineStatsWrite;

var private const transient int BossDeathsRequired;
var private const transient int DoshEarnRequired;
var private const transient int EndlessWaveRequired;
var private const transient int SummerEventIndex;

private final event Initialize(string MapName)
{
    local string CapsMapName;

    CapsMapName = Caps(MapName);
    bObjectiveIsValidForMap[0] = 1;
    bObjectiveIsValidForMap[1] = 0;
    bObjectiveIsValidForMap[2] = 0;
    bObjectiveIsValidForMap[3] = 0;
    bObjectiveIsValidForMap[4] = 0;
    if(CapsMapName == "KF-DESOLATION")
    {
        bObjectiveIsValidForMap[1] = 1;
        bObjectiveIsValidForMap[2] = 1;
        bObjectiveIsValidForMap[3] = 1;
        bObjectiveIsValidForMap[4] = 1;
    }
    SetSeasonalEventStatsMax(BossDeathsRequired, 0, 0, DoshEarnRequired, 0);
}

private final event GrantEventItems()
{
    if((((Outer.IsEventObjectiveComplete(0) && Outer.IsEventObjectiveComplete(1)) && Outer.IsEventObjectiveComplete(2)) && Outer.IsEventObjectiveComplete(3)) && Outer.IsEventObjectiveComplete(4))
    {
        GrantEventItem(8292);
    }
}

simulated event OnGameWon(class<GameInfo> GameClass, int Difficulty, int GameLength, bool bCoop)
{
    local int ObjIdx;

    ObjIdx = 1;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        if(GameClass == Class'KFGameInfo_WeeklySurvival')
        {
            FinishedObjective(SummerEventIndex, ObjIdx);
        }
    }
}

simulated event OnGameEnd(class<GameInfo> GameClass)
{
    local int ObjIdx, TotalDoshEarned;

    ObjIdx = 3;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        TotalDoshEarned = Outer.MyKFPC.MatchStats.TotalDoshEarned + Outer.MyKFPC.MatchStats.GetDoshEarnedInWave();
        if(TotalDoshEarned > 0)
        {
            IncrementSeasonalEventStat(ObjIdx, TotalDoshEarned);
            if(Outer.GetSeasonalEventStatValue(ObjIdx) >= DoshEarnRequired)
            {
                FinishedObjective(SummerEventIndex, ObjIdx);
            }
        }
    }
}

simulated function OnBossDied()
{
    local int ObjIdx;

    ObjIdx = 0;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        IncrementSeasonalEventStat(ObjIdx, 1);
        if(Outer.GetSeasonalEventStatValue(ObjIdx) >= BossDeathsRequired)
        {
            FinishedObjective(SummerEventIndex, ObjIdx);
        }
    }
}

simulated event OnWaveCompleted(class<GameInfo> GameClass, int Difficulty, int WaveNum)
{
    local int ObjIdx;

    ObjIdx = 4;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        if(((WaveNum >= EndlessWaveRequired) && GameClass == Class'KFGameInfo_Endless') && float(Difficulty) >= 1)
        {
            FinishedObjective(SummerEventIndex, ObjIdx);
        }
    }
}

simulated function OnTryCompleteObjective(int ObjectiveIndex, int EventIndex)
{
    local int ObjIdx;

    ObjIdx = 2;
    if(((bObjectiveIsValidForMap[ObjIdx] != 0) && ObjectiveIndex == ObjIdx) && EventIndex == SummerEventIndex)
    {
        FinishedObjective(EventIndex, ObjectiveIndex);
    }
}

defaultproperties
{
    BossDeathsRequired=15
    DoshEarnRequired=75000
    EndlessWaveRequired=15
    SummerEventIndex=2
}