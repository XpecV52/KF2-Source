/*******************************************************************************
 * KFTrigger_MinigameGenerator generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFTrigger_MinigameGenerator extends Trigger_PawnsOnly
    hidecategories(Navigation)
    implements(KFInterface_Usable);

struct GeneratorStatus
{
    var() float MinTimeRemaining;
    var() LinearColor StatusColor;

    structdefaultproperties
    {
        MinTimeRemaining=0
        StatusColor=(R=0,G=0,B=0,A=1)
    }
};

struct EmissiveActor
{
    var() Actor EmissiveActor;
    var float GeneratorOnValue;
    var float GeneratorOffValue;

    structdefaultproperties
    {
        EmissiveActor=none
        GeneratorOnValue=0
        GeneratorOffValue=0
    }
};

struct EmissiveUpdateActorList
{
    var() float ActivationDelay;
    var() array<Actor> ActorList;
    var array<EmissiveActor> CachedActorList;

    structdefaultproperties
    {
        ActivationDelay=0
        ActorList=none
        CachedActorList=none
    }
};

/** Amount of time (in seconds) that the generator should remain running */
var() float ActiveTime;
/** Amount of time until the generator can be reactivated */
var() float ReactivationTime;
var bool bActiveGenerator;
var bool bCanBeActivated;
var array<KFTrigger_MinigameButton> LevelButtons;
/** Objective index for the event this is tied to */
var() int ObjectiveIndex;
/** Index of the event this is tied to */
var() int EventIndex;
var repnotify byte GeneratorTimeRemaining;
var float PreviousTimeRemaining;
/** Actor reference showing status indicator */
var() array<StaticMeshActor> GeneratorStatusIndicators;
/** Material slot to use for the status modification */
var() int GlowIndex;
var() array<GeneratorStatus> StatusIndicator;
var int CurrentStatusIndex;
var() array<EmissiveUpdateActorList> MapEmissiveActorList;
var int CurrentEmissiveActorListIndex;

replication
{
     if(bNetDirty)
        GeneratorTimeRemaining;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'GeneratorTimeRemaining')
    {
        UpdateGeneratorStatus();        
    }
    else
    {
        super(Actor).ReplicatedEvent(VarName);
    }
}

function Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    if(bActiveGenerator)
    {
        GeneratorTimeRemaining = FloatToByte(GetRemainingTimeForTimer('DeactivateMinigames') / ActiveTime);
        UpdateGeneratorStatus();
    }
}

simulated function UpdateGeneratorStatus()
{
    local float CurrentTimeRemaining;
    local LinearColor ParamColor;
    local bool bStatusChange;
    local int CurIndex, I;

    if((WorldInfo.NetMode != NM_DedicatedServer) && StatusIndicator.Length > 0)
    {
        CurIndex = CurrentStatusIndex;
        CurrentTimeRemaining = ByteToFloat(GeneratorTimeRemaining);
        if(PreviousTimeRemaining < CurrentTimeRemaining)
        {
            CurrentStatusIndex = 0;
            if(CurrentTimeRemaining > float(0))
            {
                EnableEmissiveActors();
            }
        }
        if(StatusIndicator[CurrentStatusIndex].MinTimeRemaining > CurrentTimeRemaining)
        {
            CurrentStatusIndex = 0;
            J0xE8:

            if(CurrentStatusIndex < StatusIndicator.Length)
            {
                if(StatusIndicator[CurrentStatusIndex].MinTimeRemaining < CurrentTimeRemaining)
                {
                    goto J0x145;
                }
                ++ CurrentStatusIndex;
                goto J0xE8;
            }
        }
        J0x145:

        CurrentStatusIndex = Min(CurrentStatusIndex, StatusIndicator.Length - 1);
        bStatusChange = CurrentStatusIndex != CurIndex;
        if(bStatusChange && GeneratorStatusIndicators.Length > 0)
        {
            ParamColor = StatusIndicator[CurrentStatusIndex].StatusColor;
            I = 0;
            J0x1E0:

            if(I < GeneratorStatusIndicators.Length)
            {
                if(MaterialInstance(GeneratorStatusIndicators[I].StaticMeshComponent.GetMaterial(GlowIndex)) != none)
                {
                    MaterialInstance(GeneratorStatusIndicators[I].StaticMeshComponent.GetMaterial(GlowIndex)).SetVectorParameterValue('Scalar_Glow_color', ParamColor);
                }
                ++ I;
                goto J0x1E0;
            }
        }
        PreviousTimeRemaining = CurrentTimeRemaining;
        if(CurrentTimeRemaining <= float(0))
        {
            DisableEmissiveActors();
        }
    }
}

simulated function EnableEmissiveActors()
{
    CurrentEmissiveActorListIndex = 0;
    if(MapEmissiveActorList.Length > 0)
    {
        if(MapEmissiveActorList[0].ActivationDelay > 0)
        {
            SetTimer(MapEmissiveActorList[0].ActivationDelay, false, 'EnableNextEmissiveList');            
        }
        else
        {
            EnableNextEmissiveList();
        }
    }
}

simulated function EnableNextEmissiveList()
{
    local EmissiveActor CurrentActor;
    local int I;
    local StaticMeshActor Smesh;
    local SkeletalMeshActor Skmesh;
    local MaterialInstance MatInst;

    if(MapEmissiveActorList[CurrentEmissiveActorListIndex].ActorList.Length > 0)
    {
        foreach MapEmissiveActorList[CurrentEmissiveActorListIndex].CachedActorList(CurrentActor,)
        {
            Smesh = StaticMeshActor(CurrentActor.EmissiveActor);
            Skmesh = SkeletalMeshActor(CurrentActor.EmissiveActor);
            if(Smesh != none)
            {
                I = 0;
                J0xD9:

                if(I < Smesh.StaticMeshComponent.Materials.Length)
                {
                    MatInst = MaterialInstance(Smesh.StaticMeshComponent.GetMaterial(I));
                    if(MatInst != none)
                    {
                        MatInst.SetScalarParameterValue('Scalar_Emissive_Intensity', CurrentActor.GeneratorOnValue);
                    }
                    ++ I;
                    goto J0xD9;
                }                
            }
            else
            {
                if(Skmesh != none)
                {
                    I = 0;
                    J0x1E9:

                    if(I < Skmesh.SkeletalMeshComponent.Materials.Length)
                    {
                        MatInst = MaterialInstance(Skmesh.SkeletalMeshComponent.GetMaterial(I));
                        if(MatInst != none)
                        {
                            MatInst.SetScalarParameterValue('Scalar_Emissive_Intensity', CurrentActor.GeneratorOnValue);
                        }
                        ++ I;
                        goto J0x1E9;
                    }
                }
            }            
        }        
    }
    ++ CurrentEmissiveActorListIndex;
    if(CurrentEmissiveActorListIndex < MapEmissiveActorList.Length)
    {
        if(MapEmissiveActorList[CurrentEmissiveActorListIndex].ActivationDelay > 0)
        {
            SetTimer(MapEmissiveActorList[CurrentEmissiveActorListIndex].ActivationDelay - MapEmissiveActorList[CurrentEmissiveActorListIndex - 1].ActivationDelay, false, 'EnableNextEmissiveList');            
        }
        else
        {
            EnableNextEmissiveList();
        }
    }
}

simulated function DisableEmissiveActors()
{
    local EmissiveUpdateActorList CurrentList;
    local EmissiveActor CurrentActor;
    local int I;
    local StaticMeshActor Smesh;
    local SkeletalMeshActor Skmesh;
    local MaterialInstance MatInst;

    foreach MapEmissiveActorList(CurrentList,)
    {
        foreach CurrentList.CachedActorList(CurrentActor,)
        {
            Smesh = StaticMeshActor(CurrentActor.EmissiveActor);
            Skmesh = SkeletalMeshActor(CurrentActor.EmissiveActor);
            if(Smesh != none)
            {
                I = 0;
                J0xB9:

                if(I < Smesh.StaticMeshComponent.Materials.Length)
                {
                    MatInst = MaterialInstance(Smesh.StaticMeshComponent.GetMaterial(I));
                    if(MatInst != none)
                    {
                        MatInst.SetScalarParameterValue('Scalar_Emissive_Intensity', CurrentActor.GeneratorOffValue);
                    }
                    ++ I;
                    goto J0xB9;
                }                
            }
            else
            {
                if(Skmesh != none)
                {
                    I = 0;
                    J0x1C9:

                    if(I < Skmesh.SkeletalMeshComponent.Materials.Length)
                    {
                        MatInst = MaterialInstance(Skmesh.SkeletalMeshComponent.GetMaterial(I));
                        if(MatInst != none)
                        {
                            MatInst.SetScalarParameterValue('Scalar_Emissive_Intensity', CurrentActor.GeneratorOffValue);
                        }
                        ++ I;
                        goto J0x1C9;
                    }
                }
            }            
        }                
    }    
}

simulated function InitEmissiveActors()
{
    local EmissiveActor NewActor;
    local int I, J, K;
    local StaticMeshActor Smesh;
    local SkeletalMeshActor Skmesh;
    local float CurValue;

    I = 0;
    J0x0B:

    if(I < MapEmissiveActorList.Length)
    {
        J = 0;
        J0x2E:

        if(J < MapEmissiveActorList[I].ActorList.Length)
        {
            Smesh = StaticMeshActor(MapEmissiveActorList[I].ActorList[J]);
            Skmesh = SkeletalMeshActor(MapEmissiveActorList[I].ActorList[J]);
            NewActor.EmissiveActor = MapEmissiveActorList[I].ActorList[J];
            K = 0;
            if(Smesh != none)
            {
                J0x150:

                if(Smesh.StaticMeshComponent.GetMaterial(K) != none)
                {
                    Smesh.StaticMeshComponent.CreateAndSetMaterialInstanceConstant(K);
                    MaterialInstance(Smesh.StaticMeshComponent.GetMaterial(K)).Parent.GetScalarParameterValue('Scalar_Emissive_Intensity', CurValue);
                    ++ K;
                    NewActor.GeneratorOnValue = float(Max(int(CurValue), int(NewActor.GeneratorOnValue)));
                    goto J0x150;
                }                
            }
            else
            {
                if(Skmesh != none)
                {
                    J0x2BD:

                    if(Skmesh.SkeletalMeshComponent.GetMaterial(K) != none)
                    {
                        Skmesh.SkeletalMeshComponent.CreateAndSetMaterialInstanceConstant(K);
                        MaterialInstance(Skmesh.SkeletalMeshComponent.GetMaterial(K)).Parent.GetScalarParameterValue('Scalar_Emissive_Intensity', NewActor.GeneratorOnValue);
                        ++ K;
                        NewActor.GeneratorOnValue = float(Max(int(CurValue), int(NewActor.GeneratorOnValue)));
                        goto J0x2BD;
                    }
                }
            }
            MapEmissiveActorList[I].CachedActorList.AddItem(NewActor;
            ++ J;
            goto J0x2E;
        }
        ++ I;
        goto J0x0B;
    }
}

simulated function bool GetIsUsable(Pawn User)
{
    return true;
}

simulated function int GetInteractionIndex(Pawn User)
{
    return 9;
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    super(Trigger).Touch(Other, OtherComp, HitLocation, HitNormal);
    Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
}

event UnTouch(Actor Other)
{
    super(Actor).UnTouch(Other);
    Class'KFPlayerController'.static.UpdateInteractionMessages(Other);
}

simulated function PostBeginPlay()
{
    local KFTrigger_MinigameButton MinigameTrigger;
    local int I;

    super(Trigger).PostBeginPlay();
    if(Role == ROLE_Authority)
    {
        foreach WorldInfo.AllActors(Class'KFTrigger_MinigameButton', MinigameTrigger)
        {
            LevelButtons.AddItem(MinigameTrigger;            
        }        
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if((GeneratorStatusIndicators.Length > 0) && GlowIndex >= 0)
        {
            I = 0;
            J0xB9:

            if(I < GeneratorStatusIndicators.Length)
            {
                if(GlowIndex < GeneratorStatusIndicators[I].StaticMeshComponent.Materials.Length)
                {
                    GeneratorStatusIndicators[I].StaticMeshComponent.CreateAndSetMaterialInstanceConstant(GlowIndex);
                }
                ++ I;
                goto J0xB9;
            }
        }
        InitEmissiveActors();
        UpdateGeneratorStatus();
    }
}

function bool UsedBy(Pawn User)
{
    if(bCanBeActivated)
    {
        ClearTimer('DeactivateMinigames');
        SetTimer(ActiveTime, false, 'DeactivateMinigames');
        bCanBeActivated = false;
        SetTimer(ReactivationTime, false, 'AllowActivation');
        ActivateMinigames();
        TriggerObjectiveCompletion();
    }
    return true;
}

function TriggerObjectiveCompletion()
{
    local KFPlayerController KFPC;

    foreach WorldInfo.AllControllers(Class'KFPlayerController', KFPC)
    {
        KFPC.FinishedSpecialEvent(EventIndex, ObjectiveIndex);        
    }    
}

function AllowActivation()
{
    local int I;

    bCanBeActivated = true;
    I = 0;
    J0x17:

    if(I < Touching.Length)
    {
        Class'KFPlayerController'.static.UpdateInteractionMessages(Touching[I]);
        ++ I;
        goto J0x17;
    }
}

function ActivateMinigames()
{
    local KFTrigger_MinigameButton MinigameButton;

    if(!bActiveGenerator)
    {
        foreach LevelButtons(MinigameButton,)
        {
            MinigameButton.SetMinigameActive();            
        }        
        bActiveGenerator = true;
        UpdateGeneratorState();        
    }
    else
    {
        GeneratorReactivated();
    }
}

function DeactivateMinigames()
{
    local KFTrigger_MinigameButton MinigameButton;

    if(bActiveGenerator)
    {
        foreach LevelButtons(MinigameButton,)
        {
            MinigameButton.SetMinigameInactive();            
        }        
        bActiveGenerator = false;
        UpdateGeneratorState();
        GeneratorTimeRemaining = 0;
        UpdateGeneratorStatus();
    }
}

function GeneratorReactivated()
{
    local KFSeqEvent_MinigameGeneratorStateChanged StateChangeEvent;
    local int I;

    I = 0;
    J0x0B:

    if(I < GeneratedEvents.Length)
    {
        StateChangeEvent = KFSeqEvent_MinigameGeneratorStateChanged(GeneratedEvents[I]);
        if(StateChangeEvent != none)
        {
            StateChangeEvent.StateChanged(self, self, bActiveGenerator, true);
        }
        ++ I;
        goto J0x0B;
    }
}

function UpdateGeneratorState()
{
    local KFSeqEvent_MinigameGeneratorStateChanged StateChangeEvent;
    local int I;

    I = 0;
    J0x0B:

    if(I < GeneratedEvents.Length)
    {
        StateChangeEvent = KFSeqEvent_MinigameGeneratorStateChanged(GeneratedEvents[I]);
        if(StateChangeEvent != none)
        {
            StateChangeEvent.StateChanged(self, self, bActiveGenerator, false);
        }
        ++ I;
        goto J0x0B;
    }
}

defaultproperties
{
    ActiveTime=300
    ReactivationTime=10
    bCanBeActivated=true
    ObjectiveIndex=-1
    EventIndex=-1
    PreviousTimeRemaining=-1
    GlowIndex=1
    CurrentStatusIndex=-1
    CurrentEmissiveActorListIndex=-1
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTrigger_MinigameGenerator.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFTrigger_MinigameGenerator.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTrigger_MinigameGenerator.CollisionCylinder'
    Components(1)=CollisionCylinder
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bAlwaysRelevant=true
    NetPriority=2.5
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFTrigger_MinigameGenerator.CollisionCylinder'
    CollisionComponent=CollisionCylinder
    SupportedEvents=/* Array type was not detected. */
}