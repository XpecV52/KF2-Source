/*******************************************************************************
 * KFObj_Coop_Healer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFObj_Coop_Healer extends KFObj_Coop
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var KFPawn_Human HealingTarget;
var array<PlayerReplicationInfo> Healers;
var int PawnHealingTime;

simulated event ReplicatedEvent(name VarName)
{
    if(bLogObjective)
    {
        LogInternal((("[OBJECTIVE]" @ string(GetFuncName())) @ "Replicated variable:") @ string(VarName));
    }
    if(VarName == 'ObjectiveState')
    {
        if(bLogObjective)
        {
            LogInternal((("[OBJECTIVE]" @ string(GetFuncName())) @ "ObjectiveState =") @ string(ObjectiveState));
        }
        if(ObjectiveState == 3)
        {
            StartObjective();            
        }
        else
        {
            super(KFObjective).ReplicatedEvent(VarName);
        }        
    }
    else
    {
        super(KFObjective).ReplicatedEvent(VarName);
    }
}

simulated function Initialize()
{
    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    super(KFObjective).Initialize();
    DoshReward = ObjDoshReward;
    PerkReward = ObjExpReward;
}

function UpdateObj_Active()
{
    super(KFObjective).UpdateObj_Active();
    RealObjectiveProgress = (100 / float(HealingTarget.HealthMax)) * float(HealingTarget.Health);
    ObjectiveProgress = byte(RealObjectiveProgress);
    if(ObjectiveComplete())
    {
        WinObjective();        
    }
    else
    {
        if(!HealingTarget.IsAliveAndWell())
        {
            FailObjective(2);
        }
    }
}

simulated function SetLowHealthPawn(KFPawn_Human LowHealthPawn)
{
    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    HealingTarget = LowHealthPawn;
    HealingTarget.bAlwaysRelevant = true;
    TimeLimit = PawnHealingTime;
    StartObjective();
}

function NewHealer(PlayerReplicationInfo Healer)
{
    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    if(Healers.Find(Healer == -1)
    {
        Healers.AddItem(Healer;
    }
}

function bool ObjectiveComplete()
{
    if(bLogObjective)
    {
        LogInternal("[OBJECTIVE]" @ string(GetFuncName()));
    }
    return HealingTarget.Health >= (HealingTarget.HealthMax / 2);
}

function WinObjective()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < Healers.Length)
    {
        if(KFPlayerReplicationInfo(Healers[I]) != none)
        {
            KFPlayerReplicationInfo(Healers[I]).AddDosh(DoshReward, true);
        }
        ++ I;
        goto J0x0B;
    }
    super(KFObjective).WinObjective();
}

simulated function EndObjective()
{
    if(Role == ROLE_Authority)
    {
        HealingTarget.bAlwaysRelevant = false;
        HealingTarget.bObjectivePlayer = false;
    }
    HealingTarget = none;
    Healers.Remove(0, Healers.Length;
    super(KFObjective).EndObjective();
}

simulated function DrawObjectiveHUD(Canvas C)
{
    switch(ObjectiveState)
    {
        case 0:
            break;
        case 3:
            DrawObjectiveTargets(C);
            DrawTrackerHUD(C);
            break;
        case 4:
            DrawObjEndHUD(C);
            break;
        case 5:
            DrawObjEndHUD(C);
            break;
        default:
            break;
    }
}

simulated function DrawTrackerHUD(Canvas C)
{
    local float XPos, YPos, CurScale;
    local string TitleString, DescriptionString, ProgressString, TimeString;
    local int TimeSeconds, TimeMinutes, CurrentTime;
    local KFPawn_Human MyKFPH;
    local KFPlayerController KFPC;

    foreach LocalPlayerControllers(Class'KFPlayerController', KFPC)
    {
        MyKFPH = KFPawn_Human(KFPC.Pawn);
        if(MyKFPH != none)
        {
            break;
        }        
    }    
    if(MyKFPH.bObjectivePlayer)
    {
        return;
    }
    C.SetDrawColor(255, 255, 255);
    C.bCenter = true;
    CurScale = 1;
    XPos = (float(C.SizeX) - (float(256) * CurScale)) - float(10);
    YPos = 10;
    C.SetPos(XPos, YPos);
    C.DrawTile(ObjRectangleTex, 256 * CurScale, 96 * CurScale, 0, 0, 512, 256);
    XPos += float(10);
    TitleString = ObjectiveTypeString;
    if(ObjectiveState == 3)
    {
        DescriptionString = ObjectiveTargetTitle;
        CurrentTime = Max(0, int(ObjectiveEndTime - WorldInfo.TimeSeconds));
    }
    ProgressString = string(ObjectiveProgress) $ "%";
    TimeMinutes = CurrentTime / 60;
    TimeSeconds = CurrentTime % 60;
    if(TimeSeconds > 9)
    {
        TimeString = (string(TimeMinutes) $ ":") $ string(TimeSeconds);        
    }
    else
    {
        TimeString = (string(TimeMinutes) $ ":0") $ string(TimeSeconds);
    }
    TimeString = TimeString $ ObjectiveTimeString;
    YPos += float(16);
    C.SetPos(XPos, YPos);
    C.DrawText(TitleString);
    YPos += float(16);
    C.SetPos(XPos, YPos);
    C.DrawText(DescriptionString);
    if(ObjectiveState == 3)
    {
        YPos += float(18);
        XPos += float(69);
        C.SetPos(XPos, YPos);
        C.SetDrawColor(255, 255, 255, 255);
        C.DrawRect(102, 16);
        YPos += float(1);
        C.SetPos(XPos + float(1), YPos);
        C.SetDrawColor(255, 0, 0, 255);
        C.DrawRect(float(ObjectiveProgress), 14);
        XPos -= float(69);
    }
    C.SetDrawColor(0, 0, 0, 255);
    C.SetPos(XPos, YPos);
    C.DrawText(ProgressString);
    YPos += float(20);
    C.SetDrawColor(255, 255, 255, 255);
    C.SetPos(XPos, YPos);
    C.DrawText(TimeString);
    C.Reset();
}

simulated function DrawObjEndHUD(Canvas C)
{
    local float XPos, YPos, CurScale;
    local string TempString;

    C.SetDrawColor(255, 255, 255);
    C.bCenter = true;
    CurScale = 1;
    XPos = (float(C.SizeX) - (float(256) * CurScale)) - float(10);
    YPos = 10;
    C.SetPos(XPos, YPos);
    C.DrawTile(ObjRectangleTex, 256 * CurScale, 128 * CurScale, 0, 0, 512, 256);
    YPos += float(16);
    C.SetPos(XPos, YPos);
    TempString = ObjectiveTypeString;
    C.DrawText(TempString);
    YPos += float(30);
    C.SetPos(XPos, YPos);
    if(ObjectiveState == 5)
    {
        TempString = ObjectiveFailedString;
        C.DrawText(TempString);
        YPos += float(40);
        C.SetPos(XPos, YPos);
        TempString = ObjectiveFailReasons[ObjectiveFailReason];
        C.DrawText(TempString);
        C.Reset();
        return;
    }
    TempString = ObjectiveWonString;
    C.DrawText(TempString);
    YPos += float(36);
    C.SetPos(XPos, YPos);
    TempString = "REWARDS";
    C.DrawText(TempString);
    YPos += float(20);
    C.SetPos(XPos, YPos);
    TempString = ((("?" @ string(DoshReward)) @ "         ") @ string(PerkReward)) @ "XP";
    C.DrawText(TempString);
    C.Reset();
}

defaultproperties
{
    PawnHealingTime=30
    ObjDoshReward=200
    ObjExpReward=200
    ObjWorldTex=Texture2D'UI_Objective_Tex.UI_Obj_Healing_Loc'
}