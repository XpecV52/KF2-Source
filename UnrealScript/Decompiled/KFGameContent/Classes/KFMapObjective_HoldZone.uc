/*******************************************************************************
 * KFMapObjective_HoldZone generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMapObjective_HoldZone extends KFMapObjective_AreaDefense
    hidecategories(Navigation,Object,Movement,Display);

/** in seconds */
var() float RequiredTime;
var float ProgressCheckInterval;
var float CurrentProgressTime;
var transient int TrackProgressTimerIdx;
var repnotify transient int ZoneProgressEnabledIdx;
var repnotify transient int ZoneProgressIdx;
/** Sound event to play when players are engaged with too many zeds in the zone */
var() AkEvent TooManyZedsSoundEvent;
/** Sound event to play when too few players are in the zone */
var() AkEvent TooFewPlayersSoundEvent;
/** How often to remind players about the objective if they aren't engaged in completing it */
var() float RemindPlayersTime;

replication
{
     if(bNetDirty)
        CurrentProgressTime, ZoneProgressEnabledIdx, 
        ZoneProgressIdx;
}

simulated function ReplicatedEvent(name VarName)
{
    switch(VarName)
    {
        case 'ZoneProgressEnabledIdx':
            TriggerZoneProgressEvent(ZoneProgressEnabledIdx);
            break;
        case 'ZoneProgressIdx':
            TriggerZoneProgressEvent(ZoneProgressIdx);
            break;
        default:
            super.ReplicatedEvent(VarName);
            break;
    }
}

simulated function ActivateObjective()
{
    local int PlayerCount;

    super.ActivateObjective();
    if(Role == ROLE_Authority)
    {
        CurrentProgressTime = 0;
        SetTimer(ProgressCheckInterval, true, 'Timer_CheckProgress');
        SetTimer(RequiredTime, false, 'Timer_TrackProgress');
        SetTimer(RemindPlayersTime, false, 'Timer_TooFewPlayersReminderCooldown');
        TrackProgressTimerIdx = Timers.Find('FuncName', 'Timer_TrackProgress';
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        if((TouchingHumans.Length < PlayerThresholds[PlayerCount]) && TouchingZeds.Length >= ZedThresholds[PlayerCount])
        {
            PauseTimer(true, 'Timer_TrackProgress');
        }
        bActive = true;
        bForceNetUpdate = true;
    }
}

simulated function DeactivateObjective()
{
    local KFPawn_Human KFPH;

    super.DeactivateObjective();
    if(Role == ROLE_Authority)
    {
        ClearTimer('Timer_CheckProgress');
        ClearTimer('Timer_TrackProgress');
        if((GetProgress()) < 1)
        {
            if(FailureSoundEvent != none)
            {
                PlaySoundBase(FailureSoundEvent, false, WorldInfo.NetMode == NM_DedicatedServer);
            }            
        }
        else
        {
            foreach WorldInfo.AllPawns(Class'KFPawn_Human', KFPH)
            {
                GrantReward(KFPH);                
            }            
        }
        bActive = false;
        bForceNetUpdate = true;
    }
}

simulated function Timer_TrackProgress();

simulated function Timer_TooFewPlayersReminderCooldown();

simulated function Timer_TooManyZedsReminderCooldown();

simulated function Timer_CheckProgress()
{
    local int PlayerCount, I, PrevZoneProgressIdx, GenEvtIdx;
    local float PrevProgress, CurrProgress;
    local KFSeqEvent_HoldZoneProgress GenEvt;
    local KFGameReplicationInfo KFGRI;

    PrevProgress = GetProgress();
    if(bActive)
    {
        I = 0;
        J0x2C:

        if(I < TouchingZeds.Length)
        {
            if(!IsValidZed(TouchingZeds[I]))
            {
                TouchingZeds.Remove(I, 1;
            }
            ++ I;
            goto J0x2C;
        }
        PlayerCount = Clamp(KFGameInfo(WorldInfo.Game).GetLivingPlayerCount(), 1, 6) - 1;
        if((TouchingHumans.Length >= PlayerThresholds[PlayerCount]) && TouchingZeds.Length <= ZedThresholds[PlayerCount])
        {
            if(Timers[TrackProgressTimerIdx].bPaused)
            {
                ZoneProgressEnabledIdx = 1;
                TriggerZoneProgressEvent(ZoneProgressEnabledIdx);
            }
            PauseTimer(false, 'Timer_TrackProgress');
            CurrentProgressTime = GetTimerCount('Timer_TrackProgress');
            bDangerState = false;
            if(IsComplete())
            {
                KFGRI = KFGameReplicationInfo(WorldInfo.GRI);
                if(KFGRI != none)
                {
                    KFGRI.DeactivateObjective();
                }
            }            
        }
        else
        {
            if(Role == ROLE_Authority)
            {
                if(TouchingHumans.Length < PlayerThresholds[PlayerCount])
                {
                    if(!IsTimerActive('Timer_TooFewPlayersReminderCooldown'))
                    {
                        if(TooFewPlayersSoundEvent != none)
                        {
                            PlaySoundBase(TooFewPlayersSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                        }
                        SetTimer(RemindPlayersTime, false, 'Timer_TooFewPlayersReminderCooldown');
                    }
                }
                if(TouchingZeds.Length > ZedThresholds[PlayerCount])
                {
                    if(!IsTimerActive('Timer_TooManyZedsReminderCooldown'))
                    {
                        if(TooManyZedsSoundEvent != none)
                        {
                            PlaySoundBase(TooManyZedsSoundEvent,, WorldInfo.NetMode == NM_DedicatedServer);
                        }
                        SetTimer(RemindPlayersTime, false, 'Timer_TooManyZedsReminderCooldown');
                    }
                }
            }
            if(!Timers[TrackProgressTimerIdx].bPaused)
            {
                ZoneProgressEnabledIdx = 0;
                TriggerZoneProgressEvent(ZoneProgressEnabledIdx);
            }
            PauseTimer(true, 'Timer_TrackProgress');
            bDangerState = true;
        }
        UpdateMeshArrayState();
        bTooFewPlayers = TouchingHumans.Length < PlayerThresholds[PlayerCount];
        bTooManyZeds = TouchingZeds.Length > ZedThresholds[PlayerCount];
    }
    CurrProgress = GetProgress();
    if(Role == ROLE_Authority)
    {
        PrevZoneProgressIdx = ZoneProgressIdx;
        GenEvtIdx = 0;
        J0x475:

        if(GenEvtIdx < GeneratedEvents.Length)
        {
            GenEvt = KFSeqEvent_HoldZoneProgress(GeneratedEvents[GenEvtIdx]);
            if(GenEvt != none)
            {
                I = 0;
                J0x4CD:

                if(I < GenEvt.ProgressThresholds.Length)
                {
                    if((PrevProgress < GenEvt.ProgressThresholds[I]) && CurrProgress >= GenEvt.ProgressThresholds[I])
                    {
                        ZoneProgressIdx = GenEvt.ProgressOutputStartIndex + I;
                        goto J0x5AC;
                    }
                    ++ I;
                    goto J0x4CD;
                }
                J0x5AC:

                goto J0x5BD;
            }
            ++ GenEvtIdx;
            goto J0x475;
        }
        J0x5BD:

        if(ZoneProgressIdx != PrevZoneProgressIdx)
        {
            TriggerZoneProgressEvent(ZoneProgressIdx);
        }
    }
}

simulated function TriggerZoneProgressEvent(int Idx)
{
    local int GenEvtIdx;
    local KFSeqEvent_HoldZoneProgress GenEvt;
    local array<int> ActivateIndices;

    ActivateIndices.AddItem(Idx;
    GenEvtIdx = 0;
    J0x21:

    if(GenEvtIdx < GeneratedEvents.Length)
    {
        GenEvt = KFSeqEvent_HoldZoneProgress(GeneratedEvents[GenEvtIdx]);
        if(GenEvt != none)
        {
            GenEvt.Reset();
            GenEvt.CheckActivate(self, self,, ActivateIndices);
        }
        ++ GenEvtIdx;
        goto J0x21;
    }
}

simulated function float GetProgress()
{
    if(CurrentProgressTime == -1)
    {
        return 1;
    }
    return FClamp(CurrentProgressTime / RequiredTime, 0, 1);
}

simulated function bool IsComplete()
{
    return (GetProgress()) >= 1;
}

simulated function bool IsActive()
{
    return bActive;
}

simulated function bool ShouldDrawIcon()
{
    return true;
}

simulated function Vector GetIconLocation()
{
    return Location;
}

simulated function string GetProgressText()
{
    local float TotalTime;
    local int MinutesRemaining, SecondsRemaining;
    local string TimeString;

    if((!bActive || RequiredTime <= 0) || CurrentProgressTime < 0)
    {
        return "";
    }
    TotalTime = FMax(RequiredTime - CurrentProgressTime, 0);
    MinutesRemaining = int(TotalTime / float(60));
    SecondsRemaining = int(TotalTime % float(60));
    if(MinutesRemaining < 10)
    {        
        TimeString $= "0";
    }    
    TimeString $= string(MinutesRemaining);    
    TimeString $= ":";
    if(SecondsRemaining < 10)
    {        
        TimeString $= "0";
    }    
    TimeString $= string(SecondsRemaining);
    return TimeString;
}

simulated function string GetLocalizedRequirements()
{
    return (Localize("Objectives", default.RequirementsLocKey, "KFGame")) @ (GetProgressText());
}

defaultproperties
{
    RequiredTime=300
    ProgressCheckInterval=0.25
    ZoneProgressIdx=-1
    RemindPlayersTime=30
    PlayerThresholds[0]=1
    PlayerThresholds[1]=1
    PlayerThresholds[2]=2
    PlayerThresholds[3]=2
    PlayerThresholds[4]=3
    PlayerThresholds[5]=3
    ZedThresholds[0]=4
    ZedThresholds[1]=4
    ZedThresholds[2]=4
    ZedThresholds[3]=3
    ZedThresholds[4]=2
    ZedThresholds[5]=2
    LocalizationKey="HoldZoneObjective"
    NameShortLocKey="HoldZoneObjective"
    DescriptionLocKey="HoldZoneDescription"
    DescriptionShortLocKey="HoldZoneDescriptionShort"
    RequirementsLocKey="HoldZoneRequired"
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_HoldZone.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_HoldZone.BrushComponent0'
    Components(0)=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
    object end
    // Reference: BrushComponent'Default__KFMapObjective_HoldZone.BrushComponent0'
    CollisionComponent=BrushComponent0
    SupportedEvents=/* Array type was not detected. */
}