/*******************************************************************************
 * KFSM_FleshpoundKing_ChestBeam generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSM_FleshpoundKing_ChestBeam extends KFSM_PlaySingleAnim;

var const ParticleSystem BeamPSCTemplate;
var export editinline ParticleSystemComponent BeamPSC;
var const ParticleSystem BeamHitPSCTemplate;
var export editinline ParticleSystemComponent BeamHitPSC;
var const name ChestBeamSocketName;
var const float TimeUntilTargetChange;
var const class<KFDamageType> BeamDamageType;
var const float MaxBeamLength;
var const Vector BeamExtent;
var const float DamageInterval;
var const int DamagePerTick;
var const float DamageMomentumImpulse;
var const bool bDrawDebugBeam;

function SpecialMoveStarted(bool bForced, name PrevMove)
{
    super.SpecialMoveStarted(bForced, PrevMove);
    if(KFPOwner.Role == ROLE_Authority)
    {
        KFPOwner.SetTimer(TimeUntilTargetChange, false, 'Timer_AttemptTargetChange', self);
    }
    KFPOwner.UpdateGameplayMICParams();
}

function Tick(float DeltaTime)
{
    super(KFSpecialMove).Tick(DeltaTime);
    if(((KFPOwner.WorldInfo.NetMode != NM_DedicatedServer) && BeamPSC != none) && BeamPSC.bIsActive)
    {
        SetBeamTarget();
    }
}

function bool IsValidBeamTarget(Actor HitActor)
{
    return ((Pawn(HitActor) != none) || (StaticMeshActor(HitActor) != none) && !StaticMeshActor(HitActor).bResetCapable) || SkeletalMeshActor(HitActor) != none;
}

function SetBeamTarget()
{
    local Vector SocketLoc, BeamEnd, HitLocation, HitNormal;
    local Rotator SocketRot;
    local Actor HitActor;
    local bool bShouldActivateHit;

    KFPOwner.Mesh.GetSocketWorldLocationAndRotation(ChestBeamSocketName, SocketLoc, SocketRot);
    BeamEnd = SocketLoc + (vector(KFPOwner.Rotation) * MaxBeamLength);
    bShouldActivateHit = false;
    foreach KFPOwner.TraceActors(Class'Actor', HitActor, HitLocation, HitNormal, BeamEnd, SocketLoc, BeamExtent,, KFPOwner.1)
    {
        if(IsValidBeamTarget(HitActor))
        {
            if((HitActor != none) && HitActor.bCanBeDamaged)
            {
                BeamEnd = HitLocation - vect(0, 0, 64);                
            }
            else
            {
                BeamEnd = HitLocation;
            }
            bShouldActivateHit = HitActor != none;
            break;
        }        
    }    
    BeamPSC.SetBeamTargetPoint(0, BeamEnd, 0);
    if(bShouldActivateHit && BeamHitPSC == none)
    {
        BeamHitPSC = KFPOwner.WorldInfo.MyEmitterPool.SpawnEmitter(BeamHitPSCTemplate, BeamEnd);
    }
    if(BeamHitPSC != none)
    {
        BeamHitPSC.SetAbsolute(true, true, false);
        BeamHitPSC.SetTranslation(BeamEnd);
        BeamHitPSC.SetRotation(KFPOwner.Rotation);
        if(!bShouldActivateHit && BeamHitPSC.bIsActive)
        {
            BeamHitPSC.DeactivateSystem();
            BeamHitPSC = none;
        }
    }
    if(bDrawDebugBeam)
    {
        KFPOwner.FlushPersistentDebugLines();
        KFPOwner.DrawDebugLine(SocketLoc, BeamEnd, 100, 128, 255, true);
    }
}

function ToggleBeam(bool bEnable)
{
    local ParticleSysParam SourceParam;

    if(bEnable)
    {
        if(BeamPSCTemplate != none)
        {
            BeamPSC = KFPOwner.WorldInfo.MyEmitterPool.SpawnEmitterMeshAttachment(BeamPSCTemplate, KFPOwner.Mesh, ChestBeamSocketName, true);
            if(BeamPSC != none)
            {
                SourceParam.Name = 'SourceActor';
                SourceParam.ParamType = 6;
                SourceParam.Actor = KFPOwner;
                BeamPSC.InstanceParameters.AddItem(SourceParam;
                SetBeamTarget();
            }
        }
        KFPOwner.SetTimer(DamageInterval, true, 'Timer_TickDamage', self);        
    }
    else
    {
        DisableBeamPSC();
        KFPOwner.ClearTimer('Timer_TickDamage', self);
    }
}

function DisableBeamPSC()
{
    if((BeamPSC != none) && BeamPSC.bIsActive)
    {
        BeamPSC.DeactivateSystem();
        BeamPSC = none;
    }
    if(BeamHitPSC != none)
    {
        BeamHitPSC.DeactivateSystem();
        BeamHitPSC = none;
    }
}

function Timer_AttemptTargetChange()
{
    local Pawn P, BestTarget;
    local KFAIController_ZedFleshpoundKing KingFPController;
    local Vector PawnDir;
    local float DotAngle, BestAngle;

    PawnDir = vector(KFPOwner.Rotation);
    foreach KFPOwner.WorldInfo.AllPawns(Class'Pawn', P)
    {
        if((((P != KFPOwner) && P != AIOwner.Enemy) && P.GetTeamNum() != KFPOwner.GetTeamNum()) && P.IsAliveAndWell())
        {
            DotAngle = PawnDir Dot Normal(P.Location - KFPOwner.Location);
            if(DotAngle < 0.2)
            {
                continue;                
            }
            if((BestAngle == 0) || DotAngle < BestAngle)
            {
                BestAngle = DotAngle;
                BestTarget = P;
            }
        }        
    }    
    if(BestTarget != none)
    {
        KingFPController = KFAIController_ZedFleshpoundKing(AIOwner);
        if(KingFPController != none)
        {
            KingFPController.ForceTargetChange(BestTarget);
        }
    }
}

function Timer_TickDamage()
{
    local Vector SocketLoc, BeamDir, EndTrace, HitLocation, HitNormal;

    local Rotator SocketRot;
    local Actor HitActor;
    local TraceHitInfo HitInfo;

    KFPOwner.Mesh.GetSocketWorldLocationAndRotation(ChestBeamSocketName, SocketLoc, SocketRot);
    BeamDir = vector(KFPOwner.Rotation);
    EndTrace = SocketLoc + (BeamDir * MaxBeamLength);
    foreach KFPOwner.TraceActors(Class'Actor', HitActor, HitLocation, HitNormal, EndTrace, SocketLoc, BeamExtent,, KFPOwner.1)
    {
        if(IsValidBeamTarget(HitActor))
        {
            if(HitActor.bCanBeDamaged)
            {
                HitActor.TakeDamage(DamagePerTick, KFPOwner.Controller, HitLocation, BeamDir * DamageMomentumImpulse, BeamDamageType, HitInfo, KFPOwner);
            }            
            return;
        }        
    }    
}

function SpecialMoveEnded(name PrevMove, name NextMove)
{
    super.SpecialMoveEnded(PrevMove, NextMove);
    DisableBeamPSC();
    if((KFPOwner != none) && KFPOwner.IsAliveAndWell())
    {
        KFPOwner.UpdateGameplayMICParams();
    }
    KFPOwner.FlushPersistentDebugLines();
}

defaultproperties
{
    BeamPSCTemplate=ParticleSystem'ZED_Fleshpound_King_EMIT.FX_ChestBeam'
    BeamHitPSCTemplate=ParticleSystem'ZED_Fleshpound_King_EMIT.FX_ChestBeam_Impact'
    ChestBeamSocketName=ChestBeamSocket
    TimeUntilTargetChange=0.75
    BeamDamageType=Class'KFDT_FleshpoundKing_ChestBeam'
    MaxBeamLength=2500
    BeamExtent=(X=15,Y=15,Z=15)
    DamageInterval=0.1
    DamagePerTick=7
    DamageMomentumImpulse=100
    AnimName=Atk_ChestBeam
    bUseCustomRotationRate=true
    bDisableMovement=true
    bDisableSteering=false
    bDisableTurnInPlace=true
    CustomRotationRate=(Pitch=50000,Yaw=25000,Roll=50000)
    Handle=KFSM_FleshpoundKing_ChestBeam
}