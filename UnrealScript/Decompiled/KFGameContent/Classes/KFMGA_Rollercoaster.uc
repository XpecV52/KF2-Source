/*******************************************************************************
 * KFMGA_Rollercoaster generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMGA_Rollercoaster extends KFMGA_AnimatedTrap
    hidecategories(Navigation);

var float MovementStartTime;
/** Amount of time to take to move back to the starting position.  If this is zero, gets set to match MovementTime */
var() float MovementBackTime;
/** Button to move left */
var() KFTrigger_MinigameButton MoveLeftButton;
/** Button to move right */
var() KFTrigger_MinigameButton MoveRightButton;
var repnotify int MoveDirection;
var Vector CachedMovementVector;
/** Move vector in the opposite direction. If this is the zero vector, gets set to -MovementDirection */
var() Vector RightMoveVector;
/** Move time in the opposite direction.  If this is zero, gets set to match MovementTime */
var() float RightMovementTime;
/** Move back time in the opposite direction.  If this is zero, gets set to match MovementBackTime */
var() float RightMovementBackTime;
/** Physics volumes for the two ends of the coaster car.  Enabling/disabling in code to time better compared to Kismet, while leaving LD option for location and setup intact. */
var() KFDynamicPhysicsVolume LeftPhysicsVolume;
var() KFDynamicPhysicsVolume RightPhysicsVolume;

replication
{
     if(bNetDirty)
        MoveDirection;
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    MovementStartTime = MovementTime;
    CachedMovementVector = MovementVector;
    if(MovementBackTime <= 0)
    {
        MovementBackTime = MovementTime;
    }
    if(VSize(RightMoveVector) <= 0)
    {
        RightMoveVector = -MovementVector;
    }
    if(RightMovementTime <= 0)
    {
        RightMovementTime = MovementTime;
    }
    if(RightMovementBackTime <= 0)
    {
        RightMovementBackTime = MovementBackTime;
    }
    if(LeftPhysicsVolume != none)
    {
        LeftPhysicsVolume.SetCollisionType(1);
    }
    if(RightPhysicsVolume != none)
    {
        RightPhysicsVolume.SetCollisionType(1);
    }
}

function bool CanBeActivated(KFTrigger_MinigameButton ActivationSource)
{
    return !bActivated;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'bActivated')
    {
        if(!bActivated)
        {
            PlayDeactivation();
        }        
    }
    else
    {
        if(VarName == 'MoveDirection')
        {
            if(MoveDirection >= 0)
            {
                PlayActivation();
            }            
        }
        else
        {
            super.ReplicatedEvent(VarName);
        }
    }
}

function Activated(KFTrigger_MinigameButton ActivationSource)
{
    if(!bActivated)
    {
        if(ActivationSource == MoveLeftButton)
        {
            MoveDirection = 0;
            if(LeftPhysicsVolume != none)
            {
                LeftPhysicsVolume.SetCollisionType(4);
            }            
        }
        else
        {
            if(ActivationSource == MoveRightButton)
            {
                MoveDirection = 1;
                if(RightPhysicsVolume != none)
                {
                    RightPhysicsVolume.SetCollisionType(4);
                }
            }
        }
    }
    super.Activated(ActivationSource);
}

function Deactivated()
{
    super.Deactivated();
    if(bActivated)
    {
        MoveDirection = -1;
    }
}

simulated function PlayActivationIdle()
{
    MovementTime = ((MoveDirection == 0) ? MovementStartTime : RightMovementTime);
    super.PlayActivationIdle();
}

simulated function PlayDeactivation()
{
    MovementTime = ((MoveDirection == 0) ? MovementBackTime : RightMovementBackTime);
    super.PlayDeactivation();
}

simulated function SetMoveActivationCurve()
{
    if(MoveDirection == 0)
    {
        MovementVector = CachedMovementVector;        
    }
    else
    {
        MovementVector = RightMoveVector;
    }
    super.SetMoveActivationCurve();
}

simulated state Moving
{
    simulated function EndMovement()
    {
        if(LeftPhysicsVolume != none)
        {
            LeftPhysicsVolume.SetCollisionType(1);
        }
        if(RightPhysicsVolume != none)
        {
            RightPhysicsVolume.SetCollisionType(1);
        }
        super.EndMovement();
    }
    stop;    
}

defaultproperties
{
    MoveDirection=-1
    CageSFXComponent=AkComponent'Default__KFMGA_Rollercoaster.CageSFX0'
    begin object name=PSC0 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC0'
    ActivationStartFX=PSC0
    begin object name=PSC1 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC1'
    ActivationEndFX=PSC1
    begin object name=PSC2 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC2'
    DeactivationStartFX=PSC2
    begin object name=PSC3 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC3'
    DeactivationEndFX=PSC3
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFMGA_Rollercoaster.SkeletalMeshComponent0.AnimNodeSeq0'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMGA_Rollercoaster.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__KFMGA_Rollercoaster.SkeletalMeshComponent0'
    SkeletalMeshComponent=SkeletalMeshComponent0
    LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMGA_Rollercoaster.MyLightEnvironment'
    FacialAudioComp=AudioComponent'Default__KFMGA_Rollercoaster.FaceAudioComponent'
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFMGA_Rollercoaster.SkeletalMeshComponent0.AnimNodeSeq0'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMGA_Rollercoaster.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__KFMGA_Rollercoaster.SkeletalMeshComponent0'
    Components(0)=SkeletalMeshComponent0
    Components(1)=AudioComponent'Default__KFMGA_Rollercoaster.FaceAudioComponent'
    Components(2)=AkComponent'Default__KFMGA_Rollercoaster.CageSFX0'
    begin object name=PSC0 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC0'
    Components(3)=PSC0
    begin object name=PSC1 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC1'
    Components(4)=PSC1
    begin object name=PSC2 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC2'
    Components(5)=PSC2
    begin object name=PSC3 class=ParticleSystemComponent
        ReplacementPrimitive=none
    object end
    // Reference: ParticleSystemComponent'Default__KFMGA_Rollercoaster.PSC3'
    Components(6)=PSC3
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFMGA_Rollercoaster.SkeletalMeshComponent0.AnimNodeSeq0'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMGA_Rollercoaster.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__KFMGA_Rollercoaster.SkeletalMeshComponent0'
    CollisionComponent=SkeletalMeshComponent0
}