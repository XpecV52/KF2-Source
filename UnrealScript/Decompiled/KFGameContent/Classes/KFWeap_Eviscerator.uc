/*******************************************************************************
 * KFWeap_Eviscerator generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Eviscerator extends KFWeap_MeleeBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

const IdleNoGasAnim = 'Idle_NoGas';
const BlockLoopNoGasAnim = 'Brace_loop_NoGas';

var AnimNodeAdditiveBlending AdditiveBlendNode;
var AnimNodeBlendPerBone OutOfBladesBlendNode;
var AkEvent IdleMotorSound;
var float BlockInterruptFiringTime;

simulated event PreBeginPlay()
{
    super(KFWeapon).PreBeginPlay();
    BlockInterruptFiringTime = FMin(BlockInterruptFiringTime, MySkelMesh.GetAnimLength('Brace_in'));
}

simulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)
{
    super(KFWeapon).PostInitAnimTree(SkelComp);
    AdditiveBlendNode = AnimNodeAdditiveBlending(SkelComp.FindAnimNode('MotorAdditiveBlend'));
    OutOfBladesBlendNode = AnimNodeBlendPerBone(SkelComp.FindAnimNode('OutOfBladesBlend'));
}

simulated function bool HasAnyAmmo()
{
    if((HasSpareAmmo()) || HasAmmo(0))
    {
        return true;
    }
    if(MedicComp != none)
    {
        return false;
    }
    if((UsesSecondaryAmmo()) && (HasSpareAmmo(5)) || HasAmmo(5))
    {
        return true;
    }
    return false;
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 5) && !HasAmmo(FireModeNum))
    {
        FireModeNum = 3;
    }
    super(KFWeapon).StartFire(FireModeNum);
}

simulated function int GetAmmoType(byte FiringMode)
{
    if((FiringMode == 5) || FiringMode == 1)
    {
        return 1;        
    }
    else
    {
        return 0;
    }
}

event RecieveClientImpact(byte FiringMode, const out ImpactInfo Impact, optional out float PenetrationValue, optional int ImpactNum)
{
    if(FiringMode == 0)
    {
        super(KFWeapon).RecieveClientImpact(FiringMode, Impact, PenetrationValue);        
    }
    else
    {
        MeleeAttackHelper.ProcessMeleeHit(FiringMode, Impact);
    }
}

simulated function HideBlade();

simulated function UnHideBlade();

simulated function UpdateOutOfAmmoEffects(float BlendTime)
{
    if(AmmoCount[1] > 0)
    {
        PlayIdleMotorSound();
        if(AdditiveBlendNode != none)
        {
            AdditiveBlendNode.SetBlendTarget(1, BlendTime);
        }        
    }
    else
    {
        StopIdleMotorSound();
        if(AdditiveBlendNode != none)
        {
            AdditiveBlendNode.SetBlendTarget(0, BlendTime);
        }
    }
    if(OutOfBladesBlendNode != none)
    {
        OutOfBladesBlendNode.SetBlendTarget(((AmmoCount[0] > 0) ? 0 : 1), BlendTime);
    }
}

simulated function PlayIdleMotorSound()
{
    local KFPawn P;

    P = KFPawn(Instigator);
    if((P != none) && P.WeaponAmbientSound != IdleMotorSound)
    {
        P.SetWeaponAmbientSound(IdleMotorSound);
    }
}

simulated function StopIdleMotorSound()
{
    local KFPawn P;

    P = KFPawn(Instigator);
    if((P != none) && P.WeaponAmbientSound != none)
    {
        P.SetWeaponAmbientSound(none);
    }
}

simulated function bool CanOverrideMagReload(byte FireModeNum)
{
    return (super.CanOverrideMagReload(FireModeNum) || FireModeNum == 1) || FireModeNum == 5;
}

static simulated function float CalculateTraderWeaponStatDamage()
{
    local float CalculatedDamage;
    local class<KFDamageType> DamageType;

    CalculatedDamage = default.InstantHitDamage[0];
    DamageType = class<KFDamageType>(default.InstantHitDamageTypes[0]);
    if((DamageType != none) && DamageType.default.DoT_Type != 0)
    {
        CalculatedDamage += ((DamageType.default.DoT_Duration / DamageType.default.DoT_Interval) * (CalculatedDamage * DamageType.default.DoT_DamageScale));
    }
    return CalculatedDamage;
}

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetTraderFilter()
{
    return 3;
}

static simulated event KFGame.KFGFxObject_TraderItems.EFilterTypeUI GetAltTraderFilter()
{
    return 8;
}

simulated function BlockInterruptTimer();

simulated state Active
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        UpdateOutOfAmmoEffects(0.2);
    }

    simulated function PlayIdleAnim()
    {
        if(Instigator.IsFirstPerson())
        {
            if(AmmoCount[1] <= 0)
            {
                PlayAnimation('Idle_NoGas', 0, true, 0.2);                
            }
            else
            {
                super.PlayIdleAnim();
            }
        }
    }
    stop;    
}

auto state Inactive
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        StopIdleMotorSound();
    }
    stop;    
}

simulated state Reloading
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if(OutOfBladesBlendNode != none)
        {
            OutOfBladesBlendNode.SetBlendTarget(0, 0.1);
        }
    }
    stop;    
}

simulated state MeleeBlocking
{
    simulated function BlockLoopTimer()
    {
        if((AmmoCount[1] <= 0) && Instigator.IsLocallyControlled())
        {
            PlayAnimation('Brace_loop_NoGas',, true);
        }
        super.BlockLoopTimer();
    }
    stop;    
}

simulated state MeleeSustained
{
    ignores UpdateOutOfAmmoEffects;
    stop;    
}

simulated state WeaponSingleFiring
{
    simulated function BeginState(name PreviousStateName)
    {
        local float CheckBlockInterruptTime;

        CheckBlockInterruptTime = FireInterval[CurrentFireMode] - BlockInterruptFiringTime;
        if((BlockInterruptFiringTime > float(0)) && CheckBlockInterruptTime > float(0))
        {
            SetTimer(CheckBlockInterruptTime, false, 'BlockInterruptTimer');
        }
        super(WeaponFiring).BeginState(PreviousStateName);
    }

    simulated function EndState(name NextStateName)
    {
        ClearTimer('BlockInterruptTimer');
        super(WeaponFiring).EndState(NextStateName);
    }

    simulated function BlockInterruptTimer()
    {
        if(PendingFire(1) && HasAmmo(1))
        {
            SendToFiringState(1);
        }
    }

    simulated function BeginFire(byte FireModeNum)
    {
        global.BeginFire(FireModeNum);
        if((FireModeNum == 1) && BlockInterruptFiringTime > float(0))
        {
            if((HasAmmo(FireModeNum)) && !IsTimerActive('BlockInterruptTimer'))
            {
                SendToFiringState(FireModeNum);
            }
        }
    }
    stop;    
}

defaultproperties
{
    IdleMotorSound=AkEvent'WW_WEP_SA_SawBlade.Play_WEP_SA_Sawblade_Idle_Loop'
    BlockInterruptFiringTime=0.5
    ParryStrength=5
    MeleeSustainedWarmupTime=0.1
    BlockDamageMitigation=0.4
    ParryDamageMitigationPercent=0.3
    BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Katana'
    ParrySound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Katana'
    PackageKey="SawBlade"
    FirstPersonMeshName="WEP_1P_SawBlade_MESH.Wep_1stP_SawBlade_Rig"
    FirstPersonAnimSetNames=/* Array type was not detected. */
    FirstPersonAnimTree="WEP_1P_SawBlade_ANIM.1P_Sawblade_Animtree"
    PickupMeshName="WEP_3P_SawBlade_MESH.Wep_SawShooter_Pickup"
    AttachmentArchetypeName="WEP_Sawblade_ARCH.Wep_Eviscerator_3P"
    MuzzleFlashTemplateName="WEP_Sawblade_ARCH.Wep_Sawblade_MuzzleFlash"
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=true
    bHasLaserSight=true
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_Primary
    InventorySize=9
    MagazineCapacity[0]=5
    MagazineCapacity[1]=250
    PenetrationPower=/* Array type was not detected. */
    QuickWeaponDownRotation=(Pitch=-8192,Yaw=0,Roll=8192)
    GroupPriority=100
    WeaponSelectTexture=Texture2D'ui_weaponselect_tex.UI_WeaponSelect_SawbladeShooter'
    AmmoCost=/* Array type was not detected. */
    SpareAmmoCapacity=25
    AmmoPickupScale[1]=0.2
    WeaponFireWaveForm=ForceFeedbackWaveform'FX_ForceFeedback_ARCH.Gunfire.Heavy_Recoil_SingleShot'
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    MeleeAttackAnims=/* Array type was not detected. */
    BonesToLockOnEmpty=none
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    begin object name=MeleeHelper class=KFMeleeHelperWeapon
        MaxHitRange=180
        MeleeImpactCamShake=KFCameraShake'FX_CameraShake_Arch.Melee.Eviscerator'
        WorldImpactEffects=KFImpactEffectInfo'FX_Impacts_ARCH.Bladed_melee_impact'
    object end
    // Reference: KFMeleeHelperWeapon'Default__KFWeap_Eviscerator.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    AssociatedPerkClasses=/* Array type was not detected. */
    WeaponUpgrades=/* Array type was not detected. */
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=5,Z=-10)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Eviscerator.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Eviscerator"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Eviscerator.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Eviscerator.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}