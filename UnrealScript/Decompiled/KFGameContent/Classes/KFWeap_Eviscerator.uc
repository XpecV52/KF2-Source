/*******************************************************************************
 * KFWeap_Eviscerator generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFWeap_Eviscerator extends KFWeap_MeleeBase
    config(Game)
    hidecategories(Navigation,Advanced,Collision,Mobile,Movement,Object,Physics,Attachment,Debug);

const IdleNoGasAnim = 'Idle_NoGas';
const BlockLoopNoGasAnim = 'Brace_loop_NoGas';

var AnimNodeAdditiveBlending AdditiveBlendNode;
var AnimNodeBlendPerBone OutOfBladesBlendNode;
var AkEvent IdleMotorSound;

simulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)
{
    super(KFWeapon).PostInitAnimTree(SkelComp);
    AdditiveBlendNode = AnimNodeAdditiveBlending(SkelComp.FindAnimNode('MotorAdditiveBlend'));
    OutOfBladesBlendNode = AnimNodeBlendPerBone(SkelComp.FindAnimNode('OutOfBladesBlend'));
}

simulated function StartFire(byte FireModeNum)
{
    if((FireModeNum == 5) && !HasAmmo(FireModeNum))
    {
        FireModeNum = 3;
    }
    super(KFWeapon).StartFire(FireModeNum);
}

simulated function bool HasAmmo(byte FireModeNum, optional int Amount)
{
    if(FireModeNum == 1)
    {
        return true;
    }
    return super(KFWeapon).HasAmmo(FireModeNum, Amount);
}

simulated function int GetAmmoType(byte FiringMode)
{
    if(FiringMode == 5)
    {
        return 1;        
    }
    else
    {
        return 0;
    }
}

event RecieveClientImpact(byte FiringMode, const out ImpactInfo Impact, optional out float PenetrationValue)
{
    if(FiringMode == 0)
    {
        super(KFWeapon).RecieveClientImpact(FiringMode, Impact, PenetrationValue);        
    }
    else
    {
        MeleeAttackHelper.ProcessMeleeHit(FiringMode, Impact);
    }
}

simulated function HideBlade();

simulated function UnHideBlade();

simulated function UpdateOutOfAmmoEffects(float BlendTime)
{
    if(AmmoCount[1] > 0)
    {
        PlayIdleMotorSound();
        if(AdditiveBlendNode != none)
        {
            AdditiveBlendNode.SetBlendTarget(1, BlendTime);
        }        
    }
    else
    {
        StopIdleMotorSound();
        if(AdditiveBlendNode != none)
        {
            AdditiveBlendNode.SetBlendTarget(0, BlendTime);
        }
    }
    if(OutOfBladesBlendNode != none)
    {
        OutOfBladesBlendNode.SetBlendTarget(((AmmoCount[0] > 0) ? 0 : 1), BlendTime);
    }
}

simulated function PlayIdleMotorSound()
{
    local KFPawn P;

    P = KFPawn(Instigator);
    if((P != none) && P.WeaponAmbientSound != IdleMotorSound)
    {
        P.SetWeaponAmbientSound(IdleMotorSound);
    }
}

simulated function StopIdleMotorSound()
{
    local KFPawn P;

    P = KFPawn(Instigator);
    if((P != none) && P.WeaponAmbientSound != none)
    {
        P.SetWeaponAmbientSound(none);
    }
}

static simulated function float CalculateTraderWeaponStatDamage()
{
    local float CalculatedDamage;
    local class<KFDamageType> DamageType;

    CalculatedDamage = default.InstantHitDamage[0];
    DamageType = class<KFDamageType>(default.InstantHitDamageTypes[0]);
    if((DamageType != none) && DamageType.default.DoT_Type != 0)
    {
        CalculatedDamage += ((DamageType.default.DoT_Duration / DamageType.default.DoT_Interval) * (CalculatedDamage * DamageType.default.DoT_DamageScale));
    }
    return CalculatedDamage;
}

simulated state Active
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        UpdateOutOfAmmoEffects(0.2);
    }

    simulated function PlayIdleAnim()
    {
        if(Instigator.IsFirstPerson())
        {
            if(AmmoCount[1] <= 0)
            {
                PlayAnimation('Idle_NoGas', 0, true, 0.2);                
            }
            else
            {
                super.PlayIdleAnim();
            }
        }
    }
    stop;    
}

auto state Inactive
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        StopIdleMotorSound();
    }
    stop;    
}

simulated state Reloading
{
    simulated function BeginState(name PreviousStateName)
    {
        super.BeginState(PreviousStateName);
        if(OutOfBladesBlendNode != none)
        {
            OutOfBladesBlendNode.SetBlendTarget(0, 0.1);
        }
    }
    stop;    
}

simulated state MeleeBlocking
{
    simulated function BlockLoopTimer()
    {
        if((AmmoCount[1] <= 0) && Instigator.IsLocallyControlled())
        {
            PlayAnimation('Brace_loop_NoGas',, true);
        }
        super.BlockLoopTimer();
    }
    stop;    
}

simulated state MeleeSustained
{
    ignores UpdateOutOfAmmoEffects;
    stop;    
}

defaultproperties
{
    IdleMotorSound=AkEvent'WW_WEP_SA_SawBlade.Play_WEP_SA_Sawblade_Idle_Loop'
    ParryStrength=5
    MeleeSustainedWarmupTime=0.1
    ParryDamageMitigationPercent=0.1
    BlockSound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Katana'
    ParrySound=AkEvent'WW_WEP_Bullet_Impacts.Play_Block_MEL_Katana'
    FireModeIconPaths=/* Array type was not detected. */
    InventoryGroup=EInventoryGroup.IG_Primary
    FilterTypeUI=EFilterTypeUI.FT_Projectile
    InventorySize=10
    EffectiveRange=25
    bCanBeReloaded=true
    bReloadFromMagazine=true
    bHasFireLastAnims=true
    bHasLaserSight=true
    PenetrationPower=/* Array type was not detected. */
    GroupPriority=100
    UITexture=Texture2D'ui_weaponselect_tex.UI_WeaponSelect_SawbladeShooter'
    MagazineCapacity[0]=5
    MagazineCapacity[1]=250
    MaxSpareAmmo=20
    InitialSpareMags=2
    AmmoPickupScale[1]=0.2
    MeleeImpactCamShake=KFCameraShake'FX_CameraShake_Arch.Melee.Eviscerator'
    bLoopingFireAnim=/* Array type was not detected. */
    bLoopingFireSnd=/* Array type was not detected. */
    MeleeAttackAnims=/* Array type was not detected. */
    WeaponFireSnd=/* Array type was not detected. */
    WeaponFireLoopEndSnd=/* Array type was not detected. */
    WeaponDryFireSnd=/* Array type was not detected. */
    AttachmentArchetype=KFWeapAttach_Eviscerator'WEP_Sawblade_ARCH.Wep_Eviscerator_3P'
    begin object name=MeleeHelper class=KFMeleeHelperWeapon
        WorldImpactEffects=KFImpactEffectInfo'FX_Impacts_ARCH.Bladed_melee_impact'
        MaxHitRange=180
    object end
    // Reference: KFMeleeHelperWeapon'Default__KFWeap_Eviscerator.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    MuzzleFlashTemplate=KFMuzzleFlash'WEP_Sawblade_ARCH.Wep_Sawblade_MuzzleFlash'
    AssociatedPerkClass=Class'KFGame.KFPerk_Berserker'
    FiringStatesArray=/* Array type was not detected. */
    WeaponFireTypes=/* Array type was not detected. */
    WeaponProjectiles=/* Array type was not detected. */
    FireInterval=/* Array type was not detected. */
    Spread=/* Array type was not detected. */
    InstantHitDamage=/* Array type was not detected. */
    InstantHitDamageTypes=/* Array type was not detected. */
    FireOffset=(X=25,Y=5,Z=-10)
    begin object name=FirstPersonMesh class=KFSkeletalMeshComponent
        SkeletalMesh=SkeletalMesh'WEP_1P_SawBlade_MESH.Wep_1stP_SawBlade_Rig'
        AnimTreeTemplate=AnimTree'WEP_1P_SawBlade_ANIM.1P_Sawblade_Animtree'
        AnimSets(0)=AnimSet'WEP_1P_SawBlade_ANIM.WEP_1P_SawBlade_ANIM'
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFWeap_Eviscerator.FirstPersonMesh'
    Mesh=FirstPersonMesh
    ItemName="Eviscerator"
    begin object name=StaticPickupComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'WEP_3P_Pickups_MESH.Wep_SawShooter_Pickup'
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Eviscerator.StaticPickupComponent'
    DroppedPickupMesh=StaticPickupComponent
    begin object name=StaticPickupComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'WEP_3P_Pickups_MESH.Wep_SawShooter_Pickup'
        ReplacementPrimitive=none
    object end
    // Reference: StaticMeshComponent'Default__KFWeap_Eviscerator.StaticPickupComponent'
    PickupFactoryMesh=StaticPickupComponent
}