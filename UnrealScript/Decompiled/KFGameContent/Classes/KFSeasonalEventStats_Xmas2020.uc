/*******************************************************************************
 * KFSeasonalEventStats_Xmas2020 generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFSeasonalEventStats_Xmas2020 extends KFSeasonalEventStats within KFOnlineStatsWrite;

var private const transient int RosesRequired;
var private const transient int TomesRequired;
var private const transient int EndlessWaveRequired;
var private const transient int XmasEventIndex;

private final event Initialize(string MapName)
{
    local string CapsMapName;

    CapsMapName = Caps(MapName);
    bObjectiveIsValidForMap[0] = 0;
    bObjectiveIsValidForMap[1] = 0;
    bObjectiveIsValidForMap[2] = 0;
    bObjectiveIsValidForMap[3] = 0;
    bObjectiveIsValidForMap[4] = 0;
    if(CapsMapName == "KF-ELYSIUM")
    {
        bObjectiveIsValidForMap[0] = 1;
        bObjectiveIsValidForMap[1] = 1;
        bObjectiveIsValidForMap[2] = 1;
        bObjectiveIsValidForMap[3] = 1;
        bObjectiveIsValidForMap[4] = 1;
    }
    SetSeasonalEventStatsMax(RosesRequired, TomesRequired, 0, 0, 0);
}

private final event GrantEventItems()
{
    if((((Outer.IsEventObjectiveComplete(0) && Outer.IsEventObjectiveComplete(1)) && Outer.IsEventObjectiveComplete(2)) && Outer.IsEventObjectiveComplete(3)) && Outer.IsEventObjectiveComplete(4))
    {
        GrantEventItem(8608);
    }
}

simulated function OnTryCompleteObjective(int ObjectiveIndex, int EventIndex)
{
    local int ObjIdx;

    ObjIdx = 0;
    if(((bObjectiveIsValidForMap[ObjIdx] != 0) && ObjectiveIndex == ObjIdx) && EventIndex == XmasEventIndex)
    {
        IncrementSeasonalEventStat(ObjIdx, 1);
        if(Outer.GetSeasonalEventStatValue(ObjIdx) >= RosesRequired)
        {
            FinishedObjective(XmasEventIndex, ObjIdx);
        }
    }
    ObjIdx = 1;
    if(((bObjectiveIsValidForMap[ObjIdx] != 0) && ObjectiveIndex == ObjIdx) && EventIndex == XmasEventIndex)
    {
        IncrementSeasonalEventStat(ObjIdx, 1);
        if(Outer.GetSeasonalEventStatValue(ObjIdx) >= TomesRequired)
        {
            FinishedObjective(XmasEventIndex, ObjIdx);
        }
    }
    ObjIdx = 2;
    if(((bObjectiveIsValidForMap[ObjIdx] != 0) && ObjectiveIndex == ObjIdx) && EventIndex == XmasEventIndex)
    {
        FinishedObjective(XmasEventIndex, ObjIdx);
    }
    ObjIdx = 3;
    if(((bObjectiveIsValidForMap[ObjIdx] != 0) && ObjectiveIndex == ObjIdx) && EventIndex == XmasEventIndex)
    {
        FinishedObjective(XmasEventIndex, ObjIdx);
    }
}

simulated event OnWaveCompleted(class<GameInfo> GameClass, int Difficulty, int WaveNum)
{
    local int ObjIdx;

    ObjIdx = 4;
    if(bObjectiveIsValidForMap[ObjIdx] != 0)
    {
        if(((WaveNum >= EndlessWaveRequired) && GameClass == Class'KFGameInfo_Endless') && float(Difficulty) >= 1)
        {
            FinishedObjective(XmasEventIndex, ObjIdx);
        }
    }
}

defaultproperties
{
    RosesRequired=3
    TomesRequired=4
    EndlessWaveRequired=15
    XmasEventIndex=4
}