/*******************************************************************************
 * KFPlayerZedSuicideCamera generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPlayerZedSuicideCamera extends GameFixedCamera;

var Vector InitialCameraLocation;
var Vector CameraOffset;
var float CameraInterpSpeed;
var Vector DesiredLocation;
var Rotator DesiredRotation;
var int CameraPitchAngle;
var float CameraPanSpeed;
var int CameraPanYaw;
var float CameraFOV;
var float CameraFOVInterpSpeed;
var float InterpolatedFOV;
var float CameraCollisionZOffset;

function OnBecomeActive(GameCameraBase OldCamera)
{
    super.OnBecomeActive(OldCamera);
}

function InitSuicideCam(Vector PawnLocation)
{
    CameraOffset = default.CameraOffset;
    InitialCameraLocation = PlayerCamera.CameraCache.POV.Location;
    DesiredRotation = rotator(InitialCameraLocation - PawnLocation);
    DesiredRotation.Pitch = CameraPitchAngle;
    CameraPanYaw = PlayerCamera.CameraCache.POV.Rotation.Yaw;
    PlayerCamera.PCOwner.SetLocation(InitialCameraLocation);
    PlayerCamera.PCOwner.SetViewTarget(PlayerCamera.PCOwner);
    InterpolatedFOV = PlayerCamera.CameraCache.POV.FOV;
    UpdateCameraFocalPoint();
}

function UpdateCameraFocalPoint()
{
    local Actor TraceActor;
    local Vector HitLocation, HitNormal;

    TraceActor = ((PlayerCamera.PCOwner.Pawn != none) ? PlayerCamera.PCOwner.Pawn : PlayerCamera.PCOwner);
    TraceActor.Trace(HitLocation, HitNormal, InitialCameraLocation + (vect(0, 0, 1) * (default.CameraOffset.Z + CameraCollisionZOffset)), InitialCameraLocation, false, vect(5, 5, 5),, TraceActor.1);
    if(!IsZero(HitLocation))
    {
        CameraOffset.Z = VSize(HitLocation - InitialCameraLocation) - CameraCollisionZOffset;        
    }
    else
    {
        CameraOffset = default.CameraOffset;
    }
    DesiredLocation = InitialCameraLocation + CameraOffset;
}

simulated function UpdateCamera(Pawn P, GamePlayerCamera CameraActor, float DeltaTime, out TViewTarget OutVT)
{
    super(GameCameraBase).UpdateCamera(P, CameraActor, DeltaTime, OutVT);
    if((DesiredLocation == vect(0, 0, 0)) || InitialCameraLocation == vect(0, 0, 0))
    {
        return;
    }
    PlayerCamera.ApplyCameraModifiers(DeltaTime, OutVT.POV);
    OutVT.POV.Location = VInterpTo(OutVT.POV.Location, DesiredLocation, DeltaTime, CameraInterpSpeed);
    OutVT.POV.Rotation = RInterpTo(OutVT.POV.Rotation, DesiredRotation, DeltaTime, CameraInterpSpeed);
    CameraPanYaw = int(float(CameraPanYaw) + (CameraPanSpeed * DeltaTime)) & 65535;
    OutVT.POV.Rotation.Yaw = CameraPanYaw;
    OutVT.POV.Rotation.Roll = 0;
    InterpolatedFOV = FInterpTo(InterpolatedFOV, CameraFOV, DeltaTime, CameraFOVInterpSpeed);
    OutVT.POV.FOV = InterpolatedFOV;
}

function OnBecomeInActive(GameCameraBase NewCamera)
{
    super(GameCameraBase).OnBecomeInActive(NewCamera);
    InitialCameraLocation = vect(0, 0, 0);
    DesiredLocation = vect(0, 0, 0);
}

defaultproperties
{
    CameraOffset=(X=0,Y=0,Z=300)
    CameraInterpSpeed=2
    CameraPitchAngle=-12000
    CameraPanSpeed=1024
    CameraFOV=160
    CameraFOVInterpSpeed=1
    CameraCollisionZOffset=40
}