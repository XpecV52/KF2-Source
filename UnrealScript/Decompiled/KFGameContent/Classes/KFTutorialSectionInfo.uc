/*******************************************************************************
 * KFTutorialSectionInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFTutorialSectionInfo extends Object
    hidecategories(Object);

struct STutorialSlide
{
    var() string TitleKey;
    var() string DescriptionKey;
    var() Texture2D UIImage;
    /** Key binds to locate and merge with description text */
    var() array<string> KeyGBAs;
    /** If >= 0, replace this slide from the GamepadSlides array */
    var() int GamepadSlideIndex;

    structdefaultproperties
    {
        TitleKey=""
        DescriptionKey=""
        UIImage=none
        KeyGBAs=none
        GamepadSlideIndex=-1
    }
};

struct SControllerTutorialSlide
{
    /** Image to use for PS4 builds */
    var() Texture2D PS4Image;
    /** Image to use for xbox one builds */
    var() Texture2D XboxOneImage;
    /** Image to use for xbox 360 builds or on PC with controller */
    var() Texture2D PCImage;
    /** Image to use for xbox 360 builds or on PC with controller */
    var() string TitleKey;
    /** Image to use for xbox 360 builds or on PC with controller */
    var() string DescriptionKey;
    /** Key binds to locate and merge with description text */
    var() array<string> KeyGBAs;

    structdefaultproperties
    {
        PS4Image=none
        XboxOneImage=none
        PCImage=none
        TitleKey=""
        DescriptionKey=""
        KeyGBAs=none
    }
};

/** Default slides */
var() private array<STutorialSlide> TutorialSlides;
/** DEPRECATED - Override slides used only for gamepad */
var() private array<STutorialSlide> GamepadReplacementSlides;
/** Override slides for use on controller or with consoles */
var() private array<SControllerTutorialSlide> ControllerReplacementSlides;
var() AkEvent VoiceOverOpenEvent;
var() AkEvent VoiceOverCloseEvent;
/** Delay before this screen opens */
var() float OpenDelay;

function array<STutorialSlide> GetSlides(PlayerController PC)
{
    local array<STutorialSlide> MergedSlides;
    local STutorialSlide NextSlide, NewSlide;

    if(GamepadReplacementSlides.Length > 0)
    {
        if(PC.PlayerInput.bUsingGamepad)
        {
            foreach TutorialSlides(NextSlide,)
            {
                if((NextSlide.GamepadSlideIndex >= 0) && NextSlide.GamepadSlideIndex < ControllerReplacementSlides.Length)
                {
                    NewSlide.TitleKey = ControllerReplacementSlides[NextSlide.GamepadSlideIndex].TitleKey;
                    NewSlide.DescriptionKey = ControllerReplacementSlides[NextSlide.GamepadSlideIndex].DescriptionKey;
                    NewSlide.KeyGBAs = ControllerReplacementSlides[NextSlide.GamepadSlideIndex].KeyGBAs;
                    if(Class'WorldInfo'.static.IsConsoleBuild(8))
                    {
                        NewSlide.UIImage = ControllerReplacementSlides[NextSlide.GamepadSlideIndex].PS4Image;                        
                    }
                    else
                    {
                        if(Class'WorldInfo'.static.IsConsoleBuild(9))
                        {
                            NewSlide.UIImage = ControllerReplacementSlides[NextSlide.GamepadSlideIndex].XboxOneImage;                            
                        }
                        else
                        {
                            NewSlide.UIImage = ControllerReplacementSlides[NextSlide.GamepadSlideIndex].PCImage;
                        }
                    }
                    MergedSlides.AddItem(NewSlide;                    
                }
                else
                {
                    if((NextSlide.GamepadSlideIndex >= 0) && NextSlide.GamepadSlideIndex < GamepadReplacementSlides.Length)
                    {
                        MergedSlides.AddItem(GamepadReplacementSlides[NextSlide.GamepadSlideIndex];                        
                    }
                    else
                    {
                        MergedSlides.AddItem(NextSlide;
                    }
                }                
            }            
            return MergedSlides;
        }
    }
    return TutorialSlides;
}

function OpenDelayTimer()
{
    local KFGameInfo_Tutorial GI;

    GI = KFGameInfo_Tutorial(Class'WorldInfo'.static.GetWorldInfo().Game);
    if(GI != none)
    {
        if(Class'KFGameEngine'.static.IsFullScreenMoviePlaying())
        {
            GI.SetTimer(0.05, false, 'OpenDelayTimer', self);            
        }
        else
        {
            GI.CreateTutorialHUD(self, true);
        }
    }
}
