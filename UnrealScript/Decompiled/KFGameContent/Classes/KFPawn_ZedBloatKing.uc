/*******************************************************************************
 * KFPawn_ZedBloatKing generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFPawn_ZedBloatKing extends KFPawn_ZedBloat
    config(Game)
    hidecategories(Navigation)
    implements(KFInterface_MonsterBoss);

const HeadBit = 0x1;
const FrontBit = 0x2;
const BackBit = 0x4;

struct ArmorZoneInfo
{
    /** List of zones of armor (similar to hit zones) */
    var() name ArmorZoneName;
    /** Name of the armor zone */
    var() name SocketName;
    /** Name of the socket explosion FX play from */
    var() int ArmorHealth;
    /** Amount of health the armor absorbs before it blows off */
    var() int ArmorHealthMax;
    /** Amount of health the armor absorbs before it blows off */
    var() ParticleSystem ExplosionTemplate;
    /** Amount of health the armor absorbs before it blows off */
    var() AkEvent ExplosionSFXTemplate;
    /** Amount of health the armor absorbs before it blows off */
    var() Texture2D ZoneIcon;

    structdefaultproperties
    {
        ArmorZoneName=None
        SocketName=None
        ArmorHealth=0
        ArmorHealthMax=0
        ExplosionTemplate=none
        ExplosionSFXTemplate=none
        ZoneIcon=none
    }
};

var KFPlayerController KFPC;
var array<name> ArmorHitzoneNames;
var array<ArmorZoneInfo> ArmorZones;
var float ArmorScale;
var repnotify byte RepArmorPct[3];
var repnotify byte ArmorZoneStatus;
var byte PreviousArmorZoneStatus;
var repnotify byte FartFXNotify;
var repnotify byte PoopMonsterFXNotify;
var const localized array<localized string> BossCaptionStrings;
var bool bUseAnimatedCamera;
var Vector AnimatedBossCameraOffset;
var KFPawn PullVictims[11];
var protected const KFGameExplosion FartExplosionTemplate;
var const ParticleSystem FartFXTemplate;
var const name FartFXSocket;
var Vector2D BaseFartAttackTimer;
var Vector2D VarianceFartAttackTimer;
var Vector2D RageFartAttackTimer;
var Vector2D RageVarianceFartAttackTimer;
var array<Vector2D> DifficultyFartAttackTimers;
var array<Vector2D> DifficultyVarianceFartTimers;
var array<Vector2D> DifficultyRageFartTimers;
var array<Vector2D> DifficultyVarianceRageFartTimers;
var KFTrigger_BloatKingGorge GorgeTrigger;
var const float PoopMonsterOffset;
var ParticleSystem PoopMonsterFXTemplate;
var AkEvent PoopMonsterSFXTemplate;
var const name PoopMonsterFXSocket;
var const float PoopMonsterSpawnDelay;
var int CurrentDelayedSpawns;
var const int OverrideArmorFXIndex;
var const float RageSprintSpeedMultiplier;
var array<float> EnrageHealthThresholds;
var protected const float FootstepCameraShakePitchAmplitude;
var protected const float FootstepCameraShakeRollAmplitude;

replication
{
     if(Role == ROLE_Authority)
        ArmorZoneStatus, FartFXNotify, 
        PoopMonsterFXNotify, PullVictims, 
        RepArmorPct;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'ArmorZoneStatus')
    {
        UpdateArmorPieces();        
    }
    else
    {
        if(VarName == 'bIsEnraged')
        {
            SetEnraged(bIsEnraged);            
        }
        else
        {
            if(VarName == 'RepArmorPct')
            {
                UpdateArmorPieces();                
            }
            else
            {
                if(VarName == 'FartFXNotify')
                {
                    PlayFartSpawnFX();                    
                }
                else
                {
                    if(VarName == 'PoopMonsterFXNotify')
                    {
                        PlayPoopSpawnFX();                        
                    }
                    else
                    {
                        super(KFPawn_Monster).ReplicatedEvent(VarName);
                    }
                }
            }
        }
    }
}

simulated function KFPawn_Monster GetMonsterPawn()
{
    return self;
}

simulated function string GetRandomBossCaption()
{
    if(default.BossCaptionStrings.Length <= 0)
    {
        return "";
    }
    return default.BossCaptionStrings[Rand(default.BossCaptionStrings.Length)];
}

static simulated event bool IsABoss()
{
    return true;
}

simulated function float GetHealthPercent()
{
    return float(Health) / float(HealthMax);
}

simulated function SetAnimatedBossCamera(bool bEnable, optional Vector CameraOffset)
{
    bUseAnimatedCamera = bEnable;
    if(bUseAnimatedCamera)
    {
        AnimatedBossCameraOffset = CameraOffset;        
    }
    else
    {
        AnimatedBossCameraOffset = vect(0, 0, 0);
    }
}

simulated function bool UseAnimatedBossCamera()
{
    return bUseAnimatedCamera;
}

simulated function name GetBossCameraSocket()
{
    return 'TheatricCameraRootSocket';
}

simulated function Vector GetBossCameraOffset()
{
    return AnimatedBossCameraOffset;
}

function OnZedDied(Controller Killer)
{
    super(KFPawn_Monster).OnZedDied(Killer);
    KFGameInfo(WorldInfo.Game).BossDied(Killer);
    ClearFartTimer();
}

function KFAIWaveInfo GetWaveInfo(int BattlePhase, int Difficulty)
{
    return none;
}

function byte GetNumMinionsToSpawn()
{
    return 0;
}

function PossessedBy(Controller C, bool bVehicleTransition)
{
    super(KFPawn_Monster).PossessedBy(C, bVehicleTransition);
    if(DifficultyFartAttackTimers.Length > 0)
    {
        BaseFartAttackTimer = DifficultyFartAttackTimers[Min(int(WorldInfo.Game.GameDifficulty), DifficultyFartAttackTimers.Length)];
    }
    if(DifficultyVarianceFartTimers.Length > 0)
    {
        VarianceFartAttackTimer = DifficultyVarianceFartTimers[Min(int(WorldInfo.Game.GameDifficulty), DifficultyVarianceFartTimers.Length)];
    }
    if(DifficultyRageFartTimers.Length > 0)
    {
        RageFartAttackTimer = DifficultyRageFartTimers[Min(int(WorldInfo.Game.GameDifficulty), DifficultyRageFartTimers.Length)];
    }
    if(DifficultyVarianceRageFartTimers.Length > 0)
    {
        RageVarianceFartAttackTimer = DifficultyVarianceRageFartTimers[Min(int(WorldInfo.Game.GameDifficulty), DifficultyVarianceRageFartTimers.Length)];
    }
    PlayBossMusic();
    ServerDoSpecialMove(35);
    SetFartAttackTimer();
    InitArmor();
    GorgeTrigger = Spawn(Class'KFTrigger_BloatKingGorge', self,, Location, Rotation);
    GorgeTrigger.SetBase(self);
    GorgeTrigger.SetRelativeLocation(vect(0, 0, 0));
    GorgeTrigger.CylinderComponent.SetCylinderSize(Sqrt(Class'KFSM_BloatKing_Gorge'.default.GorgeAttackRangeSq), CylinderComponent.CollisionHeight);
}

function PlayBossMusic()
{
    if(KFGameInfo(WorldInfo.Game) != none)
    {
        KFGameInfo(WorldInfo.Game).ForcePatriarchMusicTrack();
    }
}

function bool CanObliterateDoors()
{
    return true;
}

event TakeDamage(int Damage, Controller InstigatedBy, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)
{
    super(KFPawn_Monster).TakeDamage(Damage, InstigatedBy, HitLocation, Momentum, DamageType, HitInfo, DamageCauser);
    if((EnrageHealthThresholds.Length > 0) && (float(Health) / float(HealthMax)) < EnrageHealthThresholds[0])
    {
        EnrageHealthThresholds.Remove(0, 1;
        KFAIController_ZedBloatKing(Controller).StartArmorEnrage();
    }
}

function AdjustDamage(out int InDamage, out Vector Momentum, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, TraceHitInfo HitInfo, Actor DamageCauser)
{
    super(KFPawn_Monster).AdjustDamage(InDamage, Momentum, InstigatedBy, HitLocation, DamageType, HitInfo, DamageCauser);
    if(HitInfo.BoneName != 'None')
    {
        AdjustBoneDamage(InDamage, HitInfo.BoneName, HitLocation);        
    }
    else
    {
        AdjustNonBoneDamage(InDamage);
    }
}

function AdjustBoneDamage(out int InDamage, name BoneName, Vector HitLocation)
{
    local int HitZoneIdx, ArmorZoneIdx;
    local name IntendedArmorZoneName;
    local int ArmorDamage;

    HitZoneIdx = HitZones.Find('ZoneName', BoneName;
    if(HitZoneIdx >= 0)
    {
        ArmorZoneIdx = -1;
        if(ArmorHitzoneNames.Find(HitZones[HitZoneIdx].ZoneName != -1)
        {
            IntendedArmorZoneName = 'None';
            switch(HitZones[HitZoneIdx].ZoneName)
            {
                case 'head':
                    IntendedArmorZoneName = 'head';
                    break;
                default:
                    IntendedArmorZoneName = ((((HitLocation - Location) Dot vector(Rotation)) > float(0)) ? 'Front' : 'back');
                    break;
                    break;
            }
            ArmorZoneIdx = ArmorZones.Find('ArmorZoneName', IntendedArmorZoneName;
        }
        if((ArmorZoneIdx != -1) && ArmorZones[ArmorZoneIdx].ArmorHealth > 0)
        {
            ArmorDamage = Clamp(InDamage, 0, ArmorZones[ArmorZoneIdx].ArmorHealth);
            InDamage -= ArmorDamage;
            ArmorZones[ArmorZoneIdx].ArmorHealth -= ArmorDamage;
            RepArmorPct[ArmorZoneIdx] = FloatToByte(float(ArmorZones[ArmorZoneIdx].ArmorHealth) / float(ArmorZones[ArmorZoneIdx].ArmorHealthMax));
            if(ArmorZones[ArmorZoneIdx].ArmorHealth <= 0)
            {
                ExplodeArmor(ArmorZoneIdx, IntendedArmorZoneName);
                KFAIController_ZedBloatKing(Controller).StartArmorEnrage();
            }
            UpdateArmorUI();
        }
    }
}

function AdjustNonBoneDamage(out int InDamage)
{
    local int ValidArmorZones, ArmorReduction, ArmorRemainder, ArmorDamage, Idx;

    ValidArmorZones = 0;
    Idx = 0;
    J0x16:

    if(Idx < ArmorZones.Length)
    {
        if(ArmorZones[Idx].ArmorHealth > 0)
        {
            ++ ValidArmorZones;
        }
        ++ Idx;
        goto J0x16;
    }
    if(ValidArmorZones > 0)
    {
        ArmorReduction = InDamage / ValidArmorZones;
        ArmorRemainder = InDamage % ValidArmorZones;
        Idx = 0;
        J0xC9:

        if(Idx < ArmorZones.Length)
        {
            if(ArmorZones[Idx].ArmorHealth > 0)
            {
                ArmorDamage = Clamp(ArmorReduction, 0, ArmorZones[Idx].ArmorHealth);
                if(ArmorDamage < ArmorReduction)
                {
                    ArmorRemainder += (ArmorReduction - ArmorDamage);
                }
                InDamage -= ArmorDamage;
                ArmorZones[Idx].ArmorHealth -= ArmorDamage;
                RepArmorPct[Idx] = FloatToByte(float(ArmorZones[Idx].ArmorHealth) / float(ArmorZones[Idx].ArmorHealthMax));
                if(ArmorZones[Idx].ArmorHealth <= 0)
                {
                    ExplodeArmor(Idx, ArmorZones[Idx].ArmorZoneName);
                    KFAIController_ZedBloatKing(Controller).StartArmorEnrage();
                }
                UpdateArmorUI();
            }
            ++ Idx;
            goto J0xC9;
        }
        Idx = 0;
        J0x2E5:

        if((Idx < ArmorZones.Length) && ArmorRemainder > 0)
        {
            if(ArmorZones[Idx].ArmorHealth > 0)
            {
                ArmorDamage = Clamp(ArmorRemainder, 0, ArmorZones[Idx].ArmorHealth);
                InDamage -= ArmorDamage;
                ArmorRemainder -= ArmorDamage;
                ArmorZones[Idx].ArmorHealth -= ArmorDamage;
                RepArmorPct[Idx] = FloatToByte(float(ArmorZones[Idx].ArmorHealth) / float(ArmorZones[Idx].ArmorHealthMax));
                if(ArmorZones[Idx].ArmorHealth <= 0)
                {
                    ExplodeArmor(Idx, ArmorZones[Idx].ArmorZoneName);
                    KFAIController_ZedBloatKing(Controller).StartArmorEnrage();
                }
                UpdateArmorUI();
            }
            ++ Idx;
            goto J0x2E5;
        }
    }
}

function int GetHitZoneIndex(name BoneName)
{
    if(BoneName == 'KBArmor')
    {
        return OverrideArmorFXIndex;
    }
    return super(KFPawn).GetHitZoneIndex(BoneName);
}

function PlayHit(float Damage, Controller InstigatedBy, Vector HitLocation, class<DamageType> DamageType, Vector Momentum, TraceHitInfo HitInfo)
{
    if(Damage == float(0))
    {
        HitInfo.BoneName = 'KBArmor';
        super(KFPawn_Monster).PlayHit(1, InstigatedBy, HitLocation, DamageType, Momentum, HitInfo);        
    }
    else
    {
        super(KFPawn_Monster).PlayHit(Damage, InstigatedBy, HitLocation, DamageType, Momentum, HitInfo);
    }
}

simulated function KFSkinTypeEffects GetHitZoneSkinTypeEffects(int HitZoneIdx)
{
    if(HitZoneIdx == OverrideArmorFXIndex)
    {
        return CharacterArch.ImpactSkins[2];
    }
    return super(KFPawn).GetHitZoneSkinTypeEffects(HitZoneIdx);
}

function ExplodeArmor(int ArmorZoneIdx, name ArmorZoneName)
{
    local byte StatusField;

    switch(ArmorZoneName)
    {
        case 'head':
            StatusField = byte(2 | 4);
            break;
        case 'Front':
            StatusField = byte(1 | 4);
            break;
        case 'back':
            StatusField = byte(2 | 1);
            break;
        default:
            break;
    }
    ArmorZoneStatus = byte(ArmorZoneStatus & StatusField);
    UpdateArmorPieces();
}

simulated function UpdateArmorPieces()
{
    local int I;
    local Vector SocketLocation;
    local Rotator SocketRotation;
    local KFCharacterInfo_Monster MonsterArch;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        MonsterArch = GetCharacterMonsterInfo();
        switch(ArmorZoneStatus ^ PreviousArmorZoneStatus)
        {
            case 1:
                I = Min(1, StaticAttachList.Length - 1);
                J0x7D:

                if(I >= 0)
                {
                    Mesh.DetachComponent(StaticAttachList[I]);
                    DetachComponent(StaticAttachList[I]);
                    StaticAttachList.Remove(I, 1;
                    -- I;
                    goto J0x7D;
                }
                Mesh.GetSocketWorldLocationAndRotation(default.ArmorZones[0].SocketName, SocketLocation, SocketRotation);
                WorldInfo.MyEmitterPool.SpawnEmitter(MonsterArch.ExtraVFX[0], SocketLocation, SocketRotation);
                PlaySoundBase(default.ArmorZones[0].ExplosionSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
                break;
            case 2:
                DetachComponent(ThirdPersonAttachments[1]);
                Mesh.GetSocketWorldLocationAndRotation(default.ArmorZones[1].SocketName, SocketLocation, SocketRotation);
                WorldInfo.MyEmitterPool.SpawnEmitter(MonsterArch.ExtraVFX[1], SocketLocation, SocketRotation);
                PlaySoundBase(default.ArmorZones[1].ExplosionSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
                ThirdPersonAttachments[1] = none;
                break;
            case 4:
                DetachComponent(ThirdPersonAttachments[2]);
                Mesh.GetSocketWorldLocationAndRotation(default.ArmorZones[2].SocketName, SocketLocation, SocketRotation);
                WorldInfo.MyEmitterPool.SpawnEmitter(MonsterArch.ExtraVFX[2], SocketLocation, SocketRotation);
                PlaySoundBase(default.ArmorZones[2].ExplosionSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
                ThirdPersonAttachments[2] = none;
                break;
            default:
                break;
                break;
        }
        UpdateArmorUI();
    }
    PreviousArmorZoneStatus = ArmorZoneStatus;
}

simulated function KFPlayerController GetKFPC()
{
    if(KFPC == none)
    {
        KFPC = KFPlayerController(GetALocalPlayerController());
    }
    return KFPC;
}

simulated function UpdateArmorUI()
{
    local SCompressedArmorInfo CompressedArmorInfoList[3];
    local int I;

    if((GetKFPC()) == none)
    {
        return;
    }
    I = 0;
    J0x1D:

    if(I < ArmorZones.Length)
    {
        CompressedArmorInfoList[I].Percentage = ByteToFloat(RepArmorPct[I]);
        CompressedArmorInfoList[I].IconTexture = default.ArmorZones[I].ZoneIcon;
        ++ I;
        goto J0x1D;
    }
    if((KFPC.myGfxHUD != none) && KFPC.myGfxHUD.bossHealthBar != none)
    {
        KFPC.myGfxHUD.bossHealthBar.UpdateArmorUI(CompressedArmorInfoList);
    }
}

function InitArmor()
{
    local KFGameInfo KFGI;
    local float HealthMod, HeadHealthMod;
    local int I;

    KFGI = KFGameInfo(WorldInfo.Game);
    if(KFGI != none)
    {
        HealthMod = 1;
        HeadHealthMod = 1;
        KFGI.DifficultyInfo.GetAIHealthModifier(self, KFGI.GameDifficulty, byte(KFGI.GetLivingPlayerCount()), HealthMod, HeadHealthMod);
        I = 0;
        J0xF0:

        if(I < ArmorZones.Length)
        {
            ArmorZones[I].ArmorHealth *= HealthMod;
            ArmorZones[I].ArmorHealthMax = ArmorZones[I].ArmorHealth;
            RepArmorPct[I] = FloatToByte(float(ArmorZones[I].ArmorHealth) / float(ArmorZones[I].ArmorHealthMax));
            ++ I;
            goto J0xF0;
        }
    }
    UpdateArmorUI();
}

function SetShieldScale(float InScale)
{
    local int I;

    ArmorScale = InScale;
    I = 0;
    J0x1E:

    if(I < ArmorZones.Length)
    {
        ArmorZones[I].ArmorHealth *= InScale;
        ArmorZones[I].ArmorHealthMax = ArmorZones[I].ArmorHealth;
        RepArmorPct[I] = FloatToByte(float(ArmorZones[I].ArmorHealth) / float(ArmorZones[I].ArmorHealthMax));
        ++ I;
        goto J0x1E;
    }
}

simulated event bool CanDoSpecialMove(KFGame.KFPawn.ESpecialMove AMove, optional bool bForceCheck)
{
    if(bIsEnraged && AMove == 17)
    {
        return false;
    }
    return super(KFPawn).CanDoSpecialMove(AMove, bForceCheck);
}

function bool ShouldPlaySpecialMeleeAnims()
{
    return IsEnraged();
}

simulated event bool IsEnraged()
{
    return bIsEnraged;
}

simulated function SetEnraged(bool bNewEnraged)
{
    if(!bCanRage || (Role == ROLE_Authority) && bNewEnraged == bIsEnraged)
    {
        return;
    }
    if(Role == ROLE_Authority)
    {
        bIsEnraged = bNewEnraged;
        if(IsDoingSpecialMove(17))
        {
            EndSpecialMove();
        }
        if(bIsEnraged)
        {
            DoSpecialMove(40, true,, SpecialMoveHandler.SpecialMoveClasses[40].static.PackFlagsBase(self));
            if(GetTimerCount('TimerFartAttack') > Lerp(RageFartAttackTimer.X, RageFartAttackTimer.Y, GetHealthPercentage()))
            {
                ClearFartTimer();
                SetFartAttackTimer();
            }
            if(KFAIController_ZedBloatKing(Controller) != none)
            {
                KFAIController_ZedBloatKing(Controller).SetEnrageTimer();
            }
        }
        SetSprinting(bNewEnraged);
    }
}

function AdjustMovementSpeed(float SpeedAdjust)
{
    if(bIsEnraged)
    {
        DesiredAdjustedGroundSpeed = (default.GroundSpeed * SpeedAdjust) * InitialGroundSpeedModifier;
        if(IsDoingSpecialMove())
        {
            DesiredAdjustedSprintSpeed = FMax((((default.SprintSpeed * SpeedAdjust) * InitialGroundSpeedModifier) * SpecialMoves[SpecialMove].GetSprintSpeedModifier()) * default.RageSprintSpeedMultiplier, DesiredAdjustedGroundSpeed);            
        }
        else
        {
            DesiredAdjustedSprintSpeed = FMax(((default.SprintSpeed * SpeedAdjust) * InitialGroundSpeedModifier) * default.RageSprintSpeedMultiplier, DesiredAdjustedGroundSpeed);
        }
        NormalGroundSpeed = DesiredAdjustedGroundSpeed;
        NormalSprintSpeed = DesiredAdjustedSprintSpeed;        
    }
    else
    {
        super(KFPawn_Monster).AdjustMovementSpeed(SpeedAdjust);
    }
}

simulated event PlayFootStepSound(int FootDown)
{
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        if(IsHumanControlled() && IsLocallyControlled())
        {
            FootstepCameraShake.RotOscillation.Pitch.Amplitude = 0;
            FootstepCameraShake.RotOscillation.Roll.Amplitude = 0;            
        }
        else
        {
            FootstepCameraShake.RotOscillation.Pitch.Amplitude = FootstepCameraShakePitchAmplitude;
            FootstepCameraShake.RotOscillation.Roll.Amplitude = FootstepCameraShakeRollAmplitude;
            FootstepCameraShakeInnerRadius = default.FootstepCameraShakeInnerRadius;
            FootstepCameraShakeOuterRadius = default.FootstepCameraShakeOuterRadius;
            if(!bIsSprinting || VSizeSq(Velocity) < 10000)
            {
                FootstepCameraShake.RotOscillation.Pitch.Amplitude *= 0.75;
                FootstepCameraShake.RotOscillation.Roll.Amplitude *= 0.75;
            }
        }
    }
    super(KFPawn_Monster).PlayFootStepSound(FootDown);
}

simulated function ANIMNOTIFY_PukeMineAttack()
{
    local Vector SpawnLocation;
    local Rotator SpawnRotation;

    if(Role == ROLE_Authority)
    {
        Mesh.GetSocketWorldLocationAndRotation('PukeSocket', SpawnLocation, SpawnRotation);
        SpawnPukeMine(SpawnLocation, SpawnRotation);
    }
}

function SetFartAttackTimer()
{
    local float HealthPct, TimerValue;

    HealthPct = GetHealthPercentage();
    if(bIsEnraged)
    {
        TimerValue = Lerp(RageFartAttackTimer.X, RageFartAttackTimer.Y, HealthPct) + (((FRand() - 0.5) * 2) * Lerp(RageVarianceFartAttackTimer.X, RageVarianceFartAttackTimer.Y, HealthPct));        
    }
    else
    {
        TimerValue = Lerp(BaseFartAttackTimer.X, BaseFartAttackTimer.Y, HealthPct) + (((FRand() - 0.5) * 2) * Lerp(VarianceFartAttackTimer.X, VarianceFartAttackTimer.Y, HealthPct));
    }
    SetTimer(TimerValue, false, 'TimerFartAttack');
}

function ClearFartTimer()
{
    ClearTimer('TimerFartAttack');
}

simulated function TimerFartAttack()
{
    local Vector FartLocation;
    local Rotator FartRotation;

    if(!IsAliveAndWell())
    {
        ClearTimer('TimerFartAttack');
        return;
    }
    Mesh.GetSocketWorldLocationAndRotation(default.FartFXSocket, FartLocation, FartRotation);
    ++ FartFXNotify;
    PlayFartSpawnFX();
    if(bIsEnraged)
    {
        SpawnPukeMine(FartLocation, FartRotation);
    }
    SetFartAttackTimer();
}

simulated function PlayFartSpawnFX()
{
    local Vector SocketLocation;
    local Rotator SocketRotation;
    local KFExplosion_BloatKingFart ExploActor;

    if(Role == ROLE_Authority)
    {
        SpawnPoopMonster();
    }
    ExploActor = Spawn(Class'KFExplosion_BloatKingFart', self,, Location, Rotation);
    if(ExploActor != none)
    {
        ExploActor.InstigatorController = Controller;
        ExploActor.Instigator = self;
        ExploActor.Explode(FartExplosionTemplate);
    }
    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        Mesh.GetSocketWorldLocationAndRotation(default.FartFXSocket, SocketLocation, SocketRotation);
        WorldInfo.MyEmitterPool.SpawnEmitter(default.FartFXTemplate, SocketLocation, SocketRotation);
    }
}

function AddGorgeVictim(KFPawn NewPawn)
{
    local bool bHuman;
    local int I;

    bHuman = KFPawn_Human(NewPawn) != none;
    NewPawn.SetCollision(true, false);
    NewPawn.SetPhysics(7);
    I = ((bHuman) ? 0 : 6);
    J0x71:

    if(I < ((bHuman) ? 6 : 11))
    {
        if(PullVictims[I] == none)
        {
            PullVictims[I] = NewPawn;
            return;
        }
        ++ I;
        goto J0x71;
    }
}

function RemoveGorgeVictim(KFPawn OldPawn)
{
    local int I;

    OldPawn.SetCollision(true, true);
    OldPawn.SetPhysics(1);
    I = 0;
    J0x40:

    if(I < 11)
    {
        if(PullVictims[I] == OldPawn)
        {
            PullVictims[I] = none;
            return;
        }
        ++ I;
        goto J0x40;
    }
}

function AllowNextPoopMonster()
{
    if(CurrentDelayedSpawns > 0)
    {
        ClearTimer('AllowNextPoopMonster');
        -- CurrentDelayedSpawns;
        SpawnPoopMonster();
    }
}

function SpawnPoopMonster()
{
    local KFPawn_Monster NewZed;
    local Vector X, Y, Z;

    if(IsTimerActive('AllowNextPoopMonster'))
    {
        ++ CurrentDelayedSpawns;
        return;
    }
    GetAxes(Rotation, X, Y, Z);
    NewZed = Spawn(Class'KFPawn_ZedBloatKingSubspawn',,, Location + (X * PoopMonsterOffset), Rotation,, true);
    if(NewZed != none)
    {
        NewZed.SetPhysics(2);
        KFGameInfo(WorldInfo.Game).SetMonsterDefaults(NewZed);
        NewZed.SpawnDefaultController();
        NewZed.Knockdown(,, vect(1, 1, 1), NewZed.Location, 1000, 100);
        if(KFAIController(NewZed.Controller) != none)
        {
            KFGameInfo(WorldInfo.Game).GetAIDirector().AIList.AddItem(KFAIController(NewZed.Controller);
            KFAIController(NewZed.Controller).SetTeam(1);
        }
        ++ PoopMonsterFXNotify;
        PlayPoopSpawnFX();
    }
    SetTimer(PoopMonsterSpawnDelay, false, 'AllowNextPoopMonster');
}

simulated function PlayPoopSpawnFX()
{
    local Vector SocketLocation;
    local Rotator SocketRotation;

    if(WorldInfo.NetMode != NM_DedicatedServer)
    {
        Mesh.GetSocketWorldLocationAndRotation(default.PoopMonsterFXSocket, SocketLocation, SocketRotation);
        WorldInfo.MyEmitterPool.SpawnEmitter(default.PoopMonsterFXTemplate, SocketLocation, SocketRotation);
        PlaySoundBase(default.PoopMonsterSFXTemplate, true, true, true, SocketLocation, true, SocketRotation);
    }
}

function CauseHeadTrauma(optional float BleedOutTime)
{
    BleedOutTime = 5;
    return;
}

simulated function bool PlayDismemberment(int InHitZoneIndex, class<KFDamageType> InDmgType, optional Vector HitDirection)
{
    return false;
}

simulated function PlayHeadAsplode()
{
    return;
}

simulated function ApplyHeadChunkGore(class<KFDamageType> dmgType, Vector HitLocation, Vector HitDirection)
{
    return;
}

defaultproperties
{
    ArmorHitzoneNames(0)=head
    ArmorHitzoneNames(1)=chest
    ArmorHitzoneNames(2)=heart
    ArmorHitzoneNames(3)=stomach
    ArmorHitzoneNames(4)=abdomen
    ArmorZones(0)=(ArmorZoneName=head,SocketName=FX_Armor_Head,ArmorHealth=1000,ArmorHealthMax=2000,ExplosionTemplate=none,ExplosionSFXTemplate=AkEvent'WW_ZED_Abomination.Play_Abomination_Small_Armor_Explo',ZoneIcon=Texture2D'zed_bloatking_ui.BloatKing_Head_Armor')
    ArmorZones(1)=(ArmorZoneName=Front,SocketName=FX_Armor_Chest,ArmorHealth=4000,ArmorHealthMax=4000,ExplosionTemplate=none,ExplosionSFXTemplate=AkEvent'WW_ZED_Abomination.Play_Abomination_Large_Armor_Explo',ZoneIcon=Texture2D'zed_bloatking_ui.BloatKing_Chest_Armor')
    ArmorZones(2)=(ArmorZoneName=back,SocketName=FX_Armor_Back,ArmorHealth=3000,ArmorHealthMax=3000,ExplosionTemplate=none,ExplosionSFXTemplate=AkEvent'WW_ZED_Abomination.Play_Abomination_Large_Armor_Explo',ZoneIcon=Texture2D'zed_bloatking_ui.BloatKing_Back_Armor')
    ArmorScale=1
    RepArmorPct[0]=255
    RepArmorPct[1]=255
    RepArmorPct[2]=255
    ArmorZoneStatus=7
    PreviousArmorZoneStatus=7
    BossCaptionStrings(0)="The Abomination has heavy armor plating that must be destroyed; it cannot be pierced, but you can shoot around it."
    BossCaptionStrings(1)="The Abomination can eat Zeds and pass them out again as... let's just say their smell does not improve."
    BossCaptionStrings(2)="Don't let the Abomination's size fool you; he can move fast when he wants."
    BossCaptionStrings(3)="Don't let the Abomination get near other Zeds; he can ingest them to... on second thought, you don't want to know."
    BossCaptionStrings(4)="If you let the Abomination get too close he will do far more than vomit on you. Those axes are not for show."
    BossCaptionStrings(5)="Destroying the Abomination's armor will send him into a rage, which is his most deadly state."
    begin object name=ExploTemplate0 class=KFGameExplosion
        ExplosionEffects=KFImpactEffectInfo'ZED_BloatKing_ARCH.FX_GasAoE_Explosion_01'
        Damage=14
        DamageRadius=450
        DamageFalloffExponent=0
        MyDamageType=Class'KFDT_Toxic_BloatKingFart'
        KnockDownStrength=0
        MomentumTransferScale=100
        ExplosionSound=AkEvent'WW_ZED_Abomination.Play_Abomination_AOE_Explo'
        FractureMeshRadius=0
        FracturePartVel=0
        CamShake=KFCameraShake'FX_CameraShake_Arch.Grenades.Default_Grenade'
        CamShakeInnerRadius=350
        CamShakeOuterRadius=600
    object end
    // Reference: KFGameExplosion'Default__KFPawn_ZedBloatKing.ExploTemplate0'
    FartExplosionTemplate=ExploTemplate0
    FartFXTemplate=ParticleSystem'ZED_BloatKing_EMIT.FX_Bloatking_Fart_01'
    FartFXSocket=Poop_Attach
    DifficultyFartAttackTimers(0)=
/* Exception thrown while deserializing DifficultyFartAttackTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyFartAttackTimers(1)=
/* Exception thrown while deserializing DifficultyFartAttackTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyFartAttackTimers(2)=
/* Exception thrown while deserializing DifficultyFartAttackTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyFartAttackTimers(3)=
/* Exception thrown while deserializing DifficultyFartAttackTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceFartTimers(0)=
/* Exception thrown while deserializing DifficultyVarianceFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceFartTimers(1)=
/* Exception thrown while deserializing DifficultyVarianceFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceFartTimers(2)=
/* Exception thrown while deserializing DifficultyVarianceFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceFartTimers(3)=
/* Exception thrown while deserializing DifficultyVarianceFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyRageFartTimers(0)=
/* Exception thrown while deserializing DifficultyRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyRageFartTimers(1)=
/* Exception thrown while deserializing DifficultyRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyRageFartTimers(2)=
/* Exception thrown while deserializing DifficultyRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyRageFartTimers(3)=
/* Exception thrown while deserializing DifficultyRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceRageFartTimers(0)=
/* Exception thrown while deserializing DifficultyVarianceRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceRageFartTimers(1)=
/* Exception thrown while deserializing DifficultyVarianceRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceRageFartTimers(2)=
/* Exception thrown while deserializing DifficultyVarianceRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    DifficultyVarianceRageFartTimers(3)=
/* Exception thrown while deserializing DifficultyVarianceRageFartTimers
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UDefaultProperty.DeserializeTagUE3()
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    PoopMonsterOffset=-100
    PoopMonsterFXTemplate=ParticleSystem'CHR_Bile_EMIT.FX_Bile_Birth_01'
    PoopMonsterSFXTemplate=AkEvent'WW_ZED_Abomination.Play_Abomination_Bile_Spawn'
    PoopMonsterFXSocket=Poop_Attach
    PoopMonsterSpawnDelay=2
    OverrideArmorFXIndex=200
    RageSprintSpeedMultiplier=1.62
    EnrageHealthThresholds(0)=0.75
    EnrageHealthThresholds(1)=0.5
    EnrageHealthThresholds(2)=0.2
    FootstepCameraShakePitchAmplitude=120
    FootstepCameraShakeRollAmplitude=60
    PukeMineProjectileClass=Class'KFProj_BloatKingPukeMine'
    bCanRage=true
    MonsterArchPath="ZED_ARCH.ZED_BloatKing_Archetype"
    ParryResistance=4
    begin object name=MeleeHelper class=KFMeleeHelperAI
        BaseDamage=55
        MyDamageType=Class'KFDT_Bludgeon_BloatKing'
        MomentumTransfer=40000
        MaxHitRange=375
    object end
    // Reference: KFMeleeHelperAI'Default__KFPawn_ZedBloatKing.MeleeHelper'
    MeleeAttackHelper=MeleeHelper
    DoshValue=500
    XPValues[0]=1291
    XPValues[1]=1694
    XPValues[2]=1790
    XPValues[3]=1843
    DamageTypeModifiers=/* Array type was not detected. */
    DifficultySettings=Class'KFDifficulty_BloatKing'
    FootstepCameraShakeInnerRadius=200
    FootstepCameraShakeOuterRadius=900
    begin object name=FootstepCameraShake0 class=CameraShake
        bSingleInstance=true
        OscillationDuration=0.25
        RotOscillation=(Pitch=(Amplitude=120,Frequency=60),Roll=(Amplitude=60,Frequency=40))
    object end
    // Reference: CameraShake'Default__KFPawn_ZedBloatKing.FootstepCameraShake0'
    FootstepCameraShake=FootstepCameraShake0
    PawnAnimInfo=KFPawnAnimInfo'ZED_BloatKing_ANIM.BloatKing_AnimGroup'
    LocalizationKey=KFPawn_ZedBloatKing
    begin object name=ThirdPersonHead0 class=SkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: SkeletalMeshComponent'Default__KFPawn_ZedBloatKing.ThirdPersonHead0'
    ThirdPersonHeadMeshComponent=ThirdPersonHead0
    HitZones=/* Array type was not detected. */
    PenetrationResistance=10
    AfflictionHandler=KFAfflictionManager'Default__KFPawn_ZedBloatKing.Afflictions'
    IncapSettings=/* Array type was not detected. */
    SprintSpeed=330
    begin object name=FirstPersonArms class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedBloatKing.FirstPersonArms'
    ArmsMesh=FirstPersonArms
    begin object name=SpecialMoveHandler class=KFSpecialMoveHandler
        SpecialMoveClasses=/* Array type was not detected. */
    object end
    // Reference: KFSpecialMoveHandler'Default__KFPawn_ZedBloatKing.SpecialMoveHandler'
    SpecialMoveHandler=SpecialMoveHandler
    AmbientAkComponent=AkComponent'Default__KFPawn_ZedBloatKing.AmbientAkSoundComponent_1'
    WeaponAkComponent=AkComponent'Default__KFPawn_ZedBloatKing.AmbientAkSoundComponent'
    WeaponAmbientEchoHandler=KFWeaponAmbientEchoHandler'Default__KFPawn_ZedBloatKing.WeaponAmbientEchoHandler'
    FootstepAkComponent=AkComponent'Default__KFPawn_ZedBloatKing.FootstepAkSoundComponent'
    DialogAkComponent=AkComponent'Default__KFPawn_ZedBloatKing.DialogAkSoundComponent'
    Mass=400
    GroundSpeed=231
    Health=9000
    ControllerClass=Class'KFAIController_ZedBloatKing'
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedBloatKing.KFPawnSkeletalMeshComponent'
    Mesh=KFPawnSkeletalMeshComponent
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedBloatKing.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__KFPawn_ZedBloatKing.Sprite'
    Components(0)=Sprite
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedBloatKing.CollisionCylinder'
    Components(1)=CollisionCylinder
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__KFPawn_ZedBloatKing.Arrow'
    Components(2)=Arrow
    begin object name=KFPawnSkeletalMeshComponent class=KFSkeletalMeshComponent
        ReplacementPrimitive=none
    object end
    // Reference: KFSkeletalMeshComponent'Default__KFPawn_ZedBloatKing.KFPawnSkeletalMeshComponent'
    Components(3)=KFPawnSkeletalMeshComponent
    Components(4)=AkComponent'Default__KFPawn_ZedBloatKing.AmbientAkSoundComponent'
    Components(5)=AkComponent'Default__KFPawn_ZedBloatKing.AmbientAkSoundComponent_1'
    Components(6)=AkComponent'Default__KFPawn_ZedBloatKing.FootstepAkSoundComponent'
    Components(7)=AkComponent'Default__KFPawn_ZedBloatKing.DialogAkSoundComponent'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__KFPawn_ZedBloatKing.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}