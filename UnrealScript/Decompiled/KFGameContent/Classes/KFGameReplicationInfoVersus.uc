/*******************************************************************************
 * KFGameReplicationInfoVersus generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFGameReplicationInfoVersus extends KFGameReplicationInfo
    config(Game)
    hidecategories(Navigation,Movement,Collision);

var bool bTeamBalanceEnabled;
var byte TeamBalanceDelta;
var float TimeToLockSwitchTeam;

replication
{
     if(bNetInitial)
        bTeamBalanceEnabled;
}

simulated event ReplicatedEvent(name VarName)
{
    if((VarName == 'bTraderIsOpen') && bTraderIsOpen)
    {
        FadeOutCrawlerSuicides();
    }
    super.ReplicatedEvent(VarName);
}

simulated function SetTeam(int Index, TeamInfo TI)
{
    if(Index == 255)
    {
        Index = 1;
    }
    super(GameReplicationInfo).SetTeam(Index, TI);
}

simulated event Timer()
{
    local KFGameInfo_VersusSurvival MyKFGameInfo;

    super.Timer();
    if(Role == ROLE_Authority)
    {
        MyKFGameInfo = KFGameInfo_VersusSurvival(WorldInfo.Game);
        bAllowSwitchTeam = !IsFinalWave() && !((MyKFGameInfo.MajorityPlayersReady() && float(RemainingTime) <= TimeToLockSwitchTeam) || MyKFGameInfo.CheckAllPlayersReady()) && !bMatchHasBegun;
        if(bAllowSwitchTeam)
        {
            return;            
        }
        else
        {
            if(bMatchHasBegun)
            {
                return;
            }
            if((MyKFGameInfo != none) && AreTeamsOutOfBalanced())
            {
                MyKFGameInfo.BalanceTeams();
            }
        }
    }
}

simulated function bool AreTeamsOutOfBalanced()
{
    local int ZedTeamSize, HumanTeamSize, I;

    if(!bTeamBalanceEnabled)
    {
        return false;
    }
    I = 0;
    J0x1C:

    if(I < PRIArray.Length)
    {
        if((PRIArray[I] != none) && !PRIArray[I].bOnlySpectator)
        {
            if(PRIArray[I].Team != none)
            {
                if(PRIArray[I].GetTeamNum() == 255)
                {
                    ++ ZedTeamSize;                    
                }
                else
                {
                    ++ HumanTeamSize;
                }
            }
        }
        ++ I;
        goto J0x1C;
    }
    if((ZedTeamSize > 6) || HumanTeamSize > 6)
    {
        return true;
    }
    if(Abs(float(ZedTeamSize - HumanTeamSize)) > float(TeamBalanceDelta))
    {
        return true;
    }
    return false;
}

function SetWaveActive(bool bWaveActive, optional byte NewMusicIntensity)
{
    local KFProj_BloatPukeMine PukeMine;

    super.SetWaveActive(bWaveActive, NewMusicIntensity);
    if(bTraderIsOpen)
    {
        foreach DynamicActors(Class'KFProj_BloatPukeMine', PukeMine)
        {
            PukeMine.FadeOut();            
        }        
        FadeOutCrawlerSuicides();
    }
}

simulated function FadeOutCrawlerSuicides()
{
    local KFExplosion_PlayerCrawlerSuicide CrawlerSuicideExplosion;

    foreach DynamicActors(Class'KFExplosion_PlayerCrawlerSuicide', CrawlerSuicideExplosion)
    {
        CrawlerSuicideExplosion.FadeOut();        
    }    
}

function ServerStartVoteKick(PlayerReplicationInfo PRI_Kickee, PlayerReplicationInfo PRI_Kicker)
{
    local KFPawn_Monster KFPM;
    local PlayerController C;

    C = PlayerController(PRI_Kickee.Owner);
    if(C != none)
    {
        KFPM = KFPawn_Monster(C.Pawn);
        if((KFPM != none) && KFPM.IsABoss())
        {
            return;
        }
    }
    if(VoteCollector != none)
    {
        VoteCollector.ServerStartVoteKick(PRI_Kickee, PRI_Kicker);
    }
}

defaultproperties
{
    TeamBalanceDelta=1
    TimeToLockSwitchTeam=3
    bAllowSwitchTeam=true
}