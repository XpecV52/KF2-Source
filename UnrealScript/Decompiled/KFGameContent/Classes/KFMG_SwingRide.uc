/*******************************************************************************
 * KFMG_SwingRide generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KFMG_SwingRide extends SkeletalMeshActor
    hidecategories(Navigation)
    implements(KFInterface_MinigameActor);

/** Amount of time to full speed */
var() float SpinUpTime;
/** Amount of time from deactivation to full stop */
var() float SpinDownTime;
/** Amount of rotation per second (in Rotator units) */
var() float RotationPerSecond;
var repnotify bool bSwingActive;
var InterpCurveFloat SpinUpCurve;
var InterpCurveFloat SpinDownCurve;

replication
{
     if(bNetDirty)
        bSwingActive;
}

simulated event ReplicatedEvent(name VarName)
{
    super.ReplicatedEvent(VarName);
    if(VarName == 'bSwingActive')
    {
        if(bSwingActive)
        {
            Activated(none);            
        }
        else
        {
            Deactivated();
        }
    }
}

function bool CanBeActivated(KFTrigger_MinigameButton ActivationSource)
{
    return true;
}

simulated event bool CanPlayAkEvent(Actor InOwner, name BoneName)
{
    return true;
}

simulated function SetSpinUpCurve()
{
    SpinUpCurve.Points.Length = 4;
    SpinUpCurve.Points[0].InVal = 0;
    SpinUpCurve.Points[0].OutVal = 0;
    SpinUpCurve.Points[0].InterpMode = 1;
    SpinUpCurve.Points[1].InVal = 0.25 * SpinUpTime;
    SpinUpCurve.Points[1].OutVal = RotationPerSecond * 0.15;
    SpinUpCurve.Points[1].InterpMode = 1;
    SpinUpCurve.Points[2].InVal = 0.75 * SpinUpTime;
    SpinUpCurve.Points[2].OutVal = RotationPerSecond * 0.85;
    SpinUpCurve.Points[2].InterpMode = 1;
    SpinUpCurve.Points[3].InVal = SpinUpTime;
    SpinUpCurve.Points[3].OutVal = RotationPerSecond;
    SpinUpCurve.Points[3].InterpMode = 1;
}

simulated function SetSpinDownCurve()
{
    SpinDownCurve.Points.Length = 4;
    SpinDownCurve.Points[0].InVal = 0;
    SpinDownCurve.Points[0].OutVal = RotationPerSecond;
    SpinDownCurve.Points[0].InterpMode = 1;
    SpinDownCurve.Points[1].InVal = 0.25 * SpinDownTime;
    SpinDownCurve.Points[1].OutVal = RotationPerSecond * 0.85;
    SpinDownCurve.Points[1].InterpMode = 1;
    SpinDownCurve.Points[2].InVal = 0.75 * SpinDownTime;
    SpinDownCurve.Points[2].OutVal = RotationPerSecond * 0.15;
    SpinDownCurve.Points[2].InterpMode = 1;
    SpinDownCurve.Points[3].InVal = SpinDownTime;
    SpinDownCurve.Points[3].OutVal = 0;
    SpinDownCurve.Points[3].InterpMode = 1;
}

simulated function Activated(KFTrigger_MinigameButton ActivationSource)
{
    SetTickIsDisabled(false);
    bSwingActive = true;
    SetSpinUpCurve();
    SetTimer(SpinUpTime, false, 'EnableFullRide');
    GotoState('SpinUp');
}

simulated function Deactivated()
{
    if(IsInState('Active') || IsInState('SpinUp'))
    {
        bSwingActive = false;
        SetTimer(SpinDownTime, false, 'RideStopped');
        SetSpinDownCurve();
        GotoState('SpinDown');
    }
}

function RideStopped();

auto simulated state Stopped
{
    simulated event BeginState(name PreviousStateName)
    {
        super(Object).BeginState(PreviousStateName);
        SetTickIsDisabled(true);
    }
    stop;    
}

simulated state SpinUp
{
    simulated event Tick(float DeltaTime)
    {
        local Rotator NewRotation;

        global.Tick(DeltaTime);
        NewRotation = Rotation;
        NewRotation.Yaw = int((float(NewRotation.Yaw) + (EvalInterpCurveFloat(SpinUpCurve, GetTimerCount('EnableFullRide')) * DeltaTime)) % float(65536));
        SetRotation(NewRotation);
    }

    simulated function EnableFullRide()
    {
        GotoState('Active');
    }

    function bool CanBeActivated(KFTrigger_MinigameButton ActivationSource)
    {
        return false;
    }
    stop;    
}

simulated state Active
{
    simulated event Tick(float DeltaTime)
    {
        local Rotator NewRotation;

        global.Tick(DeltaTime);
        NewRotation = Rotation;
        NewRotation.Yaw = int((float(NewRotation.Yaw) + (RotationPerSecond * DeltaTime)) % float(65536));
        SetRotation(NewRotation);
    }
    stop;    
}

simulated state SpinDown
{
    simulated event Tick(float DeltaTime)
    {
        local Rotator NewRotation;

        global.Tick(DeltaTime);
        NewRotation = Rotation;
        NewRotation.Yaw = int((float(NewRotation.Yaw) + (EvalInterpCurveFloat(SpinDownCurve, GetTimerCount('RideStopped')) * DeltaTime)) % float(65536));
        SetRotation(NewRotation);
    }

    simulated function RideStopped()
    {
        GotoState('Stopped');
    }

    function bool CanBeActivated(KFTrigger_MinigameButton ActivationSource)
    {
        return false;
    }
    stop;    
}

defaultproperties
{
    SpinUpTime=1.5
    SpinDownTime=1.5
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFMG_SwingRide.SkeletalMeshComponent0.AnimNodeSeq0'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMG_SwingRide.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__KFMG_SwingRide.SkeletalMeshComponent0'
    SkeletalMeshComponent=SkeletalMeshComponent0
    LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMG_SwingRide.MyLightEnvironment'
    FacialAudioComp=AudioComponent'Default__KFMG_SwingRide.FaceAudioComponent'
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFMG_SwingRide.SkeletalMeshComponent0.AnimNodeSeq0'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMG_SwingRide.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__KFMG_SwingRide.SkeletalMeshComponent0'
    Components(0)=SkeletalMeshComponent0
    Components(1)=AudioComponent'Default__KFMG_SwingRide.FaceAudioComponent'
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bAlwaysRelevant=true
    bUpdateSimulatedPosition=true
    NetPriority=2.5
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=AnimNodeSequence'Default__KFMG_SwingRide.SkeletalMeshComponent0.AnimNodeSeq0'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KFMG_SwingRide.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__KFMG_SwingRide.SkeletalMeshComponent0'
    CollisionComponent=SkeletalMeshComponent0
}