/*******************************************************************************
 * LocalPlayer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class LocalPlayer extends Player within Engine
    transient
    native
    config(Engine);

struct SynchronizedActorVisibilityHistory
{
    var Pointer State;
    var Pointer CriticalSection;

    structdefaultproperties
    {
        State=none
        CriticalSection=none
    }
};

struct native CurrentPostProcessVolumeInfo
{
    var PostProcessSettings LastSettings;
    var PostProcessVolume LastVolumeUsed;
    var float BlendStartTime;
    var float LastBlendTime;

    structdefaultproperties
    {
        LastSettings=(bOverride_EnableBloom=true,bOverride_EnableDOF=true,bOverride_EnableMotionBlur=true,bOverride_EnableSceneEffect=true,bOverride_AllowAmbientOcclusion=true,bOverride_OverrideRimShaderColor=true,bOverride_Bloom_Scale=true,bOverride_Bloom_Threshold=true,bOverride_Bloom_Tint=true,bOverride_Bloom_ScreenBlendThreshold=true,bOverride_Bloom_InterpolationDuration=true,bOverride_DOF_FalloffExponent=true,bOverride_DOF_BlurKernelSize=true,bOverride_DOF_BlurBloomKernelSize=true,bOverride_DOF_MaxNearBlurAmount=true,bOverride_DOF_MinBlurAmount=false,bOverride_DOF_MaxFarBlurAmount=true,bOverride_DOF_FocusType=true,bOverride_DOF_FocusInnerRadius=true,bOverride_DOF_FocusDistance=true,bOverride_DOF_FocusPosition=true,bOverride_DOF_InterpolationDuration=true,bOverride_DOF_BokehTexture=false,bOverride_MotionBlur_MaxVelocity=false,bOverride_MotionBlur_Amount=false,bOverride_MotionBlur_FullMotionBlur=false,bOverride_MotionBlur_CameraRotationThreshold=false,bOverride_MotionBlur_CameraTranslationThreshold=false,bOverride_MotionBlur_InterpolationDuration=false,bOverride_Scene_Desaturation=true,bOverride_Scene_Colorize=false,bOverride_Scene_TonemapperScale=false,bOverride_Scene_ImageGrainScale=false,bOverride_Scene_HighLights=true,bOverride_Scene_MidTones=true,bOverride_Scene_Shadows=true,bOverride_Scene_InterpolationDuration=true,bOverride_Scene_ColorGradingLUT=false,bOverride_RimShader_Color=true,bOverride_RimShader_InterpolationDuration=true,bOverride_MobileColorGrading=false,bEnableBloom=true,bEnableDOF=false,bEnableMotionBlur=true,bEnableSceneEffect=true,bAllowAmbientOcclusion=true,bOverrideRimShaderColor=false,TripwireSettings=(DOF_FocalDistance=1000,DOF_SharpRadius=800,DOF_FocalRadius=1200,DOF_MinBlurSize=0,DOF_MaxNearBlurSize=0,DOF_MaxFarBlurSize=0,DOF_ExpFalloff=1,DOF_FG_SharpRadius=75,DOF_FG_FocalRadius=150,DOF_FG_MinBlurSize=0,DOF_FG_MaxNearBlurSize=0,DOF_FG_ExpFalloff=1,Bloom_Intensity=1.05,Bloom_Width=4,Bloom_Exposure=1.25,Bloom_Threshold=0.6,Bloom_InterpolationDuration=1,NoiseIntensity=1,DOF_Strength=0,DOF_MaxFocalDistance=10000,MB_TileMaxEnabled=true,bForceGameplayDOF=false,bForceGameplayBloom=false,bForceGameplayImageGrain=false,bForceGameplayTranslucencyTint=false,bEnableScreenSpaceReflections=true,bBlurEnabled=false,BlurStrength=0),LegacySettings=(Bloom_Scale=1,Bloom_Threshold=1,Bloom_InterpolationDuration=1,DOF_BlurBloomKernelSize=16,DOF_FalloffExponent=4,DOF_BlurKernelSize=16,DOF_MaxNearBlurAmount=1,DOF_MinBlurAmount=0,DOF_MaxFarBlurAmount=1,DOF_FocusType=EFocusType.FOCUS_Distance,DOF_FocusInnerRadius=2000,DOF_FocusDistance=0,DOF_FocusPosition=(X=0,Y=0,Z=0),DOF_InterpolationDuration=1,DOF_BokehTexture=none,MotionBlur_MaxVelocity=1,MotionBlur_Amount=0.5,MotionBlur_FullMotionBlur=true,MotionBlur_CameraRotationThreshold=45,MotionBlur_CameraTranslationThreshold=10000,MotionBlur_InterpolationDuration=1,RimShader_Color=(R=0.47044,G=0.585973,B=0.827726,A=1),RimShader_InterpolationDuration=1,Scene_ImageGrainScale=0,MobileColorGrading=(TransitionTime=1,Blend=0,Desaturation=0,HighLights=(R=0.7,G=0.7,B=0.7,A=1),MidTones=(R=0,G=0,B=0,A=1),Shadows=(R=0,G=0,B=0,A=1)),MobilePostProcess=(bOverride_Mobile_BlurAmount=false,bOverride_Mobile_TransitionTime=false,bOverride_Mobile_Bloom_Scale=false,bOverride_Mobile_Bloom_Threshold=false,bOverride_Mobile_Bloom_Tint=false,bOverride_Mobile_DOF_Distance=false,bOverride_Mobile_DOF_MinRange=false,bOverride_Mobile_DOF_MaxRange=false,bOverride_Mobile_DOF_FarBlurFactor=false,Mobile_BlurAmount=16,Mobile_TransitionTime=1,Mobile_Bloom_Scale=0.5,Mobile_Bloom_Threshold=0.75,Mobile_Bloom_Tint=(R=1,G=1,B=1,A=1),Mobile_DOF_Distance=1500,Mobile_DOF_MinRange=600,Mobile_DOF_MaxRange=1200,Mobile_DOF_FarBlurFactor=1)),Bloom_Tint=(B=255,G=255,R=255,A=0),Bloom_ScreenBlendThreshold=10,Scene_Desaturation=0,Scene_Colorize=(X=1,Y=1,Z=1),Scene_TonemapperScale=1,Scene_HighLights=(X=1,Y=1,Z=1),Scene_MidTones=(X=1,Y=1,Z=1),Scene_Shadows=(X=0,Y=0,Z=0),Scene_InterpolationDuration=0,ColorGrading_LookupTable=none,ColorGradingLUT=(LUTTextures=none,LUTWeights=none))
        LastVolumeUsed=none
        BlendStartTime=0
        LastBlendTime=0
    }
};

struct native PostProcessSettingsOverride
{
    var PostProcessSettings Settings;
    var bool bBlendingIn;
    var bool bBlendingOut;
    var float CurrentBlendInTime;
    var float CurrentBlendOutTime;
    var float BlendInDuration;
    var float BlendOutDuration;
    var float BlendStartTime;
    var InterpCurveFloat TimeAlphaCurve;

    structdefaultproperties
    {
        Settings=(bOverride_EnableBloom=true,bOverride_EnableDOF=true,bOverride_EnableMotionBlur=true,bOverride_EnableSceneEffect=true,bOverride_AllowAmbientOcclusion=true,bOverride_OverrideRimShaderColor=true,bOverride_Bloom_Scale=true,bOverride_Bloom_Threshold=true,bOverride_Bloom_Tint=true,bOverride_Bloom_ScreenBlendThreshold=true,bOverride_Bloom_InterpolationDuration=true,bOverride_DOF_FalloffExponent=true,bOverride_DOF_BlurKernelSize=true,bOverride_DOF_BlurBloomKernelSize=true,bOverride_DOF_MaxNearBlurAmount=true,bOverride_DOF_MinBlurAmount=false,bOverride_DOF_MaxFarBlurAmount=true,bOverride_DOF_FocusType=true,bOverride_DOF_FocusInnerRadius=true,bOverride_DOF_FocusDistance=true,bOverride_DOF_FocusPosition=true,bOverride_DOF_InterpolationDuration=true,bOverride_DOF_BokehTexture=false,bOverride_MotionBlur_MaxVelocity=false,bOverride_MotionBlur_Amount=false,bOverride_MotionBlur_FullMotionBlur=false,bOverride_MotionBlur_CameraRotationThreshold=false,bOverride_MotionBlur_CameraTranslationThreshold=false,bOverride_MotionBlur_InterpolationDuration=false,bOverride_Scene_Desaturation=true,bOverride_Scene_Colorize=false,bOverride_Scene_TonemapperScale=false,bOverride_Scene_ImageGrainScale=false,bOverride_Scene_HighLights=true,bOverride_Scene_MidTones=true,bOverride_Scene_Shadows=true,bOverride_Scene_InterpolationDuration=true,bOverride_Scene_ColorGradingLUT=false,bOverride_RimShader_Color=true,bOverride_RimShader_InterpolationDuration=true,bOverride_MobileColorGrading=false,bEnableBloom=true,bEnableDOF=false,bEnableMotionBlur=true,bEnableSceneEffect=true,bAllowAmbientOcclusion=true,bOverrideRimShaderColor=false,TripwireSettings=(DOF_FocalDistance=1000,DOF_SharpRadius=800,DOF_FocalRadius=1200,DOF_MinBlurSize=0,DOF_MaxNearBlurSize=0,DOF_MaxFarBlurSize=0,DOF_ExpFalloff=1,DOF_FG_SharpRadius=75,DOF_FG_FocalRadius=150,DOF_FG_MinBlurSize=0,DOF_FG_MaxNearBlurSize=0,DOF_FG_ExpFalloff=1,Bloom_Intensity=1.05,Bloom_Width=4,Bloom_Exposure=1.25,Bloom_Threshold=0.6,Bloom_InterpolationDuration=1,NoiseIntensity=1,DOF_Strength=0,DOF_MaxFocalDistance=10000,MB_TileMaxEnabled=true,bForceGameplayDOF=false,bForceGameplayBloom=false,bForceGameplayImageGrain=false,bForceGameplayTranslucencyTint=false,bEnableScreenSpaceReflections=true,bBlurEnabled=false,BlurStrength=0),LegacySettings=(Bloom_Scale=1,Bloom_Threshold=1,Bloom_InterpolationDuration=1,DOF_BlurBloomKernelSize=16,DOF_FalloffExponent=4,DOF_BlurKernelSize=16,DOF_MaxNearBlurAmount=1,DOF_MinBlurAmount=0,DOF_MaxFarBlurAmount=1,DOF_FocusType=EFocusType.FOCUS_Distance,DOF_FocusInnerRadius=2000,DOF_FocusDistance=0,DOF_FocusPosition=(X=0,Y=0,Z=0),DOF_InterpolationDuration=1,DOF_BokehTexture=none,MotionBlur_MaxVelocity=1,MotionBlur_Amount=0.5,MotionBlur_FullMotionBlur=true,MotionBlur_CameraRotationThreshold=45,MotionBlur_CameraTranslationThreshold=10000,MotionBlur_InterpolationDuration=1,RimShader_Color=(R=0.47044,G=0.585973,B=0.827726,A=1),RimShader_InterpolationDuration=1,Scene_ImageGrainScale=0,MobileColorGrading=(TransitionTime=1,Blend=0,Desaturation=0,HighLights=(R=0.7,G=0.7,B=0.7,A=1),MidTones=(R=0,G=0,B=0,A=1),Shadows=(R=0,G=0,B=0,A=1)),MobilePostProcess=(bOverride_Mobile_BlurAmount=false,bOverride_Mobile_TransitionTime=false,bOverride_Mobile_Bloom_Scale=false,bOverride_Mobile_Bloom_Threshold=false,bOverride_Mobile_Bloom_Tint=false,bOverride_Mobile_DOF_Distance=false,bOverride_Mobile_DOF_MinRange=false,bOverride_Mobile_DOF_MaxRange=false,bOverride_Mobile_DOF_FarBlurFactor=false,Mobile_BlurAmount=16,Mobile_TransitionTime=1,Mobile_Bloom_Scale=0.5,Mobile_Bloom_Threshold=0.75,Mobile_Bloom_Tint=(R=1,G=1,B=1,A=1),Mobile_DOF_Distance=1500,Mobile_DOF_MinRange=600,Mobile_DOF_MaxRange=1200,Mobile_DOF_FarBlurFactor=1)),Bloom_Tint=(B=255,G=255,R=255,A=0),Bloom_ScreenBlendThreshold=10,Scene_Desaturation=0,Scene_Colorize=(X=1,Y=1,Z=1),Scene_TonemapperScale=1,Scene_HighLights=(X=1,Y=1,Z=1),Scene_MidTones=(X=1,Y=1,Z=1),Scene_Shadows=(X=0,Y=0,Z=0),Scene_InterpolationDuration=0,ColorGrading_LookupTable=none,ColorGradingLUT=(LUTTextures=none,LUTWeights=none))
        bBlendingIn=false
        bBlendingOut=false
        CurrentBlendInTime=0
        CurrentBlendOutTime=0
        BlendInDuration=0
        BlendOutDuration=0
        BlendStartTime=0
        TimeAlphaCurve=(Points=none,InterpMethod=EInterpMethodType.IMT_UseFixedTangentEvalAndNewAutoTangents)
    }
};

var private native const noexport Pointer VfTable_FObserverInterface;
var int ControllerId;
var GameViewportClient ViewportClient;
var Vector2D Origin;
var Vector2D Size;
var const transient PostProcessChain PlayerPostProcess;
var const transient array<PostProcessChain> PlayerPostProcessChains;
var transient bool bForceDefaultPostProcessChain;
var bool bWantToResetToMapDefaultPP;
var const editconst transient bool bSentSplitJoin;
var bool bPendingServerAuth;
var private native const Pointer ViewState;
var private native const Pointer ViewState2;
var private native const transient SynchronizedActorVisibilityHistory ActorVisibilityHistory;
var const transient Vector LastViewLocation;
var noimport const transient CurrentPostProcessVolumeInfo CurrentPPInfo;
var noimport const transient CurrentPostProcessVolumeInfo LevelPPInfo;
var protected transient array<PostProcessSettingsOverride> ActivePPOverrides;
var config Core.Object.EAspectRatioAxisConstraint AspectRatioAxisConstraint;
var string LastMap;
var TranslationContext TagContext;
var OnlineAuthInterface CachedAuthInt;
var float ServerAuthTimestamp;
var int ServerAuthTimeout;
var int ServerAuthRetryCount;
var int MaxServerAuthRetryCount;
var UniqueNetId ServerAuthUID;

// Export ULocalPlayer::execSpawnPlayActor(FFrame&, void* const)
native final function bool SpawnPlayActor(string URL, out string OutError);

// Export ULocalPlayer::execSendSplitJoin(FFrame&, void* const)
native final function SendSplitJoin();

// Export ULocalPlayer::execGetActorVisibility(FFrame&, void* const)
native final function bool GetActorVisibility(Actor TestActor);

// Export ULocalPlayer::execOverridePostProcessSettings(FFrame&, void* const)
native simulated function OverridePostProcessSettings(PostProcessSettings OverrideSettings, optional float BlendInTime);

// Export ULocalPlayer::execOverridePostProcessSettingsCurve(FFrame&, void* const)
native simulated function OverridePostProcessSettingsCurve(PostProcessSettings OverrideSettings, const out InterpCurveFloat Curve);

// Export ULocalPlayer::execClearPostProcessSettingsOverride(FFrame&, void* const)
native simulated function ClearPostProcessSettingsOverride(optional float BlendOutTime);

final function SetControllerId(int NewControllerId)
{
    local LocalPlayer OtherPlayer;
    local int CurrentControllerId;

    if(ControllerId != NewControllerId)
    {
        LogInternal((((string(Name) @ "changing ControllerId from") @ string(ControllerId)) @ "to") @ string(NewControllerId), 'PlayerManagement');
        if(Actor != none)
        {
            Actor.PreControllerIdChange();
        }
        CurrentControllerId = ControllerId;
        ControllerId = -1;
        OtherPlayer = ViewportClient.FindPlayerByControllerId(NewControllerId);
        if(OtherPlayer != none)
        {
            OtherPlayer.super(LocalPlayer).SetControllerId(CurrentControllerId);
        }
        ControllerId = NewControllerId;
        if(Actor != none)
        {
            Actor.PostControllerIdChange();
        }
    }
}

// Export ULocalPlayer::execGetTranslationContext(FFrame&, void* const)
native final function TranslationContext GetTranslationContext();

// Export ULocalPlayer::execInsertPostProcessingChain(FFrame&, void* const)
native function bool InsertPostProcessingChain(PostProcessChain InChain, int InIndex, bool bInClone);

// Export ULocalPlayer::execRemovePostProcessingChain(FFrame&, void* const)
native function bool RemovePostProcessingChain(int InIndex);

// Export ULocalPlayer::execRemoveAllPostProcessingChains(FFrame&, void* const)
native function bool RemoveAllPostProcessingChains();

// Export ULocalPlayer::execGetPostProcessChain(FFrame&, void* const)
native function PostProcessChain GetPostProcessChain(int InIndex);

// Export ULocalPlayer::execTouchPlayerPostProcessChain(FFrame&, void* const)
native function TouchPlayerPostProcessChain();

// Export ULocalPlayer::execDeProject(FFrame&, void* const)
native final function DeProject(Vector2D RelativeScreenPos, out Vector WorldOrigin, out Vector WorldDirection);

// Export ULocalPlayer::execProject(FFrame&, void* const)
native final function Vector2D Project(Vector WorldLoc);

// Export ULocalPlayer::execFastDeProject(FFrame&, void* const)
native final function FastDeProject(Vector2D RelativeScreenPos, out Vector WorldOrigin, out Vector WorldDirection);

// Export ULocalPlayer::execFastProject(FFrame&, void* const)
native final function Vector2D FastProject(Vector WorldLoc);

final event UniqueNetId GetUniqueNetId()
{
    local UniqueNetId Result;
    local GameEngine TheEngine;

    TheEngine = GameEngine(Outer);
    if(((TheEngine != none) && TheEngine.OnlineSubsystem != none) && NotEqual_InterfaceInterface(TheEngine.OnlineSubsystem.PlayerInterface, (none)))
    {
        TheEngine.OnlineSubsystem.PlayerInterface.GetUniquePlayerId(byte(ControllerId), Result);
    }
    return Result;
}

event string GetNickname()
{
    local GameEngine TheEngine;

    TheEngine = GameEngine(Outer);
    if(((TheEngine != none) && TheEngine.OnlineSubsystem != none) && NotEqual_InterfaceInterface(TheEngine.OnlineSubsystem.PlayerInterface, (none)))
    {
        return TheEngine.OnlineSubsystem.PlayerInterface.GetPlayerNickname(byte(ControllerId));        
    }
    else
    {
        return "";
    }
}

event NotifyServerConnectionOpen()
{
    local WorldInfo WI;

    if(Outer.GamePlayers[0] == self)
    {
        CachedAuthInt = Class'GameEngine'.static.GetOnlineSubsystem().AuthInterface;
        if(NotEqual_InterfaceInterface(CachedAuthInt, (none)))
        {
            CachedAuthInt.AddClientAuthRequestDelegate(ProcessClientAuthRequest);
            CachedAuthInt.AddServerAuthResponseDelegate(ProcessServerAuthResponse);
            CachedAuthInt.AddServerAuthCompleteDelegate(OnServerAuthComplete);
            CachedAuthInt.AddClientAuthEndSessionRequestDelegate(ProcessClientAuthEndSessionRequest);
            CachedAuthInt.AddServerConnectionCloseDelegate(OnServerConnectionClose);
        }
        bPendingServerAuth = true;
        WI = Class'WorldInfo'.static.GetWorldInfo();
        if(WI != none)
        {
            ServerAuthTimestamp = WI.RealTimeSeconds;            
        }
        else
        {
            ServerAuthTimestamp = 10;
        }
    }
}

function ProcessClientAuthRequest(UniqueNetId ServerUID, int ServerIP, int ServerPort, bool bSecure)
{
    local UniqueNetId NullId;
    local int AuthTicketUID;

    if(ServerUID != NullId)
    {
        if(CachedAuthInt.CreateClientAuthSession(ServerUID, ServerIP, ServerPort, bSecure, AuthTicketUID))
        {
            if(!CachedAuthInt.SendClientAuthResponse(AuthTicketUID))
            {
                LogInternal("LocalPlayer::ProcessClientAuthRequest: WARNING!!! Failed to send auth ticket to server");
            }            
        }
        else
        {
            LogInternal("LocalPlayer::ProcessClientAuthRequest: WARNING!!! Failed to create client auth session");
        }
    }
}

function ProcessClientAuthEndSessionRequest(Player ServerConnection)
{
    local LocalAuthSession CurClientSession;
    local AuthSession CurServerSession;

    if(CachedAuthInt.FindLocalClientAuthSession(ServerConnection, CurClientSession))
    {
        CachedAuthInt.EndLocalClientAuthSession(CurClientSession.EndPointUID, CurClientSession.EndPointIP, CurClientSession.EndPointPort);        
    }
    else
    {
        LogInternal("LocalPlayer::ProcessClientAuthEndSessionRequest: Couldn't find local client auth session");
    }
    if(CachedAuthInt.FindServerAuthSession(ServerConnection, CurServerSession))
    {
        CachedAuthInt.EndRemoteServerAuthSession(CurServerSession.EndPointUID, CurServerSession.EndPointIP);        
    }
    else
    {
        LogInternal("LocalPlayer::ProcessClientAuthEndSessionRequest: Couldn't find server auth session");
    }
}

function ProcessServerAuthResponse(UniqueNetId ServerUID, int ServerIP, int AuthTicketUID)
{
    local WorldInfo WI;

    if(CachedAuthInt.VerifyServerAuthSession(ServerUID, ServerIP, AuthTicketUID))
    {
        bPendingServerAuth = true;
        ServerAuthUID = ServerUID;
        WI = Class'WorldInfo'.static.GetWorldInfo();
        if(WI != none)
        {
            ServerAuthTimestamp = WI.RealTimeSeconds;            
        }
        else
        {
            ServerAuthTimestamp = 10;
        }
        LogInternal("Kicked off game server auth");        
    }
    else
    {
        LogInternal("Failed to kickoff game server auth");
    }
}

function OnServerAuthComplete(bool bSuccess, UniqueNetId ServerUID, Player ServerConnection, string ExtraInfo)
{
    if(bSuccess)
    {
        LogInternal("Server auth success");
        bPendingServerAuth = false;        
    }
    else
    {
        ServerAuthTimedOut();
    }
}

event ServerAuthTimedOut()
{
    local WorldInfo WI;
    local AuthSession CurServerSession;

    if(NotEqual_InterfaceInterface(CachedAuthInt, (none)))
    {
        if(ServerAuthRetryCount < MaxServerAuthRetryCount)
        {
            foreach CachedAuthInt.AllServerAuthSessions(CurServerSession)
            {
                if(CurServerSession.EndPointUID == ServerAuthUID)
                {
                    CachedAuthInt.EndRemoteServerAuthSession(CurServerSession.EndPointUID, CurServerSession.EndPointIP);
                    break;
                }                
            }            
            LogInternal("Sending server auth retry request");
            CachedAuthInt.SendServerAuthRetryRequest();
            ++ ServerAuthRetryCount;
            WI = Class'WorldInfo'.static.GetWorldInfo();
            if(WI != none)
            {
                ServerAuthTimestamp = WI.RealTimeSeconds;                
            }
            else
            {
                ServerAuthTimestamp = 10;
            }            
        }
        else
        {
            ServerAuthFailure();
        }
    }
}

function ServerAuthFailure()
{
    LogInternal(("Server authentication failed after" @ string(MaxServerAuthRetryCount)) @ "tries");
}

function OnServerConnectionClose(Player ServerConnection)
{
    StaticOnServerConnectionClose(ServerConnection);
}

static final function StaticOnServerConnectionClose(Player ServerConnection)
{
    local OnlineAuthInterface CurAuthInt;
    local LocalAuthSession CurClientSession;
    local AuthSession CurServerSession;

    CurAuthInt = Class'GameEngine'.static.GetOnlineSubsystem().AuthInterface;
    if(NotEqual_InterfaceInterface(CurAuthInt, (none)))
    {
        if(CurAuthInt.FindLocalClientAuthSession(ServerConnection, CurClientSession))
        {
            CurAuthInt.EndLocalClientAuthSession(CurClientSession.EndPointUID, CurClientSession.EndPointIP, CurClientSession.EndPointPort);            
        }
        else
        {
            LogInternal("LocalPlayer::StaticOnServerConnectionClose: Couldn't find local client auth session");
        }
        if(CurAuthInt.FindServerAuthSession(ServerConnection, CurServerSession))
        {
            CurAuthInt.EndRemoteServerAuthSession(CurServerSession.EndPointUID, CurServerSession.EndPointIP);            
        }
        else
        {
            LogInternal("LocalPlayer::StaticOnServerConnectionClose: Couldn't find server auth session");
        }
    }
}

event ViewportClosed()
{
    Cleanup(true);
}

event NotifyServerConnectionClose()
{
    Cleanup();
}

event Exit()
{
    Cleanup(true);
}

function Cleanup(optional bool bExit)
{
    if(Outer.GamePlayers[0] == self)
    {
        if(NotEqual_InterfaceInterface(CachedAuthInt, (none)))
        {
            CachedAuthInt.ClearClientAuthRequestDelegate(ProcessClientAuthRequest);
            CachedAuthInt.ClearServerAuthResponseDelegate(ProcessServerAuthResponse);
            CachedAuthInt.ClearServerAuthCompleteDelegate(OnServerAuthComplete);
            CachedAuthInt.ClearClientAuthEndSessionRequestDelegate(ProcessClientAuthEndSessionRequest);
            CachedAuthInt.ClearServerConnectionCloseDelegate(OnServerConnectionClose);
            if(bExit)
            {
                CachedAuthInt.EndAllLocalClientAuthSessions();
                CachedAuthInt.EndAllRemoteServerAuthSessions();
            }
        }
        CachedAuthInt = none;
        bPendingServerAuth = false;
    }
}

defaultproperties
{
    bWantToResetToMapDefaultPP=true
    CurrentPPInfo=(LastSettings=(bOverride_EnableBloom=true,bOverride_EnableDOF=true,bOverride_EnableMotionBlur=true,bOverride_EnableSceneEffect=true,bOverride_AllowAmbientOcclusion=true,bOverride_OverrideRimShaderColor=true,bOverride_Bloom_Scale=true,bOverride_Bloom_Threshold=true,bOverride_Bloom_Tint=true,bOverride_Bloom_ScreenBlendThreshold=true,bOverride_Bloom_InterpolationDuration=true,bOverride_DOF_FalloffExponent=true,bOverride_DOF_BlurKernelSize=true,bOverride_DOF_BlurBloomKernelSize=true,bOverride_DOF_MaxNearBlurAmount=true,bOverride_DOF_MinBlurAmount=false,bOverride_DOF_MaxFarBlurAmount=true,bOverride_DOF_FocusType=true,bOverride_DOF_FocusInnerRadius=true,bOverride_DOF_FocusDistance=true,bOverride_DOF_FocusPosition=true,bOverride_DOF_InterpolationDuration=true,bOverride_DOF_BokehTexture=false,bOverride_MotionBlur_MaxVelocity=false,bOverride_MotionBlur_Amount=false,bOverride_MotionBlur_FullMotionBlur=false,bOverride_MotionBlur_CameraRotationThreshold=false,bOverride_MotionBlur_CameraTranslationThreshold=false,bOverride_MotionBlur_InterpolationDuration=false,bOverride_Scene_Desaturation=true,bOverride_Scene_Colorize=false,bOverride_Scene_TonemapperScale=false,bOverride_Scene_ImageGrainScale=false,bOverride_Scene_HighLights=true,bOverride_Scene_MidTones=true,bOverride_Scene_Shadows=true,bOverride_Scene_InterpolationDuration=true,bOverride_Scene_ColorGradingLUT=false,bOverride_RimShader_Color=true,bOverride_RimShader_InterpolationDuration=true,bOverride_MobileColorGrading=false,bEnableBloom=true,bEnableDOF=false,bEnableMotionBlur=true,bEnableSceneEffect=true,bAllowAmbientOcclusion=true,bOverrideRimShaderColor=false,TripwireSettings=(DOF_FocalDistance=1000,DOF_SharpRadius=800,DOF_FocalRadius=1200,DOF_MinBlurSize=0,DOF_MaxNearBlurSize=0,DOF_MaxFarBlurSize=0,DOF_ExpFalloff=1,DOF_FG_SharpRadius=75,DOF_FG_FocalRadius=150,DOF_FG_MinBlurSize=0,DOF_FG_MaxNearBlurSize=0,DOF_FG_ExpFalloff=1,Bloom_Intensity=1.05,Bloom_Width=4,Bloom_Exposure=1.25,Bloom_Threshold=0.6,Bloom_InterpolationDuration=1,NoiseIntensity=1,DOF_Strength=0,DOF_MaxFocalDistance=10000,MB_TileMaxEnabled=true,bForceGameplayDOF=false,bForceGameplayBloom=false,bForceGameplayImageGrain=false,bForceGameplayTranslucencyTint=false,bEnableScreenSpaceReflections=true,bBlurEnabled=false,BlurStrength=0),LegacySettings=(Bloom_Scale=1,Bloom_Threshold=1,Bloom_InterpolationDuration=1,DOF_BlurBloomKernelSize=16,DOF_FalloffExponent=4,DOF_BlurKernelSize=16,DOF_MaxNearBlurAmount=1,DOF_MinBlurAmount=0,DOF_MaxFarBlurAmount=1,DOF_FocusType=EFocusType.FOCUS_Distance,DOF_FocusInnerRadius=2000,DOF_FocusDistance=0,DOF_FocusPosition=(X=0,Y=0,Z=0),DOF_InterpolationDuration=1,DOF_BokehTexture=none,MotionBlur_MaxVelocity=1,MotionBlur_Amount=0.5,MotionBlur_FullMotionBlur=true,MotionBlur_CameraRotationThreshold=45,MotionBlur_CameraTranslationThreshold=10000,MotionBlur_InterpolationDuration=1,RimShader_Color=(R=0.47044,G=0.585973,B=0.827726,A=1),RimShader_InterpolationDuration=1,Scene_ImageGrainScale=0,MobileColorGrading=(TransitionTime=1,Blend=0,Desaturation=0,HighLights=(R=0.7,G=0.7,B=0.7,A=1),MidTones=(R=0,G=0,B=0,A=1),Shadows=(R=0,G=0,B=0,A=1)),MobilePostProcess=(bOverride_Mobile_BlurAmount=false,bOverride_Mobile_TransitionTime=false,bOverride_Mobile_Bloom_Scale=false,bOverride_Mobile_Bloom_Threshold=false,bOverride_Mobile_Bloom_Tint=false,bOverride_Mobile_DOF_Distance=false,bOverride_Mobile_DOF_MinRange=false,bOverride_Mobile_DOF_MaxRange=false,bOverride_Mobile_DOF_FarBlurFactor=false,Mobile_BlurAmount=16,Mobile_TransitionTime=1,Mobile_Bloom_Scale=0.5,Mobile_Bloom_Threshold=0.75,Mobile_Bloom_Tint=(R=1,G=1,B=1,A=1),Mobile_DOF_Distance=1500,Mobile_DOF_MinRange=600,Mobile_DOF_MaxRange=1200,Mobile_DOF_FarBlurFactor=1)),Bloom_Tint=(B=255,G=255,R=255,A=0),Bloom_ScreenBlendThreshold=10,Scene_Desaturation=0,Scene_Colorize=(X=1,Y=1,Z=1),Scene_TonemapperScale=1,Scene_HighLights=(X=1,Y=1,Z=1),Scene_MidTones=(X=1,Y=1,Z=1),Scene_Shadows=(X=0,Y=0,Z=0),Scene_InterpolationDuration=0,ColorGrading_LookupTable=none,ColorGradingLUT=(LUTTextures=none,LUTWeights=none)),LastVolumeUsed=none,BlendStartTime=0,LastBlendTime=0)
    LevelPPInfo=(LastSettings=(bOverride_EnableBloom=true,bOverride_EnableDOF=true,bOverride_EnableMotionBlur=true,bOverride_EnableSceneEffect=true,bOverride_AllowAmbientOcclusion=true,bOverride_OverrideRimShaderColor=true,bOverride_Bloom_Scale=true,bOverride_Bloom_Threshold=true,bOverride_Bloom_Tint=true,bOverride_Bloom_ScreenBlendThreshold=true,bOverride_Bloom_InterpolationDuration=true,bOverride_DOF_FalloffExponent=true,bOverride_DOF_BlurKernelSize=true,bOverride_DOF_BlurBloomKernelSize=true,bOverride_DOF_MaxNearBlurAmount=true,bOverride_DOF_MinBlurAmount=false,bOverride_DOF_MaxFarBlurAmount=true,bOverride_DOF_FocusType=true,bOverride_DOF_FocusInnerRadius=true,bOverride_DOF_FocusDistance=true,bOverride_DOF_FocusPosition=true,bOverride_DOF_InterpolationDuration=true,bOverride_DOF_BokehTexture=false,bOverride_MotionBlur_MaxVelocity=false,bOverride_MotionBlur_Amount=false,bOverride_MotionBlur_FullMotionBlur=false,bOverride_MotionBlur_CameraRotationThreshold=false,bOverride_MotionBlur_CameraTranslationThreshold=false,bOverride_MotionBlur_InterpolationDuration=false,bOverride_Scene_Desaturation=true,bOverride_Scene_Colorize=false,bOverride_Scene_TonemapperScale=false,bOverride_Scene_ImageGrainScale=false,bOverride_Scene_HighLights=true,bOverride_Scene_MidTones=true,bOverride_Scene_Shadows=true,bOverride_Scene_InterpolationDuration=true,bOverride_Scene_ColorGradingLUT=false,bOverride_RimShader_Color=true,bOverride_RimShader_InterpolationDuration=true,bOverride_MobileColorGrading=false,bEnableBloom=true,bEnableDOF=false,bEnableMotionBlur=true,bEnableSceneEffect=true,bAllowAmbientOcclusion=true,bOverrideRimShaderColor=false,TripwireSettings=(DOF_FocalDistance=1000,DOF_SharpRadius=800,DOF_FocalRadius=1200,DOF_MinBlurSize=0,DOF_MaxNearBlurSize=0,DOF_MaxFarBlurSize=0,DOF_ExpFalloff=1,DOF_FG_SharpRadius=75,DOF_FG_FocalRadius=150,DOF_FG_MinBlurSize=0,DOF_FG_MaxNearBlurSize=0,DOF_FG_ExpFalloff=1,Bloom_Intensity=1.05,Bloom_Width=4,Bloom_Exposure=1.25,Bloom_Threshold=0.6,Bloom_InterpolationDuration=1,NoiseIntensity=1,DOF_Strength=0,DOF_MaxFocalDistance=10000,MB_TileMaxEnabled=true,bForceGameplayDOF=false,bForceGameplayBloom=false,bForceGameplayImageGrain=false,bForceGameplayTranslucencyTint=false,bEnableScreenSpaceReflections=true,bBlurEnabled=false,BlurStrength=0),LegacySettings=(Bloom_Scale=1,Bloom_Threshold=1,Bloom_InterpolationDuration=1,DOF_BlurBloomKernelSize=16,DOF_FalloffExponent=4,DOF_BlurKernelSize=16,DOF_MaxNearBlurAmount=1,DOF_MinBlurAmount=0,DOF_MaxFarBlurAmount=1,DOF_FocusType=EFocusType.FOCUS_Distance,DOF_FocusInnerRadius=2000,DOF_FocusDistance=0,DOF_FocusPosition=(X=0,Y=0,Z=0),DOF_InterpolationDuration=1,DOF_BokehTexture=none,MotionBlur_MaxVelocity=1,MotionBlur_Amount=0.5,MotionBlur_FullMotionBlur=true,MotionBlur_CameraRotationThreshold=45,MotionBlur_CameraTranslationThreshold=10000,MotionBlur_InterpolationDuration=1,RimShader_Color=(R=0.47044,G=0.585973,B=0.827726,A=1),RimShader_InterpolationDuration=1,Scene_ImageGrainScale=0,MobileColorGrading=(TransitionTime=1,Blend=0,Desaturation=0,HighLights=(R=0.7,G=0.7,B=0.7,A=1),MidTones=(R=0,G=0,B=0,A=1),Shadows=(R=0,G=0,B=0,A=1)),MobilePostProcess=(bOverride_Mobile_BlurAmount=false,bOverride_Mobile_TransitionTime=false,bOverride_Mobile_Bloom_Scale=false,bOverride_Mobile_Bloom_Threshold=false,bOverride_Mobile_Bloom_Tint=false,bOverride_Mobile_DOF_Distance=false,bOverride_Mobile_DOF_MinRange=false,bOverride_Mobile_DOF_MaxRange=false,bOverride_Mobile_DOF_FarBlurFactor=false,Mobile_BlurAmount=16,Mobile_TransitionTime=1,Mobile_Bloom_Scale=0.5,Mobile_Bloom_Threshold=0.75,Mobile_Bloom_Tint=(R=1,G=1,B=1,A=1),Mobile_DOF_Distance=1500,Mobile_DOF_MinRange=600,Mobile_DOF_MaxRange=1200,Mobile_DOF_FarBlurFactor=1)),Bloom_Tint=(B=255,G=255,R=255,A=0),Bloom_ScreenBlendThreshold=10,Scene_Desaturation=0,Scene_Colorize=(X=1,Y=1,Z=1),Scene_TonemapperScale=1,Scene_HighLights=(X=1,Y=1,Z=1),Scene_MidTones=(X=1,Y=1,Z=1),Scene_Shadows=(X=0,Y=0,Z=0),Scene_InterpolationDuration=0,ColorGrading_LookupTable=none,ColorGradingLUT=(LUTTextures=none,LUTWeights=none)),LastVolumeUsed=none,BlendStartTime=0,LastBlendTime=0)
    AspectRatioAxisConstraint=EAspectRatioAxisConstraint.AspectRatio_MaintainXFOV
    ServerAuthTimeout=10
    MaxServerAuthRetryCount=3
}