/*******************************************************************************
 * EmitterPool generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class EmitterPool extends Actor
    transient
    native
    config(Game)
    notplaceable
    hidecategories(Navigation);

struct native EmitterBaseInfo
{
    var export editinline ParticleSystemComponent PSC;
    var Actor Base;
    var Vector RelativeLocation;
    var Rotator RelativeRotation;
    var bool bInheritBaseScale;

    structdefaultproperties
    {
        PSC=none
        Base=none
        RelativeLocation=(X=0,Y=0,Z=0)
        RelativeRotation=(Pitch=0,Yaw=0,Roll=0)
        bInheritBaseScale=false
    }
};

var protected export editinline ParticleSystemComponent PSCTemplate;
var const export editinline transient array<export editinline ParticleSystemComponent> PoolComponents;
var export editinline transient array<export editinline ParticleSystemComponent> ActiveComponents;
var export editinline transient ParticleSystemComponent FlexSurrogateComponent;
var int MaxActiveEffects;
var globalconfig bool bLogPoolOverflow;
var globalconfig bool bLogPoolOverflowList;
var transient array<EmitterBaseInfo> RelativePSCs;
var float SMC_MIC_ReductionTime;
var transient float SMC_MIC_CurrentReductionTime;
var int IdealStaticMeshComponents;
var int IdealMaterialInstanceConstants;
var private const export editinline transient array<export editinline StaticMeshComponent> FreeSMComponents;
var private const transient array<MaterialInstanceConstant> FreeMatInstConsts;

// Export UEmitterPool::execOnParticleSystemFinished(FFrame&, void* const)
native function OnParticleSystemFinished(ParticleSystemComponent PSC);

// Export UEmitterPool::execClearPoolComponents(FFrame&, void* const)
native final function ClearPoolComponents(optional bool bClearActive)
{
    bClearActive = false;            
}

// Export UEmitterPool::execReturnToPool(FFrame&, void* const)
protected native final function ReturnToPool(ParticleSystemComponent PSC);

// Export UEmitterPool::execFreeStaticMeshComponents(FFrame&, void* const)
protected native final function FreeStaticMeshComponents(ParticleSystemComponent PSC);

// Export UEmitterPool::execGetFreeStaticMeshComponent(FFrame&, void* const)
protected native final function StaticMeshComponent GetFreeStaticMeshComponent(optional bool bCreateNewObject)
{
    bCreateNewObject = true;            
}

// Export UEmitterPool::execFreeMaterialInstanceConstants(FFrame&, void* const)
protected native final function FreeMaterialInstanceConstants(StaticMeshComponent SMC);

// Export UEmitterPool::execGetFreeMatInstConsts(FFrame&, void* const)
protected native final function MaterialInstanceConstant GetFreeMatInstConsts(optional bool bCreateNewObject)
{
    bCreateNewObject = true;            
}

// Export UEmitterPool::execGetPooledComponent(FFrame&, void* const)
protected native final function ParticleSystemComponent GetPooledComponent(ParticleSystem EmitterTemplate, bool bAutoActivate);

// Export UEmitterPool::execSpawnEmitter(FFrame&, void* const)
native function ParticleSystemComponent SpawnEmitter(ParticleSystem EmitterTemplate, Vector SpawnLocation, optional Rotator SpawnRotation, optional Actor AttachToActor, optional Actor InInstigator, optional int MaxDLEPooledReuses, optional bool bInheritScaleFromBase);

// Export UEmitterPool::execSpawnEmitterMeshAttachment(FFrame&, void* const)
native function ParticleSystemComponent SpawnEmitterMeshAttachment(ParticleSystem EmitterTemplate, SkeletalMeshComponent Mesh, name AttachPointName, optional bool bAttachToSocket, optional Vector RelativeLoc, optional Rotator RelativeRot);

// Export UEmitterPool::execSpawnEmitterCustomLifetime(FFrame&, void* const)
native function ParticleSystemComponent SpawnEmitterCustomLifetime(ParticleSystem EmitterTemplate, optional bool bSkipAutoActivate);

simulated function PostBeginPlay()
{
    local ParticleSystem FlexParticleTemplate;
    local editinline DynamicLightEnvironmentComponent FlexLightEnvironment;
    local editinline ParticleSystemComponent SurrogateComponentTemplate;
    local LightingChannelContainer LightingChannels;

    SurrogateComponentTemplate = new Class'ParticleSystemComponent';
    SurrogateComponentTemplate.SecondsBeforeInactive = 2.147484E+09;
    SurrogateComponentTemplate.CastShadow = false;
    SurrogateComponentTemplate.bUseAsOccluder = true;
    SurrogateComponentTemplate.TranslucencySortPriority = 0;
    FlexParticleTemplate = new (SurrogateComponentTemplate) Class'ParticleSystem';
    FlexParticleTemplate.LODSettings.Add(1;
    FlexParticleTemplate.LODSettings[0].bLit = true;
    FlexParticleTemplate.LODDistances.Add(1;
    FlexParticleTemplate.LODDistances[0] = 0;
    FlexLightEnvironment = new (SurrogateComponentTemplate) SurrogateComponentTemplate.LightEnvironmentClass;
    FlexLightEnvironment.SetEnabled(false);
    SurrogateComponentTemplate.SetLightEnvironment(FlexLightEnvironment);
    LightingChannels.Indoor = true;
    LightingChannels.Outdoor = true;
    LightingChannels.bInitialized = true;
    SurrogateComponentTemplate.SetLightingChannels(LightingChannels);
    FlexSurrogateComponent = new (self) Class'ParticleSystemComponent' (SurrogateComponentTemplate);
    FlexSurrogateComponent.SetTemplate(new (FlexSurrogateComponent) Class'ParticleSystem' (FlexParticleTemplate));
    AttachComponent(FlexSurrogateComponent);
    super.PostBeginPlay();
}

defaultproperties
{
    begin object name=ParticleSystemComponent0 class=ParticleSystemComponent
        SecondsBeforeInactive=0
        ReplacementPrimitive=none
        AbsoluteTranslation=true
        AbsoluteRotation=true
    object end
    // Reference: ParticleSystemComponent'Default__EmitterPool.ParticleSystemComponent0'
    PSCTemplate=ParticleSystemComponent0
    SMC_MIC_ReductionTime=2.5
    IdealStaticMeshComponents=250
    IdealMaterialInstanceConstants=250
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    TickGroup=ETickingGroup.TG_DuringAsyncWork
}