/*******************************************************************************
 * ParticleModuleLocationSkelVertSurface generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ParticleModuleLocationSkelVertSurface extends ParticleModuleLocationBase
    native(Particle)
    editinlinenew
    hidecategories(Object,Object,Object);

enum ELocationSkelVertSurfaceSource
{
    VERTSURFACESOURCE_Vert,
    VERTSURFACESOURCE_Surface,
    VERTSURFACESOURCE_MAX
};

/**  
 *Whether the module uses Verts or Surfaces for locations.
 * 
 *       VERTSURFACESOURCE_Vert          - Use Verts as the source locations.
 *       VERTSURFACESOURCE_Surface       - Use Surfaces as the source locations.
 */
var(VertSurface) ParticleModuleLocationSkelVertSurface.ELocationSkelVertSurfaceSource SourceType;
/** An offset to apply to each vert/surface */
var(VertSurface) Vector UniversalOffset;
/** If TRUE, update the particle locations each frame with that of the vert/surface */
var(VertSurface) bool bUpdatePositionEachFrame;
/** If TRUE, rotate mesh emitter meshes to orient w/ the vert/surface */
var(VertSurface) bool bOrientMeshEmitters;
/** When TRUE use the RestrictToNormal and NormalTolerance values to check surface normals */
var(VertSurface) bool bEnforceNormalCheck;
/** The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game. */
var(VertSurface) name SkelMeshActorParamName;
/** The name of the skeletal mesh to use in the editor */
var(VertSurface) editoronly SkeletalMesh EditorSkelMesh;
/** This module will only spawn from verts or surfaces associated with the bones in this list */
var(VertSurface) array<name> ValidAssociatedBones;
/** Use this normal to restrict spawning locations */
var(VertSurface) Vector NormalToCompare;
/** Normal tolerance.  0 degrees means it must be an exact match, 180 degrees means it can be any angle. */
var(VertSurface) float NormalCheckToleranceDegrees;
var float NormalCheckTolerance;
/**  
 *Array of material indices that are valid materials to spawn from.
 *       If empty, any material will be considered valid
 */
var(VertSurface) array<int> ValidMaterialIndices;

defaultproperties
{
    bOrientMeshEmitters=true
    SkelMeshActorParamName=VertSurfaceActor
    bSpawnModule=true
    bUpdateModule=true
    bFinalUpdateModule=true
    bSupported3DDrawMode=true
}