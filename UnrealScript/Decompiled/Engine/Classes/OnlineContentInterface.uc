/*******************************************************************************
 * OnlineContentInterface generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
interface OnlineContentInterface extends Interface
    abstract;

delegate OnContentChange();

function AddContentChangeDelegate(delegate<OnContentChange> ContentDelegate, optional byte LocalUserNum)
{
    LocalUserNum = 255;
}

function ClearContentChangeDelegate(delegate<OnContentChange> ContentDelegate, optional byte LocalUserNum)
{
    LocalUserNum = 255;
}

delegate OnReadContentComplete(bool bWasSuccessful);

function AddReadContentComplete(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, delegate<OnReadContentComplete> ReadContentCompleteDelegate);

function ClearReadContentComplete(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, delegate<OnReadContentComplete> ReadContentCompleteDelegate);

function bool ReadContentList(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, optional int DeviceID)
{
    DeviceID = -1;
}

function ClearContentList(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType);

function OnlineSubsystem.EOnlineEnumerationReadState GetContentList(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, out array<OnlineContent> ContentList);

function bool ReadCrossTitleContentList(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, optional int TitleId, optional int DeviceID)
{
    TitleId = 0;
    DeviceID = -1;
}

function ClearCrossTitleContentList(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType);

function OnlineSubsystem.EOnlineEnumerationReadState GetCrossTitleContentList(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, out array<OnlineCrossTitleContent> ContentList);

delegate OnReadCrossTitleContentComplete(bool bWasSuccessful);

function AddReadCrossTitleContentCompleteDelegate(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, delegate<OnReadCrossTitleContentComplete> ReadContentCompleteDelegate);

function ClearReadCrossTitleContentCompleteDelegate(byte LocalUserNum, OnlineSubsystem.EOnlineContentType ContentType, delegate<OnReadCrossTitleContentComplete> ReadContentCompleteDelegate);

function bool ReadCrossTitleSaveGameData(byte LocalUserNum, int DeviceID, int TitleId, string FriendlyName, string Filename, string SaveFileName);

function bool GetCrossTitleSaveGameData(byte LocalUserNum, int DeviceID, int TitleId, string FriendlyName, string Filename, string SaveFileName, out byte bIsValid, out array<byte> SaveGameData);

delegate OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful, byte LocalUserNum, int DeviceID, int TitleId, string FriendlyName, string Filename, string SaveFileName);

function AddReadCrossTitleSaveGameDataComplete(byte LocalUserNum, delegate<OnReadCrossTitleSaveGameDataComplete> ReadSaveGameDataCompleteDelegate);

function ClearReadCrossTitleSaveGameDataComplete(byte LocalUserNum, delegate<OnReadCrossTitleSaveGameDataComplete> ReadSaveGameDataCompleteDelegate);

function bool ClearCrossTitleSaveGames(byte LocalUserNum);

function bool QueryAvailableDownloads(byte LocalUserNum, optional int CategoryMask)
{
    CategoryMask = -1;
}

delegate OnQueryAvailableDownloadsComplete(bool bWasSuccessful);

function AddQueryAvailableDownloadsComplete(byte LocalUserNum, delegate<OnQueryAvailableDownloadsComplete> QueryDownloadsDelegate);

function ClearQueryAvailableDownloadsComplete(byte LocalUserNum, delegate<OnQueryAvailableDownloadsComplete> QueryDownloadsDelegate);

function GetAvailableDownloadCounts(byte LocalUserNum, out int NewDownloads, out int TotalDownloads);

function bool ReadSaveGameData(byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName);

function bool GetSaveGameData(byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName, out byte bIsValid, out array<byte> SaveGameData);

delegate OnReadSaveGameDataComplete(bool bWasSuccessful, byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName);

function AddReadSaveGameDataComplete(byte LocalUserNum, delegate<OnReadSaveGameDataComplete> ReadSaveGameDataCompleteDelegate);

function ClearReadSaveGameDataComplete(byte LocalUserNum, delegate<OnReadSaveGameDataComplete> ReadSaveGameDataCompleteDelegate);

function bool WriteSaveGameData(byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName, const out array<byte> SaveGameData);

delegate OnWriteSaveGameDataComplete(bool bWasSuccessful, byte LocalUserNum, int DeviceID, string FriendlyName, string Filename, string SaveFileName);

function AddWriteSaveGameDataComplete(byte LocalUserNum, delegate<OnWriteSaveGameDataComplete> WriteSaveGameDataCompleteDelegate);

function ClearWriteSaveGameDataComplete(byte LocalUserNum, delegate<OnWriteSaveGameDataComplete> WriteSaveGameDataCompleteDelegate);

function bool DeleteSaveGame(byte LocalUserNum, int DeviceID, string FriendlyName, string Filename);

function bool ClearSaveGames(byte LocalUserNum);

function bool IsGameFullyInstalled()
{
    return true;
}

function bool ReadDownloadableContentList(byte LocalUserNum);

function ClearDownloadableContentList(byte LocalUserNum);

function OnlineSubsystem.EOnlineEnumerationReadState GetDownloadableContentList(byte LocalUserNum, out array<OnlineContent> ContentList);
