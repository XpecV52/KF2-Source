/*******************************************************************************
 * SoundNodeAttenuationAndGain generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SoundNodeAttenuationAndGain extends SoundNode
    native(Sound)
    editinlinenew
    hidecategories(Object,Object);

/** Enable attenuation via volume */
var(AttenuationAndGain) bool bAttenuate;
/** Enable the source to be positioned in 3D */
var(AttenuationAndGain) bool bSpatialize;
/** Enable attenuation via low pass filter */
var(LowPassFilter) bool bAttenuateWithLPF;
/** The volume at maximum distance in deciBels */
var(AttenuationAndGain) float dBAttenuationAtMax;
/** At what distance to start blending the sound from as omnidirectional */
var(AttenuationAndGain) float OmniRadius;
/** The type of volume versus distance algorithm to use */
var(AttenuationAndGain) SoundNodeAttenuation.SoundDistanceModel GainDistanceAlgorithm;
/** The type of volume versus distance algorithm to use */
var(AttenuationAndGain) SoundNodeAttenuation.SoundDistanceModel AttenuateDistanceAlgorithm;
/** Special attenuation modes */
var(AttenuationAndGain) SoundNodeAttenuation.ESoundDistanceCalc DistanceType;
/** Volume level at distance between 0 and RadiusMin */
var(AttenuationAndGain) float MinimalVolume;
/** The range at which the sound starts gaining */
var(AttenuationAndGain) float RadiusMin;
/** The range at which the sound starts attenuating. RadiusPeak must be greater than RadiusMin and lesser than RadiusMax */
var(AttenuationAndGain) float RadiusPeak;
/** The range at which the sound has attenuated completely */
var(AttenuationAndGain) float RadiusMax;
/** LPF level at distance between 0 and RadiusMin */
var(LowPassFilter) float LPFMinimal;
/** The range at which to start rising a low passfilter */
var(LowPassFilter) float LPFRadiusMin;
/** The range at which to start attenuating a low passfilter */
var(LowPassFilter) float LPFRadiusPeak;
/** The range at which to apply the maximum amount of low pass filter */
var(LowPassFilter) float LPFRadiusMax;

defaultproperties
{
    bAttenuate=true
    bSpatialize=true
    dBAttenuationAtMax=-60
    MinimalVolume=0.75
    RadiusMin=400
    RadiusPeak=2000
    RadiusMax=4000
    LPFMinimal=0.75
    LPFRadiusMin=400
    LPFRadiusPeak=2000
    LPFRadiusMax=4000
}