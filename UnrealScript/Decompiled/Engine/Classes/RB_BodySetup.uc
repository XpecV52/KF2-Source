/*******************************************************************************
 * RB_BodySetup generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class RB_BodySetup extends KMeshProps
    native(Physics)
    hidecategories(Object);

enum ESleepFamily
{
    SF_Normal,
    SF_Sensitive,
    SF_MAX
};

/** The set of values used in considering when put this body to sleep. */
var() RB_BodySetup.ESleepFamily SleepFamily;
/** Used in the PhysicsAsset case. Associates this Body with Bone in a skeletal mesh. */
var() editconst name BoneName;
/** No dynamics on this body - fixed relative to the world. */
var() bool bFixed;
/** This body will not collide with anything. */
var() bool bNoCollision;
/** When doing line checks against this PhysicsAsset, this body should return hits with zero-extent (ie line) checks. */
var() bool bBlockZeroExtent;
/** When doing line checks against this PhysicsAsset, this body should return hits with non-zero-extent (ie swept-box) checks. */
var() bool bBlockNonZeroExtent;
/**  
 *Turn on continuous collision detection for this body.
 *       This should avoid it passing through other objects when moving quickly.
 */
var() bool bEnableContinuousCollisionDetection;
/**  
 *If true (and bEnableFullAnimWeightBodies in SkelMeshComp is true), the physics of this bone will always be blended into the skeletal mesh, regardless of what PhysicsWeight of the SkelMeshComp is. 
 *       This is useful for bones that should always be physics, even when blending physics in and out for hit reactions (eg cloth or pony-tails).
 */
var() bool bAlwaysFullAnimWeight;
/**  
 *Should this BodySetup be considered for the bounding box of the PhysicsAsset (and hence SkeletalMeshComponent).
 *       There is a speed improvement from having less BodySetups processed each frame when updating the bounds.
 */
var() bool bConsiderForBounds;
/** Physical material to use for this body. Encodes information about density, friction etc. */
var() PhysicalMaterial PhysMaterial;
/**  
 *The mass of a body is calculated automatically based on the volume of the collision geometry and the density specified by the PhysicalMaterial.
 *       This parameters allows you to scale the auto-generated value for this specific body.
 */
var() float MassScale;
var native const array<Pointer> CollisionGeom;
var native const array<Vector> CollisionGeomScale3D;
/** Scales to pre-cache physics data for this collision at. */
var() const array<Vector> PreCachedPhysScale;
var native const KCachedConvexData PreCachedPhysData;
var const int PreCachedPhysDataVersion;

defaultproperties
{
    bBlockZeroExtent=true
    bBlockNonZeroExtent=true
    bConsiderForBounds=true
    MassScale=1
}