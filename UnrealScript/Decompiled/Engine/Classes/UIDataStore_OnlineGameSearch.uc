/*******************************************************************************
 * UIDataStore_OnlineGameSearch generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataStore_OnlineGameSearch extends UIDataStore_Remote
    abstract
    transient
    native(UIPrivate)
    config(Engine)
    hidecategories(Object,UIRoot);

struct native GameSearchCfg
{
    var class<OnlineGameSearch> GameSearchClass;
    var class<OnlineGameSettings> DefaultGameSettingsClass;
    var class<UIDataProvider_Settings> SearchResultsProviderClass;
    var UIDataProvider_Settings DesiredSettingsProvider;
    var OnlineGameSearch Search;
    var name SearchName;

    structdefaultproperties
    {
        GameSearchClass=none
        DefaultGameSettingsClass=none
        SearchResultsProviderClass=none
        DesiredSettingsProvider=none
        Search=none
        SearchName=None
    }
};

var const name SearchResultsName;
var OnlineSubsystem OnlineSub;
var OnlineGameInterface GameInterface;
var const array<GameSearchCfg> GameSearchCfgList;
var int SelectedIndex;
var int ActiveSearchIndex;

event Init()
{
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        GameInterface = OnlineSub.GameInterface;
        if((Class'WorldInfo'.static.IsConsoleBuild() || Class'WorldInfo'.static.IsEOSBuild()) && !Class'WorldInfo'.static.IsE3Build())
        {
            LogInternal("AddFindOnlineGamesCompleteDelegate(OnSearchComplete)");
            Class'GameEngine'.static.GetPlayfabInterface().AddFindOnlineGamesCompleteDelegate(OnSearchComplete);            
        }
        else
        {
            if(NotEqual_InterfaceInterface(GameInterface, (none)))
            {
                GameInterface.AddFindOnlineGamesCompleteDelegate(OnSearchComplete);
            }
        }
    }
}

function bool InvalidateCurrentSearchResults()
{
    local OnlineGameSearch ActiveSearch;
    local bool bResult;

    ActiveSearch = GetActiveGameSearch();
    if(ActiveSearch != none)
    {
        if(GameInterface.FreeSearchResults(ActiveSearch))
        {
            RefreshSubscribers(SearchResultsName, true, GameSearchCfgList[SelectedIndex].DesiredSettingsProvider);
            bResult = true;
        }
    }
    return bResult;
}

event bool SubmitGameSearch(byte ControllerIndex, optional bool bInvalidateExistingSearchResults)
{
    bInvalidateExistingSearchResults = true;
    if(OnlineSub != none)
    {
        if(NotEqual_InterfaceInterface(GameInterface, (none)))
        {
            if(bInvalidateExistingSearchResults || ActiveSearchIndex == SelectedIndex)
            {
                InvalidateCurrentSearchResults();
            }
            if((ActiveSearchIndex == -1) || !GameSearchCfgList[ActiveSearchIndex].Search.bIsSearchInProgress)
            {
                ActiveSearchIndex = SelectedIndex;
            }
            if(OverrideQuerySubmission(ControllerIndex, GameSearchCfgList[ActiveSearchIndex].Search))
            {
                return true;
            }
            InvalidateCurrentSearchResults();
            if(Class'WorldInfo'.static.IsConsoleBuild() && !Class'WorldInfo'.static.IsE3Build())
            {
                LogInternal("GetPlayfabInterface().FindOnlineGames( GameSearchCfgList[ActiveSearchIndex].Search )");
                return Class'GameEngine'.static.GetPlayfabInterface().FindOnlineGames(GameSearchCfgList[ActiveSearchIndex].Search);                
            }
            else
            {
                return GameInterface.FindOnlineGames(ControllerIndex, GameSearchCfgList[ActiveSearchIndex].Search);
            }            
        }
        else
        {
            WarnInternal("OnlineSubsystem does not support the game interface. Can't search for games");
        }        
    }
    else
    {
        WarnInternal("No OnlineSubsystem present. Can't search for games");
    }
    return false;
}

protected function bool OverrideQuerySubmission(byte ControllerId, OnlineGameSearch Search)
{
    return false;
}

function OnSearchComplete(bool bWasSuccessful)
{
    if(bWasSuccessful == true)
    {
        RefreshSubscribers(SearchResultsName, false, GameSearchCfgList[ActiveSearchIndex].DesiredSettingsProvider);        
    }
    else
    {
        LogInternal("Failed to search for online games");
    }
}

event bool GetSearchResultFromIndex(int ListIndex, out OnlineGameSearchResult Result)
{
    if((ListIndex >= 0) && ListIndex < GameSearchCfgList[SelectedIndex].Search.Results.Length)
    {
        Result = GameSearchCfgList[SelectedIndex].Search.Results[ListIndex];
        return true;
    }
    return false;
}

event bool ShowHostGamercard(byte ControllerIndex, int ListIndex)
{
    local OnlinePlayerInterfaceEx PlayerExt;
    local OnlineGameSettings Game;

    if((ListIndex >= 0) && ListIndex < GameSearchCfgList[SelectedIndex].Search.Results.Length)
    {
        if(OnlineSub != none)
        {
            PlayerExt = OnlineSub.PlayerInterfaceEx;
            if(NotEqual_InterfaceInterface(PlayerExt, (none)))
            {
                Game = GameSearchCfgList[SelectedIndex].Search.Results[ListIndex].GameSettings;
                return PlayerExt.ShowGamerCardUI(ControllerIndex, Game.OwningPlayerId);                
            }
            else
            {
                WarnInternal("OnlineSubsystem does not support the extended player interface. Can't show gamercard");
            }            
        }
        else
        {
            WarnInternal("No OnlineSubsystem present. Can't show gamercard");
        }        
    }
    else
    {
        WarnInternal(("Invalid index (" $ string(ListIndex)) $ ") specified for online game to show the gamercard of");
    }
}

event OnlineGameSearch GetCurrentGameSearch()
{
    if((SelectedIndex >= 0) && SelectedIndex < GameSearchCfgList.Length)
    {
        return GameSearchCfgList[SelectedIndex].Search;
    }
    return none;
}

event OnlineGameSearch GetActiveGameSearch()
{
    if((ActiveSearchIndex >= 0) && ActiveSearchIndex < GameSearchCfgList.Length)
    {
        return GameSearchCfgList[ActiveSearchIndex].Search;
    }
    return none;
}

function int FindSearchConfigurationIndex(name SearchTag)
{
    local int Index;

    Index = 0;
    J0x0B:

    if(Index < GameSearchCfgList.Length)
    {
        if(GameSearchCfgList[Index].SearchName == SearchTag)
        {
            return Index;
        }
        ++ Index;
        goto J0x0B;
    }
    return -1;
}

event SetCurrentByIndex(int NewIndex, optional bool bInvalidateExistingSearchResults)
{
    bInvalidateExistingSearchResults = true;
    if((NewIndex >= 0) && NewIndex < GameSearchCfgList.Length)
    {
        SelectedIndex = NewIndex;
        if(!bInvalidateExistingSearchResults || !InvalidateCurrentSearchResults())
        {
            RefreshSubscribers(SearchResultsName, true, GameSearchCfgList[SelectedIndex].DesiredSettingsProvider);
        }        
    }
    else
    {
        LogInternal((("Invalid index (" $ string(NewIndex)) $ ") specified to SetCurrentByIndex() on ") $ string(self));
    }
}

event SetCurrentByName(name SearchName, optional bool bInvalidateExistingSearchResults)
{
    local int Index;

    bInvalidateExistingSearchResults = true;
    Index = FindSearchConfigurationIndex(SearchName);
    if(Index != -1)
    {
        SelectedIndex = Index;
        if(!bInvalidateExistingSearchResults || !InvalidateCurrentSearchResults())
        {
            RefreshSubscribers(SearchResultsName, true, GameSearchCfgList[SelectedIndex].DesiredSettingsProvider);
        }        
    }
    else
    {
        LogInternal((("Invalid name (" $ string(SearchName)) $ ") specified to SetCurrentByName() on ") $ string(self));
    }
}

event MoveToNext(optional bool bInvalidateExistingSearchResults)
{
    bInvalidateExistingSearchResults = true;
    SelectedIndex = Min(SelectedIndex + 1, GameSearchCfgList.Length - 1);
    if(!bInvalidateExistingSearchResults || !InvalidateCurrentSearchResults())
    {
        RefreshSubscribers(SearchResultsName, true, GameSearchCfgList[SelectedIndex].DesiredSettingsProvider);
    }
}

event MoveToPrevious(optional bool bInvalidateExistingSearchResults)
{
    bInvalidateExistingSearchResults = true;
    SelectedIndex = Max(SelectedIndex - 1, 0);
    if(!bInvalidateExistingSearchResults || !InvalidateCurrentSearchResults())
    {
        RefreshSubscribers(SearchResultsName, true, GameSearchCfgList[SelectedIndex].DesiredSettingsProvider);
    }
}

function ClearAllSearchResults()
{
    local int OriginalActiveIndex, GameTypeIndex;

    OriginalActiveIndex = ActiveSearchIndex;
    if(NotEqual_InterfaceInterface(GameInterface, (none)))
    {
        GameTypeIndex = 0;
        J0x3E:

        if(GameTypeIndex < GameSearchCfgList.Length)
        {
            ActiveSearchIndex = GameTypeIndex;
            if(!GameInterface.FreeSearchResults(GameSearchCfgList[GameTypeIndex].Search))
            {
                WarnInternal(((((string(Name) $ ".ClearAllSearchResults: Failed to free search results for") @ string(GameSearchCfgList[GameTypeIndex].SearchName)) @ "(") $ string(GameTypeIndex)) $ ") - search is still in progress");
            }
            ++ GameTypeIndex;
            goto J0x3E;
        }
    }
    ActiveSearchIndex = OriginalActiveIndex;
}

defaultproperties
{
    SearchResultsName=SearchResults
    ActiveSearchIndex=-1
    Tag=OnlineGameSearch
}