/*******************************************************************************
 * NxGenericForceFieldBrush generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NxGenericForceFieldBrush extends Volume
    native(ForceField)
    placeable
    hidecategories(Navigation,Object,Movement,Display);

enum FFB_ForceFieldCoordinates
{
    FFB_CARTESIAN,
    FFB_SPHERICAL,
    FFB_CYLINDRICAL,
    FFB_TOROIDAL,
    FFB_MAX
};

/** Channel id, used to identify which force field exclude volumes apply to this force field */
var() int ExcludeChannel;
/** Which types of object to apply this force field to */
var() RBCollisionChannelContainer CollideWithChannels;
/** enum indicating what collision filtering channel this force field should be in */
var() const PrimitiveComponent.ERBCollisionChannel RBChannel;
var() NxGenericForceFieldBrush.FFB_ForceFieldCoordinates Coordinates;
/** Constant force vector that is applied inside force volume */
var() Vector Constant;
/** Rows of matrix that defines force depending on position */
var() Vector PositionMultiplierX;
var() Vector PositionMultiplierY;
var() Vector PositionMultiplierZ;
/** Vector that defines force depending on position */
var() Vector PositionTarget;
/** Rows of matrix that defines force depending on velocity */
var() Vector VelocityMultiplierX;
var() Vector VelocityMultiplierY;
var() Vector VelocityMultiplierZ;
/** Vector that defines force depending on velocity */
var() Vector VelocityTarget;
/** Vector that scales random noise added to the force */
var() Vector Noise;
/** Linear falloff for vector in chosen coordinate system */
var() Vector FalloffLinear;
/** Quadratic falloff for vector in chosen coordinate system */
var() Vector FalloffQuadratic;
/** Radius of torus in case toroidal coordinate system is used */
var() float TorusRadius;
var native const transient Pointer ForceField;
var native const transient array<Pointer> ConvexMeshes;
var native const transient array<Pointer> ExclusionShapes;
var native const transient array<Pointer> ExclusionShapePoses;
var native const transient Pointer LinearKernel;

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    if(BrushComponent != none)
    {
        bProjTarget = BrushComponent.BlockZeroExtent;
    }
}

simulated function bool StopsProjectile(Projectile P)
{
    return false;
}

defaultproperties
{
    ExcludeChannel=1
    CollideWithChannels=(Default=true,Nothing=false,Pawn=true,Vehicle=true,Water=true,GameplayPhysics=true,EffectPhysics=true,Untitled1=true,Untitled2=true,Untitled3=true,Untitled4=false,Cloth=true,FluidDrain=true,SoftBody=true,FracturedMeshPart=false,BlockingVolume=false,DeadPawn=false,Clothing=false,ClothingCollision=false,Pickup=false,FlexAsset=false,CanBecomeDynamic=false,KnockedDownPawn=false,Visibility=false)
    RBChannel=ERBCollisionChannel.RBCC_Untitled1
    TorusRadius=1
    BrushColor=(B=100,G=255,R=100,A=255)
    bColored=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bDisableAllRigidBody=false
    object end
    // Reference: BrushComponent'Default__NxGenericForceFieldBrush.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bDisableAllRigidBody=false
    object end
    // Reference: BrushComponent'Default__NxGenericForceFieldBrush.BrushComponent0'
    Components(0)=BrushComponent0
    bStatic=false
    bProjTarget=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bDisableAllRigidBody=false
    object end
    // Reference: BrushComponent'Default__NxGenericForceFieldBrush.BrushComponent0'
    CollisionComponent=BrushComponent0
    SupportedEvents=none
}