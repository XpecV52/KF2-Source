/*******************************************************************************
 * CameraModifier generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CameraModifier extends Object
    native(Camera);

var protected bool bDisabled;
var bool bPendingDisable;
var protected bool bExclusive;
/** debug */
var(Debug) bool bDebug;
var Camera CameraOwner;
var protected byte Priority;
var protected float AlphaInTime;
var protected float AlphaOutTime;
var protected transient float Alpha;
var protected transient float TargetAlpha;

function Init();

// Export UCameraModifier::execModifyCamera(FFrame&, void* const)
native function bool ModifyCamera(Camera Camera, float DeltaTime, out TPOV OutPOV);

// Export UCameraModifier::execIsDisabled(FFrame&, void* const)
native function bool IsDisabled();

function bool AddCameraModifier(Camera Camera)
{
    local int BestIdx, ModifierIdx;
    local CameraModifier Modifier;

    ModifierIdx = 0;
    J0x0B:

    if(ModifierIdx < Camera.ModifierList.Length)
    {
        if(Camera.ModifierList[ModifierIdx] == self)
        {
            return false;
        }
        ++ ModifierIdx;
        goto J0x0B;
    }
    ModifierIdx = 0;
    J0x81:

    if(ModifierIdx < Camera.ModifierList.Length)
    {
        if(Camera.ModifierList[ModifierIdx].Class == Class)
        {
            LogInternal("AddCameraModifier found existing modifier in list, replacing with new one" @ string(self));
            Camera.ModifierList[ModifierIdx] = self;
            CameraOwner = Camera;
            return true;
        }
        ++ ModifierIdx;
        goto J0x81;
    }
    BestIdx = 0;
    ModifierIdx = 0;
    J0x1AF:

    if(ModifierIdx < Camera.ModifierList.Length)
    {
        Modifier = Camera.ModifierList[ModifierIdx];
        if(Modifier == none)
        {            
        }
        else
        {
            if(Priority <= Modifier.Priority)
            {
                if(bExclusive && Priority == Modifier.Priority)
                {
                    return false;
                }
                goto J0x2AD;
            }
            ++ BestIdx;
        }
        ++ ModifierIdx;
        goto J0x1AF;
    }
    J0x2AD:

    Camera.ModifierList.Insert(BestIdx, 1;
    Camera.ModifierList[BestIdx] = self;
    CameraOwner = Camera;
    if(bDebug)
    {
        LogInternal(("AddModifier" @ string(BestIdx)) @ string(self));
        ModifierIdx = 0;
        J0x34E:

        if(ModifierIdx < Camera.ModifierList.Length)
        {
            LogInternal((((string(Camera.ModifierList[ModifierIdx]) @ "Idx") @ string(ModifierIdx)) @ "Pri") @ string(Camera.ModifierList[ModifierIdx].Priority));
            ++ ModifierIdx;
            goto J0x34E;
        }
        LogInternal("****************");
    }
    return true;
}

function bool RemoveCameraModifier(Camera Camera)
{
    local int ModifierIdx;

    if(bDebug)
    {
        LogInternal(string(self) @ "RemoveModifier");
    }
    ModifierIdx = 0;
    J0x30:

    if(ModifierIdx < Camera.ModifierList.Length)
    {
        if(Camera.ModifierList[ModifierIdx] == self)
        {
            Camera.ModifierList.Remove(ModifierIdx, 1;
            return true;
        }
        ++ ModifierIdx;
        goto J0x30;
    }
    return false;
}

event DisableModifier(optional bool bImmediate)
{
    if(bDebug)
    {
        LogInternal((string(self) @ "DisableModifier") @ string(bImmediate));
    }
    if(bImmediate)
    {
        bDisabled = true;
        bPendingDisable = false;        
    }
    else
    {
        if(!bDisabled)
        {
            bPendingDisable = true;
        }
    }
}

function EnableModifier()
{
    if(bDebug)
    {
        LogInternal(string(self) @ "EnableModifier");
    }
    bDisabled = false;
    bPendingDisable = false;
}

function ToggleModifier()
{
    if(bDebug)
    {
        LogInternal(string(self) @ "ToggleModifier");
    }
    if(bDisabled)
    {
        EnableModifier();        
    }
    else
    {
        DisableModifier();
    }
}

simulated function bool ProcessViewRotation(Actor ViewTarget, float DeltaTime, out Rotator out_ViewRotation, out Rotator out_DeltaRot);

// Export UCameraModifier::execUpdateAlpha(FFrame&, void* const)
native function UpdateAlpha(Camera Camera, float DeltaTime);

defaultproperties
{
    Priority=127
}