/*******************************************************************************
 * UIDataProvider_PlayerAchievements generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataProvider_PlayerAchievements extends UIDataProvider_OnlinePlayerDataBase
    transient
    native(UIPrivate)
    config(Engine)
    hidecategories(Object,UIRoot);

var transient array<AchievementDetails> Achievements;

// Export UUIDataProvider_PlayerAchievements::execGetTotalGamerScore(FFrame&, void* const)
native final function int GetTotalGamerScore();

// Export UUIDataProvider_PlayerAchievements::execGetMaxTotalGamerScore(FFrame&, void* const)
native final function int GetMaxTotalGamerScore();

function PopulateAchievementIcons();

function string GetAchievementIconPathName(int AchievementId, optional bool bReturnLockedIcon);

function GetAchievementDetails(const int AchievementId, out AchievementDetails OutAchievementDetails)
{
    local int Index;

    Index = Achievements.Find('Id', AchievementId;
    if(Index != -1)
    {
        OutAchievementDetails = Achievements[Index];
    }
}

function OnPlayerAchievementsChanged(int TitleId)
{
    local OnlineSubsystem OnlineSub;
    local OnlineSubsystem.EOnlineEnumerationReadState Result;

    if(PlayerControllerId != -1)
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if(((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none))) && TitleId == 0)
        {
            Result = OnlineSub.PlayerInterface.GetAchievements(byte(PlayerControllerId), Achievements, TitleId);
            if(Result == 2)
            {
                PopulateAchievementIcons();
            }
        }
    }
}

function OnPlayerAchievementUnlocked(bool bWasSuccessful)
{
    if(bWasSuccessful)
    {
        UpdateAchievements();
    }
}

event OnRegister(LocalPlayer InPlayer)
{
    local OnlineSubsystem OnlineSub;

    super.OnRegister(InPlayer);
    if(PlayerControllerId != -1)
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if(OnlineSub != none)
        {
            if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
            {
                OnlineSub.PlayerInterface.AddLoginChangeDelegate(OnLoginChange);
                OnlineSub.PlayerInterface.AddReadAchievementsCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementsChanged);
                OnlineSub.PlayerInterface.AddUnlockAchievementCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementUnlocked);
                UpdateAchievements();
            }
        }
    }
}

event OnUnregister()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            OnlineSub.PlayerInterface.ClearLoginChangeDelegate(OnLoginChange);
        }
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            OnlineSub.PlayerInterface.ClearUnlockAchievementCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementUnlocked);
            OnlineSub.PlayerInterface.ClearReadAchievementsCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementsChanged);
        }
    }
    Achievements.Length = 0;
    super.OnUnregister();
}

function OnLoginChange(byte LocalUserNum)
{
    if(LocalUserNum == PlayerControllerId)
    {
        UpdateAchievements();
    }
}

function UpdateAchievements()
{
    local OnlineSubsystem OnlineSub;

    if(PlayerControllerId != -1)
    {
        Achievements.Length = 0;
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if((((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none))) && OnlineSub.PlayerInterface.GetLoginStatus(byte(PlayerControllerId)) > 0) && !OnlineSub.PlayerInterface.IsGuestLogin(byte(PlayerControllerId)))
        {
            OnlineSub.PlayerInterface.ReadAchievements(byte(PlayerControllerId));
        }
    }
}
