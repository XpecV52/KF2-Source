/*******************************************************************************
 * NavMeshObstacle generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NavMeshObstacle extends Actor
    native(AI)
    placeable
    hidecategories(Navigation)
    implements(Interface_NavMeshPathObstacle);

struct CheckpointRecord
{
    var bool bEnabled;

    structdefaultproperties
    {
        bEnabled=false
    }
};

var private native const noexport Pointer VfTable_IInterface_NavMeshPathObstacle;
var() bool bEnabled;
var() bool bPreserveInternalGeo;

event bool GetObstacleBoudingShape(out array<Vector> Shape)
{
    local float Scale;
    local Vector Offset;

    Scale = 200 * DrawScale;
    Offset.X = Scale * DrawScale3D.X;
    Offset.Y = Scale * DrawScale3D.Y;
    Shape.AddItem(Location + (Offset >> Rotation);
    Offset.X = -Scale * DrawScale3D.X;
    Offset.Y = Scale * DrawScale3D.Y;
    Shape.AddItem(Location + (Offset >> Rotation);
    Offset.X = -Scale * DrawScale3D.X;
    Offset.Y = -Scale * DrawScale3D.Y;
    Shape.AddItem(Location + (Offset >> Rotation);
    Offset.X = Scale * DrawScale3D.X;
    Offset.Y = -Scale * DrawScale3D.Y;
    Shape.AddItem(Location + (Offset >> Rotation);
    return true;
}

// Export UNavMeshObstacle::execRegisterObstacle(FFrame&, void* const)
native function RegisterObstacle();

// Export UNavMeshObstacle::execUnRegisterObstacle(FFrame&, void* const)
native function UnRegisterObstacle();

simulated function PostBeginPlay()
{
    super.PostBeginPlay();
    if(bEnabled)
    {
        RegisterObstacle();
    }
}

simulated function OnToggle(SeqAct_Toggle Action)
{
    if(Action.InputLinks[0].bHasImpulse)
    {
        bEnabled = true;        
    }
    else
    {
        if(Action.InputLinks[1].bHasImpulse)
        {
            bEnabled = false;            
        }
        else
        {
            if(Action.InputLinks[2].bHasImpulse)
            {
                bEnabled = !bEnabled;
            }
        }
    }
    SetEnabled(bEnabled);
}

function SetEnabled(bool bInEnabled)
{
    if(bInEnabled)
    {
        RegisterObstacle();        
    }
    else
    {
        UnRegisterObstacle();
    }
}

function CreateCheckpointRecord(out CheckpointRecord Record)
{
    Record.bEnabled = bEnabled;
}

function ApplyCheckpointRecord(const out CheckpointRecord Record)
{
    SetEnabled(Record.bEnabled);
}

defaultproperties
{
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.S_Keypoint'
        SpriteCategoryName=Navigation
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__NavMeshObstacle.Sprite'
    Components(0)=Sprite
    begin object name=DrawBox0 class=DrawBoxComponent
        BoxColor=(B=255,G=70,R=64,A=255)
        ReplacementPrimitive=none
    object end
    // Reference: DrawBoxComponent'Default__NavMeshObstacle.DrawBox0'
    Components(1)=DrawBox0
    CollisionType=ECollisionType.COLLIDE_CustomDefault
}