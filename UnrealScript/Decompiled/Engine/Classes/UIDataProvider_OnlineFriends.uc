/*******************************************************************************
 * UIDataProvider_OnlineFriends generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataProvider_OnlineFriends extends UIDataProvider_OnlinePlayerDataBase
    transient
    native(UIPrivate)
    config(Engine)
    hidecategories(Object,UIRoot);

var array<OnlineFriend> FriendsList;
var const localized string NickNameCol;
var const localized string PresenceInfoCol;
var const localized string FriendStateCol;
var const localized string bIsOnlineCol;
var const localized string bIsPlayingCol;
var const localized string bIsPlayingThisGameCol;
var const localized string bIsJoinableCol;
var const localized string bHasVoiceSupportCol;
var const localized string bHaveInvitedCol;
var const localized string bHasInvitedYouCol;
var const localized string OfflineText;
var const localized string OnlineText;
var const localized string AwayText;
var const localized string BusyText;

event OnRegister(LocalPlayer InPlayer)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    super.OnRegister(InPlayer);
    if((PlayerControllerId != -1) && !Class'WorldInfo'.static.IsConsoleBuild(9))
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if(OnlineSub != none)
        {
            PlayerInterface = OnlineSub.PlayerInterface;
            if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
            {
                PlayerInterface.AddLoginChangeDelegate(OnLoginChange);
                PlayerInterface.AddReadFriendsCompleteDelegate(byte(PlayerControllerId), OnFriendsReadComplete);
                if((PlayerInterface.GetLoginStatus(byte(PlayerControllerId)) > 0) && !PlayerInterface.IsGuestLogin(byte(PlayerControllerId)))
                {
                    PlayerInterface.ReadFriendsList(byte(PlayerControllerId));
                }
            }
        }
    }
}

event OnUnregister()
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        PlayerInterface = OnlineSub.PlayerInterface;
        if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
        {
            PlayerInterface.ClearReadFriendsCompleteDelegate(byte(PlayerControllerId), OnFriendsReadComplete);
            PlayerInterface.ClearLoginChangeDelegate(OnLoginChange);
        }
    }
    super.OnUnregister();
}

function OnFriendsReadComplete(bool bWasSuccessful)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    if(bWasSuccessful == true)
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if(OnlineSub != none)
        {
            PlayerInterface = OnlineSub.PlayerInterface;
            if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
            {
                PlayerInterface.GetFriendsList(byte(PlayerControllerId), FriendsList);
            }
        }        
    }
    else
    {
        LogInternal("Failed to read friends list", 'DevOnline');
    }
}

function OnLoginChange(byte LocalUserNum)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    FriendsList.Length = 0;
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        if(!Class'WorldInfo'.static.IsConsoleBuild(9))
        {
            PlayerInterface = OnlineSub.PlayerInterface;
            if((NotEqual_InterfaceInterface(PlayerInterface, (none)) && PlayerInterface.GetLoginStatus(byte(PlayerControllerId)) > 0) && !PlayerInterface.IsGuestLogin(byte(PlayerControllerId)))
            {
                PlayerInterface.ReadFriendsList(byte(PlayerControllerId));
            }
        }
    }
}

event RefreshFriendsList()
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    if(PlayerControllerId != -1)
    {
        OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
        if(OnlineSub != none)
        {
            if(!Class'WorldInfo'.static.IsConsoleBuild(9))
            {
                PlayerInterface = OnlineSub.PlayerInterface;
                if((NotEqual_InterfaceInterface(PlayerInterface, (none)) && PlayerInterface.GetLoginStatus(byte(PlayerControllerId)) > 0) && !PlayerInterface.IsGuestLogin(byte(PlayerControllerId)))
                {
                    PlayerInterface.ReadFriendsList(byte(PlayerControllerId));
                    LogInternal("Refreshing friends list", 'DevOnline');
                }
            }
        }
    }
}

defaultproperties
{
    NickNameCol="Name"
    PresenceInfoCol="Online Status"
    bIsOnlineCol="Is Online"
    bIsPlayingCol="Is Playing"
    bIsPlayingThisGameCol="Is Playing This Game"
    bIsJoinableCol="Is Joinable"
    bHasVoiceSupportCol="Has Voice Support"
    OfflineText="Offline"
    OnlineText="Online"
    AwayText="Away"
    BusyText="Busy"
}