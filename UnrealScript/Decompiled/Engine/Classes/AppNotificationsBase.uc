/*******************************************************************************
 * AppNotificationsBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AppNotificationsBase extends PlatformInterfaceBase
    transient
    native(PlatformInterface);

struct native NotificationMessageInfo
{
    var string Key;
    var string Value;

    structdefaultproperties
    {
        Key=""
        Value=""
    }
};

struct native NotificationInfo
{
    var bool bIsLocal;
    var string MessageBody;
    var int BadgeNumber;
    var array<NotificationMessageInfo> MessageInfo;

    structdefaultproperties
    {
        bIsLocal=false
        MessageBody=""
        BadgeNumber=0
        MessageInfo=none
    }
};

struct native LaunchNotificationInfo
{
    var bool bWasLaunchedViaNotification;
    var NotificationInfo Notification;

    structdefaultproperties
    {
        bWasLaunchedViaNotification=false
        Notification=(bIsLocal=false,MessageBody="",BadgeNumber=0,MessageInfo=none)
    }
};

var const LaunchNotificationInfo AppLaunchNotification;
var delegate<OnReceivedLocalNotification> __OnReceivedLocalNotification__Delegate;
var delegate<OnReceivedRemoteNotification> __OnReceivedRemoteNotification__Delegate;

// Export UAppNotificationsBase::execInit(FFrame&, void* const)
native event Init();

function bool WasLaunchedViaNotification()
{
    return AppLaunchNotification.bWasLaunchedViaNotification;
}

// Export UAppNotificationsBase::execScheduleLocalNotification(FFrame&, void* const)
native function ScheduleLocalNotification(const out NotificationInfo Notification, int StartOffsetSeconds);

// Export UAppNotificationsBase::execCancelAllScheduledLocalNotifications(FFrame&, void* const)
native function CancelAllScheduledLocalNotifications();

delegate OnReceivedLocalNotification(const out NotificationInfo Notification, bool bWasAppActive);

delegate OnReceivedRemoteNotification(const out NotificationInfo Notification, bool bWasAppActive);

function DebugLogNotification(const out NotificationInfo Notification)
{
    local int Idx;

    LogInternal(((((("Notification:" @ "bIsLocal=") $ string(Notification.bIsLocal)) @ "BadgeNumber=") $ string(Notification.BadgeNumber)) @ "MessageBody=") $ Notification.MessageBody);
    Idx = 0;
    J0xA9:

    if(Idx < Notification.MessageInfo.Length)
    {
        LogInternal(((("Notification:" @ "key=") $ Notification.MessageInfo[Idx].Key) @ "val=") $ Notification.MessageInfo[Idx].Value);
        ++ Idx;
        goto J0xA9;
    }
}
