/*******************************************************************************
 * KActorFromStatic generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KActorFromStatic extends KActor
    transient
    native(Physics)
    notplaceable;

var Actor MyStaticMeshActor;
var float MaxImpulseSpeed;

// Export UKActorFromStatic::execDisablePrecomputedLighting(FFrame&, void* const)
native final function DisablePrecomputedLighting();

event OnSleepRBPhysics()
{
    MakeStatic();
    Destroy();
    return;
    BecomeStatic();
}

event OnWakeRBPhysics()
{
    ClearTimer('BecomeStatic');
}

function BecomeStatic()
{
    if(!WorldInfo.bDropDetail && (WorldInfo.TimeSeconds - LastRenderTime) < 0.15)
    {
        SetTimer(1, false, 'BecomeStatic');
        return;
    }
    if(StaticMeshComponent.RigidBodyIsAwake())
    {
        return;
    }
    MakeStatic();
    Destroy();
}

// Export UKActorFromStatic::execMakeStatic(FFrame&, void* const)
native static function MakeStatic();

// Export UKActorFromStatic::execMakeDynamic(FFrame&, void* const)
native static function KActorFromStatic MakeDynamic(StaticMeshComponent MovableMesh);

event ApplyImpulse(Vector ImpulseDir, float ImpulseMag, Vector HitLocation, optional TraceHitInfo HitInfo, optional class<DamageType> DamageType)
{
    local float BodyMass;

    BodyMass = StaticMeshComponent.BodyInstance.GetBodyMass();
    if((BodyMass > 0) && (DamageType == none) || !DamageType.default.bRadialDamageVelChange)
    {
        if(BodyMass < 1)
        {
            BodyMass = Sqrt(BodyMass);
        }
        ImpulseMag = FMin(ImpulseMag / BodyMass, MaxImpulseSpeed);
    }
    CollisionComponent.AddImpulse(Normal(ImpulseDir) * ImpulseMag, HitLocation,, true);
    LifeSpan = default.LifeSpan;
}

function ReceiveImpulse(Pawn Other, Vector HitLocation, Vector HitNormal)
{
    local Vector HitDir;
    local float ImpulseMag;

    HitDir = Location - HitLocation;
    HitDir.Z = FMax(HitDir.Z, 0);
    HitDir = Normal(HitDir);
    ImpulseMag = FMax(0.5 * Other.GroundSpeed, (Other.Velocity - Velocity) Dot HitDir);
    ImpulseMag *= ((Other.Mass / 75) * 5);
    ApplyImpulse(HitDir, ImpulseMag, Location);
}

event Bump(Actor Other, PrimitiveComponent OtherComp, Vector HitNormal)
{
    ReceiveImpulse(Pawn(Other), Other.Location, HitNormal);
}

event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    if(Pawn(Other) != none)
    {
        ReceiveImpulse(Pawn(Other), HitLocation, HitNormal);
    }
}

simulated function TakeRadiusDamage(Controller InstigatedBy, float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, Vector HurtOrigin, bool bFullDamage, Actor DamageCauser, optional float DamageFalloffExponent)
{
    local int Idx;
    local SeqEvent_TakeDamage DmgEvt;

    DamageFalloffExponent = 1;
    Idx = 0;
    J0x14:

    if(Idx < GeneratedEvents.Length)
    {
        DmgEvt = SeqEvent_TakeDamage(GeneratedEvents[Idx]);
        if(DmgEvt != none)
        {
            DmgEvt.HandleDamage(self, InstigatedBy, DamageType, int(BaseDamage));
        }
        ++ Idx;
        goto J0x14;
    }
    if((bDamageAppliesImpulse && DamageType.default.RadialDamageImpulse > float(0)) && Role == ROLE_Authority)
    {
        ApplyImpulse(Location - HurtOrigin, DamageType.default.RadialDamageImpulse, Location,, DamageType);
    }
}

simulated function Reset();

simulated event Destroyed()
{
    super.Destroyed();
    if(bRigidBodyWasAwake)
    {
        LogInternal((string(self) @ "destroyed for not going to sleep. Lost static actor") @ string(MyStaticMeshActor));
    }
}

auto state Initializing
{
    event Tick(float DeltaTime)
    {
        DisablePrecomputedLighting();
        GotoState('None');
    }
    stop;    
}

defaultproperties
{
    MaxImpulseSpeed=900
    StaticMeshComponent=none
    LightEnvironment=none
    Components=none
    RemoteRole=ENetRole.ROLE_None
    bNoDelete=false
    bCanStepUpOn=false
    bCallRigidBodyWakeEvents=true
    LifeSpan=15
    CollisionComponent=none
}