/*******************************************************************************
 * AmbientOcclusionEffect generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AmbientOcclusionEffect extends PostProcessEffect
    native
    hidecategories(Object);

enum EAmbientOcclusionQuality
{
    AO_High,
    AO_Medium,
    AO_Low,
    AO_MAX
};

enum EHBAOBlurRadius
{
    HBAO_BLUR_RADIUS_2,
    HBAO_BLUR_RADIUS_4,
    HBAO_BLUR_RADIUS_8,
    HBAO_BLUR_RADIUS_MAX
};

/** The color that will replace scene color where there is a lot of occlusion. */
var(Color) interp LinearColor OcclusionColor;
/**  
 *Power to apply to the calculated occlusion value. 
 * Higher powers result in more contrast, but will need other factors like OcclusionScale to be tweaked as well.
 */
var(Color) float OcclusionPower<UIMin=0.1|UIMax=20.0>;
/** Scale to apply to the calculated occlusion value. */
var(Color) float OcclusionScale<UIMin=0.0|UIMax=10.0>;
/** Bias to apply to the calculated occlusion value. */
var(Color) float OcclusionBias<UIMin=-1.0|UIMax=4.0>;
/** Minimum occlusion value after all other transforms have been applied. */
var(Color) float MinOcclusion;
var deprecated bool SSAO2;
/** SSAO quality improvements, less noise, more detail, no darkening of flat surfaces, no overbright on convex, parameter retweak needed */
var(Occlusion) bool bAngleBasedSSAO;
/** To return white AO for ViewDepths > MaxViewDepth */
var(HBAO) bool HBAO_EnableDepthThreshold;
/** To blur the AO with an edge-preserving blur */
var(HBAO) bool HBAO_EnableBlur;
/** Distance to check around each pixel for occluders, in world units. */
var(Occlusion) float OcclusionRadius<UIMin=0.0|UIMax=256.0>;
var deprecated float OcclusionAttenuation<UIMin=0.0|UIMax=10.0>;
/**  
 *Quality of the ambient occlusion effect.  Low quality gives the best performance and is appropriate for gameplay.  
 * Medium quality smooths noise between frames at a slightly higher performance cost.  High quality uses extra samples to preserve detail.
 */
var(Occlusion) AmbientOcclusionEffect.EAmbientOcclusionQuality OcclusionQuality;
var(HBAO) AmbientOcclusionEffect.EHBAOBlurRadius HBAO_BlurRadius;
/**  
 *Distance at which to start fading out the occlusion factor, in world units. 
 * This is useful for hiding distant artifacts on skyboxes.
 */
var(Occlusion) float OcclusionFadeoutMinDistance;
/** Distance at which the occlusion factor should be fully faded, in world units. */
var(Occlusion) float OcclusionFadeoutMaxDistance;
/**  
 *Distance in front of a pixel that an occluder must be to be considered a different object, in world units.  
 * This threshold is used to identify halo regions around nearby objects, for example a first person weapon.
 */
var(Halo) float HaloDistanceThreshold;
/**  
 *Scale factor to increase HaloDistanceThreshold for distant pixels.  
 * A value of .001 would result in HaloDistanceThreshold being 1 unit larger at a distance of 1000 world units.
 */
var(Halo) float HaloDistanceScale;
/**  
 *Occlusion factor to assign to samples determined to be contributing to a halo.  
 * 0 would result in full occlusion for that sample, increasing values map to quadratically decreasing occlusion values.
 */
var(Halo) float HaloOcclusion;
/** Difference in depth that two pixels must be to be considered an edge, and therefore not blurred across, in world units. */
var(Filter) float EdgeDistanceThreshold;
/**  
 *Scale factor to increase EdgeDistanceThreshold for distant pixels.  
 * A value of .001 would result in EdgeDistanceThreshold being 1 unit larger at a distance of 1000 world units.
 */
var(Filter) float EdgeDistanceScale;
/**  
 *Distance in world units which should map to the kernel size in screen space.  
 * This is useful to reduce filter kernel size for distant pixels and keep detail, at the cost of leaving more noise in the result.
 */
var(Filter) float FilterDistanceScale;
var deprecated int FilterSize;
/**  
 *Time in which the occlusion history should approximately converge.  
 * Longer times (.5s) allow more smoothing between frames and less noise but history streaking is more noticeable.
 * 0 means the feature is off (less GPU performance and memory overhead)
 */
var(History) float HistoryConvergenceTime;
var float HistoryWeightConvergenceTime;
/** AO radius in meters */
var(HBAO) float HBAO_Radius;
/** To hide low-tessellation artifacts, 0.0~1.0 */
var(HBAO) float HBAO_Bias;
/** Scale factor for the detail AO, the greater the darker, 0.0~2.0 */
var(HBAO) float HBAO_DetailAO;
/** Scale factor for the coarse AO, the greater the darker, 0.0~2.0 */
var(HBAO) float HBAO_CoarseAO;
/** Final AO output is pow(AO, powerExponent) */
var(HBAO) float HBAO_PowerExponent;
/** Custom view-depth threshold */
var(HBAO) float HBAO_MaxViewDepth;
/** The higher, the sharper the AO-to-white transitions */
var(HBAO) float HBAO_Sharpness;
/** The higher, the more the blur preserves edges, 0.0~16.0 */
var(HBAO) float HBAO_BlurSharpness;

defaultproperties
{
    OcclusionColor=(R=0,G=0,B=0,A=1)
    OcclusionPower=4
    OcclusionScale=20
    MinOcclusion=0.1
    HBAO_EnableBlur=true
    OcclusionRadius=25
    OcclusionQuality=EAmbientOcclusionQuality.AO_Medium
    HBAO_BlurRadius=EHBAOBlurRadius.HBAO_BLUR_RADIUS_4
    OcclusionFadeoutMinDistance=4000
    OcclusionFadeoutMaxDistance=4500
    HaloDistanceThreshold=40
    HaloDistanceScale=0.1
    HaloOcclusion=0.04
    EdgeDistanceThreshold=10
    EdgeDistanceScale=0.003
    FilterDistanceScale=10
    HistoryWeightConvergenceTime=0.07
    HBAO_Radius=1
    HBAO_Bias=0.1
    HBAO_CoarseAO=1
    HBAO_PowerExponent=2
    HBAO_Sharpness=100
    HBAO_BlurSharpness=4
    bAffectsLightingOnly=true
    SceneDPG=ESceneDepthPriorityGroup.SDPG_World
}