/*******************************************************************************
 * AccessControl generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AccessControl extends Info
    config(Game)
    notplaceable
    hidecategories(Navigation,Movement,Collision);

struct PendingClientAuth
{
    var Player ClientConnection;
    var UniqueNetId ClientUID;
    var float AuthTimestamp;
    var int AuthRetryCount;

    structdefaultproperties
    {
        ClientConnection=none
        ClientUID=(Uid=none)
        AuthTimestamp=0
        AuthRetryCount=0
    }
};

struct ServerAuthRetry
{
    var UniqueNetId ClientUID;
    var int AuthRetryCount;

    structdefaultproperties
    {
        ClientUID=(Uid=none)
        AuthRetryCount=0
    }
};

struct TimeoutClientInfo
{
    var UniqueNetId ClientUID;
    var int LastControlTime;

    structdefaultproperties
    {
        ClientUID=(Uid=none)
        LastControlTime=0
    }
};

var globalconfig array<config string> IPPolicies;
var globalconfig array<config UniqueNetId> BannedIDs;
var const localized string IPBanned;
var const localized string WrongPassword;
var const localized string NeedPassword;
var const localized string SessionBanned;
var const localized string KickedMsg;
var const localized string DefaultKickReason;
var const localized string IdleKickReason;
var class<Admin> AdminClass;
var private globalconfig string AdminPassword;
var private globalconfig string GamePassword;
var const localized string ACDisplayText[3];
var const localized string ACDescText[3];
var bool bDontAddDefaultAdmin;
var globalconfig bool bAuthenticateClients;
var globalconfig bool bAuthenticateServer;
var globalconfig bool bAuthenticateListenHost;
var bool bAuthDelegatesRegistered;
var bool bPendingListenAuth;
var globalconfig int MaxAuthRetryCount;
var globalconfig int AuthRetryDelay;
var OnlineSubsystem OnlineSub;
var OnlineAuthInterface CachedAuthInt;
var array<PendingClientAuth> ClientsPendingAuth;
var array<ServerAuthRetry> ServerAuthRetries;
var int ListenAuthTicketUID;
var int ListenAuthRetryCount;
var array<TimeoutClientInfo> ClientsTimeoutInfo;

function PostBeginPlay()
{
    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    InitAuthHooks();
    SetTimer(1, true, 'TimeoutTick');
}

function Destroyed()
{
    Cleanup();
}

function bool IsAdmin(PlayerController P)
{
    if(P != none)
    {
        if(Admin(P) != none)
        {
            return true;
        }
        if((P.PlayerReplicationInfo != none) && P.PlayerReplicationInfo.bAdmin)
        {
            return true;
        }
    }
    return false;
}

function bool SetAdminPassword(string P)
{
    AdminPassword = P;
    return true;
}

function SetGamePassword(string P)
{
    GamePassword = P;
    WorldInfo.Game.UpdateGameSettings();
}

function bool RequiresPassword()
{
    return (GamePassword != "") || GameEngine(Class'Engine'.static.GetEngine()).bPrivateServer;
}

function Controller GetControllerFromString(string Target)
{
    local Controller C, FinalC;
    local int I;

    FinalC = none;
    foreach WorldInfo.AllControllers(Class'Controller', C)
    {
        if((C.PlayerReplicationInfo != none) && (C.PlayerReplicationInfo.PlayerName ~= Target) || C.PlayerReplicationInfo.PlayerName ~= Target)
        {
            FinalC = C;
            break;
        }        
    }    
    if(((C == none) && WorldInfo != none) && WorldInfo.GRI != none)
    {
        I = 0;
        J0x152:

        if(I < WorldInfo.GRI.PRIArray.Length)
        {
            if(string(WorldInfo.GRI.PRIArray[I].PlayerID) == Target)
            {
                FinalC = Controller(WorldInfo.GRI.PRIArray[I].Owner);
                goto J0x26C;
            }
            ++ I;
            goto J0x152;
        }
    }
    J0x26C:

    return FinalC;
}

function Kick(string Target)
{
    local Controller C;

    C = GetControllerFromString(Target);
    if((C != none) && C.PlayerReplicationInfo != none)
    {
        if(PlayerController(C) != none)
        {
            KickPlayer(PlayerController(C), DefaultKickReason);            
        }
        else
        {
            if(C.PlayerReplicationInfo != none)
            {
                if(C.Pawn != none)
                {
                    C.Pawn.Destroy();
                }
                if(C != none)
                {
                    C.Destroy();
                }
            }
        }
    }
}

function KickBan(string Target)
{
    local PlayerController P;
    local string IP;

    P = PlayerController(GetControllerFromString(Target));
    if(NetConnection(P.Player) != none)
    {
        if(!WorldInfo.IsConsoleBuild())
        {
            IP = P.GetPlayerNetworkAddress();
            if(CheckIPPolicy(IP))
            {
                IP = Left(IP, InStr(IP, ":"));
                LogInternal("Adding IP Ban for: " $ IP);
                IPPolicies[IPPolicies.Length] = "DENY," $ IP;
                SaveConfig();
            }
        }
        if(P.PlayerReplicationInfo.UniqueId != P.PlayerReplicationInfo.default.UniqueId && !IsIDBanned(P.PlayerReplicationInfo.UniqueId))
        {
            BannedIDs.AddItem(P.PlayerReplicationInfo.UniqueId;
            SaveConfig();
        }
        KickPlayer(P, DefaultKickReason);
        return;
    }
}

function bool ForceKickPlayer(PlayerController C, string KickReason)
{
    if((C != none) && NetConnection(C.Player) != none)
    {
        if(C.Pawn != none)
        {
            C.Pawn.Suicide();
        }
        C.ClientWasKicked();
        if(C != none)
        {
            C.Destroy();
        }
        return true;
    }
    return false;
}

function bool KickPlayer(PlayerController C, string KickReason)
{
    if(((C != none) && !IsAdmin(C)) && NetConnection(C.Player) != none)
    {
        return ForceKickPlayer(C, KickReason);
    }
    return false;
}

function bool AdminLogin(PlayerController P, string Password)
{
    if(AdminPassword == "")
    {
        return false;
    }
    if(Password == AdminPassword)
    {
        P.PlayerReplicationInfo.bAdmin = true;
        return true;
    }
    return false;
}

function bool AdminLogout(PlayerController P)
{
    if(P.PlayerReplicationInfo.bAdmin)
    {
        P.PlayerReplicationInfo.bAdmin = false;
        P.bGodMode = false;
        P.Suicide();
        return true;
    }
    return false;
}

function AdminEntered(PlayerController P)
{
    local string LoginString;

    LoginString = P.PlayerReplicationInfo.PlayerName @ "logged in as a server administrator.";
    LogInternal(LoginString);
    WorldInfo.Game.Broadcast(P, LoginString);
}

function AdminExited(PlayerController P)
{
    local string LogoutString;

    LogoutString = P.PlayerReplicationInfo.PlayerName $ "is no longer logged in as a server administrator.";
    LogInternal(LogoutString);
    WorldInfo.Game.Broadcast(P, LogoutString);
}

function bool ParseAdminOptions(string Options)
{
    local string InAdminName, InPassword;

    InPassword = Class'GameInfo'.static.ParseOption(Options, "Password");
    InAdminName = Class'GameInfo'.static.ParseOption(Options, "AdminName");
    return ValidLogin(InAdminName, InPassword);
}

function bool ValidLogin(string UserName, string Password)
{
    return (AdminPassword != "") && Password == AdminPassword;
}

function bool CheckIPPolicy(string Address)
{
    local int I, J, LastMatchingPolicy;
    local string Policy, Mask;
    local bool bAcceptAddress, bAcceptPolicy;

    J = InStr(Address, ":");
    if(J != -1)
    {
        Address = Left(Address, J);
    }
    bAcceptAddress = true;
    I = 0;
    J0x63:

    if(I < IPPolicies.Length)
    {
        J = InStr(IPPolicies[I], ",");
        if(J == -1)
        {            
        }
        else
        {
            Policy = Left(IPPolicies[I], J);
            Mask = Mid(IPPolicies[I], J + 1);
            if(Policy ~= "ACCEPT")
            {
                bAcceptPolicy = true;                
            }
            else
            {
                if(Policy ~= "DENY")
                {
                    bAcceptPolicy = false;                    
                }
                else
                {
                    goto J0x21A;
                }
            }
            J = InStr(Mask, "*");
            if(J != -1)
            {
                if(Left(Mask, J) == Left(Address, J))
                {
                    bAcceptAddress = bAcceptPolicy;
                    LastMatchingPolicy = I;
                }                
            }
            else
            {
                if(Mask == Address)
                {
                    bAcceptAddress = bAcceptPolicy;
                    LastMatchingPolicy = I;
                }
            }
        }
        J0x21A:

        ++ I;
        goto J0x63;
    }
    if(!bAcceptAddress)
    {
        LogInternal((("Denied connection for " $ Address) $ " with IP policy ") $ IPPolicies[LastMatchingPolicy]);
    }
    return bAcceptAddress;
}

function bool IsIDBanned(const out UniqueNetId NetId)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < BannedIDs.Length)
    {
        if(BannedIDs[I] == NetId)
        {
            return true;
        }
        ++ I;
        goto J0x0B;
    }
    return false;
}

function InitAuthHooks()
{
    local OnlineGameSettings GameSettings;
    local bool bIsLanMatch;

    if(OnlineSub != none)
    {
        CachedAuthInt = OnlineSub.AuthInterface;
        if(NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
        {
            GameSettings = OnlineSub.GameInterface.GetGameSettings(WorldInfo.Game.PlayerReplicationInfoClass.default.SessionName);
        }
        if((((WorldInfo.NetMode == NM_DedicatedServer) || WorldInfo.NetMode == NM_ListenServer) && GameSettings != none) && GameSettings.bIsLanMatch)
        {
            if(bAuthenticateClients)
            {
                LogInternal("Disabling all authentication, due to bIsLanMatch being set to true");
            }
            bIsLanMatch = true;
        }        
    }
    else
    {
        bIsLanMatch = true;
    }
    if(!bIsLanMatch && bAuthenticateClients)
    {
        RegisterAuthDelegates();
    }
}

function RegisterAuthDelegates()
{
    if(NotEqual_InterfaceInterface(CachedAuthInt, (none)))
    {
        CachedAuthInt.AddAuthReadyDelegate(OnAuthReady);
        CachedAuthInt.AddServerAuthRequestDelegate(ProcessServerAuthRequest);
        CachedAuthInt.AddClientAuthResponseDelegate(ProcessClientAuthResponse);
        CachedAuthInt.AddClientAuthCompleteDelegate(OnClientAuthComplete);
        CachedAuthInt.AddClientConnectionCloseDelegate(OnClientConnectionClose);
        CachedAuthInt.AddServerAuthRetryRequestDelegate(ProcessServerAuthRetryRequest);
        CachedAuthInt.ClearClientConnectionCloseDelegate(Class'AccessControl'.StaticOnClientConnectionClose);
        if(NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
        {
            OnlineSub.GameInterface.AddDestroyOnlineGameCompleteDelegate(OnDestroyOnlineGameComplete);
        }
        bAuthDelegatesRegistered = true;        
    }
    else
    {
        if(OnlineSub.Class.Name != 'OnlineSubsystemSteamworks')
        {
            LogInternal("AccessControl: Trying to register authentication delegates with an online subsystem that does not support authentication");
        }
        bAuthDelegatesRegistered = false;
    }
}

function ClearAuthDelegates(bool bExiting)
{
    if(NotEqual_InterfaceInterface(CachedAuthInt, (none)))
    {
        CachedAuthInt.ClearAuthReadyDelegate(OnAuthReady);
        CachedAuthInt.ClearServerAuthRequestDelegate(ProcessServerAuthRequest);
        CachedAuthInt.ClearClientAuthResponseDelegate(ProcessClientAuthResponse);
        CachedAuthInt.ClearClientAuthCompleteDelegate(OnClientAuthComplete);
        CachedAuthInt.ClearClientConnectionCloseDelegate(OnClientConnectionClose);
        CachedAuthInt.ClearServerAuthRetryRequestDelegate(ProcessServerAuthRetryRequest);
        if(!bExiting)
        {
            CachedAuthInt.AddClientConnectionCloseDelegate(Class'AccessControl'.StaticOnClientConnectionClose);            
        }
        else
        {
            CachedAuthInt.ClearClientConnectionCloseDelegate(Class'AccessControl'.StaticOnClientConnectionClose);
        }
        if((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
        {
            OnlineSub.GameInterface.ClearDestroyOnlineGameCompleteDelegate(OnDestroyOnlineGameComplete);
        }        
    }
    else
    {
        LogInternal("AccessControl: Trying to clear authentication delegates with an online subsystem that does not support authentication");
    }
    bAuthDelegatesRegistered = false;
}

event PreLogin(string Options, string Address, const UniqueNetId UniqueId, bool bSupportsAuth, out string OutError, bool bSpectator)
{
    local string InPassword;
    local int I, CurPort, LingeringPort;
    local IpAddr CurIP, ClientIP;
    local bool bFound, bSuccess, bHasPrivateServerOption;
    local UniqueNetId NullId, HostUID;
    local Player ClientConn, CurConn;
    local AuthSession CurClientSession;
    local OnlineGameSettings GameSettings;
    local GameEngine Engine;

    OutError = "";
    InPassword = WorldInfo.Game.ParseOption(Options, "Password");
    Engine = GameEngine(Class'Engine'.static.GetEngine());
    if(WorldInfo.IsConsoleDedicatedServer())
    {
        bHasPrivateServerOption = WorldInfo.Game.HasOption(Options, "bJoinViaInvite");        
    }
    else
    {
        bHasPrivateServerOption = WorldInfo.Game.HasOption(Options, "friend") || InPassword != "";
    }
    if((WorldInfo.NetMode != NM_Standalone) && WorldInfo.Game.AtCapacity(bSpectator, UniqueId))
    {
        OutError = ("<Strings:" $ PathName(WorldInfo.Game.GameMessageClass)) $ ".MaxedOutMessage>";        
    }
    else
    {
        if((((GamePassword != "") && !InPassword == GamePassword) && (AdminPassword == "") || !InPassword == AdminPassword) || Engine.bPrivateServer && !bHasPrivateServerOption)
        {
            OutError = "<Strings:" $ ((InPassword == "") ? "Engine.AccessControl.NeedPassword>" : "Engine.AccessControl.WrongPassword>");
        }
    }
    if(!CheckIPPolicy(Address))
    {
        OutError = "<Strings:Engine.AccessControl.IPBanned>";
    }
    if(((bAuthenticateClients && OutError == "") && NotEqual_InterfaceInterface(CachedAuthInt, (none))) && bAuthDelegatesRegistered)
    {
        if((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
        {
            GameSettings = OnlineSub.GameInterface.GetGameSettings(WorldInfo.Game.PlayerReplicationInfoClass.default.SessionName);
            if(Address == "127.0.0.1")
            {
                LogInternal("Skipping online subsystem authentication because it's a local connection from address:" $ Address);
                return;
            }
            if((((WorldInfo.NetMode == NM_DedicatedServer) || WorldInfo.NetMode == NM_ListenServer) && GameSettings != none) && !GameSettings.bIsLanMatch)
            {
                if(!bSupportsAuth)
                {
                    if(OnlineSub.Class.Name == 'OnlineSubsystemSteamworks')
                    {
                        OutError = "<Strings:Engine.Errors.SteamClientRequired>";                        
                    }
                    else
                    {
                        OutError = "<Strings:KFEngine.Errors.RequiresAuthentication>";
                    }
                }
                if(OutError == "")
                {
                    ClientConn = WorldInfo.Game.PauseLogin();
                }
                if(ClientConn != none)
                {
                    foreach WorldInfo.AllClientConnections(CurConn, CurIP, CurPort)
                    {
                        if(CurConn == ClientConn)
                        {
                            ClientIP = CurIP;
                            break;
                        }                        
                    }                    
                    LingeringPort = 0;
                    foreach CachedAuthInt.AllClientAuthSessions(CurClientSession)
                    {
                        if(CurClientSession.EndPointIP == ClientIP && CurClientSession.EndPointUID == UniqueId)
                        {
                            LingeringPort = CurClientSession.EndPointPort;
                            break;
                        }                        
                    }                    
                    if(LingeringPort != 0)
                    {
                        foreach WorldInfo.AllClientConnections(CurConn, CurIP, CurPort)
                        {
                            if(((CurConn != ClientConn) && CurIP == ClientIP) && CurPort == LingeringPort)
                            {
                                LogInternal(((("Closing old connection with duplicate IP (" $ Address) $ ") and SteamId (") $ Class'OnlineSubsystem'.static.UniqueNetIdToString(UniqueId)) $ ")", 'DevNet');
                                WorldInfo.Game.RejectLogin(CurConn, "");
                                break;
                            }                            
                        }                        
                    }
                    I = 0;
                    J0x987:

                    if(I < ClientsPendingAuth.Length)
                    {
                        if(ClientsPendingAuth[I].ClientUID == UniqueId)
                        {
                            bFound = true;
                            goto J0x9F7;
                        }
                        ++ I;
                        goto J0x987;
                    }
                    J0x9F7:

                    if(!bFound)
                    {
                        foreach CachedAuthInt.AllClientAuthSessions(CurClientSession)
                        {
                            if(CurClientSession.EndPointUID == UniqueId && CurClientSession.EndPointIP != ClientIP)
                            {
                                bFound = true;
                                break;
                            }                            
                        }                        
                        if(!Class'WorldInfo'.static.IsConsoleBuild())
                        {
                            I = 0;
                            J0xAD7:

                            if(I < ClientsTimeoutInfo.Length)
                            {
                                if(ClientsTimeoutInfo[I].ClientUID == UniqueId)
                                {
                                    bFound = true;
                                    goto J0xB47;
                                }
                                ++ I;
                                goto J0xAD7;
                            }
                        }
                    }
                    J0xB47:

                    if((((WorldInfo.NetMode == NM_ListenServer) && NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none))) && OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID)) && UniqueId == HostUID)
                    {
                        bFound = true;
                    }
                    if(!bFound && UniqueId != NullId)
                    {
                        if(CachedAuthInt.IsReady())
                        {
                            bSuccess = CachedAuthInt.SendClientAuthRequest(ClientConn, UniqueId);
                            if(bSuccess && !IsTimerActive('PendingAuthTimer'))
                            {
                                SetTimer(3, true, 'PendingAuthTimer');
                            }                            
                        }
                        else
                        {
                            bSuccess = true;
                        }
                        if(bSuccess)
                        {
                            I = ClientsPendingAuth.Length;
                            ClientsPendingAuth.Length = I + 1;
                            ClientsPendingAuth[I].ClientConnection = ClientConn;
                            ClientsPendingAuth[I].ClientUID = UniqueId;
                            ClientsPendingAuth[I].AuthTimestamp = WorldInfo.RealTimeSeconds;                            
                        }
                        else
                        {
                            OutError = "<Strings:KFEngine.Errors.FailedKickOff>";
                        }                        
                    }
                    else
                    {
                        if(bFound)
                        {
                            OutError = "<Strings:KFEngine.Errors.DuplicateUID>";                            
                        }
                        else
                        {
                            OutError = "<Strings:KFEngine.Errors.InvalidUID>";
                        }
                    }                    
                }
                else
                {
                    if(OutError == "")
                    {
                        OutError = "<Strings:KFEngine.Errors.FailedKickOff>";
                    }
                }
            }
        }
    }
}

function PostLogin(PlayerController NewPlayer)
{
    if(((((LocalPlayer(NewPlayer.Player) != none) && bAuthDelegatesRegistered) && bAuthenticateListenHost) && WorldInfo.NetMode == NM_ListenServer) && NotEqual_InterfaceInterface(CachedAuthInt, (none)))
    {
        if(CachedAuthInt.IsReady())
        {
            BeginListenHostAuth();            
        }
        else
        {
            bPendingListenAuth = true;
        }
    }
}

function PendingAuthTimer()
{
    local int I, OldLength;
    local bool bFailed;
    local AuthSession CurClientSession;

    I = 0;
    J0x0B:

    if(I < ClientsPendingAuth.Length)
    {
        if(ClientsPendingAuth[I].ClientConnection == none)
        {
            ClientsPendingAuth.Remove(I, 1;
            -- I;            
        }
        else
        {
            if(WorldInfo.RealTimeSeconds < ClientsPendingAuth[I].AuthTimestamp)
            {
                ClientsPendingAuth[I].AuthTimestamp = WorldInfo.RealTimeSeconds;                
            }
            else
            {
                if((WorldInfo.RealTimeSeconds - ClientsPendingAuth[I].AuthTimestamp) >= float(AuthRetryDelay))
                {
                    if(CachedAuthInt.FindClientAuthSession(ClientsPendingAuth[I].ClientConnection, CurClientSession))
                    {
                        if(ClientsPendingAuth[I].AuthRetryCount < MaxAuthRetryCount)
                        {
                            CachedAuthInt.EndRemoteClientAuthSession(CurClientSession.EndPointUID, CurClientSession.EndPointIP);
                            CachedAuthInt.SendClientAuthEndSessionRequest(ClientsPendingAuth[I].ClientConnection);
                            if(CachedAuthInt.SendClientAuthRequest(ClientsPendingAuth[I].ClientConnection, CurClientSession.EndPointUID))
                            {
                                ClientsPendingAuth[I].AuthTimestamp = WorldInfo.RealTimeSeconds;
                                ++ ClientsPendingAuth[I].AuthRetryCount;                                
                            }
                            else
                            {
                                bFailed = true;
                            }                            
                        }
                        else
                        {
                            bFailed = true;
                        }
                        if(bFailed)
                        {
                            LogInternal(("Client authentication timed out after" @ string(MaxAuthRetryCount)) @ "tries", 'DevOnline');
                            OldLength = ClientsPendingAuth.Length;
                            WorldInfo.Game.RejectLogin(ClientsPendingAuth[I].ClientConnection, "Authentication failed");
                            if(OldLength == ClientsPendingAuth.Length)
                            {
                                ClientsPendingAuth.Remove(I, 1;
                            }
                            -- I;
                        }
                    }
                }
            }
        }
        ++ I;
        goto J0x0B;
    }
    if(ClientsPendingAuth.Length == 0)
    {
        ClearTimer('PendingAuthTimer');
    }
}

function OnAuthReady()
{
    local int I, OldLength;

    if(bAuthDelegatesRegistered)
    {
        I = 0;
        J0x18:

        if(I < ClientsPendingAuth.Length)
        {
            if(ClientsPendingAuth[I].ClientConnection == none)
            {
                ClientsPendingAuth.Remove(I, 1;
                -- I;                
            }
            else
            {
                if(CachedAuthInt.SendClientAuthRequest(ClientsPendingAuth[I].ClientConnection, ClientsPendingAuth[I].ClientUID))
                {
                    ClientsPendingAuth[I].AuthTimestamp = WorldInfo.RealTimeSeconds;                    
                }
                else
                {
                    OldLength = ClientsPendingAuth.Length;
                    WorldInfo.Game.RejectLogin(ClientsPendingAuth[I].ClientConnection, "Authentication failed");
                    if(OldLength == ClientsPendingAuth.Length)
                    {
                        ClientsPendingAuth.Remove(I, 1;
                    }
                    -- I;                    
                }
            }
            ++ I;
            goto J0x18;
        }
        if(ClientsPendingAuth.Length > 0)
        {
            LogInternal("OnAuthReady: Kicking off delayed auth for clients");
            SetTimer(3, true, 'PendingAuthTimer');
        }
        if((bAuthenticateListenHost && WorldInfo.NetMode == NM_ListenServer) && bPendingListenAuth)
        {
            BeginListenHostAuth();
        }
    }
}

function ProcessClientAuthResponse(UniqueNetId ClientUID, IpAddr ClientIP, int AuthTicketUID)
{
    local bool bSuccess;
    local int I, PendingIdx, OldLength;

    PendingIdx = -1;
    I = 0;
    J0x1A:

    if(I < ClientsPendingAuth.Length)
    {
        if(ClientsPendingAuth[I].ClientUID == ClientUID)
        {
            PendingIdx = I;
            goto J0x91;
        }
        ++ I;
        goto J0x1A;
    }
    J0x91:

    if(PendingIdx != -1)
    {
        bSuccess = CachedAuthInt.VerifyClientAuthSession(ClientUID, ClientIP, 0, AuthTicketUID);
        if(!bSuccess)
        {
            OldLength = ClientsPendingAuth.Length;
            WorldInfo.Game.RejectLogin(ClientsPendingAuth[I].ClientConnection, "Authentication failed");
            if(OldLength == ClientsPendingAuth.Length)
            {
                ClientsPendingAuth.Remove(PendingIdx, 1;
            }
        }        
    }
    else
    {
        LogInternal("AccessControl::ProcessClientAuthResponse: Received unexpected auth ticket from client", 'DevOnline');
    }
}

function OnClientAuthComplete(bool bSuccess, UniqueNetId ClientUID, Player ClientConnection, string ExtraInfo)
{
    local UniqueNetId HostUID;
    local int I, PendingLen, PendingIdx;
    local PlayerController P;
    local PlayerReplicationInfo PRI;
    local bool bResumeLogin;
    local AuthSession CurClientSession;

    if((((WorldInfo.NetMode == NM_ListenServer) && NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none))) && OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID)) && HostUID == ClientUID)
    {
        if(bSuccess)
        {
            LogInternal("Listen host successfully authenticated");
            ClearTimer('ListenHostAuthTimeout');
            ClearTimer('ContinueListenHostAuth');
        }
        return;
    }
    PendingLen = ClientsPendingAuth.Length;
    PendingIdx = -1;
    I = 0;
    J0x155:

    if(I < PendingLen)
    {
        if(((ClientConnection != none) && ClientsPendingAuth[I].ClientConnection == ClientConnection) || (ClientConnection == none) && ClientsPendingAuth[I].ClientUID == ClientUID)
        {
            PendingIdx = I;
            goto J0x223;
        }
        ++ I;
        goto J0x155;
    }
    J0x223:

    if(PendingIdx != -1)
    {
        if(ClientConnection != none)
        {
            if(bSuccess)
            {
                foreach WorldInfo.AllControllers(Class'PlayerController', P)
                {
                    if(P.Player == ClientConnection)
                    {
                        PRI = P.PlayerReplicationInfo;
                        break;
                    }                    
                }                
                if(PRI != none)
                {
                    P.PlayerReplicationInfo.SetUniqueId(ClientUID);
                    LogInternal((("Client '" $ PRI.PlayerName) $ "'passed authentication, UID:") @ Class'OnlineSubsystem'.static.UniqueNetIdToString(ClientUID));                    
                }
                else
                {
                    LogInternal("Client passed authentication, UID:" @ Class'OnlineSubsystem'.static.UniqueNetIdToString(ClientUID));
                }
                bResumeLogin = true;
                if(bAuthenticateServer)
                {
                    if(CachedAuthInt.FindClientAuthSession(ClientConnection, CurClientSession))
                    {
                        ProcessServerAuthRequest(ClientConnection, ClientUID, CurClientSession.EndPointIP, CurClientSession.EndPointPort);                        
                    }
                    else
                    {
                        LogInternal("Failed to kickoff server auth; could not find matching client session");
                    }
                }                
            }
            else
            {
                LogInternal(("Client failed authentication (unauthenticated UID:" @ Class'OnlineSubsystem'.static.UniqueNetIdToString(ClientUID)) $ "), kicking");
                WorldInfo.Game.RejectLogin(ClientConnection, "Authentication failed");
            }
        }
        if(ClientsPendingAuth.Length == PendingLen)
        {
            ClientsPendingAuth.Remove(PendingIdx, 1;
        }        
    }
    else
    {
        LogInternal("AccessControl::OnClientAuthComplete: Received unexpected auth result for client", 'DevOnline');
    }
    if(bResumeLogin)
    {
        WorldInfo.Game.ResumeLogin(ClientConnection);
    }
}

function ProcessServerAuthRequest(Player ClientConnection, UniqueNetId ClientUID, IpAddr ClientIP, int ClientPort)
{
    local int AuthTicketUID;
    local LocalAuthSession CurServerSession;
    local bool bFound;

    if(bAuthenticateServer)
    {
        foreach CachedAuthInt.AllLocalServerAuthSessions(CurServerSession)
        {
            if(CurServerSession.EndPointUID == ClientUID && CurServerSession.EndPointIP == ClientIP)
            {
                bFound = true;
            }            
        }        
        if(!bFound)
        {
            if(CachedAuthInt.CreateServerAuthSession(ClientUID, ClientIP, ClientPort, AuthTicketUID))
            {
                if(!CachedAuthInt.SendServerAuthResponse(ClientConnection, AuthTicketUID))
                {
                    LogInternal("WARNING!!! Failed to send auth ticket to client");
                }                
            }
            else
            {
                LogInternal("Failed to kickoff server auth", 'DevOnline');
            }
        }
    }
}

function ProcessServerAuthRetryRequest(Player ClientConnection)
{
    local bool bFoundAndAuthenticated;
    local IpAddr ClientIP;
    local int ClientPort, I, CurRetryIdx;
    local UniqueNetId ClientUID;
    local AuthSession CurClientSession;
    local LocalAuthSession CurServerSession;

    if(bAuthenticateServer && ClientConnection != none)
    {
        bFoundAndAuthenticated = CachedAuthInt.FindClientAuthSession(ClientConnection, CurClientSession) && CurClientSession.AuthStatus == 2;
        if(bFoundAndAuthenticated)
        {
            ClientUID = CurClientSession.EndPointUID;
            ClientIP = CurClientSession.EndPointIP;
            ClientPort = CurClientSession.EndPointPort;
            CurRetryIdx = -1;
            I = 0;
            J0x11D:

            if(I < ServerAuthRetries.Length)
            {
                if(ServerAuthRetries[I].ClientUID == ClientUID)
                {
                    CurRetryIdx = I;
                    goto J0x194;
                }
                ++ I;
                goto J0x11D;
            }
            J0x194:

            if(CurRetryIdx == -1)
            {
                CurRetryIdx = ServerAuthRetries.Length;
                ServerAuthRetries.Length = CurRetryIdx + 1;
                ServerAuthRetries[CurRetryIdx].ClientUID = ClientUID;
            }
            if(ServerAuthRetries[CurRetryIdx].AuthRetryCount < MaxAuthRetryCount)
            {
                foreach CachedAuthInt.AllLocalServerAuthSessions(CurServerSession)
                {
                    if(CurServerSession.EndPointUID == ClientUID)
                    {
                        CachedAuthInt.EndLocalServerAuthSession(ClientUID, ClientIP);
                        break;
                    }                    
                }                
                ProcessServerAuthRequest(ClientConnection, ClientUID, ClientIP, ClientPort);
                ++ ServerAuthRetries[CurRetryIdx].AuthRetryCount;                
            }
            else
            {
                if(ServerAuthRetries[CurRetryIdx].AuthRetryCount > Max(30, MaxAuthRetryCount + 20))
                {
                    WorldInfo.Game.RejectLogin(ClientConnection, "Spamming server auth");                    
                }
                else
                {
                    ++ ServerAuthRetries[CurRetryIdx].AuthRetryCount;
                }
            }
        }
    }
}

function BeginListenHostAuth(optional bool bRetry)
{
    local UniqueNetId ServerUID, HostUID;
    local IpAddr ServerIP;
    local int ServerPort;
    local OnlineGameSettings GameSettings;
    local bool bGotHostInfo, bFound, bSecure;
    local AuthSession CurClientSession, ListenSession;

    bPendingListenAuth = false;
    if(CachedAuthInt.IsReady())
    {
        bGotHostInfo = (CachedAuthInt.GetServerUniqueId(ServerUID) && CachedAuthInt.GetServerAddr(ServerIP, ServerPort)) && OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID);
    }
    if(bGotHostInfo)
    {
        foreach CachedAuthInt.AllClientAuthSessions(CurClientSession)
        {
            if(CurClientSession.EndPointUID == HostUID && CurClientSession.EndPointIP == ServerIP)
            {
                ListenSession = CurClientSession;
                bFound = true;
                break;
            }            
        }        
        if(!bFound || bRetry)
        {
            LogInternal("Kicking off listen auth session");
            if(NotEqual_InterfaceInterface(OnlineSub.GameInterface, (none)))
            {
                GameSettings = OnlineSub.GameInterface.GetGameSettings(WorldInfo.Game.PlayerReplicationInfoClass.default.SessionName);
            }
            if(GameSettings != none)
            {
                bSecure = GameSettings.bAntiCheatProtected;
            }
            if(CachedAuthInt.CreateClientAuthSession(ServerUID, ServerIP, ServerPort, bSecure, ListenAuthTicketUID))
            {
                SetTimer(1, false, 'ContinueListenHostAuth');
            }
            SetTimer(float(AuthRetryDelay), false, 'ListenHostAuthTimeout');            
        }
        else
        {
            if((ListenSession.AuthStatus != 2) && !IsTimerActive('ListenHostAuthTimeout'))
            {
                LogInternal("BeginListenHostAuth was called when there is already a listen auth session, but the timeout is not active");
                SetTimer(float(AuthRetryDelay), false, 'ListenHostAuthTimeout');
            }
        }        
    }
    else
    {
        LogInternal("Failed to kickoff listen host authentication");
        OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID);
        OnClientAuthComplete(false, HostUID, none, "Failed to kickoff listen host authentication");
    }
}

function ContinueListenHostAuth()
{
    local bool bGotHostInfo;
    local UniqueNetId HostUID;
    local IpAddr ServerIP;
    local int ServerPort;

    if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
    {
        bGotHostInfo = OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID) && CachedAuthInt.GetServerAddr(ServerIP, ServerPort);
    }
    if(!bGotHostInfo || !CachedAuthInt.VerifyClientAuthSession(HostUID, ServerIP, ServerPort, ListenAuthTicketUID))
    {
        LogInternal("VerifyClientAuthSession failed for listen host");
        OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID);
        OnClientAuthComplete(false, HostUID, none, "VerifyClientAuthSession failed for listen host");
    }
}

function EndListenHostAuth()
{
    local bool bGotHostInfo;
    local UniqueNetId ServerUID, HostUID;
    local IpAddr ServerIP;
    local int ServerPort;

    if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
    {
        bGotHostInfo = (CachedAuthInt.GetServerUniqueId(ServerUID) && CachedAuthInt.GetServerAddr(ServerIP, ServerPort)) && OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID);
    }
    if(bGotHostInfo)
    {
        CachedAuthInt.EndLocalClientAuthSession(ServerUID, ServerIP, ServerPort);
        CachedAuthInt.EndRemoteClientAuthSession(HostUID, ServerIP);        
    }
    else
    {
        LogInternal("Failed to end listen host auth session");
    }
}

function ListenHostAuthTimeout()
{
    local UniqueNetId HostUID;

    ClearTimer('ListenHostAuthTimeout');
    ClearTimer('ContinueListenHostAuth');
    if(ListenAuthRetryCount < MaxAuthRetryCount)
    {
        ++ ListenAuthRetryCount;
        BeginListenHostAuth(true);        
    }
    else
    {
        LogInternal(("Listen host authentication failed after" @ string(MaxAuthRetryCount)) @ "attempts");
        OnlineSub.PlayerInterface.GetUniquePlayerId(0, HostUID);
        OnClientAuthComplete(false, HostUID, none, "VerifyClientAuthSession failed for listen host");
        EndListenHostAuth();
    }
}

function OnClientConnectionClose(Player ClientConnection)
{
    local int I;

    if(ClientConnection != none)
    {
        StaticOnClientConnectionClose(ClientConnection);
        I = 0;
        J0x2D:

        if(I < ClientsPendingAuth.Length)
        {
            if((ClientConnection != none) && ClientsPendingAuth[I].ClientConnection == ClientConnection)
            {
                ClientsPendingAuth.Remove(I, 1;
                goto J0xB0;
            }
            ++ I;
            goto J0x2D;
        }
    }
    J0xB0:

}

static final function StaticOnClientConnectionClose(Player ClientConnection)
{
    local OnlineSubsystem CurOnlineSub;
    local OnlineAuthInterface CurAuthInt;
    local int I;
    local WorldInfo WI;
    local AuthSession CurClientSession;
    local LocalAuthSession CurServerSession;

    CurOnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(CurOnlineSub != none)
    {
        CurAuthInt = CurOnlineSub.AuthInterface;
    }
    if(NotEqual_InterfaceInterface(CurAuthInt, (none)) && ClientConnection != none)
    {
        if(CurAuthInt.FindClientAuthSession(ClientConnection, CurClientSession) && CurClientSession.AuthStatus == 2)
        {
            CurAuthInt.EndRemoteClientAuthSession(CurClientSession.EndPointUID, CurClientSession.EndPointIP);
        }
        if(CurAuthInt.FindLocalServerAuthSession(ClientConnection, CurServerSession))
        {
            CurAuthInt.EndLocalServerAuthSession(CurServerSession.EndPointUID, CurServerSession.EndPointIP);
            WI = Class'WorldInfo'.static.GetWorldInfo();
            if(((WI != none) && WI.Game != none) && WI.Game.AccessControl != none)
            {
                I = 0;
                J0x278:

                if(I < WI.Game.AccessControl.ServerAuthRetries.Length)
                {
                    if(WI.Game.AccessControl.ServerAuthRetries[I].ClientUID == CurServerSession.EndPointUID)
                    {
                        WI.Game.AccessControl.ServerAuthRetries.Remove(I, 1;
                        goto J0x3C1;
                    }
                    ++ I;
                    goto J0x278;
                }
            }
        }
    }
    J0x3C1:

}

function OnDestroyOnlineGameComplete(name SessionName, bool bWasSuccessful)
{
    local IpAddr CurIP;
    local int CurPort;
    local Player ClientConn, CurConn;
    local AuthSession CurClientSession;

    if(WorldInfo.NetMode == NM_ListenServer)
    {
        EndListenHostAuth();
    }
    foreach CachedAuthInt.AllClientAuthSessions(CurClientSession)
    {
        if(CurClientSession.AuthStatus == 2)
        {
            CachedAuthInt.EndRemoteClientAuthSession(CurClientSession.EndPointUID, CurClientSession.EndPointIP);
            foreach WorldInfo.AllClientConnections(CurConn, CurIP, CurPort)
            {
                if(CurIP == CurClientSession.EndPointIP && CurPort == CurClientSession.EndPointPort)
                {
                    ClientConn = CurConn;
                    break;
                }                
            }            
            if(ClientConn != none)
            {
                if(!CachedAuthInt.SendClientAuthEndSessionRequest(ClientConn))
                {
                    LogInternal("Failed to send client kill auth request");
                }
                continue;
            }
            LogInternal("WARNING!!! Came across client auth session with no matching NetConnection");
        }        
    }    
    CachedAuthInt.EndAllLocalServerAuthSessions();
    ServerAuthRetries.Length = 0;
}

function NotifyServerTravel(bool bSeamless)
{
    if(!bSeamless)
    {
        Cleanup();
    }
}

function NotifyGameEnding()
{
    local GameEngine Engine;

    Engine = GameEngine(Class'Engine'.static.GetEngine());
    if((WorldInfo.NextURL != "") || Engine.TravelURL != "")
    {
        Cleanup();        
    }
    else
    {
        NotifyExit();
    }
}

function NotifyExit()
{
    Cleanup(true);
}

function Cleanup(optional bool bExit)
{
    if(NotEqual_InterfaceInterface(CachedAuthInt, (none)))
    {
        ClearAuthDelegates(bExit);
        if(bExit)
        {
            CachedAuthInt.EndAllRemoteClientAuthSessions();
            CachedAuthInt.EndAllLocalServerAuthSessions();
            ServerAuthRetries.Length = 0;
        }
    }
    CachedAuthInt = none;
    OnlineSub = none;
}

function bool IsPendingAuth(UniqueNetId PlayerUID)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < ClientsPendingAuth.Length)
    {
        if(ClientsPendingAuth[I].ClientUID == PlayerUID)
        {
            return true;
        }
        ++ I;
        goto J0x0B;
    }
    return false;
}

function AddID(const UniqueNetId UniqueId)
{
    local int I;
    local bool bFound;
    local TimeoutClientInfo NewClient;

    I = 0;
    J0x0B:

    if(I < ClientsTimeoutInfo.Length)
    {
        if(ClientsTimeoutInfo[I].ClientUID == UniqueId)
        {
            bFound = true;
        }
        ++ I;
        goto J0x0B;
    }
    if(!bFound)
    {
        NewClient.ClientUID = UniqueId;
        NewClient.LastControlTime = 15;
        ClientsTimeoutInfo.AddItem(NewClient;
    }
}

function TimeoutTick()
{
    local int I, CurPort;
    local UniqueNetId CurrentClientUID, TestClientUID;
    local IpAddr CurIP;
    local Player CurConn;

    if(ClientsTimeoutInfo.Length <= 0)
    {
        return;
    }
    foreach WorldInfo.AllClientConnections(CurConn, CurIP, CurPort)
    {
        if((CurConn.Actor != none) && CurConn.Actor.PlayerReplicationInfo != none)
        {
            CurrentClientUID = CurConn.Actor.PlayerReplicationInfo.UniqueId;
            I = 0;
            J0x10B:

            if(I < ClientsTimeoutInfo.Length)
            {
                TestClientUID = ClientsTimeoutInfo[I].ClientUID;
                if(CurrentClientUID == TestClientUID)
                {
                    ClientsTimeoutInfo[I].LastControlTime = 15;
                    continue;
                }
                ++ I;
                goto J0x10B;
            }
        }        
    }    
    I = ClientsTimeoutInfo.Length - 1;
    J0x1C4:

    if(I >= 0)
    {
        -- ClientsTimeoutInfo[I].LastControlTime;
        if(ClientsTimeoutInfo[I].LastControlTime <= 0)
        {
            TestClientUID = ClientsTimeoutInfo[I].ClientUID;
            LogInternal("Removed Connection with UID:" @ Class'OnlineSubsystem'.static.UniqueNetIdToString(TestClientUID));
            ClientsTimeoutInfo.Remove(I, 1;
        }
        -- I;
        goto J0x1C4;
    }
}

defaultproperties
{
    IPPolicies(0)="ACCEPT;*"
    IPBanned="Your IP address has been banned on this server."
    WrongPassword="The password you entered is incorrect."
    NeedPassword="You need to enter a password to join this game."
    SessionBanned="Your IP address has been banned from the current game session."
    KickedMsg="You have been forcibly removed from the game."
    DefaultKickReason="None specified"
    IdleKickReason="Kicked for idling."
    AdminClass=Class'Admin'
    ACDisplayText[0]="Game Password"
    ACDisplayText[1]="Access Policies"
    ACDisplayText[2]="Admin Password"
    ACDescText[0]="If this password is set, players will have to enter it to join this server."
    ACDescText[1]="Specifies IP addresses or address ranges which have been banned."
    ACDescText[2]="Password required to login with administrator privileges on this server."
    bAuthenticateClients=true
    bAuthenticateServer=true
    bAuthenticateListenHost=true
    MaxAuthRetryCount=3
    AuthRetryDelay=5
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__AccessControl.Sprite'
    Components(0)=Sprite
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bAlwaysTick=true
}