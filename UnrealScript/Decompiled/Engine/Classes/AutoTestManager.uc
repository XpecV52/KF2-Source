/*******************************************************************************
 * AutoTestManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AutoTestManager extends Info
    native
    config(Game)
    notplaceable
    hidecategories(Navigation,Movement,Collision);

var bool bAutomatedPerfTesting;
var bool bAutoContinueToNextRound;
var bool bUsingAutomatedTestingMapList;
var bool bAutomatedTestingWithOpen;
var globalconfig bool bExitOnCyclesComplete;
var bool bCheckingForFragmentation;
var bool bCheckingForMemLeaks;
var bool bDoingASentinelRun;
var transient bool bSentinelStreamingLevelStillLoading;
var int AutomatedPerfRemainingTime;
var int AutomatedTestingMapIndex;
var globalconfig array<config string> AutomatedMapTestingList;
var globalconfig int NumAutomatedMapTestingCycles;
var int NumberOfMatchesPlayed;
var int NumMapListCyclesDone;
var string AutomatedTestingExecCommandToRunAtStartMatch;
var string AutomatedMapTestingTransitionMap;
var string SentinelTaskDescription;
var string SentinelTaskParameter;
var string SentinelTagDesc;
var transient PlayerController SentinelPC;
var transient array<Vector> SentinelTravelArray;
var transient int SentinelNavigationIdx;
var transient int SentinelIdx;
var transient int NumRotationsIncrement;
var transient int TravelPointsIncrement;
var config int NumMinutesPerMap;
var config array<config string> CommandsToRunAtEachTravelTheWorldNode;
var transient string CommandStringToExec;

event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    SetTimer(1, true);
}

event Timer()
{
    if((bAutomatedPerfTesting && AutomatedPerfRemainingTime > 0) && !bAutoContinueToNextRound)
    {
        -- AutomatedPerfRemainingTime;
        if(AutomatedPerfRemainingTime <= 0)
        {            
            ConsoleCommand("EXIT");
        }
    }
}

function InitializeOptions(string Options)
{
    local string InOpt;

    AutomatedPerfRemainingTime = 60 * WorldInfo.Game.TimeLimit;
    bAutomatedPerfTesting = (WorldInfo.Game.ParseOption(Options, "AutomatedPerfTesting") ~= "1") || WorldInfo.Game.ParseOption(Options, "gAPT") ~= "1";
    bCheckingForFragmentation = (WorldInfo.Game.ParseOption(Options, "CheckingForFragmentation") ~= "1") || WorldInfo.Game.ParseOption(Options, "gCFF") ~= "1";
    bCheckingForMemLeaks = (WorldInfo.Game.ParseOption(Options, "CheckingForMemLeaks") ~= "1") || WorldInfo.Game.ParseOption(Options, "gCFML") ~= "1";
    bDoingASentinelRun = (WorldInfo.Game.ParseOption(Options, "DoingASentinelRun") ~= "1") || WorldInfo.Game.ParseOption(Options, "gDASR") ~= "1";
    SentinelTaskDescription = WorldInfo.Game.ParseOption(Options, "SentinelTaskDescription");
    if(SentinelTaskDescription == "")
    {
        SentinelTaskDescription = WorldInfo.Game.ParseOption(Options, "gSTD");
    }
    SentinelTaskParameter = WorldInfo.Game.ParseOption(Options, "SentinelTaskParameter");
    if(SentinelTaskParameter == "")
    {
        SentinelTaskParameter = WorldInfo.Game.ParseOption(Options, "gSTP");
    }
    SentinelTagDesc = WorldInfo.Game.ParseOption(Options, "SentinelTagDesc");
    if(SentinelTagDesc == "")
    {
        SentinelTagDesc = WorldInfo.Game.ParseOption(Options, "gSTDD");
    }
    InOpt = WorldInfo.Game.ParseOption(Options, "AutoContinueToNextRound");
    if(InOpt != "")
    {
        LogInternal("AutoContinueToNextRound: " $ string(bool(InOpt)));
        bAutoContinueToNextRound = bool(InOpt);
    }
    InOpt = WorldInfo.Game.ParseOption(Options, "bUsingAutomatedTestingMapList");
    if(InOpt != "")
    {
        LogInternal("bUsingAutomatedTestingMapList: " $ string(bool(InOpt)));
        bUsingAutomatedTestingMapList = bool(InOpt);
    }
    if(bUsingAutomatedTestingMapList)
    {
        if(AutomatedMapTestingList.Length == 0)
        {
            LogInternal("*** No maps in automated test map list... Disabling bUsingAutomatedTestingMapList");
            bUsingAutomatedTestingMapList = false;
        }
    }
    InOpt = WorldInfo.Game.ParseOption(Options, "bAutomatedTestingWithOpen");
    if(InOpt != "")
    {
        LogInternal("bAutomatedTestingWithOpen: " $ string(bool(InOpt)));
        bAutomatedTestingWithOpen = bool(InOpt);
    }
    AutomatedTestingExecCommandToRunAtStartMatch = WorldInfo.Game.ParseOption(Options, "AutomatedTestingExecCommandToRunAtStartMatch");
    LogInternal("AutomatedTestingExecCommandToRunAtStartMatch: " $ AutomatedTestingExecCommandToRunAtStartMatch);
    AutomatedMapTestingTransitionMap = WorldInfo.Game.ParseOption(Options, "AutomatedMapTestingTransitionMap");
    LogInternal("AutomatedMapTestingTransitionMap: " $ AutomatedMapTestingTransitionMap);
    InOpt = WorldInfo.Game.ParseOption(Options, "AutomatedTestingMapIndex");
    if(InOpt != "")
    {
        LogInternal("AutomatedTestingMapIndex: " $ string(int(InOpt)));
        AutomatedTestingMapIndex = int(InOpt);
    }
    if(bAutomatedTestingWithOpen)
    {
        InOpt = WorldInfo.Game.ParseOption(Options, "NumberOfMatchesPlayed");
        if(InOpt != "")
        {
            LogInternal("NumberOfMatchesPlayed: " $ string(int(InOpt)));
            NumberOfMatchesPlayed = int(InOpt);
        }
        InOpt = WorldInfo.Game.ParseOption(Options, "NumMapListCyclesDone");
        if(InOpt != "")
        {
            LogInternal("NumMapListCyclesDone: " $ string(int(InOpt)));
            NumMapListCyclesDone = int(InOpt);
        }        
    }
    else
    {
        LogInternal("*** Disabling automated transition map for ServerTravel");
        AutomatedMapTestingTransitionMap = "";
    }
}

// Export UAutoTestManager::execBeginSentinelRun(FFrame&, void* const)
native function BeginSentinelRun(const string TaskDescription, const string TaskParameter, const string TagDesc);

// Export UAutoTestManager::execAddSentinelPerTimePeriodStats(FFrame&, void* const)
native function AddSentinelPerTimePeriodStats(const Vector InLocation, const Rotator InRotation);

// Export UAutoTestManager::execEndSentinelRun(FFrame&, void* const)
native function EndSentinelRun(Core.Object.EAutomatedRunResult RunResult);

function DoTravelTheWorld()
{
    GotoState('TravelTheWorld');
}

// Export UAutoTestManager::execDoSentinelActionPerLoadedMap(FFrame&, void* const)
native function DoSentinelActionPerLoadedMap();

// Export UAutoTestManager::execHandlePerLoadedMapAudioStats(FFrame&, void* const)
native function HandlePerLoadedMapAudioStats();

// Export UAutoTestManager::execGetTravelLocations(FFrame&, void* const)
native function GetTravelLocations(name LevelName, PlayerController PC, out array<Vector> TravelPoints);

// Export UAutoTestManager::execDoSentinel_MemoryAtSpecificLocation(FFrame&, void* const)
native function DoSentinel_MemoryAtSpecificLocation(const Vector InLocation, const Rotator InRotation);

// Export UAutoTestManager::execDoSentinel_PerfAtSpecificLocation(FFrame&, void* const)
native function DoSentinel_PerfAtSpecificLocation(const out Vector InLocation, const out Rotator InRotation);

// Export UAutoTestManager::execDoSentinel_ViewDependentMemoryAtSpecificLocation(FFrame&, void* const)
native function DoSentinel_ViewDependentMemoryAtSpecificLocation(const out Vector InLocation, const out Rotator InRotation);

function DoTimeBasedSentinelStatGathering()
{
    local PlayerController PC;
    local Vector ViewLocation;
    local Rotator ViewRotation;

    foreach LocalPlayerControllers(Class'PlayerController', PC)
    {
        break;        
    }    
    PC.GetPlayerViewPoint(ViewLocation, ViewRotation);
    if((SentinelTaskDescription != "FlyThrough") && SentinelTaskDescription != "FlyThroughSplitScreen")
    {
        if(PC.Pawn != none)
        {
            ViewLocation = PC.Pawn.Location;
        }
    }
    AddSentinelPerTimePeriodStats(ViewLocation, ViewRotation);
}

// Export UAutoTestManager::execDoMemoryTracking(FFrame&, void* const)
native function DoMemoryTracking();

event StartAutomatedMapTestTimer()
{
    SetTimer(5, true, 'StartAutomatedMapTestTimerWorker');
}

function StartAutomatedMapTestTimerWorker()
{
    local int LevelIdx;

    if(WorldInfo != none)
    {
        LevelIdx = 0;
        J0x1A:

        if(LevelIdx < WorldInfo.StreamingLevels.Length)
        {
            if(WorldInfo.StreamingLevels[LevelIdx].bHasLoadRequestPending == true)
            {
                LogInternal("levels not streamed in yet sleeping 5s");
                return;
            }
            ++ LevelIdx;
            goto J0x1A;
        }
        if(bCheckingForMemLeaks)
        {
            DoMemoryTracking();
        }
    }
    ClearTimer('StartAutomatedMapTestTimerWorker');
    SetTimer(15, false, 'CloseAutomatedMapTestTimer');
}

function CloseAutomatedMapTestTimer()
{
    if(Len(AutomatedMapTestingTransitionMap) > 0)
    {
        if(AutomatedTestingMapIndex < 0)
        {
            WorldInfo.Game.RestartGame();
        }        
    }
    else
    {
        WorldInfo.Game.RestartGame();
    }
}

function IncrementAutomatedTestingMapIndex()
{
    if(bUsingAutomatedTestingMapList == true)
    {
        if(bAutomatedTestingWithOpen == true)
        {
            LogInternal((("  NumMapListCyclesDone: " $ string(NumMapListCyclesDone)) $ " / ") $ string(NumAutomatedMapTestingCycles));            
        }
        else
        {
            if(AutomatedTestingMapIndex >= 0)
            {
                ++ AutomatedTestingMapIndex;
            }
        }
        LogInternal((("  NextIncrementAutomatedTestingMapIndex: " $ string(AutomatedTestingMapIndex)) $ " / ") $ string(AutomatedMapTestingList.Length));
    }
}

function IncrementNumberOfMatchesPlayed()
{
    LogInternal("  Num Matches Played: " $ string(NumberOfMatchesPlayed));
    ++ NumberOfMatchesPlayed;
}

function string GetNextAutomatedTestingMap()
{
    local string MapName;
    local PlayerController PC;
    local bool bResetMapIndex;

    if(bUsingAutomatedTestingMapList)
    {
        if((AutomatedTestingMapIndex >= 0) && Len(AutomatedMapTestingTransitionMap) > 0)
        {
            ++ AutomatedTestingMapIndex;
            AutomatedTestingMapIndex *= float(-1);
            MapName = AutomatedMapTestingTransitionMap;            
        }
        else
        {
            if(Len(AutomatedMapTestingTransitionMap) > 0)
            {
                AutomatedTestingMapIndex *= float(-1);
            }
            if(AutomatedTestingMapIndex >= AutomatedMapTestingList.Length)
            {
                AutomatedTestingMapIndex = 0;
                ++ NumMapListCyclesDone;
                bResetMapIndex = true;
            }
            MapName = AutomatedMapTestingList[AutomatedTestingMapIndex];
        }
        if(bAutomatedTestingWithOpen == true)
        {
            if((NumMapListCyclesDone >= NumAutomatedMapTestingCycles) && NumAutomatedMapTestingCycles != 0)
            {
                if(bCheckingForMemLeaks)
                {                    
                    ConsoleCommand("DEFERRED_STOPMEMTRACKING_AND_DUMP");
                }
                if(bExitOnCyclesComplete)
                {                    
                    ConsoleCommand("EXIT");
                }
            }            
        }
        else
        {
            foreach WorldInfo.AllControllers(Class'PlayerController', PC)
            {
                if(bResetMapIndex)
                {
                    ++ PC.PlayerReplicationInfo.AutomatedTestingData.NumMapListCyclesDone;
                }
                if((PC.PlayerReplicationInfo.AutomatedTestingData.NumMapListCyclesDone >= NumAutomatedMapTestingCycles) && NumAutomatedMapTestingCycles != 0)
                {
                    if(bCheckingForMemLeaks)
                    {                        
                        ConsoleCommand("DEFERRED_STOPMEMTRACKING_AND_DUMP");
                    }
                    if(bExitOnCyclesComplete)
                    {                        
                        ConsoleCommand("EXIT");
                    }
                }                
            }            
        }
        LogInternal("NextAutomatedTestingMap: " $ MapName);
        return MapName;
    }
    return "";
}

function StartMatch()
{
    local PlayerController PC;

    if(bAutomatedTestingWithOpen)
    {
        IncrementNumberOfMatchesPlayed();        
    }
    else
    {
        foreach WorldInfo.AllControllers(Class'PlayerController', PC)
        {
            PC.IncrementNumberOfMatchesPlayed();
            break;            
        }        
    }
    IncrementAutomatedTestingMapIndex();
    if(bCheckingForFragmentation)
    {        
        ConsoleCommand("MemFragCheck");
    }
    if(AutomatedTestingExecCommandToRunAtStartMatch != "")
    {
        LogInternal("AutomatedTestingExecCommandToRunAtStartMatch: " $ AutomatedTestingExecCommandToRunAtStartMatch);        
        ConsoleCommand(AutomatedTestingExecCommandToRunAtStartMatch);
    }
}

function bool CheckForSentinelRun()
{
    if(bDoingASentinelRun)
    {
        LogInternal("DoingASentinelRun! task " $ SentinelTaskDescription);
        if(SentinelTaskDescription ~= "TravelTheWorld")
        {
            WorldInfo.Game.DoTravelTheWorld();
            return true;            
        }
        else
        {
            BeginSentinelRun(SentinelTaskDescription, SentinelTaskParameter, SentinelTagDesc);
            SetTimer(3, true, 'DoTimeBasedSentinelStatGathering');
        }
    }
    return false;
}

state TravelTheWorld
{
    function BeginState(name PreviousStateName)
    {
        local PlayerController PC;

        LogInternal("BeginState TravelTheWorld");
        super(Object).BeginState(PreviousStateName);
        foreach LocalPlayerControllers(Class'PlayerController', PC)
        {
            SentinelPC = PC;
            SentinelPC.Sentinel_SetupForGamebasedTravelTheWorld();
            break;            
        }        
        SentinelPC.bIsUsingStreamingVolumes = false;
        BeginSentinelRun(SentinelTaskDescription, SentinelTaskParameter, SentinelTagDesc);
    }

    function float CalcTravelTheWorldTime(const int NumTravelLocations, const int NumRotations)
    {
        local float TotalTimeInSeconds, PerTravelLocTime;

        TotalTimeInSeconds += (float(WorldInfo.StreamingLevels.Length) * 2);
        TotalTimeInSeconds += 10;
        TotalTimeInSeconds += (float(WorldInfo.StreamingLevels.Length) * 10);
        TotalTimeInSeconds += 10;
        TotalTimeInSeconds += 10;
        PerTravelLocTime = (((((0.5 + 4) + 1) + 0.5) + 1) + (float(NumRotations) * 1.5)) + (float(NumRotations) * 1.5);
        TotalTimeInSeconds += (PerTravelLocTime * float(NumTravelLocations));
        return TotalTimeInSeconds;
    }

    function PrintOutTravelWorldTimes(const int TotalTimeInSeconds)
    {
        local int Hours, Minutes, Seconds;

        Hours = TotalTimeInSeconds / (60 * 60);
        Minutes = (TotalTimeInSeconds - ((Hours * 60) * 60)) / 60;
        Seconds = (TotalTimeInSeconds - (Minutes * 60)) - ((Hours * 60) * 60);
        LogInternal((((((((WorldInfo.GetMapName() $ ": Traveling this map will take approx TotalSeconds: ") $ string(TotalTimeInSeconds)) $ "   Hours: ") $ string(Hours)) $ "  Minutes: ") $ string(Minutes)) $ "  Seconds: ") $ string(Seconds));
    }

    function SetIncrementsForLoops(const float NumTravelLocations)
    {
        local float TimeWeGetInSeconds;

        TimeWeGetInSeconds = float(NumMinutesPerMap * 60);
        if((CalcTravelTheWorldTime(int(NumTravelLocations), 8)) < TimeWeGetInSeconds)
        {
            TravelPointsIncrement = 1;
            NumRotationsIncrement = 1;
            LogInternal((((((WorldInfo.GetMapName() $ " SetIncrementsForLoops: TravelPointsIncrement: ") $ string(TravelPointsIncrement)) $ " NumRotationsIncrement: ") $ string(NumRotationsIncrement)) $ " for NumTravelLocations: ") $ string(NumTravelLocations));
            PrintOutTravelWorldTimes(int(CalcTravelTheWorldTime(int(NumTravelLocations), 8)));            
        }
        else
        {
            if((CalcTravelTheWorldTime(int(NumTravelLocations), 4)) < TimeWeGetInSeconds)
            {
                TravelPointsIncrement = 1;
                NumRotationsIncrement = 2;
                LogInternal((((((WorldInfo.GetMapName() $ " SetIncrementsForLoops: TravelPointsIncrement: ") $ string(TravelPointsIncrement)) $ " NumRotationsIncrement: ") $ string(NumRotationsIncrement)) $ " for NumTravelLocations: ") $ string(NumTravelLocations));
                PrintOutTravelWorldTimes(int(CalcTravelTheWorldTime(int(NumTravelLocations), 4)));                
            }
            else
            {
                TravelPointsIncrement = int((CalcTravelTheWorldTime(int(NumTravelLocations), 4)) / TimeWeGetInSeconds);
                NumRotationsIncrement = 2;
                LogInternal((((((WorldInfo.GetMapName() $ " SetIncrementsForLoops: TravelPointsIncrement: ") $ string(TravelPointsIncrement)) $ " NumRotationsIncrement: ") $ string(NumRotationsIncrement)) $ " for NumTravelLocations: ") $ string(NumTravelLocations));
                PrintOutTravelWorldTimes(int(CalcTravelTheWorldTime(int(NumTravelLocations / float(TravelPointsIncrement)), 4)));
            }
        }
    }
Begin:

    SentinelPC.Sentinel_PreAcquireTravelTheWorldPoints();
    SentinelIdx = 0;
    J0x2A:

    if(SentinelIdx < WorldInfo.StreamingLevels.Length)
    {
        LogInternal("StreamLevelOut: " $ string(WorldInfo.StreamingLevels[SentinelIdx].PackageName));
        SentinelPC.ClientUpdateLevelStreamingStatus(WorldInfo.StreamingLevels[SentinelIdx].PackageName, false, false, true);
        ++ SentinelIdx;
        goto J0x2A;
    }
    Sleep(10);
    WorldInfo.ForceGarbageCollection(true);
    SentinelIdx = 0;
    J0x14D:

    if(SentinelIdx < WorldInfo.StreamingLevels.Length)
    {
        LogInternal("Gathering locations for: " $ string(WorldInfo.StreamingLevels[SentinelIdx].PackageName));
        SentinelPC.ClientUpdateLevelStreamingStatus(WorldInfo.StreamingLevels[SentinelIdx].PackageName, true, true, true);
        Sleep(7);
        GetTravelLocations(WorldInfo.StreamingLevels[SentinelIdx].PackageName, SentinelPC, SentinelTravelArray);
        DoSentinelActionPerLoadedMap();        
        SentinelPC.ConsoleCommand("FractureAllMeshesToMaximizeMemoryUsage");        
        SentinelPC.ConsoleCommand("stat memory");
        Sleep(0.5);
        DoSentinel_MemoryAtSpecificLocation(vect(0, 0, 0), rot(0, 0, 0));        
        SentinelPC.ConsoleCommand("stat memory");
        SentinelPC.ClientUpdateLevelStreamingStatus(WorldInfo.StreamingLevels[SentinelIdx].PackageName, false, false, true);
        Sleep(3);
        WorldInfo.ForceGarbageCollection(true);
        ++ SentinelIdx;
        goto J0x14D;
    }
    if(WorldInfo.StreamingLevels.Length == 0)
    {
        GetTravelLocations(WorldInfo.StreamingLevels[SentinelIdx].PackageName, SentinelPC, SentinelTravelArray);
        DoSentinelActionPerLoadedMap();        
        SentinelPC.ConsoleCommand("FractureAllMeshesToMaximizeMemoryUsage");        
        SentinelPC.ConsoleCommand("stat memory");
        Sleep(0.5);
        DoSentinel_MemoryAtSpecificLocation(vect(0, 0, 0), rot(0, 0, 0));        
        SentinelPC.ConsoleCommand("stat memory");
        Sleep(3);
        WorldInfo.ForceGarbageCollection(true);
    }
    LogInternal((WorldInfo.GetMapName() $ " COMPLETED LEVEL INTEROGATION!! Total TravelPoints: ") $ string(SentinelTravelArray.Length));
    SetIncrementsForLoops(float(SentinelTravelArray.Length));
    SentinelIdx = 0;
    J0x644:

    if(SentinelIdx < WorldInfo.StreamingLevels.Length)
    {
        if(LevelStreamingAlwaysLoaded(WorldInfo.StreamingLevels[SentinelIdx]) != none)
        {
            LogInternal("   Found a LevelStreamingAlwaysLoaded" @ string(WorldInfo.StreamingLevels[SentinelIdx].PackageName));
            SentinelPC.ClientUpdateLevelStreamingStatus(WorldInfo.StreamingLevels[SentinelIdx].PackageName, true, true, true);
        }
        ++ SentinelIdx;
        goto J0x644;
    }
    SentinelPC.bIsUsingStreamingVolumes = true;
    Sleep(10);
    SentinelPC.Sentinel_PostAcquireTravelTheWorldPoints();
    Sleep(10);
    SentinelTravelArray.AddItem(SentinelTravelArray[0];
    LogInternal("Starting Traversal");
    LogInternal("   SentinelTravelArray.length " $ string(SentinelTravelArray.Length));
    SentinelNavigationIdx = 0;
    J0x83B:

    if(SentinelNavigationIdx < SentinelTravelArray.Length)
    {
        LogInternal(((("Going to:" @ string(SentinelTravelArray[SentinelNavigationIdx])) @ string(SentinelNavigationIdx)) $ " of ") $ string(SentinelTravelArray.Length));
        SentinelPC.SetLocation(SentinelTravelArray[SentinelNavigationIdx]);
        SentinelPC.SetRotation(rot(0, 0, 0));
        Sleep(0.5);
        J0x8F3:

        bSentinelStreamingLevelStillLoading = false;
        SentinelIdx = 0;
        J0x90A:

        if(SentinelIdx < WorldInfo.StreamingLevels.Length)
        {
            if(WorldInfo.StreamingLevels[SentinelIdx].bHasLoadRequestPending == true)
            {
                LogInternal("levels not streamed in yet sleeping 1s");
                bSentinelStreamingLevelStillLoading = true;
                Sleep(1);
                goto J0x9CB;
            }
            ++ SentinelIdx;
            goto J0x90A;
        }
        J0x9CB:

        if(!(bSentinelStreamingLevelStillLoading == false))
            goto J0x8F3;
        WorldInfo.ForceGarbageCollection(true);
        Sleep(1);
        if(SentinelNavigationIdx == 0)
        {            
            ConsoleCommand("MemLeakCheck");
        }        
        SentinelPC.ConsoleCommand("stat memory");
        Sleep(0.5);
        DoSentinel_MemoryAtSpecificLocation(SentinelPC.Location, SentinelPC.Rotation);        
        SentinelPC.ConsoleCommand("stat memory");        
        SentinelPC.ConsoleCommand("stat scenerendering");        
        SentinelPC.ConsoleCommand("stat streaming");
        Sleep(1);
        SentinelIdx = 0;
        J0xB78:

        if(SentinelIdx < 8)
        {
            SentinelPC.SetRotation(rot(0, 1, 0) * float(8192 * SentinelIdx));
            Sleep(1.5);
            DoSentinel_ViewDependentMemoryAtSpecificLocation(SentinelPC.Location, SentinelPC.Rotation);
            SentinelIdx += NumRotationsIncrement;
            goto J0xB78;
        }        
        SentinelPC.ConsoleCommand("stat scenerendering");        
        SentinelPC.ConsoleCommand("stat streaming");
        SentinelIdx = 0;
        J0xCA9:

        if(SentinelIdx < 8)
        {
            SentinelPC.SetRotation(rot(0, 1, 0) * float(8192 * SentinelIdx));
            Sleep(1.5);
            DoSentinel_PerfAtSpecificLocation(SentinelPC.Location, SentinelPC.Rotation);
            SentinelIdx += NumRotationsIncrement;
            goto J0xCA9;
        }
        foreach CommandsToRunAtEachTravelTheWorldNode(CommandStringToExec,)
        {            
            ConsoleCommand(CommandStringToExec);            
        }        
        SentinelNavigationIdx += TravelPointsIncrement;
        goto J0x83B;
    }    
    ConsoleCommand("MemLeakCheck");
    LogInternal("COMPLETED!!!!!!!");    
    ConsoleCommand("exit");
    stop;        
}

state SentinelHandleCauseEventCommand
{    J0x00:
    bSentinelStreamingLevelStillLoading = false;
    SentinelIdx = 0;
    J0x17:

    if(SentinelIdx < WorldInfo.StreamingLevels.Length)
    {
        if(WorldInfo.StreamingLevels[SentinelIdx].bHasLoadRequestPending == true)
        {
            LogInternal("levels not streamed in yet sleeping 1s");
            bSentinelStreamingLevelStillLoading = true;
            Sleep(1);
            goto J0xD8;
        }
        ++ SentinelIdx;
        goto J0x17;
    }
    J0xD8:

    if(!(bSentinelStreamingLevelStillLoading == false))
        goto J0x00;
    if(WorldInfo.Game.CauseEventCommand != "")
    {
        foreach WorldInfo.AllControllers(Class'PlayerController', SentinelPC)
        {            
            SentinelPC.ConsoleCommand("ce " $ WorldInfo.Game.CauseEventCommand);
            break;            
        }        
    }
    if((SentinelTaskDescription == "FlyThrough") || SentinelTaskDescription == "FlyThroughSplitScreen")
    {
        SetTimer(0.5, true, 'DoTimeBasedSentinelStatGathering');
    }
    stop;        
}

defaultproperties
{
    NumMinutesPerMap=50
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__AutoTestManager.Sprite'
    Components(0)=Sprite
    CollisionType=ECollisionType.COLLIDE_CustomDefault
}