/*******************************************************************************
 * DecalManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DecalManager extends Actor
    native(Decal)
    config(Game)
    notplaceable
    hidecategories(Navigation);

struct native ActiveDecalInfo
{
    var export editinline DecalComponent Decal;
    var float LifetimeRemaining;

    structdefaultproperties
    {
        Decal=none
        LifetimeRemaining=0
    }
};

var protected export editinline DecalComponent DecalTemplate;
var export editinline array<export editinline DecalComponent> PoolDecals;
var int MaxActiveDecals;
var globalconfig float DecalLifeSpan;
var float DecalDepthBias;
var float OrbisDecalDepthBias;
var Vector2D DecalBlendRange;
var array<ActiveDecalInfo> ActiveDecals;

// Export UDecalManager::execAreDynamicDecalsEnabled(FFrame&, void* const)
native static final function bool AreDynamicDecalsEnabled();

event DecalFinished(DecalComponent Decal)
{
    if(Decal != none)
    {
        Decal.ResetToDefaults();
        PoolDecals[PoolDecals.Length] = Decal;
    }
}

function bool CanSpawnDecals()
{
    return AreDynamicDecalsEnabled();
}

static final function SetDecalParameters(DecalComponent TheDecal, MaterialInterface DecalMaterial, Vector DecalLocation, Rotator DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, PrimitiveComponent HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, name HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, float OrbisDepthBias, Vector2D BlendRange)
{
    TheDecal.Location = DecalLocation;
    TheDecal.Orientation = DecalOrientation;
    TheDecal.DecalRotation = DecalRotation;
    TheDecal.Width = Width;
    TheDecal.Height = Height;
    TheDecal.FarPlane = Thickness * 0.5;
    TheDecal.NearPlane = -TheDecal.FarPlane;
    TheDecal.bNoClip = bNoClip;
    TheDecal.HitComponent = HitComponent;
    TheDecal.HitBone = HitBone;
    TheDecal.HitNodeIndex = HitNodeIndex;
    TheDecal.HitLevelIndex = HitLevelIndex;
    TheDecal.SetDecalMaterial(DecalMaterial);
    TheDecal.bProjectOnTerrain = bProjectOnTerrain;
    TheDecal.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
    TheDecal.FracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
    TheDecal.DepthBias = DepthBias;
    TheDecal.OrbisDepthBias = OrbisDepthBias;
    TheDecal.BlendRange = BlendRange;
}

protected function DecalComponent GetPooledComponent()
{
    local int I;
    local editinline DecalComponent Result;

    J0x00:
    if(PoolDecals.Length > 0)
    {
        I = PoolDecals.Length - 1;
        Result = PoolDecals[I];
        PoolDecals.Remove(I, 1;
        if(((Result != none) && !Result.IsPendingKill()) && !Result.IsWaitingForResetToDefaultsToComplete())
        {
            goto J0xC8;            
        }
        else
        {
            Result = none;
        }
        goto J0x00;
    }
    J0xC8:

    if(Result == none)
    {
        if((MaxActiveDecals > 0) && ActiveDecals.Length >= MaxActiveDecals)
        {
            Result = ActiveDecals[0].Decal;
            Result.ResetToDefaults();
            ActiveDecals.Remove(0, 1;
        }
        Result = new (self) DecalTemplate.Class (DecalTemplate);
    }
    return Result;
}

function DecalComponent SpawnDecal(MaterialInterface DecalMaterial, Vector DecalLocation, Rotator DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, optional float DecalRotation, optional PrimitiveComponent HitComponent, optional bool bProjectOnTerrain, optional bool bProjectOnSkeletalMeshes, optional name HitBone, optional int HitNodeIndex, optional int HitLevelIndex, optional float InDecalLifeSpan, optional int InFracturedStaticMeshComponentIndex, optional float InDepthBias, optional float InOrbisDepthBias, optional Vector2D InBlendRange)
{
    local editinline DecalComponent Result;
    local ActiveDecalInfo DecalInfo;

    DecalRotation = FRand() * 360;    
    bProjectOnTerrain = true;        
    HitNodeIndex = -1;
    HitLevelIndex = -1;
    InDecalLifeSpan = DecalLifeSpan;
    InFracturedStaticMeshComponentIndex = -1;
    InDepthBias = DecalDepthBias;
    InOrbisDepthBias = OrbisDecalDepthBias;
    InBlendRange = DecalBlendRange;
    if(!CanSpawnDecals())
    {
        return none;
    }
    Result = GetPooledComponent();
    SetDecalParameters(Result, DecalMaterial, DecalLocation, DecalOrientation, Width, Height, Thickness, bNoClip, DecalRotation, HitComponent, bProjectOnTerrain, bProjectOnSkeletalMeshes, HitBone, HitNodeIndex, HitLevelIndex, -1, InDepthBias, InOrbisDepthBias, InBlendRange);
    AttachComponent(Result);
    DecalInfo.Decal = Result;
    DecalInfo.LifetimeRemaining = InDecalLifeSpan;
    ActiveDecals.AddItem(DecalInfo;
    return Result;
}

function Reset()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < ActiveDecals.Length)
    {
        DecalFinished(ActiveDecals[I].Decal);
        ++ I;
        goto J0x0B;
    }
    ActiveDecals.Length = 0;
}

defaultproperties
{
    begin object name=BaseDecal class=DecalComponent
        ReplacementPrimitive=none
        bIgnoreOwnerHidden=true
    object end
    // Reference: DecalComponent'Default__DecalManager.BaseDecal'
    DecalTemplate=BaseDecal
    DecalLifeSpan=10
    DecalDepthBias=-6E-05
    OrbisDecalDepthBias=-1.6
    DecalBlendRange=(X=89.5,Y=180)
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    TickGroup=ETickingGroup.TG_DuringAsyncWork
}