/*******************************************************************************
 * Font generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Font extends Object
    native
    hidecategories(Object);

const NULLCHARACTER = 127;

struct native atomic immutable FontCharacter
{
    /** this struct is serialized using binary serialization so any changes to it require a package version bump */
    var() int StartU;
    /** this struct is serialized using binary serialization so any changes to it require a package version bump */
    var() int StartV;
    /** this struct is serialized using binary serialization so any changes to it require a package version bump */
    var() int USize;
    /** this struct is serialized using binary serialization so any changes to it require a package version bump */
    var() int VSize;
    /** this struct is serialized using binary serialization so any changes to it require a package version bump */
    var() byte TextureIndex;
    /** this struct is serialized using binary serialization so any changes to it require a package version bump */
    var() int VerticalOffset;

    structdefaultproperties
    {
        StartU=0
        StartV=0
        USize=0
        VSize=0
        TextureIndex=0
        VerticalOffset=0
    }
};

/**  
 *List of characters in the font.  For a MultiFont, this will include all characters in all sub-fonts!  Thus,
 *    the number of characters in this array isn't necessary the number of characters available in the font
 */
var() editinline array<editinline FontCharacter> Characters;
var array<Texture2D> Textures;
var private native const map<0, 0> CharRemap;
var int IsRemapped;
/** Font metrics. */
var() float EmScale;
var() float Ascent;
var() float Descent;
var() float Leading;
/** Default horizontal spacing between characters when rendering text with this font */
var() int Kerning;
/** Options used when importing this font */
var() FontImportOptionsData ImportOptions;
var transient int NumCharacters;
var transient array<int> MaxCharHeight;
/** Scale to apply to the font. */
var() const float ScalingFactor;

// Export UFont::execGetResolutionPageIndex(FFrame&, void* const)
native function int GetResolutionPageIndex(float HeightTest);

// Export UFont::execGetScalingFactor(FFrame&, void* const)
native function float GetScalingFactor(float HeightTest);

// Export UFont::execGetAuthoredViewportHeight(FFrame&, void* const)
native final function float GetAuthoredViewportHeight(float ViewportHeight);

// Export UFont::execGetMaxCharHeight(FFrame&, void* const)
native function float GetMaxCharHeight();

// Export UFont::execGetStringHeightAndWidth(FFrame&, void* const)
native function GetStringHeightAndWidth(const out string InString, out int Height, out int Width);

defaultproperties
{
    ImportOptions=(FontName="Arial",Height=16,bEnableAntialiasing=true,bEnableBold=false,bEnableItalic=false,bEnableUnderline=false,bAlphaOnly=false,CharacterSet=EFontImportCharacterSet.FontICS_Default,Chars="",UnicodeRange="",CharsFilePath="",CharsFileWildcard="",bCreatePrintableOnly=false,bIncludeASCIIRange=true,ForegroundColor=(R=1,G=1,B=1,A=1),bEnableDropShadow=false,TexturePageWidth=256,TexturePageMaxHeight=256,XPadding=1,YPadding=1,ExtendBoxTop=0,ExtendBoxBottom=0,ExtendBoxRight=0,ExtendBoxLeft=0,bEnableLegacyMode=false,Kerning=0,bUseDistanceFieldAlpha=false,DistanceFieldScaleFactor=16,DistanceFieldScanRadiusScale=1)
    ScalingFactor=1
}