/*******************************************************************************
 * Input generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Input extends Interaction
    transient
    native(UserInterface)
    config(Input)
    hidecategories(Object,UIRoot);

struct native KeyBind
{
    var config name Name;
    var config string Command;
    var config bool Control;
    var config bool Shift;
    var config bool Alt;
    var config bool bIgnoreCtrl;
    var config bool bIgnoreShift;
    var config bool bIgnoreAlt;

    structdefaultproperties
    {
        Name=None
        Command=""
        Control=false
        Shift=false
        Alt=false
        bIgnoreCtrl=false
        bIgnoreShift=false
        bIgnoreAlt=false
    }
};

struct native TouchTracker
{
    var int Handle;
    var int TouchpadIndex;
    var Vector2D Location;
    var Core.Object.EInputEvent EventType;
    var bool bTrapInput;

    structdefaultproperties
    {
        Handle=0
        TouchpadIndex=0
        Location=(X=0,Y=0)
        EventType=EInputEvent.IE_Pressed
        bTrapInput=false
    }
};

var config array<config KeyBind> Bindings;
var protectedwrite array<name> PressedKeys;
var const int CurrentControllerId;
var const Core.Object.EInputEvent CurrentEvent;
var const float CurrentDelta;
var const float CurrentDeltaTime;
var native const map<0, 0> NameToPtr;
var init native const array<init Pointer> AxisArray;
var const array<SeqEvent_Input> CachedInputEvents;
var const array<SeqEvent_AnalogInput> CachedAnalogInputEvents;
var const array<SeqEvent_TouchInput> CachedTouchInputEvents;
var const array<TouchTracker> CurrentTouches;

// Export UInput::execResetInput(FFrame&, void* const)
native function ResetInput();

// Export UInput::execGetBind(FFrame&, void* const)
native function string GetBind(const out name Key);

exec function SetBind(const out name BindName, string Command)
{
    local KeyBind NewBind;
    local int BindIndex;

    if((Left(Command, 1) == "\"") && Right(Command, 1) == "\"")
    {
        Command = Mid(Command, 1, Len(Command) - 2);
    }
    BindIndex = Bindings.Length - 1;
    J0x66:

    if(BindIndex >= 0)
    {
        if(Bindings[BindIndex].Name == BindName)
        {
            Bindings[BindIndex].Command = Command;
            SaveConfig();
            return;
        }
        -- BindIndex;
        goto J0x66;
    }
    NewBind.Name = BindName;
    NewBind.Command = Command;
    Bindings[Bindings.Length] = NewBind;
    SaveConfig();
}
