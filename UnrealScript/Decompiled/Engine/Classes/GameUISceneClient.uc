/*******************************************************************************
 * GameUISceneClient generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameUISceneClient extends UISceneClient within UIInteraction
    transient
    native(UIPrivate)
    config(UI)
    hidecategories(Object,UIRoot);

var const transient float LatestDeltaTime;
var const transient Double DoubleClickStartTime;
var const transient IntPoint DoubleClickStartPosition;
var native const transient Map_Mirror InitialPressedKeys;
var const transient bool bUpdateInputProcessingStatus;
var transient bool bUpdateSceneViewportSizes;
var config bool bEnableDebugInput;
var config bool bRenderDebugInfo;
var const config bool bCaptureUnprocessedInput;
var const transient array<name> NavAliases;
var const transient array<name> AxisInputKeys;

// Export UGameUISceneClient::execGetCurrentNetMode(FFrame&, void* const)
native static final function WorldInfo.ENetMode GetCurrentNetMode();

// Export UGameUISceneClient::execRequestInputProcessingUpdate(FFrame&, void* const)
native final function RequestInputProcessingUpdate();

// Export UGameUISceneClient::execCanUnpauseInternalUI(FFrame&, void* const)
native final function bool CanUnpauseInternalUI();

event PauseGame(bool bDesiredPauseState, optional int PlayerIndex)
{
    local PlayerController PlayerOwner;

    PlayerIndex = 0;
    if(Outer.Outer.Outer.GamePlayers.Length > 0)
    {
        PlayerIndex = Clamp(PlayerIndex, 0, Outer.Outer.Outer.GamePlayers.Length - 1);
        PlayerOwner = Outer.Outer.Outer.GamePlayers[PlayerIndex].Actor;
        if(PlayerOwner != none)
        {
            PlayerOwner.SetPause(bDesiredPauseState, CanUnpauseInternalUI);
        }
    }
}

function NotifyClientTravel(PlayerController TravellingPlayer, string TravelURL, Actor.ETravelType TravelType, bool bIsSeamlessTravel);

function NotifyGameSessionEnded();

function NotifyPlayerAdded(int PlayerIndex, LocalPlayer AddedPlayer)
{
    if(IsUIActive(2))
    {
        RequestInputProcessingUpdate();
    }
}

function NotifyPlayerRemoved(int PlayerIndex, LocalPlayer RemovedPlayer)
{
    if(IsUIActive(2))
    {
        RequestInputProcessingUpdate();
    }
}

function int FindLocalPlayerIndex(Player P)
{
    local Engine Engine;
    local int I;

    Engine = Class'Engine'.static.GetEngine();
    I = 0;
    J0x34:

    if(I < Engine.GamePlayers.Length)
    {
        if(Engine.GamePlayers[I] == P)
        {
            return I;
        }
        ++ I;
        goto J0x34;
    }
    return 0;
}

defaultproperties
{
    bEnableDebugInput=true
    bCaptureUnprocessedInput=true
    NavAliases(0)=UIKEY_NavFocusUp
    NavAliases(1)=UIKEY_NavFocusDown
    NavAliases(2)=UIKEY_NavFocusLeft
    NavAliases(3)=UIKEY_NavFocusRight
    AxisInputKeys(0)=KEY_Gamepad_LeftStick_Up
    AxisInputKeys(1)=KEY_Gamepad_LeftStick_Down
    AxisInputKeys(2)=KEY_Gamepad_LeftStick_Right
    AxisInputKeys(3)=KEY_Gamepad_LeftStick_Left
    AxisInputKeys(4)=KEY_Gamepad_RightStick_Up
    AxisInputKeys(5)=KEY_Gamepad_RightStick_Down
    AxisInputKeys(6)=KEY_Gamepad_RightStick_Right
    AxisInputKeys(7)=KEY_Gamepad_RightStick_Left
    AxisInputKeys(8)=KEY_SIXAXIS_AccelX
    AxisInputKeys(9)=KEY_SIXAXIS_AccelY
    AxisInputKeys(10)=KEY_SIXAXIS_AccelZ
    AxisInputKeys(11)=KEY_SIXAXIS_Gyro
    AxisInputKeys(12)=KEY_XboxTypeS_LeftX
    AxisInputKeys(13)=KEY_XboxTypeS_LeftY
    AxisInputKeys(14)=KEY_XboxTypeS_RightX
    AxisInputKeys(15)=KEY_XboxTypeS_RightY
}