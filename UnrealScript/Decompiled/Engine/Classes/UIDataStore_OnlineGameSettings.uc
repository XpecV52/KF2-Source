/*******************************************************************************
 * UIDataStore_OnlineGameSettings generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataStore_OnlineGameSettings extends UIDataStore_Settings
    abstract
    transient
    native(UIPrivate)
    config(Game)
    hidecategories(Object,UIRoot);

struct native GameSettingsCfg
{
    var class<OnlineGameSettings> GameSettingsClass;
    var UIDataProvider_Settings Provider;
    var OnlineGameSettings GameSettings;
    var name SettingsName;

    structdefaultproperties
    {
        GameSettingsClass=none
        Provider=none
        GameSettings=none
        SettingsName=None
    }
};

var const array<GameSettingsCfg> GameSettingsCfgList;
var const class<UIDataProvider_Settings> SettingsProviderClass;
var int SelectedIndex;

event bool CreateGame(byte ControllerIndex)
{
    local OnlineSubsystem OnlineSub;
    local OnlineGameInterface GameInterface;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        GameInterface = OnlineSub.GameInterface;
        if(NotEqual_InterfaceInterface(GameInterface, (none)))
        {
            return GameInterface.CreateOnlineGame(ControllerIndex, 'Game', GameSettingsCfgList[SelectedIndex].GameSettings);            
        }
        else
        {
            WarnInternal("OnlineSubsystem does not support the game interface. Can't create online games");
        }        
    }
    else
    {
        WarnInternal("No OnlineSubsystem present. Can't create online games");
    }
    return false;
}

event OnlineGameSettings GetCurrentGameSettings()
{
    return GameSettingsCfgList[SelectedIndex].GameSettings;
}

event UIDataProvider_Settings GetCurrentProvider()
{
    return GameSettingsCfgList[SelectedIndex].Provider;
}

event SetCurrentByIndex(int NewIndex)
{
    if((NewIndex >= 0) && NewIndex < GameSettingsCfgList.Length)
    {
        SelectedIndex = NewIndex;
        RefreshSubscribers(,, true, GetCurrentProvider());        
    }
    else
    {
        LogInternal((("Invalid index (" $ string(NewIndex)) $ ") specified to SetCurrentByIndex() on ") $ string(self));
    }
}

event SetCurrentByName(name SettingsName)
{
    local int Index;

    Index = 0;
    J0x0B:

    if(Index < GameSettingsCfgList.Length)
    {
        if(GameSettingsCfgList[Index].SettingsName == SettingsName)
        {
            SetCurrentByIndex(Index);
            return;
        }
        ++ Index;
        goto J0x0B;
    }
    LogInternal((("Invalid name (" $ string(SettingsName)) $ ") specified to SetCurrentByName() on ") $ string(self));
}

event MoveToNext()
{
    local int NewIndex;

    NewIndex = Min(SelectedIndex + 1, GameSettingsCfgList.Length - 1);
    if(SelectedIndex != NewIndex)
    {
        SetCurrentByIndex(NewIndex);
    }
}

event MoveToPrevious()
{
    local int NewIndex;

    NewIndex = Max(SelectedIndex - 1, 0);
    if(SelectedIndex != NewIndex)
    {
        SetCurrentByIndex(NewIndex);
    }
}

event Registered(LocalPlayer PlayerOwner)
{
    super(UIDataStore).Registered(PlayerOwner);
}

event Unregistered(LocalPlayer PlayerOwner)
{
    super(UIDataStore).Unregistered(PlayerOwner);
}

defaultproperties
{
    SettingsProviderClass=Class'UIDataProvider_Settings'
    Tag=OnlineGameSettings
}