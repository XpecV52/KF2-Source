/*******************************************************************************
 * AnimNodeSlot generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AnimNodeSlot extends AnimNodeBlendBase
    native(Anim)
    hidecategories(Object,Object,Object,Object);

var const bool bIsPlayingCustomAnim;
/**  
 *If TRUE (default), then forward the AnimEnd notification when we start blending out the animation.
 * This usually improves transitions and blends, as we can start playing new animations as soon as this one
 * starts blending out, as opposed to waiting until it is fully blended out.
 * Setting this to FALSE, will trigger the standard behavior of triggering AnimEnd notifies when the animation is really done playing.
 */
var() bool bEarlyAnimEndNotify;
/**  
 *if TRUE, do not blend when the Skeletal Mesh is not visible.
 * Optimization to save on blending time when meshes are not rendered.
 * Instant switch instead.
 */
var() bool bSkipBlendWhenNotRendered;
/**  
 *If TRUE, Additive Animations override the source input.
 *  If FALSE, Additive Animations are added to source input. (DEFAULT)
 */
var() bool bAdditiveAnimationsOverrideSource;
var const transient bool bIsBeingUsedByInterpGroup;
/** allow bPauseAnims to be supported for this node type if we want */
var() bool bDontAddToAlwaysTickArray;
var bool bNoNotifies;
var const float PendingBlendOutTime;
var const int CustomChildIndex;
var const int TargetChildIndex;
var array<float> TargetWeight;
var const float BlendTimeToGo;

// Export UAnimNodeSlot::execPlayCustomAnim(FFrame&, void* const)
native final function float PlayCustomAnim(name AnimName, float Rate, optional float BlendInTime, optional float BlendOutTime, optional bool bLooping, optional bool bOverride, optional float StartTime, optional float EndTime);

// Export UAnimNodeSlot::execPlayCustomAnimByDuration(FFrame&, void* const)
native final function bool PlayCustomAnimByDuration(name AnimName, float Duration, optional float BlendInTime, optional float BlendOutTime, optional bool bLooping, optional bool bOverride)
{
    bOverride = true;                                
}

// Export UAnimNodeSlot::execGetPlayedAnimation(FFrame&, void* const)
native final function name GetPlayedAnimation();

// Export UAnimNodeSlot::execStopCustomAnim(FFrame&, void* const)
native final function StopCustomAnim(float BlendOutTime);

// Export UAnimNodeSlot::execSetAllowPauseAnims(FFrame&, void* const)
native final function SetAllowPauseAnims(bool bSet);

// Export UAnimNodeSlot::execSetCustomAnim(FFrame&, void* const)
native final function SetCustomAnim(name AnimName);

// Export UAnimNodeSlot::execSetActorAnimEndNotification(FFrame&, void* const)
native final function SetActorAnimEndNotification(bool bNewStatus);

// Export UAnimNodeSlot::execSetNotifyWeightThreshold(FFrame&, void* const)
native final function SetNotifyWeightThreshold(float Threshold);

// Export UAnimNodeSlot::execGetCustomAnimNodeSeq(FFrame&, void* const)
native final function AnimNodeSequence GetCustomAnimNodeSeq();

// Export UAnimNodeSlot::execSetRootBoneAxisOption(FFrame&, void* const)
native final function SetRootBoneAxisOption(optional AnimNodeSequence.ERootBoneAxis AxisX, optional AnimNodeSequence.ERootBoneAxis AxisY, optional AnimNodeSequence.ERootBoneAxis AxisZ)
{
    AxisX = 0;
    AxisY = 0;
    AxisZ = 0;                    
}

// Export UAnimNodeSlot::execSetRootBoneRotationOption(FFrame&, void* const)
native final function SetRootBoneRotationOption(optional AnimNodeSequence.ERootRotationOption AxisX, optional AnimNodeSequence.ERootRotationOption AxisY, optional AnimNodeSequence.ERootRotationOption AxisZ)
{
    AxisX = 0;
    AxisY = 0;
    AxisZ = 0;                    
}

// Export UAnimNodeSlot::execTickChildWeights(FFrame&, void* const)
native final function TickChildWeights(float DeltaSeconds);

defaultproperties
{
    bEarlyAnimEndNotify=true
    TargetWeight(0)=1
    Children(0)=(Name=Source,Anim=none,Weight=1,BlendWeight=0,bMirrorSkeleton=false,bIsAdditive=false,DrawY=0)
    Children(1)=(Name=Channel 01,Anim=none,Weight=0,BlendWeight=0,bMirrorSkeleton=false,bIsAdditive=false,DrawY=0)
    NodeName=SlotName
}