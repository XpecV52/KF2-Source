/*******************************************************************************
 * CameraModifier_CameraShake generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CameraModifier_CameraShake extends CameraModifier
    native(Camera);

struct native CameraShakeInstance
{
    var CameraShake SourceShake;
    var name SourceShakeName;
    var float OscillatorTimeRemaining;
    var bool bBlendingIn;
    var float CurrentBlendInTime;
    var bool bBlendingOut;
    var float CurrentBlendOutTime;
    var Vector LocSinOffset;
    var Vector RotSinOffset;
    var float FOVSinOffset;
    var float Scale;
    var CameraAnimInst AnimInst;
    var Camera.ECameraAnimPlaySpace PlaySpace;
    var Matrix UserPlaySpaceMatrix;

    structdefaultproperties
    {
        SourceShake=none
        SourceShakeName=None
        OscillatorTimeRemaining=0
        bBlendingIn=false
        CurrentBlendInTime=0
        bBlendingOut=false
        CurrentBlendOutTime=0
        LocSinOffset=(X=0,Y=0,Z=0)
        RotSinOffset=(X=0,Y=0,Z=0)
        FOVSinOffset=0
        Scale=0
        AnimInst=none
        PlaySpace=ECameraAnimPlaySpace.CAPS_CameraLocal
        UserPlaySpaceMatrix=(XPlane=(W=0,X=0,Y=0,Z=0),YPlane=(W=0,X=0,Y=0,Z=0),ZPlane=(W=0,X=0,Y=0,Z=0),WPlane=(W=0,X=0,Y=0,Z=0))
    }
};

var array<CameraShakeInstance> ActiveShakes;
/** Scalar applied to all camera shakes in splitscreen. Normally used to dampen, since shakes feel more intense in a smaller viewport. */
var() protected const float SplitScreenShakeScale;

protected static function float InitializeOffset(const out FOscillator Param)
{
    switch(Param.InitialOffset)
    {
        case 0:
            return (FRand() * float(2)) * 3.141593;
            break;
        case 1:
            return 0;
            break;
        default:
            break;
    }
    return 0;
}

protected function ReinitShake(int ActiveShakeIdx, float Scale)
{
    local CameraShake SourceShake;
    local float Duration;
    local bool bRandomStart, bLoop;

    if(Class'Engine'.static.IsSplitScreen())
    {
        Scale *= SplitScreenShakeScale;
    }
    ActiveShakes[ActiveShakeIdx].Scale = Scale;
    SourceShake = ActiveShakes[ActiveShakeIdx].SourceShake;
    if(SourceShake.OscillationDuration != 0)
    {
        ActiveShakes[ActiveShakeIdx].OscillatorTimeRemaining = SourceShake.OscillationDuration;
        if(ActiveShakes[ActiveShakeIdx].bBlendingOut)
        {
            ActiveShakes[ActiveShakeIdx].bBlendingOut = false;
            ActiveShakes[ActiveShakeIdx].CurrentBlendOutTime = 0;
            ActiveShakes[ActiveShakeIdx].bBlendingIn = true;
            ActiveShakes[ActiveShakeIdx].CurrentBlendInTime = ActiveShakes[ActiveShakeIdx].SourceShake.OscillationBlendInTime * (1 - (ActiveShakes[ActiveShakeIdx].CurrentBlendOutTime / ActiveShakes[ActiveShakeIdx].SourceShake.OscillationBlendOutTime));
        }
    }
    if(SourceShake.Anim != none)
    {
        if(SourceShake.bRandomAnimSegment)
        {
            bLoop = true;
            bRandomStart = true;
            Duration = SourceShake.RandomAnimSegmentDuration;
        }
        ActiveShakes[ActiveShakeIdx].AnimInst = CameraOwner.PlayCameraAnim(SourceShake.Anim, SourceShake.AnimPlayRate, Scale, SourceShake.AnimBlendInTime, SourceShake.AnimBlendOutTime, bLoop, bRandomStart, Duration, true);
    }
}

protected function CameraShakeInstance InitializeShake(CameraShake NewShake, float Scale, Camera.ECameraAnimPlaySpace PlaySpace, optional Rotator UserPlaySpaceRot)
{
    local CameraShakeInstance Inst;
    local float Duration;
    local bool bRandomStart, bLoop;

    Inst.SourceShakeName = NewShake.Name;
    Inst.SourceShake = new (self) NewShake.Class;
    Inst.SourceShake.OscillationDuration = NewShake.OscillationDuration;
    Inst.SourceShake.OscillationBlendInTime = NewShake.OscillationBlendInTime;
    Inst.SourceShake.OscillationBlendOutTime = NewShake.OscillationBlendOutTime;
    Inst.SourceShake.RotOscillation = NewShake.RotOscillation;
    Inst.SourceShake.LocOscillation = NewShake.LocOscillation;
    Inst.SourceShake.FOVOscillation = NewShake.FOVOscillation;
    Inst.SourceShake.Anim = NewShake.Anim;
    Inst.SourceShake.AnimPlayRate = NewShake.AnimPlayRate;
    Inst.SourceShake.AnimBlendInTime = NewShake.AnimBlendInTime;
    Inst.SourceShake.AnimBlendOutTime = NewShake.AnimBlendOutTime;
    Inst.SourceShake.bRandomAnimSegment = NewShake.bRandomAnimSegment;
    Inst.SourceShake.RandomAnimSegmentDuration = NewShake.RandomAnimSegmentDuration;
    Inst.Scale = Scale;
    if(Class'Engine'.static.IsSplitScreen())
    {
        Scale *= SplitScreenShakeScale;
    }
    if(NewShake.OscillationDuration != 0)
    {
        Inst.RotSinOffset.X = InitializeOffset(NewShake.RotOscillation.Pitch);
        Inst.RotSinOffset.Y = InitializeOffset(NewShake.RotOscillation.Yaw);
        Inst.RotSinOffset.Z = InitializeOffset(NewShake.RotOscillation.Roll);
        Inst.LocSinOffset.X = InitializeOffset(NewShake.LocOscillation.X);
        Inst.LocSinOffset.Y = InitializeOffset(NewShake.LocOscillation.Y);
        Inst.LocSinOffset.Z = InitializeOffset(NewShake.LocOscillation.Z);
        Inst.FOVSinOffset = InitializeOffset(NewShake.FOVOscillation);
        Inst.OscillatorTimeRemaining = NewShake.OscillationDuration;
        if(NewShake.OscillationBlendInTime > 0)
        {
            Inst.bBlendingIn = true;
            Inst.CurrentBlendInTime = 0;
        }
    }
    if(NewShake.Anim != none)
    {
        if(NewShake.bRandomAnimSegment)
        {
            bLoop = true;
            bRandomStart = true;
            Duration = NewShake.RandomAnimSegmentDuration;
        }
        if(Scale > 0)
        {
            Inst.AnimInst = CameraOwner.PlayCameraAnim(NewShake.Anim, NewShake.AnimPlayRate, Scale, NewShake.AnimBlendInTime, NewShake.AnimBlendOutTime, bLoop, bRandomStart, Duration, NewShake.bSingleInstance);
            if((PlaySpace != 0) && Inst.AnimInst != none)
            {
                Inst.AnimInst.SetPlaySpace(PlaySpace, UserPlaySpaceRot);
            }
        }
    }
    Inst.PlaySpace = PlaySpace;
    if(Inst.PlaySpace == 2)
    {
        Inst.UserPlaySpaceMatrix = MakeRotationMatrix(UserPlaySpaceRot);
    }
    return Inst;
}

function AddCameraShake(CameraShake NewShake, float Scale, optional Camera.ECameraAnimPlaySpace PlaySpace, optional Rotator UserPlaySpaceRot)
{
    local int ShakeIdx, NumShakes;

    PlaySpace = 0;    
    if(NewShake != none)
    {
        if(NewShake.bSingleInstance)
        {
            ShakeIdx = ActiveShakes.Find('SourceShakeName', NewShake.Name;
            if(ShakeIdx != -1)
            {
                ReinitShake(ShakeIdx, Scale);
                return;
            }
        }
        NumShakes = ActiveShakes.Length;
        ActiveShakes[NumShakes] = InitializeShake(NewShake, Scale, PlaySpace, UserPlaySpaceRot);
    }
}

function RemoveCameraShake(CameraShake Shake)
{
    local int Idx;
    local CameraAnimInst AnimInst;

    Idx = ActiveShakes.Find('SourceShakeName', Shake.Name;
    if(Idx != -1)
    {
        AnimInst = ActiveShakes[Idx].AnimInst;
        if((AnimInst != none) && !AnimInst.bFinished)
        {
            CameraOwner.StopCameraAnim(AnimInst, true);
        }
        ActiveShakes.Remove(Idx, 1;
    }
}

function RemoveAllCameraShakes()
{
    local int Idx;
    local CameraAnimInst AnimInst;

    Idx = 0;
    J0x0B:

    if(Idx < ActiveShakes.Length)
    {
        AnimInst = ActiveShakes[Idx].AnimInst;
        if((AnimInst != none) && !AnimInst.bFinished)
        {
            CameraOwner.StopCameraAnim(AnimInst, true);
        }
        ++ Idx;
        goto J0x0B;
    }
    ActiveShakes.Length = 0;
}

// Export UCameraModifier_CameraShake::execUpdateCameraShake(FFrame&, void* const)
native function UpdateCameraShake(float DeltaTime, out CameraShakeInstance Shake, out TPOV OutPOV);

// Export UCameraModifier_CameraShake::execModifyCamera(FFrame&, void* const)
native function bool ModifyCamera(Camera Camera, float DeltaTime, out TPOV OutPOV);

defaultproperties
{
    SplitScreenShakeScale=0.5
}