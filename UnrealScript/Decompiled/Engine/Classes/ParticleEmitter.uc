/*******************************************************************************
 * ParticleEmitter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ParticleEmitter extends Object
    abstract
    native(Particle)
    editinlinenew
    hidecategories(Object);

enum EParticleBurstMethod
{
    EPBM_Instant,
    EPBM_Interpolated,
    EPBM_MAX
};

enum EParticleSubUVInterpMethod
{
    PSUVIM_None,
    PSUVIM_Linear,
    PSUVIM_Linear_Blend,
    PSUVIM_Random,
    PSUVIM_Random_Blend,
    PSUVIM_MAX
};

enum EEmitterRenderMode
{
    ERM_Normal,
    ERM_Point,
    ERM_Cross,
    ERM_None,
    ERM_MAX
};

struct native ParticleBurst
{
    /** The number of particles to burst */
    var() int Count;
    /** If >= 0, use as a range [CountLow..Count] */
    var() int CountLow;
    /** The time at which to burst them (0..1: emitter lifetime) */
    var() float Time;

    structdefaultproperties
    {
        Count=0
        CountLow=-1
        Time=0
    }
};

/** The name of the emitter. */
var(Particle) name EmitterName;
var transient int SubUVDataOffset;
/**  
 *How to render the emitter particles. Can be one of the following:
 *               ERM_Normal      - As the intended sprite/mesh
 *               ERM_Point       - As a 2x2 pixel block with no scaling and the color set in EmitterEditorColor
 *               ERM_Cross       - As a cross of lines, scaled to the size of the particle in EmitterEditorColor
 *               ERM_None        - Do not render
 */
var(Cascade) ParticleEmitter.EEmitterRenderMode EmitterRenderMode;
/** The color of the emitter in the curve editor and debug rendering modes. */
var(Cascade) editoronly Color EmitterEditorColor;
var export editinline array<export editinline ParticleLODLevel> LODLevels;
var bool ConvertedModules;
/** This value indicates the emitter should be drawn 'collapsed' in Cascade */
var(Cascade) editoronly bool bCollapsed;
var transient bool bIsSoloing;
var bool bCookedOut;
var int PeakActiveParticles;
/** Initial allocation count - overrides calculated peak count if > 0 */
var(Particle) int InitialAllocationCount;
/**  
 *Scales the spawn rate of this emitter when the engine is running in medium or low detail mode.
 * This can be used to optimize particle draw cost in splitscreen.
 * A value of 0 effectively disables this emitter outside of high detail mode,
 * And this does not affect spawn per unit, unless the value is 0.
 */
var(Particle) float MediumDetailSpawnRateScale;
/** The Flex container to emit into */
var(Flex) FlexContainer FlexContainerTemplate;
var(Flex) float FlexSmoothScreenRadius;
var(Flex) float FlexSmoothDepthRadius;
var(Flex) float FlexCutoffThickness;

// Export UParticleEmitter::execGetMaxLifespan(FFrame&, void* const)
native function float GetMaxLifespan(float InComponentDelay);

defaultproperties
{
    EmitterName=Particle Emitter
    EmitterEditorColor=(B=150,G=150,R=0,A=255)
    ConvertedModules=true
    MediumDetailSpawnRateScale=1
    FlexSmoothScreenRadius=5
    FlexSmoothDepthRadius=5
    FlexCutoffThickness=10
}