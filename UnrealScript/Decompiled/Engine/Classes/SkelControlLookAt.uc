/*******************************************************************************
 * SkelControlLookAt generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SkelControlLookAt extends SkelControlBase
    native(Anim)
    hidecategories(Object,Object);

/** Position in world space that this bone is looking at. */
var(LookAt) Vector TargetLocation;
/** Reference frame that TargetLocation is defined in. */
var(LookAt) SkelControlBase.EBoneControlSpace TargetLocationSpace;
/** Axis of the controlled bone that you wish to point at the TargetLocation. */
var(LookAt) Core.Object.EAxis LookAtAxis;
/** Axis of bone to point upwards. Cannot be the same as LookAtAxis. */
var(LookAt) Core.Object.EAxis UpAxis;
/** Rotation space to check limits within */
var(Limit) SkelControlBase.EBoneControlSpace AllowRotationSpace;
/** Name of bone used if TargetLocationSpace is BCS_OtherBoneSpace. */
var(LookAt) name TargetSpaceBoneName;
/** Whether to invert the LookAtAxis, so it points away from the TargetLocation. */
var(LookAt) bool bInvertLookAtAxis;
/** If you want to also define which axis should try to point 'up' (world +Z). */
var(LookAt) bool bDefineUpAxis;
/** Whether to invert the UpAxis, so it points down instead. */
var(LookAt) bool bInvertUpAxis;
/** If true, only allow a certain adjustment from the reference pose of the bone. */
var(Limit) bool bEnableLimit;
/** By default limit is based on ref pose of the character */
var(Limit) bool bLimitBasedOnRefPose;
/** Interp back to zero strength if limit surpassed */
var(Limit) bool bDisableBeyondLimit;
/** Call event to notify owner of limit break */
var(Limit) bool bNotifyBeyondLimit;
/** If true, draw a cone in the editor to indicate the maximum allowed movement of the bone. */
var(Limit) bool bShowLimit;
/** Per rotation axis filtering */
var(Limit) bool bAllowRotationX;
var(Limit) bool bAllowRotationY;
var(Limit) bool bAllowRotationZ;
/** Interpolation speed for TargetLocation to DesiredTargetLocation */
var(LookAt) float TargetLocationInterpSpeed;
var Vector DesiredTargetLocation;
var protected const transient Vector ActorSpaceLookAtTarget;
/** The maximum rotation applied from the reference pose of the bone, in degrees. */
var(Limit) float MaxAngle;
/** The outer maximum rotation applied from the reference pose of the bone, in degrees, that allows bone to stay in the MaxAngle */
var(Limit) float OuterMaxAngle;
/** Allowed error between the current look direction and the desired look direction. */
var(Limit) float DeadZoneAngle;
/** Per rotation axis range of motion in degrees, relative to reference pose of the bone. First (negative) value is lowest relative angle, second is highest. */
var(Limit) Vector2D RotationAngleRangeX;
var(Limit) Vector2D RotationAngleRangeY;
var(Limit) Vector2D RotationAngleRangeZ;
var(Limit) name AllowRotationOtherBoneName;
var const transient float LookAtAlpha;
var const transient float LookAtAlphaTarget;
var const transient float LookAtAlphaBlendTimeToGo;
var const transient Vector LimitLookDir;
var const transient Vector BaseLookDir;
var const transient Vector BaseBonePos;
var const transient float LastCalcTime;
var const transient int ControlBoneIndex;

// Export USkelControlLookAt::execSetTargetLocation(FFrame&, void* const)
native final function SetTargetLocation(Vector NewTargetLocation);

// Export USkelControlLookAt::execInterpolateTargetLocation(FFrame&, void* const)
native final function InterpolateTargetLocation(float DeltaTime);

// Export USkelControlLookAt::execSetLookAtAlpha(FFrame&, void* const)
native final function SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime);

// Export USkelControlLookAt::execCanLookAtPoint(FFrame&, void* const)
native final function bool CanLookAtPoint(Vector PointLoc, optional bool bDrawDebugInfo, optional bool bDebugUsePersistentLines, optional bool bDebugFlushLinesFirst);

defaultproperties
{
    LookAtAxis=EAxis.AXIS_X
    UpAxis=EAxis.AXIS_Z
    AllowRotationSpace=EBoneControlSpace.BCS_BoneSpace
    bLimitBasedOnRefPose=true
    bShowLimit=true
    bAllowRotationX=true
    bAllowRotationY=true
    bAllowRotationZ=true
    TargetLocationInterpSpeed=10
    ActorSpaceLookAtTarget=(X=256,Y=0,Z=0)
    OuterMaxAngle=90
    RotationAngleRangeX=(X=-90,Y=90)
    RotationAngleRangeY=(X=-90,Y=90)
    RotationAngleRangeZ=(X=-90,Y=90)
    LookAtAlpha=1
    LookAtAlphaTarget=1
    ControlBoneIndex=-1
    BlendInTime=0.33
    BlendOutTime=0.33
    bIgnoreWhenNotRendered=true
}