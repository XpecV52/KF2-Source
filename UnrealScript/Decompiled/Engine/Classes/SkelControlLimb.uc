/*******************************************************************************
 * SkelControlLimb generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SkelControlLimb extends SkelControlBase
    native(Anim)
    hidecategories(Object,Object);

/** Where you want the controlled bone to be. Will be placed as close as possible within the constraints of the limb. */
var(Effector) Vector EffectorLocation;
/** Reference frame that the DesiredLocation is defined in. */
var(Effector) SkelControlBase.EBoneControlSpace EffectorLocationSpace;
/** Reference frame in which JointTargetLocation is defined. */
var(Joint) SkelControlBase.EBoneControlSpace JointTargetLocationSpace;
/** Space this offset is in */
var(Joint) SkelControlBase.EBoneControlSpace JointOffsetSpace;
/** Axis of graphical bone to align along the length of the bone. */
var(Limb) Core.Object.EAxis BoneAxis;
/** Axis of graphical bone to align along the hinge axis of the joint. */
var(Limb) Core.Object.EAxis JointAxis;
/** Name of bone used if DesiredLocationSpace is BCS_OtherBoneSpace or BCS_BaseMeshSpace. */
var(Effector) name EffectorSpaceBoneName;
/** Point in space where the joint should move towards as it bends. */
var(Joint) Vector JointTargetLocation;
/** Name of bone used if JointTargetLocationSpace is BCS_OtherBoneSpace. */
var(Joint) name JointTargetSpaceBoneName;
/** Apply an Offset to the Joint (Elbow) bone. This will create stretching! */
var(Joint) Vector JointOffset;
/** Optional bone name to be used by JoinOffsetSpace */
var(Joint) name JointOffsetBoneName;
/** If we want to invert BoneAxis when constructing the transform for the bones. */
var(Limb) bool bInvertBoneAxis;
/** If we want to invert JointAxis when constructing the transform for the bones. */
var(Limb) bool bInvertJointAxis;
/** Experiment to Rotate Joint Bone, rather than creating a new Matrix for it. */
var(Limb) bool bRotateJoint;
/**  
 *If true, modify the relative rotation between the end 'effector' bone and its parent bone. If false,
 *       the rotation of the end bone will not be modified by this controller.
 */
var(Limb) bool bMaintainEffectorRelRot;
/** If true, rotation of effector bone is copied from the bone specified by EffectorSpaceBoneName. */
var(Limb) bool bTakeRotationFromEffectorSpace;
/** Is Limb allowed to stretch to reach its target? */
var() bool bAllowStretching;
/**  
 *Stretching limits.
 * X represents the relative length of the limb at which it will start stretching.
 * Y represents the maximum stretch factor allowed.
 * For example (X=0.5,Y=2.f) will mean that the limb is allowed to stretch up to twice its length.
 * And it will start stretching when shoulder to effector distance is half of the full arm length.
 */
var() Vector2D StretchLimits;
/** Name of Roll Bone to stretch as well. */
var() name StretchRollBoneName;

defaultproperties
{
    BoneAxis=EAxis.AXIS_X
    JointAxis=EAxis.AXIS_Y
    StretchLimits=(X=0.71,Y=1.2)
    bIgnoreWhenNotRendered=true
    CategoryDesc="Limb"
}