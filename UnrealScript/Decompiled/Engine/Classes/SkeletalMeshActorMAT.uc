/*******************************************************************************
 * SkeletalMeshActorMAT generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SkeletalMeshActorMAT extends SkeletalMeshCinematicActor
    native(Anim)
    placeable
    hidecategories(Navigation);

var transient array<AnimNodeSlot> SlotNodes;

// Export USkeletalMeshActorMAT::execMAT_SetAnimWeights(FFrame&, void* const)
native function MAT_SetAnimWeights(array<AnimSlotInfo> SlotInfos);

// Export USkeletalMeshActorMAT::execMAT_SetMorphWeight(FFrame&, void* const)
native function MAT_SetMorphWeight(name MorphNodeName, float MorphWeight);

// Export USkeletalMeshActorMAT::execMAT_SetSkelControlScale(FFrame&, void* const)
native function MAT_SetSkelControlScale(name SkelControlName, float Scale);

// Export USkeletalMeshActorMAT::execMAT_SetSkelControlStrength(FFrame&, void* const)
native function MAT_SetSkelControlStrength(name SkelControlName, float ControlStrength);

simulated event Destroyed()
{
    ClearAnimNodes();
    super(SkeletalMeshActor).Destroyed();
}

simulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)
{
    super(Actor).PostInitAnimTree(SkelComp);
    ClearAnimNodes();
    CacheAnimNodes();
}

simulated function CacheAnimNodes()
{
    local AnimNodeSlot SlotNode;

    foreach SkeletalMeshComponent.AllAnimNodes(Class'AnimNodeSlot', SlotNode)
    {
        SlotNodes[SlotNodes.Length] = SlotNode;        
    }    
}

simulated function ClearAnimNodes()
{
    SlotNodes.Length = 0;
}

simulated event SetAnimPosition(name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
    MAT_SetAnimPosition(SlotName, ChannelIndex, InAnimSeqName, InPosition, bFireNotifies, bLooping, bEnableRootMotion);
}

// Export USkeletalMeshActorMAT::execMAT_SetAnimPosition(FFrame&, void* const)
native function MAT_SetAnimPosition(name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);

simulated event FinishAnimControl(InterpGroup InInterpGroup)
{
    MAT_FinishAnimControl(InInterpGroup);
}

simulated event SetMorphWeight(name MorphNodeName, float MorphWeight)
{
    MAT_SetMorphWeight(MorphNodeName, MorphWeight);
}

simulated event SetSkelControlScale(name SkelControlName, float Scale)
{
    MAT_SetSkelControlScale(SkelControlName, Scale);
}

defaultproperties
{
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=none
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__SkeletalMeshActorMAT.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__SkeletalMeshActorMAT.SkeletalMeshComponent0'
    SkeletalMeshComponent=SkeletalMeshComponent0
    LightEnvironment=DynamicLightEnvironmentComponent'Default__SkeletalMeshActorMAT.MyLightEnvironment'
    FacialAudioComp=AudioComponent'Default__SkeletalMeshActorMAT.FaceAudioComponent'
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=none
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__SkeletalMeshActorMAT.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__SkeletalMeshActorMAT.SkeletalMeshComponent0'
    Components(0)=SkeletalMeshComponent0
    Components(1)=AudioComponent'Default__SkeletalMeshActorMAT.FaceAudioComponent'
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    begin object name=SkeletalMeshComponent0 class=SkeletalMeshComponent
        Animations=none
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__SkeletalMeshActorMAT.MyLightEnvironment'
    object end
    // Reference: SkeletalMeshComponent'Default__SkeletalMeshActorMAT.SkeletalMeshComponent0'
    CollisionComponent=SkeletalMeshComponent0
}