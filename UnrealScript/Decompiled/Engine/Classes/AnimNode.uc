/*******************************************************************************
 * AnimNode generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AnimNode extends AnimObject
    abstract
    native(Anim)
    hidecategories(Object,Object);

enum ESliderType
{
    ST_1D,
    ST_2D,
    ST_MAX
};

struct CurveKey
{
    var name CurveName;
    var float Weight;

    structdefaultproperties
    {
        CurveName=None
        Weight=0
    }
};

var const transient bool bRelevant;
var const transient bool bJustBecameRelevant;
/** If TRUE, this node will be ticked, even if bPauseAnims is TRUE on the SkelMeshComp. */
var(Performance) bool bTickDuringPausedAnims;
var const bool bEditorOnly;
var const transient bool bDisableCaching;
/** Flags to control if Script Events should be called. Note that those will affect performance, so be careful! */
var() bool bCallScriptEventOnInit;
var() bool bCallScriptEventOnBecomeRelevant;
var() bool bCallScriptEventOnCeaseRelevant;
var const transient int NodeTickTag;
var const transient int NodeInitTag;
var const transient int NodeEndEventTick;
var const int TickArrayIndex;
var const transient int NodeCachedAtomsTag;
var const float NodeTotalWeight;
var duplicatetransient array<AnimNodeBlendBase> ParentNodes;
/** This is the name used to find an AnimNode by name from a tree. */
var() name NodeName;
var transient array<BoneAtom> CachedBoneAtoms;
var transient byte CachedNumDesiredBones;
var transient BoneAtom CachedRootMotionDelta;
var transient int bCachedHasRootMotion;
var transient array<CurveKey> CachedCurveKeys;
var transient int SearchTag;
/** Array of blended curve key for editor only */
var(Morph) editoronly editconst transient array<editoronly editconst CurveKey> LastUpdatedAnimMorphKeys;

event OnInit();

event OnBecomeRelevant();

event OnCeaseRelevant();

// Export UAnimNode::execFindAnimNode(FFrame&, void* const)
native final function AnimNode FindAnimNode(name InNodeName);

// Export UAnimNode::execPlayAnim(FFrame&, void* const)
native function PlayAnim(optional bool bLoop, optional float Rate, optional float StartTime)
{
    bLoop = false;
    Rate = 1;
    StartTime = 0;                    
}

// Export UAnimNode::execStopAnim(FFrame&, void* const)
native function StopAnim();

// Export UAnimNode::execReplayAnim(FFrame&, void* const)
native function ReplayAnim();
