/*******************************************************************************
 * PlayfabInterface generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PlayfabInterface extends Object
    native
    config(Engine);

struct native RegionDefinition
{
    var float Ping;
    var bool RegionUp;
    var init string Name;
    var init string Address;

    structdefaultproperties
    {
        Ping=-1
        RegionUp=false
        Name=""
        Address=""
    }
};

var private native const noexport Pointer VfTable_FTickableObject;
var OnlineGameSearch PendingGameSearch;
var OnlineGameSearch TempGameSearch;
var init const string CachedPlayfabId;
var init const string CachedSessionTicket;
var init const string CachedAuthCode;
var init const string CachedAuthForEntitlements;
var private const bool bLoginProcessFinished;
var private const bool bLaunchedByPlayfab;
var private const bool bCloudServer;
var private bool bServerAllocated;
var private bool bServerDeallocated;
var private const int LastAuthRefreshTime;
var private const int SecondsForAuthRefreshTime;
var private const float VerifyCertificateTime;
var int LoginAttempts;
var private const int MaxRetryLoginAttempts;
var init private const config string CatalogName;
var const config array<config RegionDefinition> KnownRegions;
var array<string> FavouriteServers;
var array<string> ServerHistory;
var init string CurrRegionName;
var const int PlayfabNPServiceLabel;
var native Map_Mirror TitleData;
var init private const string CachedLobbyId;
var init private const string CachedServerId;
var private const float ElapsedTimeSinceLastHeartBeat;
var private const float HeartbeatInterval;
var private OnlineGameSettings CachedGameSettings;
var private const float CountdownToReregister;
var private const float ReregisterInterval;
var init private const string AllocateAPIEndpoint;
var init private const string DeallocateAPIEndpoint;
var private const QWord DeallocatedTimeStamp;
var private const float TimeSinceLastDeallocationUpdate;
var private const float DeallocateTimeUpdateInterval;
var array< delegate<OnFindOnlineGamesComplete> > FindOnlineGamesCompleteDelegates;
var array< delegate<OnQueryServerInfoComplete> > OnQueryServerInfoCompleteDelegates;
var array< delegate<OnLoginComplete> > LoginCompleteDelegates;
var array< delegate<OnRegionQueryComplete> > RegionQueryCompleteDelegates;
var array< delegate<OnServerStarted> > ServerStartedDelegates;
var array< delegate<OnInventoryRead> > InventoryReadDelegates;
var array< delegate<OnTitleDataRead> > TitleDataReadDelegates;
var array< delegate<OnStoreDataRead> > StoreDataReadDelegates;
var array< delegate<OnCloudScriptExecutionComplete> > CloudScriptExecutionCompleteDelegates;
var array< delegate<OnGetPlayerListComplete> > GetPlayerListCompleteDelegates;
var delegate<OnLoginComplete> __OnLoginComplete__Delegate;
var delegate<OnGetPlayerListComplete> __OnGetPlayerListComplete__Delegate;
var delegate<OnStoreDataRead> __OnStoreDataRead__Delegate;
var delegate<OnInventoryRead> __OnInventoryRead__Delegate;
var delegate<OnTitleDataRead> __OnTitleDataRead__Delegate;
var delegate<OnFindOnlineGamesComplete> __OnFindOnlineGamesComplete__Delegate;
var delegate<OnQueryServerInfoComplete> __OnQueryServerInfoComplete__Delegate;
var delegate<OnRegionQueryComplete> __OnRegionQueryComplete__Delegate;
var delegate<OnServerStarted> __OnServerStarted__Delegate;
var delegate<OnCloudScriptExecutionComplete> __OnCloudScriptExecutionComplete__Delegate;

// Export UPlayfabInterface::execLogin(FFrame&, void* const)
native function bool Login(string UserName);

delegate OnLoginComplete(bool bWasSuccessful, string SessionTicket, string PlayFabId);

function AddOnLoginCompleteDelegate(delegate<OnLoginComplete> InDelegate)
{
    if(LoginCompleteDelegates.Find(InDelegate == -1)
    {
        LoginCompleteDelegates[LoginCompleteDelegates.Length] = InDelegate;
    }
}

function ClearOnLoginCompleteDelegate(delegate<OnLoginComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LoginCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        LoginCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnGetPlayerListComplete(OnlineGameSettings PlayerListSettings, bool Success);

function AddGetPlayerListCompleteDelegate(delegate<OnGetPlayerListComplete> InDelegate)
{
    if(GetPlayerListCompleteDelegates.Find(InDelegate == -1)
    {
        GetPlayerListCompleteDelegates[GetPlayerListCompleteDelegates.Length] = InDelegate;
    }
}

function ClearGetPlayerListCompleteDelegate(delegate<OnGetPlayerListComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = GetPlayerListCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        GetPlayerListCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execIsSearchResultInFavoritesList(FFrame&, void* const)
native function bool IsSearchResultInFavoritesList(OnlineGameSearch LatestGameSearch, int Index);

// Export UPlayfabInterface::execAddSearchResultToFavorites(FFrame&, void* const)
native function bool AddSearchResultToFavorites(OnlineGameSearch LatestGameSearch, int Index);

// Export UPlayfabInterface::execRemoveSearchResultFromFavorites(FFrame&, void* const)
native function bool RemoveSearchResultFromFavorites(OnlineGameSearch LatestGameSearch, int Index);

// Export UPlayfabInterface::execAddSearchResultToHistory(FFrame&, void* const)
native function bool AddSearchResultToHistory(string JoinString);

// Export UPlayfabInterface::execGetRegionIndex(FFrame&, void* const)
native function int GetRegionIndex(const out string RegionName);

// Export UPlayfabInterface::execSetDefaultRegion(FFrame&, void* const)
native function SetDefaultRegion(const out string RegionName);

// Export UPlayfabInterface::execUpdateUserTitleDisplayName(FFrame&, void* const)
native function UpdateUserTitleDisplayName(string DisplayName);

// Export UPlayfabInterface::execUpdateUserName(FFrame&, void* const)
native function UpdateUserName(string DisplayName);

// Export UPlayfabInterface::execUpdateUserData(FFrame&, void* const)
native function UpdateUserData(string Key, string Data, string Permission);

// Export UPlayfabInterface::execGetUserName(FFrame&, void* const)
native function GetUserName(string PlayFabId, int SelectedServerIndex, int PlayerIndex);

// Export UPlayfabInterface::execGetPlayerList(FFrame&, void* const)
native function GetPlayerList(OnlineGameSearch SearchSettings, int SelectedServerIndex);

// Export UPlayfabInterface::execCheckPlayerDisplayName(FFrame&, void* const)
native function CheckPlayerDisplayName(string PlayFabId);

// Export UPlayfabInterface::execGetUserData(FFrame&, void* const)
native function GetUserData(array<string> Keys, bool CheckData);

// Export UPlayfabInterface::execLogout(FFrame&, void* const)
native function bool Logout();

// Export UPlayfabInterface::execReadStoreData(FFrame&, void* const)
native function ReadStoreData();

delegate OnStoreDataRead(bool bWasSuccessful);

function AddStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate)
{
    if(StoreDataReadDelegates.Find(InDelegate == -1)
    {
        StoreDataReadDelegates[StoreDataReadDelegates.Length] = InDelegate;
    }
}

function ClearStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = StoreDataReadDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        StoreDataReadDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execReadInventory(FFrame&, void* const)
native function ReadInventory();

delegate OnInventoryRead(bool bWasSuccessful);

function AddInventoryReadCompleteDelegate(delegate<OnInventoryRead> InDelegate)
{
    if(InventoryReadDelegates.Find(InDelegate == -1)
    {
        InventoryReadDelegates[InventoryReadDelegates.Length] = InDelegate;
    }
}

function ClearInventoryReadCompleteDelegate(delegate<OnInventoryRead> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = InventoryReadDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        InventoryReadDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execReadTitleData(FFrame&, void* const)
native function ReadTitleData();

delegate OnTitleDataRead();

function AddTitleDataReadCompleteDelegate(delegate<OnTitleDataRead> InDelegate)
{
    if(TitleDataReadDelegates.Find(InDelegate == -1)
    {
        TitleDataReadDelegates[TitleDataReadDelegates.Length] = InDelegate;
    }
}

function ClearTitleDataReadCompleteDelegate(delegate<OnTitleDataRead> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = TitleDataReadDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        TitleDataReadDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execGetTitleDataForKey(FFrame&, void* const)
native function string GetTitleDataForKey(string InKey);

// Export UPlayfabInterface::execUnlockContainer(FFrame&, void* const)
native function UnlockContainer(string ContainerId);

// Export UPlayfabInterface::execPerformRuleExchange(FFrame&, void* const)
native function PerformRuleExchange(ExchangeRuleSets ForRuleset, optional bool AllButOne)
{
    AllButOne = false;                
}

// Export UPlayfabInterface::execConsumeEntitlements(FFrame&, void* const)
native function ConsumeEntitlements(optional bool bWasPurchase)
{
    bWasPurchase = false;            
}

// Export UPlayfabInterface::execFindOnlineGames(FFrame&, void* const)
native function bool FindOnlineGames(OnlineGameSearch SearchSettings);

delegate OnFindOnlineGamesComplete(bool bWasSuccessful);

function AddFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> InDelegate)
{
    if(FindOnlineGamesCompleteDelegates.Find(InDelegate == -1)
    {
        FindOnlineGamesCompleteDelegates[FindOnlineGamesCompleteDelegates.Length] = InDelegate;
    }
}

function ClearFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = FindOnlineGamesCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        FindOnlineGamesCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execCancelGameSearch(FFrame&, void* const)
native function CancelGameSearch();

// Export UPlayfabInterface::execQueryServerInfo(FFrame&, void* const)
native function QueryServerInfo(const string LobbyId);

delegate OnQueryServerInfoComplete(bool bWasSuccessful, string LobbyId, string ServerIP, int ServerPort, string AuthTicket);

function AddQueryServerInfoCompleteDelegate(delegate<OnQueryServerInfoComplete> InDelegate)
{
    if(OnQueryServerInfoCompleteDelegates.Find(InDelegate == -1)
    {
        OnQueryServerInfoCompleteDelegates[OnQueryServerInfoCompleteDelegates.Length] = InDelegate;
    }
}

function ClearQueryServerInfoCompleteDelegate(delegate<OnQueryServerInfoComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = OnQueryServerInfoCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        OnQueryServerInfoCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnRegionQueryComplete(bool bWasSuccessful, array<string> OutRegionNames);

// Export UPlayfabInterface::execQueryAvailableRegions(FFrame&, void* const)
native function QueryAvailableRegions();

function AddRegionQueryCompleteDelegate(delegate<OnRegionQueryComplete> InDelegate)
{
    if(RegionQueryCompleteDelegates.Find(InDelegate == -1)
    {
        RegionQueryCompleteDelegates[RegionQueryCompleteDelegates.Length] = InDelegate;
    }
}

function ClearRegionQueryCompleteDelegate(delegate<OnRegionQueryComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = RegionQueryCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        RegionQueryCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execStartNewServerInstance(FFrame&, void* const)
native function StartNewServerInstance(optional string ServerCommandline);

delegate OnServerStarted(bool bWasSuccessful, string ServerLobbyId, string ServerIP, int ServerPort, string ServerTicket);

function AddOnServerStartedDelegate(delegate<OnServerStarted> InDelegate)
{
    if(ServerStartedDelegates.Find(InDelegate == -1)
    {
        ServerStartedDelegates[ServerStartedDelegates.Length] = InDelegate;
    }
}

function ClearOnServerStartedDelegate(delegate<OnServerStarted> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ServerStartedDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        ServerStartedDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execExecuteCloudScript(FFrame&, void* const)
native function ExecuteCloudScript(string FunctionName, JsonObject FunctionParms);

delegate OnCloudScriptExecutionComplete(bool bWasSuccessful, string FunctionName, JsonObject FunctionResult);

function AddOnCloudScriptExecutionCompleteDelegate(delegate<OnCloudScriptExecutionComplete> InDelegate)
{
    if(CloudScriptExecutionCompleteDelegates.Find(InDelegate == -1)
    {
        CloudScriptExecutionCompleteDelegates[CloudScriptExecutionCompleteDelegates.Length] = InDelegate;
    }
}

function ClearOnCloudScriptExecutionCompleteDelegate(delegate<OnCloudScriptExecutionComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = CloudScriptExecutionCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        CloudScriptExecutionCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

function bool IsRegisteredWithPlayfab()
{
    return CachedLobbyId != "";
}

function string GetCachedLobbyId()
{
    return CachedLobbyId;
}

event bool IsCloudServer()
{
    return bCloudServer;
}

event string GetServerId()
{
    return CachedServerId;
}

function int GetIndexForCurrentRegion()
{
    local int I;

    I = 0;
    J0x0B:

    if(I < KnownRegions.Length)
    {
        if(KnownRegions[I].Name == CurrRegionName)
        {
            return I;
        }
        ++ I;
        goto J0x0B;
    }
    WarnInternal("Failed to find index for current region" @ CurrRegionName);
    return -1;
}

function SetIndexForCurrentRegion(int InRegionIndex)
{
    if((InRegionIndex >= 0) && InRegionIndex < KnownRegions.Length)
    {
        SetDefaultRegion(KnownRegions[InRegionIndex].Name);        
    }
    else
    {
        WarnInternal("Failed to set region index" @ string(InRegionIndex));
    }
}

static function array<string> GetLocalizedRegionList()
{
    local int I;
    local array<string> LocalizedRegions;

    I = 0;
    J0x0B:

    if(I < default.KnownRegions.Length)
    {
        LocalizedRegions.AddItem(Localize("Regions", default.KnownRegions[I].Name, "KFGameConsole");
        ++ I;
        goto J0x0B;
    }
    return LocalizedRegions;
}

static function string GetLocalizedRegionName(int RegionIndex)
{
    return Localize("Regions", default.KnownRegions[RegionIndex].Name, "KFGameConsole");
}

event OnlineProfileSettings GetProfileSettings(byte LocalUserNum)
{
    return Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.GetProfileSettings(LocalUserNum);
}

// Export UPlayfabInterface::execServerValidatePlayer(FFrame&, void* const)
native function ServerValidatePlayer(const string ClientAuthTicket);

// Export UPlayfabInterface::execServerNotifyPlayerJoined(FFrame&, void* const)
native function ServerNotifyPlayerJoined(const string PlayFabId);

// Export UPlayfabInterface::execServerNotifyPlayerLeft(FFrame&, void* const)
native function ServerNotifyPlayerLeft(const string PlayFabId);

// Export UPlayfabInterface::execServerUpdateOnlineGame(FFrame&, void* const)
native function ServerUpdateOnlineGame();

// Export UPlayfabInterface::execServerRegisterGame(FFrame&, void* const)
native function ServerRegisterGame();

// Export UPlayfabInterface::execServerSetOpenStatus(FFrame&, void* const)
native function ServerSetOpenStatus(const bool bOpen);

// Export UPlayfabInterface::execServerSetSteamServerUID(FFrame&, void* const)
native function ServerSetSteamServerUID(const QWord Uid);

// Export UPlayfabInterface::execServerUpdateInternalUserData(FFrame&, void* const)
native function ServerUpdateInternalUserData(const string ForPlayerId, array<string> InKeys, array<string> InValues);

// Export UPlayfabInterface::execServerRetrieveInternalUserData(FFrame&, void* const)
native function ServerRetrieveInternalUserData(const string ForPlayerId, array<string> InKeys);

// Export UPlayfabInterface::execServerAddVirtualCurrencyForUser(FFrame&, void* const)
native function ServerAddVirtualCurrencyForUser(const string ForPlayerId, const int AmountToAdd, optional string CurrencyName)
{
    CurrencyName = "GM";                    
}

// Export UPlayfabInterface::execServerRemoveVirtualCurrencyForUser(FFrame&, void* const)
native function ServerRemoveVirtualCurrencyForUser(const string ForPlayerId, const int AmountToRemove, optional string CurrencyName)
{
    CurrencyName = "GM";                    
}

// Export UPlayfabInterface::execServerGrantItemsForUser(FFrame&, void* const)
native function ServerGrantItemsForUser(const string ForPlayerId, array<string> ItemIds);

// Export UPlayfabInterface::execServerAllocate(FFrame&, void* const)
native function ServerAllocate();

// Export UPlayfabInterface::execServerDeallocate(FFrame&, void* const)
native function ServerDeallocate(optional bool bForce);

function CreateGameSettings(class<OnlineGameSettings> GameSettingsClass)
{
    if(CachedGameSettings == none)
    {
        CachedGameSettings = new GameSettingsClass;
    }
}

event OnlineGameSettings GetGameSettings()
{
    return CachedGameSettings;
}

private final event AuthWithOnlineService(byte LocalUserNum, string ForURL)
{
    local OnlineSubsystem OSS;

    OSS = Class'GameEngine'.static.GetOnlineSubsystem();
    if((OSS != none) && NotEqual_InterfaceInterface(OSS.PlayerInterface, (none)))
    {
        OSS.PlayerInterface.AddURLTokenRetrievedDelegate(LocalUserNum, OnTokenAndSignatureRetrieved);
        OSS.PlayerInterface.GetTokenAndSignatureForURL(LocalUserNum, ForURL);
    }
}

private final function OnTokenAndSignatureRetrieved(byte LocalUserNum, string URL, string Token, string Signature)
{
    Class'GameEngine'.static.GetOnlineSubsystem().PlayerInterface.ClearURLTokenRetrievedDelegate(LocalUserNum, OnTokenAndSignatureRetrieved);
    OnlineServiceAuthComplete(URL, Token, Signature);
}

// Export UPlayfabInterface::execOnlineServiceAuthComplete(FFrame&, void* const)
private native final function OnlineServiceAuthComplete(string ForURL, string Token, string Signature);

defaultproperties
{
    SecondsForAuthRefreshTime=3600
    VerifyCertificateTime=600
    MaxRetryLoginAttempts=3
    PlayfabNPServiceLabel=1
    HeartbeatInterval=60
    ReregisterInterval=10
    DeallocateTimeUpdateInterval=30
}