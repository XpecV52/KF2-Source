/*******************************************************************************
 * PlayfabInterface generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PlayfabInterface extends Object
    native;

var private native const noexport Pointer VfTable_FTickableObject;
var OnlineGameSearch PendingGameSearch;
var const string CachedPlayfabId;
var const string CachedSessionTicket;
var private const string PendingLoginName;
var const array<string> RegionNames;
var string CurrRegionName;
var private const bool bPlayfabServer;
var private const string CachedLobbyId;
var array< delegate<OnFindOnlineGamesComplete> > FindOnlineGamesCompleteDelegates;
var array< delegate<OnQueryServerInfoComplete> > OnQueryServerInfoCompleteDelegates;
var array< delegate<OnLoginComplete> > LoginCompleteDelegates;
var array< delegate<OnRegionQueryComplete> > RegionQueryCompleteDelegates;
var array< delegate<OnServerStarted> > ServerStartedDelegates;
var array< delegate<OnInventoryRead> > InventoryReadDelegates;
var array< delegate<OnStoreDataRead> > StoreDataReadDelegates;
var delegate<OnLoginComplete> __OnLoginComplete__Delegate;
var delegate<OnStoreDataRead> __OnStoreDataRead__Delegate;
var delegate<OnInventoryRead> __OnInventoryRead__Delegate;
var delegate<OnFindOnlineGamesComplete> __OnFindOnlineGamesComplete__Delegate;
var delegate<OnQueryServerInfoComplete> __OnQueryServerInfoComplete__Delegate;
var delegate<OnRegionQueryComplete> __OnRegionQueryComplete__Delegate;
var delegate<OnServerStarted> __OnServerStarted__Delegate;

// Export UPlayfabInterface::execLogin(FFrame&, void* const)
native function bool Login(string UserName);

delegate OnLoginComplete(bool bWasSuccessful, string SessionTicket, string PlayfabId);

function AddOnLoginCompleteDelegate(delegate<OnLoginComplete> InDelegate)
{
    if(LoginCompleteDelegates.Find(InDelegate == -1)
    {
        LoginCompleteDelegates[LoginCompleteDelegates.Length] = InDelegate;
    }
}

function ClearOnLoginCompleteDelegate(delegate<OnLoginComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = LoginCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        LoginCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execReadStoreData(FFrame&, void* const)
native function ReadStoreData();

delegate OnStoreDataRead(bool bWasSuccessful);

function AddStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate)
{
    if(StoreDataReadDelegates.Find(InDelegate == -1)
    {
        StoreDataReadDelegates[StoreDataReadDelegates.Length] = InDelegate;
    }
}

function ClearStoreDataReadCompleteDelegate(delegate<OnStoreDataRead> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = StoreDataReadDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        StoreDataReadDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execReadInventory(FFrame&, void* const)
native function ReadInventory();

delegate OnInventoryRead(bool bWasSuccessful);

function AddInventoryReadCompleteDelegate(delegate<OnInventoryRead> InDelegate)
{
    if(InventoryReadDelegates.Find(InDelegate == -1)
    {
        InventoryReadDelegates[InventoryReadDelegates.Length] = InDelegate;
    }
}

function ClearInventoryReadCompleteDelegate(delegate<OnInventoryRead> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = InventoryReadDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        InventoryReadDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execUnlockContainer(FFrame&, void* const)
native function UnlockContainer(string ContainerId);

// Export UPlayfabInterface::execFindOnlineGames(FFrame&, void* const)
native function bool FindOnlineGames(OnlineGameSearch SearchSettings);

delegate OnFindOnlineGamesComplete(bool bWasSuccessful);

function AddFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> InDelegate)
{
    if(FindOnlineGamesCompleteDelegates.Find(InDelegate == -1)
    {
        FindOnlineGamesCompleteDelegates[FindOnlineGamesCompleteDelegates.Length] = InDelegate;
    }
}

function ClearFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = FindOnlineGamesCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        FindOnlineGamesCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execCancelGameSearch(FFrame&, void* const)
native function CancelGameSearch();

// Export UPlayfabInterface::execQueryServerInfo(FFrame&, void* const)
native function QueryServerInfo(const string LobbyId);

delegate OnQueryServerInfoComplete(bool bWasSuccessful, string LobbyId, string ServerIP, int ServerPort, string AuthTicket);

function AddQueryServerInfoCompleteDelegate(delegate<OnQueryServerInfoComplete> InDelegate)
{
    if(OnQueryServerInfoCompleteDelegates.Find(InDelegate == -1)
    {
        OnQueryServerInfoCompleteDelegates[OnQueryServerInfoCompleteDelegates.Length] = InDelegate;
    }
}

function ClearQueryServerInfoCompleteDelegate(delegate<OnQueryServerInfoComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = OnQueryServerInfoCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        OnQueryServerInfoCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

delegate OnRegionQueryComplete(bool bWasSuccessful, array<string> OutRegionNames);

// Export UPlayfabInterface::execQueryAvailableRegions(FFrame&, void* const)
native function QueryAvailableRegions();

function AddRegionQueryCompleteDelegate(delegate<OnRegionQueryComplete> InDelegate)
{
    if(RegionQueryCompleteDelegates.Find(InDelegate == -1)
    {
        RegionQueryCompleteDelegates[RegionQueryCompleteDelegates.Length] = InDelegate;
    }
}

function ClearRegionQueryCompleteDelegate(delegate<OnRegionQueryComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = RegionQueryCompleteDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        RegionQueryCompleteDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execStartNewServerInstance(FFrame&, void* const)
native function StartNewServerInstance(string GameMode, optional string ServerCommandline);

delegate OnServerStarted(bool bWasSuccessful, string ServerLobbyId, string ServerIP, int ServerPort, string ServerTicket);

function AddOnServerStartedDelegate(delegate<OnServerStarted> InDelegate)
{
    if(ServerStartedDelegates.Find(InDelegate == -1)
    {
        ServerStartedDelegates[ServerStartedDelegates.Length] = InDelegate;
    }
}

function ClearOnServerStartedDelegate(delegate<OnServerStarted> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = ServerStartedDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        ServerStartedDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UPlayfabInterface::execServerValidatePlayer(FFrame&, void* const)
native function ServerValidatePlayer(const string ClientAuthTicket);

// Export UPlayfabInterface::execServerNotifyPlayerLeft(FFrame&, void* const)
native function ServerNotifyPlayerLeft(const string PlayfabId);

defaultproperties
{
    CurrRegionName="USCentral"
}