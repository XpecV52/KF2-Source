/*******************************************************************************
 * OnlineAuthInterface generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
interface OnlineAuthInterface extends Interface
    abstract
    native;

enum EAuthStatus
{
    AUS_NotStarted,
    AUS_Pending,
    AUS_Authenticated,
    AUS_Failed,
    AUS_MAX
};

struct native BaseAuthSession
{
    var const int EndPointIP;
    var const int EndPointPort;
    var const UniqueNetId EndPointUID;

    structdefaultproperties
    {
        EndPointIP=0
        EndPointPort=0
        EndPointUID=(Uid=none)
    }
};

struct native LocalAuthSession extends BaseAuthSession
{
    var const int SessionUID;
};

struct native AuthSession extends BaseAuthSession
{
    var const OnlineAuthInterface.EAuthStatus AuthStatus;
    var const int AuthTicketUID;
};

function bool IsReady();

delegate OnAuthReady();

function AddAuthReadyDelegate(delegate<OnAuthReady> AuthReadyDelegate);

function ClearAuthReadyDelegate(delegate<OnAuthReady> AuthReadyDelegate);

delegate OnClientAuthRequest(UniqueNetId ServerUID, int ServerIP, int ServerPort, bool bSecure);

function AddClientAuthRequestDelegate(delegate<OnClientAuthRequest> ClientAuthRequestDelegate);

function ClearClientAuthRequestDelegate(delegate<OnClientAuthRequest> ClientAuthRequestDelegate);

delegate OnServerAuthRequest(Player ClientConnection, UniqueNetId ClientUID, int ClientIP, int ClientPort);

function AddServerAuthRequestDelegate(delegate<OnServerAuthRequest> ServerAuthRequestDelegate);

function ClearServerAuthRequestDelegate(delegate<OnServerAuthRequest> ServerAuthRequestDelegate);

delegate OnClientAuthResponse(UniqueNetId ClientUID, int ClientIP, int AuthTicketUID);

function AddClientAuthResponseDelegate(delegate<OnClientAuthResponse> ClientAuthResponseDelegate);

function ClearClientAuthResponseDelegate(delegate<OnClientAuthResponse> ClientAuthResponseDelegate);

delegate OnServerAuthResponse(UniqueNetId ServerUID, int ServerIP, int AuthTicketUID);

function AddServerAuthResponseDelegate(delegate<OnServerAuthResponse> ServerAuthResponseDelegate);

function ClearServerAuthResponseDelegate(delegate<OnServerAuthResponse> ServerAuthResponseDelegate);

delegate OnClientAuthComplete(bool bSuccess, UniqueNetId ClientUID, Player ClientConnection, string ExtraInfo);

function AddClientAuthCompleteDelegate(delegate<OnClientAuthComplete> ClientAuthCompleteDelegate);

function ClearClientAuthCompleteDelegate(delegate<OnClientAuthComplete> ClientAuthCompleteDelegate);

delegate OnServerAuthComplete(bool bSuccess, UniqueNetId ServerUID, Player ServerConnection, string ExtraInfo);

function AddServerAuthCompleteDelegate(delegate<OnServerAuthComplete> ServerAuthCompleteDelegate);

function ClearServerAuthCompleteDelegate(delegate<OnServerAuthComplete> ServerAuthCompleteDelegate);

delegate OnClientAuthEndSessionRequest(Player ServerConnection);

function AddClientAuthEndSessionRequestDelegate(delegate<OnClientAuthEndSessionRequest> ClientAuthEndSessionRequestDelegate);

function ClearClientAuthEndSessionRequestDelegate(delegate<OnClientAuthEndSessionRequest> ClientAuthEndSessionRequestDelegate);

delegate OnServerAuthRetryRequest(Player ClientConnection);

function AddServerAuthRetryRequestDelegate(delegate<OnServerAuthRetryRequest> ServerAuthRetryRequestDelegate);

function ClearServerAuthRetryRequestDelegate(delegate<OnServerAuthRetryRequest> ServerAuthRetryRequestDelegate);

delegate OnClientConnectionClose(Player ClientConnection);

function AddClientConnectionCloseDelegate(delegate<OnClientConnectionClose> ClientConnectionCloseDelegate);

function ClearClientConnectionCloseDelegate(delegate<OnClientConnectionClose> ClientConnectionCloseDelegate);

delegate OnServerConnectionClose(Player ServerConnection);

function AddServerConnectionCloseDelegate(delegate<OnServerConnectionClose> ServerConnectionCloseDelegate);

function ClearServerConnectionCloseDelegate(delegate<OnServerConnectionClose> ServerConnectionCloseDelegate);

function bool SendClientAuthRequest(Player ClientConnection, UniqueNetId ClientUID);

function bool SendServerAuthRequest(UniqueNetId ServerUID);

function bool SendClientAuthResponse(int AuthTicketUID);

function bool SendServerAuthResponse(Player ClientConnection, int AuthTicketUID);

function bool SendClientAuthEndSessionRequest(Player ClientConnection);

function bool SendServerAuthRetryRequest();

function bool CreateClientAuthSession(UniqueNetId ServerUID, int ServerIP, int ServerPort, bool bSecure, out int OutAuthTicketUID);

function bool VerifyClientAuthSession(UniqueNetId ClientUID, int ClientIP, int ClientPort, int AuthTicketUID);

function EndLocalClientAuthSession(UniqueNetId ServerUID, int ServerIP, int ServerPort);

function EndRemoteClientAuthSession(UniqueNetId ClientUID, int ClientIP);

function EndAllLocalClientAuthSessions();

function EndAllRemoteClientAuthSessions();

function bool CreateServerAuthSession(UniqueNetId ClientUID, int ClientIP, int ClientPort, out int OutAuthTicketUID);

function bool VerifyServerAuthSession(UniqueNetId ServerUID, int ServerIP, int AuthTicketUID);

function EndLocalServerAuthSession(UniqueNetId ClientUID, int ClientIP);

function EndRemoteServerAuthSession(UniqueNetId ServerUID, int ServerIP);

function EndAllLocalServerAuthSessions();

function EndAllRemoteServerAuthSessions();

// Export UOnlineAuthInterface::execAllClientAuthSessions(FFrame&, void* const)
native iterator function AllClientAuthSessions(out AuthSession OutSessionInfo);

// Export UOnlineAuthInterface::execAllLocalClientAuthSessions(FFrame&, void* const)
native iterator function AllLocalClientAuthSessions(out LocalAuthSession OutSessionInfo);

// Export UOnlineAuthInterface::execAllServerAuthSessions(FFrame&, void* const)
native iterator function AllServerAuthSessions(out AuthSession OutSessionInfo);

// Export UOnlineAuthInterface::execAllLocalServerAuthSessions(FFrame&, void* const)
native iterator function AllLocalServerAuthSessions(out LocalAuthSession OutSessionInfo);

function bool FindClientAuthSession(Player ClientConnection, out AuthSession OutSessionInfo);

function bool FindLocalClientAuthSession(Player ServerConnection, out LocalAuthSession OutSessionInfo);

function bool FindServerAuthSession(Player ServerConnection, out AuthSession OutSessionInfo);

function bool FindLocalServerAuthSession(Player ClientConnection, out LocalAuthSession OutSessionInfo);

function bool GetServerUniqueId(out UniqueNetId OutServerUID);

function bool GetServerAddr(out int OutServerIP, out int OutServerPort);
