/*******************************************************************************
 * MaterialInstanceTimeVarying generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MaterialInstanceTimeVarying extends MaterialInstance
    native(Material);

struct native ParameterValueOverTime
{
    var Guid ExpressionGUID;
    var float StartTime;
    /** when this is parameter is to start "ticking" then this value will be set to the current game time */
    var() name ParameterName;
    /** if true, then the CycleTime is the loop time and time loops */
    var() bool bLoop;
    /** This will auto activate this param */
    var() bool bAutoActivate;
    /** this controls time normalization and the loop time */
    var() float CycleTime;
    /** if true, then the CycleTime is used to scale time so all keys are between zero and one */
    var() bool bNormalizeTime;
    /** How much time this will wait before actually firing off.  This is useful for keeping the curves being just the data for controlling the param and not a bunch of slack in the beginning (e.g. to wait N seconds then start fading) */
    var() float OffsetTime;
    /** When using OffsetTime it is nice to be able to offset from the end of the decal's lifetime (e.g. you want to fade out the decal, you want to change the color of the decal before it fades away etc.) */
    var() bool bOffsetFromEnd;

    structdefaultproperties
    {
        ExpressionGUID=(A=0,B=0,C=0,D=0)
        StartTime=-1
        ParameterName=None
        bLoop=false
        bAutoActivate=false
        CycleTime=1
        bNormalizeTime=false
        OffsetTime=0
        bOffsetFromEnd=false
    }
};

struct native FontParameterValueOverTime extends ParameterValueOverTime
{
    var() Font FontValue;
    var() int FontPage;

    structdefaultproperties
    {
        StartTime=0
        CycleTime=0
    }
};

struct native ScalarParameterValueOverTime extends ParameterValueOverTime
{
    /** This allows MITVs to have both single scalar and curve values */
    var() float ParameterValue;
    /** This will automatically be used if there are any values in this Curve */
    var() InterpCurveFloat ParameterValueCurve;

    structdefaultproperties
    {
        StartTime=0
        CycleTime=0
    }
};

struct native TextureParameterValueOverTime extends ParameterValueOverTime
{
    var() Texture ParameterValue;

    structdefaultproperties
    {
        StartTime=0
        CycleTime=0
    }
};

struct native VectorParameterValueOverTime extends ParameterValueOverTime
{
    var() LinearColor ParameterValue;
    /** This will automatically be used if there are any values in this Curve */
    var() InterpCurveVector ParameterValueCurve;

    structdefaultproperties
    {
        ParameterValue=(R=0,G=0,B=0,A=1)
        StartTime=0
        CycleTime=0
    }
};

struct native LinearColorParameterValueOverTime extends ParameterValueOverTime
{
    var() LinearColor ParameterValue;
    /** This will automatically be used if there are any values in this Curve */
    var() InterpCurveLinearColor ParameterValueCurve;

    structdefaultproperties
    {
        ParameterValue=(R=0,G=0,B=0,A=1)
        StartTime=0
        CycleTime=0
    }
};

/** causes all parameters to start playing immediately */
var() bool bAutoActivateAll;
var transient float Duration;
var() array<FontParameterValueOverTime> FontParameterValues;
var() array<ScalarParameterValueOverTime> ScalarParameterValues;
var() array<TextureParameterValueOverTime> TextureParameterValues;
var() array<VectorParameterValueOverTime> VectorParameterValues;
/** LinearColor Values apply to Vector Parameters allowing modification of RGBA values */
var() array<LinearColorParameterValueOverTime> LinearColorParameterValues;

// Export UMaterialInstanceTimeVarying::execSetParent(FFrame&, void* const)
native function SetParent(MaterialInterface NewParent);

// Export UMaterialInstanceTimeVarying::execSetScalarParameterValue(FFrame&, void* const)
native function SetScalarParameterValue(name ParameterName, float Value);

// Export UMaterialInstanceTimeVarying::execSetScalarCurveParameterValue(FFrame&, void* const)
native function SetScalarCurveParameterValue(name ParameterName, const out InterpCurveFloat Value);

// Export UMaterialInstanceTimeVarying::execSetScalarStartTime(FFrame&, void* const)
native function SetScalarStartTime(name ParameterName, float Value);

// Export UMaterialInstanceTimeVarying::execSetDuration(FFrame&, void* const)
native function SetDuration(float Value);

// Export UMaterialInstanceTimeVarying::execSetTextureParameterValue(FFrame&, void* const)
native function SetTextureParameterValue(name ParameterName, Texture Value);

// Export UMaterialInstanceTimeVarying::execSetVectorParameterValue(FFrame&, void* const)
native function SetVectorParameterValue(name ParameterName, const out LinearColor Value);

// Export UMaterialInstanceTimeVarying::execSetVectorCurveParameterValue(FFrame&, void* const)
native function SetVectorCurveParameterValue(name ParameterName, const out InterpCurveVector Value);

// Export UMaterialInstanceTimeVarying::execSetLinearColorParameterValue(FFrame&, void* const)
native function SetLinearColorParameterValue(name ParameterName, const out LinearColor Value);

// Export UMaterialInstanceTimeVarying::execSetLinearColorCurveParameterValue(FFrame&, void* const)
native function SetLinearColorCurveParameterValue(name ParameterName, const out InterpCurveLinearColor Value);

// Export UMaterialInstanceTimeVarying::execSetVectorStartTime(FFrame&, void* const)
native function SetVectorStartTime(name ParameterName, float Value);

// Export UMaterialInstanceTimeVarying::execSetFontParameterValue(FFrame&, void* const)
native function SetFontParameterValue(name ParameterName, Font FontValue, int FontPage);

// Export UMaterialInstanceTimeVarying::execClearParameterValues(FFrame&, void* const)
native function ClearParameterValues();

// Export UMaterialInstanceTimeVarying::execGetMaxDurationFromAllParameters(FFrame&, void* const)
native function float GetMaxDurationFromAllParameters();

// Export UMaterialInstanceTimeVarying::execCheckForVectorParameterConflicts(FFrame&, void* const)
native function bool CheckForVectorParameterConflicts(name ParameterName);
