/*******************************************************************************
 * DynamicSMActor generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DynamicSMActor extends Actor
    abstract
    native
    notplaceable
    hidecategories(Navigation);

var() const editconst export editinline StaticMeshComponent StaticMeshComponent;
var() const editconst export editinline DynamicLightEnvironmentComponent LightEnvironment;
var repnotify transient StaticMesh ReplicatedMesh;
var repnotify MaterialInterface ReplicatedMaterial0;
var repnotify MaterialInterface ReplicatedMaterial1;
var repnotify bool bForceStaticDecals;
/** If a Pawn can be 'based' on this KActor. If not, they will 'bounce' off when they try to. */
var() bool bPawnCanBaseOn;
/** Pawn can base on this KActor if it is asleep -- Pawn will disable KActor physics while based */
var() bool bSafeBaseIfAsleep;
var repnotify Vector ReplicatedMeshTranslation;
var repnotify Rotator ReplicatedMeshRotation;
var repnotify Vector ReplicatedMeshScale3D;

replication
{
     if(bNetDirty)
        ReplicatedMaterial0, ReplicatedMaterial1, 
        ReplicatedMesh, ReplicatedMeshRotation, 
        ReplicatedMeshScale3D, ReplicatedMeshTranslation, 
        bForceStaticDecals;
}

event PostBeginPlay()
{
    super.PostBeginPlay();
    if(StaticMeshComponent != none)
    {
        ReplicatedMesh = StaticMeshComponent.StaticMesh;
        bForceStaticDecals = StaticMeshComponent.bForceStaticDecals;
    }
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'ReplicatedMesh')
    {
        if(ReplicatedMesh != StaticMeshComponent.StaticMesh)
        {
            LightEnvironment.bCastShadows = false;
            LightEnvironment.SetEnabled(true);
            StaticMeshComponent.SetStaticMesh(ReplicatedMesh);
        }        
    }
    else
    {
        if(VarName == 'ReplicatedMaterial0')
        {
            StaticMeshComponent.SetMaterial(0, ReplicatedMaterial0);            
        }
        else
        {
            if(VarName == 'ReplicatedMaterial1')
            {
                StaticMeshComponent.SetMaterial(1, ReplicatedMaterial1);                
            }
            else
            {
                if(VarName == 'ReplicatedMeshTranslation')
                {
                    StaticMeshComponent.SetTranslation(ReplicatedMeshTranslation);                    
                }
                else
                {
                    if(VarName == 'ReplicatedMeshRotation')
                    {
                        StaticMeshComponent.SetRotation(ReplicatedMeshRotation);                        
                    }
                    else
                    {
                        if(VarName == 'ReplicatedMeshScale3D')
                        {
                            StaticMeshComponent.SetScale3D(ReplicatedMeshScale3D / 100);                            
                        }
                        else
                        {
                            if(VarName == 'bForceStaticDecals')
                            {
                                StaticMeshComponent.SetForceStaticDecals(bForceStaticDecals);                                
                            }
                            else
                            {
                                super.ReplicatedEvent(VarName);
                            }
                        }
                    }
                }
            }
        }
    }
}

function OnSetMesh(SeqAct_SetMesh Action)
{
    local bool bForce;

    if(Action.MeshType == 0)
    {
        bForce = (Action.bIsAllowedToMove == StaticMeshComponent.bForceStaticDecals) || Action.bAllowDecalsToReattach;
        if((Action.NewStaticMesh != none) && (Action.NewStaticMesh != StaticMeshComponent.StaticMesh) || bForce)
        {
            LightEnvironment.bCastShadows = false;
            LightEnvironment.SetEnabled(true);
            bForceStaticDecals = !Action.bIsAllowedToMove;
            StaticMeshComponent.SetForceStaticDecals(bForceStaticDecals);
            StaticMeshComponent.bAllowDecalAutomaticReAttach = Action.bAllowDecalsToReattach;
            StaticMeshComponent.SetStaticMesh(Action.NewStaticMesh, Action.bAllowDecalsToReattach);
            StaticMeshComponent.bAllowDecalAutomaticReAttach = true;
            ReplicatedMesh = Action.NewStaticMesh;
            ForceNetRelevant();
        }
    }
}

function OnSetMaterial(SeqAct_SetMaterial Action)
{
    StaticMeshComponent.SetMaterial(Action.MaterialIndex, Action.NewMaterial);
    if(Action.MaterialIndex == 0)
    {
        ReplicatedMaterial0 = Action.NewMaterial;
        ForceNetRelevant();        
    }
    else
    {
        if(Action.MaterialIndex == 1)
        {
            ReplicatedMaterial1 = Action.NewMaterial;
            ForceNetRelevant();
        }
    }
}

function SetStaticMesh(StaticMesh NewMesh, optional Vector NewTranslation, optional Rotator NewRotation, optional Vector NewScale3D)
{
    StaticMeshComponent.SetStaticMesh(NewMesh);
    StaticMeshComponent.SetTranslation(NewTranslation);
    StaticMeshComponent.SetRotation(NewRotation);
    if(!IsZero(NewScale3D))
    {
        StaticMeshComponent.SetScale3D(NewScale3D);
        ReplicatedMeshScale3D = NewScale3D * 100;
    }
    ReplicatedMesh = NewMesh;
    ReplicatedMeshTranslation = NewTranslation;
    ReplicatedMeshRotation = NewRotation;
    ForceNetRelevant();
}

simulated function bool CanBasePawn(Pawn P)
{
    if(bPawnCanBaseOn || (bSafeBaseIfAsleep && StaticMeshComponent != none) && !StaticMeshComponent.RigidBodyIsAwake())
    {
        return true;
    }
    return false;
}

event Attach(Actor Other)
{
    local Pawn P;

    super.Attach(Other);
    if(bSafeBaseIfAsleep)
    {
        P = Pawn(Other);
        if(P != none)
        {
            SetPhysics(0);
        }
    }
}

event Detach(Actor Other)
{
    local int Idx;
    local Pawn P, Test;
    local bool bResetPhysics;

    super.Detach(Other);
    P = Pawn(Other);
    if(P != none)
    {
        bResetPhysics = true;
        Idx = 0;
        J0x55:

        if(Idx < Attached.Length)
        {
            Test = Pawn(Attached[Idx]);
            if((Test != none) && Test != P)
            {
                bResetPhysics = false;
                goto J0xD8;
            }
            ++ Idx;
            goto J0x55;
        }
        J0xD8:

        if(bResetPhysics)
        {
            SetPhysics(10);
        }
    }
}

final simulated function SetLightEnvironmentToNotBeDynamic()
{
    if(LightEnvironment != none)
    {
        LightEnvironment.bDynamic = false;
    }
}

defaultproperties
{
    begin object name=StaticMeshComponent0 class=StaticMeshComponent
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__DynamicSMActor.MyLightEnvironment'
        BlockRigidBody=false
    object end
    // Reference: StaticMeshComponent'Default__DynamicSMActor.StaticMeshComponent0'
    StaticMeshComponent=StaticMeshComponent0
    LightEnvironment=DynamicLightEnvironmentComponent'Default__DynamicSMActor.MyLightEnvironment'
    bPawnCanBaseOn=true
    Components(0)=DynamicLightEnvironmentComponent'Default__DynamicSMActor.MyLightEnvironment'
    begin object name=StaticMeshComponent0 class=StaticMeshComponent
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__DynamicSMActor.MyLightEnvironment'
        BlockRigidBody=false
    object end
    // Reference: StaticMeshComponent'Default__DynamicSMActor.StaticMeshComponent0'
    Components(1)=StaticMeshComponent0
    RemoteRole=ENetRole.ROLE_SimulatedProxy
    bShadowParented=true
    bGameRelevant=true
    bEdShouldSnap=true
    bPathColliding=true
    begin object name=StaticMeshComponent0 class=StaticMeshComponent
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__DynamicSMActor.MyLightEnvironment'
        BlockRigidBody=false
    object end
    // Reference: StaticMeshComponent'Default__DynamicSMActor.StaticMeshComponent0'
    CollisionComponent=StaticMeshComponent0
}