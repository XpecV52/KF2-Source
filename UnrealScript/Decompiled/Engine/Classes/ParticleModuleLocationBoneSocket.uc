/*******************************************************************************
 * ParticleModuleLocationBoneSocket generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ParticleModuleLocationBoneSocket extends ParticleModuleLocationBase
    native(Particle)
    editinlinenew
    hidecategories(Object,Object,Object);

enum ELocationBoneSocketSource
{
    BONESOCKETSOURCE_Bones,
    BONESOCKETSOURCE_Sockets,
    BONESOCKETSOURCE_MAX
};

enum ELocationBoneSocketSelectionMethod
{
    BONESOCKETSEL_Sequential,
    BONESOCKETSEL_Random,
    BONESOCKETSEL_RandomExhaustive,
    BONESOCKETSEL_MAX
};

struct native LocationBoneSocketInfo
{
    /** The name of the bone/socket on the skeletal mesh */
    var() name BoneSocketName;
    /** The offset from the bone/socket to use */
    var() Vector Offset;

    structdefaultproperties
    {
        BoneSocketName=None
        Offset=(X=0,Y=0,Z=0)
    }
};

/**  
 *Whether the module uses Bones or Sockets for locations.
 * 
 *       BONESOCKETSOURCE_Bones          - Use Bones as the source locations.
 *       BONESOCKETSOURCE_Sockets        - Use Sockets as the source locations.
 */
var(BoneSocket) ParticleModuleLocationBoneSocket.ELocationBoneSocketSource SourceType;
/**  
 *The method by which to select the bone/socket to spawn at.
 * 
 *       SEL_Sequential                  - loop through the bone/socket array in order
 *       SEL_Random                              - randomly select a bone/socket from the array
 *       SEL_RandomExhaustive    - randomly select a bone/socket, but never the same one twice until all have been used, then reset
 */
var(BoneSocket) ParticleModuleLocationBoneSocket.ELocationBoneSocketSelectionMethod SelectionMethod;
/** An offset to apply to each bone/socket */
var(BoneSocket) Vector UniversalOffset;
/** The name(s) of the bone/socket(s) to position at */
var(BoneSocket) array<LocationBoneSocketInfo> SourceLocations;
/** If TRUE, update the particle locations each frame with that of the bone/socket */
var(BoneSocket) bool bUpdatePositionEachFrame;
/** If TRUE, rotate mesh emitter meshes to orient w/ the socket */
var(BoneSocket) bool bOrientMeshEmitters;
/** If TRUE, the spawned particle will have the velocity of the bone or socket at the spawn time. */
var(BoneSocket) bool bInheritVelocityAtSpawn;
/** The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game. */
var(BoneSocket) name SkelMeshActorParamName;
/** The name of the skeletal mesh to use in the editor */
var(BoneSocket) editoronly SkeletalMesh EditorSkelMesh;
var float LastUpdateTime;

defaultproperties
{
    SourceType=ELocationBoneSocketSource.BONESOCKETSOURCE_Sockets
    bOrientMeshEmitters=true
    SkelMeshActorParamName=BoneSocketActor
    bSpawnModule=true
    bUpdateModule=true
    bFinalUpdateModule=true
    bSupported3DDrawMode=true
}