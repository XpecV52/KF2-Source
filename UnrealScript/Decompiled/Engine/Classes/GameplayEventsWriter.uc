/*******************************************************************************
 * GameplayEventsWriter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameplayEventsWriter extends GameplayEventsWriterBase
    native;

// Export UGameplayEventsWriter::execResolvePlayerIndex(FFrame&, void* const)
native function int ResolvePlayerIndex(Controller Player);

// Export UGameplayEventsWriter::execOpenStatsFile(FFrame&, void* const)
native function bool OpenStatsFile(string Filename);

// Export UGameplayEventsWriter::execCloseStatsFile(FFrame&, void* const)
native function CloseStatsFile();

// Export UGameplayEventsWriter::execSerializeHeader(FFrame&, void* const)
protected native function bool SerializeHeader();

// Export UGameplayEventsWriter::execSerializeFooter(FFrame&, void* const)
protected native function bool SerializeFooter();

// Export UGameplayEventsWriter::execStartLogging(FFrame&, void* const)
native function StartLogging(optional float HeartbeatDelta);

// Export UGameplayEventsWriter::execResetLogging(FFrame&, void* const)
native function ResetLogging(optional float HeartbeatDelta);

// Export UGameplayEventsWriter::execEndLogging(FFrame&, void* const)
native function EndLogging();

// Export UGameplayEventsWriter::execLogGameIntEvent(FFrame&, void* const)
native function LogGameIntEvent(int EventID, int Value);

// Export UGameplayEventsWriter::execLogGameStringEvent(FFrame&, void* const)
native function LogGameStringEvent(int EventID, string Value);

// Export UGameplayEventsWriter::execLogGameFloatEvent(FFrame&, void* const)
native function LogGameFloatEvent(int EventID, float Value);

// Export UGameplayEventsWriter::execLogGamePositionEvent(FFrame&, void* const)
native function LogGamePositionEvent(int EventID, const out Vector Position, float Value);

// Export UGameplayEventsWriter::execLogTeamIntEvent(FFrame&, void* const)
native function LogTeamIntEvent(int EventID, TeamInfo Team, int Value);

// Export UGameplayEventsWriter::execLogTeamFloatEvent(FFrame&, void* const)
native function LogTeamFloatEvent(int EventID, TeamInfo Team, float Value);

// Export UGameplayEventsWriter::execLogTeamStringEvent(FFrame&, void* const)
native function LogTeamStringEvent(int EventID, TeamInfo Team, string Value);

// Export UGameplayEventsWriter::execLogPlayerIntEvent(FFrame&, void* const)
native function LogPlayerIntEvent(int EventID, Controller Player, int Value);

// Export UGameplayEventsWriter::execLogPlayerFloatEvent(FFrame&, void* const)
native function LogPlayerFloatEvent(int EventID, Controller Player, float Value);

// Export UGameplayEventsWriter::execLogPlayerStringEvent(FFrame&, void* const)
native function LogPlayerStringEvent(int EventID, Controller Player, string EventString);

// Export UGameplayEventsWriter::execLogPlayerSpawnEvent(FFrame&, void* const)
native function LogPlayerSpawnEvent(int EventID, Controller Player, class<Pawn> PawnClass, int TeamID);

// Export UGameplayEventsWriter::execLogPlayerLoginChange(FFrame&, void* const)
native function LogPlayerLoginChange(int EventID, Controller Player, string PlayerName, UniqueNetId PlayerID, bool bSplitScreen);

// Export UGameplayEventsWriter::execLogAllPlayerPositionsEvent(FFrame&, void* const)
native function LogAllPlayerPositionsEvent(int EventID);

// Export UGameplayEventsWriter::execLogPlayerKillDeath(FFrame&, void* const)
native function LogPlayerKillDeath(int EventID, int KillType, Controller Killer, class<DamageType> dmgType, Controller Dead);

// Export UGameplayEventsWriter::execLogPlayerPlayerEvent(FFrame&, void* const)
native function LogPlayerPlayerEvent(int EventID, Controller Player, Controller Target);

// Export UGameplayEventsWriter::execLogWeaponIntEvent(FFrame&, void* const)
native function LogWeaponIntEvent(int EventID, Controller Player, class<Weapon> WeaponClass, int Value);

// Export UGameplayEventsWriter::execLogDamageEvent(FFrame&, void* const)
native function LogDamageEvent(int EventID, Controller Player, class<DamageType> dmgType, Controller Target, int Amount);

// Export UGameplayEventsWriter::execLogProjectileIntEvent(FFrame&, void* const)
native function LogProjectileIntEvent(int EventID, Controller Player, class<Projectile> Proj, int Value);

// Export UGameplayEventsWriter::execLogSystemPollEvents(FFrame&, void* const)
native function LogSystemPollEvents();

// Export UGameplayEventsWriter::execGetGenericParamListEntry(FFrame&, void* const)
native function GenericParamListStatEntry GetGenericParamListEntry();

function RecordAIPathFail(Controller AI, coerce string Reason, Vector Dest)
{
    local GenericParamListStatEntry PLE;

    if(AI.Pawn != none)
    {
        PLE = GetGenericParamListEntry();
        PLE.AddInt('EventID', 302);
        PLE.AddString('Name', string(AI.Name));
        PLE.AddVector('BaseLocation', AI.Pawn.Location);
        PLE.AddString('Sprite', "Texture2D'EditorResources.BadPylon'");
        PLE.AddString('Text', Reason);
        PLE.AddVector('LineStart', AI.Pawn.Location);
        PLE.AddVector('LineEnd', Dest);
        PLE.AddVector('BoxLoc', Dest);
        PLE.AddVector('BoxExtent', vect(5, 5, 5));
        PLE.AddInt('PlayerIndex', ResolvePlayerIndex(AI));
        PLE.CommitToDisk();
    }
}

function int RecordCoverLinkFireLinks(CoverLink Link, Controller Player)
{
    local GenericParamListStatEntry PLE;
    local int SlotIdx, FireLinkIdx;
    local Vector SlotLoc, DestLoc;
    local int Recorded;
    local CoverInfo DestInfo;

    SlotIdx = 0;
    J0x0B:

    if(SlotIdx < Link.Slots.Length)
    {
        SlotLoc = Link.GetSlotLocation(SlotIdx);
        FireLinkIdx = 0;
        J0x76:

        if(FireLinkIdx < Link.Slots[SlotIdx].FireLinks.Length)
        {
            if(Link.GetFireLinkTargetCoverInfo(SlotIdx, FireLinkIdx, DestInfo))
            {
                DestLoc = SlotLoc;
                if(DestInfo.Link != none)
                {
                    DestLoc = DestInfo.Link.GetSlotLocation(DestInfo.SlotIdx);
                }
                PLE = GetGenericParamListEntry();
                PLE.AddInt('EventID', 305);
                PLE.AddString('Name', Link.GetDebugString(SlotIdx));
                PLE.AddVector('BaseLocation', SlotLoc);
                PLE.AddVector('HeatmapPoint', SlotLoc);
                PLE.AddString('Sprite', "Texture2D'EditorResources.S_NavP'");
                PLE.AddString('Text', "DERP");
                PLE.AddVector('LineStart', SlotLoc);
                PLE.AddVector('LineEnd', DestLoc);
                PLE.AddVector('BoxLoc', SlotLoc);
                PLE.AddVector('BoxExtent', vect(5, 5, 5));
                PLE.AddInt('PlayerIndex', ResolvePlayerIndex(Player));
                ++ Recorded;
                PLE.CommitToDisk();
            }
            ++ FireLinkIdx;
            goto J0x76;
        }
        ++ SlotIdx;
        goto J0x0B;
    }
    return Recorded;
}
