/*******************************************************************************
 * DownloadableContentEnumerator generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DownloadableContentEnumerator extends Object
    native(GameEngine);

var protectedwrite array<OnlineContent> DLCBundles;
var string DLCRootDir;
var protected array< delegate<OnFindDLCComplete> > FindDLCDelegates;
var delegate<OnFindDLCComplete> __OnFindDLCComplete__Delegate;

// Export UDownloadableContentEnumerator::execFindDLC(FFrame&, void* const)
native function FindDLC();

delegate OnFindDLCComplete();

function AddFindDLCDelegate(delegate<OnFindDLCComplete> InDelegate)
{
    if(FindDLCDelegates.Find(InDelegate == -1)
    {
        FindDLCDelegates.AddItem(InDelegate;
    }
}

function ClearFindDLCDelegate(delegate<OnFindDLCComplete> InDelegate)
{
    local int RemoveIndex;

    RemoveIndex = FindDLCDelegates.Find(InDelegate;
    if(RemoveIndex != -1)
    {
        FindDLCDelegates.Remove(RemoveIndex, 1;
    }
}

// Export UDownloadableContentEnumerator::execDeleteDLC(FFrame&, void* const)
native function DeleteDLC(string DLCName);

function InstallAllDLC()
{
    local DownloadableContentManager DLCManager;

    DLCManager = Class'GameEngine'.static.GetDLCManager();
    if(DLCManager != none)
    {
        DLCManager.InstallDLCs(DLCBundles);
    }
}

// Export UDownloadableContentEnumerator::execInstallDLC(FFrame&, void* const)
native function InstallDLC(string DLCName);

// Export UDownloadableContentEnumerator::execTriggerFindDLCDelegates(FFrame&, void* const)
native function TriggerFindDLCDelegates();

defaultproperties
{
    DLCRootDir="../../DLC/"
}