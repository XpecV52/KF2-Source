/*******************************************************************************
 * AnimSequence generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AnimSequence extends Object
    native(Anim)
    hidecategories(Object);

enum AnimationCompressionFormat
{
    ACF_None,
    ACF_Float96NoW,
    ACF_Fixed48NoW,
    ACF_IntervalFixed32NoW,
    ACF_Fixed32NoW,
    ACF_Float32NoW,
    ACF_Identity,
    ACF_MAX
};

enum AnimationKeyFormat
{
    AKF_ConstantKeyLerp,
    AKF_VariableKeyLerp,
    AKF_PerTrackCompression,
    AKF_MAX
};

struct native AnimNotifyEvent
{
    /**  
     ** Triggers an animation notify.  Each AnimNotifyEvent contains an AnimNotify object
     * * which has its Notify method called and passed to the animation.
     */
    var() float Time;
    /**  
     ** Triggers an animation notify.  Each AnimNotifyEvent contains an AnimNotify object
     * * which has its Notify method called and passed to the animation.
     */
    var() export editinline AnimNotify Notify;
    /**  
     ** Triggers an animation notify.  Each AnimNotifyEvent contains an AnimNotify object
     * * which has its Notify method called and passed to the animation.
     */
    var() editoronly name Comment;
    /**  
     ** Triggers an animation notify.  Each AnimNotifyEvent contains an AnimNotify object
     * * which has its Notify method called and passed to the animation.
     */
    var() float Duration;

    structdefaultproperties
    {
        Time=0
        Notify=none
        Comment=None
        Duration=0
    }
};

struct RawAnimSequenceTrack
{
    var array<Vector> PosKeys;
    var array<Quat> RotKeys;

    structdefaultproperties
    {
        PosKeys=none
        RotKeys=none
    }
};

struct native TimeModifier
{
    /** Time to apply */
    var() float Time;
    /** This will linearly interpolate between multiple strength within one anim data */
    var() float TargetStrength;

    structdefaultproperties
    {
        Time=0
        TargetStrength=0
    }
};

struct native SkelControlModifier
{
    /** SkelControl Node Name in the Anim Tree that would apply */
    var() name SkelControlName;
    /** Modifiers for what time and what strength for this skelcontrol name */
    var() editinline array<editinline TimeModifier> Modifiers;

    structdefaultproperties
    {
        SkelControlName=None
        Modifiers=none
    }
};

struct native TranslationTrack
{
    var array<Vector> PosKeys;
    var array<float> Times;

    structdefaultproperties
    {
        PosKeys=none
        Times=none
    }
};

struct native RotationTrack
{
    var array<Quat> RotKeys;
    var array<float> Times;

    structdefaultproperties
    {
        RotKeys=none
        Times=none
    }
};

struct native CurveTrack
{
    var name CurveName;
    var array<float> CurveWeights;

    structdefaultproperties
    {
        CurveName=None
        CurveWeights=none
    }
};

struct native CompressedTrack
{
    var array<byte> ByteStream;
    var array<float> Times;
    var float Mins[3];
    var float Ranges[3];

    structdefaultproperties
    {
        ByteStream=none
        Times=none
        Mins[0]=0
        Mins[1]=0
        Mins[2]=0
        Ranges[0]=0
        Ranges[1]=0
        Ranges[2]=0
    }
};

var name SequenceName;
/** Animation notifies, sorted by time (earliest notification first). */
var() editinline array<editinline AnimNotifyEvent> Notifies;
/** Animation Meta Data */
var() export editinline array<export editinline AnimMetaData> MetaData;
var editinline deprecated array<editinline deprecated SkelControlModifier> BoneControlModifiers;
var float SequenceLength;
var int NumFrames;
/** Number for tweaking playback rate of this animation globally. */
var() float RateScale;
/** if TRUE, disable interpolation between last and first frame when looping. */
var() bool bNoLoopingInterpolation;
var const bool bIsAdditive;
var editoronly bool bAdditiveBuiltLooping;
/**  
 *Do not attempt to override compression scheme when running CompressAnimations commandlet.
 * Some high frequency animations are too sensitive and shouldn't be changed.
 */
var() editoronly const bool bDoNotOverrideCompression;
var const transient bool bHasBeenUsed;
var editoronly bool bWasCompressedWithoutTranslations;
var private const deprecated array<deprecated RawAnimSequenceTrack> RawAnimData;
var private native const array<RawAnimSequenceTrack> RawAnimationData;
var const transient array<TranslationTrack> TranslationData;
var const transient array<RotationTrack> RotationData;
var const array<CurveTrack> CurveData;
/**  
 *The compression scheme that was most recently used to compress this animation.
 * May be NULL.
 */
var() editoronly editconst editinline AnimationCompressionAlgorithm CompressionScheme;
var const AnimSequence.AnimationCompressionFormat TranslationCompressionFormat;
var const AnimSequence.AnimationCompressionFormat RotationCompressionFormat;
var const AnimSequence.AnimationKeyFormat KeyEncodingFormat;
var array<int> CompressedTrackOffsets;
var native array<byte> CompressedByteStream;
var private native transient Pointer TranslationCodec;
var private native transient Pointer RotationCodec;
var const deprecated array<deprecated BoneAtom> AdditiveRefPose;
var const array<RawAnimSequenceTrack> AdditiveBasePose;
var editoronly const name AdditiveRefName;
var editoronly array<editoronly AnimSequence> AdditiveBasePoseAnimSeq;
var editoronly array<editoronly AnimSequence> AdditiveTargetPoseAnimSeq;
var editoronly array<editoronly AnimSequence> RelatedAdditiveAnimSeqs;
var const int EncodingPkgVersion;
var editoronly const int CompressCommandletVersion;
var const transient float UseScore;

// Export UAnimSequence::execGetNotifyTimeByClass(FFrame&, void* const)
native function float GetNotifyTimeByClass(class<AnimNotify> NotifyClass, optional float PlayRate, optional float StartPosition, optional out AnimNotify out_Notify, optional out float out_Duration)
{
    PlayRate = 1;
    StartPosition = -1;                                    
}

defaultproperties
{
    RateScale=1
}