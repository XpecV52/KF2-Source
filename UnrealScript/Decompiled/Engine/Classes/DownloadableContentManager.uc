/*******************************************************************************
 * DownloadableContentManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DownloadableContentManager extends Object
    native(GameEngine);

var native const transient array<Pointer> DLCConfigCacheChanges;
var const transient array<string> InstalledDLC;
var native const transient Map_Mirror NonPackageFilePathMap;
var native const transient array< Class > ClassesToReload;
var native const transient array<Object> ObjectsToReload;
var const transient array<string> QueuedFullyLoadPackageInis;
var const transient GameEngine GameEngine;
var delegate<OnRefreshComplete> __OnRefreshComplete__Delegate;

// Export UDownloadableContentManager::execInstallDLC(FFrame&, void* const)
native function bool InstallDLC(const out OnlineContent DLCBundle);

// Export UDownloadableContentManager::execInstallDLCs(FFrame&, void* const)
native function InstallDLCs(const out array<OnlineContent> DLCBundles);

// Export UDownloadableContentManager::execClearDLC(FFrame&, void* const)
native function ClearDLC();

// Export UDownloadableContentManager::execGetDLCNonPackageFilePath(FFrame&, void* const)
native function bool GetDLCNonPackageFilePath(name NonPackageFileName, out string Path);

// Export UDownloadableContentManager::execAddSectionToObjectList(FFrame&, void* const)
native function AddSectionToObjectList(string Section);

// Export UDownloadableContentManager::execMarkPerObjectConfigPendingKill(FFrame&, void* const)
native function MarkPerObjectConfigPendingKill(string Section);

// Export UDownloadableContentManager::execUpdateObjectLists(FFrame&, void* const)
native function UpdateObjectLists();

// Export UDownloadableContentManager::execInstallPackages(FFrame&, void* const)
protected native function InstallPackages(const out OnlineContent DLCBundle);

// Export UDownloadableContentManager::execInstallNonPackageFiles(FFrame&, void* const)
protected native function InstallNonPackageFiles(const out OnlineContent DLCBundle);

event Init()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = Class'GameEngine'.static.GetOnlineSubsystem();
    if(OnlineSub != none)
    {
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            OnlineSub.PlayerInterface.AddLoginChangeDelegate(OnLoginChange);
        }
        if(NotEqual_InterfaceInterface(OnlineSub.SystemInterface, (none)))
        {
            OnlineSub.SystemInterface.AddStorageDeviceChangeDelegate(OnStorageDeviceChange);
        }
        if(NotEqual_InterfaceInterface(OnlineSub.ContentInterface, (none)))
        {
            OnlineSub.ContentInterface.AddContentChangeDelegate(OnContentChange);
        }
    }
}

function OnLoginChange(byte LocalUserNum)
{
    RefreshDLC();
}

function OnStorageDeviceChange()
{
    RefreshDLC();
}

function OnContentChange()
{
    RefreshDLC();
}

function RefreshDLC()
{
    local DownloadableContentEnumerator DLCEnum;

    ClearDLC();
    DLCEnum = Class'GameEngine'.static.GetDLCEnumerator();
    if(DLCEnum != none)
    {
        DLCEnum.AddFindDLCDelegate(RefreshDLCEnumComplete);
        DLCEnum.FindDLC();
    }
}

function RefreshDLCEnumComplete()
{
    local DownloadableContentEnumerator DLCEnum;

    DLCEnum = Class'GameEngine'.static.GetDLCEnumerator();
    if(DLCEnum != none)
    {
        DLCEnum.ClearFindDLCDelegate(RefreshDLCEnumComplete);
        DLCEnum.InstallAllDLC();
    }
    OnRefreshComplete();
}

// Export UDownloadableContentManager::execAddPackagesToFullyLoad(FFrame&, void* const)
native function AddPackagesToFullyLoad(string Filename);

delegate OnRefreshComplete();
