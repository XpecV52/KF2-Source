/*******************************************************************************
 * GameReplicationInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameReplicationInfo extends ReplicationInfo
    native(ReplicationInfo)
    nativereplication
    config(Game)
    notplaceable
    hidecategories(Navigation,Movement,Collision);

var repnotify class<GameInfo> GameClass;
var bool bStopCountDown;
var repnotify bool bMatchHasBegun;
var repnotify bool bMatchIsOver;
var repnotify bool bRoundIsOver;
var bool bWaitingForAAR;
var bool bPendingMusicTrackChange;
var int RemainingTime;
var int ElapsedTime;
var int RemainingMinute;
var int GoalScore;
var int TimeLimit;
var array<TeamInfo> Teams;
/** Name of the server, i.e.: Bob's Server. */
var() globalconfig string ServerName;
var Actor Winner;
var array<PlayerReplicationInfo> PRIArray;
var array<PlayerReplicationInfo> InactivePRIArray;

replication
{
     if(bNetDirty)
        Winner, bMatchHasBegun, 
        bMatchIsOver, bRoundIsOver, 
        bStopCountDown;

     if(!bNetInitial && bNetDirty)
        RemainingMinute;

     if(bNetInitial)
        ElapsedTime, GameClass, 
        GoalScore, RemainingTime, 
        ServerName, TimeLimit;
}

simulated event PostBeginPlay()
{
    local PlayerReplicationInfo PRI;
    local TeamInfo TI;

    if(WorldInfo.NetMode == NM_Client)
    {
        ServerName = "";
    }
    SetTimer(WorldInfo.TimeDilation, true);
    WorldInfo.GRI = self;
    foreach DynamicActors(Class'PlayerReplicationInfo', PRI)
    {
        AddPRI(PRI);        
    }    
    foreach DynamicActors(Class'TeamInfo', TI)
    {
        if(TI.TeamIndex >= 0)
        {
            SetTeam(TI.TeamIndex, TI);
        }        
    }    
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'bMatchHasBegun')
    {
        if(bMatchHasBegun)
        {
            WorldInfo.NotifyMatchStarted();
        }        
    }
    else
    {
        if(VarName == 'bMatchIsOver')
        {
            if(bMatchIsOver)
            {
                EndGame();
            }            
        }
        else
        {
            if(VarName == 'GameClass')
            {
                ReceivedGameClass();                
            }
            else
            {
                super(Actor).ReplicatedEvent(VarName);
            }
        }
    }
}

simulated function ReceivedGameClass()
{
    local PlayerController PC;

    foreach LocalPlayerControllers(Class'PlayerController', PC)
    {
        PC.ReceivedGameClass(GameClass);        
    }    
}

function Reset()
{
    super(Actor).Reset();
    Winner = none;
}

simulated event Timer()
{
    if((WorldInfo.Game == none) || WorldInfo.Game.MatchIsInProgress())
    {
        ++ ElapsedTime;
    }
    if(WorldInfo.NetMode == NM_Client)
    {
        if(RemainingMinute != 0)
        {
            RemainingTime = RemainingMinute;
            RemainingMinute = 0;
        }
    }
    if((RemainingTime > 0) && !bStopCountDown)
    {
        -- RemainingTime;
        if(WorldInfo.NetMode != NM_Client)
        {
            if((RemainingTime % 60) == 0)
            {
                RemainingMinute = RemainingTime;
            }
        }
    }
    SetTimer(WorldInfo.TimeDilation, true);
}

// Export UGameReplicationInfo::execOnSameTeam(FFrame&, void* const)
native simulated function bool OnSameTeam(Actor A, Actor B);

simulated function AddPRI(PlayerReplicationInfo PRI)
{
    local int I;

    if(!PRI.bIsInactive)
    {
        I = 0;
        J0x2F:

        if(I < PRIArray.Length)
        {
            if(PRIArray[I] == PRI)
            {
                return;
            }
            ++ I;
            goto J0x2F;
        }
        PRIArray[PRIArray.Length] = PRI;        
    }
    else
    {
        if(InactivePRIArray.Find(PRI == -1)
        {
            InactivePRIArray[InactivePRIArray.Length] = PRI;
        }
    }
}

simulated function RemovePRI(PlayerReplicationInfo PRI)
{
    local int I;

    I = 0;
    J0x0B:

    if(I < PRIArray.Length)
    {
        if(PRIArray[I] == PRI)
        {
            PRIArray.Remove(I, 1;
            return;
        }
        ++ I;
        goto J0x0B;
    }
}

simulated function SetTeam(int Index, TeamInfo TI)
{
    if(Index >= 0)
    {
        Teams[Index] = TI;
    }
}

simulated function StartMatch()
{
    bMatchHasBegun = true;
}

simulated function EndGame()
{
    bMatchIsOver = true;
}

simulated function bool IsMultiplayerGame()
{
    return WorldInfo.NetMode != NM_Standalone;
}

simulated function bool IsCoopMultiplayerGame()
{
    return false;
}

simulated event bool ShouldShowGore()
{
    return true;
}

simulated event PlayerReplicationInfo GetPRIByPlayfabId(const string InPlayfabPlayerId)
{
    local int I;

    if(InPlayfabPlayerId != "")
    {
        I = 0;
        J0x1B:

        if(I < PRIArray.Length)
        {
            if(PRIArray[I].PlayfabPlayerId == InPlayfabPlayerId)
            {
                return PRIArray[I];
            }
            ++ I;
            goto J0x1B;
        }
    }
    return none;
}

defaultproperties
{
    bStopCountDown=true
    ServerName="Killing Floor 2 Server"
    TickGroup=ETickingGroup.TG_DuringAsyncWork
}