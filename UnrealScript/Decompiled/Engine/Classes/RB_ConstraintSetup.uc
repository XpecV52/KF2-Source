/*******************************************************************************
 * RB_ConstraintSetup generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class RB_ConstraintSetup extends Object
    native(Physics)
    hidecategories(Object);

struct native LinearDOFSetup
{
    /** Whether this DOF has any limit on it. */
    var() byte bLimited;
    /**  
     *'Half-length' of limit gap. Can shift it by fiddling Pos1/2.
     *               A size of 0.0 results in 'locking' the linear DOF.
     */
    var() float LimitSize;

    structdefaultproperties
    {
        bLimited=1
        LimitSize=0
    }
};

/** Name of bone that this joint is associated with. */
var() const name JointName;
/**  
 *Name of first bone (body) that this constraint is connecting. 
 *       This will be the 'child' bone in a PhysicsAsset.
 */
var() name ConstraintBone1;
/**  
 *Name of second bone (body) that this constraint is connecting. 
 *       This will be the 'parent' bone in a PhysicsAset.
 */
var() name ConstraintBone2;
var Vector Pos1;
var Vector PriAxis1;
var Vector SecAxis1;
var Vector Pos2;
var Vector PriAxis2;
var Vector SecAxis2;
var Vector PulleyPivot1;
var Vector PulleyPivot2;
/**  
 *If distance error between bodies exceeds 0.1 units, or rotation error exceeds 10 degrees, body will be projected to fix this.
 * For example a chain spinning too fast will have its elements appear detached due to velocity, this will project all bodies so they still appear attached to each other.
 */
var() bool bEnableProjection;
var(Linear) bool bLinearLimitSoft;
var(Linear) bool bLinearBreakable;
/** ANGULAR DOF */
var(Angular) bool bSwingLimited;
var(Angular) bool bTwistLimited;
var(Angular) bool bSwingLimitSoft;
var(Angular) bool bTwistLimitSoft;
var(Angular) bool bAngularBreakable;
/** PULLEY */
var(Pulley) bool bIsPulley;
var(Pulley) bool bMaintainMinDistance;
/** LINEAR DOF */
var(Linear) LinearDOFSetup LinearXSetup;
var(Linear) LinearDOFSetup LinearYSetup;
var(Linear) LinearDOFSetup LinearZSetup;
var(Linear) float LinearLimitStiffness;
var(Linear) float LinearLimitDamping;
var(Linear) float LinearBreakThreshold;
/** Used if bSwing1Limited is true. In degrees. */
var(Angular) float Swing1LimitAngle;
/** Used if bSwing2Limited is true. In degrees. */
var(Angular) float Swing2LimitAngle;
/** Used if bTwistLimited is true. In degrees. */
var(Angular) float TwistLimitAngle;
var(Angular) float SwingLimitStiffness;
var(Angular) float SwingLimitDamping;
var(Angular) float TwistLimitStiffness;
var(Angular) float TwistLimitDamping;
var(Angular) float AngularBreakThreshold;
var(Pulley) float PulleyRatio;

defaultproperties
{
    PriAxis1=(X=1,Y=0,Z=0)
    SecAxis1=(X=0,Y=1,Z=0)
    PriAxis2=(X=1,Y=0,Z=0)
    SecAxis2=(X=0,Y=1,Z=0)
    LinearXSetup=(bLimited=1,LimitSize=0)
    LinearYSetup=(bLimited=1,LimitSize=0)
    LinearZSetup=(bLimited=1,LimitSize=0)
    LinearBreakThreshold=300
    AngularBreakThreshold=500
    PulleyRatio=1
}