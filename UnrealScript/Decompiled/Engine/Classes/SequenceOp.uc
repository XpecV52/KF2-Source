/*******************************************************************************
 * SequenceOp generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SequenceOp extends SequenceObject
    abstract
    native(Sequence)
    hidecategories(Object);

struct native SeqOpInputLink
{
    var string LinkDesc;
    var bool bHasImpulse;
    var int QueuedActivations;
    var bool bDisabled;
    var bool bDisabledPIE;
    var SequenceOp LinkedOp;
    var int DrawY;
    var bool bHidden;
    var float ActivateDelay;
    var editoronly transient bool bMoving;
    var editoronly bool bClampedMax;
    var editoronly bool bClampedMin;
    var editoronly int OverrideDelta;

    structdefaultproperties
    {
        LinkDesc=""
        bHasImpulse=false
        QueuedActivations=0
        bDisabled=false
        bDisabledPIE=false
        LinkedOp=none
        DrawY=0
        bHidden=false
        ActivateDelay=0
        bMoving=false
        bClampedMax=false
        bClampedMin=false
        OverrideDelta=0
    }
};

struct native SeqOpOutputInputLink
{
    var SequenceOp LinkedOp;
    var int InputLinkIdx;

    structdefaultproperties
    {
        LinkedOp=none
        InputLinkIdx=0
    }
};

struct native SeqOpOutputLink
{
    var array<SeqOpOutputInputLink> Links;
    var string LinkDesc;
    var bool bHasImpulse;
    var bool bDisabled;
    var bool bDisabledPIE;
    var SequenceOp LinkedOp;
    var float ActivateDelay;
    var int DrawY;
    var bool bHidden;
    var editoronly transient bool bMoving;
    var editoronly bool bClampedMax;
    var editoronly bool bClampedMin;
    var editoronly int OverrideDelta;
    var editoronly transient float PIEActivationTime;
    var noimport nontransactional editoronly transient bool bIsActivated;

    structdefaultproperties
    {
        Links=none
        LinkDesc=""
        bHasImpulse=false
        bDisabled=false
        bDisabledPIE=false
        LinkedOp=none
        ActivateDelay=0
        DrawY=0
        bHidden=false
        bMoving=false
        bClampedMax=false
        bClampedMin=false
        OverrideDelta=0
        PIEActivationTime=0
        bIsActivated=false
    }
};

struct native SeqVarLink
{
    var class<SequenceVariable> ExpectedType;
    var array<SequenceVariable> LinkedVariables;
    var string LinkDesc;
    var name LinkVar;
    var name PropertyName;
    var bool bWriteable;
    var bool bSequenceNeverReadsOnlyWritesToThisVar;
    var bool bModifiesLinkedObject;
    var bool bHidden;
    var int MinVars;
    var int MaxVars;
    var int DrawX;
    var const transient Property CachedProperty;
    var bool bAllowAnyType;
    var editoronly transient bool bMoving;
    var editoronly bool bClampedMax;
    var editoronly bool bClampedMin;
    var editoronly int OverrideDelta;

    structdefaultproperties
    {
        ExpectedType=Class'SequenceVariable'
        LinkedVariables=none
        LinkDesc=""
        LinkVar=None
        PropertyName=None
        bWriteable=false
        bSequenceNeverReadsOnlyWritesToThisVar=false
        bModifiesLinkedObject=false
        bHidden=false
        MinVars=1
        MaxVars=255
        DrawX=0
        CachedProperty=none
        bAllowAnyType=false
        bMoving=false
        bClampedMax=false
        bClampedMin=false
        OverrideDelta=0
    }
};

struct native SeqEventLink
{
    var class<SequenceEvent> ExpectedType;
    var array<SequenceEvent> LinkedEvents;
    var string LinkDesc;
    var int DrawX;
    var bool bHidden;
    var editoronly transient bool bMoving;
    var editoronly bool bClampedMax;
    var editoronly bool bClampedMin;
    var editoronly int OverrideDelta;

    structdefaultproperties
    {
        ExpectedType=Class'SequenceEvent'
        LinkedEvents=none
        LinkDesc=""
        DrawX=0
        bHidden=false
        bMoving=false
        bClampedMax=false
        bClampedMin=false
        OverrideDelta=0
    }
};

var noimport nontransactional duplicatetransient editoronly transient bool bIsActivated;
var noimport nontransactional duplicatetransient editoronly transient bool bIsCurrentDebuggerOp;
var bool bActive;
var const bool bLatentExecution;
var bool bAutoActivateOutputLinks;
var editoronly transient bool bHaveMovingVarConnector;
var editoronly transient bool bHaveMovingInputConnector;
var editoronly transient bool bHaveMovingOutputConnector;
var editoronly transient bool bPendingVarConnectorRecalc;
var editoronly transient bool bPendingInputConnectorRecalc;
var editoronly transient bool bPendingOutputConnectorRecalc;
var editoronly bool bIsBreakpointSet;
var noimport nontransactional duplicatetransient editoronly transient bool bIsHiddenBreakpointSet;
var editoronly transient float PIEActivationTime;
var editoronly transient SequenceOp ActivatorSeqOp;
var editoronly transient int LastActivatedInputLink;
var editoronly transient int LastActivatedOutputLink;
var array<SeqOpInputLink> InputLinks;
var array<SeqOpOutputLink> OutputLinks;
var array<SeqVarLink> VariableLinks;
var array<SeqEventLink> EventLinks;
var noimport transient int PlayerIndex;
var noimport transient byte GamepadID;
var transient int ActivateCount;
var protected duplicatetransient const transient int SearchTag;

// Export USequenceOp::execHasLinkedOps(FFrame&, void* const)
native final function bool HasLinkedOps(optional bool bConsiderInputLinks);

// Export USequenceOp::execGetLinkedObjects(FFrame&, void* const)
native final function GetLinkedObjects(out array<SequenceObject> out_Objects, optional class<SequenceObject> ObjectType, optional bool bRecurse);

// Export USequenceOp::execGetObjectVars(FFrame&, void* const)
native final function GetObjectVars(out array<Object> objVars, optional string inDesc);

// Export USequenceOp::execGetInterpDataVars(FFrame&, void* const)
native final function GetInterpDataVars(out array<InterpData> outIData, optional string inDesc);

// Export USequenceOp::execGetBoolVars(FFrame&, void* const)
native final function GetBoolVars(out array<byte> boolVars, optional string inDesc);

// Export USequenceOp::execLinkedVariables(FFrame&, void* const)
native final iterator function LinkedVariables(class<SequenceVariable> VarClass, out SequenceVariable OutVariable, optional string inDesc);

// Export USequenceOp::execActivateOutputLink(FFrame&, void* const)
native final function bool ActivateOutputLink(int OutputIdx);

// Export USequenceOp::execActivateNamedOutputLink(FFrame&, void* const)
native final function bool ActivateNamedOutputLink(string LinkDesc);

event Activated();

event Deactivated();

event VersionUpdated(int OldVersion, int NewVersion);

// Export USequenceOp::execPopulateLinkedVariableValues(FFrame&, void* const)
native final function PopulateLinkedVariableValues();

// Export USequenceOp::execPublishLinkedVariableValues(FFrame&, void* const)
native final function PublishLinkedVariableValues();

function Reset();

function Pawn GetPawn(Actor TheActor)
{
    local Pawn P;
    local Controller C;

    P = Pawn(TheActor);
    if(P != none)
    {
        return P;        
    }
    else
    {
        C = Controller(TheActor);
        return ((C != none) ? C.Pawn : none);
    }
}

function Controller GetController(Actor TheActor)
{
    local Pawn P;
    local Controller C;

    C = Controller(TheActor);
    if(C != none)
    {
        return C;        
    }
    else
    {
        P = Pawn(TheActor);
        return ((P != none) ? P.Controller : none);
    }
}

// Export USequenceOp::execForceActivateInput(FFrame&, void* const)
native final function ForceActivateInput(int InputIdx);

// Export USequenceOp::execForceActivateOutput(FFrame&, void* const)
native final function ForceActivateOutput(int OutputIdx);

defaultproperties
{
    bAutoActivateOutputLinks=true
    bPendingVarConnectorRecalc=true
    bPendingInputConnectorRecalc=true
    bPendingOutputConnectorRecalc=true
    LastActivatedInputLink=-1
    LastActivatedOutputLink=-1
    InputLinks(0)=(LinkDesc="In",bHasImpulse=false,QueuedActivations=0,bDisabled=false,bDisabledPIE=false,LinkedOp=none,DrawY=0,bHidden=false,ActivateDelay=0,bMoving=false,bClampedMax=false,bClampedMin=false,OverrideDelta=0)
    OutputLinks(0)=(Links=none,LinkDesc="Out",bHasImpulse=false,bDisabled=false,bDisabledPIE=false,LinkedOp=none,ActivateDelay=0,DrawY=0,bHidden=false,bMoving=false,bClampedMax=false,bClampedMin=false,OverrideDelta=0,PIEActivationTime=0,bIsActivated=false)
    PlayerIndex=-1
    GamepadID=255
}