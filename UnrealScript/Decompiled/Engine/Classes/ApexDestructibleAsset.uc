/*******************************************************************************
 * ApexDestructibleAsset generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ApexDestructibleAsset extends ApexAsset
    native(Mesh)
    hidecategories(Object,Object);

enum EImpactDamageOverride
{
    IDO_None,
    IDO_On,
    IDO_Off,
    IDO_MAX
};

struct native NxDestructibleDepthParameters
{
    var deprecated bool TAKE_IMPACT_DAMAGE;
    var deprecated bool IGNORE_POSE_UPDATES;
    var deprecated bool IGNORE_RAYCAST_CALLBACKS;
    var deprecated bool IGNORE_CONTACT_CALLBACKS;
    var deprecated bool USER_FLAG;
    var deprecated bool USER_FLAG_1;
    var deprecated bool USER_FLAG_2;
    var deprecated bool USER_FLAG_3;
    /**  
     *Chunks up to the depth DefaultImpactDamageDepth will take impact damage,
     *               unless one of the override options (see EImpactDamageOverride) is chosen.
     */
    var() ApexDestructibleAsset.EImpactDamageOverride ImpactDamageOverride;

    structdefaultproperties
    {
        ImpactDamageOverride=EImpactDamageOverride.IDO_None
    }
};

struct native NxDestructibleParametersFlag
{
    /**  
     *If set, chunks will "remember" damage applied to them, so that many applications of a damage amount
     *               below damageThreshold will eventually fracture the chunk.  If not set, a single application of
     *               damage must exceed damageThreshold in order to fracture the chunk.
     */
    var() bool ACCUMULATE_DAMAGE;
    /**  
     *If set, then chunks which are tagged as "support" chunks (via NxDestructibleChunkDesc::isSupportChunk)
     *               will have environmental support in static destructibles.
     *
     *               Note: if both ASSET_DEFINED_SUPPORT and WORLD_SUPPORT are set, then chunks must be tagged as
     *               "support" chunks AND overlap the NxScene's static geometry in order to be environmentally supported.
     */
    var() bool ASSET_DEFINED_SUPPORT;
    /**  
     *If set, then chunks which overlap the NxScene's static geometry will have environmental support in
     *               static destructibles.
     *
     *               Note: if both ASSET_DEFINED_SUPPORT and WORLD_SUPPORT are set, then chunks must be tagged as
     *               "support" chunks AND overlap the NxScene's static geometry in order to be environmentally supported.
     */
    var() bool WORLD_SUPPORT;
    /**  
     *Whether or not chunks at or deeper than the "debris" depth (see NxDestructibleParameters::debrisDepth)
     *               will time out.  The lifetime is a value between NxDestructibleParameters::debrisLifetimeMin and
     *               NxDestructibleParameters::debrisLifetimeMax, based upon the destructible module's LOD setting.
     */
    var() bool DEBRIS_TIMEOUT;
    /**  
     *Whether or not chunks at or deeper than the "debris" depth (see NxDestructibleParameters::debrisDepth)
     *               will be removed if they separate too far from their origins.  The maxSeparation is a value between
     *               NxDestructibleParameters::debrisMaxSeparationMin and NxDestructibleParameters::debrisMaxSeparationMax,
     *               based upon the destructible module's LOD setting.
     */
    var() bool DEBRIS_MAX_SEPARATION;
    /**  
     *If set, the smallest chunks may be further broken down, either by fluid crumbles (if a crumble particle
     *               system is specified in the NxDestructibleActorDesc), or by simply removing the chunk if no crumble
     *               particle system is specified.  Note: the "smallest chunks" are normally defined to be the deepest level
     *               of the fracture hierarchy.  However, they may be taken from higher levels of the hierarchy if
     *               NxModuleDestructible::setMaxChunkDepthOffset is called with a non-zero value.
     */
    var() bool CRUMBLE_SMALLEST_CHUNKS;
    /**  
     *If set, the NxDestructibleActor::rayCast function will search within the nearest visible chunk hit
     *               for collisions with child chunks.  This is used to get a better raycast position and normal, in
     *               case the parent collision volume does not tightly fit the graphics mesh.  The returned chunk index
     *               will always be that of the visible parent that is intersected, however.
     */
    var() bool ACCURATE_RAYCASTS;
    /**  
     *If set, the ValidBounds field of NxDestructibleParameters will be used.  These bounds are translated
     *               (but not scaled or rotated) to the origin of the destructible actor.  If a chunk or chunk island moves
     *               outside of those bounds, it is destroyed.
     */
    var() bool USE_VALID_BOUNDS;
    /**  
     *If initially static, the destructible will become part of an extended support structure if it is
     *               in contact with another static destructible that also has this flag set.
     */
    var() bool FORM_EXTENDED_STRUCTURES;

    structdefaultproperties
    {
        ACCUMULATE_DAMAGE=false
        ASSET_DEFINED_SUPPORT=false
        WORLD_SUPPORT=false
        DEBRIS_TIMEOUT=false
        DEBRIS_MAX_SEPARATION=false
        CRUMBLE_SMALLEST_CHUNKS=false
        ACCURATE_RAYCASTS=false
        USE_VALID_BOUNDS=false
        FORM_EXTENDED_STRUCTURES=false
    }
};

struct native NxDestructibleDamageParameters
{
    /**  
     *The damage amount which will cause a chunk to fracture (break free) from the destructible.
     *               This is obtained from the damage value passed into the NxDestructibleActor::applyDamage,
     *               or NxDestructibleActor::applyRadiusDamage, or via impact (see 'forceToDamage', below).
     */
    var() float DamageThreshold;
    /**  
     *Controls the distance into the destructible to propagate damage.  The damage applied to the chunk
     *               is multiplied by DamageSpread, to get the propagation distance.  All chunks within the radius
     *               will have damage applied to them.  The damage applied to each chunk varies with distance to the damage
     *               application position.  Full damage is taken at zero distance, and zero damage at the damage radius.
     */
    var() float DamageSpread;
    /**  
     *If a chunk is at a depth which has NX_DESTRUCTIBLE_TAKE_IMPACT_DAMAGE set (see DepthParameters),
     *               then when a chunk has a collision in the NxScene, it will take damage equal to ImpactDamage mulitplied by
     *               the impact force.
     *               The default value is zero, which effectively disables impact damage.
     */
    var() float ImpactDamage;
    /**  
     *When a chunk takes impact damage due to physical contact (see DepthParameters), this parameter
     *               is the maximum impulse the contact can generate.  Weak materials such as glass may have this set to a low value, so that
     *               heavier objects will pass through them during fracture.
     *               N.B.: Setting this parameter to 0 disables the impulse cap; that is, zero is interpreted as infinite.
     *               Default value = 0.0f.
     */
    var() float ImpactResistance;
    /**  
     *By default, impact damage will only be taken to this depth.  For a particular depth, this
     *               default may be overridden in the DepthParameters.  If negative, impact damage
     *               is disabled.
     */
    var() int DefaultImpactDamageDepth;

    structdefaultproperties
    {
        DamageThreshold=0
        DamageSpread=0
        ImpactDamage=0
        ImpactResistance=0
        DefaultImpactDamageDepth=-1
    }
};

struct native NxDestructibleDebrisParameters
{
    /**  
     *"Debris chunks" (see debrisDepth, above) will be destroyed after a time (in seconds)
     *               separated from non-debris chunks.  The actual lifetime is interpolated between these
     *               two values, based upon the module's LOD setting.  To disable lifetime, clear the
     *               NX_DESTRUCTIBLE_DEBRIS_TIMEOUT flag in the flags field.
     *               If debrisLifetimeMax < debrisLifetimeMin, the mean of the two is used for both.
     *               Default debrisLifetimeMin = 1.0, debrisLifetimeMax = 10.0f.
     */
    var() float DebrisLifetimeMin;
    /**  
     *"Debris chunks" (see debrisDepth, above) will be destroyed after a time (in seconds)
     *               separated from non-debris chunks.  The actual lifetime is interpolated between these
     *               two values, based upon the module's LOD setting.  To disable lifetime, clear the
     *               NX_DESTRUCTIBLE_DEBRIS_TIMEOUT flag in the flags field.
     *               If debrisLifetimeMax < debrisLifetimeMin, the mean of the two is used for both.
     *               Default debrisLifetimeMin = 1.0, debrisLifetimeMax = 10.0f.
     */
    var() float DebrisLifetimeMax;
    /**  
     *"Debris chunks" (see debrisDepth, above) will be destroyed if they are separated from
     *               their origin by a distance greater than maxSeparation.  The actual maxSeparation is
     *               interpolated between these two values, based upon the module's LOD setting.  To disable
     *               maxSeparation, clear the NX_DESTRUCTIBLE_DEBRIS_MAX_SEPARATION flag in the flags field.
     *               If debrisMaxSeparationMax < debrisMaxSeparationMin, the mean of the two is used for both.
     *               Default debrisMaxSeparationMin = 1.0, debrisMaxSeparationMax = 10.0f.
     */
    var() float DebrisMaxSeparationMin;
    /**  
     *"Debris chunks" (see debrisDepth, above) will be destroyed if they are separated from
     *               their origin by a distance greater than maxSeparation.  The actual maxSeparation is
     *               interpolated between these two values, based upon the module's LOD setting.  To disable
     *               maxSeparation, clear the NX_DESTRUCTIBLE_DEBRIS_MAX_SEPARATION flag in the flags field.
     *               If debrisMaxSeparationMax < debrisMaxSeparationMin, the mean of the two is used for both.
     *               Default debrisMaxSeparationMin = 1.0, debrisMaxSeparationMax = 10.0f.
     */
    var() float DebrisMaxSeparationMax;
    /**  
     *"Debris chunks" (see debrisDepth, above) will be destroyed if they are separated from
     *               their origin by a distance greater than maxSeparation multiplied by the original
     *               destructible asset size.  The actual maxSeparation is interpolated between these
     *               two values, based upon the module's LOD setting.  To disable maxSeparation, clear the
     *               NX_DESTRUCTIBLE_DEBRIS_MAX_SEPARATION flag in the flags field.
     *               If debrisMaxSeparationMax < debrisMaxSeparationMin, the mean of the two is used for both.
     *               Default debrisMaxSeparationMin = 1.0, debrisMaxSeparationMax = 10.0f.
     */
    var() Box ValidBounds;

    structdefaultproperties
    {
        DebrisLifetimeMin=0
        DebrisLifetimeMax=0
        DebrisMaxSeparationMin=0
        DebrisMaxSeparationMax=0
        ValidBounds=(Min=(X=-500000,Y=-500000,Z=-500000),Max=(X=500000,Y=500000,Z=500000),IsValid=0)
    }
};

struct native NxDestructibleAdvancedParameters
{
    /**  
     *Limits the amount of damage applied to a chunk.  This is useful for preventing the entire destructible
     *               from getting pulverized by a very large application of damage.  This can easily happen when impact damage is
     *               used, and the damage amount is proportional to the impact force (see forceToDamage).
     */
    var() float DamageCap;
    /**  
     *Large impact force may be reported if rigid bodies are spawned inside one another.  In this case the realative velocity of the two
     *               objects will be low.  This variable allows the user to set a minimum velocity threshold for impacts to ensure that the objects are 
     *               moving at a min velocity in order for the impact force to be considered.
     */
    var() float ImpactVelocityThreshold;
    /**  
     *If greater than 0, the chunks' speeds will not be allowed to exceed this value.  Use 0
     *               to disable this feature (this is the default).
     */
    var() float MaxChunkSpeed;
    /**  
     *See MassScale.  Values less than 1 have the
     *               effect of reducing the ratio of different masses.  The closer MassScaleExponent is to zero, the
     *               more the ratio will be "flattened."  This helps PhysX converge when there is a very large number
     *               of interacting rigid bodies (such as a pile of destructible chunks).
     *               Valid range: [0,1].  Default = 0.5.
     */
    var() float MassScaleExponent;
    /**  
     *Dynamic chunk islands will have their masses divided by MassScale, raised to the power MassScaleExponent,
     *               then multiplied by MassScale.  See MassScaleExponent.
     *               Valid range: (0,infinity).  Default = 1.0.
     */
    var() float MassScale;
    /**  
     *Scale factor used to apply an impulse force along the normal of chunk when fractured.  This is used
     *               in order to "push" the pieces out as they fracture.
     */
    var() float FractureImpulseScale;

    structdefaultproperties
    {
        DamageCap=0
        ImpactVelocityThreshold=0
        MaxChunkSpeed=0
        MassScaleExponent=0
        MassScale=0
        FractureImpulseScale=0
    }
};

struct native NxDestructibleParameters
{
    /** Parameters that pertain to chunk damage.  See NxDestructibleDamageParameters. */
    var(Damage) NxDestructibleDamageParameters DamageParameters;
    /** Parameters that pertain to chunk debris-level settings.  See NxDestructibleDebrisParameters. */
    var(Debris) NxDestructibleDebrisParameters DebrisParameters;
    /** Parameters that are less-often used.  See NxDestructibleAdvancedParameters. */
    var(Advanced) NxDestructibleAdvancedParameters AdvancedParameters;
    var deprecated float DamageThreshold;
    var deprecated float DamageToRadius<DisplayName=Damage Spread>;
    var deprecated float DamageCap;
    var deprecated float ForceToDamage<DisplayName=Impact Damage>;
    var deprecated float ImpactVelocityThreshold;
    var deprecated float MaterialStrength<DisplayName=Impact Resistance>;
    var deprecated float DamageToPercentDeformation;
    var deprecated float DeformationPercentLimit;
    var deprecated bool bFormExtendedStructures;
    /**  
     *The chunk hierarchy depth at which to create a support graph.  Higher depth levels give more detailed support,
     *               but will give a higher computational load.  Chunks below the support depth will never be supported.
     */
    var() int SupportDepth;
    /** The chunks will not be broken free below this depth. */
    var() int MinimumFractureDepth;
    /**  
     *The chunk hierarchy depth at which chunks are considered to be "debris."  Chunks at this depth or
     *               below will be considered for various debris settings, such as debrisLifetime.
     *               Negative values indicate that no chunk depth is considered debris.
     *               Default value is -1.
     */
    var() int DebrisDepth;
    /**  
     *The chunk hierarchy depth up to which chunks will always be processed.  These chunks are considered
     *               to be essential either for gameplay or visually.
     *               The minimum value is 0, meaning the level 0 chunk is always considered essential.
     *               Default value is 0.
     */
    var() int EssentialDepth<DisplayName=Essential LOD Depth>;
    var deprecated float DebrisLifetimeMin;
    var deprecated float DebrisLifetimeMax;
    var deprecated float DebrisMaxSeparationMin;
    var deprecated float DebrisMaxSeparationMax;
    var deprecated Box ValidBounds;
    var deprecated float MaxChunkSpeed;
    var deprecated float MassScaleExponent;
    /** A collection of flags defined in NxDestructibleParametersFlag. */
    var() NxDestructibleParametersFlag Flags;
    var deprecated float GrbVolumeLimit;
    var deprecated float GrbParticleSpacing;
    var deprecated float FractureImpulseScale;
    /**  
     *Parameters that apply to every chunk at a given level.
     *               the element [0] of the array applies to the level 0 (unfractured) chunk, element [1] applies
     *               to the level 1 chunks, etc.
     */
    var() editfixedsize array<NxDestructibleDepthParameters> DepthParameters;
    /** Optional dominance group for dynamic chunks created when fractured. (ignored if > 31) */
    var() int DynamicChunksDominanceGroup;
    /**  
     *Whether or not to usedynamicChunksGroupsMask.  If false, NULL will be passed into the DestructibleActor upon
     *               instantiation, through the NxDestructibleActorDesc.
     */
    var() bool UseDynamicChunksGroupsMask;
    /** Enum indicating what type of object this should be considered for rigid body collision. */
    var() const PrimitiveComponent.ERBCollisionChannel DynamicChunksChannel;
    /** Types of objects that this physics objects will collide with. */
    var() const RBCollisionChannelContainer DynamicChunksCollideWithChannels;

    structdefaultproperties
    {
        DamageParameters=(DamageThreshold=0,DamageSpread=0,ImpactDamage=0,ImpactResistance=0,DefaultImpactDamageDepth=-1)
        DebrisParameters=(DebrisLifetimeMin=0,DebrisLifetimeMax=0,DebrisMaxSeparationMin=0,DebrisMaxSeparationMax=0,ValidBounds=(Min=(X=-500000,Y=-500000,Z=-500000),Max=(X=500000,Y=500000,Z=500000),IsValid=0))
        AdvancedParameters=(DamageCap=0,ImpactVelocityThreshold=0,MaxChunkSpeed=0,MassScaleExponent=0,MassScale=0,FractureImpulseScale=0)
        SupportDepth=0
        MinimumFractureDepth=0
        DebrisDepth=0
        EssentialDepth=0
        Flags=(ACCUMULATE_DAMAGE=false,ASSET_DEFINED_SUPPORT=false,WORLD_SUPPORT=false,DEBRIS_TIMEOUT=false,DEBRIS_MAX_SEPARATION=false,CRUMBLE_SMALLEST_CHUNKS=false,ACCURATE_RAYCASTS=false,USE_VALID_BOUNDS=false,FORM_EXTENDED_STRUCTURES=false)
        DepthParameters=none
        DynamicChunksDominanceGroup=-1
        UseDynamicChunksGroupsMask=false
        DynamicChunksChannel=ERBCollisionChannel.RBCC_Default
        DynamicChunksCollideWithChannels=(Default=false,Nothing=false,Pawn=false,Vehicle=false,Water=false,GameplayPhysics=false,EffectPhysics=false,Untitled1=false,Untitled2=false,Untitled3=false,Untitled4=false,Cloth=false,FluidDrain=false,SoftBody=false,FracturedMeshPart=false,BlockingVolume=false,DeadPawn=false,Clothing=false,ClothingCollision=false,Pickup=false,FlexAsset=false,CanBecomeDynamic=false,KnockedDownPawn=false,Visibility=false)
    }
};

var native Pointer MApexAsset;
/** Materials contains an array of Materials which can be remapped relative to this asset */
var() const editfixedsize array<MaterialInterface> Materials;
/** Fracture effects for each fracture level */
var() const editfixedsize array<FractureMaterial> FractureMaterials;
/** If checked, only a single effect from FractureMaterials is played within the bounding box of all fractured chunks.  The effect chosen will be the one corresponding to the destructible's SupportDepth. */
var() const bool bPlaySingleFractureMaterialEffect;
var bool bHasUniqueAssetMaterialNames;
var deprecated bool bDynamic;
/** Default physical material to use for this asset. If the actor has a physical material defined in its mesh component, that will be used instead. */
var() PhysicalMaterial DefaultPhysMaterial;
var native Pointer MDestructibleThumbnailComponent;
/**  
 *The name of the NxMeshParticleSystem to use for crumbling.  This overrides the crumble system defined
 *       in the NxDestructibleAsset if specified.
 */
var() string CrumbleEmitterName;
/**  
 *The name of the NxMeshParticleSystem to use for fracture-line dust.  This overrides the dust system defined
 *       in the NxDestructibleAsset if specified.
 */
var() string DustEmitterName;
/** Parameters controlling the destruction properties. */
var() NxDestructibleParameters DestructibleParameters;

defaultproperties
{
    DestructibleParameters=(DamageParameters=(DamageThreshold=0,DamageSpread=0,ImpactDamage=0,ImpactResistance=0,DefaultImpactDamageDepth=-1),DebrisParameters=(DebrisLifetimeMin=0,DebrisLifetimeMax=0,DebrisMaxSeparationMin=0,DebrisMaxSeparationMax=0,ValidBounds=(Min=(X=-500000,Y=-500000,Z=-500000),Max=(X=500000,Y=500000,Z=500000),IsValid=0)),AdvancedParameters=(DamageCap=0,ImpactVelocityThreshold=0,MaxChunkSpeed=0,MassScaleExponent=0,MassScale=0,FractureImpulseScale=0),SupportDepth=0,MinimumFractureDepth=0,DebrisDepth=0,EssentialDepth=0,Flags=(ACCUMULATE_DAMAGE=false,ASSET_DEFINED_SUPPORT=false,WORLD_SUPPORT=false,DEBRIS_TIMEOUT=false,DEBRIS_MAX_SEPARATION=false,CRUMBLE_SMALLEST_CHUNKS=false,ACCURATE_RAYCASTS=false,USE_VALID_BOUNDS=false,FORM_EXTENDED_STRUCTURES=false),DepthParameters=none,DynamicChunksDominanceGroup=-1,UseDynamicChunksGroupsMask=false,DynamicChunksChannel=ERBCollisionChannel.RBCC_Default,DynamicChunksCollideWithChannels=(Default=false,Nothing=false,Pawn=false,Vehicle=false,Water=false,GameplayPhysics=false,EffectPhysics=false,Untitled1=false,Untitled2=false,Untitled3=false,Untitled4=false,Cloth=false,FluidDrain=false,SoftBody=false,FracturedMeshPart=false,BlockingVolume=false,DeadPawn=false,Clothing=false,ClothingCollision=false,Pickup=false,FlexAsset=false,CanBecomeDynamic=false,KnockedDownPawn=false,Visibility=false))
}