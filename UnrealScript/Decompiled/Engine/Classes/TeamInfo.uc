/*******************************************************************************
 * TeamInfo generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class TeamInfo extends ReplicationInfo
    native(ReplicationInfo)
    nativereplication
    notplaceable
    hidecategories(Navigation,Movement,Collision);

var const localized string TeamName;
var int Size;
var float Score;
var repnotify int TeamIndex;
var Color TeamColor;

replication
{
     if(bNetDirty && Role == ROLE_Authority)
        Score;

     if(bNetInitial && Role == ROLE_Authority)
        TeamIndex, TeamName;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'TeamIndex')
    {
        if(WorldInfo.GRI != none)
        {
            WorldInfo.GRI.SetTeam(TeamIndex, self);
        }        
    }
    else
    {
        super(Actor).ReplicatedEvent(VarName);
    }
}

simulated event Destroyed()
{
    local TeamInfo OtherTeam;

    super(Actor).Destroyed();
    if(WorldInfo.GRI != none)
    {
        foreach DynamicActors(Class'TeamInfo', OtherTeam)
        {
            if((OtherTeam != self) && OtherTeam.TeamIndex == TeamIndex)
            {
                WorldInfo.GRI.SetTeam(TeamIndex, OtherTeam);
                break;
            }            
        }        
    }
}

function bool AddToTeam(Controller Other)
{
    if(Other == none)
    {
        LogInternal("Added none to team!!!");
        return false;
    }
    if(Other.PlayerReplicationInfo == none)
    {
        WarnInternal(string(Other) @ "is missing PlayerReplicationInfo");
        ScriptTrace();
        return false;
    }
    ++ Size;
    Other.PlayerReplicationInfo.SetPlayerTeam(self);
    return true;
}

function RemoveFromTeam(Controller Other)
{
    -- Size;
    if((Other != none) && Other.PlayerReplicationInfo != none)
    {
        Other.PlayerReplicationInfo.SetPlayerTeam(none);
    }
}

simulated function string GetHumanReadableName()
{
    return TeamName;
}

// Export UTeamInfo::execGetTeamNum(FFrame&, void* const)
native simulated function byte GetTeamNum();

defaultproperties
{
    TeamName="Team"
    TeamIndex=-1
    TeamColor=(B=64,G=64,R=255,A=255)
    TickGroup=ETickingGroup.TG_DuringAsyncWork
    NetUpdateFrequency=2
}