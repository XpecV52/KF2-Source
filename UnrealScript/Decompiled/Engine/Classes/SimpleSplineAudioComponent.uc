/*******************************************************************************
 * SimpleSplineAudioComponent generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SimpleSplineAudioComponent extends SplineAudioComponent
    native
    editinlinenew
    collapsecategories
    hidecategories(Object,ActorComponent,Object,ActorComponent,Object,ActorComponent);

struct native SplineSoundSlot
{
    var() SoundNodeWave Wave;
    var() float PitchScale;
    var() float VolumeScale;
    /** Indexes define range of sound sorce along spline. */
    var() int StartPoint;
    /** Indexes define range of sound sorce along spline. */
    var() int EndPoint;
    /** Indexes define range of sound sorce along spline. */
    var() float Weight;
    var native const Double LastUpdateTime;
    var native const float SourceInteriorVolume;
    var native const float SourceInteriorLPF;
    var native const float CurrentInteriorVolume;
    var native const float CurrentInteriorLPF;

    structdefaultproperties
    {
        Wave=none
        PitchScale=1
        VolumeScale=1
        StartPoint=-1
        EndPoint=-1
        Weight=1
    }
};

/** Enable attenuation via low pass filter */
var(LowPassFilter) bool bAttenuateWithLPF;
/** The range at which to start applying a low passfilter */
var(LowPassFilter) float LPFRadiusMin;
/** The range at which to apply the maximum amount of low pass filter */
var(LowPassFilter) float LPFRadiusMax;
/** The volume at maximum distance in deciBels */
var(Attenuation) float dBAttenuationAtMax;
/** At what distance to start blending the sound from as omnidirectional */
var(Attenuation) float FlattenAttenuationRadius;
/** The type of volume versus distance algorithm to use */
var(Attenuation) SoundNodeAttenuation.SoundDistanceModel DistanceAlgorithm;
/** The range at which the sound starts attenuating */
var(Attenuation) float RadiusMin;
/** The range at which the sound has attenuated completely */
var(Attenuation) float RadiusMax;
/** Sounds to play */
var(Sounds) init array<init SplineSoundSlot> SoundSlots;
var SoundNode NotifyBufferFinishedHook;

defaultproperties
{
    LPFRadiusMin=3000
    LPFRadiusMax=6000
    dBAttenuationAtMax=-60
    FlattenAttenuationRadius=800
    RadiusMin=200
    RadiusMax=1200
    NotifyBufferFinishedHook=ForcedLoopSoundNode'Default__SimpleSplineAudioComponent.ForcedLoopSoundNode0'
    begin object name=SoundCue0 class=SoundCue
        SoundClass=Ambient
        FirstNode=ForcedLoopSoundNode'Default__SimpleSplineAudioComponent.ForcedLoopSoundNode0'
        Duration=10000
    object end
    // Reference: SoundCue'Default__SimpleSplineAudioComponent.SoundCue0'
    SoundCue=SoundCue0
}