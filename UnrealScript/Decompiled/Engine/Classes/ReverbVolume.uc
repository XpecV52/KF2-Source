/*******************************************************************************
 * ReverbVolume generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ReverbVolume extends Volume
    native
    placeable
    dontsortcategories(ReverbVolume)
    hidecategories(Navigation,Object,Movement,Display,Advanced,Attachment,Collision,Volume,Toggle);

enum ReverbPreset
{
    REVERB_Default,
    REVERB_Bathroom,
    REVERB_StoneRoom,
    REVERB_Auditorium,
    REVERB_ConcertHall,
    REVERB_Cave,
    REVERB_Hallway,
    REVERB_StoneCorridor,
    REVERB_Alley,
    REVERB_Forest,
    REVERB_City,
    REVERB_Mountains,
    REVERB_Quarry,
    REVERB_Plain,
    REVERB_ParkingLot,
    REVERB_SewerPipe,
    REVERB_Underwater,
    REVERB_SmallRoom,
    REVERB_MediumRoom,
    REVERB_LargeRoom,
    REVERB_MediumHall,
    REVERB_LargeHall,
    REVERB_Plate,
    REVERB_MAX
};

struct native ReverbSettings
{
    /** Whether to apply the reverb settings below */
    var() bool bApplyReverb;
    /** The reverb preset to employ. */
    var() ReverbVolume.ReverbPreset ReverbType;
    /** Volume level of the reverb affect. */
    var() float Volume;
    /** Time to fade from the current reverb settings into this setting, in seconds. */
    var() float FadeTime;

    structdefaultproperties
    {
        bApplyReverb=true
        ReverbType=ReverbPreset.REVERB_Default
        Volume=0.5
        FadeTime=2
    }
};

struct InteriorSettings
{
    var bool bIsWorldInfo;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float ExteriorVolume;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float ExteriorTime;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float ExteriorLPF;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float ExteriorLPFTime;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float InteriorVolume;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float InteriorTime;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float InteriorLPF;
    /** Struct encapsulating settings for interior areas. //@warning: manually mirrored in UnActorComponent.h */
    var() float InteriorLPFTime;

    structdefaultproperties
    {
        bIsWorldInfo=false
        ExteriorVolume=1
        ExteriorTime=0.5
        ExteriorLPF=1
        ExteriorLPFTime=0.5
        InteriorVolume=1
        InteriorTime=0.5
        InteriorLPF=1
        InteriorLPFTime=0.5
    }
};

/**  
 *Priority of this volume. In the case of overlapping volumes the one with the highest priority
 * is chosen. The order is undefined if two or more overlapping volumes have the same priority.
 */
var() float Priority;
/** whether this volume is currently enabled and able to affect sounds */
var(Toggle) bool bEnabled;
/** Reverb settings to use for this volume. */
var(UAudio) ReverbSettings Settings;
/** Interior settings used for this volume */
var(UAudio) InteriorSettings AmbientZoneSettings;
var noimport const transient ReverbVolume NextLowerPriorityVolume;

replication
{
     if(bNetDirty)
        bEnabled;
}

simulated function float GetEnvironmentEchoDistance()
{
    return 2500;
}

defaultproperties
{
    bEnabled=true
    Settings=(bApplyReverb=true,ReverbType=ReverbPreset.REVERB_Default,Volume=0.5,FadeTime=2)
    AmbientZoneSettings=(bIsWorldInfo=false,ExteriorVolume=1,ExteriorTime=0.5,ExteriorLPF=1,ExteriorLPFTime=0.5,InteriorVolume=1,InteriorTime=0.5,InteriorLPF=1,InteriorLPFTime=0.5)
    BrushColor=(B=0,G=255,R=255,A=255)
    bColored=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        CollideActors=false
        BlockNonZeroExtent=false
    object end
    // Reference: BrushComponent'Default__ReverbVolume.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        CollideActors=false
        BlockNonZeroExtent=false
    object end
    // Reference: BrushComponent'Default__ReverbVolume.BrushComponent0'
    Components(0)=BrushComponent0
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bCollideActors=false
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        CollideActors=false
        BlockNonZeroExtent=false
    object end
    // Reference: BrushComponent'Default__ReverbVolume.BrushComponent0'
    CollisionComponent=BrushComponent0
    SupportedEvents(0)=class'SeqEvent_Touch'
}