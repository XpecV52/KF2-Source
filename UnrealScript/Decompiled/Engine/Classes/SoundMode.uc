/*******************************************************************************
 * SoundMode generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SoundMode extends Object
    native(AudioDevice)
    dontsortcategories(SoundMode)
    hidecategories(Object);

struct native AudioEQEffect
{
    var native transient Double RootTime;
    /** High pass cutoff frequency. */
    var(HighPass) float HFFrequency;
    /** 0.0 is silent, 1.0 is full volume. */
    var(HighPass) float HFGain;
    /** Band pass cutoff frequency. */
    var(BandPass) float MFCutoffFrequency;
    /** Band pass bandwidth (0.1 to 2.0). */
    var(BandPass) float MFBandwidth;
    /** 0.0 is silent, 1.0 is full volume. */
    var(BandPass) float MFGain;
    /** Low pass cutoff frequency. */
    var(LowPass) float LFFrequency;
    /** 0.0 is silent, 1.0 is full volume. */
    var(LowPass) float LFGain;

    structdefaultproperties
    {
        HFFrequency=0
        HFGain=0
        MFCutoffFrequency=0
        MFBandwidth=0
        MFGain=0
        LFFrequency=0
        LFGain=0
    }
};

struct native SoundClassAdjuster
{
    /** The sound class this adjuster affects. */
    var() transient AudioDevice.ESoundClassName SoundClassName;
    /** (Debug: Should be the same as SoundClassName). */
    var() editconst name SoundClass;
    /** A multiplier applied to the volume. */
    var() float VolumeAdjuster;
    /** A multiplier applied to the pitch. */
    var() float PitchAdjuster;
    /** Check to apply this adjuster to all children of the sound class. */
    var() bool bApplyToChildren;
    /** A multiplier applied to VoiceCenterChannelVolume. */
    var() float VoiceCenterChannelVolumeAdjuster;

    structdefaultproperties
    {
        SoundClassName=ESoundClassName.Master
        SoundClass=Master
        VolumeAdjuster=1
        PitchAdjuster=1
        bApplyToChildren=false
        VoiceCenterChannelVolumeAdjuster=1
    }
};

/** Whether to apply an EQ effect. */
var(EQ) bool bApplyEQ;
var(EQ) AudioEQEffect EQSettings;
/** Array of changes to be applied to groups */
var(SoundClasses) array<SoundClassAdjuster> SoundClassEffects;
/** Initial delay in seconds before the the mode is applied. */
var() float InitialDelay;
/** Time taken in seconds for the mode to fade in. */
var() float FadeInTime;
/** Duration of mode, negative means it will be applied until another mode is set. */
var() float Duration;
/** Time taken in seconds for the mode to fade out. */
var() float FadeOutTime;

defaultproperties
{
    EQSettings=(HFFrequency=2000,HFGain=1,MFCutoffFrequency=1000,MFBandwidth=1,MFGain=1,LFFrequency=600,LFGain=1)
    FadeInTime=0.2
    Duration=-1
    FadeOutTime=0.2
}