/*******************************************************************************
 * DecalComponent generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DecalComponent extends PrimitiveComponent
    native(Decal)
    editinlinenew
    hidecategories(Collision,Object,Physics,PrimitiveComponent);

enum EDecalTransform
{
    DecalTransform_OwnerAbsolute,
    DecalTransform_OwnerRelative,
    DecalTransform_SpawnRelative,
    DecalTransform_MAX
};

enum EFilterMode
{
    FM_None,
    FM_Ignore,
    FM_Affect,
    FM_MAX
};

struct native DecalReceiver
{
    var const export editinline PrimitiveComponent Component;
    var native const Pointer RenderData;

    structdefaultproperties
    {
        Component=none
    }
};

/** Decal material. */
var(Decal) private const MaterialInterface DecalMaterial;
/** Decal world space width. */
var(Decal) float Width;
/** Decal world space height. */
var(Decal) float Height;
/** Decal tiling along the tangent. */
var(Decal) float TileX;
/** Decal tiling along the binormal. */
var(Decal) float TileY;
/** Decal offset along the tangent. */
var(Decal) float OffsetX;
/** Decal offset along the binormal. */
var(Decal) float OffsetY;
/** Decal in-plane rotation, in degrees. */
var(Decal) float DecalRotation;
var float FieldOfView;
/** Near plane clip distance. */
var(Decal) float NearPlane;
/** Far plane clip distance. */
var(Decal) float FarPlane;
var transient Vector Location;
var transient Rotator Orientation;
var Vector HitLocation;
var Vector HitNormal;
var Vector HitTangent;
var Vector HitBinormal;
/**  
 *If FALSE (the default), use precise clipping to compute the decal geometry.
 * If TRUE, decal geometry generation is faster, but the decal material will have
 * to use clamped texture coordinates.
 */
var(Decal) bool bNoClip;
var const bool bStaticDecal;
/** If FALSE (the default), don't project decal onto back-facing polygons. */
var(DecalFilter) bool bProjectOnBackfaces;
/** If FALSE (the default), don't project decal onto hidden receivers. */
var(DecalFilter) bool bProjectOnHidden;
/** If FALSE, don't project decal onto BSP. */
var(DecalFilter) bool bProjectOnBSP;
/** If FALSE, don't project decal onto static meshes. */
var(DecalFilter) bool bProjectOnStaticMeshes;
/** If FALSE, don't project decal onto skeletal meshes. */
var(DecalFilter) bool bProjectOnSkeletalMeshes;
/** If FALSE, don't project decal onto terrain. */
var(DecalFilter) bool bProjectOnTerrain;
var bool bFlipBackfaceDirection;
var bool bMovableDecal;
var bool bTickParentRelativeTransform;
var private transient bool bHasBeenAttached;
/**  
 *So for some DecalComponents (usually residing in GamePlay objects) we set the DecalMaterial from an Archetype or some other default property.
 * For those decals we do not want to MapCheckForErrors on them.
 */
var() bool bDecalMaterialSetAtRunTime;
var export editinline transient PrimitiveComponent HitComponent;
var transient name HitBone;
var transient int HitNodeIndex;
var transient int HitLevelIndex;
var transient int FracturedStaticMeshComponentIndex;
var private const transient array<int> HitNodeIndices;
var private noimport duplicatetransient const array<DecalReceiver> DecalReceivers;
var private noimport duplicatetransient native const transient array<Pointer> StaticReceivers;
var duplicatetransient native const transient Pointer ReleaseResourcesFence;
var private transient array<Plane> Planes;
var(DecalRender) float DepthBias;
var(DecalRender) float SlopeScaleDepthBias;
/** @zombie_ps4_begin - TODO - Orbis has a different depth bias. We need a cleaner solution for this. */
var(DecalRender) float OrbisDepthBias;
var(DecalRender) float OrbisSlopeScaleDepthBias;
/** Controls the order in which decal elements are rendered.  Higher values draw later (on top). */
var(DecalRender) int SortOrder;
/** Dot product of the minimum angle that surfaces can make with the decal normal to be considered backfacing. */
var(DecalRender) float BackfaceAngle;
/** Start/End blend range specified as an angle in degrees. Controls where to start blending out the decal on a surface */
var(DecalRender) Vector2D BlendRange;
/**  
 *Allows artists to adjust the distance where textures using UV 0 are streamed in/out.
 * 1.0 is the default, whereas a higher value increases the streamed-in resolution.
 */
var(DecalRender) const float StreamingDistanceMultiplier;
var const DecalComponent.EDecalTransform DecalTransform;
/** Current filter application mode. */
var(DecalFilter) DecalComponent.EFilterMode FilterMode;
/** Component filter. */
var(DecalFilter) array<Actor> Filter;
/** @hack: Gears hack to avoid an octree look-up for level-placed decals. To be replaced with receiver serialization after ship. */
var(DecalFilter) export editinline array<export editinline PrimitiveComponent> ReceiverImages;
/** Decal location relative to parent transform used with DecalTransform_OwnerRelative mode */
var(DecalRender) Vector ParentRelativeLocation;
/** Decal orientation vector relative to parent transform used with DecalTransform_OwnerRelative mode */
var(DecalRender) Rotator ParentRelativeOrientation;
var private const transient Matrix ParentRelLocRotMatrix;

// Export UDecalComponent::execResetToDefaults(FFrame&, void* const)
native final function ResetToDefaults();

// Export UDecalComponent::execSetDecalMaterial(FFrame&, void* const)
native final function SetDecalMaterial(MaterialInterface NewDecalMaterial);

// Export UDecalComponent::execGetDecalMaterial(FFrame&, void* const)
native final function MaterialInterface GetDecalMaterial();

// Export UDecalComponent::execIsWaitingForResetToDefaultsToComplete(FFrame&, void* const)
native final function bool IsWaitingForResetToDefaultsToComplete();

defaultproperties
{
    Width=200
    Height=200
    TileX=1
    TileY=1
    FieldOfView=80
    FarPlane=300
    bProjectOnBSP=true
    bProjectOnStaticMeshes=true
    bProjectOnSkeletalMeshes=true
    bProjectOnTerrain=true
    HitNodeIndex=-1
    HitLevelIndex=-1
    DepthBias=-6E-05
    OrbisDepthBias=-1.6
    OrbisSlopeScaleDepthBias=50
    BackfaceAngle=0.001
    BlendRange=(X=89.5,Y=180)
    StreamingDistanceMultiplier=1
    DecalTransform=EDecalTransform.DecalTransform_SpawnRelative
    ReplacementPrimitive=none
    bAcceptsDynamicDecals=false
    bCastDynamicShadow=false
    bAcceptsDynamicLights=false
}