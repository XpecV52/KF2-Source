/*******************************************************************************
 * AudioComponent generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AudioComponent extends ActorComponent
    native
    editinlinenew
    collapsecategories
    noexport
    hidecategories(Object,ActorComponent);

struct native AudioComponentParam
{
    var() name ParamName;
    var() float FloatParam;
    var() SoundNodeWave WaveParam;

    structdefaultproperties
    {
        ParamName=None
        FloatParam=0
        WaveParam=none
    }
};

var() SoundCue SoundCue;
var native const SoundNode CueFirstNode;
/** Array of per-instance parameters for this AudioComponent. */
var() editinline array<editinline AudioComponentParam> InstanceParameters;
var bool bUseOwnerLocation;
var bool bAutoPlay;
var bool bAutoDestroy;
var bool bStopWhenOwnerDestroyed;
var bool bShouldRemainActiveIfDropped;
var bool bWasOccluded;
var transient bool bSuppressSubtitles;
var transient bool bWasPlaying;
var bool bAllowSpatialization;
var transient bool bFinished;
var transient bool bApplyRadioFilter;
var transient bool bRadioFilterSelected;
var transient bool bPreviewComponent;
var transient bool bIgnoreForFlushing;
var transient float StereoBleed;
var transient float LFEBleed;
var transient bool bEQFilterApplied;
var transient bool bAlwaysPlay;
var transient bool bIsUISound;
var transient bool bIsMusic;
var transient bool bReverb;
var transient bool bCenterChannelOnly;
var duplicatetransient native const array<Pointer> WaveInstances;
var duplicatetransient native const array<byte> SoundNodeData;
var duplicatetransient native const map<0, 0> SoundNodeOffsetMap;
var duplicatetransient native const MultiMap_Mirror SoundNodeResetWaveMap;
var duplicatetransient native const Pointer Listener;
var duplicatetransient native const float PlaybackTime;
var duplicatetransient native const PortalVolume PortalVolume;
var duplicatetransient native Vector Location;
var duplicatetransient native const Vector ComponentLocation;
var const transient Actor LastOwner;
var native float SubtitlePriority;
var float FadeInStartTime;
var float FadeInStopTime;
var float FadeInTargetVolume;
var float FadeOutStartTime;
var float FadeOutStopTime;
var float FadeOutTargetVolume;
var float AdjustVolumeStartTime;
var float AdjustVolumeStopTime;
var float AdjustVolumeTargetVolume;
var float CurrAdjustVolumeTargetVolume;
var native const SoundNode CurrentNotifyBufferFinishedHook;
var native const Vector CurrentLocation;
var native const Vector CurrentVelocity;
var native const float CurrentVolume;
var native const float CurrentPitch;
var native const float CurrentHighFrequencyGain;
var native const int CurrentUseSpatialization;
var native const int CurrentNotifyOnLoop;
var native const float OmniRadius;
var native const float CurrentVolumeMultiplier;
var native const float CurrentPitchMultiplier;
var native const float CurrentHighFrequencyGainMultiplier;
var native const float CurrentVoiceCenterChannelVolume;
var native const float CurrentRadioFilterVolume;
var native const float CurrentRadioFilterVolumeThreshold;
var native const Double LastUpdateTime;
var native const float SourceInteriorVolume;
var native const float SourceInteriorLPF;
var native const float CurrentInteriorVolume;
var native const float CurrentInteriorLPF;
var const transient Vector LastLocation;
var native const InteriorSettings LastInteriorSettings;
var native const int LastReverbVolumeIndex;
/** Serialized multipliers used to e.g. override volume for ambient sound actors. */
var() float VolumeMultiplier;
var() float PitchMultiplier;
var() float HighFrequencyGainMultiplier;
var float OcclusionCheckInterval;
var transient float LastOcclusionCheckTime;
var const export editinline DrawSoundRadiusComponent PreviewSoundRadius;
var export editinline SkeletalMeshComponent SkelMeshBase;
var name SkelMeshBaseBoneName;
var delegate<OnAudioFinished> __OnAudioFinished__Delegate;
var delegate<OnQueueSubtitles> __OnQueueSubtitles__Delegate;

// Export UAudioComponent::execPlay(FFrame&, void* const)
native final function Play();

// Export UAudioComponent::execStop(FFrame&, void* const)
native final function Stop();

// Export UAudioComponent::execIsPlaying(FFrame&, void* const)
native final function bool IsPlaying();

// Export UAudioComponent::execIsFadingIn(FFrame&, void* const)
native final function bool IsFadingIn();

// Export UAudioComponent::execIsFadingOut(FFrame&, void* const)
native final function bool IsFadingOut();

// Export UAudioComponent::execFadeIn(FFrame&, void* const)
native final function FadeIn(float FadeInDuration, float FadeVolumeLevel);

// Export UAudioComponent::execFadeOut(FFrame&, void* const)
native final function FadeOut(float FadeOutDuration, float FadeVolumeLevel);

// Export UAudioComponent::execAdjustVolume(FFrame&, void* const)
native final function AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);

// Export UAudioComponent::execSetFloatParameter(FFrame&, void* const)
native final function SetFloatParameter(name InName, float InFloat);

// Export UAudioComponent::execSetWaveParameter(FFrame&, void* const)
native final function SetWaveParameter(name InName, SoundNodeWave InWave);

// Export UAudioComponent::execResetToDefaults(FFrame&, void* const)
native final function ResetToDefaults();

delegate OnAudioFinished(AudioComponent AC);

delegate OnQueueSubtitles(array<SubtitleCue> Subtitles, float CueDuration);

event OcclusionChanged(bool bNowOccluded)
{
    VolumeMultiplier *= ((bNowOccluded) ? 0.5 : 2);
}

defaultproperties
{
    bUseOwnerLocation=true
    bAllowSpatialization=true
    FadeInStopTime=-1
    FadeInTargetVolume=1
    FadeOutStopTime=-1
    FadeOutTargetVolume=1
    AdjustVolumeStopTime=-1
    AdjustVolumeTargetVolume=1
    CurrAdjustVolumeTargetVolume=1
    LastLocation=(X=1,Y=2,Z=3)
    VolumeMultiplier=1
    PitchMultiplier=1
    HighFrequencyGainMultiplier=1
}