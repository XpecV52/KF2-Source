/*******************************************************************************
 * AnimTree generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AnimTree extends AnimNodeBlendBase
    native(Anim)
    hidecategories(Object,Object,Object,Object);

struct native AnimGroup
{
    var const transient array<AnimNodeSequence> SeqNodes;
    var const transient AnimNodeSequence SynchMaster;
    var const transient AnimNodeSequence NotifyMaster;
    /** Name of group. */
    var() const name GroupName;
    /** Rate Scale */
    var() const float RateScale;
    var const float SynchPctPosition;

    structdefaultproperties
    {
        SeqNodes=none
        SynchMaster=none
        NotifyMaster=none
        GroupName=None
        RateScale=1
        SynchPctPosition=0
    }
};

struct native SkelControlListHead
{
    var name BoneName;
    var export editinline SkelControlBase ControlHead;
    var editoronly int DrawY;

    structdefaultproperties
    {
        BoneName=None
        ControlHead=none
        DrawY=0
    }
};

struct native PreviewSkelMeshStruct
{
    /** Display name in combo box */
    var() name DisplayName;
    /** Preview Skeletal Mesh */
    var() SkeletalMesh PreviewSkelMesh;
    /** MorphTargetSets used when previewing this AnimTree in the AnimTreeEditor. */
    var() array<MorphTargetSet> PreviewMorphSets;

    structdefaultproperties
    {
        DisplayName=None
        PreviewSkelMesh=none
        PreviewMorphSets=none
    }
};

struct native PreviewSocketStruct
{
    /** Preview Name for quick selection */
    var() name DisplayName;
    /** Name of socket to use */
    var() name SocketName;
    /** Attached preview skeletal mesh */
    var() SkeletalMesh PreviewSkelMesh;
    /** Attached preview staticmesh */
    var() StaticMesh PreviewStaticMesh;

    structdefaultproperties
    {
        DisplayName=None
        SocketName=None
        PreviewSkelMesh=none
        PreviewStaticMesh=none
    }
};

struct native PreviewAnimSetsStruct
{
    /** AnimSets used when previewing this AnimTree in the AnimTreeEditor. */
    var() name DisplayName;
    /** AnimSets used when previewing this AnimTree in the AnimTreeEditor. */
    var() array<AnimSet> PreviewAnimSets;

    structdefaultproperties
    {
        DisplayName=None
        PreviewAnimSets=none
    }
};

/** Anim Tree template we were created from, or None if we are a template */
var() const AnimTree AnimTreeTemplate;
/** Enable pooling for this AnimTree. This will pool freed copies of this AnimTree for later reuse */
var() bool bEnablePooling;
var bool bUseSavedPose;
var editoronly transient bool bBeingEdited;
var duplicatetransient bool bParentNodeArrayBuilt;
var bool bRebuildAnimTickArray;
/** List of animations groups */
var() array<AnimGroup> AnimGroups;
var deprecated array<deprecated name> PrioritizedSkelBranches;
var() array<name> ComposePrePassBoneNames;
var() array<name> ComposePostPassBoneNames;
var export editinline array<export editinline MorphNodeBase> RootMorphNodes;
var export editinline array<export editinline SkelControlListHead> SkelControlLists;
var array<BoneAtom> SavedPose;
var editoronly int MorphConnDrawY;
/** Play rate used when previewing animations */
var() editoronly float PreviewPlayRate;
var editoronly deprecated SkeletalMesh PreviewSkelMesh;
var editoronly deprecated SkeletalMesh SocketSkelMesh;
var editoronly deprecated StaticMesh SocketStaticMesh;
var editoronly deprecated name SocketName;
var editoronly deprecated array<editoronly deprecated AnimSet> PreviewAnimSets;
var editoronly deprecated array<editoronly deprecated MorphTargetSet> PreviewMorphSets;
/** SkeletalMesh used when previewing this AnimTree in the AnimTreeEditor. */
var() editoronly array<editoronly PreviewSkelMeshStruct> PreviewMeshList;
var editoronly int PreviewMeshIndex;
var() editoronly array<editoronly PreviewSocketStruct> PreviewSocketList;
var editoronly int PreviewSocketIndex;
var() editoronly array<editoronly PreviewAnimSetsStruct> PreviewAnimSetList;
var editoronly int PreviewAnimSetListIndex;
var editoronly int PreviewAnimSetIndex;
var editoronly Vector PreviewCamPos;
var editoronly Rotator PreviewCamRot;
var editoronly Vector PreviewFloorPos;
var editoronly int PreviewFloorYaw;
var editoronly array<editoronly AnimNodeFrame> AnimNodeFrames;
var duplicatetransient array<AnimNode> AnimTickArray;

// Export UAnimTree::execFindSkelControl(FFrame&, void* const)
native final function SkelControlBase FindSkelControl(name InControlName);

// Export UAnimTree::execFindMorphNode(FFrame&, void* const)
native final function MorphNodeBase FindMorphNode(name InNodeName);

// Export UAnimTree::execSetUseSavedPose(FFrame&, void* const)
native final function SetUseSavedPose(bool bUseSaved);

// Export UAnimTree::execSetAnimGroupForNode(FFrame&, void* const)
native final function bool SetAnimGroupForNode(AnimNodeSequence SeqNode, name GroupName, optional bool bCreateIfNotFound);

// Export UAnimTree::execGetGroupSynchMaster(FFrame&, void* const)
native final function AnimNodeSequence GetGroupSynchMaster(name GroupName);

// Export UAnimTree::execGetGroupNotifyMaster(FFrame&, void* const)
native final function AnimNodeSequence GetGroupNotifyMaster(name GroupName);

// Export UAnimTree::execForceGroupRelativePosition(FFrame&, void* const)
native final function ForceGroupRelativePosition(name GroupName, float RelativePosition);

// Export UAnimTree::execGetGroupRelativePosition(FFrame&, void* const)
native final function float GetGroupRelativePosition(name GroupName);

// Export UAnimTree::execSetGroupRateScale(FFrame&, void* const)
native final function SetGroupRateScale(name GroupName, float NewRateScale);

// Export UAnimTree::execGetGroupRateScale(FFrame&, void* const)
native final function float GetGroupRateScale(name GroupName);

// Export UAnimTree::execGetGroupIndex(FFrame&, void* const)
native final function int GetGroupIndex(name GroupName);

defaultproperties
{
    PreviewPlayRate=1
    Children(0)=(Name=Child,Anim=none,Weight=1,BlendWeight=0,bMirrorSkeleton=false,bIsAdditive=false,DrawY=0)
    bFixNumChildren=true
}