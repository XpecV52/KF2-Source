/*******************************************************************************
 * OnlineGameInterface generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
interface OnlineGameInterface extends Interface
    abstract
    native;

enum ESteamMatchmakingType
{
    SMT_Invalid,
    SMT_LAN,
    SMT_Internet,
    SMT_Favorites,
    SMT_Friends,
    SMT_History,
    SMT_MAX
};

function SetMatchmakingTypeMode(OnlineGameInterface.ESteamMatchmakingType InMatchmakingTypeMode);

function bool AddSearchResultToFavorites(int Index);

function bool IsSearchResultInFavoritesList(int Index);

delegate OnGetPlayerListComplete(OnlineGameSettings PlayerListSettings, bool Success);

function AddGetPlayerListCompleteDelegate(delegate<OnGetPlayerListComplete> GetPlayerListCompleteDelegate);

function ClearGetPlayerListCompleteDelegate(delegate<OnGetPlayerListComplete> GetPlayerListCompleteDelegate);

function bool RemoveSearchResultFromFavorites(int Index);

function ClearOnlineDelegates();

function bool GetGameServerRemoteAddress(out string RemoteAddressString);

function bool CreateOnlineGame(byte HostingPlayerNum, name SessionName, OnlineGameSettings NewGameSettings);

delegate OnCreateOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddCreateOnlineGameCompleteDelegate(delegate<OnCreateOnlineGameComplete> CreateOnlineGameCompleteDelegate);

function ClearCreateOnlineGameCompleteDelegate(delegate<OnCreateOnlineGameComplete> CreateOnlineGameCompleteDelegate);

function bool UpdateOnlineGame(name SessionName, OnlineGameSettings UpdatedGameSettings, optional bool bShouldRefreshOnlineData)
{
    bShouldRefreshOnlineData = false;
}

delegate OnUpdateOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddUpdateOnlineGameCompleteDelegate(delegate<OnUpdateOnlineGameComplete> UpdateOnlineGameCompleteDelegate);

function ClearUpdateOnlineGameCompleteDelegate(delegate<OnUpdateOnlineGameComplete> UpdateOnlineGameCompleteDelegate);

function OnlineGameSettings GetGameSettings(name SessionName);

function bool DestroyOnlineGame(name SessionName);

delegate OnDestroyOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddDestroyOnlineGameCompleteDelegate(delegate<OnDestroyOnlineGameComplete> DestroyOnlineGameCompleteDelegate);

function ClearDestroyOnlineGameCompleteDelegate(delegate<OnDestroyOnlineGameComplete> DestroyOnlineGameCompleteDelegate);

function bool FindOnlineGames(byte SearchingPlayerNum, OnlineGameSearch SearchSettings);

delegate OnFindOnlineGamesComplete(bool bWasSuccessful);

function AddFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> FindOnlineGamesCompleteDelegate);

function ClearFindOnlineGamesCompleteDelegate(delegate<OnFindOnlineGamesComplete> FindOnlineGamesCompleteDelegate);

function bool CancelFindOnlineGames();

delegate OnCancelFindOnlineGamesComplete(bool bWasSuccessful);

function AddCancelFindOnlineGamesCompleteDelegate(delegate<OnCancelFindOnlineGamesComplete> CancelFindOnlineGamesCompleteDelegate);

function ClearCancelFindOnlineGamesCompleteDelegate(delegate<OnCancelFindOnlineGamesComplete> CancelFindOnlineGamesCompleteDelegate);

delegate OnQosStatusChanged(int NumComplete, int NumTotal);

function AddQosStatusChangedDelegate(delegate<OnQosStatusChanged> QosStatusChangedDelegate);

function ClearQosStatusChangedDelegate(delegate<OnQosStatusChanged> QosStatusChangedDelegate);

function bool ReadPlatformSpecificSessionInfo(const out OnlineGameSearchResult DesiredGame, out byte PlatformSpecificInfo[80]);

function bool ReadPlatformSpecificSessionInfoBySessionName(name SessionName, out byte PlatformSpecificInfo[80]);

function bool ReadSessionGuidBySessionName(name SessionName, out string SessionGuid);

function bool BindPlatformSpecificSessionToSearch(byte SearchingPlayerNum, OnlineGameSearch SearchSettings, byte PlatformSpecificInfo[80]);

function bool BindSessionGuidToSearch(byte SearchingPlayerNum, OnlineGameSearch SearchSettings, string SessionGuid);

function OnlineGameSearch GetGameSearch();

function bool FreeSearchResults(optional OnlineGameSearch Search);

function bool QueryNonAdvertisedData(int StartAt, int NumberToQuery);

function bool JoinOnlineGame(byte PlayerNum, name SessionName, const out OnlineGameSearchResult DesiredGame);

function bool JoinOnlineGameBySessionHandle(byte PlayerNum, name SessionName, const string InSessionGuid);

function bool JoinOnlineGameByMatchingParams(QWord RoomId, out OnlineGameSettings JoinedGameSettings);

function bool IsJoinOperationInProgress();

function bool SetRankedReadyStatus(bool bReady);

function bool IsCurrentRoomOwner();

delegate OnJoinOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddJoinOnlineGameCompleteDelegate(delegate<OnJoinOnlineGameComplete> JoinOnlineGameCompleteDelegate);

function ClearJoinOnlineGameCompleteDelegate(delegate<OnJoinOnlineGameComplete> JoinOnlineGameCompleteDelegate);

delegate OnMultiplayerSessionChange(name SessionName, SessionUpdateInfo SessionChanges);

function AddMultiplayerSessionChangeDelegate(delegate<OnMultiplayerSessionChange> MultiplayerSessionChangeDelegate);

function ClearMultiplayerSessionChangeDelegate(delegate<OnMultiplayerSessionChange> MultiplayerSessionChangeDelegate);

function bool QueryMatchmakingForSession(byte ScoutingPlayerNum, name SessionName, int MatchTimeout, optional OnlineSubsystem.EOnlineCreateGameSessionFlag CreateGameSessionType)
{
    CreateGameSessionType = 0;
}

function bool QueryMatchmakingForSessionWithHopper(byte ScoutingPlayerNum, name SessionName, int MatchTimeout, string HopperName, optional OnlineSubsystem.EOnlineCreateGameSessionFlag CreateGameSessionType)
{
    CreateGameSessionType = 0;
}

delegate OnQueryMatchmakingForSessionComplete(name SessionName, bool bWasSuccessful);

function AddQueryMatchmakingForSessionCompleteDelegate(delegate<OnQueryMatchmakingForSessionComplete> QueryMatchmakingForSessionCompleteDelegate);

function ClearQueryMatchmakingForSessionCompleteDelegate(delegate<OnQueryMatchmakingForSessionComplete> QueryMatchmakingForSessionCompleteDelegate);

function bool DeleteMatchTicket(byte ScoutingPlayerNum, name SessionName);

function bool DeleteMatchTicketWithHopper(byte ScoutingPlayerNum, name SessionName, string HopperName);

delegate OnDeleteMatchTicketComplete(name SessionName, bool bWasSuccessful);

function AddDeleteMatchTicketCompleteDelegate(delegate<OnDeleteMatchTicketComplete> DeleteMatchTicketCompleteDelegate);

function ClearDeleteMatchTicketCompleteDelegate(delegate<OnDeleteMatchTicketComplete> DeleteMatchTicketCompleteDelegate);

function bool SetCustomSessionProperty(name SessionName, string PropertyName, string PropertyValue);

function bool DeleteCustomSessionProperty(name SessionName, string PropertyName);

function bool SetCustomMemberProperty(name SessionName, string PropertyName, string PropertyValue);

function bool DeleteCustomMemberProperty(name SessionName, string PropertyName);

function bool UpdateSessionProperties(byte ScoutingUserNum, name SessionName);

delegate OnUpdateSessionPropertiesComplete(name SessionName, bool bWasSuccessful);

function AddUpdateSessionPropertiesCompleteDelegate(delegate<OnUpdateSessionPropertiesComplete> UpdateSessionPropertiesCompleteDelegate);

function ClearUpdateSessionPropertiesCompleteDelegate(delegate<OnUpdateSessionPropertiesComplete> UpdateSessionPropertiesCompleteDelegate);

delegate OnGamePlayersChanged(name SessionName, array<UniqueNetId> Players);

function AddGamePlayersChangedDelegate(delegate<OnGamePlayersChanged> GamePlayersChangedDelegate);

function ClearGamePlayersChangedDelegate(delegate<OnGamePlayersChanged> GamePlayersChangedDelegate);

delegate OnMatchStatusChanged(name SessionName, byte Status);

function AddMatchStatusChangedDelegate(delegate<OnMatchStatusChanged> MatchStatusChangedDelegate);

function ClearMatchStatusChangedDelegate(delegate<OnMatchStatusChanged> MatchStatusChangedDelegate);

function bool LeaveOnlineSession(byte LocalPlayerNum, name SessionName, optional bool bClearSessionIfHost)
{
    bClearSessionIfHost = false;
}

function LeaveAllOnlineSessions(optional bool bClearSessionIfHost)
{
    bClearSessionIfHost = false;
}

function bool QuerySessionsForUser(byte LocalPlayerNum);

function bool QuerySessionsByKeyword(byte LocalPlayerNum, string Keyword, OnlineGameSearch SearchSettings);

delegate OnQuerySessionsForUserComplete(byte LocalPlayerNum, bool bWasSuccessful);

function AddQuerySessionsForUserCompleteDelegate(delegate<OnQuerySessionsForUserComplete> QuerySessionsForUserCompleteDelegate);

function ClearQuerySessionsForUserCompleteDelegate(delegate<OnQuerySessionsForUserComplete> QuerySessionsForUserCompleteDelegate);

function bool GetResolvedConnectString(name SessionName, out string ConnectInfo);

function bool RegisterPlayer(name SessionName, UniqueNetId PlayerID, bool bWasInvited);

function bool RegisterPlayers(name SessionName, const out array<UniqueNetId> Players);

delegate OnRegisterPlayerComplete(name SessionName, UniqueNetId PlayerID, bool bWasSuccessful);

function AddRegisterPlayerCompleteDelegate(delegate<OnRegisterPlayerComplete> RegisterPlayerCompleteDelegate);

function ClearRegisterPlayerCompleteDelegate(delegate<OnRegisterPlayerComplete> RegisterPlayerCompleteDelegate);

function bool UnregisterPlayer(name SessionName, UniqueNetId PlayerID);

function bool UnregisterPlayers(name SessionName, const out array<UniqueNetId> Players);

delegate OnUnregisterPlayerComplete(name SessionName, UniqueNetId PlayerID, bool bWasSuccessful);

function AddUnregisterPlayerCompleteDelegate(delegate<OnUnregisterPlayerComplete> UnregisterPlayerCompleteDelegate);

function ClearUnregisterPlayerCompleteDelegate(delegate<OnUnregisterPlayerComplete> UnregisterPlayerCompleteDelegate);

function bool StartOnlineGame(name SessionName);

delegate OnStartOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddStartOnlineGameCompleteDelegate(delegate<OnStartOnlineGameComplete> StartOnlineGameCompleteDelegate);

function ClearStartOnlineGameCompleteDelegate(delegate<OnStartOnlineGameComplete> StartOnlineGameCompleteDelegate);

function bool EndOnlineGame(name SessionName);

delegate OnEndOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddEndOnlineGameCompleteDelegate(delegate<OnEndOnlineGameComplete> EndOnlineGameCompleteDelegate);

function ClearEndOnlineGameCompleteDelegate(delegate<OnEndOnlineGameComplete> EndOnlineGameCompleteDelegate);

function bool RegisterForArbitration(name SessionName);

delegate OnArbitrationRegistrationComplete(name SessionName, bool bWasSuccessful);

function AddArbitrationRegistrationCompleteDelegate(delegate<OnArbitrationRegistrationComplete> ArbitrationRegistrationCompleteDelegate);

function ClearArbitrationRegistrationCompleteDelegate(delegate<OnArbitrationRegistrationComplete> ArbitrationRegistrationCompleteDelegate);

function array<OnlineArbitrationRegistrant> GetArbitratedPlayers(name SessionName);

delegate OnGameInviteAccepted(const out OnlineGameSearchResult InviteResult, OnlineSubsystem.OnGameInviteAcceptedResult ResultReason);

function AddGameInviteAcceptedDelegate(byte LocalUserNum, delegate<OnGameInviteAccepted> GameInviteAcceptedDelegate);

function ClearGameInviteAcceptedDelegate(byte LocalUserNum, delegate<OnGameInviteAccepted> GameInviteAcceptedDelegate);

function bool AcceptGameInvite(byte LocalUserNum, name SessionName, const out OnlineGameSearchResult DesiredGame);

delegate OnPlayTogetherStarted();

function AddPlayTogetherStartedDelegate(byte LocalUserNum, delegate<OnPlayTogetherStarted> PlayTogetherStartedDelegate);

function ClearPlayTogetherStartedDelegate(byte LocalUserNum, delegate<OnPlayTogetherStarted> PlayTogetherStartedDelegate);

function array<string> GetPendingMembersToInvite();

function ResetPendingMembersToInvite();

function SetPendingMembersToInvite(array<string> Members);

function bool RecalculateSkillRating(name SessionName, const out array<UniqueNetId> Players);

delegate OnRecalculateSkillRatingComplete(name SessionName, bool bWasSuccessful);

function AddRecalculateSkillRatingCompleteDelegate(delegate<OnRecalculateSkillRatingComplete> RecalculateSkillRatingCompleteDelegate);

function ClearRecalculateSkillRatingCompleteDelegate(delegate<OnRecalculateSkillRatingComplete> RecalculateSkillRatingGameCompleteDelegate);

function bool MigrateOnlineGame(byte HostingPlayerNum, name SessionName);

delegate OnMigrateOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddMigrateOnlineGameCompleteDelegate(delegate<OnMigrateOnlineGameComplete> MigrateOnlineGameCompleteDelegate);

function ClearMigrateOnlineGameCompleteDelegate(delegate<OnMigrateOnlineGameComplete> MigrateOnlineGameCompleteDelegate);

function bool JoinMigratedOnlineGame(byte PlayerNum, name SessionName, const out OnlineGameSearchResult DesiredGame);

delegate OnJoinMigratedOnlineGameComplete(name SessionName, bool bWasSuccessful);

function AddJoinMigratedOnlineGameCompleteDelegate(delegate<OnJoinMigratedOnlineGameComplete> JoinMigratedOnlineGameCompleteDelegate);

function ClearJoinMigratedOnlineGameCompleteDelegate(delegate<OnJoinMigratedOnlineGameComplete> JoinMigratedOnlineGameCompleteDelegate);

function bool GetNumberOfCurrentPlayers();

delegate OnRetrievedGameSettingsForIP(bool bSuccessful, const out OnlineGameSearchResult ConnectResult);

function AddOnRetrieveGameSettingsForIPDelegate(delegate<OnRetrievedGameSettingsForIP> NewRetrieveIPDelegate);

function ClearOnRetrieveGameSettingsForIPDelegate(delegate<OnRetrievedGameSettingsForIP> RetrieveIPDelegate);

function RetrieveGameSettingsForIP(string IPAddress);

function bool SendPlayerList(const array<PlayerReplicationInfo> Players);

function int GetNumberOfCurrentPlayersCached();

delegate OnGetNumberOfCurrentPlayersComplete(int TotalPlayers);

function AddGetNumberOfCurrentPlayersCompleteDelegate(delegate<OnGetNumberOfCurrentPlayersComplete> GetNumberOfCurrentPlayersCompleteDelegate);

function ClearGetNumberOfCurrentPlayersCompleteDelegate(delegate<OnGetNumberOfCurrentPlayersComplete> GetNumberOfCurrentPlayersCompleteDelegate);

function string GetRoomId();

delegate OnGetRoomIdFromTitleService(QWord RoomId);

function GetRoomIdFromTitleService(QWord DataId);

function GetRoomIdFromSessionId(string SessionId);

function AddGetRoomIdFromTitleServiceDelegate(delegate<OnGetRoomIdFromTitleService> InDelegate);

function ClearGetRoomIdFromTitleServiceDelegate(delegate<OnGetRoomIdFromTitleService> InDelegate);

function bool IsAllowedToNetworkHost();

function RunBandwidthTest();
