/*******************************************************************************
 * UIDataStore generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataStore extends UIDataProvider
    abstract
    transient
    native(UIPrivate)
    config(Engine)
    hidecategories(Object,UIRoot);

var name Tag;
var array< delegate<OnDataStoreValueUpdated> > RefreshSubscriberNotifies;
var delegate<OnDataStoreValueUpdated> __OnDataStoreValueUpdated__Delegate;

delegate OnDataStoreValueUpdated(UIDataStore SourceDataStore, bool bValuesInvalidated, name PropertyTag, UIDataProvider SourceProvider, int ArrayIndex);

event Registered(LocalPlayer PlayerOwner);

event Unregistered(LocalPlayer PlayerOwner);

event SubscriberAttached(UIDataStoreSubscriber Subscriber)
{
    local int SubscriberNotifyIndex;

    if(NotEqual_InterfaceInterface(Subscriber, (none)))
    {
        SubscriberNotifyIndex = RefreshSubscriberNotifies.Find(Subscriber.NotifyDataStoreValueUpdated;
        if(SubscriberNotifyIndex == -1)
        {
            SubscriberNotifyIndex = RefreshSubscriberNotifies.Length;
            RefreshSubscriberNotifies[SubscriberNotifyIndex] = Subscriber.NotifyDataStoreValueUpdated;
        }
    }
}

event SubscriberDetached(UIDataStoreSubscriber Subscriber)
{
    local int SubscriberNotifyIndex;

    if(NotEqual_InterfaceInterface(Subscriber, (none)))
    {
        SubscriberNotifyIndex = RefreshSubscriberNotifies.Find(Subscriber.NotifyDataStoreValueUpdated;
        if(SubscriberNotifyIndex != -1)
        {
            RefreshSubscriberNotifies.Remove(SubscriberNotifyIndex, 1;
        }
    }
}

function bool NotifyGameSessionEnded();

final event RefreshSubscribers(optional name PropertyTag, optional bool bInvalidateValues, optional UIDataProvider SourceProvider, optional int ArrayIndex)
{
    local int Idx;
    local delegate<OnDataStoreValueUpdated> Subscriber;
    local array< delegate<OnDataStoreValueUpdated> > SubscriberArrayCopy;

    bInvalidateValues = true;    
    ArrayIndex = -1;
    SubscriberArrayCopy.Length = RefreshSubscriberNotifies.Length;
    Idx = 0;
    J0x30:

    if(Idx < SubscriberArrayCopy.Length)
    {
        SubscriberArrayCopy[Idx] = RefreshSubscriberNotifies[Idx];
        ++ Idx;
        goto J0x30;
    }
    Idx = 0;
    J0x88:

    if(Idx < SubscriberArrayCopy.Length)
    {
        Subscriber = SubscriberArrayCopy[Idx];
        OnDataStoreValueUpdated(self, bInvalidateValues, PropertyTag, SourceProvider, ArrayIndex);
        ++ Idx;
        goto J0x88;
    }
}

final function DataStoreClient GetDataStoreClient()
{
    return Class'UIInteraction'.static.GetDataStoreClient();
}
