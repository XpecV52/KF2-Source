/*******************************************************************************
 * FractureManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class FractureManager extends Actor
    native(Mesh)
    notplaceable
    hidecategories(Navigation);

const FSM_DEFAULTRECYCLETIME = 0.2;

var int FSMPartPoolSize;
/** If TRUE, look for vibrating FSM parts and kill them */
var() bool bEnableAntiVibration;
/** If TRUE, spawn effect for chunks falling off when doing radial damage (ie removing many chunks at once) */
var() bool bEnableSpawnChunkEffectForRadialDamage;
/** How much vibration (defined as changes in angular velocity direction) must occur before part is killed. */
var() float DestroyVibrationLevel;
/** Min angular velocity of part to be killed by vibration detection code. */
var() float DestroyMinAngVel;
var() float ExplosionVelScale;
var array<FracturedStaticMeshPart> PartPool;
var array<int> FreeParts;
var transient array<FracturedStaticMeshActor> ActorsWithDeferredPartsToSpawn;

simulated event SpawnChunkDestroyEffect(ParticleSystem Effect, Box ChunkBox, Vector ChunkDir, float Scale, const FracturedStaticMeshComponent MeshComp)
{
    local Vector ChunkMiddle;
    local editinline ParticleSystemComponent EffectComp;

    if(WorldInfo.bDropDetail)
    {
        return;
    }
    ChunkMiddle = 0.5 * (ChunkBox.Min + ChunkBox.Max);
    EffectComp = WorldInfo.MyEmitterPool.SpawnEmitter(Effect, ChunkMiddle, rotator(ChunkDir));
    EffectComp.SetScale(Scale);
    if(MeshComp != none)
    {
        EffectComp.SetLightingChannels(MeshComp.LightingChannels);
    }
}

// Export UFractureManager::execGetNumFSMPartsScale(FFrame&, void* const)
native function float GetNumFSMPartsScale();

// Export UFractureManager::execGetFSMDirectSpawnChanceScale(FFrame&, void* const)
native function float GetFSMDirectSpawnChanceScale();

// Export UFractureManager::execGetFSMRadialSpawnChanceScale(FFrame&, void* const)
native function float GetFSMRadialSpawnChanceScale();

// Export UFractureManager::execGetFSMFractureCullDistanceScale(FFrame&, void* const)
native function float GetFSMFractureCullDistanceScale();

simulated event PreBeginPlay()
{
    super.PreBeginPlay();
    CreateFSMParts();
}

simulated event Destroyed()
{
    super.Destroyed();
    CleanUpFSMParts();
}

final simulated function CleanUpFSMParts()
{
    local int Idx;

    Idx = 0;
    J0x0B:

    if(Idx < PartPool.Length)
    {
        PartPool[Idx].Destroy();
        PartPool[Idx] = none;
        ++ Idx;
        goto J0x0B;
    }
}

// Export UFractureManager::execCreateFSMParts(FFrame&, void* const)
native function CreateFSMParts();

// Export UFractureManager::execResetPoolVisibility(FFrame&, void* const)
native simulated function ResetPoolVisibility();

// Export UFractureManager::execGetFSMPart(FFrame&, void* const)
native function FracturedStaticMeshPart GetFSMPart(FracturedStaticMeshActor Parent, Vector SpawnLocation, Rotator SpawnRotation);

simulated event FracturedStaticMeshPart SpawnPartActor(FracturedStaticMeshActor Parent, Vector SpawnLocation, Rotator SpawnRotation)
{
    local FracturedStaticMeshPart NewPart;

    NewPart = GetFSMPart(Parent, SpawnLocation, SpawnRotation);
    if(NewPart != none)
    {
        NewPart.SetTimer(10, false, 'TryToCleanUp');
    }
    return NewPart;
}

simulated event ReturnPartActor(FracturedStaticMeshPart Part)
{
    FreeParts.AddItem(Part.PartPoolIndex;
}

simulated function Tick(float DeltaTime)
{
    local int CurActorIndex;

    if(ActorsWithDeferredPartsToSpawn.Length > 0)
    {
        CurActorIndex = 0;
        J0x1B:

        if(CurActorIndex < ActorsWithDeferredPartsToSpawn.Length)
        {
            if(ActorsWithDeferredPartsToSpawn[CurActorIndex].SpawnDeferredParts())
            {
                ActorsWithDeferredPartsToSpawn.Remove(CurActorIndex, 1;
                -- CurActorIndex;
            }
            ++ CurActorIndex;
            goto J0x1B;
        }
    }
}

defaultproperties
{
    FSMPartPoolSize=50
    DestroyVibrationLevel=3
    DestroyMinAngVel=2.5
    ExplosionVelScale=1
    CollisionType=ECollisionType.COLLIDE_CustomDefault
}