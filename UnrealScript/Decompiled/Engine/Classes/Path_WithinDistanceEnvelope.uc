/*******************************************************************************
 * Path_WithinDistanceEnvelope generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Path_WithinDistanceEnvelope extends PathConstraint
    native(AI);

/** outer distance of envelope (distance from test actor) */
var() float MaxDistance;
/** inner distance of envelope (distance from test actor) */
var() float MinDistance;
/** if this is on instead of throwing out nodes outside traversal distance they will be gradiently penalized the further out they are */
var() bool bSoft;
/** when bSoft is false, should we throw out nodes whose start and end are both outside the envelope? */
var() bool bOnlyThrowOutNodesThatLeaveEnvelope;
/** when a path exceeds specified traversal distance this penalty will be applied, and scaled up depending on how far outside the dist it is */
var() float SoftStartPenalty;
var() Vector EnvelopeTestPoint;

static function bool StayWithinEnvelopeToLoc(Pawn P, Vector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, optional bool bInSoft, optional float InSoftStartPenalty, optional bool bOnlyTossOutSpecsThatLeave)
{
    local Path_WithinDistanceEnvelope Con;

    bInSoft = true;
    InSoftStartPenalty = -1;    
    if(P != none)
    {
        Con = Path_WithinDistanceEnvelope(P.CreatePathConstraint(default.Class));
        if(Con != none)
        {
            Con.EnvelopeTestPoint = InEnvelopeTestPoint;
            Con.bSoft = bInSoft;
            Con.MaxDistance = InMaxDistance;
            Con.MinDistance = InMinDistance;
            Con.bOnlyThrowOutNodesThatLeaveEnvelope = bOnlyTossOutSpecsThatLeave;
            if(InSoftStartPenalty > -1)
            {
                Con.SoftStartPenalty = InSoftStartPenalty;
            }
            P.AddPathConstraint(Con);
            return true;
        }
    }
    return false;
}

function Recycle()
{
    super.Recycle();
    MaxDistance = default.MaxDistance;
    MinDistance = default.MinDistance;
    bSoft = default.bSoft;
    SoftStartPenalty = default.SoftStartPenalty;
    EnvelopeTestPoint = default.EnvelopeTestPoint;
    bOnlyThrowOutNodesThatLeaveEnvelope = default.bOnlyThrowOutNodesThatLeaveEnvelope;
}

defaultproperties
{
    bSoft=true
    SoftStartPenalty=320
    CacheIdx=3
}