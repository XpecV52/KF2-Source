/*******************************************************************************
 * KAsset generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KAsset extends Actor
    native(Physics)
    nativereplication
    placeable
    hidecategories(Navigation)
    classgroup(Physics);

var() const editconst export editinline SkeletalMeshComponent SkeletalMeshComponent;
var() bool bDamageAppliesImpulse;
var() bool bWakeOnLevelStart;
/** Whether this KAsset should block Pawns. */
var() bool bBlockPawns;
var repnotify transient SkeletalMesh ReplicatedMesh;
var repnotify transient PhysicsAsset ReplicatedPhysAsset;

replication
{
     if(Role == ROLE_Authority)
        ReplicatedMesh, ReplicatedPhysAsset;
}

simulated event PostBeginPlay()
{
    super.PostBeginPlay();
    if(bWakeOnLevelStart)
    {
        SkeletalMeshComponent.WakeRigidBody();
    }
    ReplicatedMesh = SkeletalMeshComponent.SkeletalMesh;
    ReplicatedPhysAsset = SkeletalMeshComponent.PhysicsAsset;
    if(!SkeletalMeshComponent.bUpdateSkelWhenNotRendered)
    {
        SkeletalMeshComponent.ForceSkelUpdate();
    }
}

final function SetMeshAndPhysAsset(SkeletalMesh NewMesh, PhysicsAsset NewPhysAsset)
{
    SkeletalMeshComponent.SetSkeletalMesh(NewMesh);
    ReplicatedMesh = NewMesh;
    SkeletalMeshComponent.SetPhysicsAsset(NewPhysAsset);
    ReplicatedPhysAsset = NewPhysAsset;
}

simulated event ReplicatedEvent(name VarName)
{
    if(VarName == 'ReplicatedMesh')
    {
        SkeletalMeshComponent.SetSkeletalMesh(ReplicatedMesh);        
    }
    else
    {
        if(VarName == 'ReplicatedPhysAsset')
        {
            SkeletalMeshComponent.SetPhysicsAsset(ReplicatedPhysAsset);
        }
    }
}

simulated event TakeDamage(int Damage, Controller EventInstigator, Vector HitLocation, Vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)
{
    local Vector ApplyImpulse;

    super.TakeDamage(Damage, EventInstigator, HitLocation, Momentum, DamageType, HitInfo, DamageCauser);
    if(bDamageAppliesImpulse && DamageType.default.KDamageImpulse > float(0))
    {
        if(VSize(Momentum) < 0.001)
        {
            LogInternal("Zero momentum to KActor.TakeDamage");
            return;
        }
        CheckHitInfo(HitInfo, SkeletalMeshComponent, Normal(Momentum), HitLocation);
        ApplyImpulse = Normal(Momentum) * DamageType.default.KDamageImpulse;
        if(HitInfo.HitComponent != none)
        {
            HitInfo.HitComponent.AddImpulse(ApplyImpulse, HitLocation, HitInfo.BoneName);
        }
    }
}

simulated function TakeRadiusDamage(Controller InstigatedBy, float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, Vector HurtOrigin, bool bFullDamage, Actor DamageCauser, optional float DamageFalloffExponent)
{
    DamageFalloffExponent = 1;
    if((bDamageAppliesImpulse && DamageType.default.RadialDamageImpulse > float(0)) && Role == ROLE_Authority)
    {
        CollisionComponent.AddRadialImpulse(HurtOrigin, DamageRadius, DamageType.default.RadialDamageImpulse, 1, DamageType.default.bRadialDamageVelChange);
    }
}

simulated function OnToggle(SeqAct_Toggle Action)
{
    if(Action.InputLinks[0].bHasImpulse)
    {
        SkeletalMeshComponent.WakeRigidBody();
    }
}

simulated function OnTeleport(SeqAct_Teleport inAction)
{
    local Actor destActor;

    destActor = Actor(SeqVar_Object(inAction.VariableLinks[1].LinkedVariables[0]).GetObjectValue());
    if(destActor != none)
    {
        SkeletalMeshComponent.SetRBPosition(destActor.Location);        
    }
    else
    {
        inAction.ScriptLog((("No Destination for" @ string(inAction)) @ "on") @ string(self));
    }
}

function DoKismetAttachment(Actor Attachment, SeqAct_AttachToActor Action)
{
    Attachment.SetBase(self,, SkeletalMeshComponent, Action.BoneName);
}

defaultproperties
{
    begin object name=KAssetSkelMeshComponent class=SkeletalMeshComponent
        PhysicsWeight=1
        bSkipAllUpdateWhenPhysicsAsleep=true
        bHasPhysicsAssetInstance=true
        bUpdateKinematicBonesFromAnimation=false
        bUseTickOptimization=false
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KAsset.MyLightEnvironment'
        RBChannel=ERBCollisionChannel.RBCC_GameplayPhysics
        CollideActors=true
        BlockActors=true
        BlockZeroExtent=true
        BlockRigidBody=true
        bBlockFootPlacement=false
        RBCollideWithChannels=(Default=true,GameplayPhysics=true,EffectPhysics=true,BlockingVolume=true)
    object end
    // Reference: SkeletalMeshComponent'Default__KAsset.KAssetSkelMeshComponent'
    SkeletalMeshComponent=KAssetSkelMeshComponent
    bDamageAppliesImpulse=true
    begin object name=KAssetSkelMeshComponent class=SkeletalMeshComponent
        PhysicsWeight=1
        bSkipAllUpdateWhenPhysicsAsleep=true
        bHasPhysicsAssetInstance=true
        bUpdateKinematicBonesFromAnimation=false
        bUseTickOptimization=false
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KAsset.MyLightEnvironment'
        RBChannel=ERBCollisionChannel.RBCC_GameplayPhysics
        CollideActors=true
        BlockActors=true
        BlockZeroExtent=true
        BlockRigidBody=true
        bBlockFootPlacement=false
        RBCollideWithChannels=(Default=true,GameplayPhysics=true,EffectPhysics=true,BlockingVolume=true)
    object end
    // Reference: SkeletalMeshComponent'Default__KAsset.KAssetSkelMeshComponent'
    Components(0)=KAssetSkelMeshComponent
    Physics=EPhysics.PHYS_RigidBody
    CollisionType=ECollisionType.COLLIDE_BlockWeapons
    TickGroup=ETickingGroup.TG_PostAsyncWork
    bNoDelete=true
    bAlwaysRelevant=true
    bUpdateSimulatedPosition=true
    bNetInitialRotation=true
    BlockRigidBody=true
    bCollideActors=true
    bBlockActors=true
    bProjTarget=true
    bEdShouldSnap=true
    begin object name=KAssetSkelMeshComponent class=SkeletalMeshComponent
        PhysicsWeight=1
        bSkipAllUpdateWhenPhysicsAsleep=true
        bHasPhysicsAssetInstance=true
        bUpdateKinematicBonesFromAnimation=false
        bUseTickOptimization=false
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__KAsset.MyLightEnvironment'
        RBChannel=ERBCollisionChannel.RBCC_GameplayPhysics
        CollideActors=true
        BlockActors=true
        BlockZeroExtent=true
        BlockRigidBody=true
        bBlockFootPlacement=false
        RBCollideWithChannels=(Default=true,GameplayPhysics=true,EffectPhysics=true,BlockingVolume=true)
    object end
    // Reference: SkeletalMeshComponent'Default__KAsset.KAssetSkelMeshComponent'
    CollisionComponent=KAssetSkelMeshComponent
    SupportedEvents(0)=class'SeqEvent_Touch'
    SupportedEvents(1)=class'SeqEvent_Destroyed'
    SupportedEvents(2)=class'SeqEvent_TakeDamage'
    SupportedEvents(3)=class'SeqEvent_HitWall'
    SupportedEvents(4)=class'SeqEvent_AnimNotify'
    SupportedEvents(5)=class'SeqEvent_MobileTouch'
    SupportedEvents(6)=class'SeqEvent_ConstraintBroken'
    SupportedEvents(7)=class'SeqEvent_RigidBodyCollision'
}