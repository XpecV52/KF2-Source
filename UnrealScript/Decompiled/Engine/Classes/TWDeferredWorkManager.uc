/*******************************************************************************
 * TWDeferredWorkManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class TWDeferredWorkManager extends Actor
    native(TW)
    notplaceable
    hidecategories(Navigation);

struct native AnimNotifyData
{
    var AnimNotify Caller;
    var AnimNodeSequence NodeSeq;

    structdefaultproperties
    {
        Caller=none
        NodeSeq=none
    }
};

struct native AnimNotifyEndData
{
    var AnimNotify Caller;
    var AnimNodeSequence NodeSeq;
    var float AnimCurrentTime;

    structdefaultproperties
    {
        Caller=none
        NodeSeq=none
        AnimCurrentTime=0
    }
};

struct native AnimNotifyTickData
{
    var AnimNotify Caller;
    var AnimNodeSequence NodeSeq;
    var float AnimCurrentTime;
    var float AnimTimeStep;
    var float InTotalDuration;

    structdefaultproperties
    {
        Caller=none
        NodeSeq=none
        AnimCurrentTime=0
        AnimTimeStep=0
        InTotalDuration=0
    }
};

/** This holds pointers to AnimNotify */
var() array<AnimNotifyData> AnimNotifyDataArray;
/** This holds pointers to AnimNotify */
var() array<AnimNotifyTickData> AnimNotifyTickDataArray;
/** This holds pointers to AnimNotify */
var() array<AnimNotifyEndData> AnimNotifyEndDataArray;

// Export UTWDeferredWorkManager::execIsDuringAsyncWork(FFrame&, void* const)
native function bool IsDuringAsyncWork();

// Export UTWDeferredWorkManager::execDeferNotify(FFrame&, void* const)
native function DeferNotify(AnimNotify Caller, AnimNodeSequence NodeSeq);

// Export UTWDeferredWorkManager::execDeferNotifyTick(FFrame&, void* const)
native function DeferNotifyTick(AnimNotify Caller, AnimNodeSequence NodeSeq, const float AnimCurrentTime, const float AnimTimeStep, const float InTotalDuration);

// Export UTWDeferredWorkManager::execDeferNotifyEnd(FFrame&, void* const)
native function DeferNotifyEnd(AnimNotify Caller, AnimNodeSequence NodeSeq, const float AnimCurrentTime);

function DeferSpecialMoveAnimEnd(Object Caller)
{
    SetTimer(0.0001, false, 'DeferOnAnimEnd', Caller);
}

defaultproperties
{
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    TickGroup=ETickingGroup.TG_PostAsyncWork
}