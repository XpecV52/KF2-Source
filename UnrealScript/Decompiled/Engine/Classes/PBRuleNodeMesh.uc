/*******************************************************************************
 * PBRuleNodeMesh generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PBRuleNodeMesh extends PBRuleNodeBase
    native(ProcBuilding)
    editinlinenew
    collapsecategories
    hidecategories(Object,Object);

struct native BuildingMatOverrides
{
    /** Array of materials, one of which will be selected for a certain section */
    var() array<MaterialInterface> MaterialOptions;

    structdefaultproperties
    {
        MaterialOptions=none
    }
};

struct native BuildingMeshInfo
{
    /** Actual mesh to use */
    var() StaticMesh Mesh;
    /** Defined X length of mesh, when used in building */
    var() float DimX;
    /** Defined Z length of mesh, when used in building */
    var() float DimZ;
    /** Chance of this building mesh being picked */
    var() float Chance;
    /** Optional translation applied to to mesh */
    var() export editinline DistributionVector Translation;
    /** Optional rotation (in degrees) applied to to mesh */
    var() export editinline DistributionVector Rotation;
    /** If TRUE, the Translation specified is scaled by any scaling applied to the mesh */
    var() bool bMeshScaleTranslation;
    /** If TRUE, use OverriddenLightMapRes instead of resolution set on the mesh. */
    var() bool bOverrideMeshLightMapRes;
    /** Resolution to use for lighting on this mesh, if bOverrideMeshLightMapRes is TRUE. */
    var() int OverriddenMeshLightMapRes;
    var array<MaterialInterface> MaterialOverrides;
    /** Specifies options for overriding material on each section of the mesh */
    var() array<BuildingMatOverrides> SectionOverrides;

    structdefaultproperties
    {
        Mesh=none
        DimX=512
        DimZ=512
        Chance=1
        Translation=none
        Rotation=none
        bMeshScaleTranslation=false
        bOverrideMeshLightMapRes=false
        OverriddenMeshLightMapRes=32
        MaterialOverrides=none
        SectionOverrides=none
    }
};

/** Set of meshes to pick from. */
var() array<BuildingMeshInfo> BuildingMeshes;
/** Mesh to use if this scope if partially occluded. If a mesh is not specified, will just use one of the BuildingMeshes array. */
var() BuildingMeshInfo PartialOccludedBuildingMesh;
/** If TRUE, will test region is not occluded (or is partially occluded) before placing mesh. */
var() bool bDoOcclusionTest;
/** If TRUE, this mesh will block all, including players */
var() bool bBlockAll;

// Export UPBRuleNodeMesh::execPickRandomBuildingMesh(FFrame&, void* const)
native function int PickRandomBuildingMesh();

defaultproperties
{
    PartialOccludedBuildingMesh=(Mesh=none,DimX=512,DimZ=512,Chance=1,Translation=none,Rotation=none,bMeshScaleTranslation=false,bOverrideMeshLightMapRes=false,OverriddenMeshLightMapRes=32,MaterialOverrides=none,SectionOverrides=none)
    bDoOcclusionTest=true
    NextRules=none
}