/*******************************************************************************
 * LiftCenter generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class LiftCenter extends NavigationPoint
    native
    placeable
    hidecategories(Navigation,Lighting,LightColor,Force);

var InterpActor MyLift;
var float MaxDist2D;
var Vector LiftOffset;
var bool bJumpLift;
var float CollisionHeight;
/** if specified, must touch this to start the lift */
var() Trigger LiftTrigger;

event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    if((Base == MyLift) && MyLift != none)
    {
        LiftOffset = Location - MyLift.Location;
        MyLift.bIsLift = true;
    }
}

event Actor SpecialHandling(Pawn Other)
{
    if(((MyLift == none) || LiftTrigger == none) || LiftTrigger.bRecentlyTriggered)
    {
        return self;        
    }
    else
    {
        return LiftTrigger;
    }
}

event bool SuggestMovePreparation(Pawn Other)
{
    if(Other.Base == MyLift)
    {
        return false;
    }
    if((Base != MyLift) || Location != (MyLift.Location + LiftOffset))
    {
        SetLocation(MyLift.Location + LiftOffset);
        SetBase(MyLift);
    }
    if(!IsZero(MyLift.Velocity) || !ProceedWithMove(Other))
    {
        Other.Controller.WaitForMover(MyLift);
        return true;
    }
    return false;
}

function bool ProceedWithMove(Pawn Other)
{
    if(Other.Controller == none)
    {
        return false;        
    }
    else
    {
        if((LiftExit(Other.Controller.MoveTarget) != none) && Other.ReachedDestination(self))
        {
            return LiftExit(Other.Controller.MoveTarget).CanBeReachedFromLiftBy(Other);            
        }
        else
        {
            if((((Location.Z - CollisionHeight) < (((Other.Location.Z - Other.GetCollisionHeight()) + Other.MaxStepHeight) + 2)) && (Location.Z - CollisionHeight) > ((Other.Location.Z - Other.GetCollisionHeight()) - float(1200))) && (VSize2D(Location - Other.Location) < MaxDist2D) || (IsZero(MyLift.Velocity) && Other.ValidAnchor()) && LiftExit(Other.Anchor) != none)
            {
                return true;
            }
        }
    }
    if(((LiftTrigger != none) && !LiftTrigger.bRecentlyTriggered) && IsZero(MyLift.Velocity))
    {
        Other.SetMoveTarget(LiftTrigger);
        return true;
    }
    return false;
}

defaultproperties
{
    MaxDist2D=400
    CollisionHeight=50
    bNeverUseStrafing=true
    bForceNoStrafing=true
    bSpecialMove=true
    bNoAutoConnect=true
    ExtraCost=400
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__LiftCenter.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.lift_center'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftCenter.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftCenter.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.lift_center'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftCenter.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftCenter.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__LiftCenter.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__LiftCenter.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__LiftCenter.PathRenderer'
    Components(4)=PathRenderer
    CollisionType=ECollisionType.COLLIDE_CustomDefault
    bStatic=false
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__LiftCenter.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}