/*******************************************************************************
 * ParticleSystem generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ParticleSystem extends Object
    native(Particle)
    hidecategories(Object);

enum EParticleSystemUpdateMode
{
    EPSUM_RealTime,
    EPSUM_FixedTime,
    EPSUM_MAX
};

enum ParticleSystemLODMethod
{
    PARTICLESYSTEMLODMETHOD_Automatic,
    PARTICLESYSTEMLODMETHOD_DirectSet,
    PARTICLESYSTEMLODMETHOD_ActivateAutomatic,
    PARTICLESYSTEMLODMETHOD_MAX
};

enum EParticleSystemOcclusionBoundsMethod
{
    EPSOBM_None,
    EPSOBM_ParticleBounds,
    EPSOBM_CustomBounds,
    EPSOBM_MAX
};

enum EParticleSystemOveridePhysXLevel
{
    EPSOP_NoOverride,
    EPSOP_PhysXLevel1,
    EPSOP_PhysXLevel2,
    EPSOP_MAX
};

struct native ParticleSystemLOD
{
    /**  
     *Boolean to indicate whether the particle system accepts lights or not.
     *        This must not be changed in-game, it can only be changed safely in the editor through Cascade.
     */
    var() bool bLit;

    structdefaultproperties
    {
        bLit=false
    }
};

struct native LODSoloTrack
{
    var transient array<byte> SoloEnableSetting;

    structdefaultproperties
    {
        SoloEnableSetting=none
    }
};

var() ParticleSystem.EParticleSystemUpdateMode SystemUpdateMode;
/**  
 *The method of LOD level determination to utilize for this particle system
 *         PARTICLESYSTEMLODMETHOD_Automatic - Automatically set the LOD level, checking every LODDistanceCheckTime seconds.
 *    PARTICLESYSTEMLODMETHOD_DirectSet - LOD level is directly set by the game code.
 *    PARTICLESYSTEMLODMETHOD_ActivateAutomatic - LOD level is determined at Activation time, then left alone unless directly set by game code.
 */
var(LOD) ParticleSystem.ParticleSystemLODMethod LODMethod;
/**  
 *Which occlusion bounds method to use for this particle system.
 *       EPSOBM_None - Don't determine occlusion for this system.
 *       EPSOBM_ParticleBounds - Use the bounds of the component when determining occlusion.
 */
var(Occlusion) ParticleSystem.EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod;
/** Minimum PhysX Level Extend */
var(PhysXParticleExtension) ParticleSystem.EParticleSystemOveridePhysXLevel MinimumPhysXLevelExt<DisplayName=Minimum PhysX Level Extension>;
/** Minimum PhysX Level Override */
var(PhysXParticleOverride) ParticleSystem.EParticleSystemOveridePhysXLevel MinimumPhysXLevelOverride<DisplayName=Minimum PhysX Level Override>;
/** UpdateTime_FPS - the frame per second to update at in FixedTime mode */
var() float UpdateTime_FPS;
var float UpdateTime_Delta;
/** WarmupTime     - the time to warm-up the particle system when first rendered */
var() float WarmupTime;
/**  
 *WarmupTickRate - the time step for each tick during warm up.
 *       Increasing this improves performance. Decreasing, improves accuracy.
 *       Set to 0 to use the default tick time.
 */
var() float WarmupTickRate;
var export editinline array<export editinline ParticleEmitter> Emitters;
var export editinline transient ParticleSystemComponent PreviewComponent;
var editoronly Rotator ThumbnailAngle;
var editoronly float ThumbnailDistance;
/** The time to warm-up the system for the thumbnail image */
var(Thumbnail) editoronly float ThumbnailWarmup;
var const deprecated bool bLit;
/** If true, the system's Z axis will be oriented toward the camera */
var() bool bOrientZAxisTowardCamera;
var bool bRegenerateLODDuplicate;
/** Whether to use the fixed relative bounding box or calculate it every frame. */
var(Bounds) bool bUseFixedRelativeBoundingBox;
var bool bShouldResetPeakCounts;
var transient bool bHasPhysics;
/** Inidicates the old 'real-time' thumbnail rendering should be used */
var(Thumbnail) bool bUseRealtimeThumbnail;
var bool ThumbnailImageOutOfDate;
/**  
 *When TRUE, do NOT perform the spawning limiter check.
 *       Intended for effects used in pre-rendered cinematics.
 */
var() bool bSkipSpawnCountCheck;
/**  
 *If TRUE, select the emitter delay from the range 
 *               [DelayLow..Delay]
 */
var(Delay) bool bUseDelayRange;
var export InterpCurveEdSetup CurveEdSetup;
/** How often (in seconds) the system should perform the LOD distance check. */
var(LOD) float LODDistanceCheckTime;
/**  
 *The array of distances for each LOD level in the system.
 *       Used when LODMethod is set to PARTICLESYSTEMLODMETHOD_Automatic.
 * 
 *       Example: System with 3 LOD levels
 *               LODDistances(0) = 0.0
 *               LODDistances(1) = 2500.0
 *               LODDistances(2) = 5000.0
 * 
 *               In this case, when the system is [   0.0 ..   2499.9] from the camera, LOD level 0 will be used.
 *                                                                                [2500.0 ..   4999.9] from the camera, LOD level 1 will be used.
 *                                                                                [5000.0 .. INFINITY] from the camera, LOD level 2 will be used.
 */
var(LOD) editfixedsize array<float> LODDistances;
var editoronly int EditorLODSetting;
var(LOD) array<ParticleSystemLOD> LODSettings;
/** Fixed relative bounding box for particle system. */
var(Bounds) Box FixedRelativeBoundingBox;
/**  
 *Number of seconds of emitter not being rendered that need to pass before it
 * no longer gets ticked/ becomes inactive.
 */
var() float SecondsBeforeInactive;
var editoronly string FloorMesh;
var editoronly Vector FloorPosition;
var editoronly Rotator FloorRotation;
var editoronly float FloorScale;
var editoronly Vector FloorScale3D;
var editoronly Color BackgroundColor;
var editoronly Texture2D ThumbnailImage;
/** How long this Particle system should delay when ActivateSystem is called on it. */
var(Delay) float Delay;
/** The low end of the emitter delay if using a range. */
var(Delay) float DelayLow;
/** Local space position that UVs generated with the ParticleMacroUV material node will be centered on. */
var(MacroUV) Vector MacroUVPosition;
/** World space radius that UVs generated with the ParticleMacroUV material node will tile based on. */
var(MacroUV) float MacroUVRadius;
/** The occlusion bounds to use if OcclusionBoundsMethod is set to EPSOBM_CustomBounds */
var(Occlusion) Box CustomOcclusionBounds;
var transient array<LODSoloTrack> SoloTracking;
/** Extended Particle System Reference */
var(PhysXParticleExtension) ParticleSystem PhysxParticleSystemExtRef;
/**  
 *PhysX Particle System Reference acts like an override
 * The referenced Particle System will replace the original Particle System
 * When it is on non-console platform and PhysXLevel setting matches the LoadIfPhysXLevel setting
 */
var(PhysXParticleOverride) ParticleSystem PhysxParticleSystemRef;

// Export UParticleSystem::execEffectiveParticleSystemAfterPhysXOverride(FFrame&, void* const)
native function ParticleSystem EffectiveParticleSystemAfterPhysXOverride();

// Export UParticleSystem::execEffectiveParticleSystemAfterPhysXExtension(FFrame&, void* const)
native function EffectiveParticleSystemAfterPhysXExtension(out array<ParticleSystem> ExtensionTemplates);

// Export UParticleSystem::execGetCurrentLODMethod(FFrame&, void* const)
native function ParticleSystem.ParticleSystemLODMethod GetCurrentLODMethod();

// Export UParticleSystem::execGetLODLevelCount(FFrame&, void* const)
native function int GetLODLevelCount();

// Export UParticleSystem::execGetLODDistance(FFrame&, void* const)
native function float GetLODDistance(int LODLevelIndex);

// Export UParticleSystem::execSetCurrentLODMethod(FFrame&, void* const)
native function SetCurrentLODMethod(ParticleSystem.ParticleSystemLODMethod InMethod);

// Export UParticleSystem::execSetLODDistance(FFrame&, void* const)
native function bool SetLODDistance(int LODLevelIndex, float InDistance);

// Export UParticleSystem::execGetMaxLifespan(FFrame&, void* const)
native function float GetMaxLifespan(float InComponentDelay);

defaultproperties
{
    UpdateTime_FPS=60
    UpdateTime_Delta=1
    ThumbnailDistance=200
    ThumbnailWarmup=1
    ThumbnailImageOutOfDate=true
    LODDistanceCheckTime=0.25
    FixedRelativeBoundingBox=(Min=(X=-1,Y=-1,Z=-1),Max=(X=1,Y=1,Z=1),IsValid=0)
    FloorMesh="EditorMeshes.AnimTreeEd_PreviewFloor"
    FloorScale=1
    FloorScale3D=(X=1,Y=1,Z=1)
    MacroUVRadius=200
}