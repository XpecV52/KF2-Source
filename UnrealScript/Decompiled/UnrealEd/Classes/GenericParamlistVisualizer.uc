/*******************************************************************************
 * GenericParamlistVisualizer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GenericParamlistVisualizer extends GameStatsVisualizer
    native(GameStats)
    config(Editor);

cpptext
{
	/** Given a chance to initialize */
	virtual void Init();

	/** Reset the visualizer to initial state */
	virtual void Reset();

	/** 
	 * Draws all players with unique color within the given time period
	 * taking into account time/space jumps
	 * @param View - the view being drawn in
	 * @param PDI - draw interface for primitives
	 * @param ViewportType - type of viewport being draw (perspective, ortho)
	 */
	virtual void Visualize(const FSceneView* View, class FPrimitiveDrawInterface* PDI, ELevelViewportType ViewportType);

	/** Called before any database entries are given to the visualizer */
	virtual void BeginVisiting();

	/** Called at the end of database entry traversal, returns success or failure */
	virtual UBOOL EndVisiting();

	/** Returns the number of data points the visualizer is actively working with */
	virtual INT GetVisualizationSetCount() const;

	/** 
	 *	Retrieve some metadata about an event
	 * @param EventIndex - some visualizer relative index about the data to get metadata about
	 * @param MetadataString - return string containing information about the event requested
	 */
	virtual void GetMetadata(INT EventIndex, FString& MetadataString);


	/** Called when a hitproxy belonging to this visualizer is triggered */
	virtual void HandleHitProxy(struct HGameStatsHitProxy* HitProxy);

	virtual void Visit(class GenericParamListEntry* Entry); 

}

struct native Line
{
    var Vector LineStart;
    var Vector LineEnd;
    var LinearColor LineColor;
    var float Thickness;

    structdefaultproperties
    {
        LineStart=(X=0,Y=0,Z=0)
        LineEnd=(X=0,Y=0,Z=0)
        LineColor=(R=0,G=0,B=0,A=1)
        Thickness=0
    }
};

struct native DrawBox
{
    var Vector BoxLoc;
    var Vector Extent;
    var Color BoxColor;

    structdefaultproperties
    {
        BoxLoc=(X=0,Y=0,Z=0)
        Extent=(X=0,Y=0,Z=0)
        BoxColor=(B=0,G=0,R=0,A=0)
    }
};

struct native DrawSphere
{
    var Vector SphereLoc;
    var float Radius;
    var Color SphereColor;

    structdefaultproperties
    {
        SphereLoc=(X=0,Y=0,Z=0)
        Radius=0
        SphereColor=(B=0,G=0,R=0,A=0)
    }
};

struct native DrawAtom
{
    var array<Line> Lines;
    var array<DrawBox> Boxes;
    var array<DrawSphere> Spheres;
    var string ShortName;
    var string LongName;
    var Texture2D Sprite;
    var Vector Loc;
    var LinearColor Color;

    structdefaultproperties
    {
        Lines=none
        Boxes=none
        Spheres=none
        ShortName=""
        LongName=""
        Sprite=none
        Loc=(X=0,Y=0,Z=0)
        Color=(R=0,G=0,B=0,A=1)
    }
};

var array<DrawAtom> DrawAtoms;
var Texture2D DatumSprite;

defaultproperties
{
    FriendlyName="Generic Visualizer (for debug stats mostly)"
}