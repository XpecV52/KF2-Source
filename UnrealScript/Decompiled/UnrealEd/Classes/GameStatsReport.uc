/*******************************************************************************
 * GameStatsReport generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameStatsReport extends Object
    abstract
    native(GameStats)
    config(Editor);

cpptext
{
	/** Output the entire report in XML */
	virtual void WriteReport(FArchive& Ar);
	/** 
	 * Write the session header information to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteSessionHeader(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the any image reference information to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteImageMetadata(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the session metadata to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteMetadata(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the game stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteGameValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the team stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteTeamValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Fill out the information for a single team
	 * @param Team - XML object to fill in with data
	 * @param TeamIndex - team currently being written out
	 */	
	virtual void WriteTeamValue(FCategory& Team, INT TeamIndex);
	/** 
	 * Write the player stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WritePlayerValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Fill out the information for a single player
	 * @param Player - XML object to fill in with data
	 * @param PlayerIndex - player currently being written out
	 */	
	virtual void WritePlayerValue(FCategory& Player, INT PlayerIndex);
	/** 
	 * Write the weapon stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteWeaponValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the damage stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteDamageValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the projectile stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteProjectileValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Write the pawn stats data to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WritePawnValues(FArchive& Ar, INT IndentCount);
	/** 
	 * Write anything game specific to XML 
	 * @param Ar - archive to write out
	 * @param IndentCount - number of tabs to indent this information
	 */	
	virtual void WriteGameSpecificValues(FArchive& Ar, INT IndentCount) {}

	/**
     * Get an URL related this report
     * @param ReportType - report type to generate 
     * @return URL passed to a browser to view the report 
	 */
	virtual FString GetReportURL(EReportType ReportType) { return TEXT(""); } 
	/** @return the location of the file generated */
	virtual FString GetReportFilename(const FString& FileExt);

	/** @return list of heatmap queries to run on the database for this report */
	virtual void GetHeatmapQueries(TArray<FHeatmapQuery>& HeatmapQueries);

	/*
	 *   Get all the event columns to be displayed in the whole report 
	 * @param EventColumns - structure to add columns to
	 */
	virtual void GetAllEventColumns(TArray<INT>& EventColumns);
	/*
	 *   Get all the weapon events for a given time period (uses WeaponStatsColumns)
	 * @param ParentCategory - XML container to fill with the data
	 * @param TimePeriod - TimePeriod (0 game, 1+ round)
	 * @param WeaponEvents - the aggregate events structure to get the data from
	 * @param StatsReader - the file reader containing the weapon metadata
	 */
	void GetWeaponValuesForTimePeriod(FCategory& ParentCategory, INT TimePeriod, const struct FWeaponEvents& WeaponEvents, const class UGameplayEventsReader* StatsReader);
	/*
	 *   Get all the damage events for a given time period (uses DamageStatsColumns)
	 * @param ParentCategory - XML container to fill with the data
	 * @param TimePeriod - TimePeriod (0 game, 1+ round)
	 * @param DamageEvents - the aggregate events structure to get the data from
	 * @param StatsReader - the file reader containing the damage metadata
	 */
	void GetDamageValuesForTimePeriod(FCategory& ParentCategory, INT TimePeriod, const struct FDamageEvents& DamageEvents, const class UGameplayEventsReader* StatsReader);
	/*
	 *   Get all the projectile events for a given time period (uses ProjectileStatsColumns)
	 * @param ParentCategory - XML container to fill with the data
	 * @param TimePeriod - TimePeriod (0 game, 1+ round)
	 * @param ProjectileEvents - the aggregate events structure to get the data from
	 * @param StatsReader - the file reader containing the projectile metadata
	 */
	void GetProjectileValuesForTimePeriod(FCategory& ParentCategory, INT TimePeriod, const struct FProjectileEvents& ProjectileEvents, const class UGameplayEventsReader* StatsReader);
	/*
	 *   Get all the pawn events for a given time period (uses PawnStatsColumns)
	 * @param ParentCategory - XML container to fill with the data
	 * @param TimePeriod - TimePeriod (0 game, 1+ round)
	 * @param PawnEvents - the aggregate events structure to get the data from
	 * @param StatsReader - the file reader containing the pawn metadata
	 */
	void GetPawnValuesForTimePeriod(FCategory& ParentCategory, INT TimePeriod, const struct FPawnEvents& PawnEvents, const class UGameplayEventsReader* StatsReader);


}

enum EReportType
{
    RT_SingleSession,
    RT_Game,
    RT_MAX
};

struct native MetaKeyValuePair
{
    structcpptext
    {

		FMetaKeyValuePair()
		{}
		FMetaKeyValuePair(EEventParm)
		{
			appMemzero(this, sizeof(FMetaKeyValuePair));
		}
		FMetaKeyValuePair(const FString& InTag) : Tag(InTag) {}
	
    }

    var init string Tag;
    var init string Key;
    var init string Value;

    structdefaultproperties
    {
        Tag=""
        Key=""
        Value=""
    }
};

struct native Category
{
    structcpptext
    {

		FCategory()
		{}
		FCategory(EEventParm)
		{
			appMemzero(this, sizeof(FCategory));
		}
		FCategory(const FString& InTag, const FString& InHeader) : Tag(InTag), Header(InHeader), Id(INDEX_NONE) {}
	
    }

    var init string Tag;
    var init string Header;
    var int Id;
    var init array<init MetaKeyValuePair> KeyValuePairs;
    var init array<init Category> SubCategories;

    structdefaultproperties
    {
        Tag=""
        Header=""
        Id=0
        KeyValuePairs=none
        SubCategories=none
    }
};

struct native HeatmapQuery
{
    var string HeatmapName;
    var array<int> EventIDs;
    var string ImageFilename;

    structdefaultproperties
    {
        HeatmapName=""
        EventIDs=none
        ImageFilename=""
    }
};

var GameSessionInformation SessionInfo;
var transient GameStateObject GameState;
var transient GameplayEventsReader StatsFileReader;
var transient GameStatsAggregator Aggregator;
var array<int> HighlightEvents;
var array<int> GameStatsColumns;
var array<int> TeamStatsColumns;
var array<int> PlayerStatsColumns;
var array<int> WeaponStatsColumns;
var array<int> DamageStatsColumns;
var array<int> ProjectileStatsColumns;
var array<int> PawnStatsColumns;
var config string ReportBaseURL;

defaultproperties
{
    HighlightEvents(0)=10002
    HighlightEvents(1)=10003
    HighlightEvents(2)=10400
    HighlightEvents(3)=10004
    TeamStatsColumns(0)=10102
    TeamStatsColumns(1)=10103
    TeamStatsColumns(2)=10104
    TeamStatsColumns(3)=10100
    TeamStatsColumns(4)=10101
    PlayerStatsColumns(0)=10004
    PlayerStatsColumns(1)=10005
    PlayerStatsColumns(2)=10002
    PlayerStatsColumns(3)=10003
    PlayerStatsColumns(4)=10001
    WeaponStatsColumns(0)=10300
    DamageStatsColumns(0)=10200
    DamageStatsColumns(1)=10201
    DamageStatsColumns(2)=10202
    DamageStatsColumns(3)=10204
    DamageStatsColumns(4)=10203
    DamageStatsColumns(5)=10205
    PawnStatsColumns(0)=10400
}