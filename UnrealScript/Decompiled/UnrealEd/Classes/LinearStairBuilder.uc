/*******************************************************************************
 * LinearStairBuilder generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class LinearStairBuilder extends BrushBuilder
    hidecategories(Object,BrushBuilder);

var() int StepLength<ClampMin=1>;
var() int StepHeight<ClampMin=1>;
var() int StepWidth<ClampMin=1>;
var() int NumSteps<ClampMin=2|ClampMax=45>;
var() int AddToFirstStep;
var() name GroupName;

event bool Build()
{
    local int I, LastIdx, CurrentX, CurrentY, CurrentZ, Adjustment;

    if(((StepLength <= 0) || StepHeight <= 0) || StepWidth <= 0)
    {
        return BadParameters();
    }
    if((NumSteps <= 1) || NumSteps > 45)
    {
        return BadParameters("NumSteps must be greater than 1 and less than 46.");
    }
    BeginBrush(false, GroupName);
    CurrentX = 0;
    CurrentY = 0;
    CurrentZ = 0;
    LastIdx = GetVertexCount();
    Vertex3f(0, 0, float(-StepHeight));
    Vertex3f(0, float(StepWidth), float(-StepHeight));
    Vertex3f(float(StepLength * NumSteps), float(StepWidth), float(-StepHeight));
    Vertex3f(float(StepLength * NumSteps), 0, float(-StepHeight));
    Poly4i(1, 0, 1, 2, 3, 'Base');
    LastIdx += 4;
    Vertex3f(float(StepLength * NumSteps), float(StepWidth), float(-StepHeight));
    Vertex3f(float(StepLength * NumSteps), float(StepWidth), float((StepHeight * (NumSteps - 1)) + AddToFirstStep));
    Vertex3f(float(StepLength * NumSteps), 0, float((StepHeight * (NumSteps - 1)) + AddToFirstStep));
    Vertex3f(float(StepLength * NumSteps), 0, float(-StepHeight));
    Poly4i(1, 4, 5, 6, 7, 'back');
    LastIdx += 4;
    I = 0;
    J0x2F6:

    if(I < NumSteps)
    {
        CurrentX = I * StepLength;
        CurrentZ = (I * StepHeight) + AddToFirstStep;
        Vertex3f(float(CurrentX), float(CurrentY), float(CurrentZ));
        Vertex3f(float(CurrentX), float(CurrentY + StepWidth), float(CurrentZ));
        Vertex3f(float(CurrentX + StepLength), float(CurrentY + StepWidth), float(CurrentZ));
        Vertex3f(float(CurrentX + StepLength), float(CurrentY), float(CurrentZ));
        Poly4i(1, (LastIdx + (I * 4)) + 3, (LastIdx + (I * 4)) + 2, (LastIdx + (I * 4)) + 1, LastIdx + (I * 4), 'Step');
        ++ I;
        goto J0x2F6;
    }
    LastIdx += (NumSteps * 4);
    I = 0;
    J0x4DD:

    if(I < NumSteps)
    {
        CurrentX = I * StepLength;
        CurrentZ = (I * StepHeight) + AddToFirstStep;
        if(I == 0)
        {
            Adjustment = AddToFirstStep;            
        }
        else
        {
            Adjustment = 0;
        }
        Vertex3f(float(CurrentX), float(CurrentY), float(CurrentZ));
        Vertex3f(float(CurrentX), float(CurrentY), float((CurrentZ - StepHeight) - Adjustment));
        Vertex3f(float(CurrentX), float(CurrentY + StepWidth), float((CurrentZ - StepHeight) - Adjustment));
        Vertex3f(float(CurrentX), float(CurrentY + StepWidth), float(CurrentZ));
        Poly4i(1, (LastIdx + (I * 12)) + 3, (LastIdx + (I * 12)) + 2, (LastIdx + (I * 12)) + 1, LastIdx + (I * 12), 'Rise');
        Vertex3f(float(CurrentX), float(CurrentY), float(CurrentZ));
        Vertex3f(float(CurrentX), float(CurrentY), float((CurrentZ - StepHeight) - Adjustment));
        Vertex3f(float(CurrentX + (StepLength * (NumSteps - I))), float(CurrentY), float((CurrentZ - StepHeight) - Adjustment));
        Vertex3f(float(CurrentX + (StepLength * (NumSteps - I))), float(CurrentY), float(CurrentZ));
        Poly4i(1, (LastIdx + (I * 12)) + 4, (LastIdx + (I * 12)) + 5, (LastIdx + (I * 12)) + 6, (LastIdx + (I * 12)) + 7, 'Side');
        Vertex3f(float(CurrentX), float(CurrentY + StepWidth), float(CurrentZ));
        Vertex3f(float(CurrentX), float(CurrentY + StepWidth), float((CurrentZ - StepHeight) - Adjustment));
        Vertex3f(float(CurrentX + (StepLength * (NumSteps - I))), float(CurrentY + StepWidth), float((CurrentZ - StepHeight) - Adjustment));
        Vertex3f(float(CurrentX + (StepLength * (NumSteps - I))), float(CurrentY + StepWidth), float(CurrentZ));
        Poly4i(1, (LastIdx + (I * 12)) + 11, (LastIdx + (I * 12)) + 10, (LastIdx + (I * 12)) + 9, (LastIdx + (I * 12)) + 8, 'Side');
        ++ I;
        goto J0x4DD;
    }
    return EndBrush();
}

defaultproperties
{
    StepLength=32
    StepHeight=16
    StepWidth=256
    NumSteps=8
    GroupName=LinearStair
    BitmapFilename="Btn_Staircase"
    ToolTip="BrushBuilderName_LinearStair"
}