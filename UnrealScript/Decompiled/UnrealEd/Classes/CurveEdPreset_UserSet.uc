/*******************************************************************************
 * CurveEdPreset_UserSet generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CurveEdPreset_UserSet extends CurveEdPresetBase
    native
    editinlinenew
    hidecategories(Object);

var() CurveEdPresetCurve UserCurve;

function string GetDisplayName()
{
    local string Retval;

    Retval = "User-Set";
    return Retval;
}

function bool AreSettingsValid(bool bIsSaving)
{
    if(bIsSaving)
    {
        if(UserCurve == none)
        {
            return false;
        }        
    }
    else
    {
        if(UserCurve == none)
        {
            return false;
        }
    }
    return true;
}

function bool GetRequiredKeyInTimes(out array<float> RequiredKeyInTimes)
{
    local bool bRetval;
    local int GenerateCount, PointCount;

    bRetval = true;
    if(UserCurve != none)
    {
        GenerateCount = UserCurve.Points.Length;
        if(GenerateCount > 0)
        {
            RequiredKeyInTimes.Insert(0, GenerateCount;
            PointCount = 0;
            J0x73:

            if(PointCount < GenerateCount)
            {
                RequiredKeyInTimes[PointCount] = UserCurve.Points[PointCount].KeyIn;
                ++ PointCount;
                goto J0x73;
            }            
        }
        else
        {
            bRetval = false;
        }        
    }
    else
    {
        bRetval = false;
    }
    return bRetval;
}

function bool GenerateCurve(out array<float> RequiredKeyInTimes, out array<PresetGeneratedPoint> GeneratedPoints)
{
    local bool bRetval;
    local int GenerateCount, PointCount;
    local float CurrentKeyIn;

    bRetval = true;
    GenerateCount = RequiredKeyInTimes.Length;
    GeneratedPoints.Insert(0, GenerateCount;
    PointCount = 0;
    J0x40:

    if(PointCount < RequiredKeyInTimes.Length)
    {
        CurrentKeyIn = RequiredKeyInTimes[PointCount];
        GeneratedPoints[PointCount].KeyIn = CurrentKeyIn;
        GeneratedPoints[PointCount].TangentsValid = false;
        GeneratedPoints[PointCount].IntepMode = 1;
        GeneratedPoints[PointCount].KeyOut = UserCurve.Points[PointCount].KeyOut;
        GeneratedPoints[PointCount].TangentIn = UserCurve.Points[PointCount].TangentIn;
        GeneratedPoints[PointCount].TangentOut = UserCurve.Points[PointCount].TangentOut;
        LogInternal((((("    Key " $ string(PointCount)) $ " - ") $ string(CurrentKeyIn)) $ " - ") $ string(GeneratedPoints[PointCount].KeyOut));
        ++ PointCount;
        goto J0x40;
    }
    return bRetval;
}

function bool SetCurve(array<PresetGeneratedPoint> GeneratedPoints)
{
    local bool bRetval;

    bRetval = true;
    return bRetval;
}

function bool LoadUserSetPointFile()
{
    local bool bRetval;

    bRetval = true;
    return bRetval;
}

function bool SaveUserSetPointFile()
{
    local bool bRetval;

    bRetval = true;
    return bRetval;
}
