/*******************************************************************************
 * CurveEdPreset_LinearDecay generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CurveEdPreset_LinearDecay extends CurveEdPresetBase
    native
    editinlinenew
    hidecategories(Object);

var() float StartDecay;
var() float StartValue;
var() float EndDecay;
var() float EndValue;

function string GetDisplayName()
{
    local string Retval;

    Retval = "LinearDecay";
    return Retval;
}

function bool AreSettingsValid(bool bIsSaving)
{
    if(StartDecay >= EndDecay)
    {
        return false;
    }
    return true;
}

function bool GetRequiredKeyInTimes(out array<float> RequiredKeyInTimes)
{
    local bool bRetval;
    local int GenerateCount, PointCount;

    bRetval = true;
    GenerateCount = 2;
    if(StartDecay > 0)
    {
        GenerateCount += 1;
    }
    if(EndDecay < 1)
    {
        GenerateCount += 1;
    }
    RequiredKeyInTimes.Insert(0, GenerateCount;
    RequiredKeyInTimes[PointCount] = 0;
    ++ PointCount;
    if(StartDecay != 0)
    {
        RequiredKeyInTimes[PointCount] = StartDecay;
        ++ PointCount;
    }
    RequiredKeyInTimes[PointCount] = EndDecay;
    ++ PointCount;
    if(EndDecay < 1)
    {
        RequiredKeyInTimes[PointCount] = 1;
        ++ PointCount;
    }
    return bRetval;
}

function bool GenerateCurve(out array<float> RequiredKeyInTimes, out array<PresetGeneratedPoint> GeneratedPoints)
{
    local bool bRetval;
    local int GenerateCount, PointCount;
    local float CurrentKeyIn, Difference, Alpha;

    bRetval = true;
    GenerateCount = RequiredKeyInTimes.Length;
    GeneratedPoints.Insert(0, GenerateCount;
    Difference = EndDecay - StartDecay;
    PointCount = 0;
    J0x5E:

    if(PointCount < RequiredKeyInTimes.Length)
    {
        CurrentKeyIn = RequiredKeyInTimes[PointCount];
        GeneratedPoints[PointCount].KeyIn = CurrentKeyIn;
        GeneratedPoints[PointCount].TangentsValid = false;
        GeneratedPoints[PointCount].IntepMode = 1;
        if(CurrentKeyIn < StartDecay)
        {
            GeneratedPoints[PointCount].KeyOut = StartValue;            
        }
        else
        {
            if(CurrentKeyIn > EndDecay)
            {
                GeneratedPoints[PointCount].KeyOut = EndValue;                
            }
            else
            {
                Alpha = (CurrentKeyIn - StartDecay) / Difference;
                GeneratedPoints[PointCount].KeyOut = Lerp(StartValue, EndValue, Alpha);
            }
        }
        ++ PointCount;
        goto J0x5E;
    }
    return bRetval;
}

defaultproperties
{
    StartValue=1
    EndDecay=1
}