/*******************************************************************************
 * MaterialEditorInstanceConstant generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MaterialEditorInstanceConstant extends Object
    native
    collapsecategories
    hidecategories(Object);

cpptext
{
	/**Fix up for deprecated properties*/
	virtual void PostLoad();

	// UObject interface.
	virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent);

	/** Regenerates the parameter arrays. */
	void RegenerateArrays();

	/** Copies the parameter array values back to the source instance. */
	void CopyToSourceInstance();

	/** Copies static parameters to the source instance, which will be marked dirty if a compile was necessary */
	void CopyStaticParametersToSourceInstance();

	/** 
	 * Sets the source instance for this object and regenerates arrays. 
	 *
	 * @param MaterialInterface		Instance to use as the source for this material editor instance.
	 */
	void SetSourceInstance(UMaterialInstanceConstant* MaterialInterface);

	/** 
	 *  Returns group for parameter. Creates one if needed. 
	 *
	 * @param	InParameterGroupName	Name to be looked for.
	 * @param	InParameterGroups		The array of groups to look in
	 */
	FEditorParameterGroup& GetParameterGroup(FName& InParameterGroupName, TArrayNoInit<struct FEditorParameterGroup>& InParameterGroups);

	/** 
	 *  Creates/adds value to group retrieved from parent material . 
	 *
	 * @param ParentMaterial		Name of material to search for groups.
	 * @param ParameterValue		Current data to be grouped
	 */
	void AssignParameterToGroup(UMaterial* ParentMaterial, UDEditorParameterValue * ParameterValue);

	/** Regenerates the mobile parameter arrays. */
	void RegenerateMobileArrays();

	/** 
	 *	Generate the mobile parameter entries for the given group.
	 *
	 *	@param	InGroupName		The group to generate
	 */
	UBOOL GenerateMobileParameterEntries(FName& InGroupName);

	/** Copies the mobile parameter array values back to the source instance. */
	void CopyMobileParametersToSourceInstance();

}

struct native EditorParameterGroup
{
    var name GroupName;
    var() const editfixedsize editinline array<editinline DEditorParameterValue> Parameters;

    structdefaultproperties
    {
        GroupName=None
        Parameters=none
    }
};

struct native EditorParameterValue
{
    var() bool bOverride;
    var() name ParameterName;
    var Guid ExpressionId;

    structdefaultproperties
    {
        bOverride=false
        ParameterName=None
        ExpressionId=(A=0,B=0,C=0,D=0)
    }
};

struct native EditorVectorParameterValue extends EditorParameterValue
{
    var() LinearColor ParameterValue;

    structdefaultproperties
    {
        ParameterValue=(R=0,G=0,B=0,A=1)
    }
};

struct native EditorScalarParameterValue extends EditorParameterValue
{
    var() float ParameterValue;
};

struct native EditorTextureParameterValue extends EditorParameterValue
{
    var() Texture ParameterValue;
};

struct native EditorFontParameterValue extends EditorParameterValue
{
    var() Font FontValue;
    var() int FontPage;
};

struct native EditorStaticSwitchParameterValue extends EditorParameterValue
{
    structcpptext
    {

	/** Constructor */
	FEditorStaticSwitchParameterValue(const FStaticSwitchParameter& InParameter) : ParameterValue(InParameter.Value)
	{
		//initialize base class members
		bOverride = InParameter.bOverride;
		ParameterName = InParameter.ParameterName;
		ExpressionId = InParameter.ExpressionGUID;
	}

    }

    var() bool ParameterValue;
};

struct native ComponentMaskParameter
{
    structcpptext
    {

	/** Constructor */
	FComponentMaskParameter(UBOOL InR, UBOOL InG, UBOOL InB, UBOOL InA) :
		R(InR),
		G(InG),
		B(InB),
		A(InA)
	{
	}

    }

    var() bool R;
    var() bool G;
    var() bool B;
    var() bool A;

    structdefaultproperties
    {
        R=false
        G=false
        B=false
        A=false
    }
};

struct native EditorStaticComponentMaskParameterValue extends EditorParameterValue
{
    structcpptext
    {

	/** Constructor */
	FEditorStaticComponentMaskParameterValue(const FStaticComponentMaskParameter& InParameter) : ParameterValue(InParameter.R, InParameter.G, InParameter.B, InParameter.A)
	{
		//initialize base class members
		bOverride = InParameter.bOverride;
		ParameterName = InParameter.ParameterName;
		ExpressionId = InParameter.ExpressionGUID;
	}

    }

    var() ComponentMaskParameter ParameterValue;
};

/** Physical material to use for this graphics material. Used for sounds, effects etc. */
var() PhysicalMaterial PhysMaterial;
/** Physical material mask settings to use. */
var() PhysicalMaterialMaskSettings PhysicalMaterialMask;
/** since the Parent may point across levels and the property editor needs to import this text, it must be marked crosslevel so it doesn't set itself to NULL in FindImportedObject */
var() crosslevelpassive MaterialInterface Parent;
var() editfixedsize editinline array<editinline EditorParameterGroup> ParameterGroups;
/** Mobile parameters */
var() editfixedsize editinline array<editinline EditorParameterGroup> MobileParameterGroups;
var MaterialInstanceConstant SourceInstance;
var duplicatetransient const transient array<Guid> VisibleExpressions;
var deprecated Texture FlattenedTexture;
var deprecated Texture MobileBaseTexture;
var deprecated Texture MobileEmissiveTexture;
var deprecated Texture MobileDetailTexture;
var deprecated Texture MobileEnvironmentTexture;
var deprecated Texture MobileNormalTexture;
var deprecated Texture MobileMaskTexture;
/** The Lightmass override settings for this object. */
var(Lightmass) LightmassParameterizedMaterialSettings LightmassSettings;
/** Should we use old style typed arrays for unassigned parameters instead of a None group (new style)? */
var() bool bUseOldStyleMICEditorGroups;

defaultproperties
{
    Parent=none
    LightmassSettings=(CastShadowAsMasked=(ParameterValue=false,bOverride=false),EmissiveBoost=(ParameterValue=1,bOverride=false),DiffuseBoost=(ParameterValue=1,bOverride=false),SpecularBoost=(ParameterValue=1,bOverride=false),ExportResolutionScale=(ParameterValue=1,bOverride=false),DistanceFieldPenumbraScale=(ParameterValue=1,bOverride=false))
}