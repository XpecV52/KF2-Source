/*******************************************************************************
 * PlayerMovementVisualizer generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PlayerMovementVisualizer extends GameStatsVisualizer
    native(GameStats)
    config(Editor);

cpptext
{
	/** Given a chance to initialize */
	virtual void Init();

	/** Reset the visualizer to initial state */
	virtual void Reset();

	/** 
	 * Draws all players with unique color within the given time period
	 * taking into account time/space jumps
	 * @param View - the view being drawn in
	 * @param PDI - draw interface for primitives
	 * @param ViewportType - type of viewport being draw (perspective, ortho)
	 */
	virtual void Visualize(const FSceneView* View, class FPrimitiveDrawInterface* PDI, ELevelViewportType ViewportType);

	/** Called before any database entries are given to the visualizer */
	virtual void BeginVisiting();

	/** Called at the end of database entry traversal, returns success or failure */
	virtual UBOOL EndVisiting();

	/** Returns the number of data points the visualizer is actively working with */
	virtual INT GetVisualizationSetCount() const;

	/** 
	 *	Retrieve some metadata about an event
	 * @param EventIndex - some visualizer relative index about the data to get metadata about
	 * @param MetadataString - return string containing information about the event requested
	 */
	virtual void GetMetadata(INT EventIndex, FString& MetadataString);

	/** 
	* Return the drawing properties defined for the given player 
	* @param PawnClassName - Name of the pawn spawned
	*/
	const FPlayerMovementStatDrawingProperties& GetDrawingProperties(const FString& PawnClassName);

	/** Called when a hitproxy belonging to this visualizer is triggered */
	virtual void HandleHitProxy(struct HGameStatsHitProxy* HitProxy);

	/** Player locations during the game are stored as PlayerIntEntries */
	virtual void Visit(class PlayerIntEntry* Entry); 

	/** Player spawns reveal the pawn class in use so we can choose a sprite */
	virtual void Visit(class PlayerSpawnEntry* Entry); 

	/** Create or find a given player entry by index */
	FPlayerMovement& CreateOrFindPlayerEntry(INT PlayerIndex, const FString& PlayerName);

}

struct native PlayerMovementStatDrawingProperties
{
    var string PawnClassName;
    var string SpriteName;
    var Texture2D StatSprite;

    structdefaultproperties
    {
        PawnClassName=""
        SpriteName=""
        StatSprite=none
    }
};

struct native PosEntry
{
    var float Time;
    var Vector Position;
    var Rotator Rotation;

    structdefaultproperties
    {
        Time=0
        Position=(X=0,Y=0,Z=0)
        Rotation=(Pitch=0,Yaw=0,Roll=0)
    }
};

struct native MovementSegment
{
    var array<PosEntry> Positions;

    structdefaultproperties
    {
        Positions=none
    }
};

struct native PlayerMovement
{
    var int PlayerIndex;
    var string PlayerName;
    var array<MovementSegment> Segments;
    var Texture2D StatSprite;
    var array<PosEntry> TempPositions;

    structdefaultproperties
    {
        PlayerIndex=0
        PlayerName=""
        Segments=none
        StatSprite=none
        TempPositions=none
    }
};

var array<PlayerMovement> Players;
var const config array<config PlayerMovementStatDrawingProperties> DrawingProperties;

defaultproperties
{
    FriendlyName="Player Movement Visualizer"
}