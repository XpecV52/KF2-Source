/*******************************************************************************
 * PluginBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PluginBase extends Object
    abstract
    native(Plugin);

var PlugInOwnerInterface PlugInOwner;
var const bool bIsPluginEnabled;
var bool bAborted;
var bool bFailure;
var bool bSuccess;
var BaseAiPlugInHistory OwnersAiPlugInHistory;
var string HistoryString;
/** Exiting status of this plugin */
var() transient string StatusStr;

// Export UPluginBase::execDisablePlugin(FFrame&, void* const)
native function DisablePlugin();

// Export UPluginBase::execEnablePlugin(FFrame&, void* const)
native function EnablePlugin();

simulated function DrawDebugToHud(HUD HUD, name Category);

event ScriptInitialize()
{
    bAborted = false;
    bFailure = false;
    bSuccess = false;
}

event DrawDebug(HUD H, name Category);

function UpdateCommandHistory()
{
    local int I;

    if(NotEqual_InterfaceInterface(PlugInOwner, (none)))
    {
        if(OwnersAiPlugInHistory == none)
        {
            OwnersAiPlugInHistory = PlugInOwner.GetAiPlugInHistory();
        }
        I = 0;
        J0x64:

        if(I < OwnersAiPlugInHistory.PlugInHistory.Length)
        {
            if((OwnersAiPlugInHistory.PlugInHistory[I].PlugInName != "") && OwnersAiPlugInHistory.PlugInHistory[I].PlugInName == string(Name))
            {
                if(bAborted)
                {
                    OwnersAiPlugInHistory.PlugInHistory[I].bAborted = true;
                }
                if(bFailure)
                {
                    OwnersAiPlugInHistory.PlugInHistory[I].bFailure = true;
                }
                if(bSuccess)
                {
                    OwnersAiPlugInHistory.PlugInHistory[I].bSuccess = true;
                }
                UpdateHistoryString("Status: " $ StatusStr);
                OwnersAiPlugInHistory.PlugInHistory[I].Duration = PlugInOwner.GetTimeSince(OwnersAiPlugInHistory.PlugInHistory[I].TimeStamp);
                OwnersAiPlugInHistory.PlugInHistory[I].VerboseString = HistoryString;
            }
            ++ I;
            goto J0x64;
        }
    }
}

function UpdateHistoryString(string AddString)
{
    if(NotEqual_InterfaceInterface(PlugInOwner, (none)))
    {
        if(OwnersAiPlugInHistory == none)
        {
            OwnersAiPlugInHistory = PlugInOwner.GetAiPlugInHistory();
        }
        if(OwnersAiPlugInHistory.PlugInHistoryNum > 0)
        {
            HistoryString = (HistoryString $ " ") $ AddString;
        }
    }
}

event string GetDebugVerboseText()
{
    return HistoryString;
}

defaultproperties
{
    bIsPluginEnabled=true
    HistoryString="[I]"
}