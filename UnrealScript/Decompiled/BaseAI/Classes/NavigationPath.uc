/*******************************************************************************
 * NavigationPath generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NavigationPath extends Object;

struct BaseTransform
{
    var private const Actor Base;
    var private const Vector InitialLocation;
    var private const Rotator InitialRotation;
    var private const Vector UpdatedForLocation;
    var private const Rotator UpdatedForRotation;
    var private const Matrix InitialReversedTransform;
    var private const Matrix IBS2WSTransform;
    var private const Matrix WS2IBSTransform;

    structdefaultproperties
    {
        Base=none
        InitialLocation=(X=0,Y=0,Z=0)
        InitialRotation=(Pitch=0,Yaw=0,Roll=0)
        UpdatedForLocation=(X=0,Y=0,Z=0)
        UpdatedForRotation=(Pitch=0,Yaw=0,Roll=0)
        InitialReversedTransform=(XPlane=(W=0,X=0,Y=0,Z=0),YPlane=(W=0,X=0,Y=0,Z=0),ZPlane=(W=0,X=0,Y=0,Z=0),WPlane=(W=0,X=0,Y=0,Z=0))
        IBS2WSTransform=(XPlane=(W=0,X=0,Y=0,Z=0),YPlane=(W=0,X=0,Y=0,Z=0),ZPlane=(W=0,X=0,Y=0,Z=0),WPlane=(W=0,X=0,Y=0,Z=0))
        WS2IBSTransform=(XPlane=(W=0,X=0,Y=0,Z=0),YPlane=(W=0,X=0,Y=0,Z=0),ZPlane=(W=0,X=0,Y=0,Z=0),WPlane=(W=0,X=0,Y=0,Z=0))
    }
};

struct PathPoint
{
    var Vector Location;
    var byte Flags;

    structdefaultproperties
    {
        Location=(X=0,Y=0,Z=0)
        Flags=0
    }
};

struct PolyArray_Mirror
{
    var init array<init int> Dummy;

    structdefaultproperties
    {
        Dummy=none
    }
};

var init const array<init PathPoint> PathPoints;
var private const PolyArray_Mirror PolysUsed;
var const BaseTransform Base;
var const Vector LocalDestination;
var private const bool bDynamic;
var const int Version;

final function Vector GetElementPos(int Index);

final function SetRoute(array<PathPoint> Route);

final function Vector WorldToLocal(Vector InLocation);

final function DrawPath(Canvas Canvas, optional byte R, optional byte G, optional byte B, optional bool bPersistent)
{
    R = 0;
    G = 255;
    B = 128;    
}
