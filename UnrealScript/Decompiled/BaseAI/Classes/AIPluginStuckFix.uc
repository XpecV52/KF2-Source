/*******************************************************************************
 * AIPluginStuckFix generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AIPluginStuckFix extends AITickablePlugin within BaseAIController
    abstract
    native(Plugin);

struct native FixStuckRequest
{
    var native MoveParameters MoveParams;
    var float AcceptableDistance;
    var Vector DestOffset;
    var native MoveRequestDestination Destination;
    var BaseAITypes.EActionPriority Priority;
    var const Object Observer;
    var bool bFinalApproach;
    var int QueryID;

    structdefaultproperties
    {
        AcceptableDistance=0
        DestOffset=(X=0,Y=0,Z=0)
        Priority=EActionPriority.AP_Invalid
        Observer=none
        bFinalApproach=false
        QueryID=0
    }
};

var FixStuckRequest MoveRequest;
var const BaseAITypes.EActionPriority ActionPriority;
var const BaseAITypes.EActionPriority MovementLock;
var const transient bool bObserverNotified;
var const transient bool bDontNotifyObserver;
var transient bool bDontRestartByKismet;

function bool StuckFixToPointRequest(Vector InDestLocation, BaseAITypes.EActionPriority CommandPriority, optional Object ActionObserver, optional bool bStopAtEnd, optional bool bStickToNavmesh, optional float AcceptableDistance, optional Actor RotateAtEndToMatch)
{
    bStopAtEnd = true;
    bStickToNavmesh = true;        
}

function bool StuckFixToActorRequest(Actor inPawnGoal, BaseAITypes.EActionPriority CommandPriority, optional Object ActionObserver, optional bool bInAllowedToFire, optional float AcceptableDistance, optional Vector DestOffset, optional Vector MidPointOffset, optional bool bDynamicMidPoint, optional bool bStopAtEnd, optional bool bStickToNavmesh)
{
    bInAllowedToFire = true;                
    bStopAtEnd = true;
    bStickToNavmesh = true;
}

event bool AbortMove(bool bNewRequest);

function SetMovementLock(bool bLock, optional BaseAITypes.EActionPriority Priority, optional bool bNewRequest)
{
    Priority = 1;    
}

protected function Success();

protected function Failure();

// Export UAIPluginStuckFix::execGetDestination(FFrame&, void* const)
native final function Vector GetDestination(out MovementRequest Request);

final function AIPluginMovement.EMoveRequestDestinationType GetDestinationType()
{
    return MoveRequest.Destination.Type;
}

function StopMovement();

function bool MoveUnreachable(Vector AttemptedDest, Actor AttemptedTarget)
{
    if(AttemptedTarget != none)
    {
        if(!Class'Engine'.static.GetEngine().bDisableAILogging)
        {
            Outer.AILog_Internal((string(GetFuncName()) $ " AttemptedTarget: ") $ string(AttemptedTarget), 'PathWarning');
        }
    }
    return false;
}

state Succeeding extends DebugState
{Begin:

    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal("Moving - END:" @ string(GetStateName()), 'Move');
    }
    Success();
    GotoState('Idling');
    stop;                    
}

state Failing extends DebugState
{Begin:

    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal("Moving - END:" @ string(GetStateName()), 'Move');
    }
    Failure();
    GotoState('Idling');
    stop;                    
}

state Aborting extends DebugState
{Begin:

    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal("Moving - Aborted", 'Move');
    }
    StopMovement();
    GotoState('Idling');
    stop;                    
}

state Idling extends DebugState
{Begin:

    if(!Class'Engine'.static.GetEngine().bDisableAILogging)
    {
        Outer.AILog_Internal("Idling", 'Move');
    }
    StopMovement();
    stop;                    
}

defaultproperties
{
    MoveRequest=(AcceptableDistance=0,DestOffset=(X=0,Y=0,Z=0),Priority=EActionPriority.AP_Invalid,Observer=none,bFinalApproach=false,QueryID=0)
}